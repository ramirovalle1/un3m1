import os
import sys
import io
import xlsxwriter
import xlwt
import openpyxl
import xlwt
from xlwt import *
from django.http import HttpResponse
from xlwt import *

# SITE_ROOT = os.path.dirname(os.path.realpath(__file__))
YOUR_PATH = os.path.dirname(os.path.realpath(__file__))
# print(f"YOUR_PATH: {YOUR_PATH}")
SITE_ROOT = os.path.dirname(os.path.dirname(YOUR_PATH))
SITE_ROOT = os.path.join(SITE_ROOT, '')
# print(f"SITE_ROOT: {SITE_ROOT}")
your_djangoproject_home = os.path.split(SITE_ROOT)[0]
# print(f"your_djangoproject_home: {your_djangoproject_home}")
sys.path.append(your_djangoproject_home)

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
application = get_wsgi_application()

from django.http import HttpResponse
from settings import MEDIA_ROOT, BASE_DIR
from xlwt import easyxf, XFStyle
from sga.adm_criteriosactividadesdocente import asistencia_tutoria
from inno.models import *
from sga.models import *
from sagest.models import *
from balcon.models import *
from sga.funciones import  fechatope
from Moodle_Funciones import crearhtmlphpmoodle
from inno.funciones import *
import concurrent.futures

# def cerrar_materias_transversales_4():
#     materias = Materia.objects.filter(status=True, nivel__periodo_id=177, cerrado=False,
#                                       asignaturamalla__malla__carrera__coordinacion__in=[4], modeloevaluativo_id=27)
#     for materia in materias:
#         print(materia)
#         for asig in materia.asignados_a_esta_materia():
#             asig.cerrado = True
#             asig.save(actualiza=False)
#             asig.actualiza_estado()
#         for asig in materia.asignados_a_esta_materia():
#             asig.cierre_materia_asignada()
#
#         materia.cerrado = True
#         materia.fechacierre = datetime.now().date()
#         materia.save()
#
# #cerrar_materias_transversales_4()
#
# def actualizar_nivel_inscripcion_malla3():
#     matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=177, inscripcion__carrera_id__in=[126] )
#     for matricula in matriculas:
#         inscripcion = matricula.inscripcion
#         print('ACTUALIZANDO- ', inscripcion.persona.cedula)
#         inscripcion.actualizar_nivel()
#         print('ACTUALIZADO')
#     print('FIN')
#
# #actualizar_nivel_inscripcion_malla3()
#
#
# def calificacion_transversales_en_linea():
#     try:
#         periodo = Periodo.objects.get(id=177)
#         asignaturas = DetalleGrupoAsignatura.objects.values_list('asignatura_id', flat=True).filter(status=True,
#                                                                                                     grupo_id__in=[1, 2,
#                                                                                                                   3])
#
#         materias = Materia.objects.filter(status=True, nivel__periodo_id=177,
#                                           asignaturamalla__asignatura_id__in=asignaturas,
#                                           modeloevaluativo_id=27, asignaturamalla__malla__carrera__coordinacion__in=[4])
#
#         for materia in materias:
#             idcursomoodle = materia.idcursomoodle
#             materiasasignadas = MateriaAsignada.objects.filter(status=True,
#                                                                matricula__nivel__periodo=periodo,
#                                                                materia=materia,
#                                                                matricula__bloqueomatricula=False,
#                                                                matricula__retiradomatricula=False, materia__status=True,
#                                                                matricula__status=True,
#                                                                matricula__inscripcion__carrera__modalidad__in=[1, 2, 3])
#
#             cursor = connections['moodle_db'].cursor()
#             for materiaasignada in materiasasignadas:
#                 # guardo_nota = False
#                 usuario = materiaasignada.matricula.inscripcion.persona.usuario.username
#                 # SE NECESITA EL ID DE CURSO MOODLE
#                 sql = """
#                                                     SELECT ROUND(nota.finalgrade,2), UPPER(gc.fullname)
#                                                             FROM mooc_grade_grades nota
#                                                     INNER JOIN mooc_grade_items it ON nota.itemid=it.id AND courseid=%s AND itemtype='category'
#                                                     INNER JOIN mooc_grade_categories gc ON gc.courseid=it.courseid AND gc.id=it.iteminstance AND gc.depth=2
#                                                     INNER JOIN mooc_user us ON nota.userid=us.id
#                                                     WHERE us.username = '%s' and UPPER(gc.fullname)='RE'
#                                                     ORDER BY it.sortorder
#                                                 """ % (str(idcursomoodle), usuario)
#
#                 cursor.execute(sql)
#                 results = cursor.fetchall()
#                 if results:
#                     for notasmooc in results:
#                         campo = materiaasignada.campo(notasmooc[1].upper())
#                         if not campo:
#                             print('revisar curso moodle - ', materiaasignada.materia.id, 'idcursomoodle -',
#                                   materiaasignada.materia.idcursomoodle)
#                             continue
#                         if type(notasmooc[0]) is Decimal:
#                             if null_to_decimal(campo.valor) != float(notasmooc[0]):
#                                 actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
#                                 auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
#                                                                 calificacion=notasmooc[0])
#                                 auditorianotas.save()
#                                 print('importacion exitosa - ', materiaasignada)
#
#                         else:
#                             if null_to_decimal(campo.valor) != float(0):
#                                 actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
#                                 auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
#                                 auditorianotas.save()
#                                 print('importacion exitosa - ', materiaasignada)
#
#                 else:
#                     detallemodelo = DetalleModeloEvaluativo.objects.get(pk=125)
#                     campo = materiaasignada.campo(detallemodelo.nombre)
#                     actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
#                     auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
#                     auditorianotas.save()
#
#             for asig in materia.asignados_a_esta_materia():
#                 asig.cerrado = True
#                 asig.save(actualiza=False)
#                 asig.actualiza_estado()
#                 asig.cierre_materia_asignada()
#
#             print('PROCESO FINALIZADO')
#
#
#
#
#
#
#     except Exception as ex:
#         msg = ex.__str__()
#
#         textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#         print(textoerror)
#         print(msg)
#
#
# #calificacion_transversales_en_linea()
#
# def matricula_admision_derecho():
#     with transaction.atomic():
#         try:
#             cedulas = ['1004401459',
#     '0202031738',
#     '0707012266',
#     '1003157912',
#     '0751132697',
#     '1725445751',
#     '0705992386',
#     '0603784091',
#     '1203014129',
#     '2300200934',
#     '0915604508',
#     '1850923721',
#     '1310665805',
#     '0804421865',
#     '0958178931',
#     '1312045774',
#     '1501029340',
#     '0705008332',
#     '1207008184',
#     '1204376188',
#     '0923122030',
#     '0950992594',
#     '0929022077',
#     '0504312919',
#     '2000094512',
#     '1207101377',
#     '0605806843',
#     '1206129247',
#     '0803490556',
#     '0202452512',
#     '1207927011',
#     '1753390069',
#     '0931495550',
#     '0950705509',
#     '1103118178',
#     '0503839458',
#     '1722286810',
#     '0921194650',
#     '1313323642',
#     '0941147571',
#     '0706136793',
#     '1205199167',
#     '0920605904',
#     '1717903171',
#     '0921369708',
#     '0923835375',
#     '0922037445',
#     '0953485646',
#     '0921159984',
#     '1104173644',
#     '0951203389',
#     '1804629242',
#     '0802878660',
#     '1718661224',
#     '1313109355',
#     '1723272397',
#     '1803834199',
#     '0917846701',
#     '1753670288',
#     '1003876966',
#     '2351183682',
#     '0202709226',
#     '1206798611',
#     '0931264436',
#     '1950083905',
#     '1312994559',
#     '0927980086',
#     '1317463543',
#     '0953620580',
#     '1250173703',
#     '1003115795',
#     '1805045307',
#     '0705170447',
#     '1719204438',
#     '1720058922',
#     '0502451594',
#     '0921333670',
#     '0603958034',
#     '0919399931',
#     '0923091094',
#     '1314764539',
#     '0924459563',
#     '0943584938',
#     '1717068264',
#     '0706030400',
#     '0705653848',
#     '1204886772',
#     '1721546628',
#     '1003523600',
#     '0503708661',
#     '1400298236',
#     '0940629140',
#     '1724442775',
#     '1314810720',
#     '0803429018',
#     '0958894479',
#     '1724841778',
#     '0953145505',
#     '0950817254',
#     '0917875668',
#     '1720597531',
#     '0928264860',
#     '1207309988',
#     '1205611179',
#     '0953400397',
#     '0925762270',
#     '0941390296',
#     '0706883154',
#     '1712369675',
#     '2300624000',
#     '1310693948',
#     '0201754215',
#     '0705665008',
#     '0916407067',
#     '0603238957',
#     '0923504716',
#     '0922736897',
#     '1724550833',
#     '1803902921',
#     '0927654863',
#     '0802193821',
#     '0605097385',
#     '0604821058',
#     '0503055709',
#     '2100294103',
#     '1314957224',
#     '0921231163',
#     '0702731050',
#     '0924456031',
#     '0929931467',
#     '0502986748',
#     '0603785536',
#     '0704811322',
#     '1208642510',
#     '1106110636',
#     '0604683409',
#     '0606169688',
#     '0703561068',
#     '1719973222',
#     '0603960493',
#     '1205715459',
#     '0940902604',
#     '1900817287',
#     '1208334837',
#     '1500981889',
#     '1500927833',
#     '0501944409',
#     '1755093133',
#     '1308694494',
#     '0202103347',
#     '0921149878',
#     '0928989300',
#     '1722199898'
#     ]
#
#             carrera = Carrera.objects.get(pk=103)
#             nivel = Nivel.objects.get(pk=1516)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=25),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=25)
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# #matricula_admision_derecho()
#
# def matricula_admision_edu_inicial():
#     with transaction.atomic():
#         try:
#             cedulas = ['2350258261',
# '0955710397',
# '0550413629',
# '1207258060',
# '0954558110',
# '0803646843',
# '0804551943',
# '0942573650',
# '0958387631',
# '0932476211',
# '1207745587',
# '1316636883',
# '0930630090',
# '0953857661',
# '1206642223',
# '1200629838',
# '0850683673',
# '1721721700',
# '1728039817',
# '0953942505',
# '0106647647',
# '2300067135',
# '0928414143',
# '1500441496',
# '1718666819',
# '1206846881',
# '0920026887',
# '0705886745',
# '0942509332',
# '0705617744',
# '0942977125',
# '0929986990',
# '0921192332',
# '0706329323',
# '0751083130',
# '0705748168',
# '1150551594',
# '1717580847',
# '0927097048',
# '2350577603',
# '1105397358',
# '0707067971',
# '0943905711',
# '1207920560',
# '0941992885',
# '0929315299',
# '1721895512',
# '0915924237',
# '1720124690',
# '1207945740',
# '1722228903',
# '0955943360',
# '1250482435',
# '0705947026',
# '0954074308',
# '2400456279',
# '0944123322',
# '0929823573',
# '0803486604',
# '0705606986',
# '1105852188',
# '2450107137',
# '1005019623',
# '1727262709',
# '2200575542',
# '0943670117',
# '0605828276',
# '0706397346',
# '1207932490',
# '1207093236',
# '0804566156',
# '1205415316',
# '0929425452',
# '0941641110',
# '1208497287',
# '1316400553',
# '0956712327',
# '1719820738',
# '1206648691',
# '0606487007',
# '0917012023',
# '0707023040',
# '0929605616',
# '1721005120',
# '1315091296',
# '1724419526',
# '0940758667',
# '0706009818',
# '0958679995',
# '1207946417',
# '1206449140',
# '1251367320',
# '0944192335',
# '1724880669',
# '1105451502',
# '0915888150',
# '2350246019',
# '1311447096',
# '0924997059',
# '0927401141',
# '1729886539',
# '0605310937',
# '0953296902',
# '1751241280',
# '2350206039',
# '1206590265',
# '1723235618',
# '1205524224',
# '1727215277',
# '1804741096',
# '1725586513',
# '1207019686',
# '1729539070',
# '0951269471',
# '2350738049',
# '0940465990',
# '1315673648',
# '1205767294',
# '2400088965',
# '2300076565',
# '1316664158',
# '0929950368',
# '1725997363',
# '2350234395',
# '0927436287',
# '0603934209',
# '0944273101',
# '2350550618'
#
#             ]
#
#             carrera = Carrera.objects.get(pk=100)
#             nivel = Nivel.objects.get(pk=1516)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=25),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=25),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# #matricula_admision_edu_inicial()
#
# def matricula_admision_adm_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0955970363',
# '0940325079',
# '0931628606',
# '0928681519',
# '1005216179',
# '1206041723',
# '0401656913',
# '0953405578',
# '0940646961',
# '0958228900',
# '0957991342',
# '0955204888',
# '0957536006',
# '0942195256',
# '1207868322',
# '0954116828',
# '0956905376',
# '0944239904',
# '0941490682',
# '0955541875',
# '0940785728',
# '0919552208',
# '0958466088',
# '0955773817',
# '0951282904',
# '0957916869',
# '0953056355',
# '0955465521',
# '0929686756',
# '0958045098',
# '1207929785',
# '0958182156',
# '0957423510',
# '0951805332',
# '2300761521',
# '0942323437',
# '1727203547',
# '0917650582',
# '0941984999',
# '0929586253',
# '0940813033',
# '0927981100',
# '0944368208',
# '0943926477',
# '0958752248',
# '0956681241',
# '0942119264',
# '0950574749',
# '0943586180',
# '0957771272',
# '0942072000',
# '0928062348',
# '0925075962',
# '1207133388',
# '0957969660',
# '0957579022',
# '0927161752',
# '0958521445',
# '0929626232',
# '0923667596',
# '0943034421',
# '0957163967',
# '0959090440',
# '0943718114',
# '0959142134',
# '0944034701',
# '1758171118',
# '0951017540',
# '0929662229',
# '0957289861',
# '0951740174',
# '1250031026',
# '0751082389',
# '0707406765'
# ]
#
#             carrera = Carrera.objects.get(pk=64)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN ADM_PRESENCIAL 1')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_adm_presencial()
#
# def matricula_admision_alimentos_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0956597207',
# '0929763522',
# '0957434095',
# '0940110885',
# '0953471125',
# '0950186965',
# '0942121518',
# '0942236217',
# '0954234308',
# '0929720985',
# '0940141070',
# '0953850914',
# '1729823326',
# '0941738080',
# '0953928959',
# '0955067012',
# '0944328905',
# '0954118931',
# '0952598928',
# '0951283647',
# '0956494587',
# '0954249991',
# '0954059465',
# '0940356488',
# '1250723572',
# '0926518382',
# '0955907050',
# '0954741385',
# '0954155628',
# '0957926488',
# '0942282641',
# '0954038485',
# '0927381160',
# '0951818376',
# '0950204503',
# '1004041933',
# '0955132956'
# ]
#
#             carrera = Carrera.objects.get(pk=82)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN ALIMENTOS_PRESENCIAL 2')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_alimentos_presencial()
#
# def matricula_admision_ambiental_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0942447806',
# '0942285065',
# '0943443978',
# '0955989223',
# '1754021473',
# '1208639862',
# '0959246653',
# '0927993493',
# '0551353899',
# '0942344854',
# '0928067032',
# '0706085446',
# '1725514879'
# ]
#
#             carrera = Carrera.objects.get(pk=83)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN AMBIENTAL_PRESENCIAL 3')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_ambiental_presencial()
#
# def matricula_admision_ambiental_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0942447806',
# '0942285065',
# '0943443978',
# '0955989223',
# '1754021473',
# '1208639862',
# '0959246653',
# '0927993493',
# '0551353899',
# '0942344854',
# '0928067032',
# '0706085446',
# '1725514879'
# ]
#
#             carrera = Carrera.objects.get(pk=83)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN AMBIENTAL_PRESENCIAL 3')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_ambiental_presencial()
#
# def matricula_admision_comunicacion_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0707343893',
# '0940648462',
# '0958570780',
# '1308842127',
# '1718438508',
# '2350755670',
# '0917896573',
# '1150581930',
# '0955449731',
# '1729895365',
# '0954671772',
# '0951218015',
# '0928040989',
# '0942386277',
# '0953076270',
# '0932189897',
# '1729946747',
# '0959122722',
# '0804167567',
# '0957278138',
# '0801907387',
# '0954745584',
# '0959138421',
# '0920461142',
# '0940660673',
# '0940164809',
# '0952382869',
# '0940304587',
# '0953780863',
# '0850776964'
# ]
#
#             carrera = Carrera.objects.get(pk=68)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN comunicacion_PRESENCIAL 4')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_comunicacion_presencial()
#
# def matricula_admision_cpa_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0958516817',
# '0705968147',
# '2400315798',
# '0953746765',
# '0957673130',
# '0956717326',
# '0952534824',
# '1550098550',
# '0958102444',
# '0927401646',
# '0931993943',
# '0950546143',
# '2350967077',
# '0915251805',
# '0952631265',
# '0250294253',
# '1207834936',
# '1600648941',
# '0954997367'
# ]
#
#             carrera = Carrera.objects.get(pk=84)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN cpa_PRESENCIAL 5')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_cpa_presencial()
#
# def matricula_admision_economia_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0927127530',
# '1315063741',
# '0956124994',
# '0705813541',
# '0957373087',
# '0926383480',
# '0943498634',
# '0942597303',
# '1726277443',
# '1715754600',
# '1722988217',
# '0943394874',
# '1725226797',
# '0302782008',
# '0958926073',
# '0943995225',
# '0944092584',
# '0927758615',
# '0850245960',
# '0941668600',
# '0930563747',
# '0705640894',
# '0942486986',
# '0942439340',
# '0958235731',
# '0958138349',
# '1804049730',
# '0951770197',
# '0928087634',
# '0921381547',
# '1004843924',
# '0955504758',
# '0952938637',
# '0958597627',
# '0942349416',
# '0942483942',
# '0954625638',
# '0941722621',
# '1726856659',
# '2200351944',
# '0952989739'
# ]
#
#             carrera = Carrera.objects.get(pk=87)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN economia_PRESENCIAL 6')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_economia_presencial()
#
# def matricula_admision_educacion_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['2300486368',
# '0201798717',
# '0953838794',
# '1725538571',
# '1250051735',
# '0941132615',
# '0957133663',
# '0953653771',
# '0202225132',
# '0550297600',
# '1208820314',
# '0803439041',
# '0942230566',
# '0955799648',
# '0954373635',
# '1251228043',
# '1710707447',
# '0956787162',
# '0805315355',
# '0954752424',
# '1313231076',
# '0931476394',
# '0925388902',
# '0928442508',
# '0202220539',
# '0931187645',
# '0955488101',
# '1250544895',
# '0943055723',
# '0958811234',
# '0955910476',
# '0953629102',
# '0957735392',
# '0957132046',
# '1312994120',
# '0930313366',
# '0944353739',
# '0956169544',
# '0941988164',
# '0941552887',
# '0957634652',
# '0957778525',
# '0750529026',
# '0954126256',
# '0956927818',
# '0941982852',
# '0925982944',
# '0956635130',
# '0956799027',
# '0941101313',
# '1206845966',
# '0928066638',
# '0302438056',
# '0958175986',
# '0932507510',
# '0929858173',
# '1206655381',
# '0941159469',
# '0925980880',
# '0928733203',
# '1207964840',
# '0851035303',
# '0940480445',
# '1207145184',
# '0941528580',
# '1750996165',
# '0941999666',
# '1250613955',
# '1501160236',
# '1316306644',
# '0929434421',
# '0955862123',
# '0956445761',
# '0927605931',
# '0943693242',
# '0750909749',
# '0942441528',
# '0927674598',
# '0751204512',
# '0952007623',
# '1206482737',
# '0940161136',
# '0958341158',
# '1251338255',
# '0943546648',
# '0942197484',
# '0942128752',
# '1206950600',
# '0942128307',
# '1350167704',
# '0952890580',
# '0958782369',
# '0941108847',
# '0941644361',
# '0928009307',
# '0958258436',
# '0952680247',
# '0953907433',
# '0922138953',
# '0931876643',
# '0932298524',
# '0941783177',
# '0954263448',
# '0958614307',
# '0706191681',
# '0929971935',
# '2101014351',
# '1722121405',
# '1850433457',
# '0707280665',
# '0943582130',
# '0302814876',
# '1728721018',
# '0928738855',
# '0850802281'
# ]
#
#             carrera = Carrera.objects.get(pk=65)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN educacion_PRESENCIAL 7')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_educacion_presencial()
#
# def matricula_admision_educacion_inicial_semipresencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0927318279',
# '0942239138',
# '0921658068',
# '0953062601',
# '0923559363',
# '0930177522',
# '0941139230',
# '1206924399',
# '0943651034',
# '0706653847',
# '0917226664',
# '0706172079',
# '0953446838',
# '0953933694',
# '0922475488',
# '0706207685',
# '0943647651',
# '0927443325',
# '1208560191',
# '0954437265',
# '0943901496',
# '0943454694',
# '1207697069',
# '0932546880',
# '0940106149',
# '0940370232',
# '0953950383',
# '0952802049',
# '0956849574',
# '0850960626',
# '1729897619',
# '0929366169',
# '0955256078',
# '2100862826',
# '2350700247',
# '0943528273',
# '0850425596',
# '0944076595',
# '1721146841',
# '0750512022',
# '2100944988',
# '0953339561',
# '0941167702',
# '1207875822',
# '0951744044',
# '0923987762',
# '1150062311',
# '0750528309',
# '0925987075',
# '0951378645',
# '1724886740',
# '0923099311',
# '2300149230',
# '0942980723',
# '0932304975',
# '0953487527',
# '0750124216',
# '1251151153',
# '0706926292',
# '1208833945',
# '0704888403',
# '0941996928',
# '0942935891',
# '0705657104',
# '0954610507',
# '0953519832',
# '0958284804',
# '2300527948',
# '0954544979',
# '1208857928',
# '0941331654',
# '0944230242',
# '0928177211',
# '1208550655',
# '0957273253',
# '1207515915',
# '0955829833',
# '0932231640',
# '1207710573',
# '0940227119',
# '0929855633',
# '1725188922',
# '0103949707',
# '1208833648',
# '0706407756',
# '0202341335',
# '0927996231',
# '0953745031',
# '1207347079',
# '1205658014',
# '0707004156',
# '1250161518',
# '1207099829',
# '0928260801',
# '2350729428',
# '0926750837',
# '0944395656',
# '0923541387',
# '1205949538',
# '1250922109',
# '0953412756',
# '0954099586',
# '0957549751',
# '0802793679',
# '0958126906',
# '0954766770',
# '1251171847',
# '1727619429',
# '0929975522',
# '0958580581',
# '1206843490',
# '0942097734',
# '0951950724',
# '1205376468',
# '0922338231',
# '0914642335',
# '0940112279',
# '0954617494',
# '1207539014',
# '1105780355',
# '0105885768',
# '0926276593',
# '0923033138',
# '0928188044',
# '2350163172',
# '0952190460',
# '1729818573',
# '0928002336',
# '1727277624',
# '0928189182',
# '0940381916',
# '0928846781',
# '0952715704',
# '0942355546',
# '0941116261',
# '0923624092',
# '0942058959',
# '0705780039',
# '0959032087'
# ]
#
#             carrera = Carrera.objects.get(pk=70)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN educacioninicial_semiPRESENCIAL 8')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_educacion_inicial_semipresencial()
#
# def matricula_admision_industrial_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0943426643',
# '0926092024',
# '0940904196',
# '0955667506',
# '1208568772',
# '0940815285',
# '0955481049',
# '0958800096',
# '0804742112',
# '0927953521',
# '0941559593',
# '0850869710',
# '1251055412',
# '0953234242',
# '2101289383',
# '0943375816',
# '0943005843',
# '0955460704',
# '0954930871',
# '0954879045',
# '0927983395',
# '0957751381',
# '0942454406',
# '0929968535',
# '0943615906',
# '0927570382',
# '0942238338',
# '0953872538',
# '1250171517',
# '0930770177'
# ]
#
#             carrera = Carrera.objects.get(pk=47)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN industrial_PRESENCIAL 9')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_industrial_presencial()
#
# def matricula_admision_multimedia_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0942091547',
# '0958823742',
# '0350314605',
# '0953517471',
# '0952221091',
# '0940156409'
# ]
#
#             carrera = Carrera.objects.get(pk=189)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN multimedia_PRESENCIAL 10')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_multimedia_presencial()
#
# def matricula_admision_experimentales_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0942522061',
# '1105089203',
# '0956343917',
# '0941346330',
# '0940302433',
# '0943995829',
# '1208607000',
# '1207070408',
# '2350538621',
# '0943990135',
# '0942057472',
# '0958540866',
# '1729827657',
# '0803911197',
# '0943469833',
# '0922967781',
# '0605042712',
# '1202866289',
# '2300040330',
# '0955088034',
# '0959138645',
# '0955169602',
# '0951066307',
# '0705748457'
# ]
#
#             carrera = Carrera.objects.get(pk=181)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN experimental_PRESENCIAL 11')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_experimentales_presencial()
#
# def matricula_admision_software_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0944193812',
# '0804586154',
# '0952558211',
# '0957411093',
# '1207928936',
# '0957134067',
# '0250130325',
# '0804602050',
# '0955565353',
# '0954226627',
# '0943694919',
# '0952056869',
# '0954920484',
# '1250455795',
# '0942482100',
# '0943044792',
# '0940106081',
# '1317238002',
# '0957024227'
# ]
#
#             carrera = Carrera.objects.get(pk=73)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN software_PRESENCIAL 12')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_software_presencial()
#
# def matricula_admision_ts_presencial():
#     with transaction.atomic():
#         try:
#             cedulas = ['0955535661',
# '1208843290',
# '0921008256',
# '0928031418',
# '1207211838',
# '0955915814',
# '0923727606',
# '0943237248',
# '2400089054',
# '0926117441',
# '0940888183',
# '0650080187',
# '1205122698',
# '0922257001',
# '0912850336',
# '0953949716',
# '0957057490',
# '0919620591',
# '0929875490',
# '0942195157',
# '0704407485',
# '0802652826',
# '0503676819',
# '0941619488',
# '0956135800',
# '0940689110',
# '0951765676',
# '0951854934',
# '0750050734',
# '0953021557',
# '0932040744',
# '0202214979',
# '0707181632',
# '1207617638',
# '1207803816',
# '0703841494',
# '0929317105',
# '1311469009',
# '0923923676',
# '0926350794',
# '0953727815',
# '0954200523',
# '0940733132',
# '0926477365',
# '1310723539',
# '0928548585',
# '0107955072',
# '2350581134',
# '0919009373',
# '0957390735',
# '0958829418',
# '0941176869',
# '0943623421',
# '0930595590',
# '0952503340',
# '1207686641',
# '0930889233',
# '0707038014',
# '1207735885',
# '1718731423',
# '2350588170',
# '0956893267',
# '1207703271',
# '0951750876',
# '0951297415',
# '0956929350',
# '0958668535',
# '1207724608',
# '0928542141',
# '0942344623',
# '0955718077',
# '0931203053',
# '0925743031',
# '0926511130',
# '1251055933',
# '0959886169',
# '0920375532',
# '1208548436',
# '1206469593',
# '0918741240',
# '0604133264',
# '0940127731',
# '2100607056',
# '0919520098',
# '0928068857',
# '0954635033',
# '0706509809',
# '1251110019',
# '0941340804',
# '1714708524',
# '0941345100',
# '1207188119',
# '2450280421',
# '0958632705',
# '0941607517',
# '0250180692',
# '0950824144',
# '1727333351',
# '0916795727',
# '0942473109',
# '0956103253',
# '1724725682',
# '0958638512',
# '0804000339',
# '0955027230',
# '0941993404',
# '1207374156',
# '0953856051',
# '0705714871',
# '0941027500',
# '0929881696',
# '0941291049',
# '0921798682',
# '0919571810',
# '0928054840',
# '1713154019',
# '1720656592',
# '0930642954',
# '0957428808',
# '0952071751',
# '0954643110',
# '0943115154',
# '0930792429',
# '0952054849',
# '0922380662',
# '0705843910',
# '0917508020',
# '0957884901',
# '0954987392',
# '0953361318',
# '0956787865',
# '0924181118',
# '0928799030',
# '0920272226',
# '0928067826',
# '1314272137',
# '0803779511',
# '0930499975',
# '1208519023',
# '0922873179',
# '0802975409',
# '2100601943',
# '0943611251',
# '0928339845',
# '1208033025',
# '0928896414',
# '0943131623',
# '0941543126',
# '0963311790',
# '0952364503',
# '0922142443',
# '0958089948',
# '0951622463',
# '0941892408']
#
#             carrera = Carrera.objects.get(pk=86)
#             nivel = Nivel.objects.get(pk=1517)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN ts_PRESENCIAL 13')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_ts_presencial()
#
# def matricula_admision_turismolinea():
#     with transaction.atomic():
#         try:
#             cedulas = ['1729899359',
# '0953333036',
# '0706532777',
# '1250043518',
# '0202093076',
# '0954133096',
# '2100771233',
# '0941615791',
# '0942181975',
# '0931411748',
# '0750596611',
# '1250783105',
# '1722006663',
# '0951802131',
# '1207823590',
# '0958429235',
# '1727230698',
# '1351529530',
# '0921692281',
# '2350331209',
# '2150333447',
# '2100899927',
# '1350885669',
# '1207017136',
# '0302550454',
# '0957525009',
# '0950501312',
# '0850875899',
# '0705628287',
# '0932349772',
# '0954189361',
# '0932475544',
# '0953483229',
# '1104507593',
# '0956301998',
# '0704661792',
# '0705496032',
# '0930623285',
# '0927152140',
# '0503510166',
# '0928581107',
# '0957646870',
# '0940092455',
# '0803460419',
# '0804518934',
# '0921474953',
# '1724419773',
# '1722153317',
# '0927005967',
# '0957488612',
# '2350845232',
# '1727163352',
# '0925604621',
# '1714750005',
# '0958664641',
# '1105286973',
# '0957434632',
# '0927188664',
# '2100248307',
# '0704540517',
# '0951855881',
# '0502468044',
# '1207914639',
# '1500913585',
# '0701970345',
# '0956692941',
# '0850407412',
# '0956878243',
# '0918332297',
# '1550168395',
# '1208609808',
# '0923085120',
# '0106990526',
# '0941068850',
# '0706716511',
# '0919461301',
# '1900710870',
# '0922916598',
# '0804200848',
# '1206705418',
# '1150848040',
# '1719359950',
# '0958073041',
# '0932102536',
# '0950569830',
# '0952969616',
# '1207282631',
# '0929970481',
# '0802729830',
# '1207238609',
# '1723072631',
# '0705048817',
# '0604195404',
# '0606074110',
# '0942609876',
# '0706072139',
# '1208481133',
# '0953456514',
# '1207234376',
# '2400455685',
# '1207319862',
# '0803237486',
# '0953169547',
# '0940213143',
# '1727268003',
# '0705785053',
# '1719713586',
# '1754992863',
# '0401678990',
# '1105415614',
# '0804071157',
# '0943118356',
# '1850418250',
# '1105446841',
# '0604141580',
# '1311569295',
# '0943564930',
# '0650250731',
# '1251364483',
# '0951795442',
# '1207965995',
# '1600387268',
# '0927438481',
# '0942500349',
# '0705291185',
# '1250496369',
# '2350427940',
# '0804065951',
# '0919997635',
# '0750484263',
# '0919521559',
# '0940090905',
# '0942858838',
# '2350346686',
# '1317460564',
# '0955054473',
# '1723767255',
# '0707076782',
# '0954713053',
# '0706628963',
# '2100408042',
# '0703778019',
# '0929920437',
# '1718735812',
# '0927336511',
# '0922429717',
# '0706060977',
# '1720270980',
# '1250613336',
# '1724397698',
# '0944048032',
# '0302338462',
# '1752123537',
# '0401426028',
# '0952182632',
# '0800929242',
# '0951800846',
# '1206541466',
# '1206319889',
# '0705960771',
# '0957011331',
# '0705873453',
# '0750806713',
# '0941186124',
# '2450557489',
# '0942116427',
# '1317122446',
# '2200580583',
# '0931966535',
# '0955297791',
# '0940182595',
# '2450090549',
# '0954384319',
# '1350871198',
# '1755119797',
# '0929768182',
# '0942070285',
# '0924886120',
# '1718447608',
# '0106018450',
# '0704612027',
# '0702613803',
# '1208591642',
# '1850011790',
# '0927966846',
# '1501010480',
# '0955388244',
# '0804119949',
# '0956061089',
# '1710583814',
# '0910585165',
# '0805147238',
# '0850129586',
# '0959343054',
# '1716159197',
# '0922379219',
# '1150571659',
# '0705671840',
# '0942399742',
# '0955673082',
# '0803776954',
# '1724991938',
# '1316340924',
# '0202510368',
# '0926328501',
# '0804468593',
# '1500939036',
# '0956377279',
# '1722717368',
# '0850196379',
# '0705872877',
# '1206460139',
# '0942898628',
# '0941221798',
# '0202211330',
# '0954778866',
# '0955570346',
# '1004730402',
# '0802189639',
# '1202790927',
# '0915842108',
# '1729840551',
# '0950752345',
# '0944115468',
# '0951638832',
# '0802443630',
# '0603943903',
# '2350601809',
# '1204249724',
# '1308673001',
# '1313649921',
# '0106721699',
# '0704461672',
# '1105071417',
# '1750400960',
# '1350113674',
# '1719117499',
# '0921447785',
# '1207311588',
# '1727541656',
# '0750596769',
# '0706412533',
# '1725166738',
# '0504514522',
# '1208218378',
# '0705534584',
# '2100347182',
# '0928177880',
# '0951773845',
# '0805400249',
# '1753125382',
# '1150551776',
# '0923914337',
# '1105005365',
# '1804728960',
# '1721009338',
# '0202345195',
# '0104805593',
# '1303509432',
# '1105844565',
# '0850314782',
# '0941594319',
# '0955453881',
# '0107033946',
# '1150576351',
# '0922148424',
# '1723224844',
# '0943526483',
# '0952128684',
# '0751034752',
# '0202632592',
# '1317756417',
# '0927617951',
# '0941234593',
# '0926368309',
# '0955015011',
# '0951952134',
# '0705584191',
# '0954898367',
# '0958776080',
# '0503620213',
# '0707276184',
# '1720392123',
# '1721074449',
# '0922516349',
# '0941376444',
# '1207319326',
# '0926602269',
# '1712463825',
# '0706440302',
# '0951800713',
# '1720370772',
# '2400339657',
# '2300426190',
# '1207698737',
# '1351049794',
# '0750811382',
# '0940522691',
# '1207277565',
# '1725634305',
# '1805392725',
# '0950819037',
# '1713372785',
# '0805395985',
# '0705335487',
# '0302524269',
# '1207574433',
# '1208339703',
# '0942627621',
# '1311336778',
# '2350870198',
# '0943208801',
# '0928563220',
# '0931061030',
# '1724855018',
# '0953127347',
# '0921783940',
# '0956980965',
# '1309725545',
# '1204576670',
# '1315688257',
# '0705901353',
# '1310324577',
# '0923273031',
# '0953894060',
# '1315190437',
# '0803179696',
# '0942970583',
# '0850535683',
# '0803890367',
# '0956969554',
# '0950639229',
# '0914398086',
# '0803349562',
# '0955917059',
# '1207382415',
# '0959122557',
# '1105441404',
# '1315487239',
# '2450130592',
# '0604975045',
# '0201947496',
# '1206740472',
# '0944250984',
# '0931787774',
# '1207926849',
# '1207150663',
# '1250152921',
# '0951118983',
# '0940630270',
# '0940628910',
# '0705573210',
# '0959064460',
# '0706966488',
# '0922342779',
# '1105494023',
# '0966041360',
# '0943187708',
# '1755582580',
# '1313667451',
# '1350504245',
# '0706734282',
# '0915727390',
# '0925479131'
# ]
#
#             carrera = Carrera.objects.get(pk=104)
#             nivel = Nivel.objects.get(pk=1516)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN tursimo_linea 14')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_turismolinea()
#
# def matricula_admision_ticslinea():
#     with transaction.atomic():
#         try:
#             cedulas = ['2450859117',
# '0941100182',
# '0944364587',
# '1207229186',
# '0940251556',
# '0942601790',
# '1207103787',
# '1004756613',
# '1314735802',
# '0927001040',
# '0951268895',
# '0943809582',
# '1251189831',
# '0924243793',
# '0804321248',
# '0932048671',
# '0957078553',
# '0958645574',
# '1311248619',
# '0706464906',
# '0919435347',
# '1203476344',
# '1720034972',
# '1722162169',
# '1726501446',
# '1724274061',
# '0302953872',
# '1752029940',
# '0924744618',
# '0606107779',
# '0924005341',
# '2350755464',
# '0924239437',
# '1312236662',
# '0705789626',
# '0958987851',
# '0953559135',
# '0942917444',
# '1208082287',
# '2450151291',
# '0931040604',
# '2300396856',
# '0940001191',
# '0940531791',
# '1317941878',
# '0802657395',
# '0929479806',
# '0928929462',
# '1725821621',
# '1104817943',
# '0503319766',
# '0929147908',
# '0705543601',
# '0703130526',
# '0923203376',
# '0921503595',
# '0951609882',
# '1207310044',
# '0928982271',
# '1725035297',
# '2300358732',
# '0750229437',
# '1351710668',
# '0929338879',
# '1725969867',
# '1313647511',
# '0940605397',
# '0504092784',
# '2100192950',
# '0927991513',
# '1751369560',
# '0953339041',
# '1717162166',
# '2300272354',
# '1723646301',
# '0704631274',
# '1715018592',
# '1104667041',
# '0957868367',
# '1719983536',
# '0604010256',
# '0401422043',
# '1207708528',
# '1722272844',
# '0951674134',
# '0926650813',
# '0924046774',
# '1105113938',
# '2101092654',
# '2200349237',
# '1722926431',
# '0942276239',
# '0955206107',
# '0921370474',
# '0803283506',
# '1714506118',
# '0201578788',
# '0925624074',
# '1310155435',
# '0924897739',
# '0918088709',
# '0504370271',
# '0804251718',
# '0707087987',
# '0952083871',
# '0919997759',
# '1712625589',
# '1726542309',
# '0703389882',
# '1722261748',
# '1003078175',
# '1723237333',
# '0927895425',
# '1308331824',
# '1720059516',
# '0923175616',
# '1726454976',
# '0603437658',
# '1725219305',
# '2000134276',
# '0804251619',
# '1712186004',
# '1104468705',
# '0202452611',
# '1105684110',
# '0929511384',
# '1207377159',
# '0804482073',
# '1251176358',
# '1722866272',
# '1719059725',
# '0954368551',
# '1312029216',
# '0955344817',
# '0705619377',
# '1727413682',
# '2300687197',
# '0929559490',
# '0958193237',
# '1724855000',
# '0705661916',
# '1719388173',
# '0920231479',
# '1721325817',
# '1721113965',
# '1719667949',
# '0202216347',
# '0850608761',
# '0202302998',
# '0929997401',
# '0704829167',
# '1208481232',
# '1315541837',
# '0929025229',
# '1206607630',
# '1725810962',
# '0921372447',
# '0957738446',
# '1207585306',
# '0803426352',
# '0941746810',
# '0706473212',
# '1850877174',
# '0940749617',
# '1312401209',
# '0941537169',
# '0202017265',
# '0925102964',
# '0602921785',
# '1600515512',
# '0916495955',
# '0928366632',
# '0928964345',
# '0941398430',
# '2250116528',
# '2300105935',
# '0940100704',
# '0942157421',
# '0202523361',
# '0850933250',
# '0703602912',
# '1206087817',
# '0803846856',
# '0956149876',
# '0951686328',
# '0929122224',
# '0942611930',
# '1102634662',
# '0802136515',
# '0929210284',
# '0603714429',
# '0804364008',
# '0921653382',
# '1312011099',
# '0850052846',
# '0928735737',
# '1723905707',
# '1721461448',
# '0707336327',
# '0705615391',
# '0955846662',
# '0928055540',
# '1720410941',
# '0955934781',
# '0922948880',
# '0927678334',
# '0941404600',
# '0925557530',
# '0931752620',
# '1206483941',
# '0952478824',
# '0929366102',
# '1105172488',
# '0955168612',
# '1205886193',
# '0929050094',
# '1004669188',
# '0705862746',
# '0928084920',
# '0925552309',
# '1721400180',
# '0850048927',
# '1715294904',
# '0919869735',
# '1205764291',
# '0928057702',
# '0106842644',
# '1207725308',
# '1206525493',
# '1723732010',
# '2250191190',
# '1754660981',
# '0943241927',
# '1207345008',
# '0804361335',
# '0850737065',
# '0801945676',
# '0803718576'
# ]
#
#             carrera = Carrera.objects.get(pk=105)
#             nivel = Nivel.objects.get(pk=1516)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN tics_linea 15')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_ticslinea()
#
# def matricula_admision_ticslinea():
#     with transaction.atomic():
#         try:
#             cedulas = ['2450859117',
# '0941100182',
# '0944364587',
# '1207229186',
# '0940251556',
# '0942601790',
# '1207103787',
# '1004756613',
# '1314735802',
# '0927001040',
# '0951268895',
# '0943809582',
# '1251189831',
# '0924243793',
# '0804321248',
# '0932048671',
# '0957078553',
# '0958645574',
# '1311248619',
# '0706464906',
# '0919435347',
# '1203476344',
# '1720034972',
# '1722162169',
# '1726501446',
# '1724274061',
# '0302953872',
# '1752029940',
# '0924744618',
# '0606107779',
# '0924005341',
# '2350755464',
# '0924239437',
# '1312236662',
# '0705789626',
# '0958987851',
# '0953559135',
# '0942917444',
# '1208082287',
# '2450151291',
# '0931040604',
# '2300396856',
# '0940001191',
# '0940531791',
# '1317941878',
# '0802657395',
# '0929479806',
# '0928929462',
# '1725821621',
# '1104817943',
# '0503319766',
# '0929147908',
# '0705543601',
# '0703130526',
# '0923203376',
# '0921503595',
# '0951609882',
# '1207310044',
# '0928982271',
# '1725035297',
# '2300358732',
# '0750229437',
# '1351710668',
# '0929338879',
# '1725969867',
# '1313647511',
# '0940605397',
# '0504092784',
# '2100192950',
# '0927991513',
# '1751369560',
# '0953339041',
# '1717162166',
# '2300272354',
# '1723646301',
# '0704631274',
# '1715018592',
# '1104667041',
# '0957868367',
# '1719983536',
# '0604010256',
# '0401422043',
# '1207708528',
# '1722272844',
# '0951674134',
# '0926650813',
# '0924046774',
# '1105113938',
# '2101092654',
# '2200349237',
# '1722926431',
# '0942276239',
# '0955206107',
# '0921370474',
# '0803283506',
# '1714506118',
# '0201578788',
# '0925624074',
# '1310155435',
# '0924897739',
# '0918088709',
# '0504370271',
# '0804251718',
# '0707087987',
# '0952083871',
# '0919997759',
# '1712625589',
# '1726542309',
# '0703389882',
# '1722261748',
# '1003078175',
# '1723237333',
# '0927895425',
# '1308331824',
# '1720059516',
# '0923175616',
# '1726454976',
# '0603437658',
# '1725219305',
# '2000134276',
# '0804251619',
# '1712186004',
# '1104468705',
# '0202452611',
# '1105684110',
# '0929511384',
# '1207377159',
# '0804482073',
# '1251176358',
# '1722866272',
# '1719059725',
# '0954368551',
# '1312029216',
# '0955344817',
# '0705619377',
# '1727413682',
# '2300687197',
# '0929559490',
# '0958193237',
# '1724855000',
# '0705661916',
# '1719388173',
# '0920231479',
# '1721325817',
# '1721113965',
# '1719667949',
# '0202216347',
# '0850608761',
# '0202302998',
# '0929997401',
# '0704829167',
# '1208481232',
# '1315541837',
# '0929025229',
# '1206607630',
# '1725810962',
# '0921372447',
# '0957738446',
# '1207585306',
# '0803426352',
# '0941746810',
# '0706473212',
# '1850877174',
# '0940749617',
# '1312401209',
# '0941537169',
# '0202017265',
# '0925102964',
# '0602921785',
# '1600515512',
# '0916495955',
# '0928366632',
# '0928964345',
# '0941398430',
# '2250116528',
# '2300105935',
# '0940100704',
# '0942157421',
# '0202523361',
# '0850933250',
# '0703602912',
# '1206087817',
# '0803846856',
# '0956149876',
# '0951686328',
# '0929122224',
# '0942611930',
# '1102634662',
# '0802136515',
# '0929210284',
# '0603714429',
# '0804364008',
# '0921653382',
# '1312011099',
# '0850052846',
# '0928735737',
# '1723905707',
# '1721461448',
# '0707336327',
# '0705615391',
# '0955846662',
# '0928055540',
# '1720410941',
# '0955934781',
# '0922948880',
# '0927678334',
# '0941404600',
# '0925557530',
# '0931752620',
# '1206483941',
# '0952478824',
# '0929366102',
# '1105172488',
# '0955168612',
# '1205886193',
# '0929050094',
# '1004669188',
# '0705862746',
# '0928084920',
# '0925552309',
# '1721400180',
# '0850048927',
# '1715294904',
# '0919869735',
# '1205764291',
# '0928057702',
# '0106842644',
# '1207725308',
# '1206525493',
# '1723732010',
# '2250191190',
# '1754660981',
# '0943241927',
# '1207345008',
# '0804361335',
# '0850737065',
# '0801945676',
# '0803718576'
# ]
#
#             carrera = Carrera.objects.get(pk=105)
#             nivel = Nivel.objects.get(pk=1516)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN tics_linea 15')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_ticslinea()
#
# def matricula_admision_nacyexlinea():
#     with transaction.atomic():
#         try:
#             cedulas = ['1206845586',
# '0954165395',
# '0942110305',
# '0915710289',
# '1206786319',
# '1751167345',
# '1729974152',
# '0804566164',
# '2400256844',
# '0707294302',
# '0706092228',
# '0953694064',
# '0202229670',
# '0926974874',
# '1106073941',
# '1206376491',
# '0923269427',
# '0850105750',
# '0706172970',
# '1714184114',
# '0944402585',
# '2351005737',
# '0956164768',
# '0706682671',
# '0921177663',
# '1104109762',
# '0605753821',
# '1207824549',
# '1206943431',
# '0941362774',
# '1803234135',
# '1718550096',
# '0705314219',
# '1205111485',
# '0705588812',
# '1103382543',
# '0706542222',
# '1351794860',
# '0943842559',
# '1206525725',
# '0920045929',
# '0802979989',
# '2150107262',
# '2300833478',
# '0957512007',
# '0928308733',
# '0550463244',
# '0941992703',
# '0504101221',
# '0942383548',
# '0927139352',
# '0202447405',
# '1105600785',
# '1207191816',
# '0705539302',
# '0957019136',
# '1722201660',
# '0604982660',
# '0705642247',
# '1003473376',
# '0940367204',
# '2450648825',
# '1208821429',
# '0951769165',
# '0940505472',
# '1753162682',
# '0301985131',
# '0706097136',
# '2200374086',
# '0955468889',
# '0605040096',
# '1722867411',
# '1207469436',
# '1717780082',
# '0942252255',
# '0944305762',
# '0924637523',
# '0802418319',
# '1002953386',
# '0604870774',
# '1754226569',
# '0927001867',
# '1803547155',
# '0956946750',
# '1717217259',
# '0951133131',
# '0929669661',
# '1727165233',
# '1351085574',
# '0927033407',
# '0930980693',
# '2200104210',
# '0952922557',
# '1250930474',
# '1723554562',
# '1719660340',
# '0929142040',
# '1207507557',
# '1206997262',
# '1150639126',
# '0301790481',
# '0503193468',
# '2300402977',
# '0921276283',
# '1314627439',
# '1003184429',
# '0705550119',
# '0920810470',
# '0605025212',
# '1725473837',
# '0940063803',
# '0706510245',
# '0927854612',
# '1205873142',
# '1204541393',
# '0950894279',
# '1208070209',
# '0706300498',
# '1206258913',
# '1726305947',
# '1600584716',
# '1805191622',
# '1753181393',
# '0605640440',
# '0957891625',
# '0504731571',
# '1753828126',
# '1206944959',
# '2350660391',
# '0927218271',
# '0202520078',
# '1004462626',
# '1722675079',
# '0929443372',
# '1550049926',
# '1208311199',
# '0927043588',
# '0954803409',
# '1718368630',
# '0926088725',
# '0957282445',
# '0956588206',
# '1723771281',
# '0942494725',
# '0707070017',
# '0803709955',
# '0804410975',
# '1803773314',
# '1004164115',
# '0804369866',
# '0910240837',
# '0503393845',
# '1311176273',
# '2400102188',
# '1725893067',
# '2350455289',
# '1150577177',
# '0940610306',
# '1751094036',
# '1205129909',
# '0805286887',
# '1719858530',
# '0955562509',
# '2300602592',
# '0803673466',
# '0401770680',
# '1720491057',
# '1350560528',
# '1310783947',
# '0951656172',
# '1207626621',
# '1722003165',
# '1105394082'
# ]
#
#             carrera = Carrera.objects.get(pk=101)
#             nivel = Nivel.objects.get(pk=1516)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN nacional_linea 16')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_nacyexlinea()
#
# def matricula_admision_ecolinea():
#     with transaction.atomic():
#         try:
#             cedulas = ['1206940197',
# '0959034901',
# '2350431546',
# '2350515595',
# '1105122426',
# '0957122922',
# '0503236242',
# '0803944073',
# '0942321340',
# '1251015234',
# '0705764348',
# '0943759399',
# '0923666812',
# '2250166036',
# '0705882082',
# '1207795541',
# '1207187558',
# '0957849466',
# '0958023384',
# '0922691399',
# '0704654193',
# '0706027851',
# '1805024153',
# '0706482346',
# '1717562928',
# '0928964576',
# '1150598959',
# '0940213663',
# '0957294341',
# '1250627633',
# '1206214585',
# '1206348284',
# '0940385586',
# '0706077237',
# '0942962465',
# '1716097900',
# '0943869628',
# '0931457758',
# '1251026843',
# '0955866785',
# '1724851371',
# '0955931720',
# '0932233562',
# '0704660737',
# '0940241565',
# '1206918144',
# '1725471823',
# '0202030771',
# '0941412223',
# '0912600905',
# '0941694655',
# '0704552447',
# '0929808228',
# '0605725019',
# '0941681371',
# '0958516668',
# '0942275280',
# '0929141448',
# '0105991046',
# '1727320309',
# '0202201893',
# '0705450740',
# '1203880651',
# '1720305661',
# '0928478668',
# '0750271546',
# '1315130722',
# '1104533797',
# '1205376138',
# '1106114042',
# '2350197881',
# '1755285986',
# '0922980982',
# '1311136343',
# '0550074371',
# '0850740390',
# '0927989764',
# '0940896772',
# '1206925073',
# '1208236164',
# '1803102209',
# '1717043721',
# '0955255716',
# '0705746725',
# '0958700098',
# '0942977760',
# '1500414048',
# '0926370503',
# '1313374595',
# '1205945502',
# '0942946245',
# '2300834195',
# '0705634772',
# '1207348382',
# '1105158701',
# '0943792721',
# '1003484159',
# '1105469397',
# '1206785030',
# '0953920451',
# '1207817683',
# '0944202662',
# '2300161938',
# '0705202992',
# '1104638810',
# '2300149040',
# '0942366014',
# '0707102836',
# '0751004847',
# '0940261316',
# '0942091349',
# '0940598857',
# '0954357638',
# '0943420851',
# '2450118811',
# '1207835289',
# '0803789734',
# '0804318301',
# '0803405083',
# '1207436898',
# '0952965150',
# '0925408536',
# '1004665905',
# '2450326133',
# '2450391681',
# '0604298208',
# '1723638639',
# '0923579270',
# '2150344279',
# '0804139822',
# '0706495678',
# '1723044614',
# '1205529900',
# '1205475260',
# '0503280364',
# '0942588575',
# '0924742984',
# '1600612707',
# '0202302295',
# '0705321180',
# '1207670298',
# '0707045449',
# '1208169746',
# '1205494659',
# '0953589769',
# '0750856106',
# '0706302742',
# '0550636476',
# '1207936236',
# '0928343284',
# '0929133817',
# '0927378661',
# '0803291269',
# '0106299415',
# '1311065815',
# '0706772415',
# '0705620987',
# '0955624747',
# '1722432141',
# '1713677894',
# '1208410777',
# '0603319021',
# '0705623866',
# '1750602102',
# '1550039422',
# '0941192627',
# '1003631213',
# '0604030668',
# '0944324250',
# '1316745072',
# '1317856142',
# '1752476729',
# '2300213762',
# '2350245896',
# '0804702314',
# '0926800558',
# '0705571529',
# '0750878738',
# '1105391898',
# '1727191767',
# '1315265528',
# '1003886999',
# '0919589309',
# '0706255320',
# '0909902140',
# '1722242284',
# '1203970452',
# '1725397127',
# '0927316752',
# '1314426931',
# '0706101839',
# '0803222728',
# '1208001444',
# '0106844814',
# '1206717330',
# '0151201894',
# '1725976961',
# '0942675281',
# '0956751077',
# '1314567288',
# '0706240165',
# '0953795325',
# '1751905215',
# '0603882622',
# '1250929468',
# '0953150695',
# '0705266633',
# '0706086014',
# '0924439144',
# '1314125558',
# '1105829681',
# '0941616864',
# '0802768515',
# '0706074259',
# '1728232958',
# '0706939527',
# '0202249462',
# '0957942675',
# '2450169889',
# '0941434607',
# '0706504586',
# '0950608265',
# '0921489241',
# '1250240601',
# '1726310624',
# '0706575115',
# '1750190017',
# '0958075889',
# '0201787090',
# '1724691728',
# '1712185253',
# '1750294462',
# '1313355354',
# '0944128115',
# '0202459137',
# '0705752491',
# '0705649853',
# '0950325092',
# '0104522941',
# '1724712250',
# '0705834786',
# '0927910901',
# '0202107793',
# '1205087461',
# '1723917850',
# '0923397442',
# '1105166225',
# '1207628551',
# '0940432172',
# '1722498233',
# '1313763516',
# '1205563180',
# '0954553707',
# '0706745254',
# '0940110505',
# '1208462869',
# '0941354524',
# '1207350230',
# '0920325404',
# '0250258068',
# '1050286358',
# '0955663893',
# '0803889443',
# '0919910406',
# '0941376402',
# '0923224034',
# '1205290842',
# '0927688895',
# '0941380875',
# '1208005007',
# '0921060174',
# '0929756450',
# '0941348492',
# '0943304824',
# '1727114215',
# '0928494384',
# '1752685295',
# '1750252247',
# '1721504379',
# '1104191240',
# '1311240939',
# '1729960649',
# '1208826600',
# '1314829779',
# '0942777970',
# '0950819003',
# '0706511789',
# '1311065575',
# '0926615832',
# '0503332975',
# '1104664162',
# '0803523323',
# '1105014151',
# '0941141681',
# '0950979427',
# '0926066580',
# '0927057976',
# '0924797863',
# '0932247463',
# '0802741066',
# '1206836783',
# '0804072007',
# '1724781073',
# '1203476369',
# '1206152751',
# '1723757942',
# '2300226418',
# '0605060854',
# '1207299999',
# '1250744800',
# '2300444805',
# '0940250186',
# '1724438849',
# '0750441495',
# '1205655077',
# '0302273883',
# '1250022405',
# '0923171953',
# '0955217377',
# '2400015943',
# '0955442678',
# '0927558254',
# '0705571263',
# '0706668688',
# '0706470879',
# '1208049195',
# '0951117282',
# '0951811371',
# '0925197006',
# '0955357181',
# '0958822934',
# '1208533131',
# '1206468819',
# '0706983426',
# '0750590622',
# '1751080373',
# '1311449019',
# '1350693550',
# '0922560743',
# '1104035843',
# '0202092201',
# '0922408174',
# '0958638579',
# '1317347795',
# '1104499353',
# '1724353550',
# '1205927377',
# '1205097247',
# '1727056481',
# '0250114220',
# '1729845808',
# '1207960434',
# '2150371645',
# '1315452159',
# '0705593689',
# '2450916917',
# '0750856080',
# '1105658940',
# '0957402241',
# '1752630432',
# '0705897825',
# '0706237716',
# '1722840913',
# '1004224372',
# '0957254246',
# '0104204425',
# '0502971658',
# '1207350214',
# '1723550859',
# '0106027485',
# '0923524698',
# '0703145250',
# '1720959319',
# '0604333047',
# '0804313559',
# '0750798001',
# '0707391702',
# '1206314187',
# '0926545088',
# '0706634748',
# '0958525834',
# '0928048008',
# '0202210803',
# '1312728551',
# '0202206249',
# '0944014752',
# '0804074797',
# '1207281336',
# '0951997477',
# '0940343544',
# '1003308226',
# '1250190046',
# '1205322678',
# '0703430173',
# '0921352092',
# '0955928445',
# '0702363987',
# '0950479899',
# '1310955867',
# '1308901816',
# '0940408065',
# '0750409047',
# '1315016939',
# '0707053898',
# '0704266709',
# '0925669681',
# '1750658351',
# '0750623399',
# '0940344120',
# '0503584120',
# '1308942133',
# '1250384482',
# '0943895672',
# '1317852570',
# '0706983277',
# '2300458607',
# '0957411747',
# '0952231041',
# '0705608974',
# '0706682937',
# '1207341692',
# '1723739049',
# '1205551748',
# '0958092157',
# '0928157270',
# '0944335181',
# '0604663757',
# '0924549769',
# '1713481362',
# '0803573864',
# '0954447603',
# '0803421569',
# '1804461091',
# '0850069907',
# '0706574274',
# '0957559305',
# '0940001811',
# '0705793651',
# '0940441066',
# '0706261096',
# '0958084469',
# '0928155001',
# '0704428952',
# '1004041123',
# '0707028379',
# '1208629798',
# '0705654754',
# '0850675794',
# '0929218857',
# '1722603360',
# '0941727216',
# '0940212681',
# '0503463309',
# '1724552425',
# '0704969864',
# '2300768450',
# '0953664216',
# '0917180440',
# '0954624292',
# '0802911610',
# '1754124327',
# '0931078711',
# '1754785838',
# '0940081474',
# '1718745993',
# '0942133232',
# '0928737741',
# '0703857326',
# '1721977757',
# '0916871858',
# '0301411484',
# '0941540080',
# '1005448376',
# '1207940048',
# '1722511191',
# '0953338670',
# '0804023802',
# '0942683947',
# '0932277874',
# '0928132711',
# '0929137743',
# '2300335680',
# '1250716212',
# '1205523457',
# '1314312354',
# '0940038235',
# '0705764330',
# '2300282619',
# '0950509067',
# '0941339327',
# '0941681140',
# '2200085484',
# '1250485057',
# '0804350338',
# '1313738872',
# '1105791204',
# '0940212442',
# '0941449852',
# '2350031411',
# '0931950117',
# '0929063436',
# '1726126293',
# '0550340376',
# '0705653046',
# '1721048526',
# '1714020862',
# '1805300108',
# '1803942976',
# '1205173212',
# '0953109923',
# '0920357027',
# '1724205263',
# '0940650922',
# '1207240381',
# '0705262897',
# '1206915819',
# '0401594700',
# '1728060003',
# '0931122121',
# '0604022517',
# '0921740957',
# '1206284208',
# '0921047668',
# '0202257937',
# '0958515017',
# '1727673038',
# '1314775592',
# '1207468065',
# '0929368090',
# '1207050772',
# '0202226692',
# '0921668505',
# '1250079249',
# '2400309403',
# '1314788769',
# '0706436508',
# '2000066346',
# '0955356829',
# '1105405425',
# '0940584774',
# '0951508316',
# '0952927747',
# '1313677880',
# '0750590572',
# '1206649541',
# '0706170966',
# '0915711261',
# '0107894750',
# '0750798209',
# '2450130758',
# '1150434213',
# '1207714310',
# '1729036812',
# '0927795484',
# '0704961283',
# '1312666173',
# '1207621754',
# '0604780940',
# '1205342627',
# '2350961609',
# '0921814752',
# '0940171747',
# '0202215687',
# '0924598030',
# '1723340384',
# '1724696784',
# '1206461665',
# '0944172592',
# '0802754184',
# '1204545154',
# '0803997022',
# '0927718155',
# '1725909699',
# '2300451065',
# '0705973980',
# '0926923384',
# '1207582725',
# '0930618301',
# '0605369495',
# '0927000687',
# '1207518158',
# '1850730563',
# '1316716495',
# '2150223887',
# '0706299625',
# '0916610645',
# '1207058635',
# '0950078626',
# '0803505429',
# '0705341642',
# '1208929057',
# '0953162997',
# '1727455162',
# '0940141807',
# '1208646719',
# '0952035764',
# '0929767986',
# '2300613441',
# '0705740694',
# '0928061175',
# '1714101605',
# '0805386489',
# '1208108942',
# '1314758234',
# '2450542945',
# '0942755299',
# '1723216410',
# '1716335458',
# '0804137511',
# '0929801587',
# '0921549655',
# '1804564845',
# '1724475015',
# '0953566452',
# '1206548289',
# '1207738061',
# '1208937480',
# '0107125932',
# '1724776107',
# '0923229256',
# '0943691212',
# '1208193753',
# '1207319680',
# '0929362069',
# '0956379598',
# '0925231987',
# '0957973993',
# '1206845412',
# '0958845489',
# '0707052635',
# '1728408962',
# '1004360606',
# '0942206574',
# '0705577203',
# '1718395971',
# '0958614836',
# '1206643254',
# '1105635724',
# '0250236205',
# '1714360458',
# '0957836851',
# '1317168829',
# '0927611756',
# '0923215560',
# '1312073677',
# '0940970700',
# '0941547598',
# '1207314194',
# '0919018523',
# '1754048658',
# '1251292569',
# '0706011061',
# '1207370196',
# '0942831314',
# '1315612117',
# '2200503429',
# '0927043042',
# '2250149347',
# '1350810907',
# '0923543938',
# '2350385304',
# '1207439421',
# '1206738922',
# '0928915578',
# '0250000676',
# '1206574541',
# '0942554023',
# '0955291554',
# '2300472459',
# '0951484484',
# '0953680899',
# '0502963754',
# '1727637058',
# '0804155034',
# '2300430465',
# '1207665892',
# '0941100638',
# '1314145366',
# '1726233594',
# '2350993511',
# '1250184049',
# '0944111160',
# '1206844787',
# '0928005867',
# '0941899189',
# '0805402815',
# '1314709872',
# '0929974731',
# '0954262267',
# '1104529985',
# '0503546517',
# '1208824746',
# '0943786137',
# '0942168949',
# '1206953919',
# '0603797192',
# '1208852655',
# '1311214744',
# '0955723440',
# '0850852153',
# '1204140345',
# '0956929582',
# '1726194549',
# '0705555340',
# '1729874949',
# '0202382156',
# '1208740454',
# '1205716374'
# ]
#
#             carrera = Carrera.objects.get(pk=96)
#             nivel = Nivel.objects.get(pk=1516)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN economis_linea 17')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_ecolinea()
#
# def matricula_admision_comunicacionlinea():
#     with transaction.atomic():
#         try:
#             cedulas = ['1105370553',
# '0952696938',
# '1250939434',
# '0952518215',
# '0940150147',
# '0929362895',
# '1311901258',
# '1250949276',
# '0924612112',
# '1208040467',
# '1720174729',
# '0850707878',
# '1205551706',
# '0706775186',
# '0956129423',
# '0921844940',
# '1105444424',
# '0704398197',
# '0960253318',
# '0940203532',
# '2400089278',
# '1729942571',
# '2300080930',
# '1206095356',
# '1311034639',
# '0926035718',
# '1722354535',
# '0706141140',
# '1206265835',
# '1104465651',
# '0502428220',
# '1315091411',
# '0923551014',
# '0957796022',
# '1207124536',
# '0706644796',
# '0803457696',
# '0803904713',
# '0950807875',
# '0940098213',
# '0703999748',
# '0940878598',
# '0929006039',
# '0928191246',
# '0603595109',
# '1315958619',
# '0926785825',
# '0401327325',
# '1003260286',
# '1803838794',
# '1721665915',
# '1251025886',
# '1208251429',
# '1204695447',
# '1207868900',
# '1728979566',
# '1104123144',
# '1758813834',
# '1003345947',
# '0928639111',
# '0931007272',
# '0930231089',
# '0927207704',
# '0503156846',
# '0929221588',
# '0917109787',
# '0604070698',
# '2300642002',
# '0954179974',
# '2450393018',
# '0940422371',
# '2450192584',
# '0603807181',
# '0706103348',
# '0914888201',
# '0926076456',
# '0941457210',
# '0941546756',
# '1105820045',
# '0940432032',
# '1104331804',
# '0923213235',
# '0503314775',
# '0603608522',
# '0803090919',
# '2350938623',
# '0928081645',
# '1900729367',
# '1105793655',
# '0751022328',
# '1207950856',
# '1004515498',
# '0943012906',
# '1309459020',
# '1103675318',
# '0941743387',
# '0923700652',
# '1207482504',
# '1351776982',
# '1206795211',
# '0952992923',
# '1314225770',
# '0951678911',
# '0750143836',
# '1729865855',
# '1715508832',
# '2350987612',
# '0801281528',
# '1204683021',
# '1802775385',
# '0705446524',
# '0922953922',
# '1310975386',
# '1719420554',
# '0604028225',
# '0704008515',
# '0750152712',
# '1724493695',
# '2300414493',
# '0707335626',
# '1251310684',
# '0917757395',
# '2400249567',
# '1310968118',
# '1721949897',
# '1726887738',
# '0952017390',
# '0920857331',
# '0605402320',
# '1310733017',
# '0927447953',
# '0705311074',
# '0104726765',
# '0503159998',
# '0924851363',
# '2300051634',
# '0707058863',
# '0201999968',
# '1204120495',
# '0921926937',
# '0940452360',
# '0302174859',
# '2100889399',
# '0706442258',
# '0751084278',
# '0923368914',
# '1802743011',
# '0503664500',
# '2450578618',
# '1724138415',
# '1712178001',
# '0951701325',
# '0706538360',
# '1803942992',
# '1711035251',
# '0928596501',
# '0931624852',
# '0929946440',
# '1722199617',
# '0927347153',
# '0850055690',
# '1250272174',
# '1720891488',
# '1501174328',
# '0706004728',
# '0942226614',
# '1206607549',
# '0926979006',
# '0921637583',
# '0107938102',
# '1207426998',
# '1313730663',
# '0706419082',
# '1250972641',
# '0954627022',
# '1207672971',
# '0503931628'
# ]
#
#             carrera = Carrera.objects.get(pk=102)
#             nivel = Nivel.objects.get(pk=1516)
#             periodo = Periodo.objects.get(pk=224)
#             persona = Persona.objects.get(pk=29898)
#             inscripciones= Inscripcion.objects.filter(status=True, persona__cedula__in=cedulas, carrera=carrera)
#             for inscripcion in inscripciones:
#                 mimalla = inscripcion.malla_inscripcion()
#                 mallaacutualcarrera = Malla.objects.filter(status=True, carrera=carrera, validamatricula=True,
#                                                            vigente=True).first()
#                 if mallaacutualcarrera and mimalla and (not mallaacutualcarrera.id == mimalla.malla_id):
#                     malla = inscripcion.inscripcionmalla_set.filter(status=True)
#                     malla.delete()
#                     im = InscripcionMalla(inscripcion=inscripcion, malla=mallaacutualcarrera)
#                     im.save()
#                     inscripcion.actualizar_creditos()
#                     mimalla = im
#
#                 if Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                           asignaturamalla__malla__carrera=inscripcion.carrera,
#                                           nivel__sesion=inscripcion.sesion).exists():
#                     # if not eInscripcion.matricula_periodo(periodo):
#                     matricula = Matricula.objects.filter(inscripcion=inscripcion, nivel=nivel).first()
#                     if not matricula:
#                         matricula = Matricula(inscripcion=inscripcion,
#                                               nivel=nivel,
#                                               pago=False,
#                                               iece=False,
#                                               becado=False,
#                                               porcientobeca=0,
#                                               fecha=datetime.now().date(),
#                                               hora=datetime.now().time(),
#                                               fechatope=fechatope(datetime.now().date()),
#                                               automatriculaadmision=True,
#                                               fechaautomatriculaadmision=datetime.now())
#                         matricula.save(usuario_id=persona.usuario.id)
#                     # else:
#                     #     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                     print(matricula)
#                     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                     if not eMateriaAsignadas.values("id").exists():
#                         # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                         paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla,
#                                                            asignaturamalla__malla__carrera=inscripcion.carrera,
#                                                            nivel__sesion=inscripcion.sesion).values_list(
#                             'paralelomateria').distinct()
#
#                         if paralelos.values("id").exists():
#                             paralelo_atomar = None
#                             tiene_cupo_paralelo = False
#                             for paralelo in paralelos:
#                                 tiene_cupo_paralelo_aux = True
#                                 for mat in Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo,
#                                                                   asignaturamalla__malla=mimalla.malla,
#                                                                   asignaturamalla__malla__carrera=carrera,
#                                                                   nivel__sesion=inscripcion.sesion):
#                                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                         tiene_cupo_paralelo_aux = False
#                                         break
#                                 if tiene_cupo_paralelo_aux:
#                                     paralelo_atomar = paralelo
#                                     tiene_cupo_paralelo = True
#                                     break
#                             if tiene_cupo_paralelo:
#                                 materias_c = Materia.objects.filter(nivel__periodo=periodo, paralelomateria=paralelo_atomar,
#                                                                     asignaturamalla__malla=mimalla.malla,
#                                                                     asignaturamalla__malla__carrera=carrera,
#                                                                     nivel__sesion=inscripcion.sesion)
#                                 for materia in materias_c:
#                                     if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                        materia=materia).exists():
#                                         matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                             asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                         materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                           materia=materia,
#                                                                           notafinal=0,
#                                                                           asistenciafinal=0,
#                                                                           cerrado=False,
#                                                                           matriculas=matriculas,
#                                                                           observaciones='',
#                                                                           estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                           cobroperdidagratuidad=inscripcion.gratuidad)
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         materiaasignada.asistencias()
#                                         materiaasignada.evaluacion()
#                                         materiaasignada.mis_planificaciones()
#                                         materiaasignada.save(usuario_id=persona.usuario.id)
#                                         print(materiaasignada)
#
#                     matricula.actualizar_horas_creditos()
#                     matricula.estado_matricula = 2
#                     matricula.save(usuario_id=persona.usuario.id)
#                     matricula.calcula_nivel()
#                     inscripcion.actualizar_nivel()
#                     if inscripcion.estado_gratuidad == 3:
#                         if inscripcion.sesion_id == 13:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                         else:
#                             tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                         if matricula.tipomatricula_id == 1:
#                             matricula.estado_matricula = 2
#                             matricula.save(usuario_id=persona.usuario.id)
#
#                         num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                         valor_x_materia = 20
#                         valor_total = num_materias * valor_x_materia
#
#                         if not Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula).exists():
#                             print(inscripcion.gratuidad)
#                             rubro1 = Rubro(tipo=tiporubromatricula,
#                                            persona=inscripcion.persona,
#                                            matricula=matricula,
#                                            nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
#                                            cuota=1,
#                                            fecha=datetime.now().date(),
#                                            # fechavence=datetime.now().date() + timedelta(days=22),
#                                            fechavence=datetime.now().date() + timedelta(days=23),
#                                            valor=valor_total,
#                                            iva_id=1,
#                                            valoriva=0,
#                                            valortotal=valor_total,
#                                            saldo=valor_total,
#                                            cancelado=False)
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#                         else:
#                             rubro1 = Rubro.objects.filter(persona=inscripcion.persona, matricula=matricula)[0]
#                             rubro1.tipo = tiporubromatricula
#                             rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodo.nombre
#                             rubro1.cuota = 1
#                             rubro1.fecha = datetime.now().date()
#                             # rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                             rubro1.fechavence = datetime.now().date() + timedelta(days=23),
#                             rubro1.valor = valor_total
#                             rubro1.iva_id = 1
#                             rubro1.valoriva = 0
#                             rubro1.valortotal = valor_total
#                             rubro1.saldo = valor_total
#                             rubro1.cancelado = False
#                             rubro1.save(usuario_id=persona.usuario.id)
#                             print(rubro1)
#             print('FIN com_linea 18')
#         except Exception as ex:
#             textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#             print(textoerror)
#
# matricula_admision_comunicacionlinea()

def actualizar_modelo():
    try:
        periodo = Periodo.objects.get(id=224)
        materias = Materia.objects.filter(status=True, nivel__periodo=periodo, modeloevaluativo_id=7).exclude(nivel_id__in=[1516,1517])
        total = materias.count()
        cont = 1

        for materia in materias:
            materia.crear_actualizar_categoria_notas_curso()
            print(cont, "de", total )
            cont += 1

        print('PROCESO FINALIZADO')

    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

def homologacion_inicial():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_inicial_2_1.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inicial.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("primero")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10926,10928]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10928]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10831:
                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud=3,
                                                                                                               itinerariomalla=itinerarioprimero).exists()

                                            if not practica or practicarechazada :
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10856:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosegundo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10880:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariotercero).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10894:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariocuarto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10899:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioquinto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10907:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10910:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10928:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10926]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10926 and inscripcion.numero_horas_proyectos_vinculacion() < 320:
                                            horasfalta = 320 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_inicial2():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_inicial_2_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inicial.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("segundo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10926,10928]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10928]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10831:
                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud=3,
                                                                                                               itinerariomalla=itinerarioprimero).exists()

                                            if not practica or practicarechazada :
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10856:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosegundo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10880:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariotercero).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10894:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariocuarto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10899:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioquinto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10907:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10910:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10928:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10926]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10926 and inscripcion.numero_horas_proyectos_vinculacion() < 320:
                                            horasfalta = 320 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_inicial3():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_inicial_2_3.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inicial.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("tercero")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10926,10928]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10928]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10831:
                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud=3,
                                                                                                               itinerariomalla=itinerarioprimero).exists()

                                            if not practica or practicarechazada :
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10856:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosegundo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10880:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariotercero).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10894:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariocuarto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10899:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioquinto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10907:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10910:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10928:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10926]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10926 and inscripcion.numero_horas_proyectos_vinculacion() < 320:
                                            horasfalta = 320 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_inicial4():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_inicial_2_4.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inicial.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("cuarto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10926,10928]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10928]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10831:
                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud=3,
                                                                                                               itinerariomalla=itinerarioprimero).exists()

                                            if not practica or practicarechazada :
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10856:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosegundo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10880:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariotercero).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10894:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariocuarto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10899:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioquinto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10907:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10910:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10928:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10926]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10926 and inscripcion.numero_horas_proyectos_vinculacion() < 320:
                                            horasfalta = 320 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_inicial5():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_inicial_2_5.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inicial.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("quinto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10926,10928]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10928]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10831:
                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud=3,
                                                                                                               itinerariomalla=itinerarioprimero).exists()

                                            if not practica or practicarechazada :
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10856:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosegundo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10880:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariotercero).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10894:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariocuarto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10899:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioquinto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10907:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10910:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10928:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10926]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10926 and inscripcion.numero_horas_proyectos_vinculacion() < 320:
                                            horasfalta = 320 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_inicial6():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_inicial_2_6.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inicial.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("sexto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10926,10928]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10928]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10831:
                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud=3,
                                                                                                               itinerariomalla=itinerarioprimero).exists()

                                            if not practica or practicarechazada :
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10856:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosegundo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10880:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariotercero).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10894:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariocuarto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10899:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioquinto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10907:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10910:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10928:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10926]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10926 and inscripcion.numero_horas_proyectos_vinculacion() < 320:
                                            horasfalta = 320 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_inicial7():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_inicial_2_7.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inicial.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("septimo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10926,10928]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10928]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10831:
                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud=3,
                                                                                                               itinerariomalla=itinerarioprimero).exists()

                                            if not practica or practicarechazada :
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10856:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosegundo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10880:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariotercero).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10894:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariocuarto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10899:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioquinto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10907:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10910:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10928:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10926]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10926 and inscripcion.numero_horas_proyectos_vinculacion() < 320:
                                            horasfalta = 320 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_inicial8():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_inicial_2_8.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inicial.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("octavo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10926,10928]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10928]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10831:
                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud=3,
                                                                                                               itinerariomalla=itinerarioprimero).exists()

                                            if not practica or practicarechazada :
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10856:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosegundo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10880:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariotercero).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10894:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariocuarto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10899:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioquinto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10907:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10910:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10928:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10926]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10926 and inscripcion.numero_horas_proyectos_vinculacion() < 320:
                                            horasfalta = 320 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_basica():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_basica_2_1.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("basica.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("primero")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=135
        mallaantigua_id=208
        mallanueva_id=490

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                        InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[
                            0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888, 10913,
                                                                        10930, 10944]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True


                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888,
                                                                            10913, 10930, 10944]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10822:
                                                itinerarioprimero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=1)
                                                iprimeronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=1)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioprimero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioprimero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioprimero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iprimeronuevo.horas_practicas,
                                                            nivelmalla=iprimeronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iprimeronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioprimero).update(
                                                    itinerario=iprimeronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10834:
                                                itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=2)
                                                isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=2)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosegundo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosegundo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosegundo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isegundonuevo.horas_practicas,
                                                            nivelmalla=isegundonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isegundonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosegundo).update(
                                                    itinerario=isegundonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10846:
                                                itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=3)
                                                iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=3)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariotercero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariotercero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariotercero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iterceronuevo.horas_practicas,
                                                            nivelmalla=iterceronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iterceronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariotercero).update(
                                                    itinerario=iterceronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10858:
                                                itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=4)
                                                icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=4)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariocuarto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariocuarto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariocuarto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=icuartonuevo.horas_practicas,
                                                            nivelmalla=icuartonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=icuartonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariocuarto).update(
                                                    itinerario=icuartonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10870:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iquintonuevo.horas_practicas,
                                                            nivelmalla=iquintonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iquintonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10888:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10913:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10930:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=8)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=ioctavonuevo.horas_practicas,
                                                            nivelmalla=ioctavonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=ioctavonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10944:
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=inovenonuevo.horas_practicas,
                                                            nivelmalla=inovenonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=inovenonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)

                                if equivalencia.asignaturamallasalto_id in [10913, 10930]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10913 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10930 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    # if cont_asig_vinculacion_aprobadas != 0:
                    #     if cont_asig_vinculacion_aprobadas == 1:
                    #         horasfalta = 80
                    #     elif cont_asig_vinculacion_aprobadas == 2:
                    #         horasfalta = 160
                    #     horasfalta = horasfalta - inscripcion.numero_horas_proyectos_vinculacion()
                    #     vinculacion = ParticipantesMatrices(status=True,
                    #                                         matrizevidencia_id=2,
                    #                                         proyecto_id=601,
                    #                                         inscripcion=inscripcion,
                    #                                         horas=horasfalta,
                    #                                         registrohorasdesde=fechainicioitinerario,
                    #                                         registrohorashasta=fechafinitinerario,
                    #                                         estado=1
                    #                                         )
                    #     vinculacion.save()

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)



            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def homologacion_basica2():
    # verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_basica_2_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("Libro1.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo["Hoja1"]
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 135
        mallaantigua_id = 208
        mallanueva_id = 490

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                            InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                            malla_id=mallaantigua_id)[
                                0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888, 10913,
                                                                        10930, 10944]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True


                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888,
                                                                            10913, 10930, 10944]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10822:
                                                itinerarioprimero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=1)
                                                iprimeronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=1)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioprimero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioprimero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioprimero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iprimeronuevo.horas_practicas,
                                                            nivelmalla=iprimeronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iprimeronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioprimero).update(
                                                    itinerario=iprimeronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10834:
                                                itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=2)
                                                isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=2)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosegundo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosegundo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosegundo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isegundonuevo.horas_practicas,
                                                            nivelmalla=isegundonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isegundonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosegundo).update(
                                                    itinerario=isegundonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10846:
                                                itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=3)
                                                iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=3)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariotercero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariotercero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariotercero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iterceronuevo.horas_practicas,
                                                            nivelmalla=iterceronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iterceronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariotercero).update(
                                                    itinerario=iterceronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10858:
                                                itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=4)
                                                icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=4)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariocuarto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariocuarto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariocuarto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=icuartonuevo.horas_practicas,
                                                            nivelmalla=icuartonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=icuartonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariocuarto).update(
                                                    itinerario=icuartonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10870:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iquintonuevo.horas_practicas,
                                                            nivelmalla=iquintonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iquintonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10888:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10913:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10930:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=8)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=ioctavonuevo.horas_practicas,
                                                            nivelmalla=ioctavonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=ioctavonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10944:
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=inovenonuevo.horas_practicas,
                                                            nivelmalla=inovenonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=inovenonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)

                                if equivalencia.asignaturamallasalto_id in [10913, 10930]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10913 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10930 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    # if cont_asig_vinculacion_aprobadas != 0:
                    #     if cont_asig_vinculacion_aprobadas == 1:
                    #         horasfalta = 80
                    #     elif cont_asig_vinculacion_aprobadas == 2:
                    #         horasfalta = 160
                    #     horasfalta = horasfalta - inscripcion.numero_horas_proyectos_vinculacion()
                    #     vinculacion = ParticipantesMatrices(status=True,
                    #                                         matrizevidencia_id=2,
                    #                                         proyecto_id=601,
                    #                                         inscripcion=inscripcion,
                    #                                         horas=horasfalta,
                    #                                         registrohorasdesde=fechainicioitinerario,
                    #                                         registrohorashasta=fechafinitinerario,
                    #                                         estado=1
                    #                                         )
                    #     vinculacion.save()

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_basica3():
    # verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_basica_2_3.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("basica.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("tercero")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 135
        mallaantigua_id = 208
        mallanueva_id = 490

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                            InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                            malla_id=mallaantigua_id)[
                                0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888, 10913,
                                                                        10930, 10944]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True


                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888,
                                                                            10913, 10930, 10944]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10822:
                                                itinerarioprimero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=1)
                                                iprimeronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=1)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioprimero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioprimero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioprimero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iprimeronuevo.horas_practicas,
                                                            nivelmalla=iprimeronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iprimeronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioprimero).update(
                                                    itinerario=iprimeronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10834:
                                                itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=2)
                                                isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=2)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosegundo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosegundo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosegundo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isegundonuevo.horas_practicas,
                                                            nivelmalla=isegundonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isegundonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosegundo).update(
                                                    itinerario=isegundonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10846:
                                                itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=3)
                                                iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=3)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariotercero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariotercero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariotercero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iterceronuevo.horas_practicas,
                                                            nivelmalla=iterceronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iterceronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariotercero).update(
                                                    itinerario=iterceronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10858:
                                                itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=4)
                                                icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=4)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariocuarto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariocuarto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariocuarto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=icuartonuevo.horas_practicas,
                                                            nivelmalla=icuartonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=icuartonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariocuarto).update(
                                                    itinerario=icuartonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10870:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iquintonuevo.horas_practicas,
                                                            nivelmalla=iquintonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iquintonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10888:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10913:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10930:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=8)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=ioctavonuevo.horas_practicas,
                                                            nivelmalla=ioctavonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=ioctavonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10944:
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=inovenonuevo.horas_practicas,
                                                            nivelmalla=inovenonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=inovenonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)

                                if equivalencia.asignaturamallasalto_id in [10913, 10930]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10913 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10930 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    # if cont_asig_vinculacion_aprobadas != 0:
                    #     if cont_asig_vinculacion_aprobadas == 1:
                    #         horasfalta = 80
                    #     elif cont_asig_vinculacion_aprobadas == 2:
                    #         horasfalta = 160
                    #     horasfalta = horasfalta - inscripcion.numero_horas_proyectos_vinculacion()
                    #     vinculacion = ParticipantesMatrices(status=True,
                    #                                         matrizevidencia_id=2,
                    #                                         proyecto_id=601,
                    #                                         inscripcion=inscripcion,
                    #                                         horas=horasfalta,
                    #                                         registrohorasdesde=fechainicioitinerario,
                    #                                         registrohorashasta=fechafinitinerario,
                    #                                         estado=1
                    #                                         )
                    #     vinculacion.save()

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_basica4():
    # verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_basica_2_4.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("basica.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("cuarto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 135
        mallaantigua_id = 208
        mallanueva_id = 490

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                            InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                            malla_id=mallaantigua_id)[
                                0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888, 10913,
                                                                        10930, 10944]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True


                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888,
                                                                            10913, 10930, 10944]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10822:
                                                itinerarioprimero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=1)
                                                iprimeronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=1)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioprimero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioprimero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioprimero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iprimeronuevo.horas_practicas,
                                                            nivelmalla=iprimeronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iprimeronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioprimero).update(
                                                    itinerario=iprimeronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10834:
                                                itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=2)
                                                isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=2)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosegundo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosegundo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosegundo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isegundonuevo.horas_practicas,
                                                            nivelmalla=isegundonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isegundonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosegundo).update(
                                                    itinerario=isegundonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10846:
                                                itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=3)
                                                iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=3)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariotercero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariotercero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariotercero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iterceronuevo.horas_practicas,
                                                            nivelmalla=iterceronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iterceronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariotercero).update(
                                                    itinerario=iterceronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10858:
                                                itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=4)
                                                icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=4)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariocuarto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariocuarto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariocuarto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=icuartonuevo.horas_practicas,
                                                            nivelmalla=icuartonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=icuartonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariocuarto).update(
                                                    itinerario=icuartonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10870:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iquintonuevo.horas_practicas,
                                                            nivelmalla=iquintonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iquintonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10888:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10913:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10930:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=8)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=ioctavonuevo.horas_practicas,
                                                            nivelmalla=ioctavonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=ioctavonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10944:
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=inovenonuevo.horas_practicas,
                                                            nivelmalla=inovenonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=inovenonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)

                                if equivalencia.asignaturamallasalto_id in [10913, 10930]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10913 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10930 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    # if cont_asig_vinculacion_aprobadas != 0:
                    #     if cont_asig_vinculacion_aprobadas == 1:
                    #         horasfalta = 80
                    #     elif cont_asig_vinculacion_aprobadas == 2:
                    #         horasfalta = 160
                    #     horasfalta = horasfalta - inscripcion.numero_horas_proyectos_vinculacion()
                    #     vinculacion = ParticipantesMatrices(status=True,
                    #                                         matrizevidencia_id=2,
                    #                                         proyecto_id=601,
                    #                                         inscripcion=inscripcion,
                    #                                         horas=horasfalta,
                    #                                         registrohorasdesde=fechainicioitinerario,
                    #                                         registrohorashasta=fechafinitinerario,
                    #                                         estado=1
                    #                                         )
                    #     vinculacion.save()

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_basica5():
    # verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_basica_2_5.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("basica.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("quinto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 135
        mallaantigua_id = 208
        mallanueva_id = 490

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                            InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                            malla_id=mallaantigua_id)[
                                0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888, 10913,
                                                                        10930, 10944]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True


                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888,
                                                                            10913, 10930, 10944]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10822:
                                                itinerarioprimero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=1)
                                                iprimeronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=1)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioprimero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioprimero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioprimero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iprimeronuevo.horas_practicas,
                                                            nivelmalla=iprimeronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iprimeronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioprimero).update(
                                                    itinerario=iprimeronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10834:
                                                itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=2)
                                                isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=2)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosegundo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosegundo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosegundo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isegundonuevo.horas_practicas,
                                                            nivelmalla=isegundonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isegundonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosegundo).update(
                                                    itinerario=isegundonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10846:
                                                itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=3)
                                                iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=3)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariotercero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariotercero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariotercero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iterceronuevo.horas_practicas,
                                                            nivelmalla=iterceronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iterceronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariotercero).update(
                                                    itinerario=iterceronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10858:
                                                itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=4)
                                                icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=4)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariocuarto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariocuarto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariocuarto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=icuartonuevo.horas_practicas,
                                                            nivelmalla=icuartonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=icuartonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariocuarto).update(
                                                    itinerario=icuartonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10870:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iquintonuevo.horas_practicas,
                                                            nivelmalla=iquintonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iquintonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10888:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10913:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10930:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=8)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=ioctavonuevo.horas_practicas,
                                                            nivelmalla=ioctavonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=ioctavonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10944:
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=inovenonuevo.horas_practicas,
                                                            nivelmalla=inovenonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=inovenonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)

                                if equivalencia.asignaturamallasalto_id in [10913, 10930]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10913 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10930 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    # if cont_asig_vinculacion_aprobadas != 0:
                    #     if cont_asig_vinculacion_aprobadas == 1:
                    #         horasfalta = 80
                    #     elif cont_asig_vinculacion_aprobadas == 2:
                    #         horasfalta = 160
                    #     horasfalta = horasfalta - inscripcion.numero_horas_proyectos_vinculacion()
                    #     vinculacion = ParticipantesMatrices(status=True,
                    #                                         matrizevidencia_id=2,
                    #                                         proyecto_id=601,
                    #                                         inscripcion=inscripcion,
                    #                                         horas=horasfalta,
                    #                                         registrohorasdesde=fechainicioitinerario,
                    #                                         registrohorashasta=fechafinitinerario,
                    #                                         estado=1
                    #                                         )
                    #     vinculacion.save()

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_basica6():
    # verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_basica_2_6.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("basica.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("sexto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 135
        mallaantigua_id = 208
        mallanueva_id = 490

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                            InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                            malla_id=mallaantigua_id)[
                                0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888, 10913,
                                                                        10930, 10944]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True


                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888,
                                                                            10913, 10930, 10944]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10822:
                                                itinerarioprimero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=1)
                                                iprimeronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=1)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioprimero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioprimero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioprimero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iprimeronuevo.horas_practicas,
                                                            nivelmalla=iprimeronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iprimeronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioprimero).update(
                                                    itinerario=iprimeronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10834:
                                                itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=2)
                                                isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=2)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosegundo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosegundo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosegundo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isegundonuevo.horas_practicas,
                                                            nivelmalla=isegundonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isegundonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosegundo).update(
                                                    itinerario=isegundonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10846:
                                                itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=3)
                                                iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=3)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariotercero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariotercero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariotercero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iterceronuevo.horas_practicas,
                                                            nivelmalla=iterceronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iterceronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariotercero).update(
                                                    itinerario=iterceronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10858:
                                                itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=4)
                                                icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=4)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariocuarto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariocuarto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariocuarto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=icuartonuevo.horas_practicas,
                                                            nivelmalla=icuartonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=icuartonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariocuarto).update(
                                                    itinerario=icuartonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10870:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iquintonuevo.horas_practicas,
                                                            nivelmalla=iquintonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iquintonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10888:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10913:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10930:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=8)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=ioctavonuevo.horas_practicas,
                                                            nivelmalla=ioctavonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=ioctavonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10944:
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=inovenonuevo.horas_practicas,
                                                            nivelmalla=inovenonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=inovenonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)

                                if equivalencia.asignaturamallasalto_id in [10913, 10930]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10913 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10930 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    # if cont_asig_vinculacion_aprobadas != 0:
                    #     if cont_asig_vinculacion_aprobadas == 1:
                    #         horasfalta = 80
                    #     elif cont_asig_vinculacion_aprobadas == 2:
                    #         horasfalta = 160
                    #     horasfalta = horasfalta - inscripcion.numero_horas_proyectos_vinculacion()
                    #     vinculacion = ParticipantesMatrices(status=True,
                    #                                         matrizevidencia_id=2,
                    #                                         proyecto_id=601,
                    #                                         inscripcion=inscripcion,
                    #                                         horas=horasfalta,
                    #                                         registrohorasdesde=fechainicioitinerario,
                    #                                         registrohorashasta=fechafinitinerario,
                    #                                         estado=1
                    #                                         )
                    #     vinculacion.save()

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_basica7():
    # verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_basica_2_7.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("basica.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("septimo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 135
        mallaantigua_id = 208
        mallanueva_id = 490

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                            InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                            malla_id=mallaantigua_id)[
                                0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888, 10913,
                                                                        10930, 10944]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True


                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888,
                                                                            10913, 10930, 10944]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10822:
                                                itinerarioprimero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=1)
                                                iprimeronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=1)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioprimero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioprimero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioprimero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iprimeronuevo.horas_practicas,
                                                            nivelmalla=iprimeronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iprimeronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioprimero).update(
                                                    itinerario=iprimeronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10834:
                                                itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=2)
                                                isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=2)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosegundo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosegundo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosegundo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isegundonuevo.horas_practicas,
                                                            nivelmalla=isegundonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isegundonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosegundo).update(
                                                    itinerario=isegundonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10846:
                                                itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=3)
                                                iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=3)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariotercero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariotercero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariotercero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iterceronuevo.horas_practicas,
                                                            nivelmalla=iterceronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iterceronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariotercero).update(
                                                    itinerario=iterceronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10858:
                                                itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=4)
                                                icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=4)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariocuarto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariocuarto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariocuarto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=icuartonuevo.horas_practicas,
                                                            nivelmalla=icuartonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=icuartonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariocuarto).update(
                                                    itinerario=icuartonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10870:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iquintonuevo.horas_practicas,
                                                            nivelmalla=iquintonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iquintonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10888:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10913:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10930:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=8)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=ioctavonuevo.horas_practicas,
                                                            nivelmalla=ioctavonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=ioctavonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10944:
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=inovenonuevo.horas_practicas,
                                                            nivelmalla=inovenonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=inovenonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)

                                if equivalencia.asignaturamallasalto_id in [10913, 10930]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10913 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10930 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    # if cont_asig_vinculacion_aprobadas != 0:
                    #     if cont_asig_vinculacion_aprobadas == 1:
                    #         horasfalta = 80
                    #     elif cont_asig_vinculacion_aprobadas == 2:
                    #         horasfalta = 160
                    #     horasfalta = horasfalta - inscripcion.numero_horas_proyectos_vinculacion()
                    #     vinculacion = ParticipantesMatrices(status=True,
                    #                                         matrizevidencia_id=2,
                    #                                         proyecto_id=601,
                    #                                         inscripcion=inscripcion,
                    #                                         horas=horasfalta,
                    #                                         registrohorasdesde=fechainicioitinerario,
                    #                                         registrohorashasta=fechafinitinerario,
                    #                                         estado=1
                    #                                         )
                    #     vinculacion.save()

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_basica8():
    # verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_basica_2_8.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ebasical.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("octavo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 135
        mallaantigua_id = 208
        mallanueva_id = 490

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                            InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                            malla_id=mallaantigua_id)[
                                0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888, 10913,
                                                                        10930, 10944]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True


                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10822, 10834, 10846, 10858, 10870, 10888,
                                                                            10913, 10930, 10944]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10822:
                                                itinerarioprimero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=1)
                                                iprimeronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=1)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioprimero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioprimero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioprimero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iprimeronuevo.horas_practicas,
                                                            nivelmalla=iprimeronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iprimeronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioprimero).update(
                                                    itinerario=iprimeronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10834:
                                                itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=2)
                                                isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=2)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosegundo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosegundo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosegundo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isegundonuevo.horas_practicas,
                                                            nivelmalla=isegundonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isegundonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosegundo).update(
                                                    itinerario=isegundonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10846:
                                                itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=3)
                                                iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=3)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariotercero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariotercero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariotercero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iterceronuevo.horas_practicas,
                                                            nivelmalla=iterceronuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iterceronuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariotercero).update(
                                                    itinerario=iterceronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10858:
                                                itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=4)
                                                icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=4)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariocuarto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariocuarto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariocuarto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=icuartonuevo.horas_practicas,
                                                            nivelmalla=icuartonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=icuartonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariocuarto).update(
                                                    itinerario=icuartonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10870:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iquintonuevo.horas_practicas,
                                                            nivelmalla=iquintonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iquintonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10888:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10913:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10930:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=8)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=ioctavonuevo.horas_practicas,
                                                            nivelmalla=ioctavonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=ioctavonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10944:
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=inovenonuevo.horas_practicas,
                                                            nivelmalla=inovenonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=inovenonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)

                                if equivalencia.asignaturamallasalto_id in [10913, 10930]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10913 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10930 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    # if cont_asig_vinculacion_aprobadas != 0:
                    #     if cont_asig_vinculacion_aprobadas == 1:
                    #         horasfalta = 80
                    #     elif cont_asig_vinculacion_aprobadas == 2:
                    #         horasfalta = 160
                    #     horasfalta = horasfalta - inscripcion.numero_horas_proyectos_vinculacion()
                    #     vinculacion = ParticipantesMatrices(status=True,
                    #                                         matrizevidencia_id=2,
                    #                                         proyecto_id=601,
                    #                                         inscripcion=inscripcion,
                    #                                         horas=horasfalta,
                    #                                         registrohorasdesde=fechainicioitinerario,
                    #                                         registrohorashasta=fechafinitinerario,
                    #                                         estado=1
                    #                                         )
                    #     vinculacion.save()

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

print("Función varios")
with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:
    from settings import DEBUG
    # if DEBUG:
    #     path_anexo = 'reporte_acortezl__examen_admisión_enero2024.xlsx'
    # future_1 = executor.submit(homologacion_basica)
    future_2 = executor.submit(homologacion_basica2)
    # future_3 = executor.submit(homologacion_basica3)
    # future_4 = executor.submit(homologacion_basica4)
    # future_5 = executor.submit(homologacion_basica5)
    # future_6 = executor.submit(homologacion_basica6)
    # future_7 = executor.submit(homologacion_basica7)
    # future_8 = executor.submit(homologacion_basica8)