#!/usr/bin/env python
# -*- coding: utf-8 -*-
import io
import os
import sys
import xlsxwriter
import xlwt
import openpyxl
import xlsxwriter
from xlwt import *

# SITE_ROOT = os.path.dirname(os.path.realpath(__file__))
YOUR_PATH = os.path.dirname(os.path.realpath(__file__))
# print(f"YOUR_PATH: {YOUR_PATH}")
SITE_ROOT = os.path.dirname(os.path.dirname(YOUR_PATH))
SITE_ROOT = os.path.join(SITE_ROOT, '')
# print(f"SITE_ROOT: {SITE_ROOT}")
your_djangoproject_home = os.path.split(SITE_ROOT)[0]
# print(f"your_djangoproject_home: {your_djangoproject_home}")
sys.path.append(your_djangoproject_home)

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
application = get_wsgi_application()
import xlrd
from django.db import transaction
from time import sleep
from med.funciones import actioncalculotestpsicologico
from med.models import *
from sga.models import *
from inno.models import *
from sagest.models import *
from Moodle_Funciones import *
from datetime import date, datetime, time
from settings import PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD, NIVEL_MALLA_CERO, NIVEL_MALLA_UNO, MEDIA_URL, DEBUG, \
    ADMINISTRADOR_ID, DIAS_MATRICULA_EXPIRA, CLASES_CONTINUAS_AUTOMATICAS, SITE_STORAGE, BASE_DIR, MEDIA_ROOT
import time
from django.http import HttpResponse
# from decorators import get_client_ip
# from sga.funciones import tituloinstitucion
# from webpush import send_user_notification
# from sga.commonviews import traerNotificaciones
from inno.models import MatriculaSedeExamen, FechaPlanificacionSedeVirtualExamen, TurnoPlanificacionSedeVirtualExamen, \
    AulaPlanificacionSedeVirtualExamen, MateriaAsignadaPlanificacionSedeVirtualExamen
from bd.models import GeolocationUser
from django.db import transaction, connection, connections
from soap.consumer.senescyt import Titulos
from sga.My_Model.SubirMatrizSENESCYT import My_SubirMatrizInscripcion
from sga.celery_task import BackGroundProcessAdmision
from api.helpers.functions_helper import generate_qr_examen_final
from sga.funciones import log


# from wpush.models import SubscriptionInfomation
# from webpush.utils import _send_notification
# from runback.crons.ejecutar_general_periodo import actualizar_nivel_matricula, actualizar_estado_matricula


def fechatope(fecha):
    contador = 0
    nuevafecha = fecha
    while contador < DIAS_MATRICULA_EXPIRA:
        nuevafecha = nuevafecha + timedelta(1)
        if nuevafecha.weekday() != 5 and nuevafecha.weekday() != 6:
            contador += 1
    return nuevafecha


def crear_tarjeta_academica(periodo, demo=False):
    """CREACION / ACTUALIZACION DE PROMOCION EN ISNCRIPCION"""
    # periodo = Periodo.objects.get(pk=periodo.id)
    # matriculas_all_by_periodo_113 = Matricula.objects.filter(nivel__periodo_id=113, status=True, inscripcion_id__in=[104493, 57712, 74876])
    matriculas = Matricula.objects.filter(nivel__periodo=periodo, status=True)
    if demo:
        matriculas = matriculas.filter(inscripcion_id=104493)
    for matricula in matriculas:
        inscripcion = matricula.inscripcion
        print("********************************************************************")
        print("********************************************************************")
        print("%s" % inscripcion.persona)
        inscripcion.actualizar_tarjeta_academico(periodo)
        print("Actualizo tarjeta academica")
        inscripcion.actualizar_promedio_beca()
        print("promedio: %s" % inscripcion.promedio)


def dictfetchall(cursor):
    "Return all rows from a cursor as a dict"
    columns = [col[0] for col in cursor.description]
    return [
        dict(zip(columns, row))
        for row in cursor.fetchall()
    ]


def pruebas_demos_becas():
    periodo = Periodo.objects.get(pk=113)
    malla_ids = Matricula.objects.filter(nivel__periodo_id=113, status=True).values_list(
        'inscripcion__inscripcionmalla__malla_id', flat=True).distinct()
    # print(malla_ids.count())
    mallas = Malla.objects.filter(pk__in=malla_ids)
    promedios_inscripciones = []
    mallas_promedios_inscripciones = []
    for malla in mallas:
        ARR_mallas_promedios_inscripciones = []
        with connection.cursor() as cursor:
            sql = """
                SELECT
                    DISTINCT
                    lista.inscripcion_id,
                    lista.promedio
                FROM
                    listado_inscripcion_promedio AS lista
                    INNER JOIN "public".sga_matricula AS matricula ON lista.inscripcion_id = matricula.inscripcion_id
                    AND matricula."id" IN (SELECT DISTINCT
                            mateasi.matricula_id
                        FROM
                            "public".sga_materiaasignada AS mateasi
                        INNER JOIN "public".sga_materia AS ma ON ma."id" = mateasi.materia_id
                        INNER JOIN "public".sga_nivel AS ni ON ni."id" = ma.nivel_id
                        INNER JOIN "public".sga_asignaturamalla AS asima ON asima."id" = ma.asignaturamalla_id
                        WHERE
                            ni.periodo_id = 113
                        AND asima.malla_id NOT IN (353, 22)
                        )
                WHERE
                    lista.periodo_id = %s
                AND lista.nivelmalla_id > 1
                AND matricula.tipomatricula_id = 1
                AND malla_id = %s
                ORDER BY
                    lista.promedio DESC
                LIMIT 10"""
            cursor.execute(sql % (periodo.id, malla.id))
            rows = dictfetchall(cursor)
            for row in rows:
                # print(row['promedio'])
                ARR_mallas_promedios_inscripciones.append(row['inscripcion_id'])
                promedios_inscripciones.append(row['inscripcion_id'])
            mallas_promedios_inscripciones.append(
                {'malla_id': malla.id, 'inscripciones': ARR_mallas_promedios_inscripciones})

    discapacidatos_inscripciones = []
    sql = """
        SELECT
            lista_gse.inscripcion_id
        FROM
            listado_inscripcion_gruposocioeconomico AS lista_gse
        INNER JOIN sga_matriculagruposocioeconomico AS mgse ON mgse.matricula_id = lista_gse.matricula_id
        WHERE
            lista_gse.semestre_id > 1
            AND mgse.tipomatricula = 1
            AND lista_gse.tienediscapacidad = 'SI'
            AND lista_gse.deportista = 'NO'
            AND lista_gse.exterior = 'NO'
            AND lista_gse.migrante = 'NO'
            AND lista_gse.periodo_id = %s
            AND lista_gse.etnia_id NOT IN (1, 2, 5)
            AND lista_gse.inscripcion_id NOT IN (%s)"""
    with connection.cursor() as cursor:
        cursor.execute(sql % (periodo.id, (",".join([str(x) for x in promedios_inscripciones]))))
        rows = dictfetchall(cursor)
        for row in rows:
            # print(row['promedio'])
            discapacidatos_inscripciones.append(row['inscripcion_id'])

    deportsita_inscripciones = []
    sql = """
        SELECT
            lista_gse.inscripcion_id
        FROM
            listado_inscripcion_gruposocioeconomico AS lista_gse
            INNER JOIN sga_matriculagruposocioeconomico AS mgse ON mgse.matricula_id = lista_gse.matricula_id
        WHERE
            lista_gse.semestre_id > 1
            AND mgse.tipomatricula = 1
            AND lista_gse.tienediscapacidad = 'NO'
            AND lista_gse.deportista = 'SI'
            AND lista_gse.exterior = 'NO'
            AND lista_gse.migrante = 'NO'
            AND lista_gse.periodo_id = %s
            AND lista_gse.etnia_id NOT IN (1, 2, 5)
            AND lista_gse.inscripcion_id NOT IN (%s)"""
    with connection.cursor() as cursor:
        cursor.execute(sql % (periodo.id, (",".join([str(x) for x in promedios_inscripciones]))))
        rows = dictfetchall(cursor)
        for row in rows:
            # print(row['promedio'])
            deportsita_inscripciones.append(row['inscripcion_id'])

    migrante_inscripciones = []
    sql = """
        SELECT
            lista_gse.inscripcion_id
        FROM
            listado_inscripcion_gruposocioeconomico AS lista_gse
            INNER JOIN sga_matriculagruposocioeconomico AS mgse ON mgse.matricula_id = lista_gse.matricula_id
        WHERE
            lista_gse.semestre_id > 1
            AND mgse.tipomatricula = 1
            AND lista_gse.tienediscapacidad = 'NO'
            AND lista_gse.deportista = 'NO'
            AND lista_gse.exterior = 'SI'
            AND lista_gse.migrante = 'NO'
            AND lista_gse.periodo_id = %s
            AND lista_gse.etnia_id NOT IN (1, 2, 5)
            AND lista_gse.inscripcion_id NOT IN (%s)"""

    with connection.cursor() as cursor:
        cursor.execute(sql % (periodo.id, (",".join([str(x) for x in promedios_inscripciones]))))
        rows = dictfetchall(cursor)
        for row in rows:
            # print(row['promedio'])
            migrante_inscripciones.append(row['inscripcion_id'])

    exterior_inscripciones = []
    sql = """
        SELECT
           lista_gse.inscripcion_id
        FROM
            listado_inscripcion_gruposocioeconomico AS lista_gse
            INNER JOIN sga_matriculagruposocioeconomico AS mgse ON mgse.matricula_id = lista_gse.matricula_id
        WHERE
            lista_gse.semestre_id > 1
            AND mgse.tipomatricula = 1
            AND lista_gse.tienediscapacidad = 'NO'
            AND lista_gse.deportista = 'NO'
            AND lista_gse.exterior = 'NO'
            AND lista_gse.migrante = 'SI'
            AND lista_gse.periodo_id = %s
            AND lista_gse.etnia_id NOT IN (1, 2, 5)
            AND lista_gse.inscripcion_id NOT IN (%s)"""

    with connection.cursor() as cursor:
        cursor.execute(sql % (periodo.id, (",".join([str(x) for x in promedios_inscripciones]))))
        rows = dictfetchall(cursor)
        for row in rows:
            # print(row['promedio'])
            exterior_inscripciones.append(row['inscripcion_id'])

    sql = """
        SELECT
            round(AVG(lista_gse.promedio), 0) AS promedio
        FROM
            listado_inscripcion_gruposocioeconomico AS lista_gse
            INNER JOIN sga_matriculagruposocioeconomico AS mgse ON mgse.matricula_id = lista_gse.matricula_id
        WHERE
            lista_gse.semestre_id > 1
            AND mgse.tipomatricula = 1
            AND lista_gse.tienediscapacidad = 'NO'
            AND lista_gse.deportista = 'NO'
            AND lista_gse.exterior = 'NO'
            AND lista_gse.migrante = 'NO'
            AND lista_gse.periodo_id = %s
            AND lista_gse.etnia_id IN (1, 2, 5)
            AND lista_gse.inscripcion_id NOT IN (%s)"""
    promedioetnia = 0
    with connection.cursor() as cursor:
        cursor.execute(sql % (periodo.id, (",".join([str(x) for x in promedios_inscripciones]))))
        row = cursor.fetchone()
        promedioetnia = row[0]
    promedioetnia = 85

    etnia_inscripciones = []
    sql = """
        SELECT
            lista_gse.inscripcion_id
        FROM
            listado_inscripcion_gruposocioeconomico AS lista_gse
            INNER JOIN sga_matriculagruposocioeconomico AS mgse ON mgse.matricula_id = lista_gse.matricula_id
        WHERE
            lista_gse.semestre_id > 1
            AND mgse.tipomatricula = 1
            AND lista_gse.promedio >= %s
            AND lista_gse.tienediscapacidad = 'NO'
            AND lista_gse.deportista = 'NO'
            AND lista_gse.exterior = 'NO'
            AND lista_gse.migrante = 'NO'
            AND lista_gse.periodo_id = %s
            AND lista_gse.etnia_id IN (1, 2, 5)
            AND lista_gse.inscripcion_id NOT IN (%s)"""
    etnia = 0
    with connection.cursor() as cursor:
        cursor.execute(sql % (promedioetnia, periodo.id, (",".join([str(x) for x in promedios_inscripciones]))))
        rows = dictfetchall(cursor)
        for row in rows:
            # print(row['promedio'])
            etnia_inscripciones.append(row['inscripcion_id'])

    mallas_grupo_c = []
    sql = """
        SELECT
            lista_gse.malla_id AS malla_id
        FROM
            listado_inscripcion_gruposocioeconomico AS lista_gse
            INNER JOIN sga_matriculagruposocioeconomico AS mgse ON mgse.matricula_id = lista_gse.matricula_id
        WHERE
            lista_gse.semestre_id > 1
            AND mgse.tipomatricula = 1
            AND lista_gse.gse_id = 4
            AND lista_gse.tienediscapacidad = 'NO'
            AND lista_gse.deportista = 'NO'
            AND lista_gse.exterior = 'NO'
            AND lista_gse.migrante = 'NO'
            AND lista_gse.periodo_id = %s
            AND lista_gse.etnia_id NOT IN (1, 2, 5)
            AND lista_gse.inscripcion_id NOT IN (%s)
        GROUP BY
            lista_gse.malla_id"""
    with connection.cursor() as cursor:
        cursor.execute(sql % (periodo.id, (",".join([str(x) for x in promedios_inscripciones]))))
        rows = dictfetchall(cursor)
        for row in rows:
            mallas_grupo_c.append(row['malla_id'])

    mallas_grupo_d = []
    sql = """
        SELECT
            lista_gse.malla_id AS malla_id
        FROM
            listado_inscripcion_gruposocioeconomico AS lista_gse
            INNER JOIN sga_matriculagruposocioeconomico AS mgse ON mgse.matricula_id = lista_gse.matricula_id
        WHERE
            lista_gse.semestre_id > 1
            AND mgse.tipomatricula = 1
            AND lista_gse.gse_id = 5
            AND lista_gse.tienediscapacidad = 'NO'
            AND lista_gse.deportista = 'NO'
            AND lista_gse.exterior = 'NO'
            AND lista_gse.migrante = 'NO'
            AND lista_gse.periodo_id = %s
            AND lista_gse.etnia_id NOT IN (1, 2, 5)
            AND lista_gse.inscripcion_id NOT IN (%s)
        GROUP BY
            lista_gse.malla_id"""
    with connection.cursor() as cursor:
        cursor.execute(sql % (periodo.id, (",".join([str(x) for x in promedios_inscripciones]))))
        rows = dictfetchall(cursor)
        for row in rows:
            mallas_grupo_d.append(row['malla_id'])

    # output = io.BytesIO()
    with xlsxwriter.Workbook(f'D:/UNEMI/svn/academico/media/documentos/becas_pronosticos_mejores.xlsx') as workbook:

        wk_mejores_promedios = workbook.add_worksheet("promedios")

        columns = [
            (u"Alumnos", 100),
            (u"Carrera", 100),
            (u"Promedio", 20),
        ]

        row_num = 1
        for col_num in range(len(columns)):
            wk_mejores_promedios.write(row_num, col_num, columns[col_num][0])
            wk_mejores_promedios.set_column(col_num, col_num, columns[col_num][1])

        row_num = 2
        for insc in promedios_inscripciones:
            inscripcion = Inscripcion.objects.get(pk=insc)
            wk_mejores_promedios.write(row_num, 0, inscripcion.persona.__str__())
            wk_mejores_promedios.write(row_num, 1, inscripcion.carrera.__str__())
            wk_mejores_promedios.write(row_num, 2, inscripcion.promedio)
            row_num += 1

        wk_discapacidad = workbook.add_worksheet("discapacidad")

        columns = [
            (u"Alumnos", 100),
            (u"Carrera", 100),
            (u"Promedio", 20),
        ]

        row_num = 1
        for col_num in range(len(columns)):
            wk_discapacidad.write(row_num, col_num, columns[col_num][0])
            wk_discapacidad.set_column(col_num, col_num, columns[col_num][1])

        row_num = 2
        for insc in discapacidatos_inscripciones:
            inscripcion = Inscripcion.objects.get(pk=insc)
            wk_discapacidad.write(row_num, 0, inscripcion.persona.__str__())
            wk_discapacidad.write(row_num, 1, inscripcion.carrera.__str__())
            wk_discapacidad.write(row_num, 2, inscripcion.promedio)
            row_num += 1

        wk_deport = workbook.add_worksheet("deportista")

        columns = [
            (u"Alumnos", 100),
            (u"Carrera", 100),
            (u"Promedio", 20),
        ]

        row_num = 1
        for col_num in range(len(columns)):
            wk_deport.write(row_num, col_num, columns[col_num][0])
            wk_deport.set_column(col_num, col_num, columns[col_num][1])

        row_num = 2
        for insc in deportsita_inscripciones:
            inscripcion = Inscripcion.objects.get(pk=insc)
            wk_deport.write(row_num, 0, inscripcion.persona.__str__())
            wk_deport.write(row_num, 1, inscripcion.carrera.__str__())
            wk_deport.write(row_num, 2, inscripcion.promedio)
            row_num += 1

        wk_migrante = workbook.add_worksheet("migrante")

        columns = [
            (u"Alumnos", 100),
            (u"Carrera", 100),
            (u"Promedio", 20),
        ]

        row_num = 1
        for col_num in range(len(columns)):
            wk_migrante.write(row_num, col_num, columns[col_num][0])
            wk_migrante.set_column(col_num, col_num, columns[col_num][1])

        row_num = 2
        for insc in migrante_inscripciones:
            inscripcion = Inscripcion.objects.get(pk=insc)
            wk_migrante.write(row_num, 0, inscripcion.persona.__str__())
            wk_migrante.write(row_num, 1, inscripcion.carrera.__str__())
            wk_migrante.write(row_num, 2, inscripcion.promedio)
            row_num += 1

        wk_exterior = workbook.add_worksheet("exterior")

        columns = [
            (u"Alumnos", 100),
            (u"Carrera", 100),
            (u"Promedio", 20),
        ]

        row_num = 1
        for col_num in range(len(columns)):
            wk_exterior.write(row_num, col_num, columns[col_num][0])
            wk_exterior.set_column(col_num, col_num, columns[col_num][1])

        row_num = 2
        for insc in exterior_inscripciones:
            inscripcion = Inscripcion.objects.get(pk=insc)
            wk_exterior.write(row_num, 0, inscripcion.persona.__str__())
            wk_exterior.write(row_num, 1, inscripcion.carrera.__str__())
            wk_exterior.write(row_num, 2, inscripcion.promedio)
            row_num += 1

        wk_etnia = workbook.add_worksheet("etnia")

        columns = [
            (u"Alumnos", 100),
            (u"Carrera", 100),
            (u"Promedio", 20),
        ]

        row_num = 1
        for col_num in range(len(columns)):
            wk_etnia.write(row_num, col_num, columns[col_num][0])
            wk_etnia.set_column(col_num, col_num, columns[col_num][1])

        row_num = 2
        for insc in etnia_inscripciones:
            inscripcion = Inscripcion.objects.get(pk=insc)
            wk_etnia.write(row_num, 0, inscripcion.persona.__str__())
            wk_etnia.write(row_num, 1, inscripcion.carrera.__str__())
            wk_etnia.write(row_num, 2, inscripcion.promedio)
            row_num += 1

        wk_c = workbook.add_worksheet("grupo_c")

        columns = [
            (u"Alumnos", 100),
            (u"Carrera", 100),
            (u"Promedio", 20),
        ]

        row_num = 1
        for col_num in range(len(columns)):
            wk_c.write(row_num, col_num, columns[col_num][0])
            wk_c.set_column(col_num, col_num, columns[col_num][1])

        row_num = 2
        print(mallas_grupo_c)
        for malla_c in mallas_grupo_c:
            inscripcion = Inscripcion.objects.get(pk=insc)
            sql = """
                SELECT
                    lista_gse.inscripcion_id
                FROM
                    listado_inscripcion_gruposocioeconomico AS lista_gse
                    INNER JOIN sga_matriculagruposocioeconomico AS mgse ON mgse.matricula_id = lista_gse.matricula_id
                WHERE
                    lista_gse.semestre_id > 1
                    AND mgse.tipomatricula = 1
                    AND lista_gse.gse_id = 4
                    AND lista_gse.tienediscapacidad = 'NO'
                    AND lista_gse.deportista = 'NO'
                    AND lista_gse.exterior = 'NO'
                    AND lista_gse.migrante = 'NO'
                    AND lista_gse.periodo_id = %s
                    AND lista_gse.etnia_id NOT IN (1, 2, 5)
                    AND lista_gse.malla_id = %s
                    AND lista_gse.inscripcion_id NOT IN (%s)
                ORDER BY
                    lista_gse.promedio DESC
                LIMIT 20"""
            with connection.cursor() as cursor:
                cursor.execute(sql % (periodo.id, malla_c, (",".join([str(x) for x in promedios_inscripciones]))))
                rows = dictfetchall(cursor)
                for row in rows:
                    inscripcion = Inscripcion.objects.get(pk=row['inscripcion_id'])
                    wk_c.write(row_num, 0, inscripcion.persona.__str__())
                    wk_c.write(row_num, 1, inscripcion.carrera.__str__())
                    wk_c.write(row_num, 2, inscripcion.promedio)
                    row_num += 1

        wk_d = workbook.add_worksheet("grupo_d")

        columns = [
            (u"Alumnos", 100),
            (u"Carrera", 100),
            (u"Promedio", 20),
        ]

        row_num = 1
        for col_num in range(len(columns)):
            wk_d.write(row_num, col_num, columns[col_num][0])
            wk_d.set_column(col_num, col_num, columns[col_num][1])

        row_num = 2
        for malla_d in mallas_grupo_d:
            inscripcion = Inscripcion.objects.get(pk=insc)
            sql = """
                    SELECT
                        lista_gse.inscripcion_id
                    FROM
                        listado_inscripcion_gruposocioeconomico AS lista_gse
                        INNER JOIN sga_matriculagruposocioeconomico AS mgse ON mgse.matricula_id = lista_gse.matricula_id
                    WHERE
                        lista_gse.semestre_id > 1
                        AND mgse.tipomatricula = 1
                        AND lista_gse.gse_id = 5
                        AND lista_gse.tienediscapacidad = 'NO'
                        AND lista_gse.deportista = 'NO'
                        AND lista_gse.exterior = 'NO'
                        AND lista_gse.migrante = 'NO'
                        AND lista_gse.periodo_id = %s
                        AND lista_gse.etnia_id NOT IN (1, 2, 5)
                        AND lista_gse.malla_id = %s
                        AND lista_gse.inscripcion_id NOT IN (%s)
                    ORDER BY
                        lista_gse.promedio DESC
                    LIMIT 20"""
            with connection.cursor() as cursor:
                cursor.execute(sql % (periodo.id, malla_d, (",".join([str(x) for x in promedios_inscripciones]))))
                rows = dictfetchall(cursor)
                for row in rows:
                    inscripcion = Inscripcion.objects.get(pk=row['inscripcion_id'])
                    wk_d.write(row_num, 0, inscripcion.persona.__str__())
                    wk_d.write(row_num, 1, inscripcion.carrera.__str__())
                    wk_d.write(row_num, 2, inscripcion.promedio)
                    row_num += 1


def eliminar_solicitudes_becas(periodo, inscripcion_id=None):
    print(your_djangoproject_home)
    print("Proceso iniciado...")
    solicitudes = BecaSolicitud.objects.filter(periodo=periodo, status=True).order_by('-id')
    if inscripcion_id:
        solicitudes = solicitudes.filter(inscripcion_id=inscripcion_id)
    if solicitudes.exists():
        solicitudes.delete()
    print("Proceso terminado...")


def enviar_mensaje_becas(title, template, data={}, list_email=[]):
    if DEBUG:
        list_email = ['crodriguezn@unemi.edu.ec']
    send_html_mail(title,
                   template,
                   data,
                   list_email,
                   [],
                   cuenta=variable_valor('CUENTAS_CORREOS')[0]
                   )


def crear_solicitudes_becas(periodo, periodovalida, enviarcorreo=False, inscripcion_id=None):
    try:
        print(your_djangoproject_home)
        print("Proceso iniciado...")
        excludes = BecaSolicitud.objects.filter(periodo=periodo).values_list('inscripcion_id', flat=True)
        becatipos = BecaTipo.objects.filter(
            pk__in=PreInscripcionBeca.objects.values_list('becatipo_id', flat=True).filter(status=True,
                                                                                           periodo=periodo).distinct())
        for becatipo in becatipos:
            print("--- Beca tipo: %s" % becatipo.__str__())
            preinscripciones = PreInscripcionBeca.objects.filter(status=True, periodo=periodo,
                                                                 becatipo=becatipo).exclude(inscripcion_id__in=excludes)
            if inscripcion_id:
                preinscripciones = preinscripciones.filter(inscripcion_id=inscripcion_id)
            for preinscripcion in preinscripciones:
                persona = preinscripcion.inscripcion.persona
                if not BecaSolicitud.objects.filter(inscripcion=preinscripcion.inscripcion, periodo=periodo).exists():
                    becado = BecaSolicitud(inscripcion=preinscripcion.inscripcion,
                                           becatipo=becatipo,
                                           periodo=periodo,
                                           periodocalifica=periodovalida,
                                           estado=1,
                                           tiposolicitud=1,
                                           observacion='SEMESTRE REGULAR NOVIEMBRE 2021 A MARZO 2022 - MODALIDAD VIRTUAL')
                    becado.save()
                else:
                    becado = BecaSolicitud.objects.filter(inscripcion=preinscripcion.inscripcion,
                                                          periodo=periodo).first()
                requisitos = BecaRequisitos.objects.filter(Q(becatipo__isnull=True), becatipo=becatipo, periodo=periodo,
                                                           status=True, vigente=True).exclude(numero=7).order_by(
                    'numero')
                # print(requisitos)
                for requisito in requisitos:
                    if requisito.numero == 1 or requisito.numero == 2:
                        if requisito.numero == 1:
                            if persona.paisnacimiento_id == 1:
                                if not BecaDetalleSolicitud.objects.filter(status=True, solicitud=becado,
                                                                           requisito=requisito, cumple=True,
                                                                           estado=2).exists():
                                    detalle = BecaDetalleSolicitud(solicitud=becado,
                                                                   requisito=requisito,
                                                                   cumple=True,
                                                                   archivo=None,
                                                                   estado=2,
                                                                   observacion='APROBACIÓN AUTOMÁTICA',
                                                                   personaaprueba=None,
                                                                   fechaaprueba=None)
                                    detalle.save()
                        else:
                            if persona.paisnacimiento_id != 1:
                                if not BecaDetalleSolicitud.objects.filter(status=True, solicitud=becado,
                                                                           requisito=requisito, cumple=True,
                                                                           estado=2).exists():
                                    detalle = BecaDetalleSolicitud(solicitud=becado,
                                                                   requisito=requisito,
                                                                   cumple=True,
                                                                   archivo=None,
                                                                   estado=2,
                                                                   observacion='APROBACIÓN AUTOMÁTICA',
                                                                   personaaprueba=None,
                                                                   fechaaprueba=None)
                                    detalle.save()
                    else:
                        if not BecaDetalleSolicitud.objects.filter(status=True, solicitud=becado, requisito=requisito,
                                                                   cumple=True, estado=1 if requisito.id in [15,
                                                                                                             16] else 2).exists():
                            detalle = BecaDetalleSolicitud(solicitud=becado,
                                                           requisito=requisito,
                                                           cumple=True,
                                                           archivo=None,
                                                           estado=1 if requisito.id in [15, 16] else 2,
                                                           observacion='' if requisito.id in [15,
                                                                                              16] else 'APROBACIÓN AUTOMÁTICA',
                                                           personaaprueba=None,
                                                           fechaaprueba=None)
                            detalle.save()

                # necesidadsolicitud = BecaSolicitudNecesidad(solicitud=beca, necesidad=necesidad)
                # necesidadsolicitud.save()
                if not BecaSolicitudRecorrido.objects.filter(solicitud=becado, estado=1).exists():
                    recorrido = BecaSolicitudRecorrido(solicitud=becado,
                                                       observacion="SOLICITUD AUTOMÁTICA",
                                                       estado=1)
                    recorrido.save()

                    if enviarcorreo:
                        tituloemail = "Registro de Solicitud de Beca - Semestre MAYO A SEPTIEMBRE 2021"
                        data = {'sistema': u'SGA - UNEMI',
                                'tipo': 'SOL',
                                'tipobeca': becado.becatipo.nombre.upper(),
                                'fecha': datetime.now().date(),
                                'hora': datetime.now().time(),
                                'periodo': periodo.nombre,
                                'estudiante': persona,
                                'autoridad2': '',
                                't': miinstitucion()
                                }
                        enviar_mensaje_becas(title=tituloemail, template="emails/solicitudbecaestudiante.html",
                                             data=data, list_email=persona.lista_emails_envio())
                        # time.sleep(5)
                # REGISTRO EN ESTADO DE REVISION
                if not BecaSolicitudRecorrido.objects.filter(solicitud=becado, estado=4).exists():
                    becado.estado = 4
                    becado.save()
                    recorrido = BecaSolicitudRecorrido(solicitud=becado,
                                                       observacion="EN REVISION",
                                                       estado=4)
                    recorrido.save()

                if not BecaSolicitudRecorrido.objects.filter(solicitud=becado, estado=2).exists():
                    becado.estado = 2
                    becado.becaaceptada = 1
                    becado.save()
                    recorrido = BecaSolicitudRecorrido(solicitud=becado,
                                                       observacion="PENDIENTE DE ACEPTACIÓN O RECHAZO",
                                                       estado=2)
                    recorrido.save()
                    # Envio de e-mail de notificación al solicitante
                    if enviarcorreo:
                        tituloemail = "Solicitud de Beca en Revisión"
                        data = {'sistema': u'SGA - UNEMI',
                                'fase': 'AR',
                                'tipobeca': becado.becatipo.nombre.upper(),
                                'fecha': datetime.now().date(),
                                'hora': datetime.now().time(),
                                'saludo': 'Estimada' if becado.inscripcion.persona.sexo_id == 1 else 'Estimado',
                                'estado': 'APROBADA' if becado.estado == 2 else "RECHAZADA",
                                'estudiante': becado.inscripcion.persona.nombre_completo_inverso(),
                                'autoridad2': '',
                                'observaciones': '',
                                't': miinstitucion()
                                }
                        enviar_mensaje_becas(title=tituloemail, template="emails/notificarestadosolicitudbeca.html",
                                             data=data, list_email=persona.lista_emails_envio())
                        # time.sleep(5)
                print("------ Solicitud creadas/aprobadas: ", persona)
        print("Proceso terminado...")
    except Exception as ex:
        print('error: %s' % ex)


def generar_presolicitudes_becas(periodo, anterior):
    from sga.funciones import lista_discapacitado_beca, lista_mejores_promedio_beca, lista_deportista_beca, \
        lista_etnia_beca, lista_gruposocioeconomico_beca, lista_migrante_exterior_beca
    becatipos = BecaTipo.objects.filter(status=True, vigente=True)
    ID_MEJOR_PROMEDIO = 17
    ID_DISCAPACIDAD = 19
    ID_DEPORTISTA = 20
    ID_EXTERIOR_MIGRANTE = 22
    ID_ETNIA = 21
    ID_GRUPO_VULNERABLE = 18
    EXCLUDES = []
    """LISTADO DE LOS MEJORES PROMEDIOS POR MALLA"""
    mejores = lista_mejores_promedio_beca(periodoactual=periodo, periodoanterior=None)["lista"]
    inscripciones_mejores = Inscripcion.objects.filter(pk__in=mejores)
    actualizar_mejores = PreInscripcionBeca.objects.filter(becatipo=becatipos.filter(pk=ID_MEJOR_PROMEDIO).first(),
                                                           periodo=periodo).exclude(
        inscripcion__in=inscripciones_mejores)
    if DEBUG:
        actualizar_mejores.delete()
    for inscripcion in inscripciones_mejores:
        if not PreInscripcionBeca.objects.filter(inscripcion=inscripcion, periodo=periodo).exists():
            preinscripcion = PreInscripcionBeca(inscripcion=inscripcion,
                                                promedio=inscripcion.promedio,
                                                becatipo=becatipos.filter(pk=ID_MEJOR_PROMEDIO).first(),
                                                periodo=periodo,
                                                fecha=datetime.now().date())
            preinscripcion.save()
    EXCLUDES.extend(mejores)
    """LISTADO DE DISCAPACITADOS EXCLUYENDO A LOS DE MEJORES PROMEDIOS"""
    discapacitados = lista_discapacitado_beca(periodoactual=periodo, periodoanterior=anterior, excludes=EXCLUDES)
    inscripciones_discapacitados = Inscripcion.objects.filter(pk__in=discapacitados)
    actualizar_discapacitados = PreInscripcionBeca.objects.filter(becatipo=becatipos.filter(pk=ID_DISCAPACIDAD).first(),
                                                                  periodo=periodo).exclude(
        inscripcion__in=inscripciones_discapacitados)
    if DEBUG:
        actualizar_discapacitados.delete()
    for inscripcion in inscripciones_discapacitados:
        if not PreInscripcionBeca.objects.filter(inscripcion=inscripcion, periodo=periodo).exists():
            preinscripcion = PreInscripcionBeca(inscripcion=inscripcion,
                                                promedio=inscripcion.promedio,
                                                becatipo=becatipos.filter(pk=ID_DISCAPACIDAD).first(),
                                                periodo=periodo,
                                                fecha=datetime.now().date())
            preinscripcion.save()
    EXCLUDES.extend(discapacitados)
    """LISTADO DE DEPORTISTAS EXCLUYENDO A DISCAPACITADOS Y LOS DE MEJORES PROMEDIOS"""
    deportistas = lista_deportista_beca(periodoactual=periodo, periodoanterior=anterior, excludes=EXCLUDES)
    inscripciones_deportistas = Inscripcion.objects.filter(pk__in=deportistas)
    actualizar_deportistas = PreInscripcionBeca.objects.filter(becatipo=becatipos.filter(pk=ID_DEPORTISTA).first(),
                                                               periodo=periodo).exclude(
        inscripcion__in=inscripciones_deportistas)
    if DEBUG:
        actualizar_deportistas.delete()
    for inscripcion in inscripciones_deportistas:
        if not PreInscripcionBeca.objects.filter(inscripcion=inscripcion, periodo=periodo).exists():
            preinscripcion = PreInscripcionBeca(inscripcion=inscripcion,
                                                promedio=inscripcion.promedio,
                                                becatipo=becatipos.filter(pk=ID_DEPORTISTA).first(),
                                                periodo=periodo,
                                                fecha=datetime.now().date())
            preinscripcion.save()
    EXCLUDES.extend(deportistas)
    """LISTADO DE PERSONAS EN EL EXTRANJERO EXCLUYENDO A DISCAPACITADOS, DEPORTISTAS Y LOS DE MEJORES PROMEDIOS"""
    migrantes = lista_migrante_exterior_beca(periodoactual=periodo, periodoanterior=anterior, excludes=EXCLUDES)
    inscripciones_migrantes = Inscripcion.objects.filter(pk__in=migrantes)
    actualizar_migrantes = PreInscripcionBeca.objects.filter(becatipo=becatipos.filter(pk=ID_EXTERIOR_MIGRANTE).first(),
                                                             periodo=periodo).exclude(
        inscripcion__in=inscripciones_migrantes)
    if DEBUG:
        actualizar_migrantes.delete()
    for inscripcion in inscripciones_migrantes:
        if not PreInscripcionBeca.objects.filter(inscripcion=inscripcion, periodo=periodo).exists():
            preinscripcion = PreInscripcionBeca(inscripcion=inscripcion,
                                                promedio=inscripcion.promedio,
                                                becatipo=becatipos.filter(pk=ID_EXTERIOR_MIGRANTE).first(),
                                                periodo=periodo,
                                                fecha=datetime.now().date())
            preinscripcion.save()
    EXCLUDES.extend(migrantes)
    """LISTADO DE PERSONAS ETNIA EXCLUYENDO EXTRANJERO, MIGRANTES, DISCAPACITADOS, DEPORTISTAS Y LOS DE MEJORES PROMEDIOS"""
    etnias = lista_etnia_beca(periodoactual=periodo, periodoanterior=anterior, excludes=EXCLUDES)
    inscripciones_etnias = Inscripcion.objects.filter(pk__in=etnias)
    actualizar_etnias = PreInscripcionBeca.objects.filter(becatipo=becatipos.filter(pk=ID_ETNIA).first(),
                                                          periodo=periodo).exclude(inscripcion__in=inscripciones_etnias)
    if DEBUG:
        actualizar_etnias.delete()
    for inscripcion in inscripciones_etnias:
        if not PreInscripcionBeca.objects.filter(inscripcion=inscripcion, periodo=periodo).exists():
            preinscripcion = PreInscripcionBeca(inscripcion=inscripcion,
                                                promedio=inscripcion.promedio,
                                                becatipo=becatipos.filter(pk=ID_ETNIA).first(),
                                                periodo=periodo,
                                                fecha=datetime.now().date())
            preinscripcion.save()
    EXCLUDES.extend(etnias)
    """LISTADO DE PERSONAS DE GRUPO VULNERABLE EXCLUYENDO ETNIA, EXTRANJERO, MIGRANTES, DISCAPACITADOS, DEPORTISTAS Y LOS DE MEJORES PROMEDIOS"""
    grupo = []
    for grupo_id in [4, 5]:
        grupo.extend(
            lista_gruposocioeconomico_beca(periodoactual=periodo, periodoanterior=anterior, tipogrupo_id=grupo_id,
                                           excludes=EXCLUDES, limit=20))
    inscripciones_grupo = grupo  # Inscripcion.objects.filter(pk__in=[inscripcion.pk  for inscripcion in grupo])
    actualizar_grupo = PreInscripcionBeca.objects.filter(becatipo=becatipos.filter(pk=ID_GRUPO_VULNERABLE).first(),
                                                         periodo=periodo).exclude(inscripcion__in=inscripciones_grupo)
    if DEBUG:
        actualizar_grupo.delete()
    for inscripcion in inscripciones_grupo:
        if not PreInscripcionBeca.objects.filter(inscripcion=inscripcion, periodo=periodo).exists():
            preinscripcion = PreInscripcionBeca(inscripcion=inscripcion,
                                                promedio=inscripcion.promedio,
                                                becatipo=becatipos.filter(pk=ID_GRUPO_VULNERABLE).first(),
                                                periodo=periodo,
                                                fecha=datetime.now().date())
            preinscripcion.save()


def generar_excel_admision_cursos(periodo):
    print(SITE_STORAGE)
    with xlsxwriter.Workbook(
            f'{SITE_STORAGE}/media/documentos/admision_cursos_{periodo.id}_{random.randrange(1, 100)}.xlsx') as workbook:

        asignaturas = Asignatura.objects.filter(pk__in=Materia.objects.filter(nivel__periodo=periodo, status=True,
                                                                              materiaasignada__status=True).values_list(
            'asignatura_id', flat=True).distinct())
        for asignatura in asignaturas:
            wk = workbook.add_worksheet(f"{asignatura.id}")
            columns = [
                (u"ID", 10),
                (u"ASIGNATURA", 80),
                (u"CARRERA", 100),
                (u"PARALELO", 20),
                (u"MODALIDAD", 15),
                (u"ID", 10),
                (u"URL", 80),
                (u"FACULTAD", 50),
                (u"MODELOEVAL", 20),
            ]

            row_num = 1
            for col_num in range(len(columns)):
                wk.write(row_num, col_num, columns[col_num][0])
                wk.set_column(col_num, col_num, columns[col_num][1])
            row_num = 2
            materias = Materia.objects.filter(nivel__periodo=periodo, status=True, asignatura=asignatura)
            for materia in materias:
                wk.write(row_num, 0, materia.id)
                wk.write(row_num, 1, materia.asignatura.nombre)
                wk.write(row_num, 2, materia.asignaturamalla.malla.carrera.nombre)
                wk.write(row_num, 3, materia.paralelomateria.nombre)
                wk.write(row_num, 4, materia.asignaturamalla.malla.carrera.modalidad)
                wk.write(row_num, 5, materia.idcursomoodle)
                wk.write(row_num, 6, f"https://aulanivelacion.unemi.edu.ec/course/view.php?id={materia.idcursomoodle}")
                if not materia.asignaturamalla.malla.carrera.coordinacionvalida:
                    print(materia.asignaturamalla.malla.carrera)
                wk.write(row_num, 7, materia.asignaturamalla.malla.carrera.coordinacionvalida.alias)
                wk.write(row_num, 8, 'SI' if materia.modeloevaluativo else 'NO')
                row_num += 1


def estado_representante_solidario(periodo):
    becaperiodo = BecaPeriodo.objects.get(periodo=periodo)
    becasolicitudes = BecaSolicitud.objects.filter(periodo=periodo)
    print(f"Inicia proceso con un total de {becasolicitudes.count()}")
    c = 0
    for solicitud in becasolicitudes:
        c += 1
        for documento in solicitud.inscripcion.persona.personadocumentopersonal_set.all():
            documento.estadocedularepresentantesol = 1
            documento.estadopapeletarepresentantesol = 1
            documento.save()
        if BecaAsignacion.objects.filter(solicitud=solicitud, numerocontrato__isnull=False).exists():
            asignada = BecaAsignacion.objects.filter(solicitud=solicitud, numerocontrato__isnull=False).first()
            asignada.numerocontrato = None
            asignada.archivocontrato = None
            asignada.fechacontrato = None
            asignada.estadorevisioncontrato = None
            asignada.save()
            becarecorrido = BecaSolicitudRecorrido(solicitud=solicitud,
                                                   fecha=datetime.now().date(),
                                                   observacion=f"SE REAJUSTO CONTRATO, POR MOTIVO DE FECHAS.",
                                                   estado=9)
            becarecorrido.save()
            notificacion = Notificacion(titulo="Notificación de reajuste en solicitud de beca",
                                        cuerpo="Se procedio a reajustar contrato, por motivo de fechas. La carga del contrato con anteriorida queda insubsistente.",
                                        destinatario=solicitud.inscripcion.persona,
                                        url="/alu_becas",
                                        fecha_hora_visible=datetime.now() + timedelta(days=6),
                                        content_type=ContentType.objects.get_for_model(solicitud),
                                        object_id=solicitud.id,
                                        prioridad=1,
                                        app_label='sga')
            notificacion.save()
        print(f"Termino solicitud {c}/{becasolicitudes.count()}")


def cge_auditoria_admision_data_matriz():
    workbook = xlrd.open_workbook(f'{SITE_STORAGE}/media/0013-0002-DNA2-SENESCYT-AI-IES-2021_data.xlsx')
    data_matriz = {}
    data_cge = []
    hc_01 = workbook.sheet_by_index(0)
    hc_02 = workbook.sheet_by_index(1)
    linea = 1
    for rowx in range(hc_02.nrows):
        if linea > 1:
            cols = hc_02.row_values(rowx)
            anio = int(cols[0])
            carrera_admision_cge = str(cols[1].strip().upper())
            carrera_cge = str(cols[2].strip().upper())
            cedula = str(cols[3].strip().upper())
            aspirante_cge = str(cols[4].strip().upper())
            puntaje = 0
            matriz_proceso = ""
            matriz_carrera = ""
            matriz_modalidad = ""
            matriz_aspirante = ""
            lineax = 1
            for rx in range(hc_01.nrows):
                if lineax > 1:
                    csx = hc_01.row_values(rx)
                    if cedula == csx[1].strip().upper():
                        puntaje = int(csx[4])
                        matriz_proceso = csx[0].strip().upper()
                        matriz_carrera = csx[5].strip().upper()
                        matriz_modalidad = csx[6].strip().upper()
                        matriz_aspirante = csx[2].strip().upper() + " " + csx[3].strip().upper()
                        break
                lineax += 1

            data_cge.append({"proceso_cge": anio,
                             "proceso_eaes": matriz_proceso,
                             "cedula": cedula,
                             "aspirante_cge": aspirante_cge,
                             "aspirante_eaes": matriz_aspirante,
                             "carrera_admision_cge": carrera_admision_cge,
                             "carrera_cge": carrera_cge,
                             "carrera_eaes": matriz_carrera,
                             "modalidad_eaes": matriz_modalidad,
                             "puntaje_eaes": puntaje,
                             })
        linea += 1
    return data_cge


def generar_excel_cge_admision_data(data):
    print(SITE_STORAGE)
    with xlsxwriter.Workbook(
            f'{SITE_STORAGE}/media/0013-0002-DNA2-SENESCYT-AI-IES-2021_{random.randrange(1, 100)}.xlsx') as workbook:
        wk = workbook.add_worksheet(f"Hoja1")
        columns = [
            (u"#", 10),
            (u"VERIFICAR", 10),
            (u"ID_INSCRIPCIÓN", 10),
            (u"NOMBRES Y APELLIDOS", 100),
            (u"CEDULA", 80),
            (u"FECHA DE ACEPTACIÓN DE CUPO", 80),
            (u"PUNTAJE DE ACEPTACIÓN DE CUPO", 30),
            (u"NOMBRE DE LA CARRERA", 100),
            (u"APROBADO/REPROBADO", 30),
            (u"FECHA DE APROBACIÓN / REPROBACIÓN DE CURSO DE NIVELACIÓN DE CARRERA", 30),
            (u"DETALLE DE PRIMERA Y/O SEGUNDA MATRÍCULA, O SI RETIRÓ DE LA MISMA", 80),
            (u"FECHA DE MATRICULACIÓN EN PRIMER NIVEL DE CARRERA", 50),
            (u"OBSERVACIÓN", 200),
        ]

        row_num = 1
        for col_num in range(len(columns)):
            wk.write(row_num, col_num, columns[col_num][0])
            wk.set_column(col_num, col_num, columns[col_num][1])
        row_num = 2
        wrap_format = workbook.add_format({'text_wrap': True})
        c = 0
        for d in data:
            c += 1
            verificar = False
            inscripcion = None
            observaciones = ""
            fecha_matricula_admision = ""
            fecha_matricula_pregrado = ""
            detalle_matricula = ""
            if not Inscripcion.objects.filter(Q(persona__cedula=d['cedula']) | Q(persona__pasaporte=d['cedula']),
                                              coordinacion_id=9,
                                              carrera__nombre__contains=d['carrera_admision_cge']).exists():
                verificar = True
                observaciones += f"No registra una inscripción \n"
                if Inscripcion.objects.filter(Q(persona__cedula=d['cedula']) | Q(persona__pasaporte=d['cedula']),
                                              coordinacion_id=9).exists():
                    ins = Inscripcion.objects.filter(persona__cedula=d['cedula'], coordinacion_id=9).first()
                    observaciones += f"Registra una inscripción en la carrera {ins.carrera.__str__()}\n"
                elif Inscripcion.objects.filter(
                        Q(persona__cedula=d['cedula']) | Q(persona__pasaporte=d['cedula'])).exists():
                    ins = Inscripcion.objects.filter(
                        Q(persona__cedula=d['cedula']) | Q(persona__pasaporte=d['cedula'])).first()
                    observaciones += f"Registra una inscripción en la carrera {ins.carrera.__str__()} y en la coordinación {ins.coordinacion.__str__()}\n"
            if not verificar:
                inscripciones = Inscripcion.objects.filter(
                    Q(persona__cedula=d['cedula']) | Q(persona__pasaporte=d['cedula']), coordinacion_id=9,
                    carrera__nombre__contains=d['carrera_admision_cge'])
                if inscripciones.count() > 1:
                    verificar = True
                    observaciones += f"Tiene mas de una inscripción \n"
                inscripcion = inscripciones.order_by('-id').first()
                persona = inscripcion.persona
                if not Matricula.objects.filter(inscripcion=inscripcion).exists():
                    verificar = True
                    observaciones += f"No registra matricula \n"
                else:
                    matricula = Matricula.objects.filter(inscripcion=inscripcion, status=True).first()
                    aprobado = False
                    materias = MateriaAsignada.objects.filter(matricula=matricula, status=True)
                    c_ap = 0
                    num_matriculas = 1
                    for ma in materias:
                        if ma.estado.id == 1:
                            c_ap += 1
                        if ma.matriculas > 1:
                            num_matriculas = ma.matriculas

                    if c_ap == materias.count():
                        aprobado = True
                    if not matricula.aprobado and matricula.pasoayuda and not aprobado:
                        verificar = True
                        observaciones += f"Aprobo con ayuda \n"
                        aprobado = True

                    if aprobado:
                        if not Inscripcion.objects.filter(persona=inscripcion.persona,
                                                          coordinacion_id__in=[1, 2, 3, 4, 5]).exists():
                            verificar = True
                            observaciones += f"No registra inscripción en pregrado \n"
                        else:
                            ins = Inscripcion.objects.filter(persona=inscripcion.persona,
                                                             coordinacion_id__in=[1, 2, 3, 4, 5]).order_by(
                                '-fecha').first()
                            if not Matricula.objects.filter(inscripcion=ins, status=True).exists():
                                verificar = True
                                observaciones += f"No registra matricula en pregrado \n"
                            else:
                                ma = Matricula.objects.filter(inscripcion=ins, status=True).order_by('-fecha').first()
                                fecha_matricula_pregrado = ma.fecha.strftime("%d-%m-%Y")

                    if matricula.retiradomatricula:
                        detalle_matricula = "RETIRADO/A"
                    elif num_matriculas > 1:
                        detalle_matricula = "SEGUNDA MATRICULA"
                    else:
                        detalle_matricula = "PRIMERA MATRICULA"

                    if d['proceso_eaes'] == '2S-2020':
                        fecha_matricula_admision = "26-03-2021"
                    elif d['proceso_eaes'] == '1S-2020':
                        fecha_matricula_admision = "01-11-2020"
                    elif d['proceso_eaes'] == '2S-2017':
                        fecha_matricula_admision = "04-03-2017"
                    elif d['proceso_eaes'] == '1S-2017':
                        fecha_matricula_admision = "10-09-2017"

            wk.write(row_num, 0, c)
            wk.write(row_num, 1, 'SI' if verificar else 'NO')
            wk.write(row_num, 2, inscripcion.id if inscripcion else 0)
            wk.write(row_num, 3, d['aspirante_cge'])
            wk.write(row_num, 4, d['cedula'])
            wk.write_blank(row_num, 5, None)
            wk.write(row_num, 6, d['puntaje_eaes'])
            wk.write(row_num, 7, d['carrera_cge'])
            wk.write(row_num, 8, 'APROBADO' if aprobado else 'REPROBADO')
            if not fecha_matricula_admision:
                wk.write_blank(row_num, 9, None)
            else:
                wk.write(row_num, 9, fecha_matricula_admision)
            if not detalle_matricula:
                wk.write_blank(row_num, 10, None)
            else:
                wk.write(row_num, 10, detalle_matricula)
            if not fecha_matricula_pregrado:
                wk.write_blank(row_num, 11, None)
            else:
                wk.write(row_num, 11, fecha_matricula_pregrado)
            wk.write(row_num, 12, observaciones, wrap_format)
            row_num += 1


def generar_cge_auditoria():
    data = cge_auditoria_admision_data_matriz()
    generar_excel_cge_admision_data(data)


def dar_baja_contrato():
    becasolicitudes = BecaSolicitud.objects.filter(periodo_id=113, status=True)
    print(f"Inicia proceso con un total de {becasolicitudes.count()}")
    c = 0
    for solicitud in becasolicitudes:
        c += 1
        if BecaAsignacion.objects.filter(solicitud=solicitud, numerocontrato__isnull=False).exists():
            asignada = BecaAsignacion.objects.filter(solicitud=solicitud, numerocontrato__isnull=False).first()
            if asignada.numerocontrato > 0:
                asignada.numeroacta = None
                asignada.numerocontrato = None
                asignada.archivocontrato = None
                asignada.estadorevisioncontrato = None
                asignada.fechaacta = None
                asignada.fechacontrato = None
                asignada.save()
                becarecorrido = BecaSolicitudRecorrido(solicitud=solicitud,
                                                       fecha=datetime.now().date(),
                                                       observacion=f"SE REAJUSTO CONTRATO, POR MOTIVO DE FECHAS.",
                                                       estado=9)
                becarecorrido.save()
                notificacion = Notificacion(titulo="Notificación de reajuste en solicitud de beca",
                                            cuerpo="Se procedio a reajustar contrato, por motivo de fechas y número de contrato. La impresión o carga del contrato con anteriorida queda insubsistente.",
                                            destinatario=solicitud.inscripcion.persona,
                                            url="/alu_becas",
                                            fecha_hora_visible=datetime.now() + timedelta(days=2),
                                            content_type=ContentType.objects.get_for_model(solicitud),
                                            object_id=solicitud.id,
                                            prioridad=1,
                                            app_label='sga')
                notificacion.save()
        print(f"Termino solicitud {c}/{becasolicitudes.count()}")


def crear_historial_ppl():
    inscripciones = Inscripcion.objects.filter(persona__ppl=True)
    print(f"Inicia proceso con un total de {inscripciones.count()}")
    c = 0
    for inscripcion in inscripciones:
        c += 1
        persona = inscripcion.persona
        if not HistorialPersonaPPL.objects.filter(persona=persona).exists():
            hppl = HistorialPersonaPPL(persona=persona,
                                       inscripcion=inscripcion,
                                       fechaingreso=inscripcion.fecha,
                                       fechasalida=None,
                                       archivo=None,
                                       observacion=persona.observacionppl
                                       )
            hppl.save()
            print(f"Termino registro {c}/{inscripciones.count()}")


def actualizar_record_academico_quitar_creditos_promedio_no_consta_malla():
    workbook = xlrd.open_workbook("estudiante_malla_2013_psicologia.xlsx")
    sheet = workbook.sheet_by_index(0)
    linea = 1
    for rowx in range(sheet.nrows):
        if linea > 1:
            print("************LINEA %s" % linea)
            cols = sheet.row_values(rowx)
            documento = str(cols[0]).strip().upper()
            if Inscripcion.objects.filter(Q(persona__cedula=documento) | Q(persona__pasaporte=documento),
                                          carrera_id=18).exists():
                inscripciones = Inscripcion.objects.filter(
                    Q(persona__cedula=documento) | Q(persona__pasaporte=documento), carrera_id=18)
                inscripcion = inscripciones.first()
                print("************INSCRIPCION %s" % inscripcion.__str__())
                malla = inscripcion.mi_malla()
                asignaturas_malla = AsignaturaMalla.objects.filter(malla=malla, status=True)
                # MODULOS DE INGLES
                modulos = ModuloMalla.objects.filter(malla=malla)
                mallas_ingles = Malla.objects.filter(pk__in=[353, 22])
                asignaturas_ingles = AsignaturaMalla.objects.filter(malla__in=mallas_ingles)
                records_ingles = RecordAcademico.objects.filter(inscripcion=inscripcion,
                                                                asignatura_id__in=asignaturas_ingles.values(
                                                                    'asignatura_id'), aprobada=True)
                records_ingles = records_ingles.filter(modulomalla__in=modulos, aprobada=True)
                records_ingles.update(validapromedio=False, valida=True)
                print("************ACTUALIZA INGLES (CREDITOS, HORAS y NO VALIDO PARA PROMEDIO)")

                # MODULOS DE COMPUTACION
                mallas_computacion = Malla.objects.filter(pk__in=[32])
                asignaturas_computacion = AsignaturaMalla.objects.filter(malla__in=mallas_computacion)
                records_computacion = RecordAcademico.objects.filter(inscripcion=inscripcion,
                                                                     asignatura_id__in=asignaturas_computacion.values(
                                                                         'asignatura_id'), aprobada=True)
                records_computacion.update(validapromedio=False, valida=True)
                print("************ACTUALIZA COMPUTACIÓN (CREDITOS, HORAS y NO VALIDO PARA PROMEDIO)")

                # ASIGNATURAS QUE NO CONSTAN EN MALLA
                records = RecordAcademico.objects.filter(inscripcion=inscripcion).exclude(
                    asignatura_id__in=asignaturas_malla.values('asignatura_id'))
                records = records.exclude(asignaturamalla__in=asignaturas_malla)
                records = records.exclude(asignatura_id__in=asignaturas_ingles.values('asignatura_id'))
                records = records.exclude(modulomalla__in=modulos)
                records = records.exclude(asignatura_id__in=asignaturas_computacion.values('asignatura_id'))
                records.update(validapromedio=False, valida=False)
                print("************ACTUALIZA ASIGNATURAS FUERA DE MALLA (CREDITOS, HORAS y NO VALIDO PARA PROMEDIO)")
                inscripcion.actualizar_creditos()
                print("************ACTUALIZA CREDITOS, HORAS y NO VALIDO PARA PROMEDIO ")
                inscripcion.actualizar_nivel()
                print("************ACTUALIZA NIVEL")
                print(records)
        linea += 1


def generar_matricula(archivo):
    ePeriodo = Periodo.objects.get(pk=119)
    workbook = xlrd.open_workbook(archivo)
    sheet = workbook.sheet_by_index(0)
    linea = 1
    total_linea = sheet.nrows
    print("************************************************")
    num_matriculados = 0
    for rowx in range(sheet.nrows):
        cols = sheet.row_values(rowx)
        print("******************** LINEA: %s de %s " % (linea, total_linea))
        if linea > 1:
            with transaction.atomic():
                try:
                    paralelo = str(cols[17]).strip()
                    eInscripcion = Inscripcion.objects.get(pk=int(cols[0]))
                    print("******************************** ESTUDIANTE: %s (%s)" % (
                        eInscripcion.persona.__str__(), eInscripcion.id))
                    eCarrera = eInscripcion.carrera
                    eSesion = eInscripcion.sesion
                    ePersona = eInscripcion.persona

                    if eInscripcion.tiene_perdida_carrera():
                        raise NameError(u"Tiene limite de matriculas.")
                    if ePersona.tiene_otro_titulo(inscripcion=eInscripcion):
                        raise NameError(u"Registra otro titulo o perdida de gratuidad")
                    niveles = Nivel.objects.filter(periodo=ePeriodo, sesion=eSesion,
                                                   materia__asignaturamalla__nivelmalla__id=2,
                                                   materia__asignaturamalla__malla__carrera=eCarrera,
                                                   materia__paralelomateria__nombre=paralelo).distinct()
                    if not niveles.exists():
                        raise NameError(u"No existe nivel para matricular")
                    eNivel = niveles[0]
                    if Materia.objects.filter(nivel=eNivel, paralelomateria__nombre=paralelo,
                                              asignaturamalla__malla__carrera=eCarrera, nivel__sesion=eSesion,
                                              asignaturamalla__nivelmalla__id=2,
                                              asignaturamalla__practicas=True).exists():
                        raise NameError(u"Materia es teorica práctica")
                    if not eInscripcion.matricula_periodo(ePeriodo):
                        eMatricula = Matricula(inscripcion=eInscripcion,
                                               nivel=eNivel,
                                               pago=False,
                                               iece=False,
                                               becado=False,
                                               porcientobeca=0,
                                               fecha=datetime.now().date(),
                                               hora=datetime.now().time(),
                                               fechatope=fechatope(datetime.now().date()),
                                               automatriculapregrado=True,
                                               fechaautomatriculapregrado=datetime.now(),
                                               estado_matricula=2)
                        eMatricula.save(usuario_id=ADMINISTRADOR_ID)
                    else:
                        eMatricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=eNivel)

                    for eMateria in Materia.objects.filter(nivel=eNivel, paralelomateria__nombre=paralelo,
                                                           asignaturamalla__malla__carrera=eCarrera,
                                                           nivel__sesion=eSesion, asignaturamalla__nivelmalla__id=2):
                        if not MateriaAsignada.objects.filter(matricula=eMatricula, materia=eMateria).exists():
                            matriculas = eMatricula.inscripcion.historicorecordacademico_set.filter(
                                asignatura=eMateria.asignatura, fecha__lt=eMateria.nivel.fin).count() + 1
                            eMateriaAsignada = MateriaAsignada(matricula=eMatricula,
                                                               materia=eMateria,
                                                               notafinal=0,
                                                               asistenciafinal=100,
                                                               asistenciafinalzoom=100,
                                                               cerrado=False,
                                                               matriculas=matriculas,
                                                               observaciones='',
                                                               estado_id=NOTA_ESTADO_EN_CURSO)
                            eMateriaAsignada.save(usuario_id=ADMINISTRADOR_ID)
                            eMateriaAsignada.asistencias()
                            eMateriaAsignada.evaluacion()
                            eMateriaAsignada.mis_planificaciones()
                            eMateriaAsignada.save(usuario_id=ADMINISTRADOR_ID)
                            print(
                                u"****************************************************************  Matriculado en la materia %s " % eMateria)
                        else:
                            print(
                                u"****************************************************************  Ya se encontraba matriculado en la materia %s" % eMateria)
                        eInscripcion.actualizar_nivel()
                        eMatricula.actualiza_matricula()
                        eMatricula.inscripcion.actualiza_estado_matricula()
                        eMatricula.grupo_socio_economico(1)
                        eMatricula.calcula_nivel()
                        num_matriculados += 1
                except Exception as ex:
                    transaction.set_rollback(True)
                    print(
                        f"****************************************************************  No se matricular a {ePersona.__str__()}. Error: {ex.__str__()}")

        linea += 1

    print(f"******************** TOTAL DE MATRICULADOS: {num_matriculados} ****************************")


def generar_matricula_delete(archivo):
    ##archivo_segundo = "alumnos_2021_2s_segundo.xlsx"
    ##archivo_tercero = "alumnos_2021_2s_tercero.xlsx"
    ePeriodo = Periodo.objects.get(pk=119)
    workbook = xlrd.open_workbook(archivo)
    sheet = workbook.sheet_by_index(0)
    linea = 1
    total_linea = sheet.nrows
    print("************************************************")
    num_matriculados = 0
    for rowx in range(sheet.nrows):
        cols = sheet.row_values(rowx)
        print("******************** LINEA: %s de %s " % (linea, total_linea))
        if linea > 1:
            with transaction.atomic():
                try:
                    paralelo = str(cols[17]).strip()
                    eInscripcion = Inscripcion.objects.get(pk=int(cols[0]))
                    print("******************************** ESTUDIANTE: %s (%s)" % (
                        eInscripcion.persona.__str__(), eInscripcion.id))
                    eCarrera = eInscripcion.carrera
                    eSesion = eInscripcion.sesion
                    ePersona = eInscripcion.persona

                    if Matricula.objects.filter(inscripcion=eInscripcion, nivel__periodo=ePeriodo,
                                                automatriculapregrado=True, termino=False).exists():
                        eMatricula = Matricula.objects.filter(inscripcion=eInscripcion, nivel__periodo=ePeriodo,
                                                              automatriculapregrado=True, termino=False)[0]
                        eMatricula.delete()
                        num_matriculados += 1
                except Exception as ex:
                    transaction.set_rollback(True)
                    print(
                        f"****************************************************************  No se puede eliminar matricular a {ePersona.__str__()}. Error: {ex.__str__()}")

        linea += 1

    print(
        f"******************** TOTAL DE DESMATRICULADOS MATRICULADOS: {num_matriculados} ****************************")


def generar_valor_rubro_matricula():
    ePeriodo = Periodo.objects.get(pk=119)
    tipo_matricula = TipoOtroRubro.objects.get(pk=2924)
    tipo_arancel = TipoOtroRubro.objects.get(pk=2923)
    rubros = Rubro.objects.filter(epunemi=False, tipo=tipo_matricula, cancelado=True, saldo=0,
                                  relacionados__isnull=False, status=True, matricula__nivel__periodo=ePeriodo).order_by(
        'fecha').distinct()
    print(rubros.count())
    contador = 1
    for rubro in rubros:
        print(contador)
        valor1 = null_to_decimal(
            Rubro.objects.filter(matricula=rubro.matricula, tipo=tipo_arancel).aggregate(valor=Sum('saldo'))['valor'],
            2)
        print(valor1)
        porcentaje = null_to_decimal((valor1 * 0.1), 2)
        print(porcentaje)
        if porcentaje > 10:
            porcentaje = 10
        rubro.valor = porcentaje
        rubro.valortotal = porcentaje
        rubro.saldo = porcentaje
        rubro.cancelado = False
        rubro.save()
        print(rubro)
        contador += 1


def reajuste_paralelos_duples():
    ePeriodo = Periodo.objects.get(pk=119)
    for paralelo in Paralelo.objects.filter(
            pk__in=Materia.objects.values("paralelomateria__id").filter(nivel__periodo=ePeriodo).distinct()):
        total = Paralelo.objects.filter(nombre=paralelo.nombre).exclude(pk=paralelo.id).count()
        if total > 0:
            print(f"ID:{paralelo.id} - Nombre: {paralelo.nombre} - Total: {total}")


def reasjute_horas_creditos_malla_modulos_ingles():
    print(SITE_STORAGE)
    with xlsxwriter.Workbook(
            f'{SITE_STORAGE}/media/migracion_modulos_ingles_2021_{random.randrange(1, 100)}.xlsx') as workbook:
        wk = workbook.add_worksheet(f"Hoja1")
        columns = [
            (u"ID_INSCRIPCION", 10),
            (u"APELLIDOS_NOMBRES", 100),
            (u"CEDULA", 80),
            (u"CARRERA", 80),
            (u"ID_MALLA", 80),
            (u"ID_RECORD", 10),
            (u"MODULO", 30),
            (u"CREDITOS_ANTERIOR", 10),
            (u"CREDITOS_ACTUAL", 10),
            (u"HORAS_ANTERIOR", 10),
            (u"HORAS_ACTUAL", 10),
        ]
        row_num = 1
        for col_num in range(len(columns)):
            wk.write(row_num, col_num, columns[col_num][0])
            wk.set_column(col_num, col_num, columns[col_num][1])
        row_num = 2
        wrap_format = workbook.add_format({'text_wrap': True})
        c = 0
        ids = [232, 228, 233, 18, 17, 222, 225, 202, 226, 205, 8, 207, 6, 210, 201, 224, 356, 9, 204, 218, 206, 212,
               114, 219, 113, 4, 5, 3, 7, 115, 199, 237, 208, 332, 231, 200, 11, 19, 14, 213, 258, 355, 173, 174, 13, 2,
               172]
        # ids = [218]
        # inscripcion_ids = [131795, 104493]
        mallas = Malla.objects.filter(pk__in=ids)
        for malla in mallas:
            print(f"Malla: {malla.__str__()}")
            for inscripcionmalla in InscripcionMalla.objects.filter(malla=malla):
                inscripcion = inscripcionmalla.inscripcion
                if not inscripcion.usado_graduados() or not inscripcion.egresado():
                    print(f"Inscripcion: {inscripcion.__str__()}")
                    recordacademico = inscripcion.recordacademico_set.filter(modulomalla__isnull=False, aprobada=True)
                    print(f"Total de record: {len(recordacademico)}")
                    for record in recordacademico:
                        record.actualizar()
                        historico = record.mi_historico()
                        historico.creditos = record.modulomalla.creditos
                        historico.horas = record.modulomalla.horas
                        historico.validapromedio = False
                        historico.valida = True
                        historico.save()
                        creditos_anterior = record.creditos
                        creditos_actual = record.modulomalla.creditos
                        record.creditos = record.modulomalla.creditos
                        horas_anterior = record.horas
                        horas_actual = record.modulomalla.horas
                        record.horas = record.modulomalla.horas
                        record.validapromedio = False
                        record.valida = True
                        record.save()
                        # ID_INSCRIPCION
                        wk.write(row_num, 0, inscripcion.id)
                        # APELLIDOS_NOMBRES
                        wk.write(row_num, 1, inscripcion.persona.nombre_completo_inverso())
                        # CEDULA
                        wk.write(row_num, 2, inscripcion.persona.documento())
                        # CARRERA
                        wk.write(row_num, 3, inscripcion.carrera.__str__())
                        # ID_MALLA
                        wk.write(row_num, 4, malla.id)
                        # ID_RECORD
                        wk.write(row_num, 5, record.id)
                        # MODULO
                        wk.write(row_num, 6, record.modulomalla.asignatura.nombre)
                        # CREDITOS_ANTERIOR
                        wk.write(row_num, 7, creditos_anterior)
                        # CREDITOS_ACTUAL
                        wk.write(row_num, 8, creditos_actual)
                        # HORAS_ANTERIOR
                        wk.write(row_num, 9, horas_anterior)
                        # HORAS_ACTUAL
                        wk.write(row_num, 10, horas_actual)
                        row_num += 1
                    print(f"Final de Inscripcion: {inscripcion.__str__()}")
                    print(f"------------------------------------------------")


def reajuste_horario_clase_seguida_admision(periodo_id):
    tipoprofesores = (
        (1, u'TEORIA'),
        (2, u'PRACTICA'),
        (7, u'VIRTUAL'),
        (11, u'AUTOR 2'),
        (12, u'AUTOR 1'),
        (10, u'ORIENTACION'),
        (8, u'TUTOR VIRTUAL'),
        (5, u'AYUDANTÍA')
    )

    tipohorarios = (
        (2, u'CLASE VIRTUAL SINCRÓNICA'),
        (7, u'CLASE VIRTUAL ASINCRÓNICA'),
        (8, u'CLASE REFUERZO SINCRÓNICA'),
        (9, u'CLASE REFUERZO ASINCRÓNICA'),
    )
    listadias = DIAS_CHOICES
    materias = Materia.objects.filter(nivel__periodo_id=periodo_id)
    Clase.objects.filter(status=True, materia__in=materias).update(subirenlace=False)
    total = materias.count()
    con = 0
    for materia in materias:
        print(f"Materia: {materia.__str__()}")
        for lisdia in listadias:
            for tipoprofesor in tipoprofesores:
                print(f"Tipo de profesor: {tipoprofesor[1]}")
                for tipohorario in tipohorarios:
                    print(f"Tipo de horario: {tipohorario[1]}")
                    if Clase.objects.filter(materia=materia, dia=lisdia[0], tipoprofesor_id=tipoprofesor[0],
                                            tipohorario=tipohorario[0]):
                        listaclase = Clase.objects.filter(materia=materia, dia=lisdia[0],
                                                          tipoprofesor_id=tipoprofesor[0],
                                                          tipohorario=tipohorario[0]).order_by('-id')
                        clasetrue = \
                            Clase.objects.filter(materia=materia, dia=lisdia[0], tipoprofesor_id=tipoprofesor[0],
                                                 tipohorario=tipohorario[0]).order_by('-turno__comienza')[0]
                        clasetrue.subirenlace = True
                        clasetrue.save()
                        for lclase in listaclase:
                            if lclase.id != clasetrue.id:
                                lclase.subirenlace = False
                                lclase.save()
        con += 1
        print(f"{str(con)} / {str(total)}")


def reajuste_horario_clase_seguida_pregrado(periodo_id):
    print(f"Inicio del proceso de reajuste de horarios del periodo_id: {periodo_id}")
    tipoprofesores = (
        (1, u'TEORIA'),
        (2, u'PRACTICA'),
        (7, u'VIRTUAL'),
        (11, u'AUTOR 2'),
        (12, u'AUTOR 1'),
        (10, u'ORIENTACION'),
        (14, u'PROFESOR TUTOR'),
        # (8, u'TUTOR VIRTUAL'),
        # (5, u'AYUDANTÍA')
    )

    tipohorarios = (
        (2, u'CLASE VIRTUAL SINCRÓNICA'),
        (7, u'CLASE VIRTUAL ASINCRÓNICA'),
        (8, u'CLASE REFUERZO SINCRÓNICA'),
        (9, u'CLASE REFUERZO ASINCRÓNICA'),
    )
    listadias = DIAS_CHOICES
    materias = Materia.objects.filter(nivel__periodo_id=periodo_id)

    total = len(materias)
    con = 0
    for materia in materias:
        Clase.objects.filter(status=True, materia=materia).update(subirenlace=False)
        print(f"Materia: {materia.__str__()}")
        for lisdia in listadias:
            for tipoprofesor in tipoprofesores:
                print(f"Tipo de profesor: {tipoprofesor[1]}")
                for tipohorario in tipohorarios:
                    print(f"Tipo de horario: {tipohorario[1]}")
                    if Clase.objects.filter(materia=materia, dia=lisdia[0], tipoprofesor_id=tipoprofesor[0],
                                            tipohorario=tipohorario[0]):
                        listaclase = Clase.objects.filter(materia=materia, dia=lisdia[0],
                                                          tipoprofesor_id=tipoprofesor[0],
                                                          tipohorario=tipohorario[0]).order_by('-id')
                        clasetrue = \
                            Clase.objects.filter(materia=materia, dia=lisdia[0], tipoprofesor_id=tipoprofesor[0],
                                                 tipohorario=tipohorario[0]).order_by('-turno__comienza')[0]
                        clasetrue.subirenlace = True
                        clasetrue.save()
                        for lclase in listaclase:
                            if lclase.id != clasetrue.id:
                                lclase.subirenlace = False
                                lclase.save()
        con += 1
        print(f"{str(con)} / {str(total)}")
    print(f"Finalizo el proceso de reajuste de horarios del periodo_id: {periodo_id}")


def reajustar_asistencia_dia_especifico(ePeriodo):
    # fechas = [
    #     (datetime(2021, 11, 29, 0, 0, 0)).date(),
    #     (datetime(2021, 11, 30, 0, 0, 0)).date(),
    #     (datetime(2021, 12, 1, 0, 0, 0)).date(),
    #     (datetime(2021, 12, 2, 0, 0, 0)).date()
    # ]
    fechas = [
        (datetime(2023, 1, 31, 0, 0, 0)).date(),
        (datetime(2023, 2, 7, 0, 0, 0)).date()
    ]
    ePeriodoAcademia = ePeriodo.get_periodoacademia()
    # fecha = (datetime(2021, 11, 29, 0, 0, 0)).date()
    cedulas = []

    for fecha in fechas:
        ids_p = []
        dia = (fecha.weekday() + 1)
        # for doc in cedulas:
        #     if Persona.objects.values("id").filter(Q(cedula=doc) | Q(pasaporte=doc)).exists():
        #         ids_p.append(Persona.objects.filter(Q(cedula=doc) | Q(pasaporte=doc))[0].id)
        # profesores = Profesor.objects.filter(categoria_id__in=[4, 5, 6], profesormateria__materia__nivel__periodo=ePeriodo, profesormateria__activo=True).distinct()
        # ids_persona = [46072]
        # for cedula in cedulas:
        #     if Persona.objects.filter(Q(cedula=cedula) | Q(pasaporte=cedula)).exists():
        #         ePersona = Persona.objects.filter(Q(cedula=cedula) | Q(pasaporte=cedula))[0]
        #         ids_persona.append(ePersona.id)
        # profesores = Profesor.objects.filter(profesormateria__materia__nivel__periodo=ePeriodo, profesormateria__activo=True, persona_id__in=ids_persona).distinct()
        profesores = Profesor.objects.filter(profesormateria__materia__nivel__periodo=ePeriodo,
                                             profesormateria__activo=True, pk=118).distinct()
        # profesores = Profesor.objects.filter(pk=903).distinct()
        total_profesores = profesores.count()
        print("*** FECHA A PROCESAR: " + fecha.__str__() + "\r")
        contP = 1
        for profesor in profesores:
            print(f"***** ({contP}/{total_profesores}) -> Profesor: {profesor.__str__()}")
            # clases = Clase.objects.filter(activo=True, inicio__lte=fecha, fin__gte=fecha, dia=dia, status=True, materia__nivel__periodo_id=119, profesor_id=profesor.id).exclude()
            clases = Clase.objects.filter(activo=True, inicio__lte=fecha, fin__gte=fecha, dia=dia, status=True,
                                          materia_id=60890,
                                          materia__nivel__periodo=ePeriodo,
                                          materia__nivel__periodo__visible=True,
                                          materia__nivel__periodo__visiblehorario=True,
                                          materia__fechafinasistencias__gte=fecha,
                                          materia__profesormateria__profesor_id=profesor.id,
                                          profesor_id=profesor.id,
                                          materia__profesormateria__tipoprofesor_id__in=[10, 11, 12, 1, 5, 8, 7, 2, 9,
                                                                                         15],
                                          tipoprofesor_id__in=[10, 11, 12, 1, 5, 8, 7, 2, 9, 15])
            # clases = clases.filter(turno__comienza__gte=time(6, 0, 0), turno__termina__lte=time(23, 59, 59))
            total_clases = clases.count()
            contC = 1
            for cl in clases:
                print(f"******** ({contC}/{total_clases}) -> Clase: {cl.__str__()}")
                # if cl.materia.profesor_principal():
                if LeccionGrupo.objects.values("id").filter(profesor=profesor, turno=cl.turno, fecha=fecha).exists():
                    lecciongrupo = LeccionGrupo.objects.get(profesor=profesor, turno=cl.turno, fecha=fecha)
                    lecciongrupo.abierta = False
                    lecciongrupo.save()
                else:
                    lecciongrupo = LeccionGrupo(profesor=profesor,
                                                turno=cl.turno,
                                                aula=cl.aula,
                                                dia=cl.dia,
                                                fecha=fecha,
                                                horaentrada=cl.turno.comienza,
                                                horasalida=cl.turno.termina,
                                                abierta=False,
                                                automatica=False,
                                                contenido='',
                                                observaciones='')
                    lecciongrupo.save()
                if Leccion.objects.values("id").filter(clase=cl, fecha=fecha).exists():
                    leccion = Leccion.objects.get(clase=cl, fecha=fecha)
                    leccion.abierta = False
                    leccion.save()
                else:
                    leccion = Leccion(clase=cl,
                                      fecha=fecha,
                                      horaentrada=cl.turno.comienza,
                                      horasalida=cl.turno.termina,
                                      abierta=False,
                                      contenido=lecciongrupo.contenido,
                                      observaciones=lecciongrupo.observaciones)
                    leccion.save()
                if not lecciongrupo.lecciones.values("id").filter(pk=leccion.id).exists():
                    lecciongrupo.lecciones.add(leccion)

                asignados = None
                # SE FILTRA SI LA MATERIA TIENE TIPO DE PROFESOR PRACTICA Y LA CLASE TAMBIEN
                # 1 => CLASE PRESENCIAL
                # 2 => CLASE VIRTUAL SINCRÓNICA
                # 8 => CLASE REFUERZO SINCRÓNICA
                if cl.tipoprofesor.id == 2 and cl.tipohorario in [1, 2, 8]:
                    if cl.grupoprofesor:
                        if cl.grupoprofesor.paralelopractica:
                            # grupoprofesor_id = clase.grupoprofesor.id
                            if cl.grupoprofesor.listado_inscritos_grupos_practicas().exists():
                                listado_alumnos_practica = cl.grupoprofesor.listado_inscritos_grupos_practicas()
                                if ePeriodoAcademia.valida_asistencia_pago:
                                    asignados = MateriaAsignada.objects.filter(
                                        pk__in=listado_alumnos_practica.values_list('materiaasignada_id', flat=True),
                                        matricula__estado_matricula__in=[2, 3]).distinct()
                                else:
                                    asignados = MateriaAsignada.objects.filter(
                                        pk__in=listado_alumnos_practica.values_list('materiaasignada_id',
                                                                                    flat=True)).distinct()
                            else:
                                raise print(u"Clase no creada, de tipo práctica no tiene alumnos. %s" % cl)

                        else:
                            raise print(u"Clase no creada, de tipo práctica no tiene paralelos. %s" % cl)
                    else:
                        raise NameError(u"Clase no creada, de tipo práctica no tiene grupos. %s" % cl)
                else:
                    asignados = cl.materia.asignados_a_esta_materia()

                total_asistencias = 0
                if AsistenciaLeccion.objects.values("id").filter(leccion=leccion).exists():
                    total_asistencias = AsistenciaLeccion.objects.filter(leccion=leccion).count()
                    for asis in AsistenciaLeccion.objects.filter(leccion=leccion):
                        # if not asis.asistio:
                        asis.asistio = True
                        asis.save()
                        mateasig = asis.materiaasignada
                        mateasig.save(actualiza=True)
                        mateasig.actualiza_estado()
                else:
                    total_asistencias = asignados.count()
                    for materiaasignada in asignados:
                        if not AsistenciaLeccion.objects.values("id").filter(leccion=leccion,
                                                                             materiaasignada=materiaasignada).exists():
                            asistencialeccion = AsistenciaLeccion(leccion=leccion,
                                                                  materiaasignada=materiaasignada,
                                                                  asistio=True)
                            asistencialeccion.save()
                            materiaasignada.save(actualiza=True)
                            materiaasignada.actualiza_estado()
                        # guardar temas de silabo
                lecciongrupo.save()
                print(f"*********** (Total Asistencia: {total_asistencias})")
                # print(cl)
                contC += 1

            contP += 1


def demo_cierre_clases():
    @transaction.atomic()
    def cerrar(lg):
        ahora = datetime.now()
        if lg.fecha < ahora.date():
            lg.abierta = False
            lg.horasalida = lg.turno.termina
            lg.save()
            lg.cerrar_lecciones(lg.turno)
            print(" CERRADA\r")
        elif lg.turno.termina < ahora.time():
            lg.abierta = False
            lg.horasalida = lg.turno.termina
            lg.save()
            lg.cerrar_lecciones(lg.turno)
            print(" CERRADA\r")
            if CLASES_CONTINUAS_AUTOMATICAS:
                if not LeccionGrupo.objects.values('id').filter(profesor=lg.profesor, fecha=lg.fecha,
                                                                abierta=True).exists():
                    hoy = ahora.date()
                    minutos_maximos = (ahora + timedelta(minutes=CLASES_APERTURA_DESPUES)).time()
                    materias = [x.clase.materia.id for x in lg.lecciones.all()]
                    # claseshorario = Clase.objects.filter(activo=True, status=True, dia=lg.dia, materia__id__in=materias, profesor=lg.profesor, materia__profesormateria__principal=True, inicio__lte=hoy, fin__gte=hoy, turno__comienza__gte=lg.horasalida, turno__comienza__lte=minutos_maximos).distinct()
                    claseshorario = Clase.objects.filter(activo=True, status=True, dia=lg.dia, materia__id__in=materias,
                                                         profesor=lg.profesor, inicio__lte=hoy, fin__gte=hoy,
                                                         turno__comienza__gte=lg.horasalida,
                                                         turno__comienza__lte=minutos_maximos).distinct()
                    if claseshorario:
                        turno = claseshorario[0].turno
                        aula = claseshorario[0].aula
                        claseshorario = claseshorario.filter(turno=turno)
                        # SE PREGUNTA SI LA CLASE ANTERIOR ES DE TIPO PRACTICA
                        puede_continuar = True
                        for clase in claseshorario:
                            if not Leccion.objects.values('id').filter(clase=clase, fecha=datetime.now()).exists():
                                leccionanterior = lg.lecciones.filter(clase__materia=clase.materia)[0]
                                if leccionanterior.clase.tipoprofesor.id == 2 and clase.tipoprofesor.id == 2:
                                    anterior_grupoprofesor_id = 0
                                    if leccionanterior.clase.grupoprofesor:
                                        if leccionanterior.clase.grupoprofesor.paralelopractica:
                                            anterior_grupoprofesor_id = leccionanterior.clase.grupoprofesor.id
                                    actual_grupoprofesor_id = 0
                                    if clase.grupoprofesor:
                                        if clase.grupoprofesor.paralelopractica:
                                            actual_grupoprofesor_id = clase.grupoprofesor.id
                                    puede_continuar = anterior_grupoprofesor_id == actual_grupoprofesor_id

                        if puede_continuar:
                            if LeccionGrupo.objects.values('id').filter(profesor=lg.profesor, turno=turno,
                                                                        fecha=datetime.now()).exists():
                                lecciongrupo = LeccionGrupo.objects.get(profesor=lg.profesor, turno=turno,
                                                                        fecha=datetime.now())
                            else:
                                lecciongrupo = LeccionGrupo(profesor=lg.profesor,
                                                            turno=turno,
                                                            aula=aula,
                                                            dia=lg.dia,
                                                            fecha=datetime.now(),
                                                            horaentrada=turno.comienza,
                                                            abierta=True,
                                                            automatica=True,
                                                            contenido=lg.contenido,
                                                            estrategiasmetodologicas=lg.estrategiasmetodologicas,
                                                            observaciones=lg.observaciones,
                                                            ipingreso=lg.ipingreso,
                                                            ipexterna=lg.ipexterna)
                                lecciongrupo.save()
                            for clase in claseshorario:
                                if not Leccion.objects.values('id').filter(clase=clase, fecha=datetime.now()).exists():
                                    leccionanterior = lg.lecciones.filter(clase__materia=clase.materia)[0]
                                    leccion = Leccion(clase=clase,
                                                      fecha=datetime.now(),
                                                      horaentrada=turno.comienza,
                                                      abierta=True,
                                                      contenido=leccionanterior.contenido,
                                                      estrategiasmetodologicas=leccionanterior.estrategiasmetodologicas,
                                                      observaciones=leccionanterior.observaciones,
                                                      ipingreso=leccionanterior.ipingreso,
                                                      ipexterna=leccionanterior.ipexterna,
                                                      automatica=True,
                                                      aperturaleccion=True)
                                    leccion.save()
                                    lecciongrupo.lecciones.add(leccion)
                                    for asistencias in AsistenciaLeccion.objects.filter(leccion=leccionanterior):
                                        asistencialeccion = AsistenciaLeccion(leccion=leccion,
                                                                              materiaasignada=asistencias.materiaasignada)
                                        # REGISTRO MANUAL (PRESENCIAL)
                                        if asistencias.asistio and not asistencias.virtual:
                                            asistencialeccion.asistio = True
                                            asistencialeccion.virtual = False
                                        # REGISTRO VIRTUAL (ESTUDIANTE)
                                        elif asistencias.asistio and asistencias.virtual:
                                            asistencialeccion.asistio = True
                                            asistencialeccion.virtual = True
                                        # REGISTRO MANUAL (DOCENTE)
                                        elif not asistencias.asistio and asistencias.virtual:
                                            asistencialeccion.asistio = True
                                            asistencialeccion.virtual = True
                                        else:
                                            asistencialeccion.asistio = False
                                            asistencialeccion.virtual = False
                                        asistencialeccion.virtual_fecha = asistencias.virtual_fecha
                                        asistencialeccion.virtual_hora = asistencias.virtual_hora
                                        asistencialeccion.ip_private = asistencias.ip_private
                                        asistencialeccion.ip_public = asistencias.ip_public
                                        asistencialeccion.browser = asistencias.browser
                                        asistencialeccion.ops = asistencias.ops
                                        asistencialeccion.screen_size = asistencias.screen_size
                                        asistencialeccion.save()
                                        materiaasignada = asistencialeccion.materiaasignada
                                        materiaasignada.save(actualiza=True)
                                        # materiaasignada.actualiza_estado()
                                    # guardar temas de silabo
                                    if TemaAsistencia.objects.values('id').filter(leccion=leccionanterior,
                                                                                  status=True).exists():
                                        for tema in TemaAsistencia.objects.filter(leccion=leccionanterior, status=True):
                                            temaasistencia = TemaAsistencia(leccion_id=leccion.id, tema=tema.tema,
                                                                            fecha=datetime.now().date())
                                            temaasistencia.save()
                                            if SubTemaAsistencia.objects.values('id').filter(tema=tema).exists():
                                                for subtema in SubTemaAsistencia.objects.filter(tema=tema):
                                                    subtemaasistencia = SubTemaAsistencia(tema_id=temaasistencia.id,
                                                                                          subtema=subtema.subtema,
                                                                                          fecha=datetime.now().date())
                                                    subtemaasistencia.save()
                            lecciongrupo.save()
                            print(" ABIERTA CLASES CONTINUAS\r")
        else:
            print("NO CUMPLE CONDICIONALES\r")

    lecciongrupo_id = 746673
    # lecciongrupo = LeccionGrupo.objects.filter(pk=lecciongrupo_id)
    for leccciong in LeccionGrupo.objects.filter(pk=lecciongrupo_id):
        cerrar(leccciong)


def subir_bitacora_personal():
    workbook = xlrd.open_workbook("actividades_rodriguez.xlsx")
    sheet = workbook.sheet_by_index(0)
    linea = 1
    col_fecha = 0
    col_hora = 1
    col_titulo = 2
    col_actividad = 3
    col_py_afectados = 4
    departamento = Departamento.objects.get(pk=93)
    persona = Persona.objects.get(pk=10730)
    print(f"Se generaran {sheet.nrows - 1} registro de bitacora diairia a {persona.__str__()}")
    for rowx in range(sheet.nrows):
        if linea > 1:
            print(f"Fila {linea} / {sheet.nrows}")
            cols = sheet.row_values(rowx)
            fecha = xlrd.xldate.xldate_as_datetime(cols[col_fecha], workbook.datemode)
            hora = xlrd.xldate.xldate_as_datetime(cols[col_hora], workbook.datemode)
            f = datetime(fecha.year, fecha.month, fecha.day, hora.hour, hora.minute, hora.second)
            with transaction.atomic():
                try:
                    if not BitacoraActividadDiaria.objects.filter(fecha=f).exists():
                        eBitacoraActividadDiaria = BitacoraActividadDiaria(titulo=cols[col_titulo],
                                                                           departamento=departamento,
                                                                           fecha=f,
                                                                           persona=persona,
                                                                           descripcion=f"{cols[col_actividad]} en los archivos: {cols[col_py_afectados]}",
                                                                           tiposistema=2)
                        eBitacoraActividadDiaria.save(usuario_id=persona.usuario.id)
                        print(f"Se guardo registro de fecha {eBitacoraActividadDiaria.fecha.__str__()}")
                except Exception as ex:
                    transaction.set_rollback(True)
                    print(f"No se guardo registro de fecha {f.__str__()}")
        linea += 1


def asistencia_dia(ePeriodo):
    fechas = [
        (datetime(2022, 11, 14, 0, 0, 0)).date(),
        (datetime(2022, 11, 15, 0, 0, 0)).date()
    ]
    ePeriodoAcademia = ePeriodo.get_periodoacademia()
    # fecha = (datetime(2021, 11, 29, 0, 0, 0)).date()

    for fecha in fechas:
        dia = (fecha.weekday() + 1)
        print("*** FECHA A PROCESAR: " + fecha.__str__() + "\r")
        lecciones = Leccion.objects.filter(fecha=fecha, clase__materia__nivel__periodo=ePeriodo)
        total_lecciones = lecciones.count()
        contL = 1
        for leccion in lecciones:
            print(f"***** ({contL}/{total_lecciones}) -> Lección: {leccion.__str__()}")
            asistencias = leccion.asistencialeccion_set.filter(status=True)
            for asistencia in asistencias:
                asistencia.asistio = True
                asistencia.save()
                mateasig = asistencia.materiaasignada
                mateasig.save(actualiza=True)
                mateasig.actualiza_estado()
            print(f"********* Se actualizo {asistencias.count()}")
            contL += 1


# def test_soap_service():
#     from zeep import Client
#     url = 'http://127.0.0.1:8000/soap/bp/cobro?wsdl'
#     client = Client(url)
#     print(client)
#     response = client.service.myoperation()
#     print(response)
#     # response is now a regular requests.Response object
#     # assert response.status_code == 200
#     # assert response.content
#
#
# test_soap_service()

# print(f"Inicio del proceso de subida de actividades a la bitacora")
# subir_bitacora_personal()
# print(f"Fin del proceso de subida de actividades a la bitacora")
# print(f"***************************************************************************")
# print(f"***************************************************************************")
# print(f"***************************************************************************")
# print(f"***************************************************************************")
# print(f"Inicio del proceso de apertura de clases del viernes al domingo (29 noviembre  al 5 diciembre de 2021)")
# reajustar_asistencia_dia_especifico()
# print(f"Fin del proceso de apertura de clases del viernes al domingo (29 noviembre  al 5 diciembre de 2021)")


def demo_obtener_intentos_test():
    from moodle import moodle
    periodo = Periodo.objects.get(pk=119)
    usuario_id = 486
    # usuario_id = 4
    test_id = 3
    link_mat = 1832
    eTestSilaboSemanalAdmision = TestSilaboSemanalAdmision.objects.get(pk=link_mat)
    test_id = eTestSilaboSemanalAdmision.get_test_id()
    materia = Materia.objects.get(pk=38911, status=True)
    tipourl = 1
    response = moodle.ObtenerIntentosTest(periodo, tipourl, test_id, usuario_id)
    intentos = response['attempts']
    for intento in intentos:
        print(datetime.fromtimestamp(intento['timestart']))
        print(datetime.fromtimestamp(intento['timefinish']))


def crear_notificacion_demo():
    ePersona = Persona.objects.get(pk=10730)
    ePerfil = PerfilUsuario.objects.get(pk=51040)
    eModulo = Modulo.objects.filter(url='adm_sistemas')[0]

    notificacion = Notificacion(titulo="Notificación demo",
                                cuerpo="Demo",
                                destinatario=ePersona,
                                url="/adm_sistemas",
                                fecha_hora_visible=datetime.now() + timedelta(days=6),
                                content_type=None,
                                object_id=None,
                                prioridad=1,
                                app_label='sga',
                                perfil=ePerfil,
                                modulo=eModulo)
    notificacion.save()


def asistencia_por_congreso_alumno():
    ePeriodo = Periodo.objects.get(pk=119)
    ePeriodoAcademia = ePeriodo.get_periodoacademia()
    semana = [[1, 'Lunes'], [2, 'Martes'], [3, 'Miercoles'], [4, 'Jueves'], [5, 'Viernes'], [6, 'Sabado'],
              [7, 'Domingo']]
    inscritos = InscritoCongreso.objects.filter(participante__rubro__cancelado=True,
                                                participante__rubro__congreso__id__in=[18, 17, 12, 13, 11, 14, 15, 16,
                                                                                       5, 9, 7, 8],
                                                tipoparticipacion__id__in=[131, 137, 138, 108, 116, 41, 46, 77, 122,
                                                                           126, 59, 95, 110, 106, 103, 23, 90, 54, 65,
                                                                           73],
                                                congreso__id__in=[18, 17, 12, 13, 11, 14, 15, 16, 5, 9, 7,
                                                                  8]) | InscritoCongreso.objects.filter(
        participante__cedula='0941413288')
    for eInscritoCongreso in inscritos.distinct():
        print("************PARTICIPANTE: %s" % eInscritoCongreso.__str__())
        ePersona = eInscritoCongreso.participante
        fechainicio = eInscritoCongreso.congreso.fechainicio
        fechafin = eInscritoCongreso.congreso.fechafin
        fechas = [fechainicio + timedelta(days=d) for d in range((fechafin - fechainicio).days + 1)]
        for eMatricula in Matricula.objects.filter(inscripcion__persona=ePersona, nivel__periodo=ePeriodo,
                                                   estado_matricula__in=[2, 3], retiradomatricula=False, status=True):
            print("***************MATRICULA: %s" % eMatricula.__str__())
            for fecha in fechas:
                dia = fecha.isocalendar()[2]
                dia_verbose = None
                for d in semana:
                    if d[0] == dia:
                        dia_verbose = d[1]
                        break
                print("******************FECHA: %s - %s" % (fecha.__str__(), dia_verbose))
                clases = Clase.objects.filter(activo=True, materia__materiaasignada__matricula_id=eMatricula.id,
                                              materia__materiaasignada__retiramateria=False).distinct().order_by(
                    'inicio')
                sesiones = Sesion.objects.filter(
                    turno__clase__in=clases.filter(fin__gte=fecha).values_list("id").distinct() | clases.filter(
                        fin__lt=fecha).values_list("id").distinct()).distinct()
                for sesion in sesiones:
                    print("*********************SECCIÓN: %s" % sesion.__str__())
                    for turno in sesion.turnos_clase2(clases):
                        clss = turno.horario_alumno_presente_consulta(fecha, dia, eMatricula, ePeriodo.id)
                        if clss.exists():
                            print("************************TURNO: %s" % turno.__str__())
                            for clase in clss:
                                print("***************************CLASE: %s" % clase.__str__())
                                for asistencia in AsistenciaLeccion.objects.filter(
                                        materiaasignada__matricula=eMatricula, leccion__clase=clase,
                                        leccion__fecha=fecha, materiaasignada__materia=clase.materia):
                                    if not asistencia.asistio:
                                        asistencia.asistio = True
                                        asistencia.save()
                                        materiaasignada = asistencia.materiaasignada
                                        materiaasignada.save(actualiza=True)
                                        materiaasignada.actualiza_estado()
                                        print("******************************>>>>>>>>> SE ACTUALIZA ASISTENCIA")
                                    else:
                                        print("******************************>>>>>>>>> SI REGISTRA ASISTENCIA")


def asistencia_por_congreso_profesor():
    ePeriodo = Periodo.objects.get(pk=119)
    ePeriodoAcademia = ePeriodo.get_periodoacademia()
    semana = [[1, 'Lunes'], [2, 'Martes'], [3, 'Miercoles'], [4, 'Jueves'], [5, 'Viernes'], [6, 'Sabado'],
              [7, 'Domingo']]
    inscritos = InscritoCongreso.objects.filter(participante__rubro__cancelado=True,
                                                participante__rubro__congreso__id__in=[18, 17, 12, 13, 11, 14, 15, 16,
                                                                                       5, 9, 7, 8],
                                                tipoparticipacion__id__in=[133, 117, 107, 121, 49, 82, 129, 62, 72, 98,
                                                                           104, 101, 69, 26, 93, 57, 51],
                                                congreso__id__in=[18, 17, 12, 13, 11, 14, 15, 16, 5, 9, 7,
                                                                  8]) | InscritoCongreso.objects.filter(
        participante__cedula__in=['0920847365', '0915063143', '0920750957', '0961344645', '1206322727', '0911398576',
                                  '0924676711', '0923505838', '0927311472', '0603303991'])
    for eInscritoCongreso in inscritos.distinct():
        print("************ PARTICIPANTE: %s" % eInscritoCongreso.__str__())
        ePersona = eInscritoCongreso.participante
        observacion = eInscritoCongreso.congreso.nombre
        fechainicio = eInscritoCongreso.congreso.fechainicio
        fechafin = eInscritoCongreso.congreso.fechafin
        fechas = [fechainicio + timedelta(days=d) for d in range((fechafin - fechainicio).days + 1)]
        for fecha in fechas:
            dia = fecha.isocalendar()[2]
            dia_verbose = None
            for d in semana:
                if d[0] == dia:
                    dia_verbose = d[1]
                    break
            profesores = Profesor.objects.filter(profesormateria__materia__nivel__periodo=ePeriodo,
                                                 profesormateria__activo=True, persona=ePersona, status=True).distinct()
            if profesores.exists():
                print(f"*************** FECHA A PROCESAR: {fecha.__str__()} - {dia_verbose}")
                for profesor in profesores:
                    print(f"****************** -> Profesor: {profesor.__str__()}")
                    # clases = Clase.objects.filter(activo=True, inicio__lte=fecha, fin__gte=fecha, dia=dia, status=True, materia__nivel__periodo_id=119, profesor_id=profesor.id).exclude()
                    clases = Clase.objects.filter(activo=True, inicio__lte=fecha, fin__gte=fecha, dia=dia, status=True,
                                                  materia__nivel__periodo=ePeriodo,
                                                  materia__nivel__periodo__visible=True,
                                                  materia__nivel__periodo__visiblehorario=True,
                                                  materia__fechafinasistencias__gte=fecha,
                                                  materia__profesormateria__profesor_id=profesor.id,
                                                  profesor_id=profesor.id,
                                                  materia__profesormateria__tipoprofesor_id__in=[10, 11, 12, 1, 5, 8, 7,
                                                                                                 2],
                                                  tipoprofesor_id__in=[10, 11, 12, 1, 5, 8, 7, 2])
                    total_clases = clases.count()
                    contC = 1
                    for cl in clases:
                        print(f"******** ({contC}/{total_clases}) -> Clase: {cl.__str__()}")
                        # if cl.materia.profesor_principal():
                        if LeccionGrupo.objects.values("id").filter(profesor=profesor, turno=cl.turno,
                                                                    fecha=fecha).exists():
                            lecciongrupo = LeccionGrupo.objects.get(profesor=profesor, turno=cl.turno, fecha=fecha)
                            lecciongrupo.abierta = False
                            lecciongrupo.save()
                        else:
                            lecciongrupo = LeccionGrupo(profesor=profesor,
                                                        turno=cl.turno,
                                                        aula=cl.aula,
                                                        dia=cl.dia,
                                                        fecha=fecha,
                                                        horaentrada=cl.turno.comienza,
                                                        horasalida=cl.turno.termina,
                                                        abierta=False,
                                                        automatica=True,
                                                        contenido=f'AUTORIZADO POR DIRECTOR TICS - {observacion}',
                                                        observaciones=f'AUTORIZADO POR DIRECTOR TICS - {observacion}')
                            lecciongrupo.save()
                        if Leccion.objects.values("id").filter(clase=cl, fecha=fecha).exists():
                            leccion = Leccion.objects.get(clase=cl, fecha=fecha)
                            leccion.abierta = False
                            leccion.save()
                        else:
                            leccion = Leccion(clase=cl,
                                              fecha=fecha,
                                              horaentrada=cl.turno.comienza,
                                              horasalida=cl.turno.termina,
                                              abierta=False,
                                              contenido=lecciongrupo.contenido,
                                              observaciones=lecciongrupo.observaciones)
                            leccion.save()
                        if not lecciongrupo.lecciones.values("id").filter(pk=leccion.id).exists():
                            lecciongrupo.lecciones.add(leccion)

                        asignados = None
                        # SE FILTRA SI LA MATERIA TIENE TIPO DE PROFESOR PRACTICA Y LA CLASE TAMBIEN
                        # 1 => CLASE PRESENCIAL
                        # 2 => CLASE VIRTUAL SINCRÓNICA
                        # 8 => CLASE REFUERZO SINCRÓNICA
                        if cl.tipoprofesor.id == 2 and cl.tipohorario in [1, 2, 8]:
                            if cl.grupoprofesor:
                                if cl.grupoprofesor.paralelopractica:
                                    # grupoprofesor_id = clase.grupoprofesor.id
                                    if cl.grupoprofesor.listado_inscritos_grupos_practicas().exists():
                                        listado_alumnos_practica = cl.grupoprofesor.listado_inscritos_grupos_practicas()
                                        if ePeriodoAcademia.valida_asistencia_pago:
                                            asignados = MateriaAsignada.objects.filter(
                                                pk__in=listado_alumnos_practica.values_list('materiaasignada_id',
                                                                                            flat=True),
                                                matricula__estado_matricula__in=[2, 3]).distinct()
                                        else:
                                            asignados = MateriaAsignada.objects.filter(
                                                pk__in=listado_alumnos_practica.values_list('materiaasignada_id',
                                                                                            flat=True)).distinct()
                                    else:
                                        raise print(u"Clase no creada, de tipo práctica no tiene alumnos. %s" % cl)

                                else:
                                    raise print(u"Clase no creada, de tipo práctica no tiene paralelos. %s" % cl)
                            else:
                                raise NameError(u"Clase no creada, de tipo práctica no tiene grupos. %s" % cl)
                        else:
                            asignados = cl.materia.asignados_a_esta_materia()

                        total_asistencias = 0
                        if AsistenciaLeccion.objects.values("id").filter(leccion=leccion).exists():
                            total_asistencias = AsistenciaLeccion.objects.filter(leccion=leccion).count()
                            for asis in AsistenciaLeccion.objects.filter(leccion=leccion):
                                if not asis.asistio:
                                    asis.asistio = True
                                    asis.save()
                                    mateasig = asis.materiaasignada
                                    mateasig.save(actualiza=True)
                                    mateasig.actualiza_estado()
                        else:
                            total_asistencias = asignados.count()
                            for materiaasignada in asignados:
                                if not AsistenciaLeccion.objects.values("id").filter(leccion=leccion,
                                                                                     materiaasignada=materiaasignada).exists():
                                    asistencialeccion = AsistenciaLeccion(leccion=leccion,
                                                                          materiaasignada=materiaasignada,
                                                                          asistio=True)
                                    asistencialeccion.save()
                                    materiaasignada.save(actualiza=True)
                                    materiaasignada.actualiza_estado()
                                # guardar temas de silabo
                        lecciongrupo.save()
                        print(f"*********** (Total Asistencia: {total_asistencias})")
                        # print(cl)
                        contC += 1


def asistencia_por_congreso_faci_software_alumnos():
    fechas = [
        (datetime(2021, 12, 7, 0, 0, 0)).date(),
        (datetime(2021, 12, 10, 0, 0, 0)).date()
    ]
    ePeriodo = Periodo.objects.get(pk=119)
    ePeriodoAcademia = ePeriodo.get_periodoacademia()

    for fecha in fechas:
        ids_p = []
        dia = (fecha.weekday() + 1)

        profesores = Profesor.objects.filter(profesormateria__materia__nivel__periodo=ePeriodo,
                                             profesormateria__activo=True,
                                             profesormateria__materia__nivel_id__in=[605, 606],
                                             profesormateria__materia_id__in=[38878, 42934]).distinct()

        # profesores = Profesor.objects.filter(profesormateria__materia__nivel__periodo=ePeriodo, profesormateria__activo=True).distinct()
        # profesores = Profesor.objects.filter(pk=903).distinct()
        total_profesores = profesores.count()
        print("*** FECHA A PROCESAR: " + fecha.__str__() + "\r")
        contP = 1
        for profesor in profesores:
            print(f"***** ({contP}/{total_profesores}) -> Profesor: {profesor.__str__()}")
            # clases = Clase.objects.filter(activo=True, inicio__lte=fecha, fin__gte=fecha, dia=dia, status=True, materia__nivel__periodo_id=119, profesor_id=profesor.id).exclude()
            clases = Clase.objects.filter(activo=True, inicio__lte=fecha, fin__gte=fecha, dia=dia, status=True,
                                          materia__nivel__periodo=ePeriodo,
                                          materia__nivel__periodo__visible=True,
                                          materia__nivel__periodo__visiblehorario=True,
                                          materia__fechafinasistencias__gte=fecha,
                                          materia__profesormateria__profesor_id=profesor.id,
                                          profesor_id=profesor.id,
                                          materia__profesormateria__tipoprofesor_id__in=[10, 11, 12, 1, 5, 8, 7, 2],
                                          tipoprofesor_id__in=[10, 11, 12, 1, 5, 8, 7, 2],
                                          materia__nivel_id__in=[605, 606],
                                          materia_id__in=[38878, 42934])
            # clases = clases.filter(turno__comienza__gte=time(18, 0, 0), turno__termina__lte=time(21, 59, 00))
            total_clases = clases.count()
            contC = 1
            for cl in clases:
                print(f"******** ({contC}/{total_clases}) -> Clase: {cl.__str__()}")
                lecciongrupo = None
                if LeccionGrupo.objects.values("id").filter(profesor=profesor, turno=cl.turno, fecha=fecha).exists():
                    lecciongrupo = LeccionGrupo.objects.get(profesor=profesor, turno=cl.turno, fecha=fecha)
                    lecciongrupo.abierta = False
                    lecciongrupo.save()
                else:
                    lecciongrupo = LeccionGrupo(profesor=profesor,
                                                turno=cl.turno,
                                                aula=cl.aula,
                                                dia=cl.dia,
                                                fecha=fecha,
                                                horaentrada=cl.turno.comienza,
                                                horasalida=cl.turno.termina,
                                                abierta=False,
                                                automatica=True,
                                                contenido='REGISTRO MASIVO 2021 - AUTORIZADO POR DIRECTOR TICS - FERIA VIRTUAL Y CONGRESO',
                                                observaciones='REGISTRO MASIVO 2021 - AUTORIZADO POR DIRECTOR TICS - FERIA VIRTUAL Y CONGRESO')
                    lecciongrupo.save()
                if lecciongrupo:
                    leccion = None
                    if Leccion.objects.values("id").filter(clase=cl, fecha=fecha).exists():
                        leccion = Leccion.objects.get(clase=cl, fecha=fecha)
                        leccion.abierta = False
                        leccion.save()
                    else:
                        leccion = Leccion(clase=cl,
                                          fecha=fecha,
                                          horaentrada=cl.turno.comienza,
                                          horasalida=cl.turno.termina,
                                          abierta=False,
                                          contenido=lecciongrupo.contenido,
                                          observaciones=lecciongrupo.observaciones)
                        leccion.save()
                    if leccion:
                        if not lecciongrupo.lecciones.values("id").filter(pk=leccion.id).exists():
                            lecciongrupo.lecciones.add(leccion)

                        asignados = None
                        # SE FILTRA SI LA MATERIA TIENE TIPO DE PROFESOR PRACTICA Y LA CLASE TAMBIEN
                        # 1 => CLASE PRESENCIAL
                        # 2 => CLASE VIRTUAL SINCRÓNICA
                        # 8 => CLASE REFUERZO SINCRÓNICA
                        if cl.tipoprofesor.id == 2 and cl.tipohorario in [1, 2, 8]:
                            if cl.grupoprofesor:
                                if cl.grupoprofesor.paralelopractica:
                                    # grupoprofesor_id = clase.grupoprofesor.id
                                    if cl.grupoprofesor.listado_inscritos_grupos_practicas().exists():
                                        listado_alumnos_practica = cl.grupoprofesor.listado_inscritos_grupos_practicas()
                                        if ePeriodoAcademia.valida_asistencia_pago:
                                            asignados = MateriaAsignada.objects.filter(
                                                pk__in=listado_alumnos_practica.values_list('materiaasignada_id',
                                                                                            flat=True),
                                                matricula__estado_matricula__in=[2, 3]).distinct()
                                        else:
                                            asignados = MateriaAsignada.objects.filter(
                                                pk__in=listado_alumnos_practica.values_list('materiaasignada_id',
                                                                                            flat=True)).distinct()
                                    else:
                                        raise print(u"Clase no creada, de tipo práctica no tiene alumnos. %s" % cl)

                                else:
                                    raise print(u"Clase no creada, de tipo práctica no tiene paralelos. %s" % cl)
                            else:
                                raise NameError(u"Clase no creada, de tipo práctica no tiene grupos. %s" % cl)
                        else:
                            asignados = cl.materia.asignados_a_esta_materia()

                        total_asistencias = 0
                        if AsistenciaLeccion.objects.values("id").filter(leccion=leccion).exists():
                            total_asistencias = AsistenciaLeccion.objects.filter(leccion=leccion).count()
                            for asis in AsistenciaLeccion.objects.filter(leccion=leccion):
                                if not asis.asistio:
                                    asis.asistio = True
                                    asis.save()
                                    mateasig = asis.materiaasignada
                                    mateasig.save(actualiza=True)
                                    # mateasig.actualiza_estado()
                        else:
                            total_asistencias = asignados.count()
                            for materiaasignada in asignados:
                                if not AsistenciaLeccion.objects.values("id").filter(leccion=leccion,
                                                                                     materiaasignada=materiaasignada).exists():
                                    asistencialeccion = AsistenciaLeccion(leccion=leccion,
                                                                          materiaasignada=materiaasignada,
                                                                          asistio=True)
                                    asistencialeccion.save()
                                    materiaasignada.save(actualiza=True)
                                    # materiaasignada.actualiza_estado()
                                # guardar temas de silabo
                        lecciongrupo.save()
                        print(f"*********** (Total Asistencia: {total_asistencias})")
                # print(cl)
                contC += 1

            contP += 1


def perfil_defecto(periodo_id=119):
    matriculas = Matricula.objects.filter(nivel__periodo_id=periodo_id)
    print(f"Matriculas total: {matriculas.count()}")
    perfiles = PerfilUsuario.objects.filter(persona_id__in=matriculas.values_list("inscripcion__persona__id"))
    perfiles.update(inscripcionprincipal=False)
    perfiles = perfiles.filter(inscripcion__in=matriculas.values_list("inscripcion__id"))
    perfiles.update(inscripcionprincipal=True)
    print(f"Perfiles modificado total: {perfiles.count()}")


# perfil_defecto(periodo_id=119)


def reajuste_modulo_ingles_epunemi(periodo_id=119):
    niveles = Nivel.objects.filter(periodo_id=periodo_id)
    niveles = niveles.filter(
        pk__in=NivelLibreCoordinacion.objects.values_list("nivel_id", flat=True).filter(nivel__in=niveles,
                                                                                        coordinacion_id=6))
    materias = Materia.objects.filter(nivel__in=niveles, status=True, inicio__gte=datetime(2022, 1, 13),
                                      fin__lte=datetime(2022, 12, 9))
    print(f"Total de materias: {materias.count()}")
    for materia in materias:
        print(f"*** Materia: {materia.__str__()}")
        materia.inglesepunemi = True
        materia.save()
        materiaasignadas = materia.asignados_a_esta_materia().filter(cerrado=True)
        print(f"****** Total de matriculados: {materiaasignadas.count()}")
        for materiaasignada in materiaasignadas:
            if HistoricoRecordAcademico.objects.filter(inscripcion=materiaasignada.matricula.inscripcion,
                                                       materiaregular=materia).exists():
                historicorecord = \
                    HistoricoRecordAcademico.objects.filter(inscripcion=materiaasignada.matricula.inscripcion,
                                                            materiaregular=materia)[0]
                bandera = 0
                if historicorecord.fecha_creacion and not historicorecord.fecha_modificacion and historicorecord.fecha == materia.fin:
                    historicorecord.fecha = historicorecord.fecha_creacion
                    bandera = 1
                elif historicorecord.fecha_creacion and historicorecord.fecha_modificacion and historicorecord.fecha == materia.fin:
                    historicorecord.fecha = historicorecord.fecha_modificacion
                    bandera = 1
                if bandera == 1:
                    historicorecord.save()
                    historicorecord.actualizar()
                    print(
                        f"********* Alumno: {materiaasignada.matricula.inscripcion.__str__()} se actualizo fecha en record académico")


def actualizar_asistencia(ePeriodo, materia_id=None):
    matriculas = Matricula.objects.filter(status=True, nivel__periodo=ePeriodo, cerrada=False, retiradomatricula=False,
                                          materiaasignada__sinasistencia=False)
    if DEBUG:
        matriculas = matriculas.filter(materiaasignada__materia_id=44642)
    elif materia_id:
        matriculas = matriculas.filter(materiaasignada__materia_id=materia_id)
    print(f"Total de matriculados: {matriculas.count()}")
    contador = 1
    for matricula in matriculas:
        print(f"*** ({matriculas.count()}/{contador}) Alumno: {matricula.__str__()}")
        materiaasignadas = MateriaAsignada.objects.filter(matricula=matricula, status=True, cerrado=False, estado_id=3)
        if DEBUG:
            materiaasignadas = materiaasignadas.filter(materia_id=44642)
        elif materia_id:
            materiaasignadas = materiaasignadas.filter(materia_id=materia_id)
        print(f"****** Total de materias: {materiaasignadas.count()}")
        for materiaasignada in materiaasignadas:
            materiaasignada.save(actualiza=True)
            materiaasignada.actualiza_estado()
            print(f"********* Materia : {materiaasignada.__str__()} ACTUALIZADA")
        contador += 1


def ejecutar_beca(periodo_actual_id, periodo_anterior_id, generar_presolicitudes=False):
    periodo = Periodo.objects.get(pk=periodo_actual_id)
    if not DEBUG:
        crear_tarjeta_academica(periodo)
    inscripcion_id = None
    if DEBUG:
        inscripcion_id = 104493
        # inscripcion_id = None
        eliminar_solicitudes_becas(periodo, inscripcion_id=inscripcion_id)
    periodovalida = Periodo.objects.get(pk=periodo_anterior_id)
    if generar_presolicitudes:
        generar_presolicitudes_becas(periodo=periodo, anterior=periodovalida)
    crear_solicitudes_becas(periodo=periodo, periodovalida=periodovalida, enviarcorreo=False)
    estado_representante_solidario(periodo=periodo)


def eliminar_solicitud_asistencia_estudiante(id):
    SolicitudJustificacionAsistencia.objects.get(pk=id).delete()


# ejecutar_beca(119, 113)

# print(f"INICIA PROCESO DE REAJUSTE DE MODULOS DE INGLES")
# reajuste_modulo_ingles_epunemi(119)
# print(f"***********************************************")
# print(f"INICIA ELIMINAR SOLICITUD DE ASISTENCIA ESTUDIANTE")
# eliminar_solicitud_asistencia_estudiante(231)


def ajuste_max_horas_matriculacion_malla_pregrado():
    mallas = Malla.objects.filter(carrera__coordinacion__id__in=[1, 2, 3, 4, 5])
    mallas_presencial_semipresencial = mallas.filter(modalidad_id__in=[1, 2]).exclude(
        carrera__coordinacion__id=1)  # SE EXCLUDE SALUD
    mallas_presencial_semipresencial.update(maxhoras_contactodocente_matricula=20, maxhoras_semanal_matricula=45)
    mallas_tecnologia_en_linea = mallas.filter(pk=202)  # SOLO TECNOLOGIA EN LINEA
    mallas_tecnologia_en_linea.update(maxhoras_contactodocente_matricula=20, maxhoras_semanal_matricula=45)
    mallas_en_linea = mallas.filter(modalidad_id__in=[3]).exclude(
        Q(carrera__coordinacion__id=1) | Q(pk=202))  # SE EXCLUDE SALUD Y TECNOLOGIA EN LINEA
    mallas_en_linea.update(maxhoras_contactodocente_matricula=40, maxhoras_semanal_matricula=55)
    mallas_salud = mallas.filter(carrera__coordinacion__id__in=[1])  # SOLO SALUD
    mallas_salud.update(maxhoras_contactodocente_matricula=40, maxhoras_semanal_matricula=60)


def demo_unidad_integracion_curricular():
    from bd.models import FuncionRequisitoIngresoUnidadIntegracionCurricular
    from inno.models import RequisitoIngresoUnidadIntegracionCurricular
    eRequisitos = RequisitoIngresoUnidadIntegracionCurricular.objects.filter(malla_id=218)
    for eRequisito in eRequisitos:
        eRequisito.run(1)


def demo_iti():
    def mi_itinerario_record(eInscripcion):
        malla = eInscripcion.mi_malla()
        if malla is None:
            return 0
        asignaturas = malla.asignaturamalla_set.filter(status=True, itinerario__gt=0).distinct()
        if not asignaturas.values("id").exists():
            return 0
        record = eInscripcion.recordacademico_set.filter(status=True, asignaturamalla_id__in=asignaturas.values("id"))
        if not record.values("id").exists():
            return 0
        itinerarios = record.values_list('asignaturamalla__itinerario', flat=True).distinct()
        if len(itinerarios) == 1:
            return itinerarios[0]
        else:
            itinerarios_aprobadas = record.values_list('asignaturamalla__itinerario', flat=True).filter(
                aprobada=True).distinct()
            if itinerarios_aprobadas.exists():
                return itinerarios_aprobadas[0]
            else:
                itinerarios_reprobadas = record.values_list('asignaturamalla__itinerario', flat=True).filter(
                    aprobada=False).distinct()
                if itinerarios_reprobadas.exists():
                    return itinerarios_reprobadas[0]
        return 0

    from sga.models import Inscripcion
    eInscripcion = Inscripcion.objects.get(pk=74716)
    mi_itinerario_record(eInscripcion)


def ajuste_rubros():
    def calculos_finanzas(eMatricula, cobro):
        # costo de matricula carlos loyola 03-03-2017
        from sagest.models import TipoOtroRubro, Rubro
        from inno.models import PeriodoMalla, DetallePeriodoMalla
        from django.db import transaction
        from django.http import JsonResponse
        persona = eMatricula.inscripcion.persona
        periodo = eMatricula.nivel.periodo

        if not eMatricula.inscripcion.persona.fichasocioeconomicainec_set.all().exists():
            raise NameError(u"No puede matricularse, debe llenar la ficha socioeconomica")

        matriculagruposocioeconomico = eMatricula.matriculagruposocioeconomico_set.filter(status=True)

        if matriculagruposocioeconomico.values("id").exists():
            gruposocioeconomico = matriculagruposocioeconomico[0].gruposocioeconomico
        else:
            gruposocioeconomico = eMatricula.inscripcion.persona.grupoeconomico()

        valorgrupoeconomico = 0
        if periodo.tipocalculo == 1:
            periodogruposocioeconomico = gruposocioeconomico.periodogruposocioeconomico_set.filter(periodo=periodo,
                                                                                                   status=True)
            if not periodogruposocioeconomico.values("id").exists():
                raise NameError(u"Grupo socioeconomico no tiene configurado valores de créditos")
            valorgrupoeconomico = periodogruposocioeconomico[0].valor
        else:
            malla = eMatricula.inscripcion.mi_malla()
            if malla is None:
                raise NameError(u"Malla sin configurar")
            periodomalla = PeriodoMalla.objects.filter(periodo=periodo, malla=malla, status=True)
            if not periodomalla.values("id").exists():
                raise NameError(u"Malla no tiene configurado valores de cobro")
            periodomalla = periodomalla[0]
            detalleperiodomalla = DetallePeriodoMalla.objects.filter(periodomalla=periodomalla,
                                                                     gruposocioeconomico=gruposocioeconomico,
                                                                     status=True)
            if not detalleperiodomalla.values("id").exists():
                raise NameError(u"Malla en grupo socioeconomico no tiene configurado valores de cobro")
            valorgrupoeconomico = detalleperiodomalla[0].valor
        porcentaje_gratuidad = periodo.porcentaje_gratuidad
        valor_maximo = periodo.valor_maximo
        costo_materia_total = 0
        tiporubroarancel = TipoOtroRubro.objects.filter(pk=RUBRO_ARANCEL)[0]
        tiporubromatricula = TipoOtroRubro.objects.filter(pk=RUBRO_MATRICULA)[0]
        fecha_vence = datetime.now().date() + timedelta(days=1)
        if eMatricula.nivel.fechatopematriculaes:
            fecha_vence = eMatricula.nivel.fechatopematriculaes + timedelta(days=1)
        if cobro > 0:
            for materiaasignada in eMatricula.materiaasignada_set.filter(status=True, retiramateria=False):
                costo_materia = 0
                creditos_para_cobro = materiaasignada.materia.creditos
                if materiaasignada.existe_modulo_en_malla():
                    creditos_para_cobro = materiaasignada.materia_modulo_malla().creditos
                if cobro == 1:
                    costo_materia = Decimal(
                        Decimal(creditos_para_cobro).quantize(Decimal('.01')) * valorgrupoeconomico).quantize(
                        Decimal('.01'))
                else:
                    if cobro == 2:
                        if materiaasignada.matriculas > 1:
                            costo_materia = Decimal(
                                Decimal(creditos_para_cobro).quantize(Decimal('.01')) * valorgrupoeconomico).quantize(
                                Decimal('.01'))
                    else:
                        costo_materia = Decimal(
                            Decimal(creditos_para_cobro).quantize(Decimal('.01')) * valorgrupoeconomico).quantize(
                            Decimal('.01'))
                costo_materia_total += costo_materia
        eRubroArancel = None
        if costo_materia_total > 0:
            eRubroArancel = Rubro(tipo=tiporubroarancel,
                                  persona=persona,
                                  relacionados=None,
                                  matricula=eMatricula,
                                  nombre=tiporubroarancel.nombre + ' - ' + periodo.nombre,
                                  cuota=1,
                                  fecha=datetime.now().date(),
                                  fechavence=fecha_vence,
                                  valor=costo_materia_total,
                                  iva_id=1,
                                  valoriva=0,
                                  valortotal=costo_materia_total,
                                  saldo=costo_materia_total,
                                  cancelado=False)
            eRubroArancel.save(usuario_id=ADMINISTRADOR_ID)
        valormatricula = 0
        valormulta = 0
        # MATRICULA NO ORDINARIA
        if eMatricula.tipomatricula_id != 1:
            valormulta = Decimal((valor_maximo * PORCENTAJE_MULTA) / 100).quantize(Decimal('.01'))
            valormatricula = valor_maximo + valormulta
        else:
            if costo_materia_total > 0:
                valormatricula = valor_maximo + valormulta

        if valormatricula > 0:
            eRubroMatricula = Rubro(tipo=tiporubromatricula,
                                    persona=persona,
                                    relacionados=eRubroArancel,
                                    matricula=eMatricula,
                                    nombre=tiporubromatricula.nombre + ' - ' + periodo.nombre,
                                    cuota=1,
                                    fecha=datetime.now().date(),
                                    fechavence=fecha_vence,
                                    valor=valormatricula,
                                    iva_id=1,
                                    valoriva=0,
                                    valortotal=valormatricula,
                                    saldo=valormatricula,
                                    cancelado=False)
            eRubroMatricula.save(usuario_id=ADMINISTRADOR_ID)
            eMatricula.estado_matricula = 3
        else:
            eMatricula.estado_matricula = 2

        eMatricula.save(usuario_id=ADMINISTRADOR_ID)

    fecha = datetime(2022, 5, 9, 0, 0, 0)
    periodo_id = 126
    # exclude = Matricula.objects.filter(nivel__periodo_id=periodo_id, inscripcion_id__in=[56526, 22640, 56486])
    eMatriculas = Matricula.objects.filter(nivel__periodo_id=periodo_id, fecha_creacion__gte=fecha)
    print(f"Total: {len(eMatriculas.values('id'))}")
    for eMatricula in eMatriculas:
        with transaction.atomic():
            try:
                if eMatricula.inscripcion.coordinacion_id != 9 and eMatricula.inscripcion.coordinacion_id != 7:
                    cantidad_seleccionadas = 0
                    cursor = connections['default'].cursor()
                    sql = "select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and " \
                          "ma.matricula_id=" + str(
                        eMatricula.id) + " and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
                    cursor.execute(sql)
                    results = cursor.fetchall()
                    nivel = 0
                    for per in results:
                        nivel = per[0]
                        cantidad_seleccionadas = per[1]
                    cantidad_nivel = 0

                    for asignaturamalla in AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True,
                                                                          malla=eMatricula.inscripcion.mi_malla()):
                        if Materia.objects.filter(nivel__periodo=eMatricula.nivel.periodo,
                                                  asignaturamalla=asignaturamalla).exists():
                            if eMatricula.inscripcion.estado_asignatura(asignaturamalla.asignatura) != 1:
                                cantidad_nivel += 1

                    porcentaje_seleccionadas = int(round(
                        Decimal((float(cantidad_nivel) * float(PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD)) / 100).quantize(
                            Decimal('.00')), 0))
                    cobro = 0
                    if eMatricula.inscripcion.estado_gratuidad == 1 or eMatricula.inscripcion.estado_gratuidad == 2:
                        if (cantidad_seleccionadas < porcentaje_seleccionadas):
                            cobro = 1
                        else:
                            cobro = 2
                    else:
                        if eMatricula.inscripcion.estado_gratuidad == 2:
                            cobro = 2
                        else:
                            cobro = 3

                    if eMatricula.inscripcion.persona.tiene_otro_titulo(inscripcion=eMatricula.inscripcion):
                        cobro = 3

                    # cobro = 3 # BORRAR SOLO ES PARA PROBAR TITULO - SOLO SE HABILITA PARA PRUEBAS OJOOOO

                    eMatricula.elimina_rubro_matricula()
                    calculos_finanzas(eMatricula, cobro)
                    eMatricula.actualiza_matricula()
                    print(f"Matrícula: {eMatricula.inscripcion.persona.__str__()}")
            except Exception as ex:
                transaction.set_rollback(True)
                print(f"Error: {ex.__str__()}")


def ajuste_clases_sincronicas_asincronicas(ePeriodo):
    print(f"Inicia proceso de ajustar clases sincronicas y asincronicas del periodo: {ePeriodo.__str__()}")
    """
        TIPOHORARIO = (
            (1, u'PRESENCIAL'),
            (2, u'CLASE VIRTUAL SINCRÓNICA'),
            (3, u'CHAT'),
            (4, u'FORO'),
            (6, u'OTRO'),
            (7, u'CLASE VIRTUAL ASINCRÓNICA'),
            (8, u'CLASE REFUERZO SINCRÓNICA'),
            (9, u'CLASE REFUERZO ASINCRÓNICA'),
        )
    """
    eClasesT = Clase.objects.filter(status=True, materia__status=True, materia__asignaturamalla__malla__modalidad_id=3,
                                    tipohorario__in=[2, 7])
    print(f"-- Total de Clases afectar: {len(eClasesT)}")
    eMaterias = Materia.objects.filter(pk__in=eClasesT.values("materia_id").distinct()).distinct()
    print(f"-- Total de Materias afectar: {len(eMaterias)}")
    contMa = 0
    for eMateria in eMaterias:
        contMa += 1
        print(f"-- ** ({len(eMaterias)}/{contMa}) Materia: {eMateria.__str__()}")
        contador = 0
        eClases = eClasesT.filter(materia=eMateria).order_by('dia', 'turno__comienza')
        eClases.update(tipohorario=2)
        if len(eClases) > 1:
            for eClase in eClases:
                if contador == 0:
                    eClase.tipohorario = 7
                    eClase.save()
                    break
                contador += 1
        print(f"-- ** Número de clases ({len(eClases)}) ajustadas de la Materia: {eMateria.__str__()}")


def cambiar_fecha_rubros(ePeriodo, fecha):
    eRubros = Rubro.objects.filter(matricula__nivel__periodo=ePeriodo, matricula__status=True, status=True)
    eRubros = eRubros.filter(tipo_id__in=[2924, 2923], fecha__gte=datetime(2022, 5, 1, 0, 0, 0).date(),
                             fechavence__lte=datetime(2022, 5, 30, 0, 0, 0).date(), cancelado=False)
    print(len(eRubros))
    # eRubros_Arancel = eRubros.filter(tipo_id=2923, fecha__gte=datetime(2022, 5, 1, 0, 0, 0).date(), fechavence__lte=datetime(2022, 5, 30, 0, 0, 0).date(), cancelado=False)


def eliminar_lecciongrupos(ePeriodos):
    eLeccionGrupos = LeccionGrupo.objects.filter(
        lecciones__clase__materia__nivel__periodo_id__in=ePeriodos.values_list("id", flat=True)).distinct()
    total = len(eLeccionGrupos)
    print(f"Se procedera a eliminar lecciones grupos:{total}")
    tt = 0
    for eLeccionGrupo in eLeccionGrupos:
        tt += 1
        print(f"({tt}/{total})LeccionGrupo: {eLeccionGrupo.__str__()}")
        elimina = False
        with transaction.atomic():
            try:
                countleccion = 0
                eLecciones = eLeccionGrupo.mis_leciones()
                totalLeccion = len(eLecciones)
                for eLeccion in eLecciones:
                    countleccion += 1
                    print(f"({countleccion}/{totalLeccion}) Lección: {eLeccion}")
                    eLeccion.delete()
                    elimina = True
            except Exception as ex:
                transaction.set_rollback(True)
                print(f"Error: {ex.__str__()}")
                elimina = False
        if elimina:
            print(f"Elimino LeccionGrupo: {eLeccionGrupo.__str__()}")
            eLeccionGrupo.delete()


def notificar_credenciales_admision(ePeriodo):
    print(f"Inicia proceso de notificación de credenciales para el periodo académico {ePeriodo.__str__()}")
    eMatriculas = Matricula.objects.filter(status=True, nivel__periodo=ePeriodo)
    eMatriculas.update(notificadoadmision=False)
    if DEBUG:
        eMatriculas = eMatriculas[0:1]
    total = len(eMatriculas)
    contador = 0
    for eMatricula in eMatriculas:
        contador += 1
        ePersona = eMatricula.inscripcion.persona
        lista = []
        if ePersona.email:
            with transaction.atomic():
                try:
                    if DEBUG:
                        lista.append("crodriguezn@unemi.edu.ec")
                    else:
                        lista.append(ePersona.email)
                    send_html_mail("[IMPORTANTE] UNEMI - Credenciales de acceso al Sistema de Gestión Académica",
                                   "emails/email_notificacion_credenciales_admision.html",
                                   {
                                       'sistema': u'Sistema de Gestión Académica',
                                       'fecha': datetime.now().date(),
                                       'hora': datetime.now().time(),
                                       'persona': ePersona,
                                       't': miinstitucion()
                                   },
                                   lista,
                                   [],
                                   cuenta=CUENTAS_CORREOS[0][1])
                    print(
                        f"{contador}/{total} -> Correo enviado ({ePersona.email}) +++++ Persona: {ePersona.__str__()} ")
                    eMatricula.notificadoadmision = True
                    eMatricula.save()
                    time.sleep(2)
                except Exception as ex:
                    transaction.set_rollback(True)
                    print(f"Ocurrio un error en el envio del correo de la persona: {ePersona.__str__()}")
        else:
            print(f"{contador}/{total} -> No tiene correo la persona {ePersona.__str__()}")
    print(f"Finalizo proceso de notificación de credenciales para el periodo académico {ePeriodo.__str__()}")


def calendario_actividades():
    import calendar
    calendario = calendar.Calendar()
    fecha = datetime.now().date()
    numerosemana = fecha.isocalendar()[1]
    aCalendario = []
    for semanas in calendario.monthdatescalendar(fecha.year, fecha.month):
        dia = 0
        aSemana = []
        for f in semanas:
            dia += 1
            aSemana.append([{"dia": dia, "fecha": f.__str__()}])
        aCalendario.append(aSemana)
    print(aCalendario)


def duplicar_horario_examen():
    eHorarioExamenes = HorarioExamen.objects.filter(materia__nivel__periodo_id=126, status=True, detallemodelo_id=37)
    print(f"Se elimino registro de horario de examen {len(eHorarioExamenes)}")
    eHorarioExamenes.delete()
    fechas = [
        [(datetime(2022, 7, 18, 0, 0, 0)).date(), (datetime(2022, 9, 19, 0, 0, 0)).date()],
        [(datetime(2022, 7, 19, 0, 0, 0)).date(), (datetime(2022, 9, 20, 0, 0, 0)).date()],
        [(datetime(2022, 7, 20, 0, 0, 0)).date(), (datetime(2022, 9, 21, 0, 0, 0)).date()],
        [(datetime(2022, 7, 21, 0, 0, 0)).date(), (datetime(2022, 9, 22, 0, 0, 0)).date()],
        [(datetime(2022, 7, 22, 0, 0, 0)).date(), (datetime(2022, 9, 23, 0, 0, 0)).date()],
        [(datetime(2022, 7, 23, 0, 0, 0)).date(), (datetime(2022, 9, 24, 0, 0, 0)).date()],
        [(datetime(2022, 7, 25, 0, 0, 0)).date(), (datetime(2022, 9, 26, 0, 0, 0)).date()],
        [(datetime(2022, 7, 26, 0, 0, 0)).date(), (datetime(2022, 9, 27, 0, 0, 0)).date()],
        [(datetime(2022, 7, 27, 0, 0, 0)).date(), (datetime(2022, 9, 28, 0, 0, 0)).date()],
        [(datetime(2022, 7, 28, 0, 0, 0)).date(), (datetime(2022, 9, 29, 0, 0, 0)).date()],
        [(datetime(2022, 7, 29, 0, 0, 0)).date(), (datetime(2022, 9, 30, 0, 0, 0)).date()],
        [(datetime(2022, 7, 30, 0, 0, 0)).date(), (datetime(2022, 10, 1, 0, 0, 0)).date()],
    ]
    eMaterias = Materia.objects.filter(status=True, nivel__periodo_id=126,
                                       asignaturamalla__malla__modalidad_id__in=[1, 2])
    numMaterias = len(eMaterias)
    contMateria = 0
    print(f"Num materias {numMaterias}")
    print(f"*************************************************************************************************")
    for eMateria in eMaterias:
        contMateria += 1
        print(f"*************************************************************************************************")
        print(f"({numMaterias}/{contMateria}) -> Materia >>>>{eMateria}")
        eHorarioExamenes = HorarioExamen.objects.filter(materia=eMateria, status=True, detallemodelo_id=33)
        for eHorarioExamen in eHorarioExamenes:
            # eHorarioExamen_aux = eHorarioExamen
            for fecha in fechas:
                fechaex1 = fecha[0]
                fechaex2 = fecha[1]
                if eHorarioExamen.fecha == fechaex1:
                    newHorarioExamen = HorarioExamen(materia=eMateria,
                                                     fecha=fechaex2,
                                                     detallemodelo_id=37,
                                                     )
                    newHorarioExamen.save()
                    print(f"************SE CREO REGISTRO DE FECHA >>>>{newHorarioExamen.fecha}")
                    newHorarioExamenDetalle = None
                    for eHorarioExamenDetalle in HorarioExamenDetalle.objects.filter(horarioexamen=eHorarioExamen,
                                                                                     status=True):
                        newHorarioExamenDetalle = HorarioExamenDetalle(horarioexamen=newHorarioExamen,
                                                                       tipogrupo=eHorarioExamenDetalle.tipogrupo,
                                                                       horainicio=eHorarioExamenDetalle.horainicio,
                                                                       horafin=eHorarioExamenDetalle.horafin,
                                                                       cantalumnos=eHorarioExamenDetalle.cantalumnos,
                                                                       aula=eHorarioExamenDetalle.aula,
                                                                       tiporesponsable=eHorarioExamenDetalle.tiporesponsable,
                                                                       profesormateria=eHorarioExamenDetalle.profesormateria,
                                                                       profesor=eHorarioExamenDetalle.profesor,
                                                                       administrativo=eHorarioExamenDetalle.administrativo,
                                                                       validahorario=eHorarioExamenDetalle.validahorario,
                                                                       )
                        newHorarioExamenDetalle.save()
                        print(
                            f"************SE CREO DETALLE REGISTRO DE FECHA >>>>{newHorarioExamen.fecha} - {newHorarioExamenDetalle}")

                    eHorarios = HorarioExamenDetalle.objects.filter(horarioexamen__materia=eMateria, status=True,
                                                                    horarioexamen__status=True,
                                                                    horarioexamen__detallemodelo_id=37).distinct().order_by(
                        'horainicio')
                    eAlumnos = MateriaAsignada.objects.filter(status=True, retiramateria=False, materia=eMateria,
                                                              matricula__retiradomatricula=False,
                                                              matricula__status=True).order_by(
                        'matricula__inscripcion__persona__apellido1', 'matricula__inscripcion__persona__apellido2',
                        'matricula__inscripcion__persona__nombres')
                    eAsignados = HorarioExamenDetalleAlumno.objects.filter(horarioexamendetalle__in=eHorarios,
                                                                           status=True, materiaasignada__in=eAlumnos)
                    if eAsignados.values("id").exists():
                        eAsignados.delete()
                    for eHorario in eHorarios:
                        eAsignados = HorarioExamenDetalleAlumno.objects.filter(horarioexamendetalle__in=eHorarios,
                                                                               status=True,
                                                                               materiaasignada__in=eAlumnos)
                        cantidad = eHorario.cantalumnos
                        inicial = 0
                        ultimo = cantidad
                        for eAlumno in eAlumnos.exclude(pk__in=eAsignados.values_list('materiaasignada_id', flat=True))[
                                       inicial:ultimo]:
                            eHorarioExamenDetalleAlumno = HorarioExamenDetalleAlumno(materiaasignada=eAlumno,
                                                                                     horarioexamendetalle=eHorario)
                            eHorarioExamenDetalleAlumno.save()
                        print(
                            f"************SE AGREGO ALUMNOS AL DETALLE REGISTRO DE FECHA >>>>{eHorario.horarioexamen.fecha} - {eHorario}")


def descarga_resultado_encuesta(id, nombre_archivo):
    response = HttpResponse(content_type="application/ms-excel")
    response['Content-Disposition'] = f'attachment; filename={nombre_archivo}.xls'
    style0 = easyxf('font: name Times New Roman, color-index blue, bold off', num_format_str='#,##0.00')
    style_nb = easyxf('font: name Times New Roman, color-index blue, bold on', num_format_str='#,##0.00')
    style_sb = easyxf('font: name Times New Roman, color-index blue, bold on')
    title = easyxf('font: name Times New Roman, color-index blue, bold on , height 350; alignment: horiz centre')
    style1 = easyxf(num_format_str='D-MMM-YY')
    font_style = XFStyle()
    font_style.font.bold = True
    font_style2 = XFStyle()
    font_style2.font.bold = False
    wb = xlwt.Workbook()
    ws = wb.add_sheet('Sheetname')
    estilo = xlwt.easyxf(
        'font: height 350, name Arial, colour_index black, bold on, italic on; align: wrap on, vert centre, horiz center;')
    ws.write_merge(0, 0, 0, 9, 'UNIVERSIDAD ESTATAL DE MILAGRO', estilo)
    output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'reportes', 'encuestas'))
    try:
        os.stat(output_folder)
    except:
        os.mkdir(output_folder)
    nombre = nombre_archivo + "_" + datetime.now().strftime('%Y%m%d_%H%M%S') + ".xls"
    filename = os.path.join(output_folder, nombre)
    encuesta = EncuestaGrupoEstudiantes.objects.get(id=id)
    ePersona = Persona.objects.get(pk=10730)
    # usernotify = ePersona.usuario
    # eNotificacion = Notificacion(cuerpo='Generación de reporte de excel en progreso',
    #                              titulo=f'Resultados de Encuesta ID: {id}',
    #                              destinatario=ePersona,
    #                              url='',
    #                              prioridad=1,
    #                              app_label='SGA',
    #                              fecha_hora_visible=datetime.now() + timedelta(days=1),
    #                              tipo=2,
    #                              en_proceso=True)
    # eNotificacion.save()
    preguntas = encuesta.preguntaencuestagrupoestudiantes_set.filter(status=True).order_by('orden')
    columns = [(u"Nº.", 2000),
               (u"ID", 2000),
               (u"RESPONDIO", 3000),
               (u"CÉDULA", 3000),
               (u"ENCUESTADO", 9000),
               ]

    if encuesta.tipoperfil == 1:  # ALUMNO
        columns.append((u'CARRERA', 9000), )
        # solo para encuesta con y sin discapacidad
        if encuesta.id == 20 or encuesta.id == 21 or encuesta.id == 22 or encuesta.id == 23:  # encuestas
            columns.append((u'TIENE DISCAPACIDAD', 3000), )
        # fin

    if encuesta.tipoperfil == 2:  # DOCENTE
        columns.append((u'Tipo de relación laboral', 9000), )
        columns.append((u'Tiempo de dedicación', 9000), )
        columns.append((u'Si es docente titular a qué categoría académica pertenece', 9000), )
        # columns.append((u'MODALIDAD CONTRATACIÓN', 9000), )
        columns.append((u'A qué Facultad pertenece', 9000), )
        columns.append((u'Las carreras en las que imparte docencia actualmente ¿De qué modalidad son? ', 9000), )
        # columns.append((u'MODALIDAD DE LA CARRERA QUE DESEARÍA TRABAJAR EN EL SEMESTRE 1S 2022', 9000), )

    if encuesta.tipoperfil == 3:  # ADMINISTRATIVO
        columns.append((u'Tipo de relación laboral', 9000), )
        columns.append((u'Denominación del puesto', 9000), )

    for x in preguntas:
        columns.append((str(x.orden) + ") " + x.descripcion, 6000), )
        if x.tipo == 1:
            if not x.esta_vacia():
                columns.append((str(x.orden) + ") " + x.observacionporno, 6000), )
    row_num = 3
    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num][0], font_style)
        ws.col(col_num).width = columns[col_num][1]
    row_num = 4
    i = 0
    datos = []
    if encuesta.tipoperfil == 1:  # ALUMNO
        datos = encuesta.inscripcionencuestagrupoestudiantes_set.filter(status=True).order_by(
            'inscripcion__persona__apellido1')
    if encuesta.tipoperfil == 2:  # DOCENTE
        datos = encuesta.inscripcionencuestagrupoestudiantes_set.filter(status=True).order_by(
            'profesor__persona__apellido1')
    if encuesta.tipoperfil == 3:  # ADMINISTRATIVO
        datos = encuesta.inscripcionencuestagrupoestudiantes_set.filter(status=True).order_by(
            'administrativo__persona__apellido1')
    cout_register = len(datos)
    register_start = 0
    limit = 0
    for dato in datos:
        try:
            row_num += limit
            i += 1
            limit = 0
            ws.write(row_num, 0, i, font_style2)

            if encuesta.tipoperfil == 1:
                ws.write(row_num, 1, dato.inscripcion_id, font_style2)
                ws.write(row_num, 2, dato.respondio, font_style2)
                ws.write(row_num, 3, dato.inscripcion.persona.documento(), font_style2)
                ws.write(row_num, 4, dato.inscripcion.persona.nombre_completo_inverso(), font_style2)
            if encuesta.tipoperfil == 2:
                ws.write(row_num, 1, dato.profesor_id, font_style2)
                ws.write(row_num, 2, dato.respondio, font_style2)
                ws.write(row_num, 3, dato.profesor.persona.documento(), font_style2)
                ws.write(row_num, 4, dato.profesor.persona.nombre_completo_inverso(), font_style2)
            if encuesta.tipoperfil == 3:
                ws.write(row_num, 1, dato.administrativo_id, font_style2)
                ws.write(row_num, 2, dato.respondio, font_style2)
                ws.write(row_num, 3, dato.administrativo.persona.documento(), font_style2)
                ws.write(row_num, 4, dato.administrativo.persona.nombre_completo_inverso(), font_style2)
            c = 5
            if encuesta.tipoperfil == 1:
                ws.write(row_num, c, dato.inscripcion.carrera.__str__(),
                         font_style2) if not dato.inscripcion.carrera == None else ' '
                c += 1

            # solo para encuesta con y sin discapacidad
            if encuesta.id == 20 or encuesta.id == 21 or encuesta.id == 22 or encuesta.id == 23:  # encuesta
                if dato.inscripcion.persona.mi_perfil().tienediscapacidad:
                    discapacidad = 'SI'
                else:
                    discapacidad = 'NO'

                ws.write(row_num, c, discapacidad, font_style2)
                c += 1
            # fin

            if encuesta.tipoperfil == 2:
                dt = ProfesorDistributivoHoras.objects.filter(status=True, periodo=126,
                                                              profesor_id=dato.profesor.id).first()
                ws.write(row_num, c, dt.nivelcategoria.nombre if dt is not None else '', font_style2)
                c += 1
                ws.write(row_num, c, dt.dedicacion.nombre if dt is not None else '', font_style2)
                c += 1
                ws.write(row_num, c, dt.categoria.nombre if dt is not None and dt.nivelcategoria.id == 1 else '',
                         font_style2)
                c += 1
                ws.write(row_num, c, dt.coordinacion.nombre if dt is not None and dt.coordinacion is not None else '',
                         font_style2)
                c += 1
                w = 0
                for m in dato.profesor.mis_materias(126).values_list('materia__nivel__modalidad__nombre',
                                                                     flat=True).distinct(
                    'materia__nivel__modalidad__nombre'):
                    ws.write(row_num + w, c, str(m), font_style2)
                    w += 1
                if limit < w and w > 0:
                    limit = w - 1

                c += 1
            if encuesta.tipoperfil == 3:
                eDistributivoPersonas = DistributivoPersona.objects.filter(persona=dato.administrativo.persona,
                                                                           status=True, regimenlaboral_id=2,
                                                                           estadopuesto_id=1)
                eDistributivoPersona = None
                if eDistributivoPersonas.values("id").exists():
                    eDistributivoPersona = eDistributivoPersonas.first()
                ws.write(row_num, c,
                         eDistributivoPersona.regimenlaboral.descripcion if eDistributivoPersona is not None else '',
                         font_style2)
                c += 1
                ws.write(row_num, c,
                         eDistributivoPersona.denominacionpuesto.descripcion if eDistributivoPersona is not None else '',
                         font_style2)
                c += 1
            if dato.respondio:
                for x in preguntas:
                    respuesta = None
                    if x.tipo == 1:
                        respuesta = RespuestaPreguntaEncuestaGrupoEstudiantes.objects.filter(status=True, pregunta=x,
                                                                                             inscripcionencuesta=dato)
                        if respuesta.values("id").exists():
                            respuesta = respuesta.first()
                            ws.write(row_num, c, respuesta.respuesta, font_style2)
                            if not x.esta_vacia():
                                c += 1
                                ws.write(row_num, c, respuesta.respuestaporno, font_style2)

                        else:
                            respuesta = None
                            ws.write(row_num, c, '', font_style2)
                            if not x.esta_vacia():
                                c += 1
                                ws.write(row_num, c, '', font_style2)
                        c += 1
                    elif x.tipo == 2:
                        respuesta = RespuestaRangoEncuestaGrupoEstudiantes.objects.filter(status=True, pregunta=x,
                                                                                          inscripcionencuesta=dato)
                        if respuesta.values("id").exists():
                            respuesta = respuesta.first()
                            ws.write(row_num, c, respuesta.opcionrango.descripcion, font_style2)
                        else:
                            ws.write(row_num, c, '', font_style2)
                        c += 1
                    elif x.tipo in [3, 4]:
                        respuesta = RespuestaPreguntaEncuestaGrupoEstudiantes.objects.filter(status=True, pregunta=x,
                                                                                             inscripcionencuesta=dato)
                        if respuesta.values("id").exists():
                            respuesta = respuesta.first()
                            ws.write(row_num, c, respuesta.respuesta, font_style2)
                        else:
                            ws.write(row_num, c, '', font_style2)
                        c += 1
                    elif x.tipo == 5:
                        respuesta = dato.respuestacuadriculaencuestagrupoestudiantes_set.filter(status=True,
                                                                                                pregunta=x).first() if dato.respuestacuadriculaencuestagrupoestudiantes_set.filter(
                            status=True, pregunta=x).exists() else None
                        if respuesta is not None:
                            try:
                                int(respuesta.respuesta)
                                if OpcionCuadriculaEncuestaGrupoEstudiantes.objects.filter(status=True, pregunta=x,
                                                                                           id=respuesta.opcioncuadricula.id,
                                                                                           tipoopcion=2).first() == None:
                                    resp = 'Sin contestar'
                                else:
                                    resp = OpcionCuadriculaEncuestaGrupoEstudiantes.objects.filter(status=True,
                                                                                                   pregunta=x,
                                                                                                   id=respuesta.opcioncuadricula.id,
                                                                                                   tipoopcion=2).first().descripcion
                            except ValueError:
                                resp = respuesta.respuesta

                            ws.write(row_num, c, resp, font_style2)
                        else:
                            ws.write(row_num, c, '', font_style2)
                        c += 1
                    elif x.tipo == 6:
                        respuesta = dato.respuestamultipleencuestagrupoestudiantes_set.filter(status=True,
                                                                                              pregunta=x) if dato.respuestamultipleencuestagrupoestudiantes_set.values(
                            'id').filter(status=True, pregunta=x).exists() else None
                        if respuesta is not None:
                            w = 0
                            for rmult in respuesta:
                                ws.write(row_num + w, c, rmult.opcionmultiple.descripcion, font_style2)
                                # row_num += 1
                                w += 1
                            if limit < w and w > 0:
                                limit = w - 1
                        else:
                            ws.write(row_num, c, '', font_style2)
                        c += 1
            row_num += 1
            print('%s' % (row_num))

        except Exception as ex:
            print('error: %s' % (ex))
            pass

    wb.save(filename)
    print("FIN: ", filename)

    # if eNotificacion:
    #     eNotificacion.en_proceso = False
    #     eNotificacion.cuerpo = 'Reporte Listo'
    #     eNotificacion.url = "{}reportes/encuestas/{}".format(MEDIA_URL, nombre)
    #     eNotificacion.save()
    # else:
    #
    #     eNotificacion = Notificacion(cuerpo='Reporte Listo',
    #                                  titulo='Resultados de Encuesta',
    #                                  destinatario=ePersona,
    #                                  url="{}reportes/encuestas/{}".format(MEDIA_URL, nombre),
    #                                  prioridad=1,
    #                                  app_label='SGA',
    #                                  fecha_hora_visible=datetime.now() + timedelta(days=1),
    #                                  tipo=2,
    #                                  en_proceso=False)
    #     eNotificacion.save()
    # data = {}
    # send_user_notification(user=usernotify, payload={"head": "Reporte terminado",
    #                                                  "body": 'Resultado de Encuesta',
    #                                                  "action": "notificacion",
    #                                                  "timestamp": time.mktime(datetime.now().timetuple()),
    #                                                  "url": "{}reportes/encuestas/{}".format(MEDIA_URL, nombre_archivo),
    #                                                  "btn_notificaciones": traerNotificaciones(None, None, ePersona),
    #                                                  "mensaje": 'Los resultados de la encuesta han sido generados con exito'},
    #                        ttl=500)


def crear_matricula_admision_sede_examen():
    # pa = os.path.join(YOUR_PATH, 'archivos', 'data_encuesta_id_24.xlsx')
    folder = os.path.join(os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_encuesta_id_25.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    # col_documento = 0
    col_inscripcion = 0
    col_sede_id = 1
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            # documento = fila[col_documento].value
            inscripcion_id = fila[col_inscripcion].value
            # eMatriculas = Matricula.objects.filter(Q(inscripcion__persona__cedula=documento) | Q(inscripcion__persona__pasaporte=documento), status=True, nivel__periodo_id=periodo_id)
            eMatriculas = Matricula.objects.filter(inscripcion_id=inscripcion_id, status=True,
                                                   nivel__periodo_id=periodo_id)
            if eMatriculas.values("id").exists():
                eMatricula = eMatriculas.first()
                sede_id = int(fila[col_sede_id].value)
                with transaction.atomic():
                    try:
                        eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        if not eMatriculaSedeExamenes.values("id").exists():
                            eMatriculaSedeExamen = MatriculaSedeExamen(matricula=eMatricula,
                                                                       detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                       sede_id=sede_id)
                            eMatriculaSedeExamen.save()
                            print(f"Se creo registro {eMatriculaSedeExamen.__str__()}")
                        else:
                            eMatriculaSedeExamen = eMatriculaSedeExamenes.first()
                            # eMatriculaSedeExamen.sede_id = sede_id
                            # eMatriculaSedeExamen.save()
                            print(f"Se edito registro {eMatriculaSedeExamen.__str__()}")
                    except Exception as ex:
                        transaction.set_rollback(True)
                        print(f"No se guardo registro, Error: {ex.__str__()}")
            else:
                print(f"No se encontro registro")
    print(f"********************************FINALIZA PROCESO CREAR MATRICULAS SEDE")


def crear_matricula_admision_sede_examen_discapacitado():
    # pa = os.path.join(YOUR_PATH, 'archivos', 'data_encuesta_id_24.xlsx')
    folder = os.path.join(
        os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_discapacitados_admision_encuesta_id_25.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_documento = 0
    periodo_id = 158
    sede_id = 11
    detallemodeloevaluativo_id = 114
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            documento = fila[col_documento].value
            eMatriculas = Matricula.objects.filter(
                Q(inscripcion__persona__cedula=documento) | Q(inscripcion__persona__pasaporte=documento), status=True,
                nivel__periodo_id=periodo_id)
            if eMatriculas.values("id").exists():
                eMatricula = eMatriculas.first()
                with transaction.atomic():
                    try:
                        eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            materiaasignada__matricula=eMatricula)
                        print(
                            f"Se procede a eliminar planificación {len(eMateriaAsignadaPlanificacionSedeVirtualExamen.values('id'))}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamen.delete()
                        eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        if not eMatriculaSedeExamenes.values("id").exists():
                            eMatriculaSedeExamen = MatriculaSedeExamen(matricula=eMatricula,
                                                                       detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                       sede_id=sede_id)
                            eMatriculaSedeExamen.save()
                            print(f"Se creo registro {eMatriculaSedeExamen.__str__()}")
                        else:
                            eMatriculaSedeExamen = eMatriculaSedeExamenes.first()
                            eMatriculaSedeExamen.sede_id = sede_id
                            eMatriculaSedeExamen.save()
                            print(f"Se edito registro {eMatriculaSedeExamen.__str__()}")
                    except Exception as ex:
                        transaction.set_rollback(True)
                        print(f"No se guardo registro, Error: {ex.__str__()}")
            else:
                print(f"No se encontro registro")
    print(f"********************************FINALIZA PROCESO CREAR MATRICULAS SEDE")


def crear_matricula_admision_sede_examen_ppl():
    folder = os.path.join(
        os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_ppl_admision_encuesta_id_25.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_documento = 0
    periodo_id = 158
    sede_id = 11
    detallemodeloevaluativo_id = 114
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            documento = fila[col_documento].value
            eMatriculas = Matricula.objects.filter(
                Q(inscripcion__persona__cedula=documento) | Q(inscripcion__persona__pasaporte=documento), status=True,
                nivel__periodo_id=periodo_id)
            if eMatriculas.values("id").exists():
                eMatricula = eMatriculas.first()
                with transaction.atomic():
                    try:
                        eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            materiaasignada__matricula=eMatricula)
                        print(
                            f"Se procede a eliminar planificación {len(eMateriaAsignadaPlanificacionSedeVirtualExamen.values('id'))}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamen.delete()
                        eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        if not eMatriculaSedeExamenes.values("id").exists():
                            eMatriculaSedeExamen = MatriculaSedeExamen(matricula=eMatricula,
                                                                       detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                       sede_id=sede_id)
                            eMatriculaSedeExamen.save()
                            print(f"Se creo registro {eMatriculaSedeExamen.__str__()}")
                        else:
                            eMatriculaSedeExamen = eMatriculaSedeExamenes.first()
                            eMatriculaSedeExamen.sede_id = sede_id
                            eMatriculaSedeExamen.save()
                            print(f"Se edito registro {eMatriculaSedeExamen.__str__()}")
                    except Exception as ex:
                        transaction.set_rollback(True)
                        print(f"No se guardo registro, Error: {ex.__str__()}")
            else:
                print(f"No se encontro registro")
    print(f"********************************FINALIZA PROCESO CREAR MATRICULAS SEDE")


def crear_matricula_admision_sede_examen_exterior():
    folder = os.path.join(
        os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_exterior_admision_encuesta_id_25.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_documento = 0
    periodo_id = 158
    sede_id = 11
    detallemodeloevaluativo_id = 114
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            documento = fila[col_documento].value
            eMatriculas = Matricula.objects.filter(
                Q(inscripcion__persona__cedula=documento) | Q(inscripcion__persona__pasaporte=documento), status=True,
                nivel__periodo_id=periodo_id)
            if eMatriculas.values("id").exists():
                eMatricula = eMatriculas.first()
                with transaction.atomic():
                    try:
                        eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            materiaasignada__matricula=eMatricula)
                        print(
                            f"Se procede a eliminar planificación {len(eMateriaAsignadaPlanificacionSedeVirtualExamen.values('id'))}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamen.delete()
                        eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        if not eMatriculaSedeExamenes.values("id").exists():
                            eMatriculaSedeExamen = MatriculaSedeExamen(matricula=eMatricula,
                                                                       detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                       sede_id=sede_id)
                            eMatriculaSedeExamen.save()
                            print(f"Se creo registro {eMatriculaSedeExamen.__str__()}")
                        else:
                            eMatriculaSedeExamen = eMatriculaSedeExamenes.first()
                            eMatriculaSedeExamen.sede_id = sede_id
                            eMatriculaSedeExamen.save()
                            print(f"Se edito registro {eMatriculaSedeExamen.__str__()}")
                    except Exception as ex:
                        transaction.set_rollback(True)
                        print(f"No se guardo registro, Error: {ex.__str__()}")
            else:
                print(f"No se encontro registro")
    print(f"********************************FINALIZA PROCESO CREAR MATRICULAS SEDE")


def crear_planificacion_admision_sede_examen_milagro():
    fechas = [
        (datetime(2022, 9, 5, 0, 0, 0)).date(),
        (datetime(2022, 9, 6, 0, 0, 0)).date(),
        (datetime(2022, 9, 7, 0, 0, 0)).date(),
        (datetime(2022, 9, 8, 0, 0, 0)).date(),
        (datetime(2022, 9, 9, 0, 0, 0)).date(),
        (datetime(2022, 9, 10, 0, 0, 0)).date(),
        (datetime(2022, 9, 11, 0, 0, 0)).date(),
        (datetime(2022, 9, 12, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 7, 0, 0)).time(), (datetime(2022, 9, 5, 8, 29, 59)).time()],
        [(datetime(2022, 9, 5, 8, 30, 0)).time(), (datetime(2022, 9, 5, 9, 59, 59)).time()],
        [(datetime(2022, 9, 5, 10, 00, 0)).time(), (datetime(2022, 9, 5, 11, 29, 59)).time()],
        [(datetime(2022, 9, 5, 11, 30, 0)).time(), (datetime(2022, 9, 5, 12, 59, 59)).time()],
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 14, 29, 59)).time()],
        [(datetime(2022, 9, 5, 14, 30, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 17, 29, 59)).time()],
        [(datetime(2022, 9, 5, 17, 30, 0)).time(), (datetime(2022, 9, 5, 18, 59, 59)).time()],
        [(datetime(2022, 9, 5, 19, 00, 0)).time(), (datetime(2022, 9, 5, 20, 29, 59)).time()],
        [(datetime(2022, 9, 5, 20, 30, 0)).time(), (datetime(2022, 9, 5, 21, 59, 59)).time()],
    ]
    sede_id = 1
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_ibarra():
    fechas = [
        (datetime(2022, 9, 6, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 30, 0)).time(), (datetime(2022, 9, 6, 9, 59, 59)).time()],
        [(datetime(2022, 9, 6, 10, 00, 0)).time(), (datetime(2022, 9, 6, 11, 29, 59)).time()],
        [(datetime(2022, 9, 6, 11, 30, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 29, 59)).time()],
        [(datetime(2022, 9, 6, 14, 30, 0)).time(), (datetime(2022, 9, 6, 15, 59, 59)).time()],
        [(datetime(2022, 9, 6, 16, 00, 0)).time(), (datetime(2022, 9, 6, 17, 29, 59)).time()],
        [(datetime(2022, 9, 6, 17, 30, 0)).time(), (datetime(2022, 9, 6, 18, 59, 59)).time()],
        [(datetime(2022, 9, 6, 19, 00, 0)).time(), (datetime(2022, 9, 6, 20, 29, 59)).time()],
    ]
    sede_id = 4
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_la_libertad():
    fechas = [
        (datetime(2022, 9, 6, 0, 0, 0)).date(),
        (datetime(2022, 9, 7, 0, 0, 0)).date(),
        (datetime(2022, 9, 8, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 30, 0)).time(), (datetime(2022, 9, 6, 9, 59, 59)).time()],
        [(datetime(2022, 9, 6, 10, 00, 0)).time(), (datetime(2022, 9, 6, 11, 29, 59)).time()],
        [(datetime(2022, 9, 6, 11, 30, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 29, 59)).time()],
        [(datetime(2022, 9, 6, 14, 30, 0)).time(), (datetime(2022, 9, 6, 15, 59, 59)).time()],
        [(datetime(2022, 9, 6, 16, 00, 0)).time(), (datetime(2022, 9, 6, 17, 29, 59)).time()],
        [(datetime(2022, 9, 6, 17, 30, 0)).time(), (datetime(2022, 9, 6, 18, 59, 59)).time()],
        [(datetime(2022, 9, 6, 19, 00, 0)).time(), (datetime(2022, 9, 6, 20, 29, 59)).time()],
    ]
    sede_id = 9
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_quevedo():
    fechas = [
        (datetime(2022, 9, 7, 0, 0, 0)).date(),
        (datetime(2022, 9, 8, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 30, 0)).time(), (datetime(2022, 9, 6, 9, 59, 59)).time()],
        [(datetime(2022, 9, 6, 10, 00, 0)).time(), (datetime(2022, 9, 6, 11, 29, 59)).time()],
        [(datetime(2022, 9, 6, 11, 30, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 29, 59)).time()],
        [(datetime(2022, 9, 6, 14, 30, 0)).time(), (datetime(2022, 9, 6, 15, 59, 59)).time()],
        [(datetime(2022, 9, 6, 16, 00, 0)).time(), (datetime(2022, 9, 6, 17, 29, 59)).time()],
    ]
    sede_id = 5
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_riobamba():
    fechas = [
        (datetime(2022, 9, 5, 0, 0, 0)).date(),
        (datetime(2022, 9, 6, 0, 0, 0)).date(),
        (datetime(2022, 9, 7, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 30, 0)).time(), (datetime(2022, 9, 6, 9, 59, 59)).time()],
        [(datetime(2022, 9, 6, 10, 00, 0)).time(), (datetime(2022, 9, 6, 11, 29, 59)).time()],
        [(datetime(2022, 9, 6, 11, 30, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 29, 59)).time()],
        [(datetime(2022, 9, 6, 14, 30, 0)).time(), (datetime(2022, 9, 6, 15, 59, 59)).time()],
    ]
    sede_id = 7
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_manabi():
    fechas = [
        (datetime(2022, 9, 7, 0, 0, 0)).date(),
        (datetime(2022, 9, 8, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 10, 30, 0)).time(), (datetime(2022, 9, 6, 11, 44, 59)).time()],
        [(datetime(2022, 9, 6, 11, 45, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 14, 59)).time()],
        [(datetime(2022, 9, 6, 14, 15, 0)).time(), (datetime(2022, 9, 6, 15, 29, 59)).time()],
        [(datetime(2022, 9, 6, 15, 30, 0)).time(), (datetime(2022, 9, 6, 16, 44, 59)).time()],
        [(datetime(2022, 9, 6, 16, 45, 0)).time(), (datetime(2022, 9, 6, 17, 59, 59)).time()],
    ]
    sede_id = 15
    if DEBUG:
        sede_id = 14
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=158).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_orellana():
    fechas = [
        (datetime(2022, 9, 5, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 14, 15, 0)).time(), (datetime(2022, 9, 6, 15, 29, 59)).time()],
        [(datetime(2022, 9, 6, 15, 30, 0)).time(), (datetime(2022, 9, 6, 16, 44, 59)).time()],
        [(datetime(2022, 9, 6, 16, 45, 0)).time(), (datetime(2022, 9, 6, 17, 59, 59)).time()],
        [(datetime(2022, 9, 6, 18, 00, 0)).time(), (datetime(2022, 9, 6, 19, 14, 59)).time()],
    ]
    sede_id = 14
    if DEBUG:
        sede_id = 13
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=158).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_cuenca():
    fechas = [
        (datetime(2022, 9, 5, 0, 0, 0)).date(),
        (datetime(2022, 9, 6, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 30, 0)).time(), (datetime(2022, 9, 6, 9, 59, 59)).time()],
        [(datetime(2022, 9, 6, 10, 00, 0)).time(), (datetime(2022, 9, 6, 11, 29, 59)).time()],
        [(datetime(2022, 9, 6, 11, 30, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 29, 59)).time()],
        [(datetime(2022, 9, 6, 14, 30, 0)).time(), (datetime(2022, 9, 6, 15, 59, 59)).time()],
    ]
    sede_id = 6
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_loja():
    fechas = [
        (datetime(2022, 9, 5, 0, 0, 0)).date(),
        (datetime(2022, 9, 6, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 30, 0)).time(), (datetime(2022, 9, 6, 9, 59, 59)).time()],
        [(datetime(2022, 9, 6, 10, 00, 0)).time(), (datetime(2022, 9, 6, 11, 29, 59)).time()],
        [(datetime(2022, 9, 6, 11, 30, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 29, 59)).time()],
        [(datetime(2022, 9, 6, 14, 30, 0)).time(), (datetime(2022, 9, 6, 15, 59, 59)).time()],
        [(datetime(2022, 9, 6, 16, 00, 0)).time(), (datetime(2022, 9, 6, 17, 29, 59)).time()],
        [(datetime(2022, 9, 6, 17, 30, 0)).time(), (datetime(2022, 9, 6, 18, 59, 59)).time()],
        [(datetime(2022, 9, 6, 19, 00, 0)).time(), (datetime(2022, 9, 6, 20, 29, 59)).time()],
    ]
    sede_id = 8
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=1):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_santo_domingo_tsachilas():
    fechas = [
        (datetime(2022, 9, 6, 0, 0, 0)).date(),
        (datetime(2022, 9, 7, 0, 0, 0)).date(),
        (datetime(2022, 9, 8, 0, 0, 0)).date(),
        (datetime(2022, 9, 9, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 30, 0)).time(), (datetime(2022, 9, 6, 9, 59, 59)).time()],
        [(datetime(2022, 9, 6, 10, 00, 0)).time(), (datetime(2022, 9, 6, 11, 29, 59)).time()],
        [(datetime(2022, 9, 6, 11, 30, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 29, 59)).time()],
        [(datetime(2022, 9, 6, 14, 30, 0)).time(), (datetime(2022, 9, 6, 15, 59, 59)).time()],
    ]
    sede_id = 10
    if DEBUG:
        sede_id = 15
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_cuenca():
    fechas = [
        (datetime(2022, 9, 5, 0, 0, 0)).date(),
        (datetime(2022, 9, 6, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 30, 0)).time(), (datetime(2022, 9, 6, 9, 59, 59)).time()],
        [(datetime(2022, 9, 6, 10, 00, 0)).time(), (datetime(2022, 9, 6, 11, 29, 59)).time()],
        [(datetime(2022, 9, 6, 11, 30, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 29, 59)).time()],
        [(datetime(2022, 9, 6, 14, 30, 0)).time(), (datetime(2022, 9, 6, 15, 59, 59)).time()],
    ]
    sede_id = 6
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_loja():
    fechas = [
        (datetime(2022, 9, 5, 0, 0, 0)).date(),
        (datetime(2022, 9, 6, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 30, 0)).time(), (datetime(2022, 9, 6, 9, 59, 59)).time()],
        [(datetime(2022, 9, 6, 10, 00, 0)).time(), (datetime(2022, 9, 6, 11, 29, 59)).time()],
        [(datetime(2022, 9, 6, 11, 30, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 29, 59)).time()],
        [(datetime(2022, 9, 6, 14, 30, 0)).time(), (datetime(2022, 9, 6, 15, 59, 59)).time()],
        [(datetime(2022, 9, 6, 16, 00, 0)).time(), (datetime(2022, 9, 6, 17, 29, 59)).time()],
        [(datetime(2022, 9, 6, 17, 30, 0)).time(), (datetime(2022, 9, 6, 18, 59, 59)).time()],
        [(datetime(2022, 9, 6, 19, 00, 0)).time(), (datetime(2022, 9, 6, 20, 29, 59)).time()],
    ]
    sede_id = 8
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_santo_domingo_tsachilas():
    fechas = [
        (datetime(2022, 9, 6, 0, 0, 0)).date(),
        (datetime(2022, 9, 7, 0, 0, 0)).date(),
        (datetime(2022, 9, 8, 0, 0, 0)).date(),
        (datetime(2022, 9, 9, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 30, 0)).time(), (datetime(2022, 9, 6, 9, 59, 59)).time()],
        [(datetime(2022, 9, 6, 10, 00, 0)).time(), (datetime(2022, 9, 6, 11, 29, 59)).time()],
        [(datetime(2022, 9, 6, 11, 30, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 29, 59)).time()],
        [(datetime(2022, 9, 6, 14, 30, 0)).time(), (datetime(2022, 9, 6, 15, 59, 59)).time()],
    ]
    sede_id = 10
    if DEBUG:
        sede_id = 15
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=1):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_discapacitado():
    fechas = [
        (datetime(2022, 9, 5, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 0, 0, 1)).time(), (datetime(2022, 9, 6, 23, 59, 59)).time()],
    ]
    sede_id = 11
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=5):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_ppl():
    fechas = [
        (datetime(2022, 9, 6, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 0, 0, 1)).time(), (datetime(2022, 9, 6, 23, 59, 59)).time()],
    ]
    sede_id = 11
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=5):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_exterior():
    fechas = [
        (datetime(2022, 9, 7, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 0, 0, 1)).time(), (datetime(2022, 9, 6, 23, 59, 59)).time()],
    ]
    sede_id = 11
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=5):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_machala():
    fechas = [
        (datetime(2022, 9, 10, 0, 0, 0)).date(),
        (datetime(2022, 9, 11, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 00, 0)).time(), (datetime(2022, 9, 6, 9, 14, 59)).time()],
        [(datetime(2022, 9, 6, 9, 15, 0)).time(), (datetime(2022, 9, 6, 10, 29, 59)).time()],
        [(datetime(2022, 9, 6, 10, 30, 0)).time(), (datetime(2022, 9, 6, 11, 44, 59)).time()],
        [(datetime(2022, 9, 6, 11, 45, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 14, 59)).time()],
        [(datetime(2022, 9, 6, 14, 15, 0)).time(), (datetime(2022, 9, 6, 15, 29, 59)).time()],
        [(datetime(2022, 9, 6, 15, 30, 0)).time(), (datetime(2022, 9, 6, 16, 44, 59)).time()],
        [(datetime(2022, 9, 6, 16, 45, 0)).time(), (datetime(2022, 9, 6, 17, 59, 59)).time()],
    ]
    sede_id = 3
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=1):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_admision_sede_examen_quito():
    fechas = [
        (datetime(2022, 9, 8, 0, 0, 0)).date(),
        (datetime(2022, 9, 9, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 6, 8, 30, 0)).time(), (datetime(2022, 9, 6, 9, 59, 59)).time()],
        [(datetime(2022, 9, 6, 10, 00, 0)).time(), (datetime(2022, 9, 6, 11, 29, 59)).time()],
        [(datetime(2022, 9, 6, 11, 30, 0)).time(), (datetime(2022, 9, 6, 12, 59, 59)).time()],
        [(datetime(2022, 9, 6, 13, 00, 0)).time(), (datetime(2022, 9, 6, 14, 29, 59)).time()],
        [(datetime(2022, 9, 6, 14, 30, 0)).time(), (datetime(2022, 9, 6, 15, 59, 59)).time()],
        [(datetime(2022, 9, 6, 16, 00, 0)).time(), (datetime(2022, 9, 6, 17, 29, 59)).time()],
    ]
    sede_id = 18
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=1):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def eliminar_planificacion_admision_sede_milagro():
    fechas = [
        (datetime(2022, 9, 10, 0, 0, 0)).date(),
        (datetime(2022, 9, 11, 0, 0, 0)).date(),
        (datetime(2022, 9, 12, 0, 0, 0)).date(),
        (datetime(2022, 9, 13, 0, 0, 0)).date(),
        (datetime(2022, 9, 14, 0, 0, 0)).date(),
    ]

    # horas = [
    #     [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 17, 29, 59)).time()],
    #     [(datetime(2022, 9, 5, 17, 30, 0)).time(), (datetime(2022, 9, 5, 18, 59, 59)).time()],
    #     [(datetime(2022, 9, 5, 19, 00, 0)).time(), (datetime(2022, 9, 5, 20, 29, 59)).time()],
    #     [(datetime(2022, 9, 5, 20, 30, 0)).time(), (datetime(2022, 9, 5, 21, 59, 59)).time()],
    # ]
    sede_id = 1
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            print(f"Se elimina fecha: {len(eFechaPlanificacionSedeVirtualExamenes)}")
            eFechaPlanificacionSedeVirtualExamenes.delete()

        # for hora in horas:
        #     horainicio = hora[0]
        #     horafin = hora[1]
        #     print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
        #     eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
        #     if eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
        #         print(f"Se elimina turnos: {len(eTurnoPlanificacionSedeVirtualExamenes)}")
        #         eTurnoPlanificacionSedeVirtualExamenes.delete()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def editar_planificacion_admision_sede_milagro():
    fechas = [
        (datetime(2022, 9, 12, 0, 0, 0)).date(),
        (datetime(2022, 9, 13, 0, 0, 0)).date(),
        (datetime(2022, 9, 14, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 7, 0, 0)).time(), (datetime(2022, 9, 5, 8, 29, 59)).time()],
        [(datetime(2022, 9, 5, 8, 30, 0)).time(), (datetime(2022, 9, 5, 9, 59, 59)).time()],
        [(datetime(2022, 9, 5, 10, 00, 0)).time(), (datetime(2022, 9, 5, 11, 29, 59)).time()],
        [(datetime(2022, 9, 5, 11, 30, 0)).time(), (datetime(2022, 9, 5, 12, 59, 59)).time()],
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 14, 29, 59)).time()],
        [(datetime(2022, 9, 5, 14, 30, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 17, 29, 59)).time()],
        [(datetime(2022, 9, 5, 17, 30, 0)).time(), (datetime(2022, 9, 5, 18, 59, 59)).time()],
        [(datetime(2022, 9, 5, 19, 00, 0)).time(), (datetime(2022, 9, 5, 20, 29, 59)).time()],
        [(datetime(2022, 9, 5, 20, 30, 0)).time(), (datetime(2022, 9, 5, 21, 59, 59)).time()],
    ]
    sede_id = 1
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=158,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=158,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def planificar_admision_unemi_v1():
    sede_id = 1
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    # if DEBUG:
    #     MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                                  detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eMallaIngles = Malla.objects.filter(pk__in=[353, 22])
    # eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id, aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id)
    # print(f"Se procedera a eliminar {len(eMateriaAsignadaPlanificacionSedeVirtualExamenes)}")
    # eMateriaAsignadaPlanificacionSedeVirtualExamenes.delete()
    eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                periodo_id=periodo_id).order_by(
        'fecha')
    for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
            fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
        for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
            horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
            horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
            eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
            for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                eAula = eAulaPlanificacionSedeVirtualExamen.aula
                capacidad = eAula.capacidad
                cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                if cantidadad_planificadas < capacidad:
                    print(
                        f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                        status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                          aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                          aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                        Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                          aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                          aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                    eMatriculas = Matricula.objects.filter(
                        pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                        status=True, retiradomatricula=False, termino=True,
                        fechatermino__isnull=False, bloqueomatricula=False,
                        nivel__periodo_id=periodo_id)
                    # eMatriculas = eMatriculas.exclude(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                    # eMatriculas_exclude_ingles = eMatriculas.annotate(total_ingles=Count('materiaasignada__materia__asignaturamalla__malla_id', filter=Q(materiaasignada__materia__asignaturamalla__malla__in=eMallaIngles, nivel__periodo_id=periodo_id, status=True)),
                    #                                                   total_general=Count('materiaasignada__materia__asignaturamalla__malla_id', filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(total_general=F('total_ingles'))
                    eMatriculas_exclude_planificadas = eMatriculas.annotate(
                        total_planificadas=Count('materiaasignada__id', filter=Q(
                            materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                 status=True),
                        total_general=Count('materiaasignada__id', filter=Q(nivel__periodo_id=periodo_id, status=True),
                                            exclude=Q(materiaasignada__materia__asignatura__id=4837))).filter(
                        total_general=F('total_planificadas'))
                    # eMatriculas = eMatriculas.exclude(pk__in=eMatriculas_exclude_ingles.values_list('id', flat=True))
                    # eMatriculas = eMatriculas.exclude(pk__in=eMatriculas_exclude_planificadas.values_list('id', flat=True))
                    ids_exclude = list(
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                                     flat=True).filter(
                            filter_conflicto))
                    # ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                    ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                    eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                                       'inscripcion__persona__apellido2',
                                                       'inscripcion__persona__nombres').distinct()
                    # eMatriculas = eMatriculas.exclude(Q(materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id", flat=True)) | Q(materiaasignada__materia__asignatura__id=4837))
                    contador = cantidadad_planificadas
                    for eMatricula in eMatriculas:
                        eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                            Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                                  flat=True)) | Q(
                                materia__asignatura__id=4837))
                        if eMateriaAsignadas.values("id").exists():
                            eMateriaAsignada = eMateriaAsignadas.first()
                            contador += 1
                            print(
                                f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                            eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                materiaasignada=eMateriaAsignada,
                                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                            eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                            if contador >= capacidad:
                                break


def planificar_admision_unemi_v2():
    sede_id = 1
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id" 
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND 
                        sga_ma.status= TRUE AND 
                        sga_m.status= TRUE AND 
                        --sga_i.modalidad_id = 3 AND 
                        sga_m1.asignatura_id != 4837 AND 
                        sga_m.bloqueomatricula = FALSE AND 
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd 
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_ibarra_v2():
    sede_id = 4
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id"
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND
                        sga_ma.status= TRUE AND
                        sga_m.status= TRUE AND
                        --sga_i.modalidad_id = 3 AND
                        sga_m1.asignatura_id != 4837 AND
                        sga_m.bloqueomatricula = FALSE AND
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_la_libertad_v2():
    sede_id = 9
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id"
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND
                        sga_ma.status= TRUE AND
                        sga_m.status= TRUE AND
                        --sga_i.modalidad_id = 3 AND
                        sga_m1.asignatura_id != 4837 AND
                        sga_m.bloqueomatricula = FALSE AND
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_quevedo_v2():
    sede_id = 5
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id"
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND
                        sga_ma.status= TRUE AND
                        sga_m.status= TRUE AND
                        --sga_i.modalidad_id = 3 AND
                        sga_m1.asignatura_id != 4837 AND
                        sga_m.bloqueomatricula = FALSE AND
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_riobamba_v2():
    sede_id = 7
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id"
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND
                        sga_ma.status= TRUE AND
                        sga_m.status= TRUE AND
                        --sga_i.modalidad_id = 3 AND
                        sga_m1.asignatura_id != 4837 AND
                        sga_m.bloqueomatricula = FALSE AND
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_manabi_v2():
    sede_id = 15
    if DEBUG:
        sede_id = 14
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id"
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND
                        sga_ma.status= TRUE AND
                        sga_m.status= TRUE AND
                        --sga_i.modalidad_id = 3 AND
                        sga_m1.asignatura_id != 4837 AND
                        sga_m.bloqueomatricula = FALSE AND
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_orellana_v2():
    sede_id = 14
    if DEBUG:
        sede_id = 13
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id"
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND
                        sga_ma.status= TRUE AND
                        sga_m.status= TRUE AND
                        --sga_i.modalidad_id = 3 AND
                        sga_m1.asignatura_id != 4837 AND
                        sga_m.bloqueomatricula = FALSE AND
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_cuenca_v2():
    sede_id = 6
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id"
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND
                        sga_ma.status= TRUE AND
                        sga_m.status= TRUE AND
                        --sga_i.modalidad_id = 3 AND
                        sga_m1.asignatura_id != 4837 AND
                        sga_m.bloqueomatricula = FALSE AND
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_loja_v2():
    sede_id = 8
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id"
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND
                        sga_ma.status= TRUE AND
                        sga_m.status= TRUE AND
                        --sga_i.modalidad_id = 3 AND
                        sga_m1.asignatura_id != 4837 AND
                        sga_m.bloqueomatricula = FALSE AND
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_santo_domingo_tsachilas_v2():
    sede_id = 10
    if DEBUG:
        sede_id = 15
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id"
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND
                        sga_ma.status= TRUE AND
                        sga_m.status= TRUE AND
                        --sga_i.modalidad_id = 3 AND
                        sga_m1.asignatura_id != 4837 AND
                        sga_m.bloqueomatricula = FALSE AND
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_virtual_discapacitado():
    folder = os.path.join(
        os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_discapacitados_admision_encuesta_id_25.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_documento = 0
    periodo_id = 158
    sede_id = 11
    detallemodeloevaluativo_id = 114
    ids_matriculas = []
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            documento = fila[col_documento].value
            eMatriculas = Matricula.objects.filter(
                Q(inscripcion__persona__cedula=documento) | Q(inscripcion__persona__pasaporte=documento), status=True,
                nivel__periodo_id=periodo_id)
            if eMatriculas.values("id").exists():
                eMatricula = eMatriculas.first()
                ids_matriculas.append(eMatricula.pk)

    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eMatriculaSedeExamenes = eMatriculaSedeExamenes.filter(matricula__id__in=ids_matriculas)
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
        turnoplanificacion__fechaplanificacion__fecha=datetime(2022, 9, 5, 0, 0, 0).date()
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_virtual_ppl():
    folder = os.path.join(
        os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_ppl_admision_encuesta_id_25.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_documento = 0
    periodo_id = 158
    sede_id = 11
    detallemodeloevaluativo_id = 114
    ids_matriculas = []
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            documento = fila[col_documento].value
            eMatriculas = Matricula.objects.filter(
                Q(inscripcion__persona__cedula=documento) | Q(inscripcion__persona__pasaporte=documento), status=True,
                nivel__periodo_id=periodo_id)
            if eMatriculas.values("id").exists():
                eMatricula = eMatriculas.first()
                ids_matriculas.append(eMatricula.pk)

    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eMatriculaSedeExamenes = eMatriculaSedeExamenes.filter(matricula__id__in=ids_matriculas)
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
        turnoplanificacion__fechaplanificacion__fecha=datetime(2022, 9, 6, 0, 0, 0).date()
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_virtual_exterior():
    folder = os.path.join(
        os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_exterior_admision_encuesta_id_25.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_documento = 0
    periodo_id = 158
    sede_id = 11
    detallemodeloevaluativo_id = 114
    ids_matriculas = []
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            documento = fila[col_documento].value
            eMatriculas = Matricula.objects.filter(
                Q(inscripcion__persona__cedula=documento) | Q(inscripcion__persona__pasaporte=documento), status=True,
                nivel__periodo_id=periodo_id)
            if eMatriculas.values("id").exists():
                eMatricula = eMatriculas.first()
                ids_matriculas.append(eMatricula.pk)

    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eMatriculaSedeExamenes = eMatriculaSedeExamenes.filter(matricula__id__in=ids_matriculas)
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
        turnoplanificacion__fechaplanificacion__fecha=datetime(2022, 9, 7, 0, 0, 0).date()
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_virtual_galapagos():
    folder = os.path.join(
        os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_galapagos_admision_encuesta_id_25.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_inscripcion = 0
    sede_id = 11
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    ids_matriculas = []
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            inscripcion_id = fila[col_inscripcion].value
            eMatriculas = Matricula.objects.filter(inscripcion_id=inscripcion_id, status=True,
                                                   nivel__periodo_id=periodo_id)
            if eMatriculas.values("id").exists():
                eMatricula = eMatriculas.first()
                ids_matriculas.append(eMatricula.pk)

    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eMatriculaSedeExamenes = eMatriculaSedeExamenes.filter(matricula__id__in=ids_matriculas)
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
        turnoplanificacion__fechaplanificacion__fecha=datetime(2022, 9, 7, 0, 0, 0).date()
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_machala_v2():
    sede_id = 3
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id"
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND
                        sga_ma.status= TRUE AND
                        sga_m.status= TRUE AND
                        --sga_i.modalidad_id = 3 AND
                        sga_m1.asignatura_id != 4837 AND
                        sga_m.bloqueomatricula = FALSE AND
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def planificar_admision_quito_v2():
    sede_id = 18
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id
    ).order_by('turnoplanificacion__fechaplanificacion__fecha',
               'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                  aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                  aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
            sql = f"""
                    SELECT DISTINCT dd."matricula_id"
                    FROM (
                        SELECT sga_ma."id", sga_ma.matricula_id, (
                        SELECT COUNT(*)
                        FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        FROM sga_materiaasignada AS sga_ma
                        INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        WHERE sga_n.periodo_id={str(periodo_id)} AND
                        sga_ma.status= TRUE AND
                        sga_m.status= TRUE AND
                        --sga_i.modalidad_id = 3 AND
                        sga_m1.asignatura_id != 4837 AND
                        sga_m.bloqueomatricula = FALSE AND
                        sga_m.retiradomatricula = FALSE AND
                        sga_m."id" IN (
                        SELECT inno_m.matricula_id
                                FROM inno_matriculasedeexamen AS inno_m
                                INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                                INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                                WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                    WHERE dd.planificados = 0"""
            cursor.execute(sql)
            results = cursor.fetchall()
            ids_matricula = [r[0] for r in results]
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
            eMatriculas_exclude_planificadas = eMatriculas.annotate(total_planificadas=Count('materiaasignada__id',
                                                                                             filter=Q(
                                                                                                 materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                     "materiaasignada__id",
                                                                                                     flat=True),
                                                                                                 status=True),
                                                                                             nivel__periodo_id=periodo_id,
                                                                                             status=True),
                                                                    total_general=Count('materiaasignada__id', filter=Q(
                                                                        nivel__periodo_id=periodo_id, status=True),
                                                                                        exclude=Q(
                                                                                            materiaasignada__materia__asignatura__id=4837))).filter(
                total_general=F('total_planificadas'))
            ids_exclude = list(
                eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id",
                                                                             flat=True).filter(filter_conflicto))
            ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def cargar_matriculas_noasignadas():
    ids = [
        505150, 505353, 505424, 505508, 505645, 505678, 505737, 505782, 492536, 492638, 492663, 492704, 492808, 492849,
        492974, 492986,
        493015, 493239, 493400, 493412, 493459, 493473, 493591, 493696, 493800, 493791, 493912, 493982, 494156, 494228,
        494226, 494333,
        494925, 494972, 495071, 495212, 495406, 495422, 495444, 495498, 495551, 495679, 495843, 495922, 496277, 496319,
        496349, 496561,
        496648, 496765, 497166, 497265, 497309, 497401, 497798, 498050, 498085, 498157, 498412, 498865, 499152, 499201,
        499414, 499620,
        499961, 500204, 500241, 500330, 500551, 500718, 500815, 501108, 501412, 501570, 501591, 501652, 501782, 501932,
        502156, 502681,
        502722, 503132, 503177, 503405, 503428, 503818, 503887, 503942, 503936, 504006, 504554, 504719, 504740, 504874,
        504979, 505010,
        505077, 505904, 505916, 506189, 506235, 506303, 506370, 506471, 506556, 506589, 506675, 506821, 506835, 506862,
        506916, 507222,
        507647, 507713, 507883, 508212, 508232, 508417, 508430, 508559, 508599, 508883, 508997, 509208, 509357, 509392,
        509518, 509619,
        481522, 482989, 480564, 480620, 480811, 482130, 482618, 482638, 482840, 483003, 483063, 483068, 483219, 483443,
        483997, 484036,
        484136, 484389, 484680, 484876, 484904, 484940, 485185, 485583, 485636, 486117, 486313, 486815, 487008, 487537,
        488105, 488611,
        489272, 490024, 490053, 491020, 491361
    ]
    eMatriculas = Matricula.objects.filter(pk__in=ids)
    sede_id = 1
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    for eMatricula in eMatriculas:
        with transaction.atomic():
            try:
                eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                if not eMatriculaSedeExamenes.values("id").exists():
                    eMatriculaSedeExamen = MatriculaSedeExamen(matricula=eMatricula,
                                                               detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                               sede_id=sede_id)
                    eMatriculaSedeExamen.save()
                    print(f"Se creo registro {eMatriculaSedeExamen.__str__()}")
                else:
                    eMatriculaSedeExamen = eMatriculaSedeExamenes.first()
                    # eMatriculaSedeExamen.sede_id = sede_id
                    # eMatriculaSedeExamen.save()
                    print(f"Se edito registro {eMatriculaSedeExamen.__str__()}")
            except Exception as ex:
                transaction.set_rollback(True)
                print(f"No se guardo registro, Error: {ex.__str__()}")


def eliminar_matriculas_bloqueadas():
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    eMatriculas = Matricula.objects.filter(Q(retiradomatricula=True) | Q(retiradomatricula=True),
                                           nivel__periodo_id=periodo_id)
    eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
        status=True, materiaasignada__matricula__in=eMatriculas, detallemodeloevaluativo_id=detallemodeloevaluativo_id)


def planificar_admision_virtual_unico_v2(matricula=None, fecha=None):
    sede_id = 11
    periodo_id = 158
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    if matricula:
        eMatriculaSedeExamenes = eMatriculaSedeExamenes.filter(matricula=matricula)

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id).order_by(
        'turnoplanificacion__fechaplanificacion__fecha', 'turnoplanificacion__horainicio').distinct()
    if fecha:
        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
            turnoplanificacion__fechaplanificacion__fecha=fecha)
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def replanificar_estudiantes_admsion_sede(sede_ids=[]):
    periodo_id = 158
    sede_id = 11
    detallemodeloevaluativo_id = 114
    # fechas = [
    #     (datetime(2022, 9, 14, 0, 0, 0)).date(),
    # ]
    #
    # horas = [
    #     [(datetime(2022, 9, 5, 00, 00, 1)).time(), (datetime(2022, 9, 5, 23, 59, 59)).time()],
    # ]
    #
    # def planificacion_unica():
    #     for fecha in fechas:
    #         print(f"*** FECHA: {fecha}")
    #         eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id, fecha=fecha)
    #         if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
    #             eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id, periodo_id=periodo_id, fecha=fecha)
    #             eFechaPlanificacionSedeVirtualExamen.save()
    #         else:
    #             eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()
    #
    #         for hora in horas:
    #             horainicio = hora[0]
    #             horafin = hora[1]
    #             print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
    #             eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
    #             if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
    #                 eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
    #                 eTurnoPlanificacionSedeVirtualExamen.save()
    #             else:
    #                 eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()
    #
    #             for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(Q(nombre__icontains='VIRTUAL-ADMISION'), sedevirtual_id=sede_id, activo=True, tipo_id=5):
    #                 print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
    #                 eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
    #                 if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
    #                     eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
    #                     eAulaPlanificacionSedeVirtualExamen.save()
    #                 else:
    #                     eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    #     print(f"********************************FINALIZA PROCESO PLANIFICAR ")
    #
    eMatriculas = Matricula.objects.filter(nivel__periodo_id=periodo_id,
                                           inscripcion__inscripcionmalla__malla__modalidad_id__in=[1, 2],
                                           status=True,
                                           retiradomatricula=False,
                                           bloqueomatricula=False)
    # eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula__in=eMatriculas, sede_id__in=sede_ids)
    # eMatriculas = eMatriculas.filter(pk__in=eMatriculaSedeExamenes.values_list('matricula_id', flat=True))
    # print(f"Total de matriculas: {len(eMatriculas.values('id'))}")
    # eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(materiaasignada__matricula__in=eMatriculas,
    #                                                                                                                 habilitadoexamen=False,
    #                                                                                                                 aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id__in=sede_ids,
    #                                                                                                                 aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                                                                                 )
    # print(f"Total de materias planificadas a eliminar: {len(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values('id'))}")
    # eMateriaAsignadaPlanificacionSedeVirtualExamenes.delete()
    #
    # planificacion_unica()
    # for eMatricula in eMatriculas:
    #     with transaction.atomic():
    #         try:
    #             eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(materiaasignada__matricula=eMatricula,
    #                                                                                                                             habilitadoexamen=False,
    #                                                                                                                             aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id__in=sede_ids,
    #                                                                                                                             aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                                                                                             )
    #             if not eMateriaAsignadaPlanificacionSedeVirtualExamenes.values("id").exists():
    #                 eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula=eMatricula,
    #                                                                             detallemodeloevaluativo_id=detallemodeloevaluativo_id)
    #                 if not eMatriculaSedeExamenes.values("id").exists():
    #                     eMatriculaSedeExamen = MatriculaSedeExamen(matricula=eMatricula,
    #                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
    #                                                                sede_id=sede_id)
    #                     eMatriculaSedeExamen.save()
    #                     print(f"Se creo registro {eMatriculaSedeExamen.__str__()}")
    #                 else:
    #                     eMatriculaSedeExamen = eMatriculaSedeExamenes.first()
    #                     eMatriculaSedeExamen.sede_id = sede_id
    #                     eMatriculaSedeExamen.save()
    #                     print(f"Se edito registro {eMatriculaSedeExamen.__str__()}")
    #         except Exception as ex:
    #             transaction.set_rollback(True)
    #             print(f"No se guardo registro, Error: {ex.__str__()}")
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula__in=eMatriculas, sede_id=sede_id)
    print(f"Total: {len(eMatriculaSedeExamenes.values('id'))}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
        turnoplanificacion__fechaplanificacion__fecha=datetime(2022, 9, 14, 0, 0, 0).date()
    ).order_by('turnoplanificacion__fechaplanificacion__fecha', 'turnoplanificacion__horainicio').distinct()
    print(f"Total: {len(eAulaPlanificacionSedeVirtualExamenes.values('id'))}")
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            eMatriculas = Matricula.objects.filter(
                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True), status=True,
                retiradomatricula=False, termino=True, fechatermino__isnull=False, bloqueomatricula=False,
                nivel__periodo_id=periodo_id)
            eMatriculas = eMatriculas.order_by('inscripcion__persona__apellido1',
                                               'inscripcion__persona__apellido2',
                                               'inscripcion__persona__nombres').distinct()
            print(f"Total: {len(eMatriculas.values('id'))}")
            contador = cantidadad_planificadas
            for eMatricula in eMatriculas:
                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula).exclude(
                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__id",
                                                                                          flat=True)) | Q(
                        materia__asignatura__id=4837))
                if eMateriaAsignadas.values("id").exists():
                    eMateriaAsignada = eMateriaAsignadas.first()
                    contador += 1
                    print(
                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                        materiaasignada=eMateriaAsignada,
                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                    if contador >= capacidad:
                        break


def quitar_aulas_en_cero_admision(sede_ids=[]):
    eSedes = SedeVirtual.objects.filter(pk__in=sede_ids)
    periodo_id = 158
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede__in=eSedes,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id).order_by(
        'turnoplanificacion__fechaplanificacion__fecha', 'turnoplanificacion__horainicio').distinct()
    print(f"Total aulas planificadas: {len(eAulaPlanificacionSedeVirtualExamenes.values('id'))}")
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        if planificadas == 0:
            print(f"Eliminar aula planificación({planificadas}): {eAulaPlanificacionSedeVirtualExamen.__str__()}")
            eAulaPlanificacionSedeVirtualExamen.delete()

    eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
        fechaplanificacion__sede__in=eSedes, fechaplanificacion__periodo_id=periodo_id)
    print(f"Total turnos planificadas: {len(eTurnoPlanificacionSedeVirtualExamenes.values('id'))}")
    for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
        eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
            turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, status=True)
        if len(eAulaPlanificacionSedeVirtualExamenes.values("id")) == 0:
            print(
                f"Eliminar turno planificación ({len(eAulaPlanificacionSedeVirtualExamenes.values('id'))}: {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
            eTurnoPlanificacionSedeVirtualExamen.delete()

    eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede__in=eSedes,
                                                                                                periodo_id=periodo_id)
    print(f"Total fechas planificadas: {len(eFechaPlanificacionSedeVirtualExamenes.values('id'))}")
    for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
        eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
            fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, status=True)
        if len(eTurnoPlanificacionSedeVirtualExamenes.values("id")) == 0:
            print(
                f"Eliminar fecha planificación ({len(eTurnoPlanificacionSedeVirtualExamenes.values('id'))}: {eFechaPlanificacionSedeVirtualExamen.__str__()}")
            eFechaPlanificacionSedeVirtualExamen.delete()


# crear_planificacion_admision_sede_examen_loja()
# planificar_admision_loja_v2()
# crear_planificacion_admision_sede_examen_santo_domingo_tsachilas()
# planificar_admision_santo_domingo_tsachilas_v2()


"""
    PLANIFICACIÓN PREGRADO
"""


def crear_matricula_pregrado_sede_examen():
    # pa = os.path.join(YOUR_PATH, 'archivos', 'data_encuesta_id_24.xlsx')
    folder = os.path.join(os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_encuesta_id_24.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_id = 0
    col_sede_id = 1
    detallemodeloevaluativo_id = 37
    periodo_id = 126
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            inscripcion_id = int(fila[col_id].value)
            sede_id = int(fila[col_sede_id].value)
            with transaction.atomic():
                try:
                    eMatricula = Matricula.objects.filter(inscripcion_id=inscripcion_id, nivel__periodo_id=periodo_id)
                    if eMatricula.exists():
                        eMatricula = eMatricula.first()
                        if not MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                  detallemodeloevaluativo_id=detallemodeloevaluativo_id).exists():
                            eMatriculaSedeExamen = MatriculaSedeExamen(matricula=eMatricula,
                                                                       detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                       sede_id=sede_id)
                            eMatriculaSedeExamen.save()
                            print(f"Se creo registro {eMatriculaSedeExamen.__str__()}")
                        else:
                            eMatriculaSedeExamen = MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                                      detallemodeloevaluativo_id=detallemodeloevaluativo_id).first()
                            # eMatriculaSedeExamen.sede_id=sede_id
                            # eMatriculaSedeExamen.save()
                            print(f"Se edito registro {eMatriculaSedeExamen.__str__()}")
                    else:
                        print(f"No se creo/edito registro")
                except Exception as ex:
                    transaction.set_rollback(True)
                    print(f"No se guardo registro, Error: {ex.__str__()}")


def crear_matricula_pregrado_dispacitados_sede_examen():
    # pa = os.path.join(YOUR_PATH, 'archivos', 'data_encuesta_id_24.xlsx')
    folder = os.path.join(os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_pregrado_discapacidad.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_documento = 0
    col_sede_id = 1
    detallemodeloevaluativo_id = 37
    periodo_id = 126
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            documento = fila[col_documento].value
            sede_id = int(fila[col_sede_id].value)
            with transaction.atomic():
                try:
                    ePersonas = Persona.objects.filter(Q(cedula=documento) | Q(pasaporte=documento))
                    if ePersonas.values("id").exists():
                        ePersona = ePersonas.first()
                        eMatriculas = Matricula.objects.filter(inscripcion__persona=ePersona,
                                                               nivel__periodo_id=periodo_id)
                        for eMatricula in eMatriculas:
                            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                                materiaasignada__matricula=eMatricula,
                                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                            print(
                                f"Se procede a eliminar {len(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values('id'))}")
                            eMateriaAsignadaPlanificacionSedeVirtualExamenes.delete()
                            if not MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                      detallemodeloevaluativo_id=detallemodeloevaluativo_id).exists():
                                eMatriculaSedeExamen = MatriculaSedeExamen(matricula=eMatricula,
                                                                           detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                           sede_id=sede_id)
                                eMatriculaSedeExamen.save()
                                print(f"Se creo registro {eMatriculaSedeExamen.__str__()}")
                            else:
                                eMatriculaSedeExamen = MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                                          detallemodeloevaluativo_id=detallemodeloevaluativo_id).first()
                                eMatriculaSedeExamen.sede_id = sede_id
                                eMatriculaSedeExamen.save()
                                print(f"Se edito registro {eMatriculaSedeExamen.__str__()}")
                        else:
                            print(f"No se creo/edito registro")
                    else:
                        print(f"No se encontro la persoa con ducumento {documento}")
                except Exception as ex:
                    transaction.set_rollback(True)
                    print(f"No se guardo registro, Error: {ex.__str__()}")


def crear_matricula_pregrado_extranjeros_sede_examen():
    # pa = os.path.join(YOUR_PATH, 'archivos', 'data_encuesta_id_24.xlsx')
    folder = os.path.join(os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_pregrado_migrantes.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_documento = 1
    sede_id = 11
    detallemodeloevaluativo_id = 37
    periodo_id = 126
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            documento = fila[col_documento].value
            with transaction.atomic():
                try:
                    ePersonas = Persona.objects.filter(Q(cedula=documento) | Q(pasaporte=documento))
                    if ePersonas.values("id").exists():
                        ePersona = ePersonas.first()
                        eMatriculas = Matricula.objects.filter(inscripcion__persona=ePersona,
                                                               nivel__periodo_id=periodo_id)
                        for eMatricula in eMatriculas:
                            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                                materiaasignada__matricula=eMatricula,
                                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                            print(
                                f"Se procede a eliminar {len(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values('id'))}")
                            eMateriaAsignadaPlanificacionSedeVirtualExamenes.delete()
                            if not MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                      detallemodeloevaluativo_id=detallemodeloevaluativo_id).exists():
                                eMatriculaSedeExamen = MatriculaSedeExamen(matricula=eMatricula,
                                                                           detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                           sede_id=sede_id)
                                eMatriculaSedeExamen.save()
                                print(f"Se creo registro {eMatriculaSedeExamen.__str__()}")
                            else:
                                eMatriculaSedeExamen = MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                                          detallemodeloevaluativo_id=detallemodeloevaluativo_id).first()
                                eMatriculaSedeExamen.sede_id = sede_id
                                eMatriculaSedeExamen.save()
                                print(f"Se edito registro {eMatriculaSedeExamen.__str__()}")
                        else:
                            print(f"No se creo/edito registro")
                    else:
                        print(f"No se encontro la persoa con ducumento {documento}")
                except Exception as ex:
                    transaction.set_rollback(True)
                    print(f"No se guardo registro, Error: {ex.__str__()}")


def crear_matricula_pregrado_galapagos_sede_examen():
    # pa = os.path.join(YOUR_PATH, 'archivos', 'data_encuesta_id_24.xlsx')
    folder = os.path.join(os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_pregrado_galapagos.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_inscripcion = 1
    col_documento = 3
    sede_id = 11
    detallemodeloevaluativo_id = 37
    periodo_id = 126
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            id_inscripcion = fila[col_inscripcion].value
            documento = fila[col_documento].value
            with transaction.atomic():
                try:
                    eInscripciones = Inscripcion.objects.filter(
                        Q(pk=id_inscripcion) | Q(persona__cedula=documento) | Q(persona__pasaporte=documento))
                    for eInscripcion in eInscripciones:
                        eMatriculas = Matricula.objects.filter(inscripcion=eInscripcion, nivel__periodo_id=periodo_id)
                        for eMatricula in eMatriculas:
                            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                                materiaasignada__matricula=eMatricula,
                                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                            print(
                                f"Se procede a eliminar {len(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values('id'))}")
                            eMateriaAsignadaPlanificacionSedeVirtualExamenes.delete()
                            if not MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                      detallemodeloevaluativo_id=detallemodeloevaluativo_id).exists():
                                eMatriculaSedeExamen = MatriculaSedeExamen(matricula=eMatricula,
                                                                           detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                           sede_id=sede_id)
                                eMatriculaSedeExamen.save()
                                print(f"Se creo registro {eMatriculaSedeExamen.__str__()}")
                            else:
                                eMatriculaSedeExamen = MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                                          detallemodeloevaluativo_id=detallemodeloevaluativo_id).first()
                                eMatriculaSedeExamen.sede_id = sede_id
                                eMatriculaSedeExamen.save()
                                print(f"Se edito registro {eMatriculaSedeExamen.__str__()}")
                    else:
                        print(f"No se encontro la persoa con ducumento {documento}")
                except Exception as ex:
                    transaction.set_rollback(True)
                    print(f"No se guardo registro, Error: {ex.__str__()}")


def crear_matricula_pregrado_sede_examen_ppl():
    periodo_id = 126
    sede_id = 11
    detallemodeloevaluativo_id = 37
    eMatriculas = Matricula.objects.filter(status=True, nivel__periodo=periodo_id,
                                           inscripcion__carrera__coordinacion__id__in=[1, 2, 3, 4, 5],
                                           inscripcion__persona__ppl=True).distinct().order_by(
        'inscripcion__persona__apellido1', 'inscripcion__persona__apellido2', 'inscripcion__persona__nombres')
    for eMatricula in eMatriculas:
        with transaction.atomic():
            try:
                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                    materiaasignada__matricula=eMatricula)
                print(
                    f"Se procede a eliminar planificación {len(eMateriaAsignadaPlanificacionSedeVirtualExamen.values('id'))}")
                eMateriaAsignadaPlanificacionSedeVirtualExamen.delete()
                eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula=eMatricula,
                                                                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                if not eMatriculaSedeExamenes.values("id").exists():
                    eMatriculaSedeExamen = MatriculaSedeExamen(matricula=eMatricula,
                                                               detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                               sede_id=sede_id)
                    eMatriculaSedeExamen.save()
                    print(f"Se creo registro {eMatriculaSedeExamen.__str__()}")
                else:
                    eMatriculaSedeExamen = eMatriculaSedeExamenes.first()
                    eMatriculaSedeExamen.sede_id = sede_id
                    eMatriculaSedeExamen.save()
                    print(f"Se edito registro {eMatriculaSedeExamen.__str__()}")
            except Exception as ex:
                transaction.set_rollback(True)
                print(f"No se guardo registro, Error: {ex.__str__()}")

    print(f"********************************FINALIZA PROCESO CREAR MATRICULAS SEDE")


def crear_planificacion_pregrado_sede_examen_milagro():
    fechas = [
        (datetime(2022, 9, 19, 0, 0, 0)).date(),
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
        (datetime(2022, 9, 24, 0, 0, 0)).date(),
        (datetime(2022, 9, 25, 0, 0, 0)).date(),
        (datetime(2022, 9, 26, 0, 0, 0)).date(),
        (datetime(2022, 9, 27, 0, 0, 0)).date(),
        (datetime(2022, 9, 28, 0, 0, 0)).date(),
        (datetime(2022, 9, 29, 0, 0, 0)).date(),
        (datetime(2022, 9, 30, 0, 0, 0)).date(),
        (datetime(2022, 10, 1, 0, 0, 0)).date(),
        (datetime(2022, 10, 2, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 8, 30, 0)).time(), (datetime(2022, 9, 5, 9, 59, 59)).time()],
        [(datetime(2022, 9, 5, 10, 00, 0)).time(), (datetime(2022, 9, 5, 11, 29, 59)).time()],
        [(datetime(2022, 9, 5, 11, 30, 0)).time(), (datetime(2022, 9, 5, 12, 59, 59)).time()],
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 14, 29, 59)).time()],
        [(datetime(2022, 9, 5, 14, 30, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 17, 29, 59)).time()],
        [(datetime(2022, 9, 5, 17, 30, 0)).time(), (datetime(2022, 9, 5, 18, 59, 59)).time()],
        [(datetime(2022, 9, 5, 19, 00, 0)).time(), (datetime(2022, 9, 5, 20, 29, 59)).time()],
        [(datetime(2022, 9, 5, 20, 30, 0)).time(), (datetime(2022, 9, 5, 21, 59, 59)).time()],
    ]
    sede_id = 1
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_guayaquil():
    fechas = [
        (datetime(2022, 9, 19, 0, 0, 0)).date(),
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
        (datetime(2022, 9, 26, 0, 0, 0)).date(),
        (datetime(2022, 9, 27, 0, 0, 0)).date(),
        (datetime(2022, 9, 28, 0, 0, 0)).date(),
        (datetime(2022, 9, 29, 0, 0, 0)).date(),
        (datetime(2022, 9, 30, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 8, 00, 0)).time(), (datetime(2022, 9, 5, 8, 59, 59)).time()],
        [(datetime(2022, 9, 5, 9, 00, 0)).time(), (datetime(2022, 9, 5, 9, 59, 59)).time()],
        [(datetime(2022, 9, 5, 10, 00, 0)).time(), (datetime(2022, 9, 5, 10, 59, 59)).time()],
        [(datetime(2022, 9, 5, 11, 00, 0)).time(), (datetime(2022, 9, 5, 11, 59, 59)).time()],
        [(datetime(2022, 9, 5, 12, 00, 0)).time(), (datetime(2022, 9, 5, 12, 59, 59)).time()],
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 13, 59, 59)).time()],
        [(datetime(2022, 9, 5, 14, 00, 0)).time(), (datetime(2022, 9, 5, 14, 59, 59)).time()],
        [(datetime(2022, 9, 5, 15, 00, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 16, 59, 59)).time()],
    ]
    sede_id = 13
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=1):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_babahoyo():
    fechas = [
        (datetime(2022, 9, 19, 0, 0, 0)).date(),
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
        (datetime(2022, 9, 26, 0, 0, 0)).date(),
        (datetime(2022, 9, 27, 0, 0, 0)).date(),
        (datetime(2022, 9, 28, 0, 0, 0)).date(),
        (datetime(2022, 9, 29, 0, 0, 0)).date(),
        (datetime(2022, 9, 30, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 8, 30, 0)).time(), (datetime(2022, 9, 5, 9, 44, 59)).time()],
        [(datetime(2022, 9, 5, 9, 45, 0)).time(), (datetime(2022, 9, 5, 10, 59, 59)).time()],
        [(datetime(2022, 9, 5, 11, 00, 0)).time(), (datetime(2022, 9, 5, 12, 14, 59)).time()],
        [(datetime(2022, 9, 5, 12, 15, 0)).time(), (datetime(2022, 9, 5, 13, 29, 59)).time()],
        [(datetime(2022, 9, 5, 13, 30, 0)).time(), (datetime(2022, 9, 5, 14, 44, 59)).time()],
        [(datetime(2022, 9, 5, 14, 45, 0)).time(), (datetime(2022, 9, 5, 15, 29, 59)).time()],
        [(datetime(2022, 9, 5, 15, 30, 0)).time(), (datetime(2022, 9, 5, 16, 44, 59)).time()],
    ]
    sede_id = 12
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_riobamba():
    fechas = [
        (datetime(2022, 9, 19, 0, 0, 0)).date(),
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 8, 30, 0)).time(), (datetime(2022, 9, 5, 9, 59, 59)).time()],
        [(datetime(2022, 9, 5, 10, 00, 0)).time(), (datetime(2022, 9, 5, 11, 29, 59)).time()],
        [(datetime(2022, 9, 5, 11, 30, 0)).time(), (datetime(2022, 9, 5, 12, 59, 59)).time()],
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 14, 29, 59)).time()],
        [(datetime(2022, 9, 5, 14, 30, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 17, 29, 59)).time()],
        [(datetime(2022, 9, 5, 17, 30, 0)).time(), (datetime(2022, 9, 5, 18, 59, 59)).time()],
        [(datetime(2022, 9, 5, 19, 00, 0)).time(), (datetime(2022, 9, 5, 20, 29, 59)).time()],
    ]
    sede_id = 7
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_quevedo():
    fechas = [
        (datetime(2022, 9, 19, 0, 0, 0)).date(),
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
        (datetime(2022, 9, 26, 0, 0, 0)).date(),
        (datetime(2022, 9, 27, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 8, 30, 0)).time(), (datetime(2022, 9, 5, 9, 44, 59)).time()],
        [(datetime(2022, 9, 5, 9, 45, 0)).time(), (datetime(2022, 9, 5, 10, 59, 59)).time()],
        [(datetime(2022, 9, 5, 11, 00, 0)).time(), (datetime(2022, 9, 5, 12, 14, 59)).time()],
        [(datetime(2022, 9, 5, 12, 15, 0)).time(), (datetime(2022, 9, 5, 13, 29, 59)).time()],
        [(datetime(2022, 9, 5, 13, 30, 0)).time(), (datetime(2022, 9, 5, 14, 44, 59)).time()],
        [(datetime(2022, 9, 5, 14, 45, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 17, 14, 59)).time()],
    ]
    sede_id = 5
    periodo_id = 126
    FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(Q(nombre__icontains='LAB 0'),
                                                                         sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_ibarra():
    fechas = [
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 8, 00, 0)).time(), (datetime(2022, 9, 5, 9, 29, 59)).time()],
        [(datetime(2022, 9, 5, 9, 30, 0)).time(), (datetime(2022, 9, 5, 10, 59, 59)).time()],
        [(datetime(2022, 9, 5, 11, 00, 0)).time(), (datetime(2022, 9, 5, 12, 29, 59)).time()],
        [(datetime(2022, 9, 5, 12, 30, 0)).time(), (datetime(2022, 9, 5, 13, 59, 59)).time()],
        [(datetime(2022, 9, 5, 14, 00, 0)).time(), (datetime(2022, 9, 5, 15, 29, 59)).time()],
        [(datetime(2022, 9, 5, 15, 30, 0)).time(), (datetime(2022, 9, 5, 16, 59, 59)).time()],
        [(datetime(2022, 9, 5, 17, 00, 0)).time(), (datetime(2022, 9, 5, 18, 29, 59)).time()],
        [(datetime(2022, 9, 5, 18, 30, 0)).time(), (datetime(2022, 9, 5, 19, 59, 59)).time()],
    ]
    sede_id = 4
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_santo_domingo():
    fechas = [
        (datetime(2022, 9, 19, 0, 0, 0)).date(),
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
        (datetime(2022, 9, 26, 0, 0, 0)).date(),
        (datetime(2022, 9, 27, 0, 0, 0)).date(),
        (datetime(2022, 9, 28, 0, 0, 0)).date(),
        (datetime(2022, 9, 29, 0, 0, 0)).date(),
        (datetime(2022, 9, 30, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 8, 30, 0)).time(), (datetime(2022, 9, 5, 9, 59, 59)).time()],
        [(datetime(2022, 9, 5, 10, 00, 0)).time(), (datetime(2022, 9, 5, 11, 29, 59)).time()],
        [(datetime(2022, 9, 5, 11, 30, 0)).time(), (datetime(2022, 9, 5, 12, 59, 59)).time()],
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 14, 29, 59)).time()],
        [(datetime(2022, 9, 5, 14, 30, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 17, 29, 59)).time()],
        [(datetime(2022, 9, 5, 17, 30, 0)).time(), (datetime(2022, 9, 5, 18, 59, 59)).time()],
    ]
    sede_id = 10
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(Q(nombre__icontains='AULA-PREGRADO 0'),
                                                                         sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=1):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_quito():
    fechas = [
        (datetime(2022, 9, 19, 0, 0, 0)).date(),
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
        (datetime(2022, 9, 26, 0, 0, 0)).date(),
        (datetime(2022, 9, 27, 0, 0, 0)).date(),
        (datetime(2022, 9, 28, 0, 0, 0)).date(),
        (datetime(2022, 9, 29, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 8, 30, 0)).time(), (datetime(2022, 9, 5, 9, 59, 59)).time()],
        [(datetime(2022, 9, 5, 10, 00, 0)).time(), (datetime(2022, 9, 5, 11, 29, 59)).time()],
        [(datetime(2022, 9, 5, 11, 30, 0)).time(), (datetime(2022, 9, 5, 12, 59, 59)).time()],
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 14, 29, 59)).time()],
        [(datetime(2022, 9, 5, 14, 30, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 17, 29, 59)).time()],
    ]
    sede_id = 18
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=1):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_orellana():
    fechas = [
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 13, 59, 59)).time()],
        [(datetime(2022, 9, 5, 14, 00, 0)).time(), (datetime(2022, 9, 5, 14, 59, 59)).time()],
        [(datetime(2022, 9, 5, 15, 00, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 16, 59, 59)).time()],
        [(datetime(2022, 9, 5, 17, 00, 0)).time(), (datetime(2022, 9, 5, 17, 59, 59)).time()],
        [(datetime(2022, 9, 5, 18, 00, 0)).time(), (datetime(2022, 9, 5, 18, 59, 59)).time()],
    ]
    sede_id = 14
    periodo_id = 126
    FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=2):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_machalla():
    fechas = [
        (datetime(2022, 9, 19, 0, 0, 0)).date(),
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 8, 00, 0)).time(), (datetime(2022, 9, 5, 9, 14, 59)).time()],
        [(datetime(2022, 9, 5, 9, 15, 0)).time(), (datetime(2022, 9, 5, 10, 29, 59)).time()],
        [(datetime(2022, 9, 5, 10, 30, 0)).time(), (datetime(2022, 9, 5, 11, 44, 59)).time()],
        [(datetime(2022, 9, 5, 11, 45, 0)).time(), (datetime(2022, 9, 5, 12, 59, 59)).time()],
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 14, 14, 59)).time()],
        [(datetime(2022, 9, 5, 14, 15, 0)).time(), (datetime(2022, 9, 5, 15, 29, 59)).time()],
        [(datetime(2022, 9, 5, 15, 30, 0)).time(), (datetime(2022, 9, 5, 16, 44, 59)).time()],
        [(datetime(2022, 9, 5, 16, 45, 0)).time(), (datetime(2022, 9, 5, 17, 59, 59)).time()],
    ]
    sede_id = 3
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id=1):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_santa_elena():
    fechas = [
        (datetime(2022, 9, 19, 0, 0, 0)).date(),
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 8, 30, 0)).time(), (datetime(2022, 9, 5, 9, 44, 59)).time()],
        [(datetime(2022, 9, 5, 9, 45, 0)).time(), (datetime(2022, 9, 5, 10, 59, 59)).time()],
        [(datetime(2022, 9, 5, 11, 00, 0)).time(), (datetime(2022, 9, 5, 12, 14, 59)).time()],
        [(datetime(2022, 9, 5, 12, 15, 0)).time(), (datetime(2022, 9, 5, 13, 29, 59)).time()],
        [(datetime(2022, 9, 5, 13, 30, 0)).time(), (datetime(2022, 9, 5, 14, 44, 59)).time()],
        [(datetime(2022, 9, 5, 14, 45, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 17, 14, 59)).time()],
        [(datetime(2022, 9, 5, 17, 15, 0)).time(), (datetime(2022, 9, 5, 18, 29, 59)).time()],
        [(datetime(2022, 9, 5, 18, 30, 0)).time(), (datetime(2022, 9, 5, 19, 44, 59)).time()],
    ]
    sede_id = 9
    periodo_id = 126
    FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(
                    Q(nombre__icontains='AULA-PREGRADO') | Q(nombre__icontains='LAB-PREGRADO'), sedevirtual_id=sede_id,
                    activo=True, tipo_id__in=[1, 2]).order_by('tipo_id'):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_loja():
    fechas = [
        (datetime(2022, 9, 19, 0, 0, 0)).date(),
        (datetime(2022, 9, 20, 0, 0, 0)).date(),
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 8, 30, 0)).time(), (datetime(2022, 9, 5, 9, 59, 59)).time()],
        [(datetime(2022, 9, 5, 10, 00, 0)).time(), (datetime(2022, 9, 5, 11, 29, 59)).time()],
        [(datetime(2022, 9, 5, 11, 30, 0)).time(), (datetime(2022, 9, 5, 12, 59, 59)).time()],
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 14, 29, 59)).time()],
        [(datetime(2022, 9, 5, 14, 30, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 17, 29, 59)).time()],
        [(datetime(2022, 9, 5, 17, 30, 0)).time(), (datetime(2022, 9, 5, 18, 59, 59)).time()],
        [(datetime(2022, 9, 5, 19, 00, 0)).time(), (datetime(2022, 9, 5, 20, 29, 59)).time()],
    ]
    sede_id = 8
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id__in=[1]).order_by('tipo_id'):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_manabi():
    fechas = [
        (datetime(2022, 9, 21, 0, 0, 0)).date(),
        (datetime(2022, 9, 22, 0, 0, 0)).date(),
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 10, 00, 0)).time(), (datetime(2022, 9, 5, 10, 59, 59)).time()],
        [(datetime(2022, 9, 5, 11, 00, 0)).time(), (datetime(2022, 9, 5, 11, 59, 59)).time()],
        [(datetime(2022, 9, 5, 12, 00, 0)).time(), (datetime(2022, 9, 5, 12, 59, 59)).time()],
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 13, 59, 59)).time()],
        [(datetime(2022, 9, 5, 14, 00, 0)).time(), (datetime(2022, 9, 5, 14, 59, 59)).time()],
        [(datetime(2022, 9, 5, 15, 00, 0)).time(), (datetime(2022, 9, 5, 15, 59, 59)).time()],
        [(datetime(2022, 9, 5, 16, 00, 0)).time(), (datetime(2022, 9, 5, 16, 59, 59)).time()],
    ]
    sede_id = 15
    periodo_id = 126
    FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(
                    Q(nombre__icontains='AULA-PREGRADO') | Q(nombre__icontains='LAB-PREGRADO'), sedevirtual_id=sede_id,
                    activo=True, tipo_id__in=[1, 2]).order_by('tipo_id'):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_discapacitado():
    fechas = [
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
        (datetime(2022, 9, 24, 0, 0, 0)).date(),
        (datetime(2022, 9, 25, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 00, 00, 1)).time(), (datetime(2022, 9, 5, 23, 59, 59)).time()],
    ]
    sede_id = 11
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(Q(nombre__icontains='VIRTUAL-PREGRADO (VIR-D'),
                                                                         sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id__in=[5]).order_by('tipo_id'):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_extranjeros():
    fechas = [
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
        (datetime(2022, 9, 24, 0, 0, 0)).date(),
        (datetime(2022, 9, 25, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 00, 00, 1)).time(), (datetime(2022, 9, 5, 23, 59, 59)).time()],
    ]
    sede_id = 11
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(Q(nombre__icontains='VIRTUAL-PREGRADO (VIR-E'),
                                                                         sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id__in=[5]).order_by('tipo_id'):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_galapagos():
    fechas = [
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
        (datetime(2022, 9, 24, 0, 0, 0)).date(),
        (datetime(2022, 9, 25, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 00, 00, 1)).time(), (datetime(2022, 9, 5, 23, 59, 59)).time()],
    ]
    sede_id = 11
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(Q(nombre__icontains='VIRTUAL-PREGRADO (VIR-G'),
                                                                         sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id__in=[5]).order_by('tipo_id'):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_ppl():
    fechas = [
        (datetime(2022, 9, 26, 0, 0, 0)).date(),
        (datetime(2022, 9, 27, 0, 0, 0)).date(),
        (datetime(2022, 9, 28, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 00, 00, 1)).time(), (datetime(2022, 9, 5, 23, 59, 59)).time()],
    ]
    sede_id = 11
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(Q(nombre__icontains='VIRTUAL-PREGRADO (VIR-P'),
                                                                         sedevirtual_id=sede_id, activo=True,
                                                                         tipo_id__in=[5]).order_by('tipo_id'):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_pregrado_sede_examen_cuenca():
    fechas = [
        (datetime(2022, 10, 1, 0, 0, 0)).date(),
        (datetime(2022, 10, 2, 0, 0, 0)).date(),
    ]

    horas = [
        [(datetime(2022, 9, 5, 9, 00, 0)).time(), (datetime(2022, 9, 5, 9, 59, 59)).time()],
        [(datetime(2022, 9, 5, 10, 00, 0)).time(), (datetime(2022, 9, 5, 10, 59, 59)).time()],
        [(datetime(2022, 9, 5, 11, 00, 0)).time(), (datetime(2022, 9, 5, 11, 59, 59)).time()],
        [(datetime(2022, 9, 5, 12, 00, 0)).time(), (datetime(2022, 9, 5, 12, 59, 59)).time()],
        [(datetime(2022, 9, 5, 13, 00, 0)).time(), (datetime(2022, 9, 5, 13, 59, 59)).time()],
        [(datetime(2022, 9, 5, 14, 30, 0)).time(), (datetime(2022, 9, 5, 14, 59, 59)).time()],
    ]
    sede_id = 19
    periodo_id = 126
    # FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id, periodo_id=periodo_id).delete()
    for fecha in fechas:
        print(f"*** FECHA: {fecha}")
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id,
                                                                                                    fecha=fecha)
        if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
            eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
                                                                                       periodo_id=periodo_id,
                                                                                       fecha=fecha)
            eFechaPlanificacionSedeVirtualExamen.save()
        else:
            eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()

        for hora in horas:
            horainicio = hora[0]
            horafin = hora[1]
            print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
            if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
                eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
                    horainicio=horainicio,
                    horafin=horafin)
                eTurnoPlanificacionSedeVirtualExamen.save()
            else:
                eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()

            for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True).order_by(
                    'tipo_id'):
                print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
                if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
                        aula=eLaboratorioVirtual)
                    eAulaPlanificacionSedeVirtualExamen.save()
                else:
                    eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def planificar_pregrado_unemi_v2(limite_x_día=2):
    sede_id = 1
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # if DEBUG:
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    # eCarreras = Carrera.objects.filter(pk__in=eMallas.values_list('carrera__id', flat=True))
    # eCoordinaciones = Coordinacion.objects.filter(pk__in=eCarreras.values_list('coordinacion__id', flat=True)).distinct()
    # for eCoordinacion in eCoordinaciones:
    #     eMallas = eMallas.filter(carrera_id__in=eCoordinacion.carreras().values_list('id', flat=True)).order_by('carrera__nombre', 'inicio')
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin

                # eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(turnoplanificacion__fechaplanificacion__sede_id=sede_id,
                #                                                                                           turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                # totalAulaSinLlenar = len(eAulaPlanificacionSedeVirtualExamenes.values("id"))
                contadorAulaSinLlenar = 0
                # banderaBreakAula = False
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    # horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                    # horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    # fecha = eFechaPlanificacionSedeVirtualExamen.fecha
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        # sql =f"""
                        #         SELECT DISTINCT dd."matricula_id"
                        #         FROM (
                        #             SELECT sga_ma."id", sga_ma.matricula_id, (
                        #             SELECT COUNT(*)
                        #             FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        #             WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        #             FROM sga_materiaasignada AS sga_ma
                        #             INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        #             INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        #             INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        #             INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        #             WHERE sga_n.periodo_id={str(periodo_id)} AND
                        #             sga_ma.status= TRUE AND
                        #             sga_m.status= TRUE AND
                        #             --sga_i.modalidad_id = 3 AND
                        #             sga_m1.asignatura_id != 4837 AND
                        #             sga_m.bloqueomatricula = FALSE AND
                        #             sga_m.retiradomatricula = FALSE AND
                        #             sga_m."id" IN (SELECT inno_m.matricula_id
                        #                 FROM inno_matriculasedeexamen AS inno_m
                        #                 INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                        #                 INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                        #                 WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                        #         WHERE dd.planificados = 0"""
                        # cursor.execute(sql)
                        # results = cursor.fetchall()
                        # ids_matricula = [r[0] for r in results]
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        # eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            # banderaBreakAula = True
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_guayaquil_v2(limite_x_día=2, fecha=None, matricula=None):
    sede_id = 13
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    if matricula:
        eMatriculaSedeExamenes = eMatriculaSedeExamenes.filter(matricula=matricula)
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        if fecha:
            eFechaPlanificacionSedeVirtualExamenes = eFechaPlanificacionSedeVirtualExamenes.filter(fecha__gt=fecha)
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_babahoyo_v2(limite_x_día=2):
    sede_id = 12
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_riobamba_v2(limite_x_día=2):
    sede_id = 7
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_quevedo_v2(limite_x_día=2):
    sede_id = 5
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_ibarra_v2(limite_x_día=2):
    sede_id = 4
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_santo_domingo_v2(limite_x_día=2):
    sede_id = 10
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_quito_v2(limite_x_día=2):
    sede_id = 18
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_orellana_v2(limite_x_día=2):
    sede_id = 14
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_machala_v2(limite_x_día=2):
    sede_id = 3
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_santa_elena_v2(limite_x_día=2):
    sede_id = 9
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_loja_v2(limite_x_día=2):
    sede_id = 8
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_manabi_v2(limite_x_día=2):
    sede_id = 15
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_cuenca_v2(limite_x_día=2):
    sede_id = 19
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_discapacitado_v2(limite_x_día=2, matricula=None, f=None):
    sede_id = 11
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    if matricula:
        eMatriculaSedeExamenes = eMatriculaSedeExamenes.filter(matricula=matricula)

    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        if f:
            eFechaPlanificacionSedeVirtualExamenes = eFechaPlanificacionSedeVirtualExamenes.filter(
                fecha__gte=f).order_by('fecha')

        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        # filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                        #                       aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                        #                       aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                        #                     Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                        #                       aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                        #                       aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        # ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude = (list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_extranejeros_v2(limite_x_día=2, matricula=None, f=None):
    sede_id = 11
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    folder = os.path.join(os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_pregrado_migrantes.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_documento = 1
    ids_m = []
    fechas = [
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
        (datetime(2022, 9, 24, 0, 0, 0)).date(),
        (datetime(2022, 9, 25, 0, 0, 0)).date(),
    ]
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            documento = fila[col_documento].value
            ePersonas = Persona.objects.filter(Q(cedula=documento) | Q(pasaporte=documento))
            if ePersonas.values("id").exists():
                ePersona = ePersonas.first()
                eMatriculas = Matricula.objects.filter(inscripcion__persona=ePersona, nivel__periodo_id=periodo_id)
                if eMatriculas.values("id").exists():
                    ids_m.extend(list(eMatriculas.values_list("id", flat=True)))

    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula_id__in=ids_m, sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    if matricula:
        eMatriculaSedeExamenes = eMatriculaSedeExamenes.filter(matricula=matricula)
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        for fecha in fechas:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                        periodo_id=periodo_id,
                                                                                                        fecha=fecha).order_by(
                'fecha')
            if f:
                eFechaPlanificacionSedeVirtualExamenes = eFechaPlanificacionSedeVirtualExamenes.filter(fecha__gte=f)

            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                fecha = eFechaPlanificacionSedeVirtualExamen.fecha
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                    horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        Q(aula__nombre__icontains='VIRTUAL-PREGRADO (VIR-E'),
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                        total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                            materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                            status=True))).filter(total_general=F('aula__capacidad'))
                    eAulaPlanificacionSedeVirtualExamenes.exclude(
                        pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                    eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                        'turnoplanificacion__fechaplanificacion__fecha',
                        'turnoplanificacion__horainicio').distinct()
                    contadorAulaSinLlenar = 0
                    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                        eAula = eAulaPlanificacionSedeVirtualExamen.aula
                        capacidad = eAula.capacidad
                        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                        if cantidadad_planificadas < capacidad:
                            print(
                                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                                status=True,
                                aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                            # filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                            #                       aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                            #                       aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                            #                     Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                            #                       aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                            #                       aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                            eMatriculas = Matricula.objects.filter(
                                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                status=True,
                                retiradomatricula=False,
                                bloqueomatricula=False,
                                nivel__periodo_id=periodo_id,
                                inscripcion__inscripcionmalla__malla=eMalla)
                            eMatriculas_exclude_planificadas = eMatriculas.annotate(
                                total_planificadas=Count('materiaasignada__id', filter=Q(
                                    materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                         status=True),
                                total_general=Count('materiaasignada__id',
                                                    filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                    exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                        materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                            "id", flat=True)))).filter(
                                Q(total_general=F('total_planificadas')))
                            eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                                total_planificadas=Count('materiaasignada__id', filter=Q(
                                    materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True).filter(
                                        aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                    status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                                Q(total_planificadas=limite_x_día))
                            eMatriculas_exclude_ingles = eMatriculas.annotate(
                                total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                        "id", flat=True), nivel__periodo_id=periodo_id, status=True)),
                                total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                    filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                                total_general=F('total_ingles'))
                            # ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                            ids_exclude = (list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                            ids_exclude.extend(
                                list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                            ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                            sql = f"""SELECT 
                                        "sga_matricula"."id", 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                        FROM "sga_malla" U0
                                                                                                                        WHERE U0."id" IN (353, 22)
                                                                                                                    ) AND 
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status"
                                                                    )
                                                        ) AS "total_general", 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                        FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                        INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                        WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                    ) AND
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status")
                                                        ) AS "total_planificadas"
                                    FROM "sga_matricula"
                                    INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                    INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                    INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                    INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                    LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                    LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                    LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                    WHERE (
                                        NOT "sga_matricula"."bloqueomatricula" AND 
                                        "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                        "sga_nivel"."periodo_id" = {periodo_id} AND 
                                        "sga_matricula"."id" IN (
                                                                            SELECT DISTINCT 
                                                                                U0."matricula_id"
                                                                            FROM "inno_matriculasedeexamen" U0
                                                                                INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                                INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                            WHERE (
                                                                                        U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                        U3."periodo_id" = {periodo_id} AND 
                                                                                        NOT U2."retiradomatricula" AND 
                                                                                        U2."status" AND 
                                                                                        U0."sede_id" = {sede_id} AND 
                                                                                        U0."status"
                                                                                    )
                                                                        ) AND 
                                        NOT "sga_matricula"."retiradomatricula" AND 
                                        "sga_matricula"."status"
                                        )
                                    GROUP BY "sga_matricula"."id"
                                    HAVING 
                                            COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                        FROM "sga_malla" U0
                                                                                                                        WHERE U0."id" IN (353, 22)
                                                                                                                    ) AND 
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status"
                                                                    )
                                                        ) 
                                            <> 
                                            COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                        FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                        INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                        WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                    ) AND
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status")
                                    )"""
                            cursor.execute(sql)
                            results = cursor.fetchall()
                            ids_matricula = [r[0] for r in results]
                            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                            eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                               'inscripcion__persona__apellido1',
                                                               'inscripcion__persona__apellido2',
                                                               'inscripcion__persona__nombres').distinct()
                            contador = cantidadad_planificadas
                            if not eMatriculas.values("id").exists():
                                contadorAulaSinLlenar += 1

                            if contadorAulaSinLlenar > 0:
                                break
                            for eMatricula in eMatriculas:
                                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                                eMateriaAsignadas = eMateriaAsignadas.exclude(
                                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True)) |
                                    Q(materia__asignatura__id=4837) |
                                    Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                       flat=True)))
                                eMateriaAsignadas = eMateriaAsignadas.order_by(
                                    'materia__asignaturamalla__nivelmalla__orden')
                                if eMateriaAsignadas.values("id").exists():
                                    eMateriaAsignada = eMateriaAsignadas.first()
                                    contador += 1
                                    print(
                                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                        materiaasignada=eMateriaAsignada,
                                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                    if contador >= capacidad:
                                        break


def planificar_pregrado_reprogramacion_v2(matricula, limite_x_día=2, f=None):
    sede_id = 11
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    fechas = [
        (datetime(2022, 9, 29, 0, 0, 0)).date(),
        (datetime(2022, 9, 30, 0, 0, 0)).date(),
        (datetime(2022, 10, 1, 0, 0, 0)).date(),
    ]
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula=matricula, sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    if matricula:
        eMatriculaSedeExamenes = eMatriculaSedeExamenes.filter(matricula=matricula)

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        for fecha in fechas:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                        periodo_id=periodo_id,
                                                                                                        fecha=fecha).order_by(
                'fecha')
            if f:
                eFechaPlanificacionSedeVirtualExamenes = eFechaPlanificacionSedeVirtualExamenes.filter(fecha__gte=f)

            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                fecha = eFechaPlanificacionSedeVirtualExamen.fecha
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                    horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        Q(aula__nombre__icontains='VIRTUAL-PREGRADO (VIR-R'),
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                        total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                            materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                            status=True))).filter(total_general=F('aula__capacidad'))
                    eAulaPlanificacionSedeVirtualExamenes.exclude(
                        pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                    eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                        'turnoplanificacion__fechaplanificacion__fecha',
                        'turnoplanificacion__horainicio').distinct()
                    contadorAulaSinLlenar = 0
                    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                        eAula = eAulaPlanificacionSedeVirtualExamen.aula
                        capacidad = eAula.capacidad
                        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                        if cantidadad_planificadas < capacidad:
                            print(
                                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                                status=True,
                                aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                            # filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                            #                       aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                            #                       aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                            #                     Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                            #                       aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                            #                       aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                            eMatriculas = Matricula.objects.filter(
                                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                status=True,
                                retiradomatricula=False,
                                bloqueomatricula=False,
                                nivel__periodo_id=periodo_id,
                                inscripcion__inscripcionmalla__malla=eMalla)
                            eMatriculas_exclude_planificadas = eMatriculas.annotate(
                                total_planificadas=Count('materiaasignada__id', filter=Q(
                                    materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                         status=True),
                                total_general=Count('materiaasignada__id',
                                                    filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                    exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                        materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                            "id", flat=True)))).filter(
                                Q(total_general=F('total_planificadas')))
                            eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                                total_planificadas=Count('materiaasignada__id', filter=Q(
                                    materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True).filter(
                                        aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                    status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                                Q(total_planificadas=limite_x_día))
                            eMatriculas_exclude_ingles = eMatriculas.annotate(
                                total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                        "id", flat=True), nivel__periodo_id=periodo_id, status=True)),
                                total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                    filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                                total_general=F('total_ingles'))
                            # ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                            ids_exclude = (list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                            ids_exclude.extend(
                                list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                            ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                            sql = f"""SELECT 
                                        "sga_matricula"."id", 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                        FROM "sga_malla" U0
                                                                                                                        WHERE U0."id" IN (353, 22)
                                                                                                                    ) AND 
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status"
                                                                    )
                                                        ) AS "total_general", 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                        FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                        INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                        WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                    ) AND
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status")
                                                        ) AS "total_planificadas"
                                    FROM "sga_matricula"
                                    INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                    INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                    INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                    INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                    LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                    LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                    LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                    WHERE (
                                        NOT "sga_matricula"."bloqueomatricula" AND 
                                        "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                        "sga_nivel"."periodo_id" = {periodo_id} AND 
                                        "sga_matricula"."id" IN (
                                                                            SELECT DISTINCT 
                                                                                U0."matricula_id"
                                                                            FROM "inno_matriculasedeexamen" U0
                                                                                INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                                INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                            WHERE (
                                                                                        U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                        U3."periodo_id" = {periodo_id} AND 
                                                                                        NOT U2."retiradomatricula" AND 
                                                                                        U2."status" AND 
                                                                                        U0."sede_id" = {sede_id} AND 
                                                                                        U0."status"
                                                                                    )
                                                                        ) AND 
                                        NOT "sga_matricula"."retiradomatricula" AND 
                                        "sga_matricula"."status"
                                        )
                                    GROUP BY "sga_matricula"."id"
                                    HAVING 
                                            COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                        FROM "sga_malla" U0
                                                                                                                        WHERE U0."id" IN (353, 22)
                                                                                                                    ) AND 
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status"
                                                                    )
                                                        ) 
                                            <> 
                                            COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                        FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                        INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                        WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                    ) AND
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status")
                                    )"""
                            cursor.execute(sql)
                            results = cursor.fetchall()
                            ids_matricula = [r[0] for r in results]
                            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                            eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                               'inscripcion__persona__apellido1',
                                                               'inscripcion__persona__apellido2',
                                                               'inscripcion__persona__nombres').distinct()
                            contador = cantidadad_planificadas
                            if not eMatriculas.values("id").exists():
                                contadorAulaSinLlenar += 1

                            if contadorAulaSinLlenar > 0:
                                break
                            for eMatricula in eMatriculas:
                                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                                eMateriaAsignadas = eMateriaAsignadas.exclude(
                                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True)) |
                                    Q(materia__asignatura__id=4837) |
                                    Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                       flat=True)))
                                eMateriaAsignadas = eMateriaAsignadas.order_by(
                                    'materia__asignaturamalla__nivelmalla__orden')
                                if eMateriaAsignadas.values("id").exists():
                                    eMateriaAsignada = eMateriaAsignadas.first()
                                    contador += 1
                                    print(
                                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                        materiaasignada=eMateriaAsignada,
                                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                    if contador >= capacidad:
                                        break


def planificar_pregrado_galapagos_v2(limite_x_día=2):
    sede_id = 11
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    folder = os.path.join(os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', 'data_pregrado_galapagos.xlsx'))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    all_rows = sheet.rows
    linea = 0
    col_id_inscripcion = 1
    col_documento = 3
    ids_m = []
    fechas = [
        (datetime(2022, 9, 23, 0, 0, 0)).date(),
        (datetime(2022, 9, 24, 0, 0, 0)).date(),
        (datetime(2022, 9, 25, 0, 0, 0)).date(),
    ]
    for fila in all_rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            id_inscripcion = fila[col_id_inscripcion].value
            documento = fila[col_documento].value
            eInscripciones = Inscripcion.objects.filter(
                Q(pk=id_inscripcion) | Q(persona__cedula=documento) | Q(persona__pasaporte=documento))
            for eInscripcion in eInscripciones:
                eMatriculas = Matricula.objects.filter(inscripcion=eInscripcion, nivel__periodo_id=periodo_id)
                if eMatriculas.values("id").exists():
                    ids_m.extend(list(eMatriculas.values_list("id", flat=True)))

    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula_id__in=ids_m, sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        for fecha in fechas:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                        periodo_id=periodo_id,
                                                                                                        fecha=fecha).order_by(
                'fecha')
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                fecha = eFechaPlanificacionSedeVirtualExamen.fecha
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                    horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        Q(aula__nombre__icontains='VIRTUAL-PREGRADO (VIR-G'),
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                        total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                            materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                            status=True))).filter(total_general=F('aula__capacidad'))
                    eAulaPlanificacionSedeVirtualExamenes.exclude(
                        pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                    eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                        'turnoplanificacion__fechaplanificacion__fecha',
                        'turnoplanificacion__horainicio').distinct()
                    contadorAulaSinLlenar = 0
                    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                        eAula = eAulaPlanificacionSedeVirtualExamen.aula
                        capacidad = eAula.capacidad
                        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                        if cantidadad_planificadas < capacidad:
                            print(
                                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                                status=True,
                                aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                            # filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                            #                       aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                            #                       aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                            #                     Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                            #                       aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                            #                       aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                            eMatriculas = Matricula.objects.filter(
                                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                status=True,
                                retiradomatricula=False,
                                bloqueomatricula=False,
                                nivel__periodo_id=periodo_id,
                                inscripcion__inscripcionmalla__malla=eMalla)
                            eMatriculas_exclude_planificadas = eMatriculas.annotate(
                                total_planificadas=Count('materiaasignada__id', filter=Q(
                                    materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                         status=True),
                                total_general=Count('materiaasignada__id',
                                                    filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                    exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                        materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                            "id", flat=True)))).filter(
                                Q(total_general=F('total_planificadas')))
                            eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                                total_planificadas=Count('materiaasignada__id', filter=Q(
                                    materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True).filter(
                                        aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                    status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                                Q(total_planificadas=limite_x_día))
                            eMatriculas_exclude_ingles = eMatriculas.annotate(
                                total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                        "id", flat=True), nivel__periodo_id=periodo_id, status=True)),
                                total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                    filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                                total_general=F('total_ingles'))
                            # ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                            ids_exclude = (list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                            ids_exclude.extend(
                                list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                            ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                            sql = f"""SELECT 
                                        "sga_matricula"."id", 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                        FROM "sga_malla" U0
                                                                                                                        WHERE U0."id" IN (353, 22)
                                                                                                                    ) AND 
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status"
                                                                    )
                                                        ) AS "total_general", 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                        FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                        INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                        WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                    ) AND
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status")
                                                        ) AS "total_planificadas"
                                    FROM "sga_matricula"
                                    INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                    INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                    INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                    INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                    LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                    LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                    LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                    WHERE (
                                        NOT "sga_matricula"."bloqueomatricula" AND 
                                        "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                        "sga_nivel"."periodo_id" = {periodo_id} AND 
                                        "sga_matricula"."id" IN (
                                                                            SELECT DISTINCT 
                                                                                U0."matricula_id"
                                                                            FROM "inno_matriculasedeexamen" U0
                                                                                INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                                INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                            WHERE (
                                                                                        U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                        U3."periodo_id" = {periodo_id} AND 
                                                                                        NOT U2."retiradomatricula" AND 
                                                                                        U2."status" AND 
                                                                                        U0."sede_id" = {sede_id} AND 
                                                                                        U0."status"
                                                                                    )
                                                                        ) AND 
                                        NOT "sga_matricula"."retiradomatricula" AND 
                                        "sga_matricula"."status"
                                        )
                                    GROUP BY "sga_matricula"."id"
                                    HAVING 
                                            COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                        FROM "sga_malla" U0
                                                                                                                        WHERE U0."id" IN (353, 22)
                                                                                                                    ) AND 
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status"
                                                                    )
                                                        ) 
                                            <> 
                                            COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                        FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                        INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                        WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                    ) AND
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status")
                                    )"""
                            cursor.execute(sql)
                            results = cursor.fetchall()
                            ids_matricula = [r[0] for r in results]
                            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                            eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                               'inscripcion__persona__apellido1',
                                                               'inscripcion__persona__apellido2',
                                                               'inscripcion__persona__nombres').distinct()
                            contador = cantidadad_planificadas
                            if not eMatriculas.values("id").exists():
                                contadorAulaSinLlenar += 1

                            if contadorAulaSinLlenar > 0:
                                break
                            for eMatricula in eMatriculas:
                                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                                eMateriaAsignadas = eMateriaAsignadas.exclude(
                                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True)) |
                                    Q(materia__asignatura__id=4837) |
                                    Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                       flat=True)))
                                eMateriaAsignadas = eMateriaAsignadas.order_by(
                                    'materia__asignaturamalla__nivelmalla__orden')
                                if eMateriaAsignadas.values("id").exists():
                                    eMateriaAsignada = eMateriaAsignadas.first()
                                    contador += 1
                                    print(
                                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                        materiaasignada=eMateriaAsignada,
                                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                    if contador >= capacidad:
                                        break


def planificar_pregrado_ppl_v2(limite_x_día=2):
    sede_id = 11
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    fechas = [
        (datetime(2022, 9, 26, 0, 0, 0)).date(),
        (datetime(2022, 9, 27, 0, 0, 0)).date(),
        (datetime(2022, 9, 28, 0, 0, 0)).date(),
    ]
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculas = Matricula.objects.filter(status=True, nivel__periodo=periodo_id,
                                           inscripcion__carrera__coordinacion__id__in=[1, 2, 3, 4, 5],
                                           inscripcion__persona__ppl=True).distinct().order_by(
        'inscripcion__persona__apellido1', 'inscripcion__persona__apellido2', 'inscripcion__persona__nombres')
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(matricula__in=eMatriculas,
                                                                sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        for fecha in fechas:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(fecha=fecha,
                                                                                                        sede_id=sede_id,
                                                                                                        periodo_id=periodo_id).order_by(
                'fecha')
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                fecha = eFechaPlanificacionSedeVirtualExamen.fecha
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                    horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                        total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                            materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                            status=True))).filter(total_general=F('aula__capacidad'))
                    eAulaPlanificacionSedeVirtualExamenes.exclude(
                        pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                    eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                        'turnoplanificacion__fechaplanificacion__fecha',
                        'turnoplanificacion__horainicio').distinct()
                    contadorAulaSinLlenar = 0
                    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                        eAula = eAulaPlanificacionSedeVirtualExamen.aula
                        capacidad = eAula.capacidad
                        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                        if cantidadad_planificadas < capacidad:
                            print(
                                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                                status=True,
                                aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                            # filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                            #                       aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                            #                       aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                            #                     Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                            #                       aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                            #                       aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                            eMatriculas = Matricula.objects.filter(
                                pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                status=True,
                                retiradomatricula=False,
                                bloqueomatricula=False,
                                nivel__periodo_id=periodo_id,
                                inscripcion__inscripcionmalla__malla=eMalla)
                            eMatriculas_exclude_planificadas = eMatriculas.annotate(
                                total_planificadas=Count('materiaasignada__id', filter=Q(
                                    materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                         status=True),
                                total_general=Count('materiaasignada__id',
                                                    filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                    exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                        materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                            "id", flat=True)))).filter(
                                Q(total_general=F('total_planificadas')))
                            eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                                total_planificadas=Count('materiaasignada__id', filter=Q(
                                    materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True).filter(
                                        aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                    status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                                Q(total_planificadas=limite_x_día))
                            eMatriculas_exclude_ingles = eMatriculas.annotate(
                                total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                        "id", flat=True), nivel__periodo_id=periodo_id, status=True)),
                                total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                    filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                                total_general=F('total_ingles'))
                            # ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list("materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                            ids_exclude = (list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                            ids_exclude.extend(
                                list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                            ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                            eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                            sql = f"""SELECT 
                                        "sga_matricula"."id", 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                        FROM "sga_malla" U0
                                                                                                                        WHERE U0."id" IN (353, 22)
                                                                                                                    ) AND 
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status"
                                                                    )
                                                        ) AS "total_general", 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                        FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                        INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                        WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                    ) AND
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status")
                                                        ) AS "total_planificadas"
                                    FROM "sga_matricula"
                                    INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                    INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                    INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                    INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                    LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                    LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                    LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                    WHERE (
                                        NOT "sga_matricula"."bloqueomatricula" AND 
                                        "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                        "sga_nivel"."periodo_id" = {periodo_id} AND 
                                        "sga_matricula"."id" IN (
                                                                            SELECT DISTINCT 
                                                                                U0."matricula_id"
                                                                            FROM "inno_matriculasedeexamen" U0
                                                                                INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                                INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                            WHERE (
                                                                                        U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                        U3."periodo_id" = {periodo_id} AND 
                                                                                        NOT U2."retiradomatricula" AND 
                                                                                        U2."status" AND 
                                                                                        U0."sede_id" = {sede_id} AND 
                                                                                        U0."status"
                                                                                    )
                                                                        ) AND 
                                        NOT "sga_matricula"."retiradomatricula" AND 
                                        "sga_matricula"."status"
                                        )
                                    GROUP BY "sga_matricula"."id"
                                    HAVING 
                                            COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                        FROM "sga_malla" U0
                                                                                                                        WHERE U0."id" IN (353, 22)
                                                                                                                    ) AND 
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status"
                                                                    )
                                                        ) 
                                            <> 
                                            COUNT("sga_materia"."asignaturamalla_id") 
                                                FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                        FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                        INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                        WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                    ) AND
                                                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                    "sga_matricula"."status")
                                    )"""
                            cursor.execute(sql)
                            results = cursor.fetchall()
                            ids_matricula = [r[0] for r in results]
                            eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                            eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                               'inscripcion__persona__apellido1',
                                                               'inscripcion__persona__apellido2',
                                                               'inscripcion__persona__nombres').distinct()
                            contador = cantidadad_planificadas
                            if not eMatriculas.values("id").exists():
                                contadorAulaSinLlenar += 1

                            if contadorAulaSinLlenar > 0:
                                break
                            for eMatricula in eMatriculas:
                                eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                                eMateriaAsignadas = eMateriaAsignadas.exclude(
                                    Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                        "materiaasignada__id", flat=True)) |
                                    Q(materia__asignatura__id=4837) |
                                    Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                       flat=True)))
                                eMateriaAsignadas = eMateriaAsignadas.order_by(
                                    'materia__asignaturamalla__nivelmalla__orden')
                                if eMateriaAsignadas.values("id").exists():
                                    eMateriaAsignada = eMateriaAsignadas.first()
                                    contador += 1
                                    print(
                                        f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                        aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                        materiaasignada=eMateriaAsignada,
                                        detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                    if contador >= capacidad:
                                        break


def planificar_pregrado_presencial_virtual_unemi_v2(limite_x_día=2):
    sede_id = 1
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    sql = f"""SELECT DISTINCT sga_m.id
                FROM sga_matricula AS sga_m
                INNER JOIN sga_nivel AS sga_n ON sga_n.id = sga_m.nivel_id
                INNER JOIN sga_inscripcion AS sga_i ON sga_i.id = sga_m.inscripcion_id
                INNER JOIN sga_materiaasignada AS sga_ma ON sga_ma.matricula_id = sga_m.id
                INNER JOIN sga_materia AS sga_mat ON sga_mat.id = sga_ma.materia_id
                INNER JOIN sga_asignaturamalla AS sga_am ON sga_am.id = sga_mat.asignaturamalla_id
                INNER JOIN sga_malla as sga_mal ON sga_mal.id= sga_am.malla_id 
                WHERE 
                sga_i.modalidad_id != 3 AND sga_n.periodo_id={periodo_id} AND sga_m.status= TRUE AND sga_m.retiradomatricula= FALSE AND 
                sga_mal.modalidad_id = 3 AND sga_ma.retiramateria= FALSE AND sga_ma.status = TRUE"""
    cursor.execute(sql)
    results = cursor.fetchall()
    ids_matricula = [r[0] for r in results]
    eMatriculas = Matricula.objects.filter(pk__in=ids_matricula, status=True, retiradomatricula=False,
                                           bloqueomatricula=False, nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                contadorAulaSinLlenar = 0
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        eMatriculas = Matricula.objects.filter(pk__in=ids_matricula,
                                                               status=True,
                                                               retiradomatricula=False,
                                                               bloqueomatricula=False,
                                                               nivel__periodo_id=periodo_id,
                                                               inscripcion__inscripcionmalla__malla=eMalla)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula,
                                                                               retiramateria=False,
                                                                               materia__asignaturamalla__malla__modalidad_id=3)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_pregrado_unico_v2(sede_id=1, limite_x_día=2, matricula=None, fecha=None):
    periodo_id = 126
    detallemodeloevaluativo_id = 37
    cursor = connections['sga_select'].cursor()
    eMallasIngles = Malla.objects.filter(pk__in=[353, 22]).values_list('id', flat=True)
    eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
                                                                detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                status=True, matricula__status=True,
                                                                matricula__retiradomatricula=False,
                                                                matricula__nivel__periodo_id=periodo_id).distinct()
    if matricula:
        eMatriculaSedeExamenes = eMatriculaSedeExamenes.filter(matricula=matricula)
    # if DEBUG:
    # MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
    #                                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=sede_id,
    #                                                              detallemodeloevaluativo_id=detallemodeloevaluativo_id).delete()

    eMatriculas = Matricula.objects.filter(pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                                           status=True, retiradomatricula=False, bloqueomatricula=False,
                                           nivel__periodo_id=periodo_id)
    eMatriculas_exclude_ingles = eMatriculas.annotate(
        total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
            materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list('id', flat=True),
            nivel__periodo_id=periodo_id, status=True)),
        total_general=Count('materiaasignada__materia__asignaturamalla__id',
                            filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
        total_general=F('total_ingles'))
    ids_exclude = []
    ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
    eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
    eMallas = Malla.objects.filter(
        pk__in=eMatriculas.values_list('inscripcion__inscripcionmalla__malla_id', flat=True).distinct()).exclude(
        id__in=eMallasIngles)
    # eCarreras = Carrera.objects.filter(pk__in=eMallas.values_list('carrera__id', flat=True))
    # eCoordinaciones = Coordinacion.objects.filter(pk__in=eCarreras.values_list('coordinacion__id', flat=True)).distinct()
    # for eCoordinacion in eCoordinaciones:
    #     eMallas = eMallas.filter(carrera_id__in=eCoordinacion.carreras().values_list('id', flat=True)).order_by('carrera__nombre', 'inicio')
    eMallas = eMallas.order_by('carrera__nombre', 'inicio')
    for eMalla in eMallas:
        eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
                                                                                                    periodo_id=periodo_id).order_by(
            'fecha')
        if fecha:
            eFechaPlanificacionSedeVirtualExamenes = eFechaPlanificacionSedeVirtualExamenes.filter(fecha__gte=fecha)
        for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
            fecha = eFechaPlanificacionSedeVirtualExamen.fecha
            eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                fechaplanificacion=eFechaPlanificacionSedeVirtualExamen).order_by('horainicio')
            for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin

                # eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(turnoplanificacion__fechaplanificacion__sede_id=sede_id,
                #                                                                                           turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
                eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                eAulaPlanificacionSedeVirtualExamenes_exclude_llenos = eAulaPlanificacionSedeVirtualExamenes.annotate(
                    total_general=Count('materiaasignadaplanificacionsedevirtualexamen__id', filter=Q(
                        materiaasignadaplanificacionsedevirtualexamen__materiaasignada__matricula__nivel__periodo_id=periodo_id,
                        status=True))).filter(total_general=F('aula__capacidad'))
                eAulaPlanificacionSedeVirtualExamenes.exclude(
                    pk__in=eAulaPlanificacionSedeVirtualExamenes_exclude_llenos.values_list("id", flat=True))
                eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.order_by(
                    'turnoplanificacion__fechaplanificacion__fecha',
                    'turnoplanificacion__horainicio').distinct()
                # totalAulaSinLlenar = len(eAulaPlanificacionSedeVirtualExamenes.values("id"))
                contadorAulaSinLlenar = 0
                # banderaBreakAula = False
                for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                    eAula = eAulaPlanificacionSedeVirtualExamen.aula
                    capacidad = eAula.capacidad
                    cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    # horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                    # horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    # fecha = eFechaPlanificacionSedeVirtualExamen.fecha
                    if cantidadad_planificadas < capacidad:
                        print(
                            f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
                        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                            status=True,
                            aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                            detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                        filter_conflicto = (Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horafin,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horafin,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha) |
                                            Q(aulaplanificacion__turnoplanificacion__horainicio__lte=horainicio,
                                              aulaplanificacion__turnoplanificacion__horafin__gte=horainicio,
                                              aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha))
                        # sql =f"""
                        #         SELECT DISTINCT dd."matricula_id"
                        #         FROM (
                        #             SELECT sga_ma."id", sga_ma.matricula_id, (
                        #             SELECT COUNT(*)
                        #             FROM inno_materiaasignadaplanificacionsedevirtualexamen AS inno_mapse
                        #             WHERE inno_mapse.materiaasignada_id = sga_ma."id") AS planificados
                        #             FROM sga_materiaasignada AS sga_ma
                        #             INNER JOIN sga_materia AS sga_m1 ON sga_m1."id" = sga_ma.materia_id
                        #             INNER JOIN sga_matricula AS sga_m ON sga_m."id"= sga_ma.matricula_id
                        #             INNER JOIN sga_inscripcion AS sga_i ON sga_i."id" = sga_m.inscripcion_id
                        #             INNER JOIN sga_nivel AS sga_n ON sga_n."id" = sga_m.nivel_id
                        #             WHERE sga_n.periodo_id={str(periodo_id)} AND
                        #             sga_ma.status= TRUE AND
                        #             sga_m.status= TRUE AND
                        #             --sga_i.modalidad_id = 3 AND
                        #             sga_m1.asignatura_id != 4837 AND
                        #             sga_m.bloqueomatricula = FALSE AND
                        #             sga_m.retiradomatricula = FALSE AND
                        #             sga_m."id" IN (SELECT inno_m.matricula_id
                        #                 FROM inno_matriculasedeexamen AS inno_m
                        #                 INNER JOIN sga_matricula AS sub_sga_m ON sub_sga_m.id = inno_m.matricula_id
                        #                 INNER JOIN sga_nivel AS sub_sga_n ON sub_sga_n.id = sub_sga_m.nivel_id
                        #                 WHERE inno_m.sede_id={sede_id} AND sub_sga_n.periodo_id={periodo_id})) AS dd
                        #         WHERE dd.planificados = 0"""
                        # cursor.execute(sql)
                        # results = cursor.fetchall()
                        # ids_matricula = [r[0] for r in results]
                        eMatriculas = Matricula.objects.filter(
                            pk__in=eMatriculaSedeExamenes.values_list("matricula__id", flat=True),
                            status=True,
                            retiradomatricula=False,
                            bloqueomatricula=False,
                            nivel__periodo_id=periodo_id,
                            inscripcion__inscripcionmalla__malla=eMalla)
                        # eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas_exclude_planificadas = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True), status=True), nivel__periodo_id=periodo_id,
                                                     status=True),
                            total_general=Count('materiaasignada__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True),
                                                exclude=Q(materiaasignada__materia__asignatura__id=4837) | Q(
                                                    materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list(
                                                        "id", flat=True)))).filter(
                            Q(total_general=F('total_planificadas')))
                        eMatriculas_exclude_planificadas_x_dia = eMatriculas.annotate(
                            total_planificadas=Count('materiaasignada__id', filter=Q(
                                materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True).filter(
                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha=fecha),
                                status=True), nivel__periodo_id=periodo_id, status=True)).filter(
                            Q(total_planificadas=limite_x_día))
                        eMatriculas_exclude_ingles = eMatriculas.annotate(
                            total_ingles=Count('materiaasignada__materia__asignaturamalla__id', filter=Q(
                                materiaasignada__materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id",
                                                                                                                  flat=True),
                                nivel__periodo_id=periodo_id, status=True)),
                            total_general=Count('materiaasignada__materia__asignaturamalla__id',
                                                filter=Q(nivel__periodo_id=periodo_id, status=True))).filter(
                            total_general=F('total_ingles'))
                        ids_exclude = list(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                            "materiaasignada__matricula__id", flat=True).filter(filter_conflicto))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_planificadas_x_dia.values_list('id', flat=True)))
                        ids_exclude.extend(list(eMatriculas_exclude_ingles.values_list('id', flat=True)))
                        eMatriculas = eMatriculas.exclude(pk__in=ids_exclude)
                        sql = f"""SELECT 
                                    "sga_matricula"."id", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) AS "total_general", 
                                    COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                                    ) AS "total_planificadas"
                                FROM "sga_matricula"
                                INNER JOIN "sga_inscripcion" ON "sga_matricula"."inscripcion_id" = "sga_inscripcion"."id"
                                INNER JOIN "sga_inscripcionmalla" ON "sga_inscripcion"."id" = "sga_inscripcionmalla"."inscripcion_id"
                                INNER JOIN "sga_nivel" ON "sga_matricula"."nivel_id" = "sga_nivel"."id"
                                INNER JOIN "sga_periodo" ON "sga_nivel"."periodo_id" = "sga_periodo"."id"
                                LEFT OUTER JOIN "sga_materiaasignada" ON "sga_matricula"."id" = "sga_materiaasignada"."matricula_id"
                                LEFT OUTER JOIN "sga_materia" ON "sga_materiaasignada"."materia_id" = "sga_materia"."id"
                                LEFT OUTER JOIN "sga_asignaturamalla" ON "sga_materia"."asignaturamalla_id" = "sga_asignaturamalla"."id"
                                WHERE (
                                    NOT "sga_matricula"."bloqueomatricula" AND 
                                    "sga_inscripcionmalla"."malla_id" = {eMalla.pk} AND 
                                    "sga_nivel"."periodo_id" = {periodo_id} AND 
                                    "sga_matricula"."id" IN (
                                                                        SELECT DISTINCT 
                                                                            U0."matricula_id"
                                                                        FROM "inno_matriculasedeexamen" U0
                                                                            INNER JOIN "sga_matricula" U2 ON U0."matricula_id" = U2."id"
                                                                            INNER JOIN "sga_nivel" U3 ON U2."nivel_id" = U3."id"
                                                                        WHERE (
                                                                                    U0."detallemodeloevaluativo_id" = {detallemodeloevaluativo_id} AND 
                                                                                    U3."periodo_id" = {periodo_id} AND 
                                                                                    NOT U2."retiradomatricula" AND 
                                                                                    U2."status" AND 
                                                                                    U0."sede_id" = {sede_id} AND 
                                                                                    U0."status"
                                                                                )
                                                                    ) AND 
                                    NOT "sga_matricula"."retiradomatricula" AND 
                                    "sga_matricula"."status"
                                    )
                                GROUP BY "sga_matricula"."id"
                                HAVING 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_asignaturamalla"."malla_id" NOT IN (	SELECT U0."id"
                                                                                                                    FROM "sga_malla" U0
                                                                                                                    WHERE U0."id" IN (353, 22)
                                                                                                                ) AND 
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status"
                                                                )
                                                    ) 
                                        <> 
                                        COUNT("sga_materia"."asignaturamalla_id") 
                                            FILTER (WHERE ("sga_materiaasignada"."id" IN (	SELECT U0."materiaasignada_id"
                                                                                                                    FROM "inno_materiaasignadaplanificacionsedevirtualexamen" U0
                                                                                                                    INNER JOIN "sga_materiaasignada" U1 ON U1."id" = U0.materiaasignada_id
                                                                                                                    WHERE U1."matricula_id" = "sga_matricula"."id"
                                                                                                                ) AND
                                                                "sga_nivel"."periodo_id" = {periodo_id} AND 
                                                                "sga_matricula"."status")
                                )"""
                        cursor.execute(sql)
                        results = cursor.fetchall()
                        ids_matricula = [r[0] for r in results]
                        eMatriculas = eMatriculas.filter(pk__in=ids_matricula)
                        eMatriculas = eMatriculas.order_by('inscripcion__inscripcionnivel__nivel__orden',
                                                           'inscripcion__persona__apellido1',
                                                           'inscripcion__persona__apellido2',
                                                           'inscripcion__persona__nombres').distinct()
                        contador = cantidadad_planificadas
                        if not eMatriculas.values("id").exists():
                            contadorAulaSinLlenar += 1

                        if contadorAulaSinLlenar > 0:
                            # banderaBreakAula = True
                            break
                        for eMatricula in eMatriculas:
                            eMateriaAsignadas = MateriaAsignada.objects.filter(status=True, matricula=eMatricula)
                            eMateriaAsignadas = eMateriaAsignadas.exclude(
                                Q(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                    "materiaasignada__id", flat=True)) |
                                Q(materia__asignatura__id=4837) |
                                Q(materia__asignaturamalla__malla_id__in=eMallasIngles.values_list("id", flat=True)))
                            eMateriaAsignadas = eMateriaAsignadas.order_by(
                                'materia__asignaturamalla__nivelmalla__orden')
                            if eMateriaAsignadas.values("id").exists():
                                eMateriaAsignada = eMateriaAsignadas.first()
                                contador += 1
                                print(
                                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                                    materiaasignada=eMateriaAsignada,
                                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                if contador >= capacidad:
                                    break


def planificar_supervisores_admision():
    periodo_id = 158
    aSupervidores = [
        {'documento': '0942100777', 'sede_id': 6, 'correo': 'glunab2@unemi.edu.ec'},
        {'documento': '0927738146', 'sede_id': 4, 'correo': 'ecastrov@unemi.edu.ec'},
        {'documento': '0921764296', 'sede_id': 8, 'correo': 'lroseros1@unemi.edu.ec'},
        {'documento': '0923488324', 'sede_id': 3, 'correo': 'ecastillom@unemi.edu.ec'},
        {'documento': '0928733906', 'sede_id': 3, 'correo': 'xcedenog@unemi.edu.ec'},
        {'documento': '0925008344', 'sede_id': 3, 'correo': 'rcuviv@unemi.edu.ec'},
        {'documento': '0926475641', 'sede_id': 3, 'correo': 'rjaraa@unemi.edu.ec'},
        {'documento': '0953392313', 'sede_id': 3, 'correo': 'npesantezj@unemi.edu.ec'},
        {'documento': '0926613076', 'sede_id': 5, 'correo': 'gjarap@unemi.edu.ec'},
        {'documento': '0921693743', 'sede_id': 18, 'correo': 'egaraicoaa@unemi.edu.ec'},
        {'documento': '0922334354', 'sede_id': 14, 'correo': 'lmenesesc1@unemi.edu.ec'},
        {'documento': '0804024693', 'sede_id': 15, 'correo': 'scerezoc@unemi.edu.ec'},
        {'documento': '0928427160', 'sede_id': 7, 'correo': 'rpenah1@unemi.edu.ec'},
        {'documento': '0302435102', 'sede_id': 9, 'correo': 'jcampoverdee@unemi.edu.ec'},
        {'documento': '0929394807', 'sede_id': 10, 'correo': 'nvalerod@unemi.edu.ec'},
    ]

    for supervisor in aSupervidores:
        sede_id = supervisor.get('sede_id')
        documento = supervisor.get('documento')
        emailinst = supervisor.get('correo')
        ePersona = None
        eSedeVirtual = None
        ePersonas = Persona.objects.filter(Q(cedula=documento) | Q(pasaporte=documento) & Q(emailinst=emailinst))
        if ePersonas.values("id").exists():
            ePersona = ePersonas.first()
        eSedeVirtuales = SedeVirtual.objects.filter(pk=sede_id)
        if eSedeVirtuales.values("id").exists():
            eSedeVirtual = eSedeVirtuales.first()
        if ePersona and eSedeVirtual:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eFechaPlanificacionSedeVirtualExamen.supervisor = ePersona
                eFechaPlanificacionSedeVirtualExamen.save()
                print(f"Se edito planificación de fecha {eFechaPlanificacionSedeVirtualExamen}")
        else:
            print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")


def planificar_aplicadores_sedes_admision():
    periodo_id = 158
    aAplicadores = [
        {'documento': '0915771836', 'correo': 'cchenchel@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0941150476', 'correo': 'ddagerl@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0958949596', 'correo': 'ddelgados2@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0919304907', 'correo': 'fespinelo@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0927997130', 'correo': 'jcampoverdep@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0925098931', 'correo': 'lguevarat1@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0940748130', 'correo': 'llayanar@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0929762433', 'correo': 'mromans@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0924679202', 'correo': 'ochenchel@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0925007189', 'correo': 'olopezn@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0705377299', 'correo': 'pcarrionc2@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0941149601', 'correo': 'pzambranoo@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0104669445', 'correo': 'respins@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0928427160', 'correo': 'rfariasl1@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0929600286', 'correo': 'rminchalah@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0923363030', 'correo': 'ryepezb1@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0927980441', 'correo': 'tyaguall@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0926474040', 'correo': 'vcadenaa@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0917388498', 'correo': 'vestrellar@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0926478181', 'correo': 'vzear2@unemi.edu.ec', 'sede_id': 3, 'fechas': '10'},
        {'documento': '0922990023', 'correo': 'macuriol@unemi.edu.ec', 'sede_id': 4, 'fechas': '6'},
        {'documento': '0302432323', 'correo': 'mparedesc1@unemi.edu.ec', 'sede_id': 4, 'fechas': '6'},
        {'documento': '0921071437', 'correo': 'ecastillos1@unemi.edu.ec', 'sede_id': 5, 'fechas': '7,8'},
        {'documento': '0928786003', 'correo': 'epesantesc3@unemi.edu.ec', 'sede_id': 5, 'fechas': '7,8'},
        {'documento': '1204607616', 'correo': 'etorresd2@unemi.edu.ec', 'sede_id': 5, 'fechas': '7,8'},
        {'documento': '0926408717', 'correo': 'jillingwortg@unemi.edu.ec', 'sede_id': 5, 'fechas': '7,8'},
        {'documento': '1202767586', 'correo': 'jllaquel@unemi.edu.ec', 'sede_id': 5, 'fechas': '7,8'},
        {'documento': '1203236060', 'correo': 'klopezm2@unemi.edu.ec', 'sede_id': 5, 'fechas': '7,8'},
        {'documento': '1203112188', 'correo': 'raltamiranob@unemi.edu.ec', 'sede_id': 6, 'fechas': '5,6'},
        {'documento': '1204180648', 'correo': 'sprietog1@unemi.edu.ec', 'sede_id': 6, 'fechas': '5,6'},
        {'documento': '0920344793', 'correo': 'cnarvaezb1@unemi.edu.ec', 'sede_id': 7, 'fechas': '5,6,7'},
        {'documento': '0921188074', 'correo': 'mcedillop@unemi.edu.ec', 'sede_id': 7, 'fechas': '5,6,7'},
        {'documento': '0942129735', 'correo': 'mcastrol6@unemi.edu.ec', 'sede_id': 7, 'fechas': '5,6,7'},
        {'documento': '0927990242', 'correo': ' aavilesv@unemi.edu.ec', 'sede_id': 8, 'fechas': '5,6'},
        {'documento': '0915771836', 'correo': 'ldiazs@unemi.edu.ec', 'sede_id': 8, 'fechas': '5,6'},
        {'documento': '0921148748', 'correo': 'wcarvajalt1@unemi.edu.ec', 'sede_id': 8, 'fechas': '5,6'},
        {'documento': '0920011665', 'correo': 'gfalconio@unemi.edu.ec', 'sede_id': 9, 'fechas': '7,8'},
        {'documento': '0942121708', 'correo': 'mmedinaa6@unemi.edu.ec', 'sede_id': 9, 'fechas': '6,7,8'},
        {'documento': '0911786689', 'correo': 'aortizg1@unemi.edu.ec', 'sede_id': 10, 'fechas': '6,7,8,9'},
        {'documento': '0923791081', 'correo': 'storresb5@unemi.edu.ec', 'sede_id': 10, 'fechas': '6,7,8,9'},
        {'documento': '0928787555', 'correo': 'jchimbop@unemi.edu.ec', 'sede_id': 10, 'fechas': '6,7,8,9'},
        {'documento': '1314881325', 'correo': 'dsolorzanor3@unemi.edu.ec', 'sede_id': 15, 'fechas': '7,8'},
        {'documento': '1313034611', 'correo': 'jcantosv4@unemi.edu.ec', 'sede_id': 15, 'fechas': '7,8'},
        {'documento': '0926475971', 'correo': 'acevallosd@unemi.edu.ec', 'sede_id': 18, 'fechas': '7,8'},
        {'documento': '0918506759', 'correo': 'azambranop8@unemi.edu.ec', 'sede_id': 18, 'fechas': '7,8'},
        {'documento': '0917713364', 'correo': 'jperaltac@unemi.edu.ec', 'sede_id': 18, 'fechas': '7,8'},
        {'documento': '0942099805', 'correo': 'lmirandam@unemi.edu.ec', 'sede_id': 18, 'fechas': '7,8'},
        {'documento': '0926618687', 'correo': 'lquintunab@unemi.edu.ec', 'sede_id': 18, 'fechas': '7,8'},
        {'documento': '1713555959', 'correo': 'mguerreroc@unemi.edu.ec', 'sede_id': 18, 'fechas': '7,8'},
        {'documento': '0928362946', 'correo': 'mruizg1@unemi.edu.ec', 'sede_id': 18, 'fechas': '7,8'},
        {'documento': '0929803005', 'correo': 'wgavilanesr@unemi.edu.ec', 'sede_id': 18, 'fechas': '7,8'},
    ]

    for aplicador in aAplicadores:
        sede_id = aplicador.get('sede_id')
        documento = aplicador.get('documento')
        emailinst = aplicador.get('correo')
        dias = aplicador.get('fechas').split(',')
        fechas = []
        for dia in dias:
            fechas.append((datetime(2022, 9, int(dia), 0, 0, 0)).date())
        ePersona = None
        eSedeVirtual = None
        ePersonas = Persona.objects.filter(Q(cedula=documento) | Q(pasaporte=documento) & Q(emailinst=emailinst))
        if ePersonas.values("id").exists():
            ePersona = ePersonas.first()
        eSedeVirtuales = SedeVirtual.objects.filter(pk=sede_id)
        if eSedeVirtuales.values("id").exists():
            eSedeVirtual = eSedeVirtuales.first()
        if ePersona and eSedeVirtual:
            for fecha in fechas:
                eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                    sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
                for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                    eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                        fechaplanificacion=eFechaPlanificacionSedeVirtualExamen)
                    for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                        eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                            turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=ePersona,
                                                                                     turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen).exists():
                            print(
                                f"Aplicador con documento {documento} en la sede_id {sede_id} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        else:
                            eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                                responsable__isnull=True, turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                            if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                                eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                                eAulaPlanificacionSedeVirtualExamen.responsable = ePersona
                                eAulaPlanificacionSedeVirtualExamen.save()
                                print(f"Se edito planificación de aplicador {eAulaPlanificacionSedeVirtualExamen}")
        else:
            print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")


def planificar_aplicadores_sede_milagro_admision():
    periodo_id = 158
    aAplicadores = [
        {'documento': '0922338140', 'correo': 'jrosadoe@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0940816655', 'correo': 'acrespinv@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0919307801', 'correo': 'sburgosa@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0917626350', 'correo': 'cespinozar@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0940367386', 'correo': 'jfloresm1@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0940384159', 'correo': 'rgrandac@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0942192188', 'correo': ' elandiresr@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0950434498', 'correo': 'kmendozav2@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0923605513', 'correo': 'dpaguayb@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0922629431', 'correo': 'cperaltac@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0929718419', 'correo': 'dperaltag2@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '1205730029', 'correo': 'dguillenm@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0923175855', 'correo': 'csorianob@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0927420646', 'correo': 'rsuquep@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0942112012', 'correo': ' gvelezm@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0953853587', 'correo': 'ibaquef@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '1719099168', 'correo': 'mcajasr@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0940116684', 'correo': 'ycallec@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '1205813692', 'correo': 'jgarciac@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0917222333', 'correo': 'jgomezs1@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0941781726', 'correo': 'jidrovoc@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0929760494', 'correo': 'jjarab@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0929857597', 'correo': 'kmurilloa@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0919106385', 'correo': 'korozcof@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '1203113855', 'correo': 'cortegad@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0924188147', 'correo': 'kespinoza@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0952310381', 'correo': 'jtenecorap@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0941144131', 'correo': 'pveram@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0922282595', 'correo': 'mveran1@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0914192141', 'correo': 'jvivesj1@unemi.edu.ec', 'fechas': '5,6,7,8,9', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0953853587', 'correo': 'ibaquef@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '1719099168', 'correo': 'mcajasr@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0940116684', 'correo': 'ycallec@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '1205813692', 'correo': 'jgarciac@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0917222333', 'correo': 'jgomezs1@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0941781726', 'correo': 'jidrovoc@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0929760494', 'correo': 'jjarab@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0929857597', 'correo': 'kmurilloa@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0919106385', 'correo': 'korozcof@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '1203113855', 'correo': 'cortegad@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0924188147', 'correo': 'kespinoza@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0952310381', 'correo': 'jtenecorap@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0941144131', 'correo': 'pveram@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0922282595', 'correo': 'mveran1@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0914192141', 'correo': 'jvivesj1@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '07:00',
         'horafin': '14:29'},
        {'documento': '0940323496', 'correo': 'kvillavicenciom@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0940816655', 'correo': 'acrespinv@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0919307801', 'correo': 'sburgosa@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0917626350', 'correo': 'cespinozar@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0940367386', 'correo': 'jfloresm1@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0940384159', 'correo': 'rgrandac@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0942192188', 'correo': ' elandiresr@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0950434498', 'correo': 'kmendozav2@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0923605513', 'correo': 'dpaguayb@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0922629431', 'correo': 'cperaltac@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0929718419', 'correo': 'dperaltag2@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '1205730029', 'correo': 'dguillenm@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0923175855', 'correo': 'csorianob@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0927420646', 'correo': 'rsuquep@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'},
        {'documento': '0942112012', 'correo': ' gvelezm@unemi.edu.ec', 'fechas': '12,13', 'horainicio': '14:30',
         'horafin': '21:59'}
    ]

    for aplicador in aAplicadores:
        sede_id = 1
        documento = aplicador.get('documento')
        emailinst = aplicador.get('correo')
        dias = aplicador.get('fechas').split(',')
        tiempoinicio = aplicador.get('horainicio')
        tiempofin = aplicador.get('horafin')
        fechas = []
        for dia in dias:
            fechas.append((datetime(2022, 9, int(dia), 0, 0, 0)).date())
        horainicio = None
        horafin = None
        hora = tiempoinicio.split(':')
        horainicio = datetime(2022, 9, 1, int(hora[0]), int(hora[1]), 0).time()
        hora = tiempofin.split(':')
        horafin = datetime(2022, 9, 1, int(hora[0]), int(hora[1]), 59).time()
        ePersona = None
        eSedeVirtual = None
        ePersonas = Persona.objects.filter(Q(cedula=documento) | Q(pasaporte=documento) & Q(emailinst=emailinst))
        if ePersonas.values("id").exists():
            ePersona = ePersonas.first()
        eSedeVirtuales = SedeVirtual.objects.filter(pk=sede_id)
        if eSedeVirtuales.values("id").exists():
            eSedeVirtual = eSedeVirtuales.first()
        if ePersona and eSedeVirtual:
            for fecha in fechas:
                eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                    sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
                for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                    eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                        fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                        horafin__lte=horafin)
                    for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                        eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                            turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=ePersona,
                                                                                     turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen).exists():
                            print(
                                f"Aplicador con documento {documento} en la sede_id {sede_id} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        else:
                            eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                                responsable__isnull=True, turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                            if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                                eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                                eAulaPlanificacionSedeVirtualExamen.responsable = ePersona
                                eAulaPlanificacionSedeVirtualExamen.save()
                                print(f"Se edito planificación de aplicador {eAulaPlanificacionSedeVirtualExamen}")
        else:
            print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")


def activar_discapacitado_ppl_extranjeros(eMatricula=None):
    sede_id = 11
    periodo_id = 126
    eSedeVirtual = SedeVirtual.objects.get(pk=sede_id)
    eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede=eSedeVirtual,
                                                                                                periodo_id=periodo_id)
    for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        print(f"FECHA --> {fecha}")
        eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
            fechaplanificacion=eFechaPlanificacionSedeVirtualExamen)
        for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
            horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
            horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
            print(f"FECHA --> {fecha} --> HORA {horainicio} - {horafin}")
            fechadesde = datetime(fecha.year, fecha.month, fecha.day, horainicio.hour, horainicio.minute,
                                  horainicio.second)
            fechadesde = int(time.mktime(fechadesde.timetuple()))
            fechahasta = datetime(fecha.year, fecha.month, fecha.day, horafin.hour, horafin.minute, horafin.second)
            fechahasta = int(time.mktime(fechahasta.timetuple()))
            eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
            for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
                password = 'Unemi2022**'
                eAulaPlanificacionSedeVirtualExamen.password = password
                eAulaPlanificacionSedeVirtualExamen.save()
                print(
                    f"FECHA --> {fecha} --> HORA {horainicio} - {horafin} --> {eAulaPlanificacionSedeVirtualExamen.aula.nombre}")
                eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen)
                if eMatricula:
                    eMateriaAsignadaPlanificacionSedeVirtualExamenes = eMateriaAsignadaPlanificacionSedeVirtualExamenes.filter(
                        materiaasignada__matricula=eMatricula)
                for eMateriaAsignadaPlanificacionSedeVirtualExamen in eMateriaAsignadaPlanificacionSedeVirtualExamenes:
                    print(f"{eMateriaAsignadaPlanificacionSedeVirtualExamen.__str__()}")
                    if not eMateriaAsignadaPlanificacionSedeVirtualExamen.habilitadoexamen:
                        eMateriaAsignada = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada
                        username = eMateriaAsignada.matricula.inscripcion.persona.usuario.username
                        examenplanificado = eMateriaAsignada.materia.examenplanificadosilabo(
                            eMateriaAsignadaPlanificacionSedeVirtualExamen.detallemodeloevaluativo)
                        print(f"{examenplanificado}")
                        if examenplanificado:
                            quiz = buscarQuiz(examenplanificado.get("idtestmoodle"),
                                              eMateriaAsignada.materia.coordinacion().id)
                            print(f"{quiz}")
                            limite = int(quiz[3])
                            try:
                                intentos = int(quiz[4])
                                if intentos == 0:
                                    intentos = examenplanificado.get('vecesintento')
                                    if intentos is None or intentos == 0:
                                        intentos = 1
                            except Exception as exIn:
                                intentos = 1
                            estado_examen = estadoQuizIndividual(username, eMateriaAsignada.materia,
                                                                 examenplanificado.get("idtestmoodle"))
                            print(f"Estado de examen: {estado_examen}")
                            if estado_examen != 'inprogress':
                                with transaction.atomic():
                                    try:
                                        eMateriaAsignadaPlanificacionSedeVirtualExamen.idtestmoodle = int(
                                            examenplanificado.get("idtestmoodle"))
                                        eMateriaAsignadaPlanificacionSedeVirtualExamen.password = password
                                        eMateriaAsignada = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada
                                        isResult, msgError = accesoQuizIndividual(username,
                                                                                  eMateriaAsignada.materia,
                                                                                  eMateriaAsignadaPlanificacionSedeVirtualExamen.idtestmoodle,
                                                                                  {'timeopen': fechadesde,
                                                                                   'timeclose': fechahasta,
                                                                                   'timelimit': limite,
                                                                                   'password': eMateriaAsignadaPlanificacionSedeVirtualExamen.password,
                                                                                   'attempts': intentos})
                                        print(f"Resultado: {isResult} - mensaje: {msgError}")
                                        if isResult:
                                            eMateriaAsignadaPlanificacionSedeVirtualExamen.habilitadoexamen = True
                                            print(
                                                f"Se activo materiaasignada (ID:{eMateriaAsignada.pk}) - {eMateriaAsignada.__str__()}")
                                        eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                    except Exception as ex:
                                        transaction.set_rollback(True)
                                        print(
                                            f"Ocurrio un error en la materiaasignada (ID:{eMateriaAsignada.pk}) - {eMateriaAsignada.__str__()}")


def agregar_grupo_aplicadores_supervisores():
    periodo_id = 158
    eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(periodo_id=periodo_id)
    eSupervisores = Persona.objects.filter(
        pk__in=eFechaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    print(f"Total de supervisores: {len(eSupervisores.values('id'))}")
    eGroup = Group.objects.get(pk=387)
    for eSupervisor in eSupervisores:
        eGroup.user_set.add(eSupervisor.usuario)
        eGroup.save()
        print(f"Grupo {eGroup.name} adiciono -> Supervisor: {eSupervisor.__str__()}")

    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__in=eFechaPlanificacionSedeVirtualExamenes)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    print(f"Total de aplicadores: {len(eAplicadores.values('id'))}")
    eGroup = Group.objects.get(pk=388)
    for eAplicador in eAplicadores:
        eGroup.user_set.add(eAplicador.usuario)
        eGroup.save()
        print(f"Grupo {eGroup.name} adiciono -> Aplicador: {eAplicador.__str__()}")


def acceso_examen_moodle(pla):
    from django.db import connections
    from Moodle_Funciones import buscarUsuario
    lista = []
    if pla.materiaasignada.materia.coordinacion():
        # fecha = int(time.mktime(datetime.now().timetuple()))
        if pla.materiaasignada.materia.coordinacion().id == 9:
            conexion = connections['db_moodle_virtual']
            # cursor_verbose = 'db_moodle_virtual'
        else:
            conexion = connections['moodle_db']
            # cursor_verbose = 'moodle_db'
        cursor = conexion.cursor()
        user_id = buscarUsuario(pla.materiaasignada.matricula.inscripcion.persona.usuario.username, cursor)
        sql = """
                SELECT TO_TIMESTAMP(att.timestart), TO_TIMESTAMP(att.timefinish),
                ( CASE WHEN att.timestart=0 THEN 0 ELSE 1 END) AS inicia,
                ( CASE WHEN att.timefinish=0 THEN 0 ELSE 1 END) AS finaliza
                FROM mooc_quiz_attempts att
                INNER JOIN mooc_quiz quiz ON quiz.id=att.quiz
                INNER JOIN mooc_course cou ON cou.id=quiz.course
                INNER JOIN  mooc_grade_items gi ON gi.courseid=cou.id AND gi.itemmodule='quiz' AND quiz.id=gi.iteminstance
                INNER JOIN  mooc_grade_categories ct ON ct.courseid=cou.id
                WHERE cou.id=%s AND att.userid=%s AND ct.fullname='%s'
                AND ct.courseid=%s AND ct.depth=2 AND ct.id=gi.categoryid
                """ % (
            pla.materiaasignada.materia.idcursomoodle, user_id, pla.detallemodeloevaluativo.nombre,
            pla.materiaasignada.materia.idcursomoodle)
        cursor.execute(sql)
        row = cursor.fetchall()
        for r in row:
            lista.append(r)
    return lista


def ip_log_rango_examen(pla):
    from django.db import connections
    from Moodle_Funciones import buscarUsuario
    lista = []
    if pla.materiaasignada.materia.coordinacion():
        if pla.materiaasignada.materia.coordinacion().id == 9:
            conexion = connections['db_moodle_virtual']
            # cursor_verbose = 'db_moodle_virtual'
        else:
            conexion = connections['moodle_db']
            # cursor_verbose = 'moodle_db'
        cursor = conexion.cursor()
        id_usuario_moodle = buscarUsuario(pla.materiaasignada.matricula.inscripcion.persona.usuario.username, cursor)
        id_curso_moodle = pla.materiaasignada.materia.idcursomoodle
        fecha = pla.aulaplanificacion.turnoplanificacion.fechaplanificacion.fecha
        fecha_hora_inicio = datetime(fecha.year, fecha.month, fecha.day, 0, 1)
        fecha_hora_fin = datetime(fecha.year, fecha.month, fecha.day, 23, 59)

        sql = f"""
                SELECT l1.ip, TO_TIMESTAMP(l1.timecreated)
                FROM mooc_logstore_standard_log l1
                WHERE l1.userid={id_usuario_moodle} AND l1.courseid={id_curso_moodle} 
                AND TO_TIMESTAMP(l1.timecreated) BETWEEN '{fecha_hora_inicio}' AND '{fecha_hora_fin}'
                AND l1.objectid IN (
                    SELECT quiz.id
                    FROM mooc_quiz_attempts att
                    INNER JOIN mooc_quiz quiz ON quiz.id=att.quiz
                    INNER JOIN mooc_course cou ON cou.id=quiz.course
                    INNER JOIN mooc_grade_items gi ON gi.courseid=cou.id AND gi.itemmodule='quiz' AND quiz.id=gi.iteminstance
                    INNER JOIN mooc_grade_categories ct ON ct.courseid=cou.id
                    WHERE cou.id={id_curso_moodle} AND att.userid={id_usuario_moodle} AND ct.fullname='{pla.detallemodeloevaluativo.nombre}' 
                    AND ct.courseid={id_curso_moodle} AND ct.depth=2 AND ct.id=gi.categoryid
                    LIMIT 1
                )
                ORDER BY - l1.timecreated
                """
        cursor.execute(sql)
        lista = cursor.fetchall()
    return lista


def planificar_aplicadores_sede_quito_pregrado():
    periodo_id = 126
    aData = [
        {'aplicador': '1803016367', 'supervisor': '0925854499', 'fecha': '19', 'sede': 18},
        {'aplicador': '1713555959', 'supervisor': '0925854499', 'fecha': '19', 'sede': 18},
        {'aplicador': '1714382098', 'supervisor': '0925854499', 'fecha': '19', 'sede': 18},
        {'aplicador': '0914676713', 'supervisor': '0925854499', 'fecha': '19', 'sede': 18},
        {'aplicador': '1206601872', 'supervisor': '0921693743', 'fecha': '19', 'sede': 18},
        {'aplicador': '1203255623', 'supervisor': '0921693743', 'fecha': '19', 'sede': 18},
        {'aplicador': '1712233830', 'supervisor': '0921693743', 'fecha': '19', 'sede': 18},
        {'aplicador': '1721441127', 'supervisor': '0921693743', 'fecha': '19', 'sede': 18},
        {'aplicador': '1803016367', 'supervisor': '0925854499', 'fecha': '20', 'sede': 18},
        {'aplicador': '1713555959', 'supervisor': '0925854499', 'fecha': '20', 'sede': 18},
        {'aplicador': '1714382098', 'supervisor': '0925854499', 'fecha': '20', 'sede': 18},
        {'aplicador': '0914676713', 'supervisor': '0925854499', 'fecha': '20', 'sede': 18},
        {'aplicador': '1206601872', 'supervisor': '0921693743', 'fecha': '20', 'sede': 18},
        {'aplicador': '1203255623', 'supervisor': '0921693743', 'fecha': '20', 'sede': 18},
        {'aplicador': '1712233830', 'supervisor': '0921693743', 'fecha': '20', 'sede': 18},
        {'aplicador': '1721441127', 'supervisor': '0921693743', 'fecha': '20', 'sede': 18},
        {'aplicador': '1803016367', 'supervisor': '0925854499', 'fecha': '21', 'sede': 18},
        {'aplicador': '1713555959', 'supervisor': '0925854499', 'fecha': '21', 'sede': 18},
        {'aplicador': '1714382098', 'supervisor': '0925854499', 'fecha': '21', 'sede': 18},
        {'aplicador': '0914676713', 'supervisor': '0925854499', 'fecha': '21', 'sede': 18},
        {'aplicador': '1206601872', 'supervisor': '0929747301', 'fecha': '21', 'sede': 18},
        {'aplicador': '1203255623', 'supervisor': '0929747301', 'fecha': '21', 'sede': 18},
        {'aplicador': '1712233830', 'supervisor': '0929747301', 'fecha': '21', 'sede': 18},
        {'aplicador': '1721441127', 'supervisor': '0929747301', 'fecha': '21', 'sede': 18},
        {'aplicador': '1803016367', 'supervisor': '0925854499', 'fecha': '22', 'sede': 18},
        {'aplicador': '1713555959', 'supervisor': '0925854499', 'fecha': '22', 'sede': 18},
        {'aplicador': '1714382098', 'supervisor': '0925854499', 'fecha': '22', 'sede': 18},
        {'aplicador': '0914676713', 'supervisor': '0925854499', 'fecha': '22', 'sede': 18},
        {'aplicador': '1206601872', 'supervisor': '0929747301', 'fecha': '22', 'sede': 18},
        {'aplicador': '1203255623', 'supervisor': '0929747301', 'fecha': '22', 'sede': 18},
        {'aplicador': '1712233830', 'supervisor': '0929747301', 'fecha': '22', 'sede': 18},
        {'aplicador': '1721441127', 'supervisor': '0929747301', 'fecha': '22', 'sede': 18},
        {'aplicador': '1803016367', 'supervisor': '0925854499', 'fecha': '23', 'sede': 18},
        {'aplicador': '1713555959', 'supervisor': '0925854499', 'fecha': '23', 'sede': 18},
        {'aplicador': '1714382098', 'supervisor': '0925854499', 'fecha': '23', 'sede': 18},
        {'aplicador': '0914676713', 'supervisor': '0925854499', 'fecha': '23', 'sede': 18},
        {'aplicador': '1206601872', 'supervisor': '0929747301', 'fecha': '23', 'sede': 18},
        {'aplicador': '1203255623', 'supervisor': '0929747301', 'fecha': '23', 'sede': 18},
        {'aplicador': '1712233830', 'supervisor': '0929747301', 'fecha': '23', 'sede': 18},
        {'aplicador': '1721441127', 'supervisor': '0929747301', 'fecha': '23', 'sede': 18},
        {'aplicador': '1714382098', 'supervisor': '0926618687', 'fecha': '26', 'sede': 18},
        {'aplicador': '0914676713', 'supervisor': '0926618687', 'fecha': '26', 'sede': 18},
        {'aplicador': '1206601872', 'supervisor': '0926618687', 'fecha': '26', 'sede': 18},
        {'aplicador': '0925743296', 'supervisor': '0926618687', 'fecha': '26', 'sede': 18},
        {'aplicador': '1204180648', 'supervisor': '1205907601', 'fecha': '26', 'sede': 18},
        {'aplicador': '0915771836', 'supervisor': '1205907601', 'fecha': '26', 'sede': 18},
        {'aplicador': '0942099805', 'supervisor': '1205907601', 'fecha': '26', 'sede': 18},
        {'aplicador': '0941149601', 'supervisor': '1205907601', 'fecha': '26', 'sede': 18},
        {'aplicador': '1714382098', 'supervisor': '0926618687', 'fecha': '27', 'sede': 18},
        {'aplicador': '0914676713', 'supervisor': '0926618687', 'fecha': '27', 'sede': 18},
        {'aplicador': '1206601872', 'supervisor': '0926618687', 'fecha': '27', 'sede': 18},
        {'aplicador': '0925743296', 'supervisor': '0926618687', 'fecha': '27', 'sede': 18},
        {'aplicador': '1204180648', 'supervisor': '1205907601', 'fecha': '27', 'sede': 18},
        {'aplicador': '0915771836', 'supervisor': '1205907601', 'fecha': '27', 'sede': 18},
        {'aplicador': '0942099805', 'supervisor': '1205907601', 'fecha': '27', 'sede': 18},
        {'aplicador': '0941149601', 'supervisor': '1205907601', 'fecha': '27', 'sede': 18},
        {'aplicador': '1714382098', 'supervisor': '0926618687', 'fecha': '28', 'sede': 18},
        {'aplicador': '0914676713', 'supervisor': '0926618687', 'fecha': '28', 'sede': 18},
        {'aplicador': '1206601872', 'supervisor': '0926618687', 'fecha': '28', 'sede': 18},
        {'aplicador': '0925743296', 'supervisor': '0926618687', 'fecha': '28', 'sede': 18},
        {'aplicador': '1204180648', 'supervisor': '1205907601', 'fecha': '28', 'sede': 18},
        {'aplicador': '0915771836', 'supervisor': '1205907601', 'fecha': '28', 'sede': 18},
        {'aplicador': '0942100777', 'supervisor': '1205907601', 'fecha': '28', 'sede': 18},
        {'aplicador': '0941149601', 'supervisor': '1205907601', 'fecha': '28', 'sede': 18},
        {'aplicador': '1714382098', 'supervisor': '0926618687', 'fecha': '29', 'sede': 18},
        {'aplicador': '0914676713', 'supervisor': '0926618687', 'fecha': '29', 'sede': 18},
        {'aplicador': '1206601872', 'supervisor': '0926618687', 'fecha': '29', 'sede': 18},
        {'aplicador': '0925743296', 'supervisor': '0926618687', 'fecha': '29', 'sede': 18},
        {'aplicador': '1204180648', 'supervisor': '1205907601', 'fecha': '29', 'sede': 18},
        {'aplicador': '0915771836', 'supervisor': '1205907601', 'fecha': '29', 'sede': 18},
        {'aplicador': '0942100777', 'supervisor': '1205907601', 'fecha': '29', 'sede': 18},
        {'aplicador': '0941149601', 'supervisor': '1205907601', 'fecha': '29', 'sede': 18}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=18,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        fecha = (datetime(2022, 9, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=18,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_santodomingo_pregrado():
    periodo_id = 126
    sede_id = 10
    aData = [
        {'aplicador': '1723698831', 'supervisor': '0922990023', 'fecha': '19', 'sede': 10},
        {'aplicador': '0928787555', 'supervisor': '0922990023', 'fecha': '19', 'sede': 10},
        {'aplicador': '0913439543', 'supervisor': '0922990023', 'fecha': '19', 'sede': 10},
        {'aplicador': '1723698831', 'supervisor': '0922990023', 'fecha': '20', 'sede': 10},
        {'aplicador': '0928787555', 'supervisor': '0922990023', 'fecha': '20', 'sede': 10},
        {'aplicador': '0913439543', 'supervisor': '0922990023', 'fecha': '20', 'sede': 10},
        {'aplicador': '1723698831', 'supervisor': '0922990023', 'fecha': '21', 'sede': 10},
        {'aplicador': '0928787555', 'supervisor': '0922990023', 'fecha': '21', 'sede': 10},
        {'aplicador': '0913439543', 'supervisor': '0922990023', 'fecha': '21', 'sede': 10},
        {'aplicador': '1723698831', 'supervisor': '0922990023', 'fecha': '22', 'sede': 10},
        {'aplicador': '0928787555', 'supervisor': '0922990023', 'fecha': '22', 'sede': 10},
        {'aplicador': '0913439543', 'supervisor': '0922990023', 'fecha': '22', 'sede': 10},
        {'aplicador': '1723698831', 'supervisor': '0922990023', 'fecha': '23', 'sede': 10},
        {'aplicador': '0928787555', 'supervisor': '0922990023', 'fecha': '23', 'sede': 10},
        {'aplicador': '0913439543', 'supervisor': '0922990023', 'fecha': '23', 'sede': 10},
        {'aplicador': '1723698831', 'supervisor': '0911786689', 'fecha': '26', 'sede': 10},
        {'aplicador': '1002949988', 'supervisor': '0911786689', 'fecha': '26', 'sede': 10},
        {'aplicador': '0802446963', 'supervisor': '0911786689', 'fecha': '26', 'sede': 10},
        {'aplicador': '1723698831', 'supervisor': '0911786689', 'fecha': '27', 'sede': 10},
        {'aplicador': '1002949988', 'supervisor': '0911786689', 'fecha': '27', 'sede': 10},
        {'aplicador': '0802446963', 'supervisor': '0911786689', 'fecha': '27', 'sede': 10},
        {'aplicador': '1723698831', 'supervisor': '0941150476', 'fecha': '28', 'sede': 10},
        {'aplicador': '1002949988', 'supervisor': '0941150476', 'fecha': '28', 'sede': 10},
        {'aplicador': '0802446963', 'supervisor': '0941150476', 'fecha': '28', 'sede': 10},
        {'aplicador': '1723698831', 'supervisor': '0941150476', 'fecha': '29', 'sede': 10},
        {'aplicador': '1002949988', 'supervisor': '0941150476', 'fecha': '29', 'sede': 10},
        {'aplicador': '0802446963', 'supervisor': '0941150476', 'fecha': '29', 'sede': 10},

    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        fecha = (datetime(2022, 9, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_santaelena_pregrado():
    periodo_id = 126
    sede_id = 9
    aData = [
        {'aplicador': '0910929611', 'supervisor': '0909442543', 'fecha': '19', 'sede': 9},
        {'aplicador': '0917924128', 'supervisor': '0909442543', 'fecha': '19', 'sede': 9},
        {'aplicador': '0923314025', 'supervisor': '0909442543', 'fecha': '19', 'sede': 9},
        {'aplicador': '0962455150', 'supervisor': '0909442543', 'fecha': '19', 'sede': 9},
        {'aplicador': '0926222670', 'supervisor': '0302435102', 'fecha': '19', 'sede': 9},
        {'aplicador': '1204140568', 'supervisor': '0302435102', 'fecha': '19', 'sede': 9},
        {'aplicador': '0910929611', 'supervisor': '0909442543', 'fecha': '20', 'sede': 9},
        {'aplicador': '0917924128', 'supervisor': '0909442543', 'fecha': '20', 'sede': 9},
        {'aplicador': '0923314025', 'supervisor': '0909442543', 'fecha': '20', 'sede': 9},
        {'aplicador': '0962455150', 'supervisor': '0909442543', 'fecha': '20', 'sede': 9},
        {'aplicador': '0926222670', 'supervisor': '0302435102', 'fecha': '20', 'sede': 9},
        {'aplicador': '1204140568', 'supervisor': '0302435102', 'fecha': '20', 'sede': 9},
        {'aplicador': '0910929611', 'supervisor': '0909442543', 'fecha': '21', 'sede': 9},
        {'aplicador': '0917924128', 'supervisor': '0909442543', 'fecha': '21', 'sede': 9},
        {'aplicador': '0923314025', 'supervisor': '0909442543', 'fecha': '21', 'sede': 9},
        {'aplicador': '0962455150', 'supervisor': '0909442543', 'fecha': '21', 'sede': 9},
        {'aplicador': '0926222670', 'supervisor': '0302435102', 'fecha': '21', 'sede': 9},
        {'aplicador': '1204140568', 'supervisor': '0302435102', 'fecha': '21', 'sede': 9},
        {'aplicador': '0910929611', 'supervisor': '0909442543', 'fecha': '22', 'sede': 9},
        {'aplicador': '0917924128', 'supervisor': '0909442543', 'fecha': '22', 'sede': 9},
        {'aplicador': '0923314025', 'supervisor': '0909442543', 'fecha': '22', 'sede': 9},
        {'aplicador': '0962455150', 'supervisor': '0909442543', 'fecha': '22', 'sede': 9},
        {'aplicador': '0926222670', 'supervisor': '0302435102', 'fecha': '22', 'sede': 9},
        {'aplicador': '1204140568', 'supervisor': '0302435102', 'fecha': '22', 'sede': 9},
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        fecha = (datetime(2022, 9, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_cuenca_pregrado():
    periodo_id = 126
    sede_id = 19
    aData = [
        {'aplicador': '0105262596', 'supervisor': '0925566184', 'fecha': '30', 'sede': 19},
        {'aplicador': '1104121502', 'supervisor': '0925566184', 'fecha': '30', 'sede': 19},
        {'aplicador': '0106234529', 'supervisor': '0925566184', 'fecha': '30', 'sede': 19},
        {'aplicador': '0921323291', 'supervisor': '0924888530', 'fecha': '30', 'sede': 19},
        {'aplicador': '0923363030', 'supervisor': '0924888530', 'fecha': '30', 'sede': 19},
        {'aplicador': '0921148748', 'supervisor': '0924888530', 'fecha': '30', 'sede': 19},
        {'aplicador': '0925854499', 'supervisor': '0706252459', 'fecha': '30', 'sede': 19},
        {'aplicador': '0201959749', 'supervisor': '0706252459', 'fecha': '30', 'sede': 19},
        {'aplicador': '0929749497', 'supervisor': '0706252459', 'fecha': '30', 'sede': 19},
        {'aplicador': '0105262596', 'supervisor': '0925566184', 'fecha': '1', 'sede': 19},
        {'aplicador': '1104121502', 'supervisor': '0925566184', 'fecha': '1', 'sede': 19},
        {'aplicador': '0106234529', 'supervisor': '0925566184', 'fecha': '1', 'sede': 19},
        {'aplicador': '0921323291', 'supervisor': '0924888530', 'fecha': '1', 'sede': 19},
        {'aplicador': '0923363030', 'supervisor': '0924888530', 'fecha': '1', 'sede': 19},
        {'aplicador': '0921148748', 'supervisor': '0924888530', 'fecha': '1', 'sede': 19},
        {'aplicador': '0925854499', 'supervisor': '0706252459', 'fecha': '1', 'sede': 19},
        {'aplicador': '0201959749', 'supervisor': '0706252459', 'fecha': '1', 'sede': 19},
        {'aplicador': '0929749497', 'supervisor': '0706252459', 'fecha': '1', 'sede': 19},
        {'aplicador': '0105262596', 'supervisor': '0925566184', 'fecha': '2', 'sede': 19},
        {'aplicador': '1104121502', 'supervisor': '0925566184', 'fecha': '2', 'sede': 19},
        {'aplicador': '0106234529', 'supervisor': '0925566184', 'fecha': '2', 'sede': 19},
        {'aplicador': '0921323291', 'supervisor': '0924888530', 'fecha': '2', 'sede': 19},
        {'aplicador': '0923363030', 'supervisor': '0924888530', 'fecha': '2', 'sede': 19},
        {'aplicador': '0921148748', 'supervisor': '0924888530', 'fecha': '2', 'sede': 19},
        {'aplicador': '0925854499', 'supervisor': '0706252459', 'fecha': '2', 'sede': 19},
        {'aplicador': '0201959749', 'supervisor': '0706252459', 'fecha': '2', 'sede': 19},
        {'aplicador': '0929749497', 'supervisor': '0706252459', 'fecha': '2', 'sede': 19}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        mes = 9
        if int(dia) in (1, 2):
            mes = 10
        fecha = (datetime(2022, mes, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_ibarra_pregrado():
    periodo_id = 126
    sede_id = 4
    aData = [
        {'aplicador': '0923369748', 'supervisor': '0923480941', 'fecha': '20', 'sede': 4},
        {'aplicador': '0926843178', 'supervisor': '0923480941', 'fecha': '20', 'sede': 4},
        {'aplicador': '0929211571', 'supervisor': '0923480941', 'fecha': '20', 'sede': 4},
        {'aplicador': '0914740568', 'supervisor': '0923480941', 'fecha': '20', 'sede': 4},
        {'aplicador': '0923369748', 'supervisor': '0923480941', 'fecha': '21', 'sede': 4},
        {'aplicador': '0926843178', 'supervisor': '0923480941', 'fecha': '21', 'sede': 4},
        {'aplicador': '0929211571', 'supervisor': '0923480941', 'fecha': '21', 'sede': 4},
        {'aplicador': '0914740568', 'supervisor': '0923480941', 'fecha': '21', 'sede': 4},
        {'aplicador': '0923369748', 'supervisor': '0923480941', 'fecha': '22', 'sede': 4},
        {'aplicador': '0926843178', 'supervisor': '0923480941', 'fecha': '22', 'sede': 4},
        {'aplicador': '0929211571', 'supervisor': '0923480941', 'fecha': '22', 'sede': 4},
        {'aplicador': '0914740568', 'supervisor': '0923480941', 'fecha': '22', 'sede': 4}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        mes = 9
        if int(dia) in (1, 2):
            mes = 10
        fecha = (datetime(2022, mes, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_loja_pregrado():
    periodo_id = 126
    sede_id = 8
    aData = [
        {'aplicador': '0928427921', 'supervisor': '0921188074', 'fecha': '19', 'sede': 8},
        {'aplicador': '0917223430', 'supervisor': '0921188074', 'fecha': '19', 'sede': 8},
        {'aplicador': '0922566914', 'supervisor': '0921188074', 'fecha': '19', 'sede': 8},
        {'aplicador': '0922712260', 'supervisor': '0928427160', 'fecha': '19', 'sede': 8},
        {'aplicador': '0928366558', 'supervisor': '0928427160', 'fecha': '19', 'sede': 8},
        {'aplicador': '0923966238', 'supervisor': '0928427160', 'fecha': '19', 'sede': 8},
        {'aplicador': '0928427921', 'supervisor': '0921188074', 'fecha': '20', 'sede': 8},
        {'aplicador': '0917223430', 'supervisor': '0921188074', 'fecha': '20', 'sede': 8},
        {'aplicador': '0922566914', 'supervisor': '0921188074', 'fecha': '20', 'sede': 8},
        {'aplicador': '0922712260', 'supervisor': '0928427160', 'fecha': '20', 'sede': 8},
        {'aplicador': '0928366558', 'supervisor': '0928427160', 'fecha': '20', 'sede': 8},
        {'aplicador': '0923966238', 'supervisor': '0928427160', 'fecha': '20', 'sede': 8},
        {'aplicador': '0928427921', 'supervisor': '0921188074', 'fecha': '21', 'sede': 8},
        {'aplicador': '0917223430', 'supervisor': '0921188074', 'fecha': '21', 'sede': 8},
        {'aplicador': '0922566914', 'supervisor': '0921188074', 'fecha': '21', 'sede': 8},
        {'aplicador': '0922712260', 'supervisor': '0928427160', 'fecha': '21', 'sede': 8},
        {'aplicador': '0928366558', 'supervisor': '0928427160', 'fecha': '21', 'sede': 8},
        {'aplicador': '0923966238', 'supervisor': '0928427160', 'fecha': '21', 'sede': 8}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        mes = 9
        if int(dia) in (1, 2):
            mes = 10
        fecha = (datetime(2022, mes, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_orellana_pregrado():
    periodo_id = 126
    sede_id = 14
    aData = [
        {'aplicador': '0603450297', 'supervisor': '0922334354', 'fecha': '20', 'sede': 14},
        {'aplicador': '1803575594', 'supervisor': '0922334354', 'fecha': '20', 'sede': 14},
        {'aplicador': '0914013792', 'supervisor': '0922334354', 'fecha': '20', 'sede': 14},
        {'aplicador': '0603450297', 'supervisor': '0922334354', 'fecha': '21', 'sede': 14},
        {'aplicador': '1803575594', 'supervisor': '0922334354', 'fecha': '21', 'sede': 14},
        {'aplicador': '0914013792', 'supervisor': '0922334354', 'fecha': '21', 'sede': 14},
        {'aplicador': '0603450297', 'supervisor': '0922334354', 'fecha': '22', 'sede': 14},
        {'aplicador': '1803575594', 'supervisor': '0922334354', 'fecha': '22', 'sede': 14},
        {'aplicador': '0914013792', 'supervisor': '0922334354', 'fecha': '22', 'sede': 14}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        mes = 9
        if int(dia) in (1, 2):
            mes = 10
        fecha = (datetime(2022, mes, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_portoviejo_pregrado():
    periodo_id = 126
    sede_id = 15
    aData = [
        {'aplicador': '0914401948', 'supervisor': '1314881325', 'fecha': '21', 'sede': 15},
        {'aplicador': '0921914792', 'supervisor': '1314881325', 'fecha': '21', 'sede': 15},
        {'aplicador': '0926474289', 'supervisor': '0804024693', 'fecha': '21', 'sede': 15},
        {'aplicador': '1309091740', 'supervisor': '0804024693', 'fecha': '21', 'sede': 15},
        {'aplicador': '1717929275', 'supervisor': '0804024693', 'fecha': '21', 'sede': 15},
        {'aplicador': '0914401948', 'supervisor': '1314881325', 'fecha': '22', 'sede': 15},
        {'aplicador': '0921914792', 'supervisor': '1314881325', 'fecha': '22', 'sede': 15},
        {'aplicador': '0926474289', 'supervisor': '0804024693', 'fecha': '22', 'sede': 15},
        {'aplicador': '1309091740', 'supervisor': '0804024693', 'fecha': '22', 'sede': 15},
        {'aplicador': '1717929275', 'supervisor': '0804024693', 'fecha': '22', 'sede': 15},
        {'aplicador': '0914401948', 'supervisor': '1314881325', 'fecha': '23', 'sede': 15},
        {'aplicador': '0921914792', 'supervisor': '1314881325', 'fecha': '23', 'sede': 15},
        {'aplicador': '0926474289', 'supervisor': '0804024693', 'fecha': '23', 'sede': 15},
        {'aplicador': '1309091740', 'supervisor': '0804024693', 'fecha': '23', 'sede': 15},
        {'aplicador': '1717929275', 'supervisor': '0804024693', 'fecha': '23', 'sede': 15}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        mes = 9
        if int(dia) in (1, 2):
            mes = 10
        fecha = (datetime(2022, mes, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_riobamba_pregrado():
    periodo_id = 126
    sede_id = 7
    aData = [
        {'aplicador': '1758498362', 'supervisor': '0917035800', 'fecha': '19', 'sede': 7},
        {'aplicador': '1804623013', 'supervisor': '0917035800', 'fecha': '19', 'sede': 7},
        {'aplicador': '0605110766', 'supervisor': '0917035800', 'fecha': '19', 'sede': 7},
        {'aplicador': '0604591107', 'supervisor': '0917035800', 'fecha': '19', 'sede': 7},
        {'aplicador': '1805154216', 'supervisor': '1802627909', 'fecha': '19', 'sede': 7},
        {'aplicador': '0603248030', 'supervisor': '1802627909', 'fecha': '19', 'sede': 7},
        {'aplicador': '1804601969', 'supervisor': '1802627909', 'fecha': '19', 'sede': 7},
        {'aplicador': '1718498213', 'supervisor': '1802627909', 'fecha': '19', 'sede': 7},
        {'aplicador': '1758498362', 'supervisor': '0917035800', 'fecha': '20', 'sede': 7},
        {'aplicador': '1804623013', 'supervisor': '0917035800', 'fecha': '20', 'sede': 7},
        {'aplicador': '0605110766', 'supervisor': '0917035800', 'fecha': '20', 'sede': 7},
        {'aplicador': '0604591107', 'supervisor': '0917035800', 'fecha': '20', 'sede': 7},
        {'aplicador': '1805154216', 'supervisor': '1802627909', 'fecha': '20', 'sede': 7},
        {'aplicador': '0603248030', 'supervisor': '1802627909', 'fecha': '20', 'sede': 7},
        {'aplicador': '1804601969', 'supervisor': '1802627909', 'fecha': '20', 'sede': 7},
        {'aplicador': '1718498213', 'supervisor': '1802627909', 'fecha': '20', 'sede': 7},
        {'aplicador': '1758498362', 'supervisor': '0917035800', 'fecha': '21', 'sede': 7},
        {'aplicador': '1804623013', 'supervisor': '0917035800', 'fecha': '21', 'sede': 7},
        {'aplicador': '0605110766', 'supervisor': '0917035800', 'fecha': '21', 'sede': 7},
        {'aplicador': '0604591107', 'supervisor': '0917035800', 'fecha': '21', 'sede': 7},
        {'aplicador': '1805154216', 'supervisor': '1802627909', 'fecha': '21', 'sede': 7},
        {'aplicador': '0603248030', 'supervisor': '1802627909', 'fecha': '21', 'sede': 7},
        {'aplicador': '1804601969', 'supervisor': '1802627909', 'fecha': '21', 'sede': 7},
        {'aplicador': '1718498213', 'supervisor': '1802627909', 'fecha': '21', 'sede': 7},
        {'aplicador': '1758498362', 'supervisor': '0917035800', 'fecha': '22', 'sede': 7}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        mes = 9
        if int(dia) in (1, 2):
            mes = 10
        fecha = (datetime(2022, mes, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_quevedo_pregrado():
    periodo_id = 126
    sede_id = 5
    aData = [
        {'aplicador': '0924679202', 'supervisor': '1204607616', 'fecha': '19', 'sede': 5},
        {'aplicador': '1205719923', 'supervisor': '1204607616', 'fecha': '19', 'sede': 5},
        {'aplicador': '0928428945', 'supervisor': '1204607616', 'fecha': '19', 'sede': 5},
        {'aplicador': '1204633786', 'supervisor': '1203113855', 'fecha': '19', 'sede': 5},
        {'aplicador': '1203745953', 'supervisor': '1203113855', 'fecha': '19', 'sede': 5},
        {'aplicador': '0922335286', 'supervisor': '1203113855', 'fecha': '19', 'sede': 5},
        {'aplicador': '0924679202', 'supervisor': '1204607616', 'fecha': '20', 'sede': 5},
        {'aplicador': '1205719923', 'supervisor': '1204607616', 'fecha': '20', 'sede': 5},
        {'aplicador': '0928428945', 'supervisor': '1204607616', 'fecha': '20', 'sede': 5},
        {'aplicador': '1204633786', 'supervisor': '1203113855', 'fecha': '20', 'sede': 5},
        {'aplicador': '1203745953', 'supervisor': '1203113855', 'fecha': '20', 'sede': 5},
        {'aplicador': '0922335286', 'supervisor': '1203113855', 'fecha': '20', 'sede': 5},
        {'aplicador': '0924679202', 'supervisor': '1204607616', 'fecha': '21', 'sede': 5},
        {'aplicador': '1205719923', 'supervisor': '1204607616', 'fecha': '21', 'sede': 5},
        {'aplicador': '0928428945', 'supervisor': '1204607616', 'fecha': '21', 'sede': 5},
        {'aplicador': '1204633786', 'supervisor': '1203113855', 'fecha': '21', 'sede': 5},
        {'aplicador': '1203745953', 'supervisor': '1203113855', 'fecha': '21', 'sede': 5},
        {'aplicador': '0922335286', 'supervisor': '1203113855', 'fecha': '21', 'sede': 5},
        {'aplicador': '0924679202', 'supervisor': '1204607616', 'fecha': '22', 'sede': 5},
        {'aplicador': '1205719923', 'supervisor': '1204607616', 'fecha': '22', 'sede': 5},
        {'aplicador': '0919995787', 'supervisor': '1204607616', 'fecha': '22', 'sede': 5},
        {'aplicador': '1204633786', 'supervisor': '1203113855', 'fecha': '22', 'sede': 5},
        {'aplicador': '1203745953', 'supervisor': '1203113855', 'fecha': '22', 'sede': 5},
        {'aplicador': '0922335286', 'supervisor': '1203113855', 'fecha': '22', 'sede': 5},
        {'aplicador': '0924679202', 'supervisor': '1204607616', 'fecha': '22', 'sede': 5},
        {'aplicador': '1205719923', 'supervisor': '1204607616', 'fecha': '22', 'sede': 5},
        {'aplicador': '0919995787', 'supervisor': '1204607616', 'fecha': '22', 'sede': 5},
        {'aplicador': '1204633786', 'supervisor': '1203113855', 'fecha': '22', 'sede': 5},
        {'aplicador': '1203745953', 'supervisor': '1203113855', 'fecha': '22', 'sede': 5},
        {'aplicador': '0922335286', 'supervisor': '1203113855', 'fecha': '22', 'sede': 5},
        {'aplicador': '0920345238', 'supervisor': '0926613076', 'fecha': '26', 'sede': 5},
        {'aplicador': '1205719923', 'supervisor': '0926613076', 'fecha': '26', 'sede': 5},
        {'aplicador': '1201066501', 'supervisor': '0926613076', 'fecha': '26', 'sede': 5},
        {'aplicador': '0919305268', 'supervisor': '0926613076', 'fecha': '26', 'sede': 5},
        {'aplicador': '1718588351', 'supervisor': '0926613076', 'fecha': '26', 'sede': 5},
        {'aplicador': '0924777436', 'supervisor': '0926613076', 'fecha': '26', 'sede': 5},
        {'aplicador': '0920345238', 'supervisor': '0926613076', 'fecha': '27', 'sede': 5},
        {'aplicador': '1205719923', 'supervisor': '0926613076', 'fecha': '27', 'sede': 5},
        {'aplicador': '1201066501', 'supervisor': '0926613076', 'fecha': '27', 'sede': 5},
        {'aplicador': '0919305268', 'supervisor': '0926613076', 'fecha': '27', 'sede': 5},
        {'aplicador': '1718588351', 'supervisor': '0926613076', 'fecha': '27', 'sede': 5},
        {'aplicador': '0924777436', 'supervisor': '0926613076', 'fecha': '27', 'sede': 5}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        mes = 9
        if int(dia) in (1, 2):
            mes = 10
        fecha = (datetime(2022, mes, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_babahoyo_pregrado():
    periodo_id = 126
    sede_id = 12
    aData = [
        {'aplicador': '1204356487', 'supervisor': '1202767586', 'fecha': '19', 'sede': 12},
        {'aplicador': '1204356487', 'supervisor': '1202767586', 'fecha': '20', 'sede': 12},
        {'aplicador': '1204356487', 'supervisor': '1202767586', 'fecha': '21', 'sede': 12},
        {'aplicador': '1204356487', 'supervisor': '1202767586', 'fecha': '22', 'sede': 12},
        {'aplicador': '1204356487', 'supervisor': '1202767586', 'fecha': '23', 'sede': 12},
        {'aplicador': '1204147423', 'supervisor': '1202767586', 'fecha': '19', 'sede': 12},
        {'aplicador': '1204147423', 'supervisor': '1202767586', 'fecha': '20', 'sede': 12},
        {'aplicador': '1204147423', 'supervisor': '1202767586', 'fecha': '21', 'sede': 12},
        {'aplicador': '1204147423', 'supervisor': '1202767586', 'fecha': '22', 'sede': 12},
        {'aplicador': '1204147423', 'supervisor': '1202767586', 'fecha': '23', 'sede': 12},
        {'aplicador': '1202517189', 'supervisor': '1202767586', 'fecha': '19', 'sede': 12},
        {'aplicador': '1202517189', 'supervisor': '1202767586', 'fecha': '20', 'sede': 12},
        {'aplicador': '1202517189', 'supervisor': '1202767586', 'fecha': '21', 'sede': 12},
        {'aplicador': '1203987936', 'supervisor': '1202767586', 'fecha': '22', 'sede': 12},
        {'aplicador': '1203987936', 'supervisor': '1202767586', 'fecha': '23', 'sede': 12},
        {'aplicador': '0920344793', 'supervisor': '0941149601', 'fecha': '26', 'sede': 12},
        {'aplicador': '0920344793', 'supervisor': '0941149601', 'fecha': '27', 'sede': 12},
        {'aplicador': '0920344793', 'supervisor': '0941149601', 'fecha': '28', 'sede': 12},
        {'aplicador': '0920344793', 'supervisor': '0941149601', 'fecha': '29', 'sede': 12},
        {'aplicador': '1202517189', 'supervisor': '0941149601', 'fecha': '26', 'sede': 12},
        {'aplicador': '1202517189', 'supervisor': '0941149601', 'fecha': '27', 'sede': 12},
        {'aplicador': '1202517189', 'supervisor': '0941149601', 'fecha': '28', 'sede': 12},
        {'aplicador': '1202517189', 'supervisor': '0941149601', 'fecha': '29', 'sede': 12},
        {'aplicador': '0918506759', 'supervisor': '0941149601', 'fecha': '26', 'sede': 12},
        {'aplicador': '0918506759', 'supervisor': '0941149601', 'fecha': '27', 'sede': 12},
        {'aplicador': '0918506759', 'supervisor': '0941149601', 'fecha': '28', 'sede': 12},
        {'aplicador': '0918506759', 'supervisor': '0941149601', 'fecha': '29', 'sede': 12},
        {'aplicador': '0918506759', 'supervisor': '0941149601', 'fecha': '30', 'sede': 12}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        mes = 9
        if int(dia) in (1, 2):
            mes = 10
        fecha = (datetime(2022, mes, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_guayaquil_pregrado():
    periodo_id = 126
    sede_id = 13
    aData = [
        {'aplicador': '0914116918', 'supervisor': '0926474040', 'fecha': '19', 'sede': 13},
        {'aplicador': '0914288295', 'supervisor': '0926474040', 'fecha': '19', 'sede': 13},
        {'aplicador': '0915922256', 'supervisor': '0926474040', 'fecha': '19', 'sede': 13},
        {'aplicador': '1314334697', 'supervisor': '0926474040', 'fecha': '19', 'sede': 13},
        {'aplicador': '0956167449', 'supervisor': '0923605513', 'fecha': '19', 'sede': 13},
        {'aplicador': '0909749657', 'supervisor': '0923605513', 'fecha': '19', 'sede': 13},
        {'aplicador': '0917635336', 'supervisor': '0923605513', 'fecha': '19', 'sede': 13},
        {'aplicador': '0913935078', 'supervisor': '0923605513', 'fecha': '19', 'sede': 13},
        {'aplicador': '0915377998', 'supervisor': '0923505069', 'fecha': '19', 'sede': 13},
        {'aplicador': '0921484721', 'supervisor': '0923505069', 'fecha': '19', 'sede': 13},
        {'aplicador': '0917971137', 'supervisor': '0923505069', 'fecha': '19', 'sede': 13},
        {'aplicador': '0912943032', 'supervisor': '0923175855', 'fecha': '19', 'sede': 13},
        {'aplicador': '0918111147', 'supervisor': '0923175855', 'fecha': '19', 'sede': 13},
        {'aplicador': '2300269335', 'supervisor': '0923175855', 'fecha': '19', 'sede': 13},
        {'aplicador': '0914116918', 'supervisor': '0926474040', 'fecha': '20', 'sede': 13},
        {'aplicador': '0914288295', 'supervisor': '0926474040', 'fecha': '20', 'sede': 13},
        {'aplicador': '0915922256', 'supervisor': '0926474040', 'fecha': '20', 'sede': 13},
        {'aplicador': '1314334697', 'supervisor': '0926474040', 'fecha': '20', 'sede': 13},
        {'aplicador': '0956167449', 'supervisor': '0923605513', 'fecha': '20', 'sede': 13},
        {'aplicador': '0909749657', 'supervisor': '0923605513', 'fecha': '20', 'sede': 13},
        {'aplicador': '0917635336', 'supervisor': '0923605513', 'fecha': '20', 'sede': 13},
        {'aplicador': '0913935078', 'supervisor': '0923605513', 'fecha': '20', 'sede': 13},
        {'aplicador': '0915377998', 'supervisor': '0923505069', 'fecha': '20', 'sede': 13},
        {'aplicador': '0921484721', 'supervisor': '0923505069', 'fecha': '20', 'sede': 13},
        {'aplicador': '0917971137', 'supervisor': '0923505069', 'fecha': '20', 'sede': 13},
        {'aplicador': '0912943032', 'supervisor': '0923175855', 'fecha': '20', 'sede': 13},
        {'aplicador': '0918111147', 'supervisor': '0923175855', 'fecha': '20', 'sede': 13},
        {'aplicador': '2300269335', 'supervisor': '0923175855', 'fecha': '20', 'sede': 13},
        {'aplicador': '0914116918', 'supervisor': '0926474040', 'fecha': '21', 'sede': 13},
        {'aplicador': '0914288295', 'supervisor': '0926474040', 'fecha': '21', 'sede': 13},
        {'aplicador': '0915922256', 'supervisor': '0926474040', 'fecha': '21', 'sede': 13},
        {'aplicador': '1314334697', 'supervisor': '0926474040', 'fecha': '21', 'sede': 13},
        {'aplicador': '0956167449', 'supervisor': '0923605513', 'fecha': '21', 'sede': 13},
        {'aplicador': '0909749657', 'supervisor': '0923605513', 'fecha': '21', 'sede': 13},
        {'aplicador': '0917635336', 'supervisor': '0923605513', 'fecha': '21', 'sede': 13},
        {'aplicador': '0913935078', 'supervisor': '0923605513', 'fecha': '21', 'sede': 13},
        {'aplicador': '0915377998', 'supervisor': '0923505069', 'fecha': '21', 'sede': 13},
        {'aplicador': '0921484721', 'supervisor': '0923505069', 'fecha': '21', 'sede': 13},
        {'aplicador': '0917971137', 'supervisor': '0923505069', 'fecha': '21', 'sede': 13},
        {'aplicador': '0912943032', 'supervisor': '0923175855', 'fecha': '21', 'sede': 13},
        {'aplicador': '0918111147', 'supervisor': '0923175855', 'fecha': '21', 'sede': 13},
        {'aplicador': '2300269335', 'supervisor': '0923175855', 'fecha': '21', 'sede': 13},
        {'aplicador': '0914116918', 'supervisor': '0926474040', 'fecha': '22', 'sede': 13},
        {'aplicador': '0914288295', 'supervisor': '0926474040', 'fecha': '22', 'sede': 13},
        {'aplicador': '0915922256', 'supervisor': '0926474040', 'fecha': '22', 'sede': 13},
        {'aplicador': '1314334697', 'supervisor': '0926474040', 'fecha': '22', 'sede': 13},
        {'aplicador': '0956167449', 'supervisor': '0923605513', 'fecha': '22', 'sede': 13},
        {'aplicador': '0909749657', 'supervisor': '0923605513', 'fecha': '22', 'sede': 13},
        {'aplicador': '0917635336', 'supervisor': '0923605513', 'fecha': '22', 'sede': 13},
        {'aplicador': '0913935078', 'supervisor': '0923605513', 'fecha': '22', 'sede': 13},
        {'aplicador': '0915377998', 'supervisor': '0923505069', 'fecha': '22', 'sede': 13},
        {'aplicador': '0921484721', 'supervisor': '0923505069', 'fecha': '22', 'sede': 13},
        {'aplicador': '0917971137', 'supervisor': '0923505069', 'fecha': '22', 'sede': 13},
        {'aplicador': '0912943032', 'supervisor': '0923175855', 'fecha': '22', 'sede': 13},
        {'aplicador': '0918111147', 'supervisor': '0923175855', 'fecha': '22', 'sede': 13},
        {'aplicador': '2300269335', 'supervisor': '0923175855', 'fecha': '22', 'sede': 13},
        {'aplicador': '0914116918', 'supervisor': '0926474040', 'fecha': '23', 'sede': 13},
        {'aplicador': '0914288295', 'supervisor': '0926474040', 'fecha': '23', 'sede': 13},
        {'aplicador': '0915922256', 'supervisor': '0926474040', 'fecha': '23', 'sede': 13},
        {'aplicador': '1314334697', 'supervisor': '0926474040', 'fecha': '23', 'sede': 13},
        {'aplicador': '0956167449', 'supervisor': '0923605513', 'fecha': '23', 'sede': 13},
        {'aplicador': '0909749657', 'supervisor': '0923605513', 'fecha': '23', 'sede': 13},
        {'aplicador': '0917635336', 'supervisor': '0923605513', 'fecha': '23', 'sede': 13},
        {'aplicador': '0913935078', 'supervisor': '0923605513', 'fecha': '23', 'sede': 13},
        {'aplicador': '0915377998', 'supervisor': '0923505069', 'fecha': '23', 'sede': 13},
        {'aplicador': '0921484721', 'supervisor': '0923505069', 'fecha': '23', 'sede': 13},
        {'aplicador': '0917971137', 'supervisor': '0923505069', 'fecha': '23', 'sede': 13},
        {'aplicador': '0912943032', 'supervisor': '0923175855', 'fecha': '23', 'sede': 13},
        {'aplicador': '0918111147', 'supervisor': '0923175855', 'fecha': '23', 'sede': 13},
        {'aplicador': '2300269335', 'supervisor': '0923175855', 'fecha': '23', 'sede': 13},
        {'aplicador': '1310715535', 'supervisor': '0941781726', 'fecha': '26', 'sede': 13},
        {'aplicador': '0917777237', 'supervisor': '0941781726', 'fecha': '26', 'sede': 13},
        {'aplicador': '0940321516', 'supervisor': '0941781726', 'fecha': '26', 'sede': 13},
        {'aplicador': '0919412510', 'supervisor': '0941781726', 'fecha': '26', 'sede': 13},
        {'aplicador': '0918539149', 'supervisor': '0929760494', 'fecha': '26', 'sede': 13},
        {'aplicador': '0916367048', 'supervisor': '0929760494', 'fecha': '26', 'sede': 13},
        {'aplicador': '0910429869', 'supervisor': '0929760494', 'fecha': '26', 'sede': 13},
        {'aplicador': '0918303397', 'supervisor': '0929760494', 'fecha': '26', 'sede': 13},
        {'aplicador': '0911373868', 'supervisor': '0942192188', 'fecha': '26', 'sede': 13},
        {'aplicador': '0706464328', 'supervisor': '0942192188', 'fecha': '26', 'sede': 13},
        {'aplicador': '0927575498', 'supervisor': '0942192188', 'fecha': '26', 'sede': 13},
        {'aplicador': '0916514482', 'supervisor': '0919307801', 'fecha': '26', 'sede': 13},
        {'aplicador': '0919545335', 'supervisor': '0919307801', 'fecha': '26', 'sede': 13},
        {'aplicador': '0917537318', 'supervisor': '0919307801', 'fecha': '26', 'sede': 13},
        {'aplicador': '1310715535', 'supervisor': '0941781726', 'fecha': '27', 'sede': 13},
        {'aplicador': '0917777237', 'supervisor': '0941781726', 'fecha': '27', 'sede': 13},
        {'aplicador': '0940321516', 'supervisor': '0941781726', 'fecha': '27', 'sede': 13},
        {'aplicador': '0919412510', 'supervisor': '0941781726', 'fecha': '27', 'sede': 13},
        {'aplicador': '0918539149', 'supervisor': '0929760494', 'fecha': '27', 'sede': 13},
        {'aplicador': '0916367048', 'supervisor': '0929760494', 'fecha': '27', 'sede': 13},
        {'aplicador': '0910429869', 'supervisor': '0929760494', 'fecha': '27', 'sede': 13},
        {'aplicador': '0918303397', 'supervisor': '0929760494', 'fecha': '27', 'sede': 13},
        {'aplicador': '0911373868', 'supervisor': '0942192188', 'fecha': '27', 'sede': 13},
        {'aplicador': '0706464328', 'supervisor': '0942192188', 'fecha': '27', 'sede': 13},
        {'aplicador': '0927575498', 'supervisor': '0942192188', 'fecha': '27', 'sede': 13},
        {'aplicador': '0916514482', 'supervisor': '0919307801', 'fecha': '27', 'sede': 13},
        {'aplicador': '0919545335', 'supervisor': '0919307801', 'fecha': '27', 'sede': 13},
        {'aplicador': '0917537318', 'supervisor': '0919307801', 'fecha': '27', 'sede': 13},
        {'aplicador': '1310715535', 'supervisor': '0941781726', 'fecha': '28', 'sede': 13},
        {'aplicador': '0917777237', 'supervisor': '0941781726', 'fecha': '28', 'sede': 13},
        {'aplicador': '0940321516', 'supervisor': '0941781726', 'fecha': '28', 'sede': 13},
        {'aplicador': '0919412510', 'supervisor': '0941781726', 'fecha': '28', 'sede': 13},
        {'aplicador': '0918539149', 'supervisor': '0929760494', 'fecha': '28', 'sede': 13},
        {'aplicador': '0916367048', 'supervisor': '0929760494', 'fecha': '28', 'sede': 13},
        {'aplicador': '0910429869', 'supervisor': '0929760494', 'fecha': '28', 'sede': 13},
        {'aplicador': '0918303397', 'supervisor': '0929760494', 'fecha': '28', 'sede': 13},
        {'aplicador': '0911373868', 'supervisor': '0942192188', 'fecha': '28', 'sede': 13},
        {'aplicador': '0706464328', 'supervisor': '0942192188', 'fecha': '28', 'sede': 13},
        {'aplicador': '0927575498', 'supervisor': '0942192188', 'fecha': '28', 'sede': 13},
        {'aplicador': '0916514482', 'supervisor': '0919307801', 'fecha': '28', 'sede': 13},
        {'aplicador': '0919545335', 'supervisor': '0919307801', 'fecha': '28', 'sede': 13},
        {'aplicador': '0917537318', 'supervisor': '0919307801', 'fecha': '28', 'sede': 13},
        {'aplicador': '1310715535', 'supervisor': '0941781726', 'fecha': '29', 'sede': 13},
        {'aplicador': '0917777237', 'supervisor': '0941781726', 'fecha': '29', 'sede': 13},
        {'aplicador': '0940321516', 'supervisor': '0941781726', 'fecha': '29', 'sede': 13},
        {'aplicador': '0919412510', 'supervisor': '0941781726', 'fecha': '29', 'sede': 13},
        {'aplicador': '0918539149', 'supervisor': '0929760494', 'fecha': '29', 'sede': 13},
        {'aplicador': '0916367048', 'supervisor': '0929760494', 'fecha': '29', 'sede': 13},
        {'aplicador': '0910429869', 'supervisor': '0929760494', 'fecha': '29', 'sede': 13},
        {'aplicador': '0918303397', 'supervisor': '0929760494', 'fecha': '29', 'sede': 13},
        {'aplicador': '0911373868', 'supervisor': '0942192188', 'fecha': '29', 'sede': 13},
        {'aplicador': '0706464328', 'supervisor': '0942192188', 'fecha': '29', 'sede': 13},
        {'aplicador': '0927575498', 'supervisor': '0942192188', 'fecha': '29', 'sede': 13},
        {'aplicador': '0916514482', 'supervisor': '0919307801', 'fecha': '29', 'sede': 13},
        {'aplicador': '0919545335', 'supervisor': '0919307801', 'fecha': '29', 'sede': 13},
        {'aplicador': '0917537318', 'supervisor': '0919307801', 'fecha': '29', 'sede': 13}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        mes = 9
        if int(dia) in (1, 2):
            mes = 10
        fecha = (datetime(2022, mes, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_machala_pregrado():
    periodo_id = 126
    sede_id = 3
    aData = [
        {'aplicador': '0702959297', 'supervisor': '0928896687', 'fecha': '19', 'sede': 3},
        {'aplicador': '0702959297', 'supervisor': '0928896687', 'fecha': '20', 'sede': 3},
        {'aplicador': '0702959297', 'supervisor': '0928896687', 'fecha': '21', 'sede': 3},
        {'aplicador': '0929617124', 'supervisor': '0926475641', 'fecha': '19', 'sede': 3},
        {'aplicador': '0929617124', 'supervisor': '0926475641', 'fecha': '20', 'sede': 3},
        {'aplicador': '0929617124', 'supervisor': '0926475641', 'fecha': '21', 'sede': 3},
        {'aplicador': '0922989827', 'supervisor': '0923488324', 'fecha': '19', 'sede': 3},
        {'aplicador': '0922989827', 'supervisor': '0923488324', 'fecha': '20', 'sede': 3},
        {'aplicador': '0922989827', 'supervisor': '0923488324', 'fecha': '21', 'sede': 3},
        {'aplicador': '0920847365', 'supervisor': '0925008344', 'fecha': '19', 'sede': 3},
        {'aplicador': '0920847365', 'supervisor': '0925008344', 'fecha': '20', 'sede': 3},
        {'aplicador': '0920847365', 'supervisor': '0925008344', 'fecha': '21', 'sede': 3},
        {'aplicador': '0923600621', 'supervisor': '0953392313', 'fecha': '19', 'sede': 3},
        {'aplicador': '0923600621', 'supervisor': '0953392313', 'fecha': '20', 'sede': 3},
        {'aplicador': '0923600621', 'supervisor': '0953392313', 'fecha': '21', 'sede': 3},
        {'aplicador': '0919995373', 'supervisor': '0928896687', 'fecha': '19', 'sede': 3},
        {'aplicador': '0919995373', 'supervisor': '0928896687', 'fecha': '20', 'sede': 3},
        {'aplicador': '0919995373', 'supervisor': '0928896687', 'fecha': '21', 'sede': 3},
        {'aplicador': '0919457697', 'supervisor': '0926475641', 'fecha': '19', 'sede': 3},
        {'aplicador': '0919457697', 'supervisor': '0926475641', 'fecha': '20', 'sede': 3},
        {'aplicador': '0919457697', 'supervisor': '0926475641', 'fecha': '21', 'sede': 3},
        {'aplicador': '0927957373', 'supervisor': '0923488324', 'fecha': '19', 'sede': 3},
        {'aplicador': '0927957373', 'supervisor': '0923488324', 'fecha': '20', 'sede': 3},
        {'aplicador': '0927957373', 'supervisor': '0923488324', 'fecha': '21', 'sede': 3},
        {'aplicador': '0921533865', 'supervisor': '0925008344', 'fecha': '19', 'sede': 3},
        {'aplicador': '0921533865', 'supervisor': '0925008344', 'fecha': '20', 'sede': 3},
        {'aplicador': '0921533865', 'supervisor': '0925008344', 'fecha': '21', 'sede': 3},
        {'aplicador': '1206322727', 'supervisor': '0953392313', 'fecha': '19', 'sede': 3},
        {'aplicador': '1206322727', 'supervisor': '0953392313', 'fecha': '20', 'sede': 3},
        {'aplicador': '1206322727', 'supervisor': '0953392313', 'fecha': '21', 'sede': 3},
        {'aplicador': '0703868737', 'supervisor': '0928896687', 'fecha': '19', 'sede': 3},
        {'aplicador': '0703868737', 'supervisor': '0928896687', 'fecha': '20', 'sede': 3},
        {'aplicador': '0703868737', 'supervisor': '0928896687', 'fecha': '21', 'sede': 3},
        {'aplicador': '0930529102', 'supervisor': '0926475641', 'fecha': '19', 'sede': 3},
        {'aplicador': '0930529102', 'supervisor': '0926475641', 'fecha': '20', 'sede': 3},
        {'aplicador': '0930529102', 'supervisor': '0926475641', 'fecha': '21', 'sede': 3},
        {'aplicador': '0705046514', 'supervisor': '0923488324', 'fecha': '19', 'sede': 3},
        {'aplicador': '0705046514', 'supervisor': '0923488324', 'fecha': '20', 'sede': 3},
        {'aplicador': '0705046514', 'supervisor': '0923488324', 'fecha': '21', 'sede': 3},
        {'aplicador': '0930527171', 'supervisor': '0925008344', 'fecha': '19', 'sede': 3},
        {'aplicador': '0930527171', 'supervisor': '0925008344', 'fecha': '20', 'sede': 3},
        {'aplicador': '0930527171', 'supervisor': '0925008344', 'fecha': '21', 'sede': 3},
        {'aplicador': '0961001963', 'supervisor': '0953392313', 'fecha': '19', 'sede': 3},
        {'aplicador': '0961001963', 'supervisor': '0953392313', 'fecha': '20', 'sede': 3},
        {'aplicador': '0961001963', 'supervisor': '0953392313', 'fecha': '21', 'sede': 3},
        {'aplicador': '0961001963', 'supervisor': '0953392313', 'fecha': '22', 'sede': 3},
        {'aplicador': '1206317750', 'supervisor': '0928896687', 'fecha': '19', 'sede': 3},
        {'aplicador': '1206317750', 'supervisor': '0928896687', 'fecha': '20', 'sede': 3},
        {'aplicador': '1206317750', 'supervisor': '0928896687', 'fecha': '21', 'sede': 3},
        {'aplicador': '0924461817', 'supervisor': '0926475641', 'fecha': '19', 'sede': 3},
        {'aplicador': '0924461817', 'supervisor': '0926475641', 'fecha': '20', 'sede': 3},
        {'aplicador': '0924461817', 'supervisor': '0926475641', 'fecha': '21', 'sede': 3},
        {'aplicador': '0919006007', 'supervisor': '0923488324', 'fecha': '19', 'sede': 3},
        {'aplicador': '0919006007', 'supervisor': '0923488324', 'fecha': '20', 'sede': 3},
        {'aplicador': '0919006007', 'supervisor': '0923488324', 'fecha': '21', 'sede': 3},
        {'aplicador': '0923583215', 'supervisor': '0925008344', 'fecha': '19', 'sede': 3},
        {'aplicador': '0923583215', 'supervisor': '0925008344', 'fecha': '20', 'sede': 3},
        {'aplicador': '0923583215', 'supervisor': '0925008344', 'fecha': '21', 'sede': 3},
        {'aplicador': '0930826276', 'supervisor': '0953392313', 'fecha': '19', 'sede': 3},
        {'aplicador': '0930826276', 'supervisor': '0953392313', 'fecha': '20', 'sede': 3},
        {'aplicador': '0930826276', 'supervisor': '0953392313', 'fecha': '21', 'sede': 3}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento_aplicador = data.get('aplicador')
        supervisor_aplicador = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        mes = 9
        if int(dia) in (1, 2):
            mes = 10
        fecha = (datetime(2022, mes, int(dia), 0, 0, 0)).date()
        horainicio = datetime(2022, 9, 1, 0, 0, 1).time()
        horafin = datetime(2022, 9, 1, 23, 59, 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento_aplicador) | Q(pasaporte=documento_aplicador))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        eSupervisores = Persona.objects.filter(Q(cedula=supervisor_aplicador) | Q(pasaporte=supervisor_aplicador))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eAplicador and eSupervisor:
            eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
            for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                    fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                    horafin__lte=horafin)
                for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                        turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                    if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                        print(
                            f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                        eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable=eAplicador).first()
                        eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                        print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                        eAulaPlanificacionSedeVirtualExamen.save()
                    else:
                        eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                            responsable__isnull=True)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                            eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                            eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                            print(
                                f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                            eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                            print(
                                f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        # else:
        #     print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_aplicadores_sede_milagro_pregrado():
    periodo_id = 126
    sede_id = 1
    aData = [
        {'aplicador': '0918306176', 'sede': 1, 'laboratorio': 'CRAI - LABORATORIO', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0917926040', 'sede': 1, 'laboratorio': 'H - 109', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0921283834', 'sede': 1, 'laboratorio': 'H - 103', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0925169278', 'sede': 1, 'laboratorio': 'H - 101', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0927317743', 'sede': 1, 'laboratorio': 'H - 102', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '1206659490', 'sede': 1, 'laboratorio': 'P - 202', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0921282240', 'sede': 1, 'laboratorio': 'H - 108', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0923480305', 'sede': 1, 'laboratorio': 'P - 201', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0917712127', 'sede': 1, 'laboratorio': 'H - 105', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0918306788', 'sede': 1, 'laboratorio': 'P - 101', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0929212884', 'sede': 1, 'laboratorio': 'P - 102', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0922876529', 'sede': 1, 'laboratorio': 'H - 107', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0923489710', 'sede': 1, 'laboratorio': 'P - 103', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0913134979', 'sede': 1, 'laboratorio': 'P - 203', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0928644871', 'sede': 1, 'laboratorio': 'P - 204', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0925005605', 'sede': 1, 'laboratorio': 'P - 203', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0927878785', 'sede': 1, 'laboratorio': 'H - 102', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0927317081', 'sede': 1, 'laboratorio': 'H - 103', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0916396054', 'sede': 1, 'laboratorio': 'H - 105', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0916575962', 'sede': 1, 'laboratorio': 'H - 107', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0917384026', 'sede': 1, 'laboratorio': 'H - 108', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0924186265', 'sede': 1, 'laboratorio': 'H - 109', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0924676240', 'sede': 1, 'laboratorio': 'P - 101', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0924775786', 'sede': 1, 'laboratorio': 'P - 103', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0928429745', 'sede': 1, 'laboratorio': 'P - 201', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0913136693', 'sede': 1, 'laboratorio': 'H - 101', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0918566647', 'sede': 1, 'laboratorio': 'P - 102', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0916866742', 'sede': 1, 'laboratorio': 'P - 202', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0928647452', 'sede': 1, 'laboratorio': 'P - 204', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0916217789', 'sede': 1, 'laboratorio': 'CRAI - LABORATORIO', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'aplicador': '1803244696', 'sede': 1, 'laboratorio': 'H - 101', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0927164152', 'sede': 1, 'laboratorio': 'H - 103', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0911301943', 'sede': 1, 'laboratorio': 'H - 105', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0919413518', 'sede': 1, 'laboratorio': 'H - 107', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0961344645', 'sede': 1, 'laboratorio': 'P - 201', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0906660212', 'sede': 1, 'laboratorio': 'P - 102', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '1204766024', 'sede': 1, 'laboratorio': 'P - 202', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '1102907613', 'sede': 1, 'laboratorio': 'H - 108', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0918846395', 'sede': 1, 'laboratorio': 'P - 204', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0909442543', 'sede': 1, 'laboratorio': 'CRAI - LABORATORIO', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0924508617', 'sede': 1, 'laboratorio': 'H - 109', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0928422831', 'sede': 1, 'laboratorio': 'P - 101', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '1202683882', 'sede': 1, 'laboratorio': 'P - 103', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0926619784', 'sede': 1, 'laboratorio': 'P - 203', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0941328635', 'sede': 1, 'laboratorio': 'H - 102', 'fechas': '24-25-26-27',
         'horario': '07:00 - 14:29'},
        {'aplicador': '0926151929', 'sede': 1, 'laboratorio': 'P - 201', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0928364199', 'sede': 1, 'laboratorio': 'P - 101', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '1709761280', 'sede': 1, 'laboratorio': 'P - 102', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0916697204', 'sede': 1, 'laboratorio': 'P - 103', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0912652252', 'sede': 1, 'laboratorio': 'H - 103', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '1204833923', 'sede': 1, 'laboratorio': 'H - 105', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0913800298', 'sede': 1, 'laboratorio': 'P - 202', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0918694605', 'sede': 1, 'laboratorio': 'H - 108', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0925404394', 'sede': 1, 'laboratorio': 'H - 109', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0954280079', 'sede': 1, 'laboratorio': 'P - 203', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0918845918', 'sede': 1, 'laboratorio': 'P - 204', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0925567489', 'sede': 1, 'laboratorio': 'CRAI - LABORATORIO', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0913115549', 'sede': 1, 'laboratorio': 'H - 107', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0919305656', 'sede': 1, 'laboratorio': 'H - 102', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'},
        {'aplicador': '0940323496', 'sede': 1, 'laboratorio': 'H - 101', 'fechas': '24-25-26-27',
         'horario': '14:30 - 22:00'}
    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento = data.get('aplicador')
        dia = data.get('fecha')
        sede = data.get('sede')
        dias = data.get('fechas').split('-')
        horario = data.get('horario').split(' - ')
        laboratorio = data.get('laboratorio')
        tiempoinicio = horario[0]
        tiempofin = horario[1]
        fechas = []
        for dia in dias:
            mes = 9
            if int(dia) in (1, 2):
                mes = 10
            fechas.append((datetime(2022, mes, int(dia), 0, 0, 0)).date())
        horainicio = None
        horafin = None
        hora = tiempoinicio.split(':')
        horainicio = datetime(2022, 9, 1, int(hora[0]), int(hora[1]), 0).time()
        hora = tiempofin.split(':')
        horafin = datetime(2022, 9, 1, int(hora[0]), int(hora[1]), 59).time()
        eAplicador = None
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eAplicadores = Persona.objects.filter(Q(cedula=documento) | Q(pasaporte=documento))
        if eAplicadores.values("id").exists():
            eAplicador = eAplicadores.first()
        if eAplicador:
            for fecha in fechas:
                eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                    sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
                for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                    eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                        fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                        horafin__lte=horafin)
                    for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                        eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                            turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(responsable=eAplicador).exists():
                            print(
                                f"Aplicador con documento {eAplicador.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                            # eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(responsable=eAplicador).first()
                            # eAulaPlanificacionSedeVirtualExamen.supervisor = None
                            # print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            # eAulaPlanificacionSedeVirtualExamen.save()
                        else:
                            eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                                responsable__isnull=True, aula__nombre=laboratorio)
                            if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                                eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                                eAulaPlanificacionSedeVirtualExamen.responsable = eAplicador
                                print(
                                    f"Se agrego planificación de aplicador {eAulaPlanificacionSedeVirtualExamen.responsable}")
                                # eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                                # print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                                eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        else:
            print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def planificar_supervisores_sede_machala_pregrado():
    periodo_id = 126
    sede_id = 3
    aData = [
        {'idp': 28985, 'aulas': '001-002-003-004'},
        {'idp': 1652, 'aulas': '005-006-007-008'},
        {'idp': 902, 'aulas': '009-010-011-012 '},
        {'idp': 27989, 'aulas': '013-014-015-016'},
        {'idp': 23333, 'aulas': '017-018-019-020'},

    ]
    total = len(aData)
    contador = 0
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAulaPlanificacionSedeVirtualExamenes.update(supervisor=None)
    for data in aData:
        idp = data.get('idp')
        aulas = data.get('aulas')
        eAulas = []
        for aula in aulas.split('-'):
            eLaboratorios = LaboratorioVirtual.objects.filter(Q(nombre=f"AULA {aula}"), sedevirtual_id=sede_id)
            if eLaboratorios.values("id").exists():
                eAulas.append(eLaboratorios.first().pk)
        eSupervisor = None
        eSupervisores = Persona.objects.filter(pk=idp)
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eSupervisor:
            eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(aula_id__in=eAulas)
            if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                eAulaPlanificacionSedeVirtualExamenes.update(supervisor=eSupervisor)
                print(
                    f"Se agrego supervisor {eSupervisor.__str__()} a un total de aulas: {len(eAulaPlanificacionSedeVirtualExamenes.values('id'))}")
            contador += 1
        else:
            print(f"No se encontro la persona con el documento {idp} en la sede_id {sede_id}")


def planificar_supervisores_sede_milagro_pregrado():
    periodo_id = 126
    sede_id = 1
    aData = [
        {'supervisor': '0917038218', 'sede': 1, 'laboratorio': 'CRAI -', 'fechas': '19-20-21-22-23',
         'horario': '08:30 - 17:29'},
        {'supervisor': '0942100777', 'sede': 1, 'laboratorio': 'P -', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'supervisor': '0706252459', 'sede': 1, 'laboratorio': 'H -', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'supervisor': '0925566184', 'sede': 1, 'laboratorio': 'H -', 'fechas': '19-20-21-22-23',
         'horario': '14:30 - 22:00'},
        {'supervisor': '0916188782', 'sede': 1, 'laboratorio': 'P -', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'supervisor': '01206280289', 'sede': 1, 'laboratorio': 'H -', 'fechas': '19-20-21-22-23',
         'horario': '07:00 - 14:29'},
        {'supervisor': '0920895620', 'sede': 1, 'laboratorio': 'P -', 'fechas': '26-27-28-29-30',
         'horario': '07:00 - 14:29'},
        {'supervisor': '0917038218', 'sede': 1, 'laboratorio': 'CRAI -', 'fechas': '26-27', 'horario': '08:30 - 17:29'},
        {'supervisor': '0942100777', 'sede': 1, 'laboratorio': 'H -', 'fechas': '24', 'horario': '07:00 - 14:29'},
        {'supervisor': '0706252459', 'sede': 1, 'laboratorio': 'H -', 'fechas': '24-27', 'horario': '14:30 - 22:00'},
        {'supervisor': '0925566184', 'sede': 1, 'laboratorio': 'H -', 'fechas': '25-26-27', 'horario': '07:00 - 14:29'},
        {'supervisor': '0916188782', 'sede': 1, 'laboratorio': 'P -', 'fechas': '25-26-27', 'horario': '07:00 - 14:29'},
        {'supervisor': '01206280289', 'sede': 1, 'laboratorio': 'H -', 'fechas': '24-27', 'horario': '07:00 - 14:29'},
        {'supervisor': '0919995787', 'sede': 1, 'laboratorio': 'P -', 'fechas': '26-27', 'horario': '14:30 - 22:00'},
        {'supervisor': '0921693743', 'sede': 1, 'laboratorio': 'H -', 'fechas': '24-27', 'horario': '14:30 - 22:00'},
        {'supervisor': '0302435102', 'sede': 1, 'laboratorio': 'P -', 'fechas': '25-27', 'horario': '07:00 - 14:29'},
        {'supervisor': '0917035800', 'sede': 1, 'laboratorio': 'P -', 'fechas': '25-27', 'horario': '14:30 - 22:00'},
        {'supervisor': '0804024693', 'sede': 1, 'laboratorio': 'H -', 'fechas': '26-27', 'horario': '07:00 - 14:29'},
        {'supervisor': '0925854499', 'sede': 1, 'laboratorio': 'H -', 'fechas': '25-26-27', 'horario': '14:30 - 22:00'},
        {'supervisor': '0926613076', 'sede': 1, 'laboratorio': 'H -', 'fechas': '26-27', 'horario': '14:30 - 22:00'},

    ]
    total = len(aData)
    contador = 0
    # eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(turnoplanificacion__fechaplanificacion__sede_id=sede_id, turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    # eAulaPlanificacionSedeVirtualExamenes.update(responsable=None, supervisor=None)
    for data in aData:
        documento = data.get('supervisor')
        dia = data.get('fecha')
        sede = data.get('sede')
        dias = data.get('fechas').split('-')
        horario = data.get('horario').split(' - ')
        laboratorio = data.get('laboratorio')
        tiempoinicio = horario[0]
        tiempofin = horario[1]
        fechas = []
        for dia in dias:
            mes = 9
            if int(dia) in (1, 2):
                mes = 10
            fechas.append((datetime(2022, mes, int(dia), 0, 0, 0)).date())
        horainicio = None
        horafin = None
        hora = tiempoinicio.split(':')
        horainicio = datetime(2022, 9, 1, int(hora[0]), int(hora[1]), 0).time()
        hora = tiempofin.split(':')
        horafin = datetime(2022, 9, 1, int(hora[0]), int(hora[1]), 59).time()
        eSupervisor = None
        eSedeVirtual = SedeVirtual.objects.get(pk=sede)
        eSupervisores = Persona.objects.filter(Q(cedula=documento) | Q(pasaporte=documento))
        if eSupervisores.values("id").exists():
            eSupervisor = eSupervisores.first()
        if eSupervisor:
            for fecha in fechas:
                eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(
                    sede=eSedeVirtual, periodo_id=periodo_id, fecha=fecha)
                for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
                    eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
                        fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=horainicio,
                        horafin__lte=horafin)
                    for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
                        eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                            turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
                        if eAulaPlanificacionSedeVirtualExamenes.values("id").filter(supervisor=eSupervisor).exists():
                            print(
                                f"Supervisor con documento {eSupervisor.documento()} en la sede_id {sede} ya se encuentra planificado en la fecha {fecha.__str__()} y en el turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
                            # eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.filter(responsable=eAplicador).first()
                            # eAulaPlanificacionSedeVirtualExamen.supervisor = None
                            # print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                            # eAulaPlanificacionSedeVirtualExamen.save()
                        else:
                            eAulaPlanificacionSedeVirtualExamenes = eAulaPlanificacionSedeVirtualExamenes.filter(
                                supervisor__isnull=True, aula__nombre__icontains=laboratorio)
                            if eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
                                eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()
                                eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                                print(
                                    f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                                # eAulaPlanificacionSedeVirtualExamen.supervisor = eSupervisor
                                # print(f"Se agrego planificación de supervisor {eAulaPlanificacionSedeVirtualExamen.supervisor}")
                                eAulaPlanificacionSedeVirtualExamen.save()
            contador += 1
        else:
            print(f"No se encontro la persona con el documento {documento} en la sede_id {sede_id}")

    print(f"Se agregaron {contador} de {total}")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
    eAplicadores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('responsable__id', flat=True))
    idg = 388
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eAplicador in eAplicadores:
        eUser = eAplicador.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")
    eSupervisores = Persona.objects.filter(
        pk__in=eAulaPlanificacionSedeVirtualExamenes.values_list('supervisor__id', flat=True))
    idg = 387
    eGroup = Group.objects.get(pk=idg)
    print(f"Grupo: {eGroup.__str__()}")
    for eSupervisor in eSupervisores:
        eUser = eSupervisor.usuario
        eGroup.user_set.add(eUser)
        eGroup.save()
        print(f"Se agrega usuario: {eUser.__str__()} al grupo {eGroup.__str__()}")


def generar_reporte_auditoria_admision():
    periodo_id = 158
    nombre_archivo = "reporte_auditoria_examenes_admision_{}.xlsx".format(random.randint(1, 10000).__str__())
    directory = os.path.join(MEDIA_ROOT, 'reportes', 'horario', 'examenes', 'alumnos', nombre_archivo)
    ePersonaNoty = Persona.objects.get(pk=10730)
    eUserNoty = ePersonaNoty.usuario
    eNotificacion = Notificacion(cuerpo='Reporte en proceso',
                                 titulo=f'Reporte de auditoría de examenes de admisión'.strip(),
                                 destinatario=ePersonaNoty,
                                 url=None,
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=1),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()
    # aDataSedes = [{'id': 7, 'nombre': 'Riobamba', 'ip': ['45.184.102.77', '45.184.102.78', '45.184.102.76']},
    #               {'id': 7, 'nombre': 'Riobamba', 'ip': ['45.184.102.77', '45.184.102.78']}]
    try:
        __author__ = 'Unemi'
        workbook = xlsxwriter.Workbook(directory, {'constant_memory': True})
        ws = workbook.add_worksheet('auditoria')
        title = easyxf('font: name Times New Roman, color-index blue, bold on , height 350; alignment: horiz centre')
        titulo2 = easyxf('font: name Times New Roman, color-index black, bold on , height 250; alignment: horiz centre')
        font_style = XFStyle()
        font_style.font.bold = True
        font_style2 = XFStyle()
        font_style2.font.bold = False
        fuentecabecera = workbook.add_format({
            'align': 'center',
            'bg_color': 'silver',
            'border': 1,
            'bold': 1
        })

        formatoceldacenter = workbook.add_format({
            'border': 1,
            'valign': 'vcenter',
            'align': 'center'})
        columns = [
            (u"#", 1000),
            (u"TIPO DOCUMENTO", 10000),
            (u"DOCUMENTO", 10000),
            (u"ALUMNO", 10000),
            (u"CARRERA", 10000),
            (u"MODALIDAD", 10000),
            (u"ASIGNATURA", 10000),
            (u"PARALELO", 10000),
            (u"SEDE", 10000),
            (u"SALA/LABORATORIO", 6000),
            (u"ASISTENCIA", 6000),
            (u"FECHA ASISTENCIA", 6000),
            (u"EJECUTO EXAMEN", 6000),
            (u"FECHA HORA INICIO", 6000),
            (u"FECHA HORA FIN", 6000),
            (u"CANT. IPS", 6000),
            (u"IPS DESCRIPCIÓN", 6000),
            (u"OBSERVACIÓN", 6000),
        ]
        row_num = 3
        for col_num in range(len(columns)):
            ws.write(row_num, col_num, columns[col_num][0], fuentecabecera)
            ws.set_column(row_num, col_num, columns[col_num][1])
        eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
            status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id)
        # if DEBUG:
        #     eMateriaAsignadaPlanificacionSedeVirtualExamenes = eMateriaAsignadaPlanificacionSedeVirtualExamenes[0:1000]
        eSedes = SedeVirtual.objects.filter(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
            'aulaplanificacion__turnoplanificacion__fechaplanificacion__sede__id', flat=True))
        row_num = 4
        i = 0
        for eSede in eSedes.order_by('alias'):
            eCarreras = Carrera.objects.filter(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                'materiaasignada__matricula__inscripcion__carrera__id', flat=True).filter(
                aulaplanificacion__turnoplanificacion__fechaplanificacion__sede=eSede))
            for eCarrera in eCarreras.order_by('nombre'):
                eMateriaAsignadaPlanificacionSedeVirtualExamenes_filter = eMateriaAsignadaPlanificacionSedeVirtualExamenes.filter(
                    aulaplanificacion__turnoplanificacion__fechaplanificacion__sede=eSede,
                    materiaasignada__matricula__inscripcion__carrera=eCarrera)
                for eMateriaAsignadaPlanificacionSedeVirtualExamen in eMateriaAsignadaPlanificacionSedeVirtualExamenes_filter:
                    i += 1
                    eMateria = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia
                    eParalelo = eMateria.paralelomateria
                    eProfesor = eMateria.profesor_principal_virtual()
                    eAsignaturaMalla = eMateria.asignaturamalla
                    eNivelMalla = eAsignaturaMalla.nivelmalla
                    eAsignatura = eAsignaturaMalla.asignatura
                    eMatricula = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.matricula
                    eInscripcion = eMatricula.inscripcion
                    eModalidad = eInscripcion.modalidad
                    eFacultad = eInscripcion.coordinacion
                    eCarrera = eInscripcion.carrera
                    ePersona = eInscripcion.persona
                    eAulaPlanificacionSedeVirtualExamen = eMateriaAsignadaPlanificacionSedeVirtualExamen.aulaplanificacion
                    eLaboratorioVirtual = eAulaPlanificacionSedeVirtualExamen.aula
                    eAplicador = eAulaPlanificacionSedeVirtualExamen.responsable
                    eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
                    eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
                    eSedeVirtual = eFechaPlanificacionSedeVirtualExamen.sede
                    asistencia = eMateriaAsignadaPlanificacionSedeVirtualExamen.asistencia
                    fecha_asistencia = eMateriaAsignadaPlanificacionSedeVirtualExamen.fecha_asistencia
                    fecha = eMateriaAsignadaPlanificacionSedeVirtualExamen.aulaplanificacion.turnoplanificacion.fechaplanificacion.fecha
                    horainicio = eMateriaAsignadaPlanificacionSedeVirtualExamen.aulaplanificacion.turnoplanificacion.horainicio
                    horafin = eMateriaAsignadaPlanificacionSedeVirtualExamen.aulaplanificacion.turnoplanificacion.horafin
                    fechahoradesde = datetime(fecha.year, fecha.month, fecha.day, horainicio.hour, horainicio.minute,
                                              horainicio.second)
                    fechahoradesde = int(time.mktime(fechahoradesde.timetuple()))
                    fechahorahasta = datetime(fecha.year, fecha.month, fecha.day, horafin.hour, horafin.minute,
                                              horafin.second)
                    fechahorahasta = int(time.mktime(fechahorahasta.timetuple()))
                    username = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.matricula.inscripcion.persona.usuario.username
                    id_curso_moodle = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia.idcursomoodle
                    nombre_detalle_detallemodeloevaluativo = eMateriaAsignadaPlanificacionSedeVirtualExamen.detallemodeloevaluativo.nombre
                    fecha_hora_inicio = None
                    fecha_hora_fin = None
                    ejecutoexamen = False
                    listaips = []
                    if eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia.coordinacion():
                        if eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia.coordinacion().id == 9:
                            conexion = connections['db_moodle_virtual']
                        else:
                            conexion = connections['moodle_db']
                        cursor = conexion.cursor()
                        id_usuario_moodle = buscarUsuario(username, cursor)
                        if id_usuario_moodle:
                            sql = """SELECT TO_TIMESTAMP(att.timestart), TO_TIMESTAMP(att.timefinish),
                    ( CASE WHEN att.timestart=0 THEN 0 ELSE 1 END) AS inicia,
                    ( CASE WHEN att.timefinish=0 THEN 0 ELSE 1 END) AS finaliza
                    FROM mooc_quiz_attempts att
                    INNER JOIN mooc_quiz quiz ON quiz.id=att.quiz
                    INNER JOIN mooc_course cou ON cou.id=quiz.course
                    INNER JOIN  mooc_grade_items gi ON gi.courseid=cou.id AND gi.itemmodule='quiz' AND quiz.id=gi.iteminstance
                    INNER JOIN  mooc_grade_categories ct ON ct.courseid=cou.id
                    WHERE cou.id=%s AND att.userid=%s AND ct.fullname='%s'
                    AND ct.courseid=%s AND ct.depth=2 AND ct.id=gi.categoryid""" % (
                                id_curso_moodle, id_usuario_moodle, nombre_detalle_detallemodeloevaluativo, id_curso_moodle)
                            cursor.execute(sql)
                            rows = cursor.fetchall()
                            for row in rows:
                                ejecutoexamen = True
                                if row[2] == 1:
                                    fecha_hora_inicio = row[0]
                                if row[3] == 1:
                                    fecha_hora_fin = row[1]
                            if fecha_hora_inicio:
                                if fecha_hora_fin is None:
                                    fecha_hora_fin = datetime(fecha.year, fecha.month, fecha.day, horafin.hour,
                                                              horafin.minute, horafin.second)
                                sql = f"""  SELECT 
                                                l1.ip, TO_TIMESTAMP(l1.timecreated)
                                            FROM mooc_logstore_standard_log l1
                                            WHERE 
                                                l1.userid={id_usuario_moodle} AND l1.courseid={id_curso_moodle} 
                                                AND TO_TIMESTAMP(l1.timecreated) BETWEEN '{fecha_hora_inicio}' AND '{fecha_hora_fin}'
                                                AND l1.objectid IN (SELECT quiz.id
                                                                    FROM mooc_quiz_attempts att
                                                                        INNER JOIN mooc_quiz quiz ON quiz.id=att.quiz
                                                                        INNER JOIN mooc_course cou ON cou.id=quiz.course
                                                                        INNER JOIN mooc_grade_items gi ON gi.courseid=cou.id AND gi.itemmodule='quiz' AND quiz.id=gi.iteminstance
                                                                        INNER JOIN mooc_grade_categories ct ON ct.courseid=cou.id
                                                                    WHERE cou.id={id_curso_moodle} AND att.userid={id_usuario_moodle} AND ct.fullname='{nombre_detalle_detallemodeloevaluativo}' 
                                                                        AND ct.courseid={id_curso_moodle} AND ct.depth=2 AND ct.id=gi.categoryid
                                                                    LIMIT 1
                                                                    )
                                                    ORDER BY - l1.timecreated
                                                    """
                                cursor.execute(sql)
                                rows = cursor.fetchall()
                                for row in rows:
                                    if not row[0] in listaips:
                                        listaips.append(row[0])

                    ws.write(row_num, 0, u"%s" % i, formatoceldacenter)
                    ws.set_column(row_num, 0, 40)

                    ws.write(row_num, 1, u"%s" % ePersona.tipo_documento(), formatoceldacenter)
                    ws.set_column(row_num, 1, 40)

                    ws.write(row_num, 2, u"%s" % ePersona.documento(), formatoceldacenter)
                    ws.set_column(row_num, 2, 40)

                    ws.write(row_num, 3, u"%s" % ePersona.nombre_completo(), formatoceldacenter)
                    ws.set_column(row_num, 3, 40)

                    ws.write(row_num, 4,
                             u"%s" % eCarrera.nombrevisualizar if eCarrera.nombrevisualizar else eCarrera.nombre,
                             formatoceldacenter)
                    ws.set_column(row_num, 4, 40)

                    ws.write(row_num, 5, u"%s" % eModalidad.nombre if eModalidad else '', formatoceldacenter)
                    ws.set_column(row_num, 5, 40)

                    ws.write(row_num, 6, u"%s" % eAsignatura.nombre, formatoceldacenter)
                    ws.set_column(row_num, 6, 40)

                    ws.write(row_num, 7, u"%s" % eParalelo.nombre if eParalelo else '', formatoceldacenter)
                    ws.set_column(row_num, 7, 40)

                    ws.write(row_num, 8, u"%s" % eSedeVirtual.nombre if eSedeVirtual else '', formatoceldacenter)
                    ws.set_column(row_num, 8, 40)

                    ws.write(row_num, 9, u"%s" % eLaboratorioVirtual.nombre if eLaboratorioVirtual else '',
                             formatoceldacenter)
                    ws.set_column(row_num, 9, 40)

                    ws.write(row_num, 10, u"%s" % 'SI' if asistencia else 'NO', formatoceldacenter)
                    ws.set_column(row_num, 10, 40)

                    ws.write(row_num, 11, u"%s" % fecha_asistencia.__str__() if fecha_asistencia else '',
                             formatoceldacenter)
                    ws.set_column(row_num, 11, 40)

                    ws.write(row_num, 12, u"%s" % 'SI' if ejecutoexamen else 'NO', formatoceldacenter)
                    ws.set_column(row_num, 12, 40)

                    ws.write(row_num, 13,
                             u"%s" % fecha_hora_inicio.__str__() if ejecutoexamen and fecha_hora_inicio else '',
                             formatoceldacenter)
                    ws.set_column(row_num, 13, 40)

                    ws.write(row_num, 14, u"%s" % fecha_hora_fin.__str__() if ejecutoexamen and fecha_hora_fin else '',
                             formatoceldacenter)
                    ws.set_column(row_num, 14, 40)

                    ws.write(row_num, 15, u"%s" % len(listaips) if ejecutoexamen else 0, formatoceldacenter)
                    ws.set_column(row_num, 15, 40)

                    ws.write(row_num, 16, u"%s" % ",".join(listaips) if ejecutoexamen and len(listaips) else '',
                             formatoceldacenter)
                    ws.set_column(row_num, 16, 40)

                    ws.write(row_num, 17,
                             u"%s" % 'Existe más de una IP distinta durante la ejecución del examen' if ejecutoexamen and len(
                                 listaips) > 1 else '', formatoceldacenter)
                    ws.set_column(row_num, 17, 40)
                    row_num += 1
        workbook.close()
        if eNotificacion:
            eNotificacion = Notificacion.objects.get(pk=eNotificacion.pk)
            eNotificacion.en_proceso = False
            eNotificacion.cuerpo = 'Reporte Listo'
            eNotificacion.url = "{}reportes/horario/examenes/alumnos/{}".format(MEDIA_URL, nombre_archivo)
            eNotificacion.save()
        else:
            eNotificacion = Notificacion(cuerpo='Reporte listo',
                                         titulo=f'Reporte de auditoría de examenes de admisión'.strip(),
                                         destinatario=ePersonaNoty,
                                         url="{}reportes/horario/examenes/alumnos/{}".format(MEDIA_URL, nombre_archivo),
                                         prioridad=1,
                                         app_label='SGA',
                                         fecha_hora_visible=datetime.now() + timedelta(days=1),
                                         tipo=2,
                                         en_proceso=False)
            eNotificacion.save()

    except Exception as ex:
        print(ex)
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
        textoerror = '{} Linea:{}'.format(ex, sys.exc_info()[-1].tb_lineno)
        if eNotificacion:
            eNotificacion = Notificacion.objects.get(pk=eNotificacion.pk)
            eNotificacion.en_proceso = False
            eNotificacion.cuerpo = textoerror
            eNotificacion.url = None
            eNotificacion.save()
        else:
            eNotificacion = Notificacion(cuerpo=textoerror,
                                         titulo=f'Reporte de auditoría de examenes de admisión'.strip(),
                                         destinatario=ePersonaNoty,
                                         url=None,
                                         prioridad=1,
                                         app_label='SGA',
                                         fecha_hora_visible=datetime.now() + timedelta(days=1),
                                         tipo=2,
                                         en_proceso=False)
            eNotificacion.save()


def dar_baja_examen_admision():
    periodo_id = 158
    sedes = [
        {'nombre': 'UNIVERSIDAD ESTATAL DE MILAGRO', 'id': 1, 'ips': ['181.224.196.10']},
        {'nombre': 'ESCUELA SUPERIOR POLITÉCNICA DE CHIMBORAZO ESPOCH (RIOBAMBA)', 'id': 7,
         'ips': ['45.184.102.77', '45.184.102.78', '45.184.102.76']},
        {'nombre': 'UNIVERSIDAD CATÓLICA DE CUENCA', 'id': 6, 'ips': ['45.182.119.72']},
        {'nombre': 'UNIVERSIDAD ESTATAL PENÍNSULA DE SANTA ELENA UPSE (LA LIBERTAD)', 'id': 9,
         'ips': ['190.15.130.24']},
        {'nombre': 'UNIVERSIDAD TÉCNICA DE MANABÍ', 'id': 15, 'ips': ['190.15.136.196']},
        {'nombre': 'UNIVERSIDAD TÉCNICA DEL NORTE UTN (IBARRA)', 'id': 4, 'ips': ['192.100.198.69', '192.100.198.77']},
        {'nombre': 'UNIVERSIDAD TÉCNICA ESTATAL DE QUEVEDO UTEQ (QUEVEDO)', 'id': 5, 'ips': ['190.15.134.3']},
    ]
    data = [
        {'documento': '0707052197', 'materia': 'INTRODUCCIÓN A LA COMUNICACIÓN ACADÉMICA', 'num_ips': 2,
         'ips': '191.100.26.227,45.182.119.72', 'sede_id': 6}
    ]
    for d in data:
        eMateriaAsignadas = MateriaAsignada.objects.filter(
            Q(matricula__inscripcion__persona__cedula=d.get("documento")) |
            Q(matricula__inscripcion__persona__pasaporte=d.get("documento")),
            materia__asignatura__nombre=d.get("materia"), matricula__nivel__periodo_id=periodo_id)
        if eMateriaAsignadas.values("id").exists():
            eMateriaAsignada = eMateriaAsignadas.first()
            eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.get(
                status=True, materiaasignada=eMateriaAsignada)
            eMateria = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia
            eMatricula = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.matricula
            num_ips = d.get("num_ips")
            ips = d.get("ips").split(",")
            sede_id = d.get("sede_id")
            contador_ip_valida = 0
            contador_ip_no_valida = 0
            ips_validas = []
            ips_no_validas = []
            sede = {}
            for v, i in enumerate(sedes):
                if i.get("id") == sede_id:
                    sede = sedes[v]
                    break
            if sede:
                for ip in ips:
                    if ip in sede.get("ips"):
                        contador_ip_valida += 1
                        ips_validas.append(ip)
                    else:
                        contador_ip_no_valida += 1
                        ips_no_validas.append(ip)
                if contador_ip_no_valida > 0:
                    with transaction.atomic():
                        try:
                            mensaje = f"La UNEMI en su auditoría informática ha detectado deshonestidad académica. IPs autorizadas: {', '.join(ips_validas)} - IPs no autorizadas: {', '.join(ips_no_validas)}"
                            eMateriaAsignadaPlanificacionSedeVirtualExamen.calificacion = 0
                            eMateriaAsignadaPlanificacionSedeVirtualExamen.observacion = mensaje
                            eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                            result, msg = eMateriaAsignadaPlanificacionSedeVirtualExamen.update_grade_grades()
                            if not result:
                                raise NameError(msg)
                            print(f'Se guardo del alumno {eMateriaAsignada.__str__()}')
                        except Exception as ex:
                            transaction.set_rollback(True)
                            print(f'Error al guardar del alumno {eMateriaAsignada.__str__()} - error: {ex.__str__()}')


def descifrar_notificacion_1(persona, periodo=None, tiposrubros=None):
    from sagest.models import Rubro, Pago
    from sga.funciones import null_to_numeric
    tiene_valores_pendientes = False
    tiene_valores_vencidos = False
    msg = {}
    data = {}
    if persona:
        eRubros = Rubro.objects.filter(status=True, persona=persona, cancelado=False)
        if periodo:
            eRubros = eRubros.filter(matricula__nivel__periodo=periodo)
        if tiposrubros:
            eRubros = eRubros.filter(tipo__in=tiposrubros)
        if eRubros.values("id").exists():
            rubros_vencidos = eRubros.filter(fechavence__lt=datetime.now().date()).distinct()
            if rubros_vencidos.exists():
                valor_rubros = null_to_numeric(rubros_vencidos.aggregate(valor=Sum('valortotal'))['valor'])
                valor_pagos = null_to_numeric(
                    Pago.objects.filter(rubro__in=rubros_vencidos, status=True).distinct().aggregate(
                        valor=Sum('valortotal'))['valor'])
                valores_vencidos = valor_rubros - valor_pagos
                msg = f"""{'Estimada' if persona.es_mujer() else 'Estimado'} estudiante, aún le quedan <b>VALORES PENDIENTES POR PAGAR</b>, total de deuda de ${valores_vencidos}. Por tal motivo su matrícula queda <b>CONDICIONADA</b>"""
                tiene_valores_vencidos = True
            else:
                valor_rubros = null_to_numeric(eRubros.aggregate(valor=Sum('valortotal'))['valor'])
                valor_pagos = null_to_numeric(
                    Pago.objects.filter(rubro__in=eRubros, status=True).distinct().aggregate(valor=Sum('valortotal'))[
                        'valor'])
                valores_pendientes = valor_rubros - valor_pagos
                msg = f"""{'Estimada' if persona.es_mujer() else 'Estimado'} estudiante, aún le quedan <b>VALORES PENDIENTES POR PAGAR</b>, total de deuda de ${valores_pendientes}. Por tal motivo su matrícula queda <b>CONDICIONADA</b>"""
                tiene_valores_pendientes = True
    data['tiene_valores_pendientes'] = tiene_valores_pendientes
    data['tiene_valores_vencidos'] = tiene_valores_vencidos
    data['msg_valores_rubros'] = msg
    return data


def ajuste_fechas_rubros_pagados(ePeriodo):
    fechas = [datetime(2022, 12, 5, 0, 0).date(), datetime(2023, 1, 5, 0, 0).date(), datetime(2023, 2, 5, 0, 0).date()]
    eMatriculas = Matricula.objects.filter(rubro__isnull=False, status=True, nivel__periodo=ePeriodo).distinct()
    total = eMatriculas.values("id").count()
    c = 0
    for eMatricula in eMatriculas:
        c += 1
        print(f"({total}/{c}) Matricula: {eMatricula.__str__()}")
        eRubros = Rubro.objects.filter(matricula=eMatricula, status=True).exclude(
            observacion='INGLÉS NOVIEMBRE 2022 MARZO 2023')
        print(f"( ---> Matricula: {eMatricula.__str__()} -> Total de rubros ({eRubros.values('id').count()})")
        for eRubro in eRubros.filter(tipo_id=2924):
            eRubro.fechavence = datetime(2022, 11, 5, 0, 0).date()
            eRubro.cuota = 1
            eRubro.save()
        if eMatricula.aranceldiferido == 1 and eMatricula.actacompromiso is not None:
            for eRubro in eRubros.filter(tipo_id=2923, cancelado=True):
                eRubro.fechavence = datetime(2022, 11, 5, 0, 0).date()
                eRubro.cuota = 1
                eRubro.save()
            contador = 0
            cuota = 2
            for eRubro in eRubros.filter(tipo_id=2923, cancelado=False).order_by('cuota'):
                if contador > 1:
                    contador = 2
                fecha = fechas[contador]
                eRubro.fechavence = fecha
                eRubro.cuota = cuota
                eRubro.save()
                cuota += 1
                contador += 1
        else:
            for eRubro in eRubros.filter(tipo_id=2923):
                eRubro.fechavence = datetime(2022, 11, 5, 0, 0).date()
                eRubro.cuota = 1
                eRubro.save()
        print(u"*** Matricula (ID: %s - %s)" % (eMatricula.id, eMatricula))
        eMatricula.actualiza_matricula()


def demo_enrolar_estudiantes(eMateria):
    from moodle import moodle
    if eMateria.coordinacion().id == 9:
        tipourl = 2
    else:
        tipourl = 1
    if eMateria.idcursomoodle:
        eMateria.crear_actualizar_categoria_notas_curso()
        eMateria.crear_actualizar_estudiantes_curso(moodle, tipourl)


def eliminar_lecciones_no_aperturada(periodo, fecha_hoy):
    print(u"****************************************************************************************************")
    print(
        f"Inicia proceso de eliminar lecciones no aperturadas a las {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} del periodo {periodo}")
    # eProfesores = Profesor.objects.filter(profesormateria__materia__nivel__periodo=periodo, profesormateria__activo=True).distinct()
    # total_profesores = len(eProfesores)
    # contP = 1
    # for eProfesor in eProfesores:
    #     print(f"***** ({contP}/{total_profesores}) -> Profesor: {eProfesor.__str__()}")
    #     contP += 1
    # eLeccionGrupos = LeccionGrupo.objects.filter(status=False, fecha__lte=fecha_hoy, profesor=eProfesor, lecciones__clase__profesor=eProfesor, lecciones__fecha__lte=fecha_hoy)
    eLeccionGrupos = LeccionGrupo.objects.filter(status=False, fecha__lte=fecha_hoy, lecciones__fecha__lte=fecha_hoy,
                                                 lecciones__clase__materia__nivel__periodo=periodo)
    for eLeccionGrupo in eLeccionGrupos:
        with transaction.atomic():
            try:
                eLecciones = eLeccionGrupo.lecciones.all()
                if eLecciones.values("id").filter(status=True).exists():
                    for eLeccion in eLecciones:
                        for eAsistenciaLeccion in eLeccion.asistencialeccion_set.all():
                            eAsistenciaLeccion.status = True
                            eAsistenciaLeccion.save()
                            eMateriaAsignada = eAsistenciaLeccion.materiaasignada
                            eMateriaAsignada.save(actualiza=True)
                        eLeccion.status = True
                        eLeccion.save()
                    eLeccionGrupo.status = True
                    eLeccionGrupo.save()
                else:
                    eLeccionGrupo.delete()
            except Exception as ex:
                transaction.set_rollback(True)
    eLecciones = Leccion.objects.filter(status=False, fecha__lte=fecha_hoy, clase__materia__nivel__periodo=periodo)
    for eLeccion in eLecciones:
        with transaction.atomic():
            try:
                print(f"Elimina lección {eLeccion.__str__()}")
                eLeccion.delete()
            except Exception as ex:
                print(f"Error al eliminar lección {ex.__str__()}")
                transaction.set_rollback(True)
    print(u"****************************************************************************************************")
    print(u"****************************************************************************************************")
    print(f"** Finaliza proceso de eliminar lecciones no aperturadas del periodo {periodo}")


def ajuste_facturas():
    import xml.etree.ElementTree as ET
    # eFactura = Factura.objects.get(numero=135563)
    eFacturas = Factura.objects.filter(status=True, fecha__gte=datetime(2022, 10, 1, 0, 0).date())
    arrNumeros = []
    for eFactura in eFacturas:
        xml = eFactura.xml
        factura = ET.ElementTree(ET.fromstring(xml)).getroot()
        infoFactura = factura.find('infoFactura')
        importeTotal = null_to_decimal(infoFactura.find('importeTotal').text, 2)
        pagos = infoFactura.find('pagos')
        arrPagos = []
        for pago in pagos.findall('pago'):
            arrPagos.append({
                'formaPago': pago.find('formaPago').text,
                'total': null_to_decimal(pago.find('total').text, 2)
            })
        detalles = factura.find('detalles')
        arrDetalles = []
        for detalle in detalles.findall('detalle'):
            impuestos = detalle.find('impuestos')
            arrInpuestos = []
            for impuesto in impuestos.findall('impuesto'):
                arrInpuestos.append({
                    'codigo': int(impuesto.find('codigo').text),
                    'codigoPorcentaje': int(impuesto.find('codigoPorcentaje').text),
                    'tarifa': int(impuesto.find('tarifa').text),
                    'baseImponible': null_to_decimal(impuesto.find('baseImponible').text, 2),
                    'valor': null_to_decimal(impuesto.find('valor').text, 2),
                })
            arrDetalles.append({
                'codigoPrincipal': detalle.find('codigoPrincipal').text,
                'descripcion': detalle.find('descripcion').text,
                'cantidad': null_to_decimal(detalle.find('cantidad').text, 2),
                'precioUnitario': null_to_decimal(detalle.find('precioUnitario').text, 2),
                'descuento': null_to_decimal(detalle.find('descuento').text, 2),
                'precioTotalSinImpuesto': null_to_decimal(detalle.find('precioTotalSinImpuesto').text, 2),
                'impuestos': arrInpuestos
            })
        if importeTotal != null_to_decimal(eFactura.total, 2):
            arrNumeros.append(eFactura.numero)
    print(arrNumeros)


def planificar_admision_medicina():
    sede_id = 1
    periodo_id = 202
    detallemodeloevaluativo_id = 114
    cursor = connections['sga_select'].cursor()
    MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
        status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
        detallemodeloevaluativo_id=detallemodeloevaluativo_id,
        materiaasignada__materia__asignatura_id__in=[117, 2688, 173]).delete()
    # eMatriculaSedeExamenes = MatriculaSedeExamen.objects.filter(sede_id=sede_id,
    #                                                             detallemodeloevaluativo_id=detallemodeloevaluativo_id,
    #                                                             status=True, matricula__status=True,
    #                                                             matricula__retiradomatricula=False,
    #                                                             matricula__nivel__periodo_id=periodo_id).distinct()
    print(f"+++++++++++++++++++++++++++++ ANATOMÍA")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
        turnoplanificacion__fechaplanificacion__fecha=datetime(2023, 3, 9, 0, 0).date(),
        turnoplanificacion__horainicio=datetime(2023, 3, 9, 13, 30).time(),
        turnoplanificacion__horafin=datetime(2023, 3, 9, 14, 30).time()
    ).order_by('turnoplanificacion__fechaplanificacion__fecha', 'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            eMateriaAsignadas = MateriaAsignada.objects.filter(matricula__status=True,
                                                               matricula__retiradomatricula=False,
                                                               matricula__termino=True,
                                                               matricula__fechatermino__isnull=False,
                                                               matricula__bloqueomatricula=False,
                                                               matricula__nivel__periodo_id=periodo_id)
            eMateriaAsignadas = eMateriaAsignadas.filter(materia__asignatura__id=2688).exclude(
                pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values("materiaasignada__id"))
            eMateriaAsignadas = eMateriaAsignadas.order_by('matricula__inscripcion__persona__apellido1',
                                                           'matricula__inscripcion__persona__apellido2',
                                                           'matricula__inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMateriaAsignada in eMateriaAsignadas:
                contador += 1
                print(
                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                    materiaasignada=eMateriaAsignada,
                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                if contador >= capacidad:
                    break

    print(f"+++++++++++++++++++++++++++++ BIOLOGÍA")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
        turnoplanificacion__fechaplanificacion__fecha=datetime(2023, 3, 9, 0, 0).date(),
        turnoplanificacion__horainicio=datetime(2023, 3, 9, 14, 40).time(),
        turnoplanificacion__horafin=datetime(2023, 3, 9, 15, 40).time()
    ).order_by('turnoplanificacion__fechaplanificacion__fecha', 'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            eMateriaAsignadas = MateriaAsignada.objects.filter(matricula__status=True,
                                                               matricula__retiradomatricula=False,
                                                               matricula__termino=True,
                                                               matricula__fechatermino__isnull=False,
                                                               matricula__bloqueomatricula=False,
                                                               matricula__nivel__periodo_id=periodo_id)
            eMateriaAsignadas = eMateriaAsignadas.filter(materia__asignatura__id=171).exclude(
                pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values("materiaasignada__id"))
            eMateriaAsignadas = eMateriaAsignadas.order_by('matricula__inscripcion__persona__apellido1',
                                                           'matricula__inscripcion__persona__apellido2',
                                                           'matricula__inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMateriaAsignada in eMateriaAsignadas:
                contador += 1
                print(
                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                    materiaasignada=eMateriaAsignada,
                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                if contador >= capacidad:
                    break

    print(f"+++++++++++++++++++++++++++++ BIOQUÍMICA")
    eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
        turnoplanificacion__fechaplanificacion__sede_id=sede_id,
        turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
        turnoplanificacion__fechaplanificacion__fecha=datetime(2023, 3, 10, 0, 0).date(),
        turnoplanificacion__horainicio=datetime(2023, 3, 9, 13, 30).time(),
        turnoplanificacion__horafin=datetime(2023, 3, 9, 14, 30).time()
    ).order_by('turnoplanificacion__fechaplanificacion__fecha', 'turnoplanificacion__horainicio').distinct()
    for eAulaPlanificacionSedeVirtualExamen in eAulaPlanificacionSedeVirtualExamenes:
        eAula = eAulaPlanificacionSedeVirtualExamen.aula
        capacidad = eAula.capacidad
        cantidadad_planificadas = eAulaPlanificacionSedeVirtualExamen.cantidadad_planificadas()
        eTurnoPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamen.turnoplanificacion
        horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
        horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
        eFechaPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        if cantidadad_planificadas < capacidad:
            print(
                f"Se procede a planificar en la fecha {fecha} en el horario {horainicio} a {horafin} en el aula {eAula.nombre}")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=periodo_id,
                detallemodeloevaluativo_id=detallemodeloevaluativo_id)
            eMateriaAsignadas = MateriaAsignada.objects.filter(matricula__status=True,
                                                               matricula__retiradomatricula=False,
                                                               matricula__termino=True,
                                                               matricula__fechatermino__isnull=False,
                                                               matricula__bloqueomatricula=False,
                                                               matricula__nivel__periodo_id=periodo_id)
            eMateriaAsignadas = eMateriaAsignadas.filter(materia__asignatura__id=173).exclude(
                pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values("materiaasignada__id"))
            eMateriaAsignadas = eMateriaAsignadas.order_by('matricula__inscripcion__persona__apellido1',
                                                           'matricula__inscripcion__persona__apellido2',
                                                           'matricula__inscripcion__persona__nombres').distinct()
            contador = cantidadad_planificadas
            for eMateriaAsignada in eMateriaAsignadas:
                contador += 1
                print(
                    f"------- ({contador}) Se asignada el estudiante {eMateriaAsignada.matricula.inscripcion.persona} en la asignatura {eMateriaAsignada.materia.asignatura.nombre}")
                eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen(
                    aulaplanificacion=eAulaPlanificacionSedeVirtualExamen,
                    materiaasignada=eMateriaAsignada,
                    detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                if contador >= capacidad:
                    break


# ajuste_facturas()

# ePeriodo = Periodo.objects.get(pk=153)
# fecha = datetime(2022, 11, 29, 0, 0).date()
# for fecha in [datetime(2022, 11, 16, 0, 0).date(), datetime(2022, 11, 17, 0, 0).date(), datetime(2022, 11, 18, 0, 0).date(), datetime(2022, 11, 19, 0, 0).date()]:
# eliminar_lecciones_no_aperturada(ePeriodo, fecha)

# reajustar_asistencia_dia_especifico(ePeriodo)
# asistencia_dia(ePeriodo)
# actualizar_asistencia(ePeriodo)

# eMaterias = Materia.objects.filter(pk__in=[59791, 60184])
# ajuste_fechas_rubros_pagados(ePeriodo)
# actualizar_estado_matricula(ePeriodo)
# actualizar_nivel_matricula(ePeriodo)


# eTitulos = Titulos()
# mistitulos = eTitulos.consultar('1205907601')
# print(mistitulos)
# eMatricula = Matricula.objects.get(pk=527648)
# print(f"Se eliminara la matricula: {eMatricula.__str__()}")
# eMatricula.delete()


# ePeriodo = Periodo.objects.get(pk=153)
# reajustar_asistencia_dia_especifico(ePeriodo)

def procesar_data_1s_2023_admision():
    if DEBUG:
        matriz = My_SubirMatrizInscripcion.objects.get(pk=23)
    else:
        matriz = My_SubirMatrizInscripcion.objects.get(pk=18)
    if matriz.puede_ejecutar_matriz():
        BackGroundProcessAdmision(10730, matriz.id, 177, None).start()


# procesar_data_1s_2023_admision()
# eMatriculas = Matricula.objects.filter(nivel__id__in=[1482, 1481]).order_by('id')
# # eMateriaAsignadas = MateriaAsignada.objects.filter(matricula__in=eMatriculas)
# total = eMatriculas.values("id").count()
# contador = 0
# for eMatricula in eMatriculas:
#     eInscripcion = eMatricula.inscripcion
#     malla = eInscripcion.mi_malla()
#     asigs = AsignaturaMalla.objects.filter(malla=malla)
#     contador += 1
#     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=eMatricula)
#     if eMateriaAsignadas.values("id").exists():
#         eMaterias = Materia.objects.filter(pk__in=eMateriaAsignadas.values_list("materia__id", flat=True))
#         if len(eMaterias.values_list('paralelomateria__id', flat=True).distinct()) > 1:
#             eMateriaAsignadas.delete()
#             print(f"Elimina materiaasignada por diferente paralelos {len(eMaterias.values_list('paralelomateria__id', flat=True).distinct())}")
#         else:
#             # total = len(eMateriaAsignadas.values("id"))
#             mis_asignaturas = AsignaturaMalla.objects.filter(pk__in=eMateriaAsignadas.values_list("materia__asignaturamalla__id", flat=True))
#             if len(asigs.values("id")) != len(mis_asignaturas.values("id")):
#                 eMateriaAsignadas.delete()
#                 print(f"Elimina materiaasignada porque le falta asignatura malla")
#
#     # Rubro.objects.filter(persona=eMatricula.inscripcion.persona, matricula=eMatricula).delete()
#     # eMatricula.delete()
#     print(f"{total}/{contador}")

# matriz = My_SubirMatrizInscripcion.objects.get(pk=18)
# periodo=Periodo.objects.get(id=177)
# persona=Persona.objects.get(id=10730)
# eCarreras=Carrera.objects.filter(pk__in=[86])
# for eCarrera in eCarreras:
#     vrProcess = matriz.matriculacion_senescyt(periodo, persona, eCarrera)
#     print(vrProcess)

# matriz = My_SubirMatrizInscripcion.objects.get(pk=18)
# carrera = Carrera.objects.get(pk=105)
# periodoanterior = Periodo.objects.get(pk=202)
# nivel = Nivel.objects.get(pk=1481)
# aData = [{"asignatura_anterior":"969","asignatura_actual":"969"},{"asignatura_anterior":"4881","asignatura_actual":"4881"},{"asignatura_anterior":"4837","asignatura_actual":"4326"}]
# periodoactual=Periodo.objects.get(id=177)
# persona=Persona.objects.get(id=10730)
# resultado = matriz.matricula_2_repetidores_admision(periodoactual, periodoanterior, persona, carrera, nivel, aData)
# print(f"****************************************************************************************************")
# print(f"****************************************************************************************************")
# print(f"****************************************************************************************************")
# print(f"****************************************************************************************************")
# print(f"****************************************************************************************************")
# matriculas = Matricula.objects.filter(nivel__periodo=periodoactual, inscripcion__coordinacion_id=9)
# # matriculas = matriculas.filter(inscripcion__persona_id=10730)
# print(matriculas)
# for matricula in matriculas:
#     inscripcion = matricula.inscripcion
#     print(inscripcion.persona)
#     perfs = PerfilUsuario.objects.filter(inscripcion=inscripcion, persona=inscripcion.persona, visible=False)
#     if perfs.values("id").exists():
#         perfs(visible=True, status = True)
#         print(f"Se activo {inscripcion.persona}")
# carrera = Carrera.objects.get(pk=99)
# periodoanterior = Periodo.objects.get(pk=202)
# nivel = Nivel.objects.get(pk=1481)
# aData = [{"asignatura_anterior":"2677","asignatura_actual":"818"},{"asignatura_anterior":"969","asignatura_actual":"10235"},{"asignatura_anterior":"4837","asignatura_actual":"4881"}]
# periodoactual=Periodo.objects.get(id=177)
# persona=Persona.objects.get(id=10730)
# resultado = matriz.matricula_2_repetidores_admision(periodoactual, periodoanterior, persona, carrera, nivel, aData)
# sys.exc_info()[-1].tb_lineno


# cursor = connections['admisionvirtual'].cursor()
# sql = f"""
#     SELECT
#         app_p.id,
#         app_p.type_document,
#         app_p.document,
#         app_qc."id" AS id_qc,
#         app_apc.malla_admision_pk AS malla_id
#     FROM app_quotaassignmentapplicantcareer AS app_qc
#     INNER JOIN app_applicant AS app_a ON app_a.id = app_qc.applicant_id
#     INNER JOIN app_academicperiodcareer AS app_apc ON app_apc.career_id = app_qc.career_id AND app_apc.period_id=5
#     INNER JOIN app_inscription AS app_i ON app_i.id = app_a.inscription_id
#     INNER JOIN app_person AS app_p ON app_p.id=app_i.person_id
#     WHERE app_a.period_id=5 AND app_qc."isAcceptQuota" = TRUE
#     """
# cursor.execute(sql)
# results = cursor.fetchall()
# total = len(results)
# contador = 0
# no_matriculados = []
# for result in results:
#     contador += 1
#     documento = result[2]
#     malla_id = result[4]
#     ePersona = Persona.objects.get(Q(cedula=documento) | Q(pasaporte=documento))
#     eMalla = Malla.objects.get(pk=malla_id)
#     eCarrera = eMalla.carrera
#     eModalidad = eMalla.modalidad
#     eInscripcion = Inscripcion.objects.get(persona=ePersona, carrera=eCarrera)
#     print(f"{total}/{contador} --> Inscripción:{eInscripcion.__str__()}")
#     if not Matricula.objects.values("id").filter(inscripcion=eInscripcion, nivel_id__in=[1482, 1481]).exists():
#         no_matriculados.append(eInscripcion)
#
#     # eInscripcionMalla = InscripcionMalla.objects.filter(inscripcion=eInscripcion)[0]
#     # eInscripcionMalla.malla=eMalla
#     # eInscripcionMalla.save()
#     # print(f"{total}/{contador} --> {eInscripcion.__str__()}")
#
#
# print(no_matriculados)
# print(len(no_matriculados))
# ids = [270404, 270860, 271017, 271035, 271046, 271049, 271182, 271285, 271296, 271355, 271387, 271394, 212130, 271443, 271456, 271462, 271493, 271589, 271634, 271648, 271686, 271806, 271897, 271946, 211976, 272260, 271979, 272397, 272408, 272602, 272698, 213253, 182221, 272756, 272777, 273022, 273023, 273074, 273224, 273277, 273299, 273327, 273332, 273361, 273764, 273771, 273775, 273776, 273800, 273931, 273955, 273991, 274104, 274107, 274215, 274241, 274456, 274497, 274559, 274686, 274689, 274708, 274729, 274759, 274817, 274822, 274874, 274948, 275027, 275516, 275171, 275225, 275302, 275309, 275371, 275406, 275410, 275452, 275470, 275481, 275508, 275640, 275666, 275700, 275789, 275931, 276049, 276113, 276142, 276166, 276188, 276199, 276217, 276228, 276254, 276298, 275349, 276339, 276368, 276400, 276475, 276542, 276541, 276694, 276698, 276707, 276714, 276778, 276782, 276795, 276853, 276862, 276866, 276908, 276938, 276961, 276986, 277052, 277084, 277095, 277100, 277123, 277201, 277206, 277211, 277264, 277278, 277432, 277474, 277511, 277560, 277576, 277593, 172604, 277614, 277673, 277677, 277728, 277776, 277887, 277896, 277913, 277969, 278003, 278331, 278340, 278376, 278377, 278414, 278456, 278466, 278536, 278630, 278669, 278867, 278964, 279023, 279220, 279268, 279296, 279315, 279317, 279622, 279666, 279670, 279743, 279786, 279903, 280053, 280133, 280187, 280383, 280653, 182211, 280793, 280997, 281033, 212360, 281241, 281452, 281670, 282004, 281758, 282058, 282275, 282382, 282611, 282593, 281569, 281589, 281961, 281688, 282007, 282088, 282249, 282272, 282393, 282538, 282806, 282897, 282904, 282860, 282881, 282981, 283349, 283632, 283634, 283679, 283687, 283416, 283720]
# eInscripciones = Inscripcion.objects.filter(pk__in=ids)
# sesiones = Sesion.objects.filter(pk__in=Nivel.objects.filter(periodo=periodoactual, nivellibrecoordinacion__coordinacion=ADMISION_ID).distinct().values_list('sesion_id'))
# errores = []
# for eInscripcion in eInscripciones:
#     perfiles_usuarios = PerfilUsuario.objects.filter(persona=eInscripcion.persona, inscripcion=eInscripcion)
#     perfiles_usuarios.update(visible=True)
#     perfil = perfiles_usuarios[0]
#     perfil.inscripcionprincipal=True
#     perfil.save()
#     nivel_id = 0
#     for sesion in sesiones:
#         # MODALIDAD EN LINEA (LE AGREGO LA SESION DE EN LINEA)
#         if sesion.id in [13] and eInscripcion.modalidad.id in [3]:
#             eInscripcion.sesion = sesion
#             nivel_id = 1481
#         # MODALIDAD EN SEMIPRESENCIAL O PRESENCIAL (LE AGREGO EL ID DE LA SESION DE FNSEMANA)
#         elif sesion.id in [7, 11, 12] and eInscripcion.modalidad.id in [1, 2]:
#             eInscripcion.sesion = sesion
#             nivel_id = 1482
#     eInscripcion.save()
#     # hago la matriculación
#     mimalla = eInscripcion.mi_malla()
#     print(nivel_id)
#     # nivel = Nivel.objects.get(periodo=periodo, sesion=eInscripcion.sesion, sede=sede)
#     nivel = Nivel.objects.get(pk=nivel_id)
#     if Materia.objects.values("id").filter(nivel__periodo=periodoactual, asignaturamalla__malla=mimalla, asignaturamalla__malla__carrera=eInscripcion.carrera, nivel__sesion=eInscripcion.sesion).exists():
#         with transaction.atomic():
#             try:
#                 if not eInscripcion.matricula_periodo(periodoactual):
#                     matricula = Matricula(inscripcion=eInscripcion,
#                                           nivel=nivel,
#                                           pago=False,
#                                           iece=False,
#                                           becado=False,
#                                           porcientobeca=0,
#                                           fecha=datetime.now().date(),
#                                           hora=datetime.now().time(),
#                                           fechatope=fechatope(datetime.now().date()),
#                                           automatriculaadmision=True,
#                                           fechaautomatriculaadmision=datetime.now())
#                     matricula.save()
#                 else:
#                     matricula = Matricula.objects.get(inscripcion=eInscripcion, nivel=nivel)
#                 print(matricula)
#                 eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=matricula)
#                 if not eMateriaAsignadas.values("id").exists():
#                     # paralelos = Materia.objects.filter(nivel__periodo=periodo, asignaturamalla__malla=mimalla.malla, asignaturamalla__malla__carrera=inscripcion.carrera, nivel__sesion=inscripcion.sesion).values_list('paralelo').distinct().order_by('paralelo')
#                     paralelos = Materia.objects.filter(nivel__periodo=periodoactual, asignaturamalla__malla=mimalla,
#                                                        asignaturamalla__malla__carrera=eInscripcion.carrera,
#                                                        nivel__sesion=eInscripcion.sesion).values_list(
#                         'paralelomateria').distinct()
#
#                     if paralelos.values("id").exists():
#                         paralelo_atomar = None
#                         tiene_cupo_paralelo = False
#                         for paralelo in paralelos:
#                             tiene_cupo_paralelo_aux = True
#                             for mat in Materia.objects.filter(nivel__periodo=periodoactual, paralelomateria=paralelo,
#                                                               asignaturamalla__malla=mimalla,
#                                                               nivel__sesion=eInscripcion.sesion):
#                                 if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                     tiene_cupo_paralelo_aux = False
#                                     break
#                             if tiene_cupo_paralelo_aux:
#                                 paralelo_atomar = paralelo
#                                 tiene_cupo_paralelo = True
#                                 break
#                         if tiene_cupo_paralelo:
#                             materias_c = Materia.objects.filter(nivel__periodo=periodoactual, paralelomateria=paralelo_atomar,
#                                                                 asignaturamalla__malla=mimalla,
#                                                                 nivel__sesion=eInscripcion.sesion)
#                             for materia in materias_c:
#                                 if not MateriaAsignada.objects.values('id').filter(matricula=matricula,
#                                                                                    materia=materia).exists():
#                                     matriculas = matricula.inscripcion.historicorecordacademico_set.values('id').filter(
#                                         asignatura=materia.asignatura, fecha__lt=materia.nivel.fin).count() + 1
#                                     materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                       materia=materia,
#                                                                       notafinal=0,
#                                                                       asistenciafinal=0,
#                                                                       cerrado=False,
#                                                                       matriculas=matriculas,
#                                                                       observaciones='',
#                                                                       estado_id=NOTA_ESTADO_EN_CURSO,
#                                                                       cobroperdidagratuidad=eInscripcion.gratuidad)
#                                     materiaasignada.save()
#                                     materiaasignada.asistencias()
#                                     materiaasignada.evaluacion()
#                                     materiaasignada.mis_planificaciones()
#                                     materiaasignada.save()
#                                     print(materiaasignada)
#                 matricula.actualizar_horas_creditos()
#                 matricula.estado_matricula = 2
#                 matricula.save()
#                 matricula.calcula_nivel()
#                 eInscripcion.actualizar_nivel()
#                 if eInscripcion.estado_gratuidad == 3:
#                     if eInscripcion.sesion_id == 13:
#                         tiporubromatricula = TipoOtroRubro.objects.get(pk=3019)
#                     else:
#                         tiporubromatricula = TipoOtroRubro.objects.get(pk=3011)
#                     MateriaAsignada.objects.filter(matricula=matricula).update(cobroperdidagratuidad=True)
#                     if matricula.tipomatricula_id == 1:
#                         matricula.estado_matricula = 2
#                         matricula.save()
#
#                     num_materias = MateriaAsignada.objects.filter(matricula=matricula, cobroperdidagratuidad=True).count()
#                     valor_x_materia = 20
#                     valor_total = num_materias * valor_x_materia
#
#                     if not Rubro.objects.filter(persona=eInscripcion.persona, matricula=matricula).exists():
#                         print(eInscripcion.gratuidad)
#                         rubro1 = Rubro(tipo=tiporubromatricula,
#                                        persona=eInscripcion.persona,
#                                        matricula=matricula,
#                                        nombre=tiporubromatricula.nombre + ' - ' + periodoactual.nombre,
#                                        cuota=1,
#                                        fecha=datetime.now().date(),
#                                        fechavence=datetime.now().date() + timedelta(days=22),
#                                        valor=valor_total,
#                                        iva_id=1,
#                                        valoriva=0,
#                                        valortotal=valor_total,
#                                        saldo=valor_total,
#                                        cancelado=False)
#                         rubro1.save()
#                         print(rubro1)
#                     else:
#                         rubro1 = Rubro.objects.filter(persona=eInscripcion.persona, matricula=matricula)[0]
#                         rubro1.tipo = tiporubromatricula
#                         rubro1.nombre = tiporubromatricula.nombre + ' - ' + periodoactual.nombre
#                         rubro1.cuota = 1
#                         rubro1.fecha = datetime.now().date()
#                         rubro1.fechavence = datetime.now().date() + timedelta(days=22)
#                         rubro1.valor = valor_total
#                         rubro1.iva_id = 1
#                         rubro1.valoriva = 0
#                         rubro1.valortotal = valor_total
#                         rubro1.saldo = valor_total
#                         rubro1.cancelado = False
#                         rubro1.save()
#                         print(rubro1)
#             except Exception as ex:
#                 print(f"error: {ex.__str__()}")
#                 transaction.set_rollback(True)
#                 errores.append(eInscripcion.pk)
# print(f"{len(errores)}")
# print(f"{errores}")
# if DEBUG:
#     matriz = My_SubirMatrizInscripcion.objects.get(pk=23)
# else:
#     matriz = My_SubirMatrizInscripcion.objects.get(pk=16)
#
# vrProcess = matriz.matriculacion_senescyt(periodo, persona, carrera)
# eMatriculas = Matricula.objects.filter(nivel_id__in=[1482, 1481], inscripcion__carrera_id=223, inscripcion__coordinacion_id=9)
# periodoactual=Periodo.objects.get(id=177)
# eMatriculas = Matricula.objects.filter(nivel__periodo=periodoactual)
# total = len(eMatriculas.values("id"))
# print(f"Total: {total}")
# contador = 0
# for eMatricula in eMatriculas:
#     contador += 1
#     if eMatricula.inscripcion.coordinacion_id != 9:
#         eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=eMatricula)
#         if eMateriaAsignadas.values("id").exists():
#             eMateriaAsignada = eMateriaAsignadas.first()
#             eMatricula.usuario_creacion=eMateriaAsignada.usuario_creacion
#             eMatricula.usuario_modificacion=eMateriaAsignada.usuario_modificacion
#             eMatricula.save()
#             print(f"({total}/{contador}) Se actualiza matricula -> {eMatricula.__str__()}")
#     else:
#         eMatricula.usuario_creacion_id = 1
#         eMatricula.usuario_modificacion_id = 1
#         eMatricula.save()
#         MateriaAsignada.objects.filter(matricula=eMatricula).update(usuario_creacion_id=1, usuario_modificacion_id=1)
#         print(f"({total}/{contador}) Se actualiza matricula -> {eMatricula.__str__()}")


# eMatricula = Matricula.objects.get(pk=645902)
# MateriaAsignada.objects.filter(matricula=eMatricula).update(retiramateria=False)
# print("Se actualizo materias")
# eRubro = Rubro.objects.get(pk=591230)
# ePagos = Pago.objects.filter(pk=462754, rubro=eRubro)
# ePagoLiquidacion = PagoLiquidacion.objects.filter(pagos__in=ePagos)
# print(ePagoLiquidacion)
# ePagoLiquidacion.delete()
# print("Se elimino liquidación")
# ePagos.delete()
# print("Se elimino pagos")
# eRubro.fechavence = datetime(2023, 5, 30, 0, 0, 0).date()
# eRubro.saldo = 76.50
# eRubro.save()
# print("Se actualizo rubro")
# eMatricula.bloqueomatricula = False
# eMatricula.save()
# print("Se actualizo matricula")

# eMatriculas = Matricula.objects.filter(pk__in=[696957, 696958, 696959, 696960])
# total = eMatriculas.values("id").count()
# contador = 0
# arreglos = []
# for eMatricula in eMatriculas:
#     contador += 1
#     print(f"({total}/{contador}) Leyendo matricula {eMatricula.__str__()}")
#     eInscripcion = eMatricula.inscripcion
#     eMalla = eInscripcion.mi_malla()
#     eMateriaAsignadas = MateriaAsignada.objects.filter(matricula=eMatricula)
#     eAsignaturaMallas = AsignaturaMalla.objects.filter(malla=eMalla)
#     isRepetidor = False
#     asignaturas_rep = []
#     for eAsignaturaMalla in eAsignaturaMallas:
#         eRecordAcademicos = RecordAcademico.objects.filter(inscripcion=eInscripcion, asignaturamalla=eAsignaturaMalla, status=True)
#         if eRecordAcademicos.values("id").filter(aprobada=False).exists():
#             isRepetidor = True
#             asignaturas_rep.append(eAsignaturaMalla)
#     with transaction.atomic():
#         try:
#             if isRepetidor:
#                 print(f"--->Es repetidor {eMatricula.__str__()}")
#                 for eAsignaturaMalla in asignaturas_rep:
#                     if not eMateriaAsignadas.values("id").filter(materia__asignaturamalla=eAsignaturaMalla).exists():
#                         paralelos = Materia.objects.filter(nivel_id__in=[1482, 1481], asignaturamalla__malla=eMalla, asignaturamalla__malla__carrera=eInscripcion.carrera, nivel__sesion=eInscripcion.sesion).values_list('paralelomateria').distinct()
#                         paralelo_atomar = None
#                         tiene_cupo_paralelo = False
#                         for paralelo in paralelos:
#                             tiene_cupo_paralelo_aux = True
#                             for mat in Materia.objects.filter(nivel_id__in=[1482, 1481], paralelomateria=paralelo, asignaturamalla=eAsignaturaMalla, nivel__sesion=eInscripcion.sesion):
#                                 if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#                                     tiene_cupo_paralelo_aux = False
#                                     break
#                             if tiene_cupo_paralelo_aux:
#                                 paralelo_atomar = paralelo
#                                 tiene_cupo_paralelo = True
#                                 break
#                         if not tiene_cupo_paralelo:
#                             raise NameError(f"No hay cupo en {eAsignaturaMalla.asignatura.nombre} de la carrera {eMalla.carrera.nombre}")
#                         eMateria = Materia.objects.get(nivel_id__in=[1482, 1481], paralelomateria=paralelo_atomar, asignaturamalla=eAsignaturaMalla, nivel__sesion=eInscripcion.sesion)
#                         matriculas = eMatricula.inscripcion.historicorecordacademico_set.values('id').filter(asignatura=eMateria.asignatura, fecha__lt=eMateria.nivel.fin).count() + 1
#                         eMateriaAsignada = MateriaAsignada(matricula=eMatricula,
#                                                            materia=eMateria,
#                                                            notafinal=0,
#                                                            asistenciafinal=0,
#                                                            cerrado=False,
#                                                            matriculas=matriculas,
#                                                            observaciones='',
#                                                            estado_id=NOTA_ESTADO_EN_CURSO,
#                                                            cobroperdidagratuidad=True)
#                         eMateriaAsignada.save()
#                         eMateriaAsignada.asistencias()
#                         eMateriaAsignada.evaluacion()
#                         eMateriaAsignada.mis_planificaciones()
#                         eMateriaAsignada.save()
#                         print(f"[REPETIDOR]: Agrego la materia a la matricula: {eMatricula.__str__()}")
#                 eMatricula.actualizar_horas_creditos()
#                 eMatricula.estado_matricula = 2
#                 eMatricula.automatriculaadmision = True
#                 eMatricula.fechatermino = datetime(2023, 5, 12, 10, 10, 0)
#                 eMatricula.fechaautomatriculaadmision = datetime(2023, 5, 12, 10, 10, 0)
#                 eMatricula.termino = True
#                 eMatricula.save()
#                 eMatricula.calcula_nivel()
#                 eInscripcion.actualizar_nivel()
#                 eInscripcion.estado_gratuidad = 3
#                 eInscripcion.save()
#                 if eInscripcion.sesion_id == 13:
#                     eTipoOtroRubro = TipoOtroRubro.objects.get(pk=3019)
#                 else:
#                     eTipoOtroRubro = TipoOtroRubro.objects.get(pk=3011)
#                 eMateriaAsignadas.update(cobroperdidagratuidad=True)
#                 if eMatricula.tipomatricula_id == 1:
#                     eMatricula.estado_matricula = 2
#                     eMatricula.save()
#                 num_materias = MateriaAsignada.objects.filter(matricula=eMatricula, cobroperdidagratuidad=True).count()
#                 valor_x_materia = 20
#                 valor_total = num_materias * valor_x_materia
#                 try:
#                     eRubro = Rubro.objects.get(persona=eInscripcion.persona, matricula=eMatricula)
#                 except ObjectDoesNotExist:
#                     eRubro = Rubro(persona=eInscripcion.persona, matricula=eMatricula)
#                 eRubro.tipo=eTipoOtroRubro
#                 eRubro.nombre=eTipoOtroRubro.nombre + ' - ' + eMatricula.nivel.periodo.nombre
#                 eRubro.cuota=1
#                 eRubro.fecha=datetime.now().date()
#                 eRubro.fechavence=datetime(2023, 5, 31, 23, 59, 59).date()
#                 eRubro.valor=valor_total
#                 eRubro.iva_id=1
#                 eRubro.valoriva=0
#                 eRubro.valortotal=valor_total
#                 eRubro.saldo=valor_total
#                 eRubro.cancelado=False
#                 eRubro.save()
#                 print(f"[REPETIDOR]: Se genero rubro: {eRubro.__str__()} de la matricula: {eMatricula.__str__()}")
#             # else:
#             #     print(f"**No es repetidor {eMatricula.__str__()}")
#             #     for eAsignaturaMalla in eAsignaturaMallas:
#             #         if not eMateriaAsignadas.values("id").filter(materia__asignaturamalla=eAsignaturaMalla).exists():
#             #             paralelos = Materia.objects.filter(nivel_id__in=[1482, 1481], asignaturamalla__malla=eMalla, asignaturamalla__malla__carrera=eInscripcion.carrera, nivel__sesion=eInscripcion.sesion).values_list('paralelomateria').distinct()
#             #             paralelo_atomar = None
#             #             tiene_cupo_paralelo = False
#             #             for paralelo in paralelos:
#             #                 tiene_cupo_paralelo_aux = True
#             #                 for mat in Materia.objects.filter(nivel_id__in=[1482, 1481], paralelomateria=paralelo, asignaturamalla=eAsignaturaMalla, nivel__sesion=eInscripcion.sesion):
#             #                     if MateriaAsignada.objects.filter(materia=mat).count() + 1 > mat.cupo:
#             #                         tiene_cupo_paralelo_aux = False
#             #                         break
#             #                 if tiene_cupo_paralelo_aux:
#             #                     paralelo_atomar = paralelo
#             #                     tiene_cupo_paralelo = True
#             #                     break
#             #             if not tiene_cupo_paralelo:
#             #                 raise NameError(f"No hay cupo en {eAsignaturaMalla.asignatura.nombre} de la carrera {eMalla.carrera.nombre}")
#             #             eMateria = Materia.objects.get(nivel_id__in=[1482, 1481], paralelomateria=paralelo_atomar, asignaturamalla=eAsignaturaMalla, nivel__sesion=eInscripcion.sesion)
#             #             matriculas = eMatricula.inscripcion.historicorecordacademico_set.values('id').filter(asignatura=eMateria.asignatura, fecha__lt=eMateria.nivel.fin).count() + 1
#             #             eMateriaAsignada = MateriaAsignada(matricula=eMatricula,
#             #                                                materia=eMateria,
#             #                                                notafinal=0,
#             #                                                asistenciafinal=0,
#             #                                                cerrado=False,
#             #                                                matriculas=matriculas,
#             #                                                observaciones='',
#             #                                                estado_id=NOTA_ESTADO_EN_CURSO,
#             #                                                cobroperdidagratuidad=eInscripcion.gratuidad)
#             #             eMateriaAsignada.save()
#             #             eMateriaAsignada.asistencias()
#             #             eMateriaAsignada.evaluacion()
#             #             eMateriaAsignada.mis_planificaciones()
#             #             eMateriaAsignada.save()
#             #             print(f"[NO_REPETIDOR]: Agrego la materia a la matricula: {eMatricula.__str__()}")
#             #     eMatricula.actualizar_horas_creditos()
#             #     eMatricula.estado_matricula = 2
#             #     eMatricula.automatriculaadmision = True
#             #     eMatricula.termino = False
#             #     eMatricula.save()
#             #     eMatricula.calcula_nivel()
#             #     eInscripcion.actualizar_nivel()
#             #     if eInscripcion.estado_gratuidad == 3:
#             #         if eInscripcion.sesion_id == 13:
#             #             eTipoOtroRubro = TipoOtroRubro.objects.get(pk=3019)
#             #         else:
#             #             eTipoOtroRubro = TipoOtroRubro.objects.get(pk=3011)
#             #         eMateriaAsignadas.update(cobroperdidagratuidad=True)
#             #         if eMatricula.tipomatricula_id == 1:
#             #             eMatricula.estado_matricula = 2
#             #             eMatricula.save()
#             #         num_materias = MateriaAsignada.objects.filter(matricula=eMatricula, cobroperdidagratuidad=True).count()
#             #         valor_x_materia = 20
#             #         valor_total = num_materias * valor_x_materia
#             #         try:
#             #             eRubro = Rubro.objects.get(persona=eInscripcion.persona, matricula=eMatricula)
#             #         except ObjectDoesNotExist:
#             #             eRubro = Rubro(persona=eInscripcion.persona, matricula=eMatricula)
#             #         eRubro.tipo = eTipoOtroRubro
#             #         eRubro.nombre = eTipoOtroRubro.nombre + ' - ' + eMatricula.nivel.periodo.nombre
#             #         eRubro.cuota = 1
#             #         eRubro.fecha = datetime.now().date()
#             #         eRubro.fechavence = datetime(2023, 5, 31, 23, 59, 59).date()
#             #         eRubro.valor = valor_total
#             #         eRubro.iva_id = 1
#             #         eRubro.valoriva = 0
#             #         eRubro.valortotal = valor_total
#             #         eRubro.saldo = valor_total
#             #         eRubro.cancelado = False
#             #         eRubro.save()
#             #         print(f"[NO REPETIDOR]: Se genero rubro: {eRubro.__str__()} de la matricula: {eMatricula.__str__()}")
#         except Exception as ex:
#             transaction.set_rollback(True)
#             print(f"Error: {ex.__str__()}")
#             arreglos.append(ex.__str__())
#
# print(arreglos)
#


# matriculas = Matricula.objects.filter(nivel__periodo_id=177, status=True, inscripcion__coordinacion_id=9)
# aaData = {}
# aaData['total_matriculados'] = total_matriculados = matriculas.count()
# aaData['total_confirmados'] = total_confirmados = matriculas.filter(automatriculaadmision=True, termino=True).count()
# aaData['total_por_confirmar'] = total_por_confirmar = (total_matriculados - total_confirmados)
# try:
#     total_confirmados_por = round(null_to_numeric((total_confirmados * 100) / total_matriculados), 2)
# except ZeroDivisionError:
#     total_confirmados_por = 0
#
# try:
#     total_por_confirmar_por = round(null_to_numeric((total_por_confirmar * 100) / total_matriculados), 2)
# except ZeroDivisionError:
#     total_por_confirmar_por = 0
# aaData['total_confirmados_por'] = total_confirmados_por
# aaData['total_por_confirmar_por'] = total_por_confirmar_por
#
# print(aaData)


# eMatriculas = Matricula.objects.select_related('inscripcion').filter(status=True, nivel__periodo_id=177, retiradomatricula=False)
# ePersonas = Persona.objects.filter(pk__in=eMatriculas.values_list('inscripcion__persona__id', flat=True))
# total = len(ePersonas.values("id"))
# contador = 0
# for ePersona in ePersonas:
#     contador += 1
#     with transaction.atomic():
#         try:
#             print(f"{total}/{contador} Persona: {ePersona.__str__()}")
#             if (eGeolocationUser := GeolocationUser.objects.filter(user=ePersona.usuario).order_by('-fecha_modificacion').first()) is not None:
#                 eGeolocation = eGeolocationUser.geolocation
#                 eUbicacionPersonas = UbicacionPersona.objects.filter(persona=ePersona)
#                 if eUbicacionPersonas.values("id").exists():
#                     eUbicacionPersonas.update(actual=False)
#                     eUbicacionPersona = UbicacionPersona(persona=ePersona,
#                                                          latitud=eGeolocation.latitude,
#                                                          longitud=eGeolocation.longitude,
#                                                          actual=True
#                                                          )
#                     eUbicacionPersona.save()
#                     print(f"{total}/{contador} Se actualiza ubicación: {ePersona.__str__()}")
#         except Exception as ex:
#             transaction.set_rollback(True)
#             print(f"Ocurrio un error: {ex.__str__()} --> {ex.__str__()}")


def quiz_examen_nivelacion(ePeriodo):
    ids_cursomoodle = [
        1241, 1242, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1301, 1302, 1303, 1304, 1305,
        1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1339, 1340, 1341, 1342, 1343, 1402, 1403,
        1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
        1420, 1421, 1422, 1423, 1466, 1467, 1468, 1469, 1470, 1473, 1474, 1475, 1477, 1479, 1480, 1486,
        1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
        1539, 1540, 1586, 1587, 1588, 1604, 1605, 1606, 1613, 1614, 1615, 1624, 1625, 1626, 1627, 1646,
        1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1658, 1660, 1666, 1667, 1672, 1673, 1686, 1687,
        1688, 1689, 1690, 1707, 1708, 1719, 1720, 1725, 1726, 1737, 1738, 1749, 1750, 1751, 1752, 1753,
        1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
        1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1841, 1842, 1843, 1854, 1855,
        1856, 1857, 1858, 1859, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
        1916, 1917, 1918, 1560, 1561, 1562, 1563, 1546, 1547, 1548, 1549, 1550, 1572, 1573, 1574, 1575,
        1344, 1345, 1346, 1347, 1348, 1349, 1350, 1485, 1601, 1602, 1603, 1471, 1472, 1476, 1478, 1355,
        1356, 1735, 1736, 1432, 1433, 1434, 1435, 1860, 1861, 1862, 1863, 1699, 1700, 1701, 1702, 1659,
        1272
    ]
    eMaterias = Materia.objects.filter(nivel_id__in=[1481, 1482], nivel__periodo=ePeriodo, status=True,
                                       idcursomoodle__in=ids_cursomoodle)
    data = [
        {'id_coursemoodel': 1241, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89331'},
        {'id_coursemoodel': 1242, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89336'},
        {'id_coursemoodel': 1263, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89584'},
        {'id_coursemoodel': 1264, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89582'},
        {'id_coursemoodel': 1265, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89616'},
        {'id_coursemoodel': 1266, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89618'},
        {'id_coursemoodel': 1267, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89630'},
        {'id_coursemoodel': 1268, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89628'},
        {'id_coursemoodel': 1269, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89643'},
        {'id_coursemoodel': 1270, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89641'},
        {'id_coursemoodel': 1271, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89667'},
        {'id_coursemoodel': 1301, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89706'},
        {'id_coursemoodel': 1302, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89718'},
        {'id_coursemoodel': 1303, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89716'},
        {'id_coursemoodel': 1304, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89726'},
        {'id_coursemoodel': 1305, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89724'},
        {'id_coursemoodel': 1306, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89738'},
        {'id_coursemoodel': 1307, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89736'},
        {'id_coursemoodel': 1308, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89755'},
        {'id_coursemoodel': 1309, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89761'},
        {'id_coursemoodel': 1310, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89757'},
        {'id_coursemoodel': 1311, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89674'},
        {'id_coursemoodel': 1312, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89701'},
        {'id_coursemoodel': 1313, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89708'},
        {'id_coursemoodel': 1314, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89704'},
        {'id_coursemoodel': 1339, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89483'},
        {'id_coursemoodel': 1340, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89389'},
        {'id_coursemoodel': 1341, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89405'},
        {'id_coursemoodel': 1342, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89410'},
        {'id_coursemoodel': 1343, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89424'},
        {'id_coursemoodel': 1402, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90009'},
        {'id_coursemoodel': 1403, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90005'},
        {'id_coursemoodel': 1404, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89997'},
        {'id_coursemoodel': 1405, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89989'},
        {'id_coursemoodel': 1406, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89982'},
        {'id_coursemoodel': 1407, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89973'},
        {'id_coursemoodel': 1408, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89966'},
        {'id_coursemoodel': 1409, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89963'},
        {'id_coursemoodel': 1410, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89959'},
        {'id_coursemoodel': 1411, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89951'},
        {'id_coursemoodel': 1412, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89942'},
        {'id_coursemoodel': 1413, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89936'},
        {'id_coursemoodel': 1414, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89920'},
        {'id_coursemoodel': 1415, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89917'},
        {'id_coursemoodel': 1416, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89904'},
        {'id_coursemoodel': 1417, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89873'},
        {'id_coursemoodel': 1418, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89877'},
        {'id_coursemoodel': 1419, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89518'},
        {'id_coursemoodel': 1420, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89523'},
        {'id_coursemoodel': 1421, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89511'},
        {'id_coursemoodel': 1422, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89520'},
        {'id_coursemoodel': 1423, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89507'},
        {'id_coursemoodel': 1466, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89933'},
        {'id_coursemoodel': 1467, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89987'},
        {'id_coursemoodel': 1468, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90003'},
        {'id_coursemoodel': 1469, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90001'},
        {'id_coursemoodel': 1470, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90016'},
        {'id_coursemoodel': 1473, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90113'},
        {'id_coursemoodel': 1474, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90115'},
        {'id_coursemoodel': 1475, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90117'},
        {'id_coursemoodel': 1477, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90135'},
        {'id_coursemoodel': 1479, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90145'},
        {'id_coursemoodel': 1480, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90149'},
        {'id_coursemoodel': 1486, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89461'},
        {'id_coursemoodel': 1523, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90151'},
        {'id_coursemoodel': 1524, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90153'},
        {'id_coursemoodel': 1525, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90158'},
        {'id_coursemoodel': 1526, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90122'},
        {'id_coursemoodel': 1527, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90124'},
        {'id_coursemoodel': 1528, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90126'},
        {'id_coursemoodel': 1529, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90155'},
        {'id_coursemoodel': 1530, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90147'},
        {'id_coursemoodel': 1531, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90141'},
        {'id_coursemoodel': 1532, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90164'},
        {'id_coursemoodel': 1533, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90168'},
        {'id_coursemoodel': 1534, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90170'},
        {'id_coursemoodel': 1535, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90173'},
        {'id_coursemoodel': 1536, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90175'},
        {'id_coursemoodel': 1537, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90185'},
        {'id_coursemoodel': 1538, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90183'},
        {'id_coursemoodel': 1539, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90050'},
        {'id_coursemoodel': 1540, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90028'},
        {'id_coursemoodel': 1586, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89812'},
        {'id_coursemoodel': 1587, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89814'},
        {'id_coursemoodel': 1588, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89818'},
        {'id_coursemoodel': 1604, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89383'},
        {'id_coursemoodel': 1605, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89401'},
        {'id_coursemoodel': 1606, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89403'},
        {'id_coursemoodel': 1613, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89422'},
        {'id_coursemoodel': 1614, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89426'},
        {'id_coursemoodel': 1615, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89455'},
        {'id_coursemoodel': 1624, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89463'},
        {'id_coursemoodel': 1625, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89477'},
        {'id_coursemoodel': 1626, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89479'},
        {'id_coursemoodel': 1627, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89487'},
        {'id_coursemoodel': 1646, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89432'},
        {'id_coursemoodel': 1647, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89445'},
        {'id_coursemoodel': 1648, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89447'},
        {'id_coursemoodel': 1649, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89449'},
        {'id_coursemoodel': 1650, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89453'},
        {'id_coursemoodel': 1651, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89457'},
        {'id_coursemoodel': 1652, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89459'},
        {'id_coursemoodel': 1653, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89469'},
        {'id_coursemoodel': 1654, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89467'},
        {'id_coursemoodel': 1658, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89489'},
        {'id_coursemoodel': 1660, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89499'},
        {'id_coursemoodel': 1666, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89879'},
        {'id_coursemoodel': 1667, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89881'},
        {'id_coursemoodel': 1672, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89888'},
        {'id_coursemoodel': 1673, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89886'},
        {'id_coursemoodel': 1686, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89893'},
        {'id_coursemoodel': 1687, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89901'},
        {'id_coursemoodel': 1688, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89903'},
        {'id_coursemoodel': 1689, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89908'},
        {'id_coursemoodel': 1690, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89910'},
        {'id_coursemoodel': 1707, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89377'},
        {'id_coursemoodel': 1708, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89387'},
        {'id_coursemoodel': 1719, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89375'},
        {'id_coursemoodel': 1720, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89368'},
        {'id_coursemoodel': 1725, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89385'},
        {'id_coursemoodel': 1726, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89394'},
        {'id_coursemoodel': 1737, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89396'},
        {'id_coursemoodel': 1738, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89420'},
        {'id_coursemoodel': 1749, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89514'},
        {'id_coursemoodel': 1750, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89516'},
        {'id_coursemoodel': 1751, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89543'},
        {'id_coursemoodel': 1752, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89545'},
        {'id_coursemoodel': 1753, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89549'},
        {'id_coursemoodel': 1770, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89929'},
        {'id_coursemoodel': 1771, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89947'},
        {'id_coursemoodel': 1772, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89949'},
        {'id_coursemoodel': 1773, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89954'},
        {'id_coursemoodel': 1774, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89956'},
        {'id_coursemoodel': 1775, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89971'},
        {'id_coursemoodel': 1776, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89969'},
        {'id_coursemoodel': 1777, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89984'},
        {'id_coursemoodel': 1816, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89696'},
        {'id_coursemoodel': 1817, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89698'},
        {'id_coursemoodel': 1818, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89710'},
        {'id_coursemoodel': 1819, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89712'},
        {'id_coursemoodel': 1820, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89714'},
        {'id_coursemoodel': 1821, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89720'},
        {'id_coursemoodel': 1822, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89722'},
        {'id_coursemoodel': 1823, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89742'},
        {'id_coursemoodel': 1824, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89728'},
        {'id_coursemoodel': 1825, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89767'},
        {'id_coursemoodel': 1826, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89769'},
        {'id_coursemoodel': 1827, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89783'},
        {'id_coursemoodel': 1828, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89781'},
        {'id_coursemoodel': 1829, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89779'},
        {'id_coursemoodel': 1830, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89794'},
        {'id_coursemoodel': 1831, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89771'},
        {'id_coursemoodel': 1832, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89746'},
        {'id_coursemoodel': 1833, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89792'},
        {'id_coursemoodel': 1834, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89682'},
        {'id_coursemoodel': 1841, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89555'},
        {'id_coursemoodel': 1842, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89574'},
        {'id_coursemoodel': 1843, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89572'},
        {'id_coursemoodel': 1854, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89586'},
        {'id_coursemoodel': 1855, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89598'},
        {'id_coursemoodel': 1856, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89600'},
        {'id_coursemoodel': 1857, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89624'},
        {'id_coursemoodel': 1858, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89626'},
        {'id_coursemoodel': 1859, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89636'},
        {'id_coursemoodel': 1904, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89438'},
        {'id_coursemoodel': 1905, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89473'},
        {'id_coursemoodel': 1906, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89493'},
        {'id_coursemoodel': 1907, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89495'},
        {'id_coursemoodel': 1908, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89502'},
        {'id_coursemoodel': 1909, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89504'},
        {'id_coursemoodel': 1910, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89509'},
        {'id_coursemoodel': 1911, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89526'},
        {'id_coursemoodel': 1912, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89539'},
        {'id_coursemoodel': 1913, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89547'},
        {'id_coursemoodel': 1914, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89565'},
        {'id_coursemoodel': 1915, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89570'},
        {'id_coursemoodel': 1916, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89580'},
        {'id_coursemoodel': 1917, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89568'},
        {'id_coursemoodel': 1918, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89408'},
        {'id_coursemoodel': 1560, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89608'},
        {'id_coursemoodel': 1561, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89610'},
        {'id_coursemoodel': 1562, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89786'},
        {'id_coursemoodel': 1563, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89790'},
        {'id_coursemoodel': 1546, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89481'},
        {'id_coursemoodel': 1547, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89491'},
        {'id_coursemoodel': 1548, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89497'},
        {'id_coursemoodel': 1549, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89578'},
        {'id_coursemoodel': 1550, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89576'},
        {'id_coursemoodel': 1572, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89796'},
        {'id_coursemoodel': 1573, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89800'},
        {'id_coursemoodel': 1574, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89803'},
        {'id_coursemoodel': 1575, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89805'},
        {'id_coursemoodel': 1344, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89434'},
        {'id_coursemoodel': 1345, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89442'},
        {'id_coursemoodel': 1346, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89436'},
        {'id_coursemoodel': 1347, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89451'},
        {'id_coursemoodel': 1348, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89465'},
        {'id_coursemoodel': 1349, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89471'},
        {'id_coursemoodel': 1350, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89475'},
        {'id_coursemoodel': 1485, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89440'},
        {'id_coursemoodel': 1601, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89816'},
        {'id_coursemoodel': 1602, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89355'},
        {'id_coursemoodel': 1603, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89370'},
        {'id_coursemoodel': 1471, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90014'},
        {'id_coursemoodel': 1472, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90111'},
        {'id_coursemoodel': 1476, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90137'},
        {'id_coursemoodel': 1478, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90143'},
        {'id_coursemoodel': 1355, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89357'},
        {'id_coursemoodel': 1356, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89364'},
        {'id_coursemoodel': 1735, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89412'},
        {'id_coursemoodel': 1736, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89430'},
        {'id_coursemoodel': 1432, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89381'},
        {'id_coursemoodel': 1433, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89398'},
        {'id_coursemoodel': 1434, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89416'},
        {'id_coursemoodel': 1435, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89428'},
        {'id_coursemoodel': 1860, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89659'},
        {'id_coursemoodel': 1861, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89663'},
        {'id_coursemoodel': 1862, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89672'},
        {'id_coursemoodel': 1863, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89647'},
        {'id_coursemoodel': 1699, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89899'},
        {'id_coursemoodel': 1700, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=90120'},
        {'id_coursemoodel': 1701, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89361'},
        {'id_coursemoodel': 1702, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89372'},
        {'id_coursemoodel': 1659, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89501'},
        {'id_coursemoodel': 1272, 'url': 'https://aulanivelacion.unemi.edu.ec/mod/quiz/view.php?id=89652'}]

    for eMateria in eMaterias:
        with transaction.atomic():
            try:
                filtro = Q(silabosemanal__silabo__materia=eMateria) & Q(silabosemanal__numsemana=11) & Q(
                    status=True) & Q(estado_id=4)
                try:
                    eTestSilaboSemanalAdmision = TestSilaboSemanalAdmision.objects.get(filtro)
                except ObjectDoesNotExist:
                    raise NameError(f"No se encontro planificación de examen de la materia {eMateria}")
                resultado = [diccionario for diccionario in data if
                             diccionario['id_coursemoodel'] == eMateria.idcursomoodle]
                if len(resultado) == 0:
                    raise NameError(u"No se encontro id de curso moodle 001")
                dato = resultado[0]
                id_coursemoodel = dato.get('id_coursemoodel', 0)
                url = dato.get('url', None)
                if id_coursemoodel == 0:
                    raise NameError(u"No se encontro id de curso moodle 002")
                if url is None:
                    raise NameError(u"No se encontro url del course moodle")
                id_mooc_course_module = int(url.split("?id=")[1])
                conexion = connections['db_moodle_virtual']
                instance = 0
                try:
                    cursor = conexion.cursor()
                    sql = """select instance from mooc_course_modules WHERE course=%s AND module=18 and id=%s LIMIT 1 """ % (
                        eMateria.idcursomoodle, id_mooc_course_module)
                    cursor.execute(sql)
                    instance = cursor.fetchone()
                except Exception as ex:
                    raise NameError(u"%s - %s" % (ex.__str__(), sys.exc_info()[-1].tb_lineno))
                descripcion = """<p></p>
<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:Calibri,sans-serif"><span style="font-size:12.0pt">Estimados alumnos,</span></span>
    </span>
</p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:Calibri,sans-serif"><span style="font-size:12.0pt">Revisen las siguientes consideraciones para realizar su examen:</span></span>
    </span>
</p>

<ol>
    <li style="text-align:justify"><span style="font-size:11pt"><span style="font-family:Calibri,sans-serif"><span style="font-size:12.0pt">Preparación previa: Tómense el tiempo necesario para revisar y repasar el material relacionado con las unidades 1,2,3 y 4. Repasen sus apuntes, los recursos proporcionados y cualquier lectura recomendada. Asegúrense de comprender los conceptos fundamentales y las ideas principales antes de comenzar el examen.</span></span>
        </span>
    </li>
</ol>

<ol start="2">
    <li style="text-align:justify"><span style="font-size:11pt"><span style="font-family:Calibri,sans-serif"><span style="font-size:12.0pt">Lectura cuidadosa: Lean cada pregunta y las opciones de respuesta con atención. Asegúrense de comprender completamente lo que se está preguntando antes de seleccionar una respuesta. </span></span>
        </span>
    </li>
</ol>

<ol start="3">
    <li style="text-align:justify"><span style="font-size:11pt"><span style="font-family:Calibri,sans-serif"><span style="font-size:12.0pt">El examen consta de 10 preguntas en total de las Unidades 1,2,3 y 4.</span></span>
        </span>
    </li>
</ol>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:Calibri,sans-serif"><span style="font-size:12.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ¡Éxitos en la jornada!</span></span>
    </span>
</p> <br>
<p></p>"""
                eTestSilaboSemanalAdmision.idtestmoodle = instance
                eTestSilaboSemanalAdmision.descripcion = descripcion
                eTestSilaboSemanalAdmision.titulo = 'EXAMEN PENSAMIENTO COMPUTACIONAL'
                eTestSilaboSemanalAdmision.idtestmoodle = instance[0]
                eTestSilaboSemanalAdmision.estado_id = 4
                eTestSilaboSemanalAdmision.horainicio = datetime(2023, 7, 24, 0, 0, 1).time()
                eTestSilaboSemanalAdmision.horafin = datetime(2023, 7, 24, 23, 59, 59).time()
                eTestSilaboSemanalAdmision.fechadesde = datetime(2023, 7, 24, 23, 59, 59).date()
                eTestSilaboSemanalAdmision.fechahasta = datetime(2023, 7, 30, 23, 59, 59).date()
                eTestSilaboSemanalAdmision.vecesintento = 1
                eTestSilaboSemanalAdmision.navegacion = 2
                eTestSilaboSemanalAdmision.tiempoduracion = 60
                eTestSilaboSemanalAdmision.esquemapregunta = 1
                eTestSilaboSemanalAdmision.save()
                print(f"Se guardo examen")
            except Exception as ex:
                transaction.set_rollback(True)
                print(ex.__str__())
                print(f"Error: {eMateria.id}")


def santo_domingo_admision(ePeriodo):
    aula_id = 285
    if not DEBUG:
        aula_id = 286
    eLaboratorioVirtual = LaboratorioVirtual.objects.get(pk=aula_id)
    filtro_1 = Q(aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id=10) & Q(
        materiaasignada__matricula__inscripcion__coordinacion_id=9) & Q(
        materiaasignada__matricula__nivel__periodo=ePeriodo)
    eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
        filtro_1)
    eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=10,
                                                                                                periodo=ePeriodo,
                                                                                                pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list(
                                                                                                    'aulaplanificacion__turnoplanificacion__fechaplanificacion__id',
                                                                                                    flat=True))
    # for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
    #     print(f"Fecha: {eFechaPlanificacionSedeVirtualExamen}")
    #     eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(fechaplanificacion=eFechaPlanificacionSedeVirtualExamen)
    #     for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
    #         filtro = filtro_1 & Q(aulaplanificacion__turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
    #         # eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
    #         try:
    #             eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen.objects.get(turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
    #         except ObjectDoesNotExist:
    #             eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
    #                                                                                      aula=eLaboratorioVirtual)
    #             eAulaPlanificacionSedeVirtualExamen.save()
    #         MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(filtro).update(aulaplanificacion=eAulaPlanificacionSedeVirtualExamen)
    #         print(f"Se actualiza la planificación del turno {eTurnoPlanificacionSedeVirtualExamen.__str__()}")
    #         # eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(filtro)
    #         # for

    for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
        print(f"Fecha: {eFechaPlanificacionSedeVirtualExamen}")
        eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
            fechaplanificacion=eFechaPlanificacionSedeVirtualExamen)
        for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
            filtro = filtro_1 & Q(aulaplanificacion__turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
            # eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
            try:
                eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen.objects.get(
                    turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
            except ObjectDoesNotExist:
                raise NameError(u"No se encontro planificado aula")
            eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(
                filtro)
            for eMateriaAsignadaPlanificacionSedeVirtualExamen in eMateriaAsignadaPlanificacionSedeVirtualExamenes:
                try:
                    eMatriculaSedeExamen = MatriculaSedeExamen.objects.get(
                        matricula=eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.matricula)
                except ObjectDoesNotExist:
                    eMatriculaSedeExamen = None
                eMateriaAsignadaPlanificacionSedeVirtualExamen.aulaplanificacion = eAulaPlanificacionSedeVirtualExamen
                eMateriaAsignadaPlanificacionSedeVirtualExamen.asistencia = False
                eMateriaAsignadaPlanificacionSedeVirtualExamen.fecha_asistencia = None
                aceptotermino = False
                genero_qr = False
                url_pdf_examen = ''
                if eMateriaAsignadaPlanificacionSedeVirtualExamen.utilizar_qr:
                    if eMatriculaSedeExamen:
                        if eMatriculaSedeExamen.aceptotermino:
                            aceptotermino = True
                            try:
                                result = generate_qr_examen_final(eMateriaAsignadaPlanificacionSedeVirtualExamen,
                                                                  materiaasignada_id=eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada_id)
                                isSuccess = result.get('isSuccess', False)
                                if not isSuccess:
                                    message = result.get('message', 'Error al generar documento')
                                    raise NameError(message)
                                aDataExamen = result.get('data', {})
                                url_pdf_examen = aDataExamen.get('url_pdf', '')
                                codigo_qr_examen = aDataExamen.get('codigo_qr', '')
                                if url_pdf_examen == '' and codigo_qr_examen == '':
                                    raise NameError(u"No se encontro url del documento")
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.fecha_qr = datetime.now()
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.url_qr = f"/media/{url_pdf_examen}"
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.codigo_qr = codigo_qr_examen
                                genero_qr = True
                            except Exception as ex:
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.fecha_qr = None
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.url_qr = None
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.codigo_qr = None
                                genero_qr = False
                eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                if aceptotermino:
                    ePersona = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.matricula.inscripcion.persona
                    ePerfilUsuario = ePersona.perfilusuario_set.filter(status=True,
                                                                       inscripcion=eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.matricula.inscripcion).first()
                    fecha = eFechaPlanificacionSedeVirtualExamen.fecha
                    horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                    fecha_visible = datetime.combine(fecha, horainicio)
                    titulo = 'Actualización de horario de examen'
                    cuerpo = f'La asignatura {eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia.asignatura.nombre} se cambio de ubicación'
                    url = f"https://sgaestudiante.unemi.edu.ec/alu_documentos/examenes"
                    if genero_qr:
                        url = f"https://sga.unemi.edu.ec/media/{url_pdf_examen}"
                    eNotificacion = Notificacion(titulo=titulo,
                                                 cuerpo=cuerpo,
                                                 app_label='SIE',
                                                 destinatario=eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.matricula.inscripcion.persona,
                                                 perfil=ePerfilUsuario,
                                                 leido=False,
                                                 visible=True,
                                                 url=url,
                                                 fecha_hora_visible=fecha_visible)
                    eNotificacion.save()
                print(f"Se notifica a {eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.__str__()}")


def habilitar_examen_admision():
    eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(periodo_id=177,
                                                                                                fecha=datetime(
                                                                                                    2023, 7, 25, 0,
                                                                                                    0).date(), sede_id=10).order_by(
        'sede', 'fecha')
    for eFechaPlanificacionSedeVirtualExamen in eFechaPlanificacionSedeVirtualExamenes:
        fecha = eFechaPlanificacionSedeVirtualExamen.fecha
        eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
            fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio__gte=datetime(2023, 7, 25, 13, 0).time(), horafin__lte=datetime(2023, 7, 25, 14, 14).time()).order_by('horainicio')
        for eTurnoPlanificacionSedeVirtualExamen in eTurnoPlanificacionSedeVirtualExamenes:
            eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
                turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen)
            for eAulaPlanificacionSedeVirtualExamenid in eAulaPlanificacionSedeVirtualExamenes:
                horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                horafin = eTurnoPlanificacionSedeVirtualExamen.horafin
                # fecha = form.cleaned_data['fecha']
                # horainicio = form.cleaned_data['horainicio']
                # horafin = form.cleaned_data['horafin']
                # password = form.cleaned_data['password']
                fechadesde = datetime(fecha.year, fecha.month, fecha.day, horainicio.hour, horainicio.minute,
                                      horainicio.second)
                fechadesde = int(time.mktime(fechadesde.timetuple()))
                fechahasta = datetime(fecha.year, fecha.month, fecha.day, horafin.hour, horafin.minute, horafin.second)
                fechahasta = int(time.mktime(fechahasta.timetuple()))
                eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen.objects.get(pk=eAulaPlanificacionSedeVirtualExamenid.pk)
                eAulaPlanificacionSedeVirtualExamen.registrohabilitacion = datetime.now()
                eAulaPlanificacionSedeVirtualExamen.save()
                eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(aulaplanificacion=eAulaPlanificacionSedeVirtualExamen, aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo_id=177, status=True)
                for eMateriaAsignadaPlanificacionSedeVirtualExamen in eMateriaAsignadaPlanificacionSedeVirtualExamenes:
                    with transaction.atomic():
                        try:
                            eMateriaAsignada = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada
                            username = eMateriaAsignada.matricula.inscripcion.persona.usuario.username
                            password = eMateriaAsignadaPlanificacionSedeVirtualExamen.password
                            if not eMateriaAsignadaPlanificacionSedeVirtualExamen.password or password == '' or password == None:
                                eMateriaAsignadaPlanificacionSedeVirtualExamen.create_update_password()
                                password = eMateriaAsignadaPlanificacionSedeVirtualExamen.password
                            examenplanificado = eMateriaAsignada.materia.examenplanificadosilabo(eMateriaAsignadaPlanificacionSedeVirtualExamen.detallemodeloevaluativo)
                            if examenplanificado:
                                try:
                                    if eMateriaAsignada.materia.coordinacion().id == 9:
                                        conexion = connections['db_moodle_virtual']
                                        cursor = conexion.cursor()
                                    else:
                                        conexion = connections['moodle_db']
                                        cursor = conexion.cursor()
                                    sql = """UPDATE mooc_user SET timelimit=60 WHERE id=%s""" % examenplanificado.get("idtestmoodle")
                                    cursor.execute(sql)

                                except Exception as ex:
                                    pass
                                quiz = buscarQuiz(examenplanificado.get("idtestmoodle"), eMateriaAsignada.materia.coordinacion().id)
                                limite = int(quiz[3])
                                try:
                                    intentos = int(quiz[4])
                                    if intentos == 0:
                                        intentos = examenplanificado.get('vecesintento')
                                        if intentos is None or intentos == 0:
                                            intentos = 1
                                except Exception as exIn:
                                    intentos = 1
                                intentos = 2
                                estado_examen = estadoQuizIndividual(username, eMateriaAsignada.materia,
                                                                     examenplanificado.get("idtestmoodle"))
                                if estado_examen != 'inprogress':
                                    eMateriaAsignadaPlanificacionSedeVirtualExamen.idtestmoodle = int(
                                        examenplanificado.get("idtestmoodle"))
                                    eMateriaAsignadaPlanificacionSedeVirtualExamen.password = password
                                    eMateriaAsignada = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada
                                    isResult, msgError = accesoQuizIndividual(
                                        eMateriaAsignada.matricula.inscripcion.persona.usuario.username,
                                        eMateriaAsignada.materia,
                                        eMateriaAsignadaPlanificacionSedeVirtualExamen.idtestmoodle,
                                        {'timeopen': fechadesde,
                                         'timeclose': fechahasta,
                                         'timelimit': limite,
                                         'password': password,
                                         'attempts': intentos})
                                    if isResult:
                                        eMateriaAsignadaPlanificacionSedeVirtualExamen.habilitadoexamen = True
                                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                                    print('ALUMNO ASIGNADO {}'.format(
                                        eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada))
                            else:
                                print('***************************************************')
                                print('***************************************************')
                                print('***************************************************')
                                print('***************************************************')
                                print('MATERIA NO PLANFICADA')
                                print(eMateriaAsignada.materia)
                                print('***************************************************')
                                print('***************************************************')
                                print('***************************************************')
                                print('***************************************************')
                        except Exception as ex:
                            transaction.set_rollback(True)
                            print(ex)


def importar_notas_moodle_admision(ePeriodo):
    print(f"INICIO")
    errors = []
    filtro = Q(status=True, nivel__periodo=ePeriodo, idcursomoodle__gt=0, asignaturamalla__malla__carrera__coordinacion__id=9, materiaasignada__status=True, cerrado=False)
    eCarreras = Carrera.objects.filter(id__in=Materia.objects.filter(filtro).distinct().values_list('asignaturamalla__malla__carrera__id', flat=True), status=True)
    total_carrera = len(eCarreras.values("id"))
    contador_carrera = 0
    for eCarrera in eCarreras:
        contador_carrera += 1
        print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()}")
        filtro_1 = filtro & Q(asignaturamalla__malla__carrera=eCarrera)
        eMaterias = Materia.objects.filter(filtro_1).distinct().order_by('paralelomateria', 'asignatura', '-cerrado')
        total_materia = len(eMaterias.values("id"))
        contador_materia = 0
        for eMateria in eMaterias:
            contador_materia += 1
            print(f"({total_materia}/{contador_materia}) Materia: {eMateria.__str__()}")
            eMateriAsignadas = eMateria.asignados_a_esta_materia_moodle().filter(retiramateria=False, matricula__bloqueomatricula=False)
            total_alumno = len(eMateriAsignadas.values("id"))
            contador_alumno = 0
            for eMateriAsignada in eMateriAsignadas:
                contador_alumno += 1
                print(f"({total_carrera}/{contador_carrera}) Carrera - ({total_materia}/{contador_materia}) Materia - Alumno ({total_alumno}/{contador_alumno})")
                with transaction.atomic():
                    try:
                        if eMateria.notas_de_moodle(eMateriAsignada.matricula.inscripcion.persona):
                            for notasmooc in eMateria.notas_de_moodle(eMateriAsignada.matricula.inscripcion.persona):
                                campo = eMateriAsignada.campo(notasmooc[1].upper())
                                # if not alumno.matricula.bloqueomatricula:
                                if type(notasmooc[0]) is Decimal:
                                    if null_to_decimal(campo.valor) != float(notasmooc[0]) or (eMateriAsignada.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                        actualizar_nota_planificacion(eMateriAsignada.id, notasmooc[1].upper(), notasmooc[0])
                                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                                        manual=False,
                                                                        calificacion=notasmooc[0])
                                        auditorianotas.save()
                                else:
                                    if null_to_decimal(campo.valor) != float(0) or (eMateriAsignada.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                        actualizar_nota_planificacion(eMateriAsignada.id, notasmooc[1].upper(), notasmooc[0])
                                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                                        manual=False,
                                                                        calificacion=0)
                                        auditorianotas.save()
                        else:
                            for detallemodelo in eMateria.modeloevaluativo.detallemodeloevaluativo_set.filter(migrarmoodle=True):
                                campo = eMateriAsignada.campo(detallemodelo.nombre)
                                actualizar_nota_planificacion(eMateriAsignada.id, detallemodelo.nombre, 0)
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                                manual=False,
                                                                calificacion=0)
                                auditorianotas.save()
                        print(f"Migrado --> {eMateriAsignada.__str__()}")
                    except Exception as ex:
                        transaction.set_rollback(True)
                        print(f"Error al migrar --> {eMateriAsignada.__str__()} - ERROR: {ex.__str__()}")
                        errors.append(eMateriAsignada.pk)

    if len(errors) > 0:
        print(errors)
    print(f"FIN")


def importar_notas_moodle_admision_v1(ePeriodo):
    print(f"INICIO")
    eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(materiaasignada__status=True, aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha='2023-07-31')
    # eMateriaAsignadas = MateriaAsignada.objects.filter(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list('materiaasignada__id', flat=True))
    errors = []
    filtro = Q(status=True, nivel__periodo=ePeriodo, idcursomoodle__gt=0, asignaturamalla__malla__carrera__coordinacion__id=9, materiaasignada__status=True, cerrado=False, materiaasignada__id__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list('materiaasignada__id', flat=True))
    eCarreras = Carrera.objects.filter(id__in=Materia.objects.filter(filtro).distinct().values_list('asignaturamalla__malla__carrera__id', flat=True), status=True)
    total_carrera = len(eCarreras.values("id"))
    contador_carrera = 0
    for eCarrera in eCarreras:
        contador_carrera += 1
        print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()}")
        filtro_1 = filtro & Q(asignaturamalla__malla__carrera=eCarrera)
        eMaterias = Materia.objects.filter(filtro_1).distinct().order_by('paralelomateria', 'asignatura', '-cerrado')
        total_materia = len(eMaterias.values("id"))
        contador_materia = 0
        for eMateria in eMaterias:
            contador_materia += 1
            print(f"({total_materia}/{contador_materia}) Materia: {eMateria.__str__()}")
            eMateriAsignadas = eMateria.asignados_a_esta_materia_moodle().filter(retiramateria=False, matricula__bloqueomatricula=False)
            total_alumno = len(eMateriAsignadas.values("id"))
            contador_alumno = 0
            for eMateriAsignada in eMateriAsignadas:
                contador_alumno += 1
                print(f"({total_carrera}/{contador_carrera}) Carrera - ({total_materia}/{contador_materia}) Materia - Alumno ({total_alumno}/{contador_alumno})")
                with transaction.atomic():
                    try:
                        if eMateria.notas_de_moodle(eMateriAsignada.matricula.inscripcion.persona):
                            for notasmooc in eMateria.notas_de_moodle(eMateriAsignada.matricula.inscripcion.persona):
                                campo = eMateriAsignada.campo(notasmooc[1].upper())
                                # if not alumno.matricula.bloqueomatricula:
                                if type(notasmooc[0]) is Decimal:
                                    if null_to_decimal(campo.valor) != float(notasmooc[0]) or (eMateriAsignada.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                        actualizar_nota_planificacion(eMateriAsignada.id, notasmooc[1].upper(), notasmooc[0])
                                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                                        manual=False,
                                                                        calificacion=notasmooc[0])
                                        auditorianotas.save()
                                else:
                                    if null_to_decimal(campo.valor) != float(0) or (eMateriAsignada.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                        actualizar_nota_planificacion(eMateriAsignada.id, notasmooc[1].upper(), notasmooc[0])
                                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                                        manual=False,
                                                                        calificacion=0)
                                        auditorianotas.save()
                        else:
                            for detallemodelo in eMateria.modeloevaluativo.detallemodeloevaluativo_set.filter(migrarmoodle=True):
                                campo = eMateriAsignada.campo(detallemodelo.nombre)
                                actualizar_nota_planificacion(eMateriAsignada.id, detallemodelo.nombre, 0)
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                                manual=False,
                                                                calificacion=0)
                                auditorianotas.save()
                        print(f"Migrado --> {eMateriAsignada.__str__()}")
                    except Exception as ex:
                        transaction.set_rollback(True)
                        print(f"Error al migrar --> {eMateriAsignada.__str__()} - ERROR: {ex.__str__()}")
                        errors.append(eMateriAsignada.pk)

    if len(errors) > 0:
        print(errors)
    print(f"FIN")


def actualizar_calificacion(eMateriaAsignada):
    puntosfalta = 70 - float(eMateriaAsignada.notafinal)
    for eEvaluacionGenerica in eMateriaAsignada.evaluaciongenerica_set.filter(status=True).order_by('id'):
        notacampo = 0
        difecampo = 0
        # puntosfalta = 70 - float(materiaasignada.notafinal)
        if eEvaluacionGenerica.valor < eEvaluacionGenerica.detallemodeloevaluativo.notamaxima and puntosfalta > 0:
            difecampo = eEvaluacionGenerica.detallemodeloevaluativo.notamaxima - eEvaluacionGenerica.valor
            if difecampo > puntosfalta:
                notacampo = puntosfalta + eEvaluacionGenerica.valor

            else:
                notacampo = float(difecampo + eEvaluacionGenerica.valor)
            puntosfalta = float(puntosfalta - difecampo)

            actualizar_nota_planificacion(eMateriaAsignada.id, eEvaluacionGenerica.detallemodeloevaluativo.nombre, notacampo)
            auditorianotas = AuditoriaNotas(evaluaciongenerica=eEvaluacionGenerica,
                                            manual=False,
                                            calificacion=notacampo,
                                            observacion=u"SE PROCEDE A COMPLETAR NOTA AUTOMÁTICAMENTE POR DISPOSICIÓN DE LA AUTORIDAD %s" % datetime.now())
            auditorianotas.save()
    print("Nota actualizada: %s" % eMateriaAsignada)


def arreglar_notas_admision(ePeriodo):
    print(f"INICIO")
    errors = []
    eCoordinacion = Coordinacion.objects.get(id=9)
    filtro = Q(status=True, nivel__periodo=ePeriodo, inscripcion__carrera__coordinacion=eCoordinacion, cerrada=False, aprobado=False)
    eMatriculas = Matricula.objects.filter(filtro).exclude(inscripcion__carrera__id=223).distinct()
    eCarreras = Carrera.objects.filter(id__in=eMatriculas.values_list('inscripcion__carrera__id', flat=True), status=True).distinct().order_by('modalidad')
    if DEBUG:
        eCarreras = eCarreras.filter(pk=103)
    # eCarreras = eCarreras.filter(modalidad__in=[1,2])
    total_carrera = len(eCarreras.values("id"))
    contador_carrera = 0
    for eCarrera in eCarreras:
        contador_carrera += 1
        print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()}")
        total_matriculas = eMatriculas.values("id").filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).distinct().count()
        contador_matricula = 0
        for eMatricula in eMatriculas.filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).annotate(promedio_notafinal=Avg('materiaasignada__notafinal')).order_by('promedio_notafinal').distinct():
            contador_matricula += 1
            eMateriaAsignadas = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False).distinct()
            if MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(materiaasignada__in=eMateriaAsignadas, asistencia=True).exists():
                with transaction.atomic():
                    try:
                        total_aprobadas = eMateriaAsignadas.values("id").filter(notafinal__gte=70).count()
                        eMateriaAsignadas.filter(notafinal__gte=70).update(estado_id=NOTA_ESTADO_APROBADO)
                        total_tomadas = eMateriaAsignadas.values("id").count()
                        bandera = False
                        total_pasoayuda = 0
                        if total_aprobadas > 0 and total_aprobadas < total_tomadas:
                            for eMateriaAsignada in eMateriaAsignadas.filter(notafinal__lt=70):
                                actualizar_calificacion(eMateriaAsignada)
                                bandera = True
                                total_pasoayuda += 1
                        else:
                            contador = 0
                            total_faltante = eMateriaAsignadas.values("id").filter(notafinal__lt=70).count()
                            for eMateriaAsignada in eMateriaAsignadas.filter(notafinal__lt=70):
                                if eMateriaAsignada.notafinal < 70 and eMateriaAsignada.notafinal >= 10:
                                    contador += 1
                            if contador == total_faltante:
                                for eMateriaAsignada in eMateriaAsignadas.filter(notafinal__lt=70):
                                    actualizar_calificacion(eMateriaAsignada)
                                    bandera = True
                                    total_pasoayuda += 1
                        if bandera:
                            if (total_pasoayuda + total_aprobadas) == total_tomadas:
                                eMatricula.pasoayuda = True
                        cantidadmaterias = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False).count()
                        cantidadaprobadas = eMatricula.materiaasignada_set.filter(notafinal__gte=70, status=True, retiramateria=False).count()
                        if cantidadmaterias == cantidadaprobadas and cantidadmaterias > 0 and cantidadaprobadas > 0:
                            eMatricula.aprobado = True
                        eMatricula.save()
                        print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()} --> ({total_matriculas}/{contador_matricula}) - {eMatricula.__str__()}")
                    except Exception as ex:
                        print('error: %s' % ex)
                        transaction.set_rollback(True)
                        errors.append(eMatricula.pk)

    conta = 0
    totalaprobados = 0
    filtro = Q(status=True, nivel__periodo=ePeriodo, inscripcion__carrera__coordinacion=eCoordinacion, cerrada=False)
    eMatriculas = Matricula.objects.filter(filtro).exclude(inscripcion__carrera__id=223).distinct()
    eCarreras = Carrera.objects.filter(id__in=eMatriculas.values_list('inscripcion__carrera__id', flat=True), status=True).distinct().order_by('modalidad')
    if DEBUG:
        eCarreras = eCarreras.filter(pk=103)
    # eCarreras = eCarreras.filter(modalidad__in=[1, 2])
    total_carrera = len(eCarreras.values("id"))
    contador_carrera = 0
    for eCarrera in eCarreras:
        contador_carrera += 1
        print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()}")
        total_matriculas = eMatriculas.values("id").filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).distinct().count()
        contador_matricula = 0
        eMatriculas.filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).distinct().update(aprobado=False)
        for eMatricula in eMatriculas.filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).distinct():
            contador_matricula += 1
            with transaction.atomic():
                try:
                    cantidadmaterias = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False).count()
                    cantidadaprobadas = eMatricula.materiaasignada_set.filter(notafinal__gte=70, status=True, retiramateria=False).count()
                    # print("%s %s"% (cantidadaprobadas, cantidadmaterias))
                    if cantidadmaterias == cantidadaprobadas and cantidadmaterias > 0 and cantidadaprobadas > 0:
                        conta += 1
                        totalaprobados += 1
                        print("************************************************************# %s: Aprobadas=%s Total=%s" % (conta, cantidadaprobadas, cantidadmaterias))
                        eMatricula.aprobado = True
                        eMatricula.save()
                    print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()} --> ({total_matriculas}/{contador_matricula}) - {eMatricula.__str__()}")
                except Exception as ex:
                    print('error: %s' % ex)
                    transaction.set_rollback(True)
    print("Total de aprobados %s" % totalaprobados)

    if len(errors) > 0:
        print(errors)
    print(f"FIN")


def revertir_notas_admision(ePeriodo):
    cedulas = [
        '0919666321',
        '0942726381',
        '1203493513',
        '0302716162',
        '0954016846',
        '0922358221',
        '1208030039',
        '0803697283',
        '0953493434',
        '0803372853',
        '0942432527',
        '0925869836',
        '1251375521',
        '0958704744',
        '0940121072',
        '0606276145',
        '1727238790',
        '0931123731',
        '1250625165',
        '0928150523',
        '0927171892',
        '0929461507',
        '0923645394',
        '0940702368',
        '1207254069',
        '0958082968',
        '0929684397',
        '0850923434',
        '0943605519',
        '0940358922',
        '0803593821',
        '0943302604',
        '0952014447',
        '0929801835',
        '1208347581',
        '1207687417',
        '0958824302',
        '0930037221',
        '0950907550',
        '0953539889',
        '1805542774',
        '0957921950',
        '0932086341',
        '0922389697',
        '0707058939',
        '0941366106',
        '0955634480',
        '0950943993',
        '0958305427',
        '0929081479',
        '0942986738',
        '0928257450',
        '0951593995',
        '0917942484',
        '0920824901',
        '0953447158',
        '0954671533',
        '0953299773',
        '0916221872',
        '0958718231',
        '0958142762',
        '0915555791',
        '0802968230',
        '0940196710',
        '0954440459',
        '1207381326',
        '0958646135',
        '1208423846',
        '0929145654',
        '0956755888',
        '0940545064',
        '0958940942',
        '1729904803',
        '2400124430',
        '1206954339',
        '0955819081',
        '0929129849',
        '0954586707',
        '0940504574',
        '0928712074',
        '0950379396',
        '0926186628',
        '0920143674',
        '0921187605',
        '0704587047',
        '0705460715',
        '0943447052',
        '0923065627',
        '0941240376',
        '0953505641',
        '0956200513',
        '1207956838',
        '0956414080',
        '0940991607',
        '0957192586',
        '0959481201',
        '1729754018',
        '0956129506',
        '1310144249',
        '0941649881',
        '1207458090',
        '0928954411',
        '0950371187',
        '1208116184',
        '0802063032',
        '1206784322',
        '0928912534',
        '0942479957',
        '0953411576',
        '0802644419',
        '1205573619',
        '0954765673',
        '0929612836',
        '1207412766',
        '0202342630',
        '1250085873',
        '0802387738',
        '0955792858',
        '1207057330',
        '0959030644',
        '0943000091',
        '1207012715',
        '1205095860',
        '1204736431',
        '0925954653',
        '0950235226',
        '0950110254',
        '0952466894',
        '0804190635',
        '0941896276',
        '0955613930',
        '0956845317',
        '0957262637',
        '0956721369',
        '0951641505',
        '0958298226',
        '0958146896',
        '1203600513',
        '1207128529',
        '1207419241',
        '0930958608',
        '0956644462',
        '0940918980',
        '0951886647',
        '0955309455',
        '1205268673',
        '0925377558',
        '0940677867',
        '0931317804',
        '0932031487',
        '0954021960',
        '0953743010',
        '2350290975',
        '0943929729',
        '0959366618',
        '0915975544',
        '0951899368',
        '0928858117',
        '0958770000',
        '1311100497',
        '0927451690',
        '1250801527',
        '0940147333',
        '0942697491',
        '0941443053',
        '1206129130',
        '0952492726',
        '0928204205',
        '0952017960',
        '0953346954',
        '0942236332',
        '0916894496',
        '0918999467',
        '0802393447',
        '0956446306',
        '0914916549',
        '1205931577',
        '0957372857',
        '0952583375',
        '0952719938',
        '0950075457',
        '0957099377',
        '0919868059',
        '1207040237',
        '0602984569',
        '0951123835',
        '1250879523',
        '0928332873',
        '2400113318',
        '1207594993',
        '1206092221',
        '1207740257',
        '0803539212',
        '0958378986',
        '1311132821',
        '0956828719',
        '0924284896',
        '0940208044',
        '0803674571',
        '0940024581',
        '0918786674',
        '1206955625',
        '0925138208',
        '0958685315',
        '0956293849',
        '0951903459',
        '0943519850',
        '0923742191',
        '0943602672',
        '0941432684',
        '0942396516',
        '0940718612',
        '0953886629',
        '0944362581',
        '0602991754',
        '1401264591',
        '0922501978',
        '0926660325',
        '1207786136',
        '0954795894',
        '0928069723',
        '1207842368',
        '0953178407',
        '0926589615',
        '0956495196',
        '0959385253',
        '0924794506',
        '0927852574',
        '0928301589',
        '1722395827',
        '0930542865',
        '1208936300',
        '0940383821',
        '0942247677',
        '1205600438',
        '0924898174',
        '2351143967',
        '1205599309',
        '0919359273',
        '0941897837',
        '2400300931',
        '1204082778',
        '0940635220',
        '1207919083',
        '0958438780',
        '0931105670',
        '0919042135',
        '0923337356',
        '0953170495',
        '0951772953',
        '0953897865',
        '0957740475',
        '0953632155',
        '0928440908',
        '0942259763',
        '1250551205',
        '1203803836',
        '1208186815',
        '0931964241',
        '1207071448',
        '0955539481',
        '0943479220',
        '0953183258',
        '0942319039',
        '1250252358',
        '1250214390',
        '1206859595',
        '0942366626',
        '0929425643',
        '0952373090',
        '0919418509',
        '0601664873',
        '1206495648',
        '1713956678',
        '0941421414',
        '0943752451',
        '0954539557',
        '0926405150',
        '0926999442',
        '1250843594',
        '0951303965',
        '0942453267',
        '0942451303',
        '0915952204',
        '0941129306',
        '0941188252',
        '0957608334',
        '0955328034',
        '0940092869',
        '0951730993',
        '0956438147',
        '0954708723',
        '0951628692',
        '1310008865',
        '1206856732',
        '0958292526',
        '0953621034',
        '1207994615',
        '0952552503',
        '0921891958',
        '0952834331',
        '1207054089',
        '1204523060',
        '0951702729',
        '0930320304',
        '1203090921',
        '0954371829',
        '0940793961',
        '0941615395',
        '1208074045',
        '0943993683',
        '0951886019',
        '0919722439',
        '1207888403',
        '0922716535',
        '0942364431',
        '0926277203',
        '0931764559',
        '0802237834',
        '0956157309',
        '0914898069',
        '0956938476',
        '0952594877',
        '0954568093',
        '0926911371',
        '1205067976',
        '1207098672',
        '0941050528',
        '1251055958',
        '0955648407',
        '0944172394',
        '0952503886',
        '0953094133',
        '0927894519',
        '0950142745',
        '0942960675',
        '0958456618',
        '0503680472',
        '0941642787',
        '0924134968',
        '0956998504',
        '0929005379',
        '0941107963',
        '0942468364',
        '1204509366',
        '0958204026',
        '0955680947',
        '0929123297',
        '0951818566',
        '0952086718',
        '0959225459',
        '0952828838',
        '0957540974',
        '0932015381',
        '0955475991',
        '0943866871',
        '0955284203',
        '0950712471',
        '1250277579',
        '1208752855',
        '0930031828',
        '0940720741',
        '0930325451',
        '1208454403',
        '0951894971',
        '0943730606',
        '0943914812',
        '0957900517',
        '0940990070',
        '0956279426',
        '0929776466',
        '0928370642',
        '0959256553',
        '0940597818',
        '0921738266',
        '1724159296',
        '0957408057',
        '0952160752',
        '0957496698',
        '0931449250',
        '0950469957',
        '0955367404',
        '0941958290',
        '1205737040',
        '0922570544',
        '0950661793',
        '0958522328',
        '0926011560',
        '0951850601',
        '0931665848',
        '0950528141',
        '0930632807',
        '1205516170',
        '0953068376',
        '1250816251',
        '0958256604',
        '0954045779',
        '0919072553',
        '0952000628',
        '0955816103',
        '0958092710',
        '0929953784',
        '0959422445',
        '0955033915',
        '0954082384',
        '0943874487',
        '0950389833',
        '0202436465',
        '0926696675',
        '0941410797',
        '1250255898',
        '0927458943',
        '0955023148',
        '0850508037',
        '1207715366',
        '1251108674',
        '0957551757',
        '0940561301',
        '0950728865',
        '1207545789',
        '0959085895',
        '0956351928',
        '0805301926',
        '0932558489',
        '0802630343',
        '0922132154',
        '0920076346',
        '0925611675',
        '1205518796',
        '1207299783',
        '1203448467',
        '0928205277',
        '0952409449',
        '0943686352',
        '1251354328',
        '0944010743',
        '0951914332',
        '0951390442',
        '0954723680',
        '0803416379',
        '1207150101',
        '0953646015',
        '0950427286',
        '1206812867',
        '0940175813',
        '0925247173',
        '0957322357',
        '0804622314',
        '1803560901',
        '0941201626',
        '0923185466',
        '0958569576',
        '0917488355',
        '0955396973',
        '0931903579',
        '1208406387',
        '0926640442',
        '1205664400',
        '0928845502',
        '0850038944',
        '1206817734',
        '0955328752',
        '0957061849',
        '0952146934',
        '0954586749',
        '0927643528',
        '0941577694',
        '0940714934',
        '0951540665',
        '1208587863',
        '1753348562',
        '0930338454',
        '0958468894',
        '0927600924',
        '0930706973',
        '0943518571',
        '0957729825',
        '0957994023',
        '0953314705',
        '0958772451',
        '0929977536',
        '0953441938',
        '0928173723',
        '0929911469',
        '1205417320',
        '0924746332',
        '0940251218',
        '0954061263',
        '0957888332',
        '1205084021',
        '0950691063',
        '1250900162',
        '0954841508',
        '0957829245',
        '1205703448',
        '0954390860',
        '0604669440',
        '1250605407',
        '0951809615',
        '0924576044',
        '0943160275',
        '0956381321',
        '0940473010',
        '0940875123',
        '0941652760',
        '0954653044',
        '0942344532',
        '0930276209',
        '0957605108',
        '0953450319',
        '1317958690',
        '0952270254',
        '1204265209',
        '0951920792',
        '0928342203',
        '0955689005',
        '0951896141',
        '1204701252',
        '0959091380',
        '0951608033',
        '1250659636',
        '0923921365',
        '0930118864',
        '1208581197',
        '0940451248',
        '1207360841',
        '0804049252',
        '0956312839',
        '0943478628',
        '0950832758',
        '0957064868',
        '1207015296',
        '0958457418',
        '0944266782',
        '1250595947',
        '0950485813',
        '0922751029',
        '0925927097',
        '0803313220',
        '1208576692',
        '1724788227',
        '0955231428',
        '0922717533',
        '0943783753',
        '0943316224',
        '0956942403',
        '1206679696',
        '1720714706',
        '0605919166',
        '0923577928',
        '0930297882',
        '1207055953',
        '0954201646',
        '0953333408',
        '0940945967',
        '1317438396',
        '0803559301',
        '0943500892',
        '0850507906',
        '0942151416',
        '0944143650',
        '0202456018',
        '0955209531',
        '0930875042',
        '1206602367',
        '0927296855',
        '0929674299',
        '0952125276',
        '0959395856',
        '0105236228',
        '0942838897',
        '0953932654',
        '0950200097',
        '0944093012',
        '0929185650',
        '0805309861',
        '1250619119',
        '0803666809',
        '1250861141',
        '0952037273',
        '1207176460',
        '0930131644',
        '0804564748',
        '0942153362',
        '0924949514',
        '0912880143',
        '0921975694',
        '0924704398',
        '1207640077',
        '0959935909',
        '0929052686',
        '1203452451',
        '0952978880',
        '0943783639',
        '0803877067',
        '0954914115',
        '1850447200',
        '0952983765',
        '0804380087',
        '0927673897',
        '0804137636',
        '0954144457',
        '1205375023',
        '0705693372',
        '0953701091',
        '0952621936',
        '0920301520',
        '1803155553',
        '0943016287',
        '0941777021',
        '1311484495',
        '1205412909',
        '0931275952',
        '0927706283',
        '1206933655',
        '1250429535',
        '0958827644',
        '0929803484',
        '0958702730',
        '0705498400',
        '0924426513',
        '1251040760',
        '1208745222',
        '1207388933',
        '0931159537',
        '0959618299',
        '0951311885',
        '0957923345',
        '1207164839',
        '0920708856',
        '0922840350',
        '0923239628',
        '0921212494',
        '0953840840',
        '0930992524',
        '0923541627',
        '1205074667',
        '0940547185',
        '0951142249',
        '0928927565',
        '0943761700',
        '0940841067',
        '0963247721',
        '0957411085',
        '0955516620',
        '0931420947',
        '0803947316',
        '0957791098',
        '0927688374',
        '0940700750',
        '0926626607',
        '1206905224',
        '0951965912',
        '0928731439',
        '1205227539',
        '0928684083',
        '0951942382',
        '0925186009',
        '0940586449',
        '0942215906',
        '0705942415',
        '0802491183',
        '0950505172',
        '1203487499',
        '0927258954',
        '0956533988',
        '0942138447',
        '0932111917',
        '0956726814',
        '1250840020',
        '0802223800',
        '0930573126',
        '0926780297',
        '0605502970',
        '0956267827',
        '0925062226',
        '0941814774',
        '0919916296',
        '0941647968',
        '0850029612',
        '1207349885',
        '0921007977',
        '0932032535',
        '0940607716',
        '0802492553',
        '0958367641',
        '0932425556',
        '0942794561',
        '0958586745',
        '0950527036',
        '0956913750',
        '1208754331',
        '0940718240',
        '0926786963',
        '0957065394',
        '1206449272',
        '1206899674',
        '1205045543',
        '0922601752',
        '0953329117',
        '0930690565',
        '0940413602',
        '0954934311',
        '0958474140',
        '0921870192',
        '1206671727',
        '0953809571',
        '0955313515',
        '0957026362',
        '0957086267',
        '0923198105',
        '0950221812',
        '0955940069',
        '1208800910',
        '0957806920',
        '0928955145',
        '0955638945',
        '0926890658',
        '1208432540',
        '0927678276',
        '0928770056',
        '0941018459',
        '1250154208',
        '0956012793',
        '0850835075',
        '0959279563',
        '0942458191',
        '0930164611',
        '0928925650',
        '0923548044',
        '0803551340',
        '0958603078',
        '0928609551',
        '0913162798',
        '0924756703',
        '2400005159',
        '1204916843',
        '0930890579',
        '1207317221',
        '0957028079',
        '0924510530',
        '0918569666',
        '0928873256',
        '0921830121',
        '0921632824',
        '0940233224',
        '0943763169',
        '0926815622',
        '0956632764',
        '0943163378',
        '0941231862',
        '0923662878',
        '0952810596',
        '0951921642',
        '0803692524',
        '0942294257',
        '0941247843',
        '0940837750',
        '0926411885',
        '1308774882',
        '0955928932',
        '0926484668',
        '0926129438',
        '0926394743',
        '1206477034',
        '1208161727',
        '0918252941',
        '0955494034',
        '0928132620',
        '0953822269',
        '0954473989',
        '0951510973',
        '0954290128',
        '0951889617',
        '0850850124',
        '0955639299',
        '0942242553',
        '0932484454',
        '0941238438',
        '0943266189',
        '1315482602',
        '0959210709',
        '0957502339',
        '0952039022',
        '0944008598',
        '0950902783',
        '0952239341',
        '0956022131',
        '0950886408',
        '0954940797',
        '0920564127',
        '0929079622',
        '0952439933',
        '0923314926',
        '0941611915',
        '1207298736',
        '0941563785',
        '0928261684',
        '0953757341',
        '1207880681',
        '0930148614',
        '0931360465',
        '0940660426',
        '0955389846',
        '0606216174',
        '0804130839',
        '1206414011',
        '0919974576',
        '0922673777',
        '0957904337',
        '0952405926',
        '1206925560',
        '1205175985',
        '0941271363',
        '0921287728',
        '0958286791',
        '0954751467',
        '0940538143',
        '0942858127',
        '0958857559',
        '1206730747',
        '0940407752',
        '0943644005',
        '0606277614',
        '1206933788',
        '0803020510',
        '0940149255',
        '0928252634',
        '0958013641',
        '0930784384',
        '0953911922',
        '0923926927',
        '0941336950',
        '0954240420',
        '0924479223',
        '0503679268',
        '0952978864',
        '0923421150',
        '0950635649',
        '0921338794',
        '0943466557',
        '0952417103',
        '0944284702',
        '1723386726',
        '0952009637',
        '1206974709',
        '0958193401',
        '0950174664',
        '0940122971',
        '0805056363',
        '0927480426',
        '1208393080',
        '0942483835',
        '1725737652',
        '0921239109',
        '0924838741',
        '1207587070',
        '0931003669',
        '0803244441',
        '0916324379',
        '0923948178',
        '1206067611',
        '0923399893',
        '0929053650',
        '2300135270',
        '0951305820',
        '0603646282',
        '0928173533',
        '0951608207',
        '0927439448',
        '0920382116',
        '0927476085',
        '0921245502',
        '0957415060',
        '1251296479',
        '0929177020',
        '0955709340',
        '0921079653',
        '0929455483',
        '0942590076',
        '1207486539',
        '0928087881',
        '1207746692',
        '0930948096',
        '1205919952',
        '0953872488',
        '1207322874',
        '0953722378',
        '0958926347',
        '0951926393',
        '0958189912',
        '0953566478',
        '1250782248',
        '1251194591',
        '0942983818',
        '1206937029',
        '0953217825',
        '1204559726',
        '0929064244',
        '1205714809',
        '1205171224',
        '0931771729',
        '0952105310',
        '0931737878',
        '0951519768',
        '0940644412',
        '0923189476',
        '0958491672',
        '0957324403',
        '0952039931',
        '0928092931',
        '0927375402',
        '0959081340',
        '0921847828',
        '0951254036',
        '1208311348',
        '0925577215',
        '2350791329',
        '1206407221',
        '0952399210',
        '1205411299',
        '0803072941',
        '0606104867',
        '0922320007',
        '0954751483',
        '0959453119',
        '0957559966',
        '0805183225',
        '1313472670',
        '1310880230',
        '2300211220',
        '0850859901',
        '0917676520',
        '1950086460',
        '0705084028',
        '0958156424',
        '0850419664',
        '1207017755',
        '0923234942',
        '0925606584',
        '0941803173',
        '1726759986',
        '1205975731',
        '0940449648',
        '0803151471',
        '1207690890',
        '0951576982',
        '1250366752',
        '0941882581',
        '0850578683',
        '0957711484',
        '1250893250',
        '0931015093',
        '1250774278',
        '0954260485',
        '1207886027',
        '1204854176',
        '1207957075',
        '0941540619',
        '0930370770',
        '0954426458',
        '0943153874',
        '0940005176',
        '0929985133',
        '0924242738',
        '0923099808',
        '2150129522',
        '0926115213',
        '1207337708',
        '0928399401',
        '0958054363',
        '0922006572',
        '0954679239',
        '0928116532',
        '1206137281',
        '0955182209',
        '0925758518',
        '1206029389',
        '0930765011',
        '0926262130',
        '0955610381',
        '0929387082',
        '0952426310',
        '1208761666',
        '0922370978',
        '1723918544',
        '0803016856',
        '1206536458',
        '0927447326',
        '1207915248',
        '1206994608',
        '0917271165',
        '0941062960',
        '0603721168',
        '0927582791',
        '0951783398',
        '1205246463',
        '0940152523',
        '0926190802',
        '0705336162',
        '0950387035',
        '0927677518',
        '0952032035',
        '0957317969',
        '0941898041',
        '0301905253',
        '0951803915',
        '0959394990',
        '0916610645',
        '0930472097',
        '0931341960',
        '0911019230',
        '0958661399',
        '0927217836',
        '1250176318',
        '0921781449',
        '0951838119',
        '0925334864',
        '0929487650',
        '0922181870',
        '0953742715',
        '0953368065',
        '1204283178',
        '0706568375',
        '0955693601',
        '1208389195',
        '1206342535',
        '0958975237',
        '1310398399',
        '1207136043',
        '0951840594',
        '0927666966',
        '0956955686',
        '1207866201',
        '0955325501',
        '1206587972',
        '0941859563',
        '0928300607',
        '1207425008',
        '0943038778',
        '0924503337',
        '0957351208',
        '0955548599',
        '1208564326',
        '0927524165',
        '0940045750',
        '0928832849',
        '0928331370',
        '0922499389',
        '1207010511',
        '0929990570',
        '0940429582',
        '0951319292',
        '0802731844',
        '0927348235',
        '0503582157',
        '0923537559',
        '1206663187',
        '0951901255',
        '0927337907',
        '1206866905',
        '1251208011',
        '0954969697',
        '0925194482',
        '0929745529',
        '0959209834',
        '0951616358',
        '0927354027',
        '0957550973',
        '0951313097',
        '0956129431',
        '0943884478',
        '0957180904',
        '0929052678',
        '0503670978',
        '0953573474',
        '0928883958',
        '0927671784',
        '0919975110',
        '1205697582',
        '0954257895',
        '1206813089',
        '1726987025',
        '0940558620',
        '0942901984',
        '0952111961',
        '0944176262',
        '0943368050',
        '1250106497',
        '0925207680',
        '0940111891',
        '0944176437',
        '0850076886',
        '0929190734',
        '1250592639',
        '2450468208',
        '0941689721',
        '0929378222',
        '0921759924',
        '0805261443',
        '0956840417',
        '1316334224',
        '0957329618',
        '1205838103',
        '0958000135',
        '0944300649',
        '0953964707',
        '0959000779',
        '0927855593',
        '0940228190',
        '0959306606',
        '0954097440',
        '0951837566',
        '0932526510',
        '0927337444',
        '1208645877',
        '0944297050',
        '0930170030',
        '0951675289',
        '0929715803',
        '0804558328',
        '0941358053',
        '1207540228',
        '0851323600',
        '0921060984',
        '1207373430',
        '0958510000',
        '0941575052',
        '1311377046',
        '0923959548',
        '0953404621',
        '0957405061',
        '0850901547',
        '1723135388',
        '0921999041',
        '0932596653',
        '0803309897',
        '0916203714',
        '0926100546',
        '1205891276',
        '0931310874',
        '0942691122',
        '1601077611',
        '1250287032',
        '0956533277',
        '0957570393',
        '0932478571',
        '0954206967',
        '1750168435',
        '0952537488',
        '0923187660',
        '0943728873',
        '1207269711',
        '0930117643',
        '0943958538',
        '1208186054',
        '0704140474',
        '1207174143',
        '1208531143',
        '1313666321',
        '1250780010',
        '0932638166',
        '1307773216',
        '0912891140',
        '0929574549',
        '0951953769',
        '0955899547',
        '0951993922',
        '0941149346',
        '0925519134',
        '0921659306',
        '0926381914',
        '0705498491',
        '0958903353',
        '0803403120',
        '0803406388',
        '0955512462',
        '0957090830',
        '0941738080',
        '0931102388',
        '0950842799',
        '0955246145',
        '0941689994',
        '0928418219',
        '1723509319',
        '0953507977',
        '0925193484',
        '0944321454',
        '0952736213',
        '0943175869',
        '0927677237',
        '0850430448',
        '0923301949',
        '0943126409',
        '0954654869',
        '0929522605',
        '0943150904',
        '0952416329',
        '0930425012',
        '0918195835',
        '0943319897',
        '0944169051',
        '0931066849',
        '1722093679',
        '0929892289',
        '0803304815',
        '0957635295',
        '1207223262',
        '0926858176',
        '0956169775',
        '0955276886',
        '0951982966',
        '0955691563',
        '0940098262',
        '0928957133',
        '0925672198',
        '2300613789',
        '0950228361',
        '0929812576',
        '0928777242',
        '1727289561',
        '0930574066',
        '0605045301',
        '0942262635',
        '0804591410',
        '0943999250',
        '0926496449',
        '0921780847',
        '0956881270',
        '1208597185',
        '0957084353',
        '1205962788',
        '0959401027',
        '0954983920',
        '0951810423',
        '1718105651',
        '0921751483',
        '0916226095',
        '1208617090',
        '1207562545',
        '0929475135',
        '0926584657',
        '1207006311',
        '0941221145',
        '0928096965',
        '0927097030',
        '0930613765',
        '0922025267',
        '0929458107',
        '0929300879',
        '0804323756',
        '0850852500',
        '0943794370',
        '0944022185',
        '1206481754',
        '0951779685',
        '0805101524',
        '0944265883',
        '0944081272',
        '0919982223',
        '0943363291',
        '0932321201',
        '0951517184',
        '0929173995',
        '0927415208',
        '0803835255',
        '0943034603',
        '1251245088',
        '0929198703',
        '0958619926',
        '1208122547',
        '0953032232',
        '0942653429',
        '0958795387',
        '0943618264',
        '0922008388',
        '0921708350',
        '1722395207',
        '0954254207',
        '0941227308',
        '0954815262',
        '0803663541',
        '0941721359',
        '1204920845',
        '0958277519',
        '0958560856',
        '0959340084',
        '0951636281',
        '0956649859',
        '0951823756',
        '0943784397',
        '0952085637',
        '0940858897',
        '0929912541',
        '0959080128',
        '1207791888',
        '1204510877',
        '0942443490',
        '0923152938',
        '0922898432',
        '0916329477',
        '0940376445',
        '0929709533',
        '0931314819',
        '0924091291',
        '1316463098',
        '0943783068',
        '1315692135',
        '0952571347',
        '0955457544',
        '0942776113',
        '0958289902',
        '0940157407',
        '0922974183',
        '0924416506',
        '1208591519',
        '1723432975',
        '0951513951',
        '0956245542',
        '0952902773',
        '0923157382',
        '0940686504',
        '0942028028',
        '0940036601',
        '0927444034',
        '0944264365',
        '0942192881',
        '0804026821',
        '0957046758',
        '0940404833',
        '0958762833',
        '0923503759',
        '0951481498',
        '0927327585',
        '0943731307',
        '0924915861',
        '0956295034',
        '0954157285',
        '1207415702',
        '0944262591',
        '1208038297',
        '0943264002',
        '0802891515',
        '1204649295',
        '0957872732',
        '1103124606',
        '0956846851',
        '0956699433',
        '0941333536',
        '2450656380',
        '0950950204',
        '0950670059',
        '0926216938',
        '1251070148',
        '1207145523',
        '0926977695',
        '0804109254',
        '1207616440',
        '0928468891',
        '1206006510',
        '0958949471',
        '0927315713',
        '0941388571',
        '0925704504',
        '2450694449',
        '0950557249',
        '0940750128',
        '0940406358',
        '0932035975',
        '0957648066',
        '1207778455',
        '0504330861',
        '0923202345',
        '0803843663',
        '0956953137',
        '0942058488',
        '0950107839',
        '0950602375',
        '0959293796',
        '0944205186',
        '0928682004',
        '1207388669',
        '0952155372',
        '0944195684',
        '1208593663',
        '1206916817',
        '0957649650',
        '0804396216',
        '0928345859',
        '1208822575',
        '1206282723',
        '1311156788',
        '0930161948',
        '0959442823',
        '1206643692',
        '0928062488',
        '0922678982',
        '0803457118',
        '0926699695',
        '1312387051',
        '0941695553',
        '0957115223',
        '1207467976',
        '0930875620',
        '1206982363',
        '1206782813',
        '0955639414',
        '0930863014',
        '0927404053',
        '0944253475',
        '1722981071',
        '0932322662',
        '0958332900',
        '0929886877',
        '0943950600',
        '1207707256',
        '1206949933',
        '0954018503',
        '0923290977',
        '0914901442',
        '2300083140',
        '0750665093',
        '0928766344',
        '0929145936',
        '1206238063',
        '1206642686',
        '0941728347',
        '0944227883',
        '0919032532',
        '0955161377',
        '0953047420',
        '0805343977',
        '0953276599',
        '1310779127',
        '0919360594',
        '0944260348',
        '0201871936',
        '0951769736',
        '0957779531',
        '0923292916',
        '1312988197',
        '0951376094',
        '0952231512',
        '0954626842',
        '0956933691',
        '0926534769',
        '1207743012',
        '0941432353',
        '0918015835',
        '0930816095',
        '0924907488',
        '0942393992',
        '1208289205',
        '0951644707',
        '0706681699',
        '0958744609',
        '1207584606',
        '0802183251',
        '0929818854',
        '0957935943',
        '0803147693',
        '1207241215',
        '0942925595',
        '0924063274',
        '0802950105',
        '1202356166',
        '0940450562',
        '0931489470',
        '1208456093',
        '0943741744',
        '0954882403',
        '0929141810',
        '0929744183',
        '0927991786',
        '0950319236',
        '0804250983',
        '0929778702',
        '0922965546',
        '0919600171',
        '0801628132',
        '0650250764',
        '0929004166',
        '1206789917',
        '0950890871',
        '1310994122',
        '0953032455',
        '0929893089',
        '0929951481',
        '0925739443',
        '0931132062',
        '0956750913',
        '0925703498',
        '0955024294',
        '0941198392',
        '0803880822',
        '0927678730',
        '0940178338',
        '1251184899',
        '1204600967',
        '0958181398',
        '0941676025',
        '0930667654',
        '0959117011',
        '1317404216',
        '0926959123',
        '1205612896',
        '0951214865',
        '0930219142',
        '0941469066',
        '1206922245',
        '0956433528',
        '0931127245',
        '0957166036',
        '0927163246',
        '0954707360',
        '1311988446',
        '0940457559',
        '0956756399',
        '1207302249',
        '1204630741',
        '0928950096',
        '0803623065',
        '0952515898',
        '0914578844',
        '0953374675',
        '0927880575',
        '0951512839',
        '0944329119',
        '0802559278',
        '0923511059',
        '0953162047',
        '0803343110',
        '0917503856',
        '0951623123',
        '0942379264',
        '1250115233',
        '0931040562',
        '0944351279',
        '0928034776',
        '0803390244',
        '0803680503',
        '0958999534',
        '0952859742',
        '0942327198',
        '1250915533',
        '0932033384',
        '0803139476',
        '0704159623',
        '0929375822',
        '0928479260',
        '0703422956',
        '0941235392',
        '0927531913',
        '0921226015',
        '0930481320',
        '0926113150',
        '0957242969',
        '0955746664',
        '0929370153',
        '0930881123',
        '0925340887',
        '0958400558',
        '0929975662',
        '1206984831',
        '1208549228',
        '0953909538',
        '0953050507',
        '0943731513',
        '0924947849',
        '0944135763',
        '0953411774',
        '1717866592',
        '0944187731',
        '0955195060',
        '1205529462',
        '0929824555',
        '2450578436',
        '1251408132',
        '0929979391',
        '0942394719',
        '0923000822',
        '0605934751',
        '0924291164',
        '0804324630',
        '0952862472',
        '0804421535',
        '1205701343',
        '1206912063',
        '0929810075',
        '0954811972',
        '0929365591',
        '0941561557',
        '1205699299',
        '0803216530',
        '0941113839',
        '1718592148',
        '0953454063',
        '1207018845',
        '1207307156',
        '0931975031',
        '0954930053',
        '0922355664',
        '0930993738',
        '0928062074',
        '1204352346',
        '0931799100',
        '1208744084',
        '0943321323',
        '0943432609',
        '0929732543',
        '0929180925',
        '0951502574',
        '0950973099',
        '0953619764',
        '0930209523',
        '1205771205',
        '1206112813',
        '0952438901',
        '0952995397',
        '1720702917',
        '0929722932',
        '0927527028',
        '0942814591',
        '0929369056',
        '0929829273',
        '0803401785',
        '0957545049',
        '1207289693',
        '0802880260',
        '0919393124',
        '0924475189',
        '0925608119',
        '0932564230',
        '0953437027',
        '0943444356',
        '1206650283',
        '0952981801',
        '0954407268',
        '0958573487',
        '0942016668',
        '0929481091',
        '0942720145',
        '1206599522',
        '0940499668',
        '0950696583',
        '0954378840',
        '0952607976',
        '0940604523',
        '0940481211',
        '1719972026',
        '0929880136',
        '1207965805',
        '0944014869',
        '0942242504',
        '0926344722',
        '0952116879',
        '0950158584',
        '0928256304',
        '1208351682',
        '1316072592',
        '0931138358',
        '0927788232',
        '0927345603',
        '0920868502',
        '0953196508',
        '1207762681',
        '0707265096',
        '0942774597',
        '1208015188',
        '0932308406',
        '0940312341',
        '1716697154',
        '0927449371',
        '0928262005',
        '1205097049',
        '0954494894',
        '1756013072',
        '1724097249',
        '0953570033',
        '0951109578',
        '0940491376',
        '0957285398',
        '0931458657',
        '0956189138',
        '1250569934',
        '0942958398',
        '0928069780',
        '0941911836',
        '1251038269',
        '0927238295',
        '0957565732',
        '1204928814',
        '1250123195',
        '0929705218',
        '0918469875',
        '0956483507',
        '0953920402',
        '0929082139',
        '0940918246',
        '1204396475',
        '0953966728',
        '0940250517',
        '0952550242',
        '0955780937',
        '1804943106',
        '0943456400',
        '0928687730',
        '1207694207',
        '0954185088',
        '1207259951',
        '0932458490',
        '0952846145',
        '0921745477',
        '0941803942',
        '0942308123',
        '0804121820',
        '0954479994',
        '0804538510',
        '0922797634',
        '0929645059',
        '1205711953',
        '0921966610',
        '0944180702',
        '0930665542',
        '0929790228',
        '1205465378',
        '0959147265',
        '0940698079',
        '0921244562',
        '0952777563',
        '0930996053',
        '0802532887',
        '0930823356',
        '0925854507',
        '0922787817',
        '0922262761',
        '0927129056',
        '0944241454',
        '0930978796',
        '0955060934',
        '0803433523',
        '1207679562',
        '0929102010',
        '1206986810',
        '0951732288',
        '0956301956',
        '0940200546',
        '0941859035',
        '0952904878',
        '1206330944',
        '0922616313',
        '1314521582',
        '0940917453',
        '0804402311',
        '1206150904',
        '0803055433',
        '1204387730',
        '1728613330',
        '0957856842',
        '0955682091',
        '0919187641',
        '0950737510',
        '1208045631',
        '0925179566',
        '0923767842',
        '1207475060',
        '1251061311',
        '0953306495',
        '1250605381',
        '0930521935',
        '0922933361',
        '0953767498',
        '0958999070',
        '0802840629',
        '0924860869',
        '0944173665',
        '0942782285',
        '0943446617',
        '0956925341',
        '0923300172',
        '1207774124',
        '0956162440',
        '0943868976',
        '1207361914',
        '0940072242',
        '0930907704',
        '0504348491',
        '0932162852',
        '0956139901',
        '0930660048',
        '0918124900',
        '1207018449',
        '0923331102',
        '0926641259',
        '0956799167',
        '1729955326',
        '0943692053',
        '0952891372',
        '0923373153',
        '0603772849',
        '0932305469',
        '0943909804',
        '0930494562',
        '0959435447',
        '0931471858',
        '0956007322',
        '0922864665',
        '0957516511',
        '0928699735',
        '0956763536',
        '0956038731',
        '0942775610',
        '0932048085',
        '0950547893',
        '1208501146',
        '0943220632',
        '0940579154',
        '0950677799',
        '0926838244',
        '0956973580',
        '0940914278',
        '0940613714',
        '0941584351',
        '0929255735',
        '0929905024',
        '0953862216',
        '0925306730',
        '0951846856',
        '0957029994',
        '1205019936',
        '0944017896',
        '0850044579',
        '0942433905',
        '0931540744',
        '1206341685',
        '0940511108',
        '1207589035',
        '0959092800',
        '2400468654',
        '0953392867',
        '0932030125',
        '1207304823',
        '0940150907',
        '0957366800',
        '0915956320',
        '0943354589',
        '0931015481',
        '0919698902',
        '0921457792',
        '1207733872',
        '0941385445',
        '1204039752',
        '1204944209',
        '1207638105',
        '0951928001',
        '0950535120',
        '0940582620',
        '1204903049',
        '0957818669',
        '0920994274',
        '0956476790',
        '0804097442',
        '1207809821',
        '1250021068',
        '1205110255',
        '0925655979',
        '0915724132',
        '0953014214',
        '0940736978',
        '1205418260',
        '1750797068',
        '0909937039',
        '0950030890',
        '0955288634',
        '1207070333',
        '0919326843',
        '0954106977',
        '1206184333',
        '0943623207',
        '0956019996',
        '0926385477',
        '0803251552',
        '0943278630',
        '1207090489',
        '1350503684',
        '1208108900',
        '0929073039',
        '0917777971',
        '0940212251',
        '1206937698',
        '0924816200',
        '1250225891',
        '0958049256',
        '0926879917',
        '0958552218',
        '1207113943',
        '0850285412',
        '0954580296',
        '1312482753',
        '0942508375',
        '0943505602',
        '1207606128',
        '0920559796',
        '1208629095',
        '0958635476',
        '1207401421',
        '0921552717',
        '0952358893',
        '0202329009',
        '0944108315',
        '0953738713',
        '1729808392',
        '0957347313',
        '0959438284',
        '0929795540',
        '0926902925',
        '0930095039',
        '0803282193',
        '0951882877',
        '1206618975',
        '1208008621',
        '0957689094',
        '0940921729',
        '1308075983',
        '0951386697',
        '0930691209',
        '0956427884',
        '0943949305',
        '0943908335',
        '0850412735',
        '0928658798',
        '0957017460',
        '0952744472',
        '0952810505',
        '1206993477',
        '1315222149',
        '0951530948',
        '0942684119',
        '0928268911',
        '0959069931',
        '0928586064',
        '0957469836',
        '0953524832',
        '0705231298',
        '0922439658',
        '0957853799',
        '0931785224',
        '0952578029',
        '0941476285',
        '0952835148',
        '0944272053',
        '0922707542',
        '0958360638',
        '1250495601',
        '0106007610',
        '0952837110',
        '0922332259',
        '1312957523',
        '0921465548',
        '1205461070',
        '0953703063',
        '1208381887',
        '0953295805',
        '0706747698',
        '0951605492',
        '0929300945',
        '0921638425',
        '0940660384',
        '0929907723',
        '1250139993',
        '0940102650',
        '0919607796',
        '1207252667',
        '0941543209',
        '0955877097',
        '0926920869',
        '0940562721',
        '0955271457',
        '1206734384',
        '0952464972',
        '0941475832',
        '0953150695',
        '0943494633',
        '0944266865',
        '0957964364',
        '0925374415',
        '0958591117',
        '1207156868',
        '1206108167',
        '0954241469',
        '0929263952',
        '0928058502',
        '0923005482',
        '0955581905',
        '0944375153',
        '0943619189',
        '0956058598',
        '0941091340',
        '0955336920',
        '0954989778',
        '0957463615',
        '0924195514',
        '0953418712',
        '0959194986',
        '0928522077',
        '0940296163',
        '1206614032',
        '0931261358',
        '0921618674',
        '0952336600',
        '0957999121',
        '0927775072',
        '1309027165',
        '0950227132',
        '0928374420',
        '0918898487',
        '1724285240',
        '0953794237',
        '0929333193',
        '0925044349',
        '0941161143',
        '0926984899',
        '0944209600',
        '0957568264',
        '0923877625',
        '1726577081',
        '0952506483',
        '0920954203',
        '0952772812',
        '0957503444',
        '0951852805',
        '0952640860',
        '0943315739',
        '1311075657',
        '0926614009',
        '0850658519',
        '0926230483',
        '1203858467',
        '1204107419',
        '0943485888',
        '2250173511',
        '0921368692',
        '0926064783',
        '0956981971',
        '0951830462',
        '0932560253',
        '1206123950',
        '1206842716',
        '0503745465',
        '0942898750',
        '0943444513',
        '2450772146',
        '0954163671',
        '1250517974',
        '0928487263',
        '0926844911',
        '0924470842',
        '1206840967',
        '0959434150',
        '0950265520',
        '0944165463',
        '0941567604',
        '0803607647',
        '0803474683',
        '0920446473',
        '0606388866',
        '0944018100',
        '0943962274',
        '0925989808',
        '0914058854',
        '0804299394',
        '0953503760',
        '0850753443',
        '0953335510',
        '0929085074',
        '1207885649',
        '0955631288',
        '0805207354',
        '0941234882',
        '0914887567',
        '0927211581',
        '0951907120',
        '0940703531',
        '0929088995',
        '0940179377',
        '0926975509',
        '1205918293',
        '0941953598',
        '0958438665',
        '0940883572',
        '0957244148',
        '0953437761',
        '0956378715',
        '0931312037',
        '0926613019',
        '1207857028',
        '1204307282',
        '1208559425',
        '0958428047',
        '0803117340',
        '1308576899',
        '0955445135',
        '0923010789',
        '0922931464',
        '0850827718',
        '0940570914',
        '0928045178',
        '1205501925',
        '0919410274',
        '0930307814',
        '0958356693',
        '0943937870',
        '0919825687',
        '0930854351',
        '0918410283',
        '0951946219',
        '0803398122',
        '0921683140',
        '0803333327',
        '0802021717',
        '0940548084',
        '0955899398',
        '1206707869',
        '0955680988',
        '0916974892',
        '1207146745',
        '1350405716',
        '1207029883',
        '0919790196',
        '0952104941',
        '0953042637',
        '0941895815',
        '0927802587',
        '0941299851',
        '0954301156',
        '0950601526',
        '0942727868',
        '0926683566',
        '0958744419',
        '0920512704',
        '0917810590',
        '1752677854',
        '0925324519',
        '0957329543',
        '0959324906',
        '0957481021',
        '1206847681',
        '0954041786',
        '0927537878',
        '0923611131',
        '0928084375',
        '0930872908',
        '0929612844',
        '0953420601',
        '0943097576',
        '1204931313',
        '0954297305',
        '0928097120',
        '0929158525',
        '0927288241',
        '0953951472',
        '0955057815',
        '0952014835',
        '0916406879',
        '0955828140',
        '0923410146',
        '0956516215',
        '0951770510',
        '0928183458',
        '0958234635',
        '0802845990',
        '0941331795',
        '0926822057',
        '0940575855',
        '0943322115',
        '0930267737',
        '0928187566',
        '1205106550',
        '0921696472',
        '0940148679',
        '1208345205',
        '0951880954',
        '0930961263',
        '0923645675',
        '0956469225',
        '1207874783',
        '0943938654',
        '1315141646',
        '0952022416',
        '0958691867',
        '0951363464',
        '0941478729',
        '0955324181',
        '0943949768',
        '0920999877',
        '0953782158',
        '1250605431',
        '0940807837',
        '1311100729',
        '1250549175',
        '0943640573',
        '0923241681',
        '1207179951',
        '0958621377',
        '0943937334',
        '0953929049',
        '1250253216',
        '0952482370',
        '1206924985',
        '0952500270',
        '0956709125',
        '0953892338',
        '0958788150',
        '1250121876',
        '0924352545',
        '0957884257',
        '0943381772',
        '0926363128',
        '1207547454',
        '0924943608',
        '0931139281',
        '0940194434',
        '1206628388',
        '0850634346',
        '0850396938',
        '0930998596',
        '0915500383',
        '0952897759',
        '0957966302',
        '0929959732',
        '0955902150',
        '0941229528',
        '0951764786',
        '0952681203',
        '0925832628',
        '0950570374',
        '0202235859',
        '1250855853',
        '0941179814',
        '0805349370',
        '0926399221',
        '0924732522',
        '1207007848',
        '1206350306',
        '0924241243',
        '0803049980',
        '0953736857',
        '0926348806',
        '0955372875',
        '0956767339',
        '0921004743',
        '0958316978',
        '0957716236',
        '0965282452',
        '0929994549',
        '2300763246',
        '0941025777',
        '1206285163',
        '0803912351',
        '1207452523',
        '0954099834',
        '0953523586',
        '0942942491',
        '0929338317',
        '0805145323',
        '1250535943',
        '0930086632',
        '0952489946',
        '0951307230',
        '0944191089',
        '0950294934',
        '0943402511',
        '0918844424',
        '0705366839',
        '0950808147',
        '0942739574',
        '0942503855',
        '0950250878',
        '0952923944',
        '0943832469',
        '0804513265',
        '0803405174',
        '0954540761',
        '0951352806',
        '0952450583',
        '0920630837',
        '0927786202',
        '0940199433',
        '0954991139',
        '1351301518',
        '0955044516',
        '0943762260',
        '2351043779',
        '0942675125',
        '0943274431',
        '0804095362',
        '0953213105',
        '0944327840',
        '0941949273',
        '0955863485',
        '1250570841',
        '1251190821',
        '0940229974',
        '1317019337',
        '0924976608',
        '0925310674',
        '1251088660',
        '0941498800',
        '0955854252',
        '0954584611',
        '0953954989',
        '0940288178',
        '0952426971',
        '0930560446',
        '0803910009',
        '0957062821',
        '0926245358',
        '0959822966',
        '0915505721',
        '0950692269',
        '0953436573',
        '0955496971',
        '0957499783',
        '0943660571',
        '1207989656',
        '0929993806',
        '0929078517',
        '0942675018',
        '1207967660',
        '1208548428',
        '0928067685',
        '0955447867',
        '1250464151',
        '0950808212',
        '0931448500',
        '0956780142',
        '0943816223',
        '0953380938',
        '1250221932',
        '0952211811',
        '2400235129',
        '0958128753',
        '0927385294',
        '0921740981',
        '0950952911',
        '0919416495',
        '0925613119',
        '1250964358',
        '0941912834',
        '0943320788',
        '0955802111',
        '1726091976',
        '0930302278',
        '0940586456',
        '0958569485',
        '0950636233',
        '1207494228',
        '0930499710',
        '0953737269',
        '0940140122',
        '0953695806',
        '0951529569',
        '2100309687',
        '1208269959',
        '0954580346',
        '0952013720',
        '0802972489',
        '0929191203',
        '0955692306',
        '0931368690',
        '0921157103',
        '0930722988',
        '0930664461',
        '0942999871',
        '0930614466',
        '0940453616',
        '1205199951',
        '0950637892',
        '0923329650',
        '1721568606',
        '0918587833',
        '0914649603',
        '1207334481',
        '1206012880',
        '0927634345',
        '0922328893',
        '0955874441',
        '0957757016',
        '0923263339',
        '0931119507',
        '1315274124',
        '0927277137',
        '0942310095',
        '0927560235',
        '0953355229',
        '0958106809',
        '0916515471',
        '0940314289',
        '0929997229',
        '0956756159',
        '0914032974',
        '0650409998',
        '0927301010',
        '0940458177',
        '0931177646',
        '1004217749',
        '0943695452',
        '0951015486',
        '0953362308',
        '0954136727',
        '0941072506',
        '0958903338',
        '0915029961',
        '0942985854',
        '0958089864',
        '0955095609',
        '1205401266',
        '0931341820',
        '0950782938',
        '0930333265',
        '0951457977',
        '0941492795',
        '0958366213',
        '0954792206',
        '1205817453',
        '0931120729',
        '0702634387',
        '1200649372',
        '0940747702',
        '1718264136',
        '0943835272',
        '0926787573',
        '1250343041',
        '0955371794',
        '1207552082',
        '0942664681',
        '0958348674',
        '0931187652',
        '0923213987',
        '0919701250',
        '1205326075',
        '0944038975',
        '0955020201',
        '0803411776',
        '0956988349',
        '1311136715',
        '0930029053',
        '1208233013',
        '0921358347',
        '0150259661',
        '0951695154',
        '0951521830',
        '0915977292',
        '0923692727',
        '0943485482',
        '0919409649',
        '0926014457',
        '0956519359',
        '0931512792',
        '0925493900',
        '0605711647',
        '0250180692',
        '0941162448',
        '0924904469',
        '1206952994',
        '0926973710',
        '0926586363',
        '0941227407',
        '1207286301',
        '0550010698',
        '0804793453',
        '0923847511',
        '0955848338',
        '0955898358',
        '0959183237',
        '0923206593',
        '0941612434',
        '0943588129',
        '1206791418',
        '0940906795',
        '0930463237',
        '0958669954',
        '0803401587',
        '0958079220',
        '0958988198',
        '0943517060',
        '1208527117',
        '1207479484',
        '0944289313',
        '0929730471',
        '0957906464',
        '0931791537',
        '0950987404',
        '0953698313',
        '0932041825',
        '0942123530',
        '1208282366',
        '0929951630',
        '0952458701',
        '0954145033',
        '0958462251',
        '1206854745',
        '0927869149',
        '1206942102',
        '0927816363',
        '0951899491',
        '0942166034',
        '0941065302',
        '0805156973',
        '0925692816',
        '0956349641',
        '1207469204',
        '1251302541',
        '0923966840',
        '0930490685',
        '1315806107',
        '0913409710',
        '0953649480',
        '0942889775',
        '1600721813',
        '1207263888',
        '0959084948',
        '0951663467',
        '0951739051',
        '0962805487',
        '0929864213',
        '0951706241',
        '0923543201',
        '0942061250',
        '1251328108',
        '1208006765',
        '0924217136',
        '0707277570',
        '1722227848',
        '0923711931',
        '0952080372',
        '0940043037',
        '0952173201',
        '0955263777',
        '0605933688',
        '0804246940',
        '1208390136',
        '1729753515',
        '0927481622',
        '0950557629',
        '2000101556',
        '1207778240',
        '0958022055',
        '0942345117',
        '0957079684',
        '0802273201',
        '0926609306',
        '0923902050',
        '0959126236',
        '0952021376',
        '0927623710',
        '0940099757',
        '0921633038',
        '0921910659',
        '0952803351',
        '0503741209',
        '0942365610',
        '0925578312',
        '0924478647',
        '0930493010',
        '0929466589',
        '0954774436',
        '0943670117',
        '0958358152',
        '0929597656',
        '0954500906',
        '0956819205',
        '0928925973',
        '0940277627',
        '1724171119',
        '0957389307',
        '0802230326',
        '0929628261',
        '0954201406',
        '0927339143',
        '0940095813',
        '0941566317',
        '0706775608',
        '1207262831',
        '1316394335',
        '0951862440',
        '0804514404',
        '0950012096',
        '0943053108',
        '0922896303',
        '0941236812',
        '0920154333',
        '0958769572',
        '1208803617',
        '1204515082',
        '0927827006',
        '1206869461',
        '0925360349',
        '0952287837',
        '0941139016',
        '0952708014',
        '0803198290',
        '0950310953',
        '1208446367',
        '0940904238',
        '1205024241',
        '0929829067',
        '1208058261',
        '0955583216',
        '0911438711',
        '0957406341',
        '0931115182',
        '0150549970',
        '0925038259',
        '0943045062',
        '0941447989',
        '0955413539',
        '0928840453',
        '1207148865',
        '0931086482',
        '0956892020',
        '0954993606',
        '0956645279',
        '0952053676',
        '0929957447',
        '0944197359',
        '0928573369',
        '0958653297',
        '0941917932',
        '0940749120',
        '0956606206',
        '0925071490',
        '0951148253',
        '0958478182',
        '0918558123',
        '1208691509',
        '0923279301',
        '0953110392',
        '0943621441',
        '0955394093',
        '0941700411',
        '2200366710',
        '0961190634',
        '0915901920',
        '0941764136',
        '0954966545',
        '0930688486',
        '0850248733',
        '0941361727',
        '0955870548',
        '1208527422',
        '1207057785',
        '0956886329',
        '0951791847',
        '1208916823',
        '0850267717',
        '0953798634',
        '1208310639',
        '0950218487',
        '0932204167',
        '0927978999',
        '1205074329',
        '0802925610',
        '1206216416',
        '0940524994',
        '0955004395',
        '0950094789',
        '0951072859',
        '0957037955',
        '1250329750',
        '0956004485',
        '1204229643',
        '0951519933',
        '0953617495',
        '0919584961',
        '0927059832',
        '1203134471',
        '2350582884',
        '1207144666',
        '0918011164',
        '0952330918',
        '1729069607',
        '1206879411',
        '0705236784',
        '0957875388',
        '1207081215',
        '0958241960',
        '0940070329',
        '0953789229',
        '0929051787',
        '0942093030',
        '0958299232',
        '0953712536',
        '0920752714',
        '0943738260',
        '1205409616',
        '1204471856',
        '0927978916',
        '0921452793',
        '0926920422',
        '0953301710',
        '0941086761',
        '1250445051',
        '0923208912',
        '0953353463',
        '0955468343',
        '1207066075',
        '0956164776',
        '0952347565',
        '0940010143',
        '0955029137',
        '1205333683',
        '0940007743',
        '0950878892',
        '0503742033',
        '0953813607',
        '0955114467',
        '0950925826',
        '0951164102',
        '1207713106',
        '0923472377',
        '0922649660',
        '1727144386',
        '0953575487',
        '0942064833',
        '0953980570',
        '0953556511',
        '0959361650',
        '0954507109',
        '0955437967',
        '0957347768',
        '0919694679',
        '2300492663',
        '0921023792',
        '0921950168',
        '1250178827',
        '0930176359',
        '0931625180',
        '0956153340',
        '1206430314',
        '0919069609',
        '0706187689',
        '0922920780',
        '0928202894',
        '0850978537',
        '0940094865',
        '1207180942',
        '0952596898',
        '0956691331',
        '1250982855',
        '0955106232',
        '0940425093',
        '0932654817',
        '0952569838',
        '0959185265',
        '0954970828',
        '0943047811',
        '0942223264',
        '0850830894',
        '0804608438',
        '0921734851',
        '0956033047',
        '1206340257',
        '0941504268',
        '1204628166',
        '0804149086',
        '0950501627',
        '1250218466',
        '0952928232',
        '0927823088',
        '0941970659',
        '0942631797',
        '0926728361',
        '0925604324',
        '0923641872',
        '0954856068',
        '0920967510',
        '0950618199',
        '0606213379',
        '0958903346',
        '0950213603',
        '0926282708',
        '0803372135',
        '0951547793',
        '0953373651',
        '0952546539',
        '1208617009',
        '0922440326',
        '2300588593',
        '0940516941',
        '0953283843',
        '1250710017',
        '1206987172',
        '0940363237',
        '1003407390',
        '2350890667',
        '0926715855',
        '0953969680',
        '0955352489',
        '0952061976',
        '0925030520',
        '0957784234',
        '0928154525',
        '0928487271',
        '0606389914',
        '1206484360',
        '1208399491',
        '0950642561',
        '0929881811',
        '0951796523',
        '0943648642',
        '0930972823',
        '0944043066',
        '0850961467',
        '0951588995',
        '0940968936',
        '0942699695',
        '1723395008',
        '0929070365',
        '0929831691',
        '0703934570',
        '1250820238',
        '0956656029',
        '0930252002',
        '0956810568',
        '0942978149',
        '0958553000',
        '0940466337',
        '0953796448',
        '0931441554',
        '0803656800',
        '0942998006',
        '0924830219',
        '0803149889',
        '0953223377',
        '0940343650',
        '0926107210',
        '0940525603',
        '0928678028',
        '0957731185',
        '0954228144',
        '0919546218',
        '1250404165',
        '0930190301',
        '0955492822',
        '0943868331',
        '0803203959',
        '0605980168',
        '0953740107',
        '0951037597',
        '0953789641',
        '0928789742',
        '0944341551',
        '0942873688',
        '1250166541',
        '0957688757',
        '0958554701',
        '0926028325',
        '1207885219',
        '0931509780',
        '0954032249',
        '0943332569',
        '0953465259',
        '0955519897',
        '0943859017',
        '0951576370',
        '0956760227',
        '1208377067',
        '0924602196',
        '0923445670',
        '0605426881',
        '0943028589',
        '0929764819',
        '0943778308',
        '1206721811',
        '0956704399',
        '0940472251',
        '0952063394',
        '0930103353',
        '0957943954',
        '1250568787',
        '1206493478',
        '0915331870',
        '0940657083',
        '0803794247',
        '0850253170',
        '0954069704',
        '0920902293',
        '0850022914',
        '0955456744',
        '0953482049',
        '0919484923',
        '1206843607',
        '0942372152',
        '2300191794',
        '1208475879',
        '1206146084',
        '0956085500',
        '1207687912',
        '0942025693',
        '0953651320',
        '0953404530',
        '1206409334',
        '0925458341',
        '0943339440',
        '1206003962',
        '0950018887',
        '0955771241',
        '0950547935',
        '1251380901',
        '0919370098',
        '0940308307',
        '0923111587',
        '0921594495',
        '0952810588',
        '0955591805',
        '0926551680',
        '0940016629',
        '1208414415',
        '3050295686',
        '0922974498',
        '0941640211',
        '0953959707',
        '0958845885',
        '1250115159',
        '0922891387',
        '0951013705',
        '1207106962',
        '0940956774',
        '0916748569',
        '0930347943',
        '0953834520',
        '1206645341',
        '1207682905',
        '1206013003',
        '0953641123',
        '1317368122',
        '0929996783',
        '1103733703',
        '1251374961',
        '1315693737',
        '0953299864',
        '0943519033',
        '1709303208',
        '0931109474',
        '1250128558',
        '0952753911',
        '1313266502',
        '1251098784',
        '0944225077',
        '0803087659',
        '0953429768',
        '0958532228',
        '1207318526',
        '0955071816',
        '0940403686',
        '2200348049',
        '0951193911',
        '0919818187',
        '0929242253',
        '0921790598',
        '0952402790',
        '0940060262',
        '0925595134',
        '0941559395',
        '0951747112',
        '0931542484',
        '0958348971',
        '0941886673',
        '0954107801',
        '0953355450',
        '0105542443',
        '0957859846',
        '0958672867',
        '0955729322',
        '1207108307',
        '0928096437',
        '0927908780',
        '1207455112',
        '0914016571',
        '0951044411',
        '1208339703',
        '0925768061',
        '0950803361',
        '0920378502',
        '0950050971',
        '0929045623',
        '0958157943',
        '0943694786',
        '0941393282',
        '1104677750',
        '0922814082',
        '0951860048',
        '0941219073',
        '0959321621',
        '1351317464',
        '0928881531',
        '0951901933',
        '0940197783',
        '0922958574',
        '0955619762',
        '0957529605',
        '0950372896',
        '0942804923',
        '0940546963',
        '0958428179',
        '1207770411',
        '0941929333',
        '0952777332',
        '0928184837',
        '1724810963',
        '0956272066',
        '0944272442',
        '0957388804',
        '0921333845',
        '0501857353',
        '0927040659',
        '1314633726',
        '0956286421',
        '0955855390',
        '0927559732',
        '0925161135',
        '0957409295',
        '0942706789',
        '0957854748',
        '0930526298',
        '0953663267',
        '0926860958',
        '0958775694',
        '0932276876',
        '1804450805',
        '0925334336',
        '0927803932',
        '0953927886',
        '0927234799',
        '0953141371',
        '0941633448',
        '1208774362',
        '0959435074',
        '0929174985',
        '0943588913',
        '0850583980',
        '0932060080',
        '0928471994',
        '1251013742',
        '0951753136',
        '0928993260',
        '0953589595',
        '0952873842',
        '0954549218',
        '1750368183',
        '1204682932',
        '0953780285',
        '0953621745',
        '0928926252',
        '0957744923',
        '0953423571',
        '1351392756',
        '0952938587',
        '0925680399',
        '0953603677',
        '1205362211',
        '0802000638',
        '1208756054',
        '0955660162',
        '0940301187',
        '0955324652',
        '0952240505',
        '0956895007',
        '0927374470',
        '0801798596',
        '0944342799',
        '0958229528',
        '0919113761',
        '1207610187',
        '0920985967',
        '0928054089',
        '0926275819',
        '0931114375',
        '0955040001',
        '0928582279',
        '0921334504',
        '0919371153',
        '0928878131',
        '0929340297',
        '0944030691',
        '1207673011',
        '1205432261',
        '1205379926',
        '0953056876',
        '0941244196',
        '1208269678',
        '0929873610',
        '0944096254',
        '0958811101',
        '0923195143',
        '0803677269',
        '0954628335',
        '0928131143',
        '0802237503',
        '1206263392',
        '0955534268',
        '0850985474',
        '0929147916',
        '0941063380',
        '1206219675',
        '0942709999',
        '1722394663',
        '0918506973',
        '0940896608',
        '0940472699',
        '0803890516',
        '1207543404',
        '0950735589',
        '0927490680',
        '0201719895',
        '0944171040',
        '0955502166',
        '0950406264',
        '0951753607',
        '0954041836',
        '1311154817',
        '1002279634',
        '1206399535',
        '0959186420',
        '1804479804',
        '0921562419',
        '0925106775',
        '0922084314',
        '0957534340',
        '0926862954',
        '0955058185',
        '1709171118',
        '0953975752',
        '0958424541',
        '1206981720',
        '0803397066',
        '0503367591',
        '2400198954',
        '1312407362',
        '0950873067',
        '0919609917',
        '0940079296',
        '0929118800',
        '1204936189',
        '0953348760',
        '1203280555',
        '0926999905',
        '1312999376',
        '1314451202',
        '1206874081',
        '0951923028',
        '0931686109',
        '0927433680',
        '0942610015',
        '0958554297',
        '0944357557',
        '0706306453',
        '0942617549',
        '1206486472',
        '1203218225',
        '0950960021',
        '1206586982',
        '0944320985',
        '0929420305',
        '0930858840',
        '0958274672',
        '0804193795',
        '0955341367',
        '0929959492',
        '1729977924',
        '0950669168',
        '0924945504',
        '0958869349',
        '0805368396',
        '0927958249',
        '0951264860',
        '0917208738',
        '0940735822',
        '0926446295',
        '1204531410',
        '1250673348',
        '0957912181',
        '0941419376',
        '1251171326',
        '0944083062',
        '0941499329',
        '0928896877',
        '1207165752',
        '1311221038',
        '0941266876',
        '0951985720',
        '0926106311',
        '0923796783',
        '0914703483',
        '0750991242',
        '0950541714',
        '1208534097',
        '0928318369',
        '0942468588',
        '0802910992',
        '0940518723',
        '0955801246',
        '0940923295',
        '0705700169',
        '1207877232',
        '0955659800',
        '0921724993',
        '0941503781',
        '0943752352',
        '0928203462',
        '0929526242',
        '0932039001',
        '1207886159',
        '0928509736',
        '1205434986',
        '0926627118',
        '1727262709',
        '0941021321',
        '0950823765',
        '0941470809',
        '1206425470',
        '0956365001',
        '1208080927',
        '0956271357',
        '1207076124',
        '0940591266',
        '0503675076',
        '0955014527',
        '0956883680',
        '0954047049',
        '0926547142',
        '0928372770',
        '0503717902',
        '0803424860',
        '0918083544',
        '0925896904',
        '1315689701',
        '0958564627',
        '0950371096',
        '0957802416',
        '0919952457',
        '0957692775',
        '1206619437',
        '0931591184',
        '1206551929',
        '1207375880',
        '0943650796',
        '0956890909',
        '0550168686',
        '0954446282',
        '0940207319',
        '0202151718',
        '1205660424',
        '1207731363',
        '1251147797',
        '0940914328',
        '1206569830',
        '0957390297',
        '0958628984',
        '0940695877',
        '0958512402',
        '0954994034',
        '0943121145',
        '2350455115',
        '0921772406',
        '0952012896',
        '0955197892',
        '0943716498',
        '0943408161',
        '1206618694',
        '0943867465',
        '0926826777',
        '0955814298',
        '0952514172',
        '0922446653',
        '0952504488',
        '1206004242',
        '1207062983',
        '0944212596',
        '0912867132',
        '0932294085',
        '0919867465',
        '0957891625',
        '1208615375',
        '0918055625',
        '0803155498',
        '1206263376',
        '1104650567',
        '0955819370',
        '0942601659',
        '1206881268',
        '0959401878',
        '1250780473',
        '0929194074',
        '0951800713',
        '1800699108',
        '0928658053',
        '0929938348',
        '0925330193',
        '0915412779',
        '3050211980',
        '0950987560',
        '0922051297',
        '1207016724',
        '1728947605',
        '0924637853',
        '0930421540',
        '0604061754',
        '0954152195',
        '0940094097',
        '0804526143',
        '0940096738',
        '0942236704',
        '1251105795',
        '0955317664',
        '0940656671',
        '0940184146',
        '0940417413',
        '0925385015',
        '0916097421',
        '0958051997',
        '0919289462',
        '1206827576',
        '0941252884',
        '0959245051',
        '0953110772',
        '1206971259',
        '0941439366',
        '0957699549',
        '0926072901',
        '0954599346',
        '0954649737',
        '0922593785',
        '1206265959',
        '0957276033',
        '0929939684',
        '0953942638',
        '1206580514',
        '1206921312',
        '0956056063',
        '0941045601',
        '0958195729',
        '0940511512',
        '0943775684',
        '0850077603',
        '0954779948',
        '1207332105',
        '0804355469',
        '0942356338',
        '0940933534',
        '0955338926',
        '0940223035',
        '0606261162',
        '0943622233',
        '0943340901',
        '1719052936',
        '0929074342',
        '0927613661',
        '1755146675',
        '0940298458',
        '0957172372',
        '0920834900',
        '0944115492',
        '1207256718',
        '0955726385',
        '0929177574',
        '0954906525',
        '0959624248',
        '0931304778',
        '0943928093',
        '0940824659',
        '0944260892',
        '0958435307',
        '0927156885',
        '0923123681',
        '0952656056',
        '0953375466',
        '1250116645',
        '0956418396',
        '0925174559',
        '0941263741',
        '1207271444',
        '0953039294',
        '1208503878',
        '0957014715',
        '0954747648',
        '0924739329',
        '0952950426',
        '0959346727',
        '1729826048',
        '0929427656',
        '1315931244',
        '0913283701',
        '0958783490',
        '0954268561',
        '0942838939',
        '0925947129',
        '0919127969',
        '0956827463',
        '0932490592',
        '1208933653',
        '0956073761',
        '0706426079',
        '0951894385',
        '1314544113',
        '0926976606',
        '1725419343',
        '2350176620',
        '0942032111',
        '0953921590',
        '1207817766',
        '0604807370',
        '0956167522',
        '0957255789',
        '0930559828',
        '0924665391',
        '0952102622',
        '0924691454',
        '1204437972',
        '0958447435',
        '0924655624',
        '1600449811',
        '1207276997',
        '1207070754',
        '1206508366',
        '1313733287',
        '0954274577',
        '0950932145',
        '0953778164',
        '0915359665',
        '1208708915',
        '0943337543',
        '1208204493',
        '0944377845',
        '0926192469',
        '0931500961',
        '0953824950',
        '0928801190',
        '0955363890',
        '0956925713',
        '0955447289',
        '0951273127',
        '0955285960',
        '0804022317',
        '0928772243',
        '0953598141',
        '0958340796',
        '0952644029',
        '0961202199',
        '0956543714',
        '0950080119',
        '0955512884',
        '0942974551',
        '1207254341',
        '0922203856',
        '0943000893',
        '0929946002',
        '0606214401',
        '0943832667',
        '0951950500',
        '0927015446',
        '0923930713',
        '0940432966',
        '0951960939',
        '0927407312',
        '0929202158',
        '0943603365',
        '0943793034',
        '0957385743',
        '1208005320',
        '0801781402',
        '0952783397',
        '0929888030',
        '0952682409',
        '0954991493',
        '0952975811',
        '0957704356',
        '0924251291',
        '0955308986',
        '1207017672',
        '1205760349',
        '0923096465',
        '1750830455',
        '0952546703',
        '1206846436',
        '0804116929',
        '0950450965',
        '1208287563',
        '0922337928',
        '0929778959',
        '0952039600',
        '0932029382',
        '0952921138',
        '1207815901',
        '0913556940',
        '0951857812',
        '0803976299',
        '1207978790',
        '0958457855',
        '1208146884',
        '0940699085',
        '0927091421',
        '1205364878',
        '0942788761',
        '0919268466',
        '1205471772',
        '0942221375',
        '1204900128',
        '1205238288',
        '0958614950',
        '0926470188',
        '0951218809',
        '0940483092',
        '0941598724',
        '1206979112',
        '0928551886',
        '0950557165',
        '0923770804',
        '0922130224'
    ]
    errors = []
    eCoordinacion = Coordinacion.objects.get(id=9)
    filtro = Q(status=True, nivel__periodo=ePeriodo, inscripcion__carrera__coordinacion=eCoordinacion, cerrada=False) & \
             Q(Q(inscripcion__persona__cedula__in=cedulas) | Q(inscripcion__persona__pasaporte__in=cedulas))
    eMatriculas = Matricula.objects.filter(filtro).distinct()
    eMatriculas.update(aprobado=False, pasoayuda=False)
    total_matriculas = eMatriculas.values("id").distinct().count()
    contador_matricula = 0
    for eMatricula in eMatriculas:
        contador_matricula += 1
        for eMateriaAsignada in eMatricula.materiaasignada_set.filter(status=True, retiramateria=False):
            eMateria = eMateriaAsignada.materia
            with transaction.atomic():
                try:
                    if eMateria.notas_de_moodle(eMatricula.inscripcion.persona):
                        for notasmooc in eMateria.notas_de_moodle(eMatricula.inscripcion.persona):
                            campo = eMateriaAsignada.campo(notasmooc[1].upper())
                            # if not alumno.matricula.bloqueomatricula:
                            if type(notasmooc[0]) is Decimal:
                                if null_to_decimal(campo.valor) != float(notasmooc[0]) or (eMateriaAsignada.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                    actualizar_nota_planificacion(eMateriaAsignada.id, notasmooc[1].upper(), notasmooc[0])
                                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                                    manual=False,
                                                                    calificacion=notasmooc[0])
                                    auditorianotas.save()
                            else:
                                if null_to_decimal(campo.valor) != float(0) or (eMateriaAsignada.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                    actualizar_nota_planificacion(eMateriaAsignada.id, notasmooc[1].upper(), notasmooc[0])
                                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                                    manual=False,
                                                                    calificacion=0)
                                    auditorianotas.save()
                    else:
                        for detallemodelo in eMateria.modeloevaluativo.detallemodeloevaluativo_set.filter(migrarmoodle=True):
                            campo = eMateriaAsignada.campo(detallemodelo.nombre)
                            actualizar_nota_planificacion(eMateriaAsignada.id, detallemodelo.nombre, 0)
                            auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                            manual=False,
                                                            calificacion=0)
                            auditorianotas.save()
                    print(f"Migrado --> {eMateriaAsignada.__str__()}")
                except Exception as ex:
                    transaction.set_rollback(True)
                    print(f"Error al migrar --> {eMateriaAsignada.__str__()} - ERROR: {ex.__str__()}")
                    errors.append(eMateriaAsignada.pk)

        with transaction.atomic():
            try:
                cantidadmaterias = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False).count()
                cantidadaprobadas = eMatricula.materiaasignada_set.filter(notafinal__gte=70, status=True, retiramateria=False).count()
                # print("%s %s"% (cantidadaprobadas, cantidadmaterias))
                if cantidadmaterias == cantidadaprobadas and cantidadmaterias > 0 and cantidadaprobadas > 0:
                    eMatricula.aprobado = True
                    eMatricula.save()
                print(f"({total_matriculas}/{contador_matricula}) - {eMatricula.__str__()}")
            except Exception as ex:
                print('error: %s' % ex)
                transaction.set_rollback(True)

    if len(errors) > 0:
        print(errors)
    print(f"FIN")


def revertir_notas_admision_v2(ePeriodo):
    errors = []
    eCoordinacion = Coordinacion.objects.get(id=9)
    filtro = Q(status=True, nivel__periodo=ePeriodo, inscripcion__carrera__coordinacion=eCoordinacion, cerrada=False, aprobado=True, pasoayuda=True)
    eMatriculas = Matricula.objects.filter(filtro).distinct()
    # eMatriculas.update(aprobado=False, pasoayuda=False)
    total_matriculas = eMatriculas.values("id").distinct().count()
    contador_matricula = 0
    for eMatricula in eMatriculas:
        contador_matricula += 1
        eMateriaAsignadas = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False)
        if not MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(materiaasignada__in=eMateriaAsignadas, asistencia=True).exists():
            for eMateriaAsignada in eMatricula.materiaasignada_set.filter(status=True, retiramateria=False):
                eMateria = eMateriaAsignada.materia
                with transaction.atomic():
                    try:
                        if eMateria.notas_de_moodle(eMatricula.inscripcion.persona):
                            for notasmooc in eMateria.notas_de_moodle(eMatricula.inscripcion.persona):
                                campo = eMateriaAsignada.campo(notasmooc[1].upper())
                                # if not alumno.matricula.bloqueomatricula:
                                if type(notasmooc[0]) is Decimal:
                                    if null_to_decimal(campo.valor) != float(notasmooc[0]) or (eMateriaAsignada.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                        actualizar_nota_planificacion(eMateriaAsignada.id, notasmooc[1].upper(), notasmooc[0])
                                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                                        manual=False,
                                                                        calificacion=notasmooc[0])
                                        auditorianotas.save()
                                else:
                                    if null_to_decimal(campo.valor) != float(0) or (eMateriaAsignada.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                        actualizar_nota_planificacion(eMateriaAsignada.id, notasmooc[1].upper(), notasmooc[0])
                                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                                        manual=False,
                                                                        calificacion=0)
                                        auditorianotas.save()
                        else:
                            for detallemodelo in eMateria.modeloevaluativo.detallemodeloevaluativo_set.filter(migrarmoodle=True):
                                campo = eMateriaAsignada.campo(detallemodelo.nombre)
                                actualizar_nota_planificacion(eMateriaAsignada.id, detallemodelo.nombre, 0)
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo,
                                                                manual=False,
                                                                calificacion=0)
                                auditorianotas.save()
                        print(f"Migrado --> {eMateriaAsignada.__str__()}")
                    except Exception as ex:
                        transaction.set_rollback(True)
                        print(f"Error al migrar --> {eMateriaAsignada.__str__()} - ERROR: {ex.__str__()}")
                        errors.append(eMateriaAsignada.pk)

            with transaction.atomic():
                try:
                    eMatricula.aprobado = False
                    eMatricula.pasoayuda = False
                    cantidadmaterias = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False).count()
                    cantidadaprobadas = eMatricula.materiaasignada_set.filter(notafinal__gte=70, status=True, retiramateria=False).count()
                    # print("%s %s"% (cantidadaprobadas, cantidadmaterias))
                    if cantidadmaterias == cantidadaprobadas and cantidadmaterias > 0 and cantidadaprobadas > 0:
                        eMatricula.aprobado = True
                    eMatricula.save()
                    print(f"({total_matriculas}/{contador_matricula}) - {eMatricula.__str__()}")
                except Exception as ex:
                    print('error: %s' % ex)
                    transaction.set_rollback(True)

    if len(errors) > 0:
        print(errors)
    print(f"FIN")


def arreglar_notas_admision_medicina(ePeriodo):
    print(f"INICIO")
    errors = []
    eCoordinacion = Coordinacion.objects.get(id=9)
    filtro = Q(status=True, nivel__periodo=ePeriodo, inscripcion__carrera__coordinacion=eCoordinacion, inscripcion__carrera__id=223)
    eMatriculas = Matricula.objects.filter(filtro).distinct()
    eCarreras = Carrera.objects.filter(id__in=eMatriculas.values_list('inscripcion__carrera__id', flat=True), status=True).distinct().order_by('modalidad')
    # if DEBUG:
    #     eCarreras = eCarreras.filter(pk=103)
    # eCarreras = eCarreras.filter(modalidad__in=[1,2])
    total_carrera = len(eCarreras.values("id"))
    contador_carrera = 0
    for eCarrera in eCarreras:
        contador_carrera += 1
        print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()}")
        total_matriculas = eMatriculas.values("id").filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).distinct().count()
        contador_matricula = 0
        for eMatricula in eMatriculas.filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).annotate(promedio_notafinal=Avg('materiaasignada__notafinal')).order_by('promedio_notafinal').distinct():
            contador_matricula += 1
            eMateriaAsignadas_esp = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False, materia__asignatura__id__in=[2688, 173, 171]).distinct()
            with transaction.atomic():
                try:
                    total_aprobadas_esp = eMateriaAsignadas_esp.values("id").filter(notafinal__gte=70).count()
                    eMateriaAsignadas_esp.filter(notafinal__gte=70).update(estado_id=NOTA_ESTADO_APROBADO)
                    if eMateriaAsignadas_esp.values("id").filter(notafinal__gte=70, asistenciafinal__lt=70).exists():
                        eMateriaAsignadas_esp.filter(notafinal__gte=70, asistenciafinal__lt=70).update(asistenciafinal=70)
                    total_tomadas_esp = eMateriaAsignadas_esp.values("id").count()
                    if total_aprobadas_esp == total_tomadas_esp:
                        eMateriaAsignadas_pen = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False, materia__asignatura__id__in=[4881]).distinct()
                        bandera = False
                        if eMateriaAsignadas_pen.values("id").exists():
                            # total_aprobadas_pen = eMateriaAsignadas_pen.values("id").filter(notafinal__gte=70).count()
                            eMateriaAsignadas_pen.filter(notafinal__gte=70).update(estado_id=NOTA_ESTADO_APROBADO)
                            # total_tomadas_pen = eMateriaAsignadas_pen.values("id").count()
                            if eMateriaAsignadas_pen.values("id").filter(notafinal__lt=70).exists():
                                for eMateriaAsignada in eMateriaAsignadas_pen.filter(notafinal__lt=70):
                                    if eMateriaAsignada.asistenciafinal < 70:
                                        eMateriaAsignada.asistenciafinal = 70
                                        eMateriaAsignada.save()
                                    actualizar_calificacion(eMateriaAsignada)
                                    bandera = True
                        if bandera:
                            eMatricula.pasoayuda = True
                        cantidadmaterias = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False).count()
                        cantidadaprobadas = eMatricula.materiaasignada_set.filter(notafinal__gte=70, status=True, retiramateria=False).count()
                        if cantidadmaterias == cantidadaprobadas and cantidadmaterias > 0 and cantidadaprobadas > 0:
                            eMatricula.aprobado = True
                        eMatricula.save()
                    print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()} --> ({total_matriculas}/{contador_matricula}) - {eMatricula.__str__()}")
                except Exception as ex:
                    print('error: %s' % ex)
                    transaction.set_rollback(True)
                    errors.append(eMatricula.pk)

    conta = 0
    totalaprobados = 0
    filtro = Q(status=True, nivel__periodo=ePeriodo, inscripcion__carrera__coordinacion=eCoordinacion, cerrada=False, inscripcion__carrera__id=223)
    eMatriculas = Matricula.objects.filter(filtro).distinct()
    eCarreras = Carrera.objects.filter(id__in=eMatriculas.values_list('inscripcion__carrera__id', flat=True), status=True).distinct().order_by('modalidad')
    if DEBUG:
        eCarreras = eCarreras.filter(pk=103)
    # eCarreras = eCarreras.filter(modalidad__in=[1, 2])
    total_carrera = len(eCarreras.values("id"))
    contador_carrera = 0
    for eCarrera in eCarreras:
        contador_carrera += 1
        print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()}")
        total_matriculas = eMatriculas.values("id").filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).distinct().count()
        contador_matricula = 0
        eMatriculas.filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).distinct().update(aprobado=False)
        for eMatricula in eMatriculas.filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).distinct():
            contador_matricula += 1
            with transaction.atomic():
                try:
                    cantidadmaterias = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False).count()
                    cantidadaprobadas = eMatricula.materiaasignada_set.filter(notafinal__gte=70, status=True, retiramateria=False).count()
                    # print("%s %s"% (cantidadaprobadas, cantidadmaterias))
                    if cantidadmaterias == cantidadaprobadas and cantidadmaterias > 0 and cantidadaprobadas > 0:
                        conta += 1
                        totalaprobados += 1
                        print("************************************************************# %s: Aprobadas=%s Total=%s" % (conta, cantidadaprobadas, cantidadmaterias))
                        eMatricula.aprobado = True
                        eMatricula.save()
                    print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()} --> ({total_matriculas}/{contador_matricula}) - {eMatricula.__str__()}")
                except Exception as ex:
                    print('error: %s' % ex)
                    transaction.set_rollback(True)
    print("Total de aprobados %s" % totalaprobados)

    if len(errors) > 0:
        print(errors)
    print(f"FIN")


def cerrar_matricula_admision(ePeriodo):
    eCoordinacion = Coordinacion.objects.get(id=9)
    filtro = Q(status=True, nivel__periodo=ePeriodo, inscripcion__carrera__coordinacion=eCoordinacion)
    eMatriculas = Matricula.objects.filter(filtro).distinct()
    eCarreras = Carrera.objects.filter(id__in=eMatriculas.values_list('inscripcion__carrera__id', flat=True), status=True).distinct().order_by('modalidad')
    total_carrera = len(eCarreras.values("id"))
    contador_carrera = 0
    for eCarrera in eCarreras:
        contador_carrera += 1
        print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()}")
        total_matriculas = eMatriculas.values("id").filter(inscripcion__carrera=eCarrera).distinct().count()
        contador_matricula = 0
        for eMatricula in eMatriculas.filter(inscripcion__carrera=eCarrera).distinct():
            contador_matricula += 1
            with transaction.atomic():
                try:
                    cantidadmaterias = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False).count()
                    cantidadaprobadas = eMatricula.materiaasignada_set.filter(notafinal__gte=70, status=True, retiramateria=False).count()
                    if cantidadmaterias == cantidadaprobadas and cantidadmaterias > 0 and cantidadaprobadas > 0:
                        eMatricula.aprobado = True
                    for eMateriaAsignada in eMatricula.materiaasignada_set.filter(status=True):
                        eMateriaAsignada.cerrado = True
                        eMateriaAsignada.save()
                    eMatricula.cerrada = True
                    eMatricula.save()
                except Exception as ex:
                    print('error: %s' % ex)
                    transaction.set_rollback(True)

            print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()} --> ({total_matriculas}/{contador_matricula}) - {eMatricula.__str__()}")


def planificar_reprogramacion_admision(ePeriodo):
    documentos = [
        '0919032532',
        '0928883958',
        '0958156424',
        '0802021717',
        '0957829245',
        '0943695452',
        '0922389697',
        '0942192881',
        '0953032455',
        '2100944996',
        '0941475832',
        '0955898358',
        '1251328108',
        '0953050507',
        '0955341367',
        '1204599193',
        '0955309455',
        '0923198105',
        '1207401421',
        '0925606584',
        '1207029883',
        '0928116532',
        '0944017896',
        '1206091074',
        '0950808212',
        '0940458177',
        '0955816103',
        '1206430314',
        '1204523060',
        '1208432540',
        '0957923345',
        '0929715803',
        '0850022914',
        '0955105515',
        '0850850124',
        '0929198703',
        '0942257361',
        '1208534097',
        '3050211980',
        '0929102010',
        '0957740475',
        '0955583216',
        '0951903459',
        '1207885649',
        '1205375023',
        '0929985133',
        '0804299394',
        '0956073761',
        '0943785626',
        '0940816143',
        '0959366618',
        '0925854507',
        '0941025777',
        '0941234882',
        '0942086786',
        '1208269959',
        '0603772849',
        '0953539889',
        '0923292916',
        '0705891273',
        '0928066018',
        '0927582791',
        '0850396938',
        '0941511214',
        '0922332259',
        '0952578029',
        '0941949273',
        '0958428179',
        '2300211220',
        '0924426513',
        '0956295034',
        '0957565732',
        '0925989808',
        '0953223377',
        '0706426079',
        '0950579615',
        '0605711647',
        '0955863485',
        '0944083062',
        '1208381887',
        '0928925650',
        '0941326068',
        '0950485813',
        '1208597185',
        '0921950168',
        '0924091291',
        '0803677269',
        '0924576044',
        '0929425643',
        '0927988972',
        '0953886629',
        '0942983818',
        '0954201646',
        '0941559395',
        '0944172394',
        '0954931077',
        '0953878444',
        '0929749786',
        '0958476897',
        '1206342535',
        '0930095039',
        '1316072592',
        '1207540228',
        '0943381772',
        '0953723228',
        '0928766344',
        '0955619762',
        '0953834520',
        '0944260348',
        '0956301543',
        '0956543714',
        '0951846856',
        '0956414080',
        '1203248529',
        '0925564452',
        '1206916817',
        '0942978149',
        '0926381914',
        '0958054363',
        '0950527036',
        '0943694786',
        '0957062821',
        '2400466567',
        '0959080128',
        '0952125276',
        '0952492726',
        '1250595947',
        '1805542774',
        '0952798718',
        '0922891387',
        '0943644005',
        '0927955732',
        '0931448500',
        '0954041786',
        '0606389914',
        '0952231512',
        '0952996338',
        '0941792467',
        '0940921729',
        '0957806920',
        '0930307814',
        '0929768828',
        '0930490685',
        '0923065627',
        '0941346843',
        '0951899491',
        '0953964707',
        '0941478729',
        '0950075457',
        '0958788150',
        '0922320007',
        '0942684119',
        '0953306495',
        '0803976299',
        '0959245051',
        '0917622664',
        '0956286421',
        '0932029382',
        '0954494894',
        '1207098672',
        '0942478140',
        '0956827463',
        '0956766364',
        '0923692727',
        '0927880575',
        '1208564326',
        '0927301010',
        '1203452451',
        '0940938806',
        '0922570544',
        '0918569666',
        '1204899452',
        '0958428047',
        '0950570374',
        '0932035975',
        '0926405150',
        '0941388571',
        '0952744472',
        '0927097030',
        '0804246940',
        '0942055880',
        '0957366800',
        '0928479260',
        '0953892338',
        '0942116880',
        '0954994034',
        '0958400558',
        '2400198954',
        '1206013003',
        '0960550689',
        '0942432139',
        '1207286301',
        '0940548084',
        '0942804923',
        '1250568787',
        '0957818669',
        '0956085500',
        '0927788232',
        '0503675076',
        '0941880486',
        '0850253170',
        '0932031487',
        '0927600924',
        '0705336162',
        '0927816363',
        '0928541614',
        '0930190301',
        '0952902773',
        '0927449371',
        '0954966545',
        '0923926927',
        '0922717533',
        '0957317969',
        '0921358347',
        '0940457559',
        '0953712536',
        '0930219142',
        '0955546171',
        '0940112295',
        '0803474683',
        '0953353463',
        '0805207354',
        '1206840967',
        '0956886329',
        '0943000091',
        '1208345205',
        '1207687417',
        '0942078676',
        '1207256718',
        '1205084021',
        '0926902925',
        '0953355229',
        '0927572974',
        '0705942415',
        '0929458107',
        '0959401027',
        '0957744923',
        '0942053448',
        '0928205277',
        '0954254207',
        '0943867465',
        '0931471858',
        '1250021068',
        '0929475135',
        '0929905024',
        '2250173511',
        '1729900439',
        '0803433523',
        '1208008621',
        '0606260057',
        '0940604523',
        '0802891515',
        '0927156869',
        '0930267737',
        '1208581197',
        '0944262591',
        '1208752855',
        '1207886027',
        '0932276876',
        '1207076124',
        '0928991793',
        '1207337708',
        '1206146084',
        '0944339514',
        '0931360465',
        '0941344368',
        '1316334224',
        '1208074045',
        '0941154833',
        '0959117011',
        '0941179814',
        '0920016201',
        '1313266502',
        '1251408132',
        '0919393124',
        '1206984831',
        '0958457855',
        '1206493478',
        '0941331795',
        '1250893250',
        '0959340084',
        '0951894971',
        '1250879523',
        '0943266189',
        '0953663267',
        '0956267827',
        '0940102650',
        '0954422358',
        '0944227883',
        '0950200097',
        '1314451202',
        '0953450319',
        '1207425008',
        '0957899313',
        '1208756054',
        '0955394093',
        '0550168686',
        '0932041825',
        '0957481021',
        '0941666000',
        '1208377067',
        '1251098784',
        '0929971232',
        '1208186054',
        '0942691122',
        '0943485482',
        '0953423571',
        '0942025693',
        '1207070333',
        '0957090830',
        '1207994615',
        '0923329650',
        '1204307282',
        '0940363237',
        '0801781402',
        '0956153340',
        '0925360349',
        '0944260892',
        '0959438284',
        '0958378986',
        '0955445135',
        '0953110392',
        '0924860869',
        '0850901547',
        '0957028079',
        '0956381321',
        '0954301156',
        '0959084948',
        '0927894519',
        '0943618264',
        '0952409449',
        '1729855245',
        '0940070329',
        '1207672716',
        '0850508037',
        '0922203856',
        '0957568264',
        '0401301486',
        '0943588913',
        '0943884478',
        '0958564627',
        '0940308307',
        '1251354328',
        '0954808986',
        '0925758518',
        '0958510000',
        '0953373651',
        '0959081340',
        '1250701958',
        '0953737269',
        '0950737510',
        '0942889775',
        '0504330861',
        '0941563785',
        '0931964241',
        '0951926393',
        '0950379396',
        '0957888332',
        '1207956838',
        '0953651320',
        '0941244196',
        '0931317804',
        '0943485888',
        '0932478571',
        '0943650796',
        '0954751467',
        '0940525603',
        '0944143650',
        '1350405716',
        '0922989207',
        '0951628692',
        '0923685549',
        '0954649737',
        '0928268085',
        '1250517974',
        '1315806107',
        '0923472377',
        '0803794247',
        '0955819081',
        '0940383821',
        '1207467976',
        '1717866592',
        '0804109254',
        '0928264761',
        '1208390136',
        '0953794237',
        '0931686109',
        '0942480898',
        '0925310674',
        '0925161135',
        '0928054089',
        '0943783753',
        '0957409295',
        '0950661793',
        '0943835272',
        '0923645675',
        '0942387564',
        '0952000628',
        '0922328893',
        '0940296163',
        '0952938587',
        '0942999871',
        '0944263706',
        '0959822966',
        '0955231428',
        '0926683566',
        '0940473010',
        '1250445051',
        '0916894496',
        '0929762797',
        '0926626607',
        '0955848338',
        '1206580514',
        '0940122351',
        '1205019936',
        '1728947605',
        '0944205186',
        '0805145323',
        '0940092869',
        '1208045631',
        '0942153362',
        '0941447989',
        '0850507906',
        '0932484454',
        '1207885219',
        '0951946219',
        '0955127162',
        '0955638945',
        '0955308986',
        '1206933788',
        '0958277519',
        '0943126409',
        '0943950600',
        '0943741744',
        '0929959492',
        '1207229731',
        '0928957133',
        '0957891625',
        '0930948096',
        '0957711484',
        '0958384935',
        '0953404621',
        '0956988349',
        '1207054089',
        '0958669954',
        '1250178827',
        '0952783397',
        '0953740107',
        '0922965546',
        '0954473989',
        '0924479223',
        '1208501146',
        '0955709340',
        '0953276599',
        '0943278630',
        '1311156788',
        '0931441554',
        '0952644029',
        '1723918544',
        '0954407268',
        '0952950426',
        '0941525008',
        '0958672867',
        '0803692524',
        '0956164776',
        '0943752352',
        '0940677867',
        '1207070754',
        '0953355450',
        '0707373072',
        '0942441304',
        '0940941065',
        '1206881268',
        '1722395827',
        '0940635220',
        '0958614950',
        '0953789641',
        '0958719452',
        '0941086761',
        '0941419376',
        '0927958819',
        '0953897865',
        '1206718064',
        '1205714809',
        '0942458191',
        '0951193911',
        '1204229643',
        '0956691331',
        '0929790228',
        '0940196710',
        '0953780285',
        '0957900517',
        '1250404199',
        '0956245542',
        '0924186976',
        '0940734981',
        '0954185088',
        '0940483092',
        '0955324652',
        '0943456400',
        '1206618694',
        '0942468364',
        '0929803484',
        '0802492553',
        '0943319897',
        '0956469225',
        '1206859595',
        '0930660048',
        '0958586745',
        '1310779127',
        '0915500383',
        '1207915248',
        '0940570914',
        '0931102388',
        '0926245358',
        '0803411776',
        '0950642561',
        '2450656380',
        '1316463098',
        '0955009386',
        '0918083544',
        '0931665848',
        '0918844424',
        '0927354027',
        '1206933655',
        '0955854252',
        '0950371096',
        '0954810685',
        '0941577694',
        '0940104383',
        '0957324403',
        '0942243023',
        '0956279426',
        '0956913750',
        '0929191203',
        '0958305427',
        '0927994582',
        '0928599901',
        '0924018179',
        '0927375402',
        '0930499710',
        '0919113761',
        '1206238063',
        '0958328999',
        '0955828140',
        '1208080927',
        '1206481754',
        '0956925713',
        '1251108674',
        '0918055625',
        '0940546963',
        '0921734851',
        '1207106962',
        '1310144249',
        '0928418219',
        '0940731193',
        '2351043779',
        '0913162798',
        '0927129056',
        '1204936189',
        '1207017672',
        '0801628132',
        '0605045301',
        '1310994122',
        '0956656029',
        '2450772146',
        '0955741152',
        '0919268466',
        '0951636281',
        '1208744084',
        '0956955686',
        '0929964997',
        '0943937870',
        '0915952204',
        '0850419664',
        '1204920845',
        '0920630837',
        '0958106809',
        '0959209834',
        '0926786963',
        '0805309861',
        '0803055433',
        '0919575662',
        '0950450965',
        '1727640227',
        '0803457118',
        '0930875620',
        '0932305469',
        '0924352545',
        '0928808096',
        '0929173995',
        '0942246505',
        '0958356693',
        '0957516511',
        '1205409616',
        '0917208738',
        '0950890871',
        '0952978864',
        '0944187731',
        '1250551205',
        '1314544113',
        '0944327840',
        '0803372135',
        '0940223035',
        '0929526242',
        '1206340257',
        '0943602672',
        '0926959123',
        '0931314819',
        '0950050971',
        '0922132154',
        '1250502976',
        '0925595134',
        '1205110255',
        '0920026234',
        '0925340887',
        '0950218487',
        '1251374961',
        '0927786202',
        '0940453616',
        '0850029612',
        '0928097120',
        '0950886408',
        '0927447326',
        '0943640573',
        '0925138208',
        '0957258981',
        '0923206593',
        '0953196508',
        '0943466557',
        '0803155498',
        '0956699433',
        '0706703824',
        '0942294257',
        '0750665093',
        '0959435447',
        '0803424860',
        '1207458090',
        '0803087659',
        '0943516864',
        '0940007743',
        '0920967510',
        '0940113392',
        '0954941662',
        '0940140122',
        '0930347943',
        '0958775694',
        '0940314289',
        '0917388621',
        '1250816251',
        '0929810075',
        '0955659800',
        '0926627118',
        '1204854176',
        '0942359662',
        '0929141810',
        '0942675125',
        '0503680472',
        '0953722378',
        '0953980570',
        '0958975864',
        '0940466337',
        '0959225459',
        '0803390244',
        '0955519897',
        '0940327208',
        '0958926347',
        '0958478182',
        '1251245088',
        '0926844531',
        '0921694170',
        '0954260485',
        '0942901984',
        '1208708915',
        '1250605431',
        '0943622233',
        '0803403120',
        '0957037955',
        '1251184899',
        '0928896877',
        '0943426031',
        '1208311348',
        '0944152867',
        '1205246463',
        '1205918293',
        '0921683140',
        '0922370978',
        '0940404833',
        '1208351682',
        '0956941421',
        '1315482602',
        '1250840020',
        '1313733287',
        '0955855390',
        '0943550186',
        '0959434150',
        '0927040659',
        '0921790598',
        '0941345852',
        '0940417413',
        '0955928650',
        '0941239923',
        '1208617090',
        '0943793034',
        '0850583980',
        '0954240420',
        '0940933534',
        '0920446473',
        '0953065349',
        '0927953687',
        '0952464972',
        '0954934311',
        '0952862472',
        '0956819205',
        '1729069607',
        '0929534055',
        '0928369321',
        '0955724604',
        '0930613765',
        '0940350994',
        '1251088660',
        '0944218403',
        '0940251218',
        '0941912834',
        '0803559301',
        '0929795540',
        '0957559966',
        '0957648066',
        '0916097421',
        '0929997229',
        '0931591184',
        '0957163082',
        '1206508366',
        '0940045750',
        '1315689701',
        '0956998504',
        '0940472251',
        '0928260793',
        '0931015481',
        '0802230326',
        '0919360594',
        '0956711204',
        '1207128529',
        '0503367591',
        '0928858117',
        '0150549970',
        '0943153874',
        '0940391568',
        '1207373430',
        '0953954989',
        '0919546218',
        '0941695553',
        '0957435118',
        '0959194986',
        '0912528932',
        '0952014447',
        '2150129522',
        '0804564748',
        '0950556373',
        '0953840840',
        '0952173201',
        '0943763169',
        '0958646135',
        '0951882877',
        '0943783068',
        '0955819370',
        '0954654869',
        '0915816458',
        '0940614936',
        '1728613330',
        '0950501627',
        '0932060080',
        '1850447200',
        '0942016668',
        '1206724559',
        '0955367404',
        '0957388804',
        '1205939141',
        '1724788227',
        '1206226480',
        '0929135994',
        '0941988602',
        '0958348971',
        '1208289205',
        '0942706789',
        '1726987025',
        '0941326076',
        '1208005320',
        '0951376094',
        '1250820238',
        '0927983312',
        '0952528552',
        '0941904179',
        '0942727868',
        '0930472097',
        '0941721359',
        '0957904337',
        '0944351279',
        '1205501925',
        '0943092551',
        '1203600513',
        '0924468150',
        '0930881123',
        '0942838939',
        '0928801190',
        '1311136715',
        '0926302662',
        '0917387292',
        '0943121145',
        '0944171040',
        '0929612836',
        '0952682409',
        '0958811101',
        '0921452793',
        '1250659636',
        '1208161727',
        '0929628261',
        '0957884257',
        '0953503760',
        '0956349641',
        '0940602642',
        '1316394335',
        '0951830462',
        '1722394663',
        '0941689721',
        '0958316978',
        '0942631797',
        '0957943954',
        '0953969680',
        '0956418396',
        '0943045914',
        '0942372152',
        '1726577081',
        '0959327842',
        '0919974576',
        '0942264664',
        '0912891140',
        '0929487650',
        '0921708350',
        '0930816095',
        '0927238295',
        '0922440326',
        '0952739456',
        '1206004242',
        '0955902150',
        '0927015446',
        '0958462251',
        '0951311885',
        '0922355664',
        '1207259951',
        '1206029389',
        '0955924659',
        '1207762681',
        '0954906525',
        '0940357122',
        '0927982843',
        '0957319379',
        '0955660253',
        '0927706283',
        '0912867132',
        '0940277627',
        '0942138447',
        '0925207680',
        '0926282708',
        '0940314016',
        '0926014457',
        '1720702917',
        '0962805487',
        '0955389846',
        '0804323756',
        '0955915640',
        '0951802115',
        '1207146745',
        '0956516215',
        '0929210334',
        '0953632155',
        '0803020510',
        '0942121690',
        '1206409334',
        '0928265255',
        '1315931244',
        '0942483835',
        '0927348235',
        '0923189476',
        '0957503444',
        '0922920780',
        '0925377558',
        '0954539557',
        '0959254590',
        '0943423806',
        '0917676520',
        '1200649372',
        '0931737878',
        '0959321621',
        '0929897304',
        '0302345228',
        '0953141371',
        '0957534340',
        '0944191089',
        '0958438665',
        '0940169378',
        '0942191792',
        '0955475991',
        '0953550001',
        '0850077603',
        '0958861734',
        '0921780847',
        '0958049017',
        '0926072901',
        '0941198392',
        '0954671533',
        '0941063380',
        '0959618299',
        '1206350306',
        '0943432609',
        '0951214865',
        '0925062226',
        '0940184146',
        '0922840350',
        '0930907704',
        '0943354589',
        '0955263777',
        '0942776113',
        '0922678982',
        '0954708723',
        '0954061982',
        '0942262635',
        '0957026362',
        '0850923434',
        '0931975031',
        '0956476790',
        '0951663467',
        '0943473389',
        '0943731513',
        '0804130839',
        '0801798596',
        '0928183458',
        '0920985967',
        '0959069931',
        '0955328034',
        '0958845885',
        '0943320788',
        '0942151416',
        '0951886647',
        '0955534268',
        '0928845502',
        '0929081479',
        '1206942102',
        '0919666321',
        '0923263339',
        '0914649603',
        '0926216938',
        '0944081272',
        '0955020201',
        '0955352489',
        '0955197892',
        '0929597656',
        '1724607310',
        '0929129849',
        '0927059832',
        '0924478647',
        '0958704744',
        '0952017960',
        '1207006311',
        '0941361727',
        '1206866905',
        '0952753911',
        '0952975811',
        '0942942491',
        '1208503878',
        '1208527422',
        '1206847681',
        '0926728361',
        '0954628335',
        '0942091083',
        '0958718231',
        '0931114375',
        '3050295686',
        '0941895815',
        '0958772451',
        '0950469957',
        '0951739051',
        '0926612961',
        '0959186420',
        '1206994608',
        '0953927886',
        '0930765011',
        '0928509736',
        '0951457977',
        '0922593785',
        '0927327585',
        '0950528141',
        '0941107534',
        '0951142249',
        '0950925826',
        '0929730471',
        '0922864665',
        '0956169775',
        '1750797068',
        '0954477782',
        '0953213105',
        '1720396942',
        '1317019337',
        '0927234799',
        '0954157285',
        '1205664400',
        '0953299773',
        '0956293849',
        '0928777242',
        '0958367641',
        '0956139901',
        '0943150904',
        '0927560235',
        '0928658798',
        '0929333193',
        '0605934751',
        '0951605492',
        '0952116879',
        '1206263376',
        '1250625165',
        '0930463237',
        '0802387738',
        '0924949514',
        '1724159296',
        '1208399491',
        '1207176460',
        '0706775608',
        '0953295003',
        '0956612139',
        '1250106497',
        '0944018100',
        '0928881531',
        '0941476285',
        '0927407312',
        '0932458490',
        '0957262637',
        '0957964364',
        '0944232404',
        '0605980168',
        '1208233013',
        '0803251552',
        '0950669168',
        '1311484495',
        '1204531410',
        '1208108900',
        '1205612896',
        '0954983920',
        '0928184837',
        '0930161948',
        '0930425012',
        '0931120729',
        '1311988446',
        '1207774124',
        '0955195060',
        '1207610187',
        '0803843663',
        '0957689094',
        '0605933688',
        '0924880610',
        '0955457544',
        '0942814591',
        '0925334336',
        '0928892561',
        '0924756703',
        '0932204167',
        '0929073039',
        '0940288178',
        '1206782813',
        '0954371829',
        '0940406358',
        '1208282366',
        '0923959548',
        '1723135388',
        '0952053676',
        '0951519933',
        '0953014214',
        '0943752451',
        '0940660426',
        '0605606276',
        '0930209523',
        '0803674571',
        '0924416506',
        '0952621936',
        '0915412779',
        '1729955326',
        '0932596653',
        '0922649660',
        '0605919166',
        '1206536458',
        '0954512307',
        '0921187605',
        '0803623065',
        '1207174143',
        '0922751029',
        '0805183225',
        '0919187641',
        '0921724993',
        '1207388669',
        '0927786350',
        '0924704398',
        '1206551929',
        '0929957447',
        '0929255735',
        '1204387730',
        '0940197783',
        '0922898432',
        '0603646282',
        '0803304815',
        '1207877232',
        '0943494633',
        '0927982884',
        '1803560901',
        '0926113150',
        '0955413539',
        '1729866457',
        '0926344722',
        '0250180692',
        '0914901442',
        '0923645394',
        '1311154817',
        '0955634480',
        '0958661399',
        '0925604324',
        '0906503438',
        '0941881484',
        '1204600967',
        '0941888349',
        '0952571347',
        '0930573126',
        '0930494562',
        '0928087881',
        '1723509319',
        '0955456744',
        '0951985720',
        '0940432966',
        '0926612581',
        '1206484360',
        '1206067611',
        '1207388933',
        '0944022185',
        '0302716162',
        '0943958538',
        '0927091421',
        '0921975694',
        '1720591450',
        '0916329477',
        '0940328180',
        '0802000638',
        '0804402311',
        '0957079684',
        '0943908335',
        '0942093030',
        '0953862216',
        '1251208011',
        '0951791847',
        '0929138725',
        '1203448467',
        '0944272053',
        '1205434986',
        '0953380938',
        '1207494228',
        '0926911371',
        '0929574549',
        '1207589035',
        '0957551757',
        '1207254069',
        '0927827006',
        '0941299851',
        '0802063032',
        '1315693737',
        '0926840968',
        '0953921590',
        '0944010743',
        '1250605407',
        '0803139476',
        '0926394743',
        '0931791537',
        '0927677237',
        '0943588129',
        '1207017755',
        '0941561557',
        '0929088995',
        '0927339143',
        '0550010698',
        '0957115223',
        '0925717365',
        '0943962274',
        '1250252358',
        '0951852805',
        '0958082968',
        '0957415060',
        '0940435316',
        '0929888030',
        '0941227407',
        '0929420305',
        '0929375822',
        '0940094097',
        '0943316224',
        '0957802416',
        '0928997303',
        '0943999250',
        '0941603300',
        '0956726814',
        '0956533277',
        '0950728865',
        '0950832758',
        '0956058598',
        '0929320653',
        '0941100547',
        '0943446617',
        '0931086482',
        '0803372853',
        '0958560856',
        '0957962509',
        '1204736431',
        '0924242738',
        '0942064833',
        '0953621034',
        '0959404351',
        '0930118864',
        '0955512462',
        '0953698313',
        '0955512884',
        '0954968780',
        '1205074667',
        '0924291164',
        '1206912063',
        '0927673897',
        '0956704399',
        '0941791154',
        '0953183258',
        '0922663265',
        '0944329119',
        '0959256553',
        '0941336950',
        '0954191516',
        '0958975237',
        '0928360817',
        '0958274672',
        '0926984899',
        '0850753443',
        '1313784918',
        '0941601064',
        '0943321323',
        '0956378715',
        '1207071448',
        '0940199433',
        '0803117340',
        '0604669440',
        '0930706973',
        '0922814082',
        '0926190802',
        '2100309687',
        '0956895007',
        '0953798634',
        '0944093012',
        '0704159623',
        '0804137636',
        '0922051297',
        '0932363054',
        '0926584657',
        '1207687912',
        '0926609306',
        '0957389307',
        '1104650567',
        '0926640442',
        '1311100729',
        '0928927565',
        '0923410146',
        '0943937334',
        '0940545064',
        '0958051997',
        '0932013311',
        '0943731307',
        '0958869349',
        '0950142745',
        '0942166034',
        '0943716498',
        '1208287563',
        '0954540761',
        '1205412909',
        '0917271165',
        '0950782938',
        '0928172352',
        '0919371153',
        '0942052291',
        '0950012096',
        '0928280403',
        '0955284203',
        '0955023148',
        '0953649480',
        '1208549228',
        '0942960675',
        '1206734384',
        '0954580296',
        '1251040760',
        '1206486472',
        '0953693173',
        '1724171119',
        '0918786674',
        '0956022131',
        '0929138907',
        '0922931464',
        '0959624248',
        '0958940942',
        '0928084375',
        '0802972489',
        '0606213379',
        '0803890516',
        '0804622314',
        '0928541291',
        '0929158525',
        '1205045543',
        '0923665384',
        '0920154333',
        '0952640860',
        '0926838244',
        '1208443802',
        '0921157103',
        '0705366839',
        '0916203714',
        '0950637892',
        '0943503029',
        '0923111587',
        '0944030691',
        '0941633448',
        '0803539212',
        '0928993260',
        '1251055958',
        '1206382994',
        '1202356166',
        '0922673777',
        '0956033047',
        '0707331591',
        '1206129130',
        '0940327513',
        '0928422336',
        '0930526298',
        '0906940671',
        '0951037597',
        '1208544724',
        '1204283178',
        '0931109474',
        '0953178407',
        '1206477034',
        '0958628984',
        '0959185984',
        '0914898069',
        '0930614466',
        '0954751483',
        '0943444513',
        '0940130396',
        '0923609473',
        '0940904238',
        '0952921138',
        '0928878131',
        '0958554297',
        '0957856842',
        '0925247173',
        '0803697283',
        '1204928814',
        '1206393736',
        '0952040939',
        '0928069194',
        '0911438711',
        '0926554361',
        '0943332569',
        '0943909804',
        '1206407221',
        '1205401266',
        '0921245502',
        '0926115213',
        '0940524994',
        '0941091340',
        '1207713106',
        '0950803361',
        '0931047773',
        '1208754331',
        '0932086341',
        '0927559732',
        '0922787817',
        '0942097817',
        '1207334481',
        '0930176359',
        '0952506483',
        '1709171118',
        '0943736561',
        '0942503855',
        '0955033915',
        '0150259661',
        '0953743010',
        '0930493010',
        '0957635295',
        '0958769572',
        '0952504488',
        '0953646015',
        '0929340297',
        '0956167522',
        '0941045601',
        '0944038975',
        '1205909250',
        '0958653297',
        '0940472699',
        '0941393282',
        '0958204026',
        '0202151718',
        '0942233974',
        '0705084028',
        '0927537878',
        '0916406879',
        '0953978491',
        '0930691209',
        '2400468654',
        '0942123530',
        '0704587047',
        '0941158685',
        '0929180925',
        '0920143674',
        '1208800910',
        '0927404053',
        '0918410283',
        '0931512792',
        '0957351208',
        '0927156885',
        '0950712471',
        '0942074204',
        '1205106550',
        '0959422445',
        '0950265520',
        '0952336600',
        '0953872488',
        '0921552717',
        '0921740981',
        '0918999467',
        '0940747702',
        '0942385949',
        '0941336281',
        '0923548044',
        '0959401878',
        '0940179377',
        '0924915861',
        '0925374415',
        '0926475567',
        '2400113318',
        '0930333265',
        '0941803942',
        '0956426019',
        '0943315739',
        '2300588593',
        '0927211581',
        '0929895332',
        '0943859017',
        '0952211811',
        '0955209531',
        '0919952457',
        '0954747648',
        '0952546539',
        '0924739329',
        '0940940968',
        '0958358152',
        '0955044516',
        '0952546703',
        '0923337356',
        '0929975662',
        '0928300607',
        '0915359665',
        '0957166036',
        '0930978796',
        '0951608207',
        '1207638105',
        '0930297882',
        '0923099808',
        '0925655979',
        '0924732522',
        '1206449272',
        '0958540817',
        '0924947849',
        '0952983765',
        '0953778164',
        '0957180904',
        '0926011560',
        '0940997844',
        '1206842716',
        '0928658053',
        '0954201406',
        '1203280555',
        '1206679696',
        '0955616396',
        '0954935193',
        '0920902293',
        '0503679268',
        '0803216530',
        '0951390442',
        '0940024581',
        '1208446367',
        '0951860048',
        '0803147693',
        '2400235129',
        '0929953784',
        '0804355469',
        '0943256297',
        '1803155553',
        '0955106232',
        '0931139281',
        '0953523586',
        '0501857353',
        '0921830121',
        '0929778959',
        '0928678028',
        '1206012880',
        '0954041836',
        '0940547185',
        '1104677750',
        '0953301710',
        '0942364431',
        '0927374470',
        '0944272442',
        '1207770411',
        '0929764561',
        '0707277570',
        '0955610381',
        '1206843607',
        '0940991607',
        '0951901933',
        '0941700411',
        '0952777332',
        '0941814774',
        '0926304239',
        '1207180942',
        '1250277579',
        '0956846851',
        '0950932145',
        '0954426458',
        '0940233224',
        '0927878918',
        '0955874441',
        '0926385477',
        '0954991139',
        '0951953769',
        '0943832667',
        '1206813089',
        '0927277137',
        '1204437972',
        '2400300931',
        '1207254341',
        '0921847828',
        '0951894385',
        '0606230944',
        '0929966455',
        '0940493513',
        '0956174015',
        '0952133718',
        '1207965805',
        '0930117643',
        '1206599522',
        '0929177574',
        '0941138737',
        '0940178338',
        '0942096074',
        '0940208044',
        '0932654817',
        '0951273127',
        '0805349370',
        '0803416379',
        '1206993477',
        '1204471856',
        '0926660325',
        '1208475879',
        '0958447435',
        '0929300945',
        '1205975731',
        '0953869849',
        '0923279301',
        '0955310602',
        '1725737652',
        '0954991493',
        '0925768061',
        '0931509780',
        '0957090467',
        '0850830894',
        '0941642787',
        '0804049252',
        '0953701091',
        '1205838103',
        '0958573487',
        '0923373153',
        '1726091976',
        '0953617495',
        '0929962694',
        '0929996783',
        '0952569838',
        '0957061849',
        '0941929333',
        '0956649859',
        '1205379926',
        '0930325451',
        '1311221038',
        '0929214948',
        '0940914278',
        '0955548599',
        '1803843182',
        '0926186628',
        '0941432684',
        '0928522077',
        '1208347581',
        '0925071490',
        '0503741209',
        '0105542443',
        '0930560446',
        '0941559304',
        '0940390131',
        '1727262709',
        '0940883572',
        '1205699299',
        '1206955625',
        '0940561301',
        '0926348806',
        '0940896608',
        '0926780297',
        '0941320681',
        '0957427818',
        '0956144927',
        '0940604952',
        '0925613119',
        '0706747698',
        '0954244091',
        '0950227132',
        '0926696675',
        '0929812576',
        '0919144881',
        '0921457792',
        '0926028325',
        '0940163041',
        '0940518723',
        '0927775072',
        '0929481091',
        '0927823088',
        '0707265096',
        '0929600658',
        '0940807837',
        '0952981801',
        '1206707869',
        '0941129306',
        '0925334864',
        '0951753136',
        '0923202345',
        '0958824302',
        '0942468588',
        '0930481320',
        '0802845990',
        '1250128558',
        '0922499389',
        '0919416495',
        '0925193484',
        '0927490680',
        '0955492822',
        '0919359273',
        '0940110596',
        '2300763246',
        '0803016856',
        '1308576899',
        '0931420947',
        '0951783398',
        '0929612844',
        '0944176437',
        '1207452523',
        '0928251784',
        '0202342630',
        '0923241681',
        '0943047811',
        '0943302604',
        '0956427884',
        '0926879917',
        '0941156242',
        '1758233959',
        '0931261358',
        '0952105310',
        '0931764559',
        '0926699695',
        '0923577928',
        '0952803351',
        '1205703448',
        '1207375880',
        '1950086460',
        '0929829067',
        '0924195514',
        '0925030520',
        '1207263888',
        '0922130224',
        '1204559726',
        '1207866201',
        '0922181870',
        '0928345859',
        '0925869836',
        '1205599309',
        '0921632824',
        '0942236332',
        '0954765673',
        '0802910992',
        '0942675018',
        '0927481622',
        '0957540974',
        '0940686504',
        '0954107801',
        '0910073956',
        '0201719895',
        '0940311608',
        '0941908667',
        '0705231298',
        '1208406387',
        '1250404165',
        '0951965912',
        '0954914115',
        '0952780245',
        '1205417320',
        '0925712671',
        '0851323600',
        '0922025267',
        '0928487271',
        '1207861798',
        '1207317221',
        '0927005983',
        '0850430448',
        '0955899547',
        '0941231862',
        '0918469875',
        '0929858637',
        '0944176262',
        '1207815901',
        '1206219675',
        '0940814023',
        '0959279563',
        '0931341960',
        '0944209600',
        '0940113574',
        '0957872641',
        '0941113839',
        '0951519768',
        '0927337907',
        '0927855593',
        '0944240282',
        '0953437027',
        '0944306729',
        '0923096465',
        '0940579154',
        '0952777563',
        '0941689994',
        '0150696946',
        '0850985474',
        '1207307156',
        '0956721369',
        '0929946002',
        '1600721813',
        '0930338454',
        '0916696412',
        '0922896303',
        '0921870192',
        '0921079653',
        '1206721811',
        '1204931313',
        '0930320304',
        '1207144666',
        '1401264591',
        '1206123950',
        '0951363464',
        '0954601332',
        '0952739597',
        '0951862440',
        '0961190634',
        '0920954203',
        '0941161143',
        '0950888388',
        '0940858897',
        '1727144386',
        '1205333683',
        '0926973710',
        '1804450805',
        '0927991786',
        '0941107120',
        '0944108315',
        '0917888257',
        '0805156973',
        '1206952994',
        '0953375466',
        '0955029137',
        '0941584351',
        '1203493513',
        '0941640211',
        '0941139016',
        '2400005159',
        '1207475060',
        '0959185265',
        '0802223800',
        '0958554701',
        '0958456618',
        '0926363128',
        '1208006765',
        '0941333536',
        '0803282193',
        '0942342619',
        '0941470809',
        '1207179951',
        '1720714706',
        '0952104941',
        '0942028028',
        '0952358893',
        '0952039022',
        '0924898174',
        '0940491376',
        '0941162448',
        '0958702730',
        '0850634346',
        '1207081215',
        '0941240376',
        '1206006510',
        '1002279634',
        '0927415208',
        '0952270254',
        '0931115182',
        '0941911836',
        '1729845451',
        '0951547793',
        '0951588995',
        '0929263952',
        '0929145936',
        '0958079220',
        '1724968852',
        '0951818566',
        '0941929911',
        '0952146934',
        '0941188252',
        '0803343110',
        '0940735822',
        '0958241960',
        '0956938476',
        '0954940201',
        '1729835023',
        '0928132620',
        '0954152195',
        '0952810596',
        '0918979378',
        '1207165752',
        '1207271444',
        '0929461507',
        '0606277614',
        '0954931176',
        '0951706241',
        '0958468894',
        '0944377845',
        '1207978790',
        '0943408161',
        '1206619437',
        '1204903049',
        '0921759924',
        '0954549218',
        '0955660162',
        '0940718612',
        '0924134968',
        '0705236784',
        '0929873610',
        '0928989896',
        '0951769736',
        '0925927097',
        '0943339440',
        '0929323871',
        '1207381326',
        '1315274124',
        '0927983395',
        '0955877097',
        '0919701250',
        '0926977695',
        '0802532887',
        '0959126236',
        '0941652760',
        '0954440459',
        '0955801246',
        '1250915533',
        '0940212251',
        '0923709968',
        '0959273368',
        '0919504514',
        '0921465548',
        '0930854351',
        '0958452625',
        '0804793453',
        '0957347768',
        '0943310847',
        '0931312037',
        '0954018503',
        '0953039294',
        '0928832849',
        '0943322115',
        '0952013720',
        '0941410797',
        '0957605108',
        '0955693601',
        '1208593663',
        '0929864213',
        '0929194074',
        '0950389833',
        '1205175985',
        '0951928001',
        '0941227308',
        '0921226015',
        '0959435074',
        '1709303208',
        '1206791418',
        '0950878892',
        '0926860958',
        '0951796523',
        '0921738266',
        '0944253939',
        '0940720741',
        '0803151471',
        '0941325243',
        '0921007977',
        '0924816200',
        '0955040001',
        '0919867465',
        '0956129431',
        '0958089864',
        '1204607772',
        '0930688486',
        '0954989778',
        '0951699107',
        '0951352806',
        '0952552503',
        '0802559278',
        '0928360551',
        '0957365802',
        '0942282294',
        '0929147916',
        '0931105670',
        '0932321201',
        '1208527117',
        '1207148865',
        '2200348049',
        '0605951995',
        '0957502339',
        '0955581905',
        '0951803915',
        '0923213987',
        '0951044411',
        '0941062960',
        '0931187652',
        '0955276886',
        '0954206967',
        '0952834331',
        '0953703063',
        '0951810423',
        '0941612434',
        '0950557249',
        '0951923028',
        '1723432975',
        '0955324181',
        '0959147265',
        '0928372770',
        '0954082384',
        '0940095813',
        '0931542484',
        '1208576692',
        '0932322662',
        '0928985035',
        '0957564032',
        '0953283843',
        '0955613930',
        '1208548428',
        '0803309897',
        '0942394719',
        '0941334922',
        '0929370153',
        '0958193401',
        '0958691867',
        '0944375153',
        '0954930053',
        '0926277203',
        '0952399210',
        '0955726385',
        '0955539481',
        '1206643692',
        '0927171892',
        '0956780142',
        '0917804569',
        '0958795387',
        '1250287032',
        '0943274431',
        '1308075983',
        '0929455483',
        '0940923295',
        '0920736923',
        '0921244562',
        '1314521582',
        '0952160752',
        '0942653429',
        '0650250764',
        '0931177646',
        '0923091417',
        '0951015486',
        '1205817453',
        '0942242553',
        '0959442823',
        '0940481211',
        '0924881717',
        '0940504574',
        '0925458341',
        '0953110772',
        '0922006572',
        '0928062488',
        '0850852500',
        '0951513951',
        '0923948178',
        '0802183251',
        '1207360841',
        '0957684434',
        '0602984569',
        '0954380226',
        '0951730993',
        '0925672198',
        '0926890658',
        '0932560253',
        '0953056876',
        '1205095860',
        '0931341820',
        '1207016724',
        '0954085858',
        '1315692135',
        '0940499668',
        '0803656800',
        '0941600025',
        '0941958290',
        '0926920422',
        '0954099834',
        '1103733703',
        '0940824659',
        '0929645059',
        '0950557165',
        '0927671784',
        '1719972026',
        '0950310953',
        '0930037221',
        '0954195061',
        '1206982363',
        '0953959707',
        '0942433905',
        '1207269711',
        '1205074329',
        '0941543209',
        '1250535943',
        '0927527028',
        '0106007610',
        '0952439933',
        '0953346954',
        '0914191887',
        '1207007848',
        '0943692053',
        '0951960939',
        '0944262633',
        '0942090093',
        '0926614009',
        '0932526510',
        '1203487499',
        '1250843594',
        '1250619119',
        '0850248733',
        '0943778308',
        '0929085074',
        '0942073941',
        '0942487083',
        '0943519033',
        '0943380634',
        '0928096965',
        '0921004743',
        '1203803836',
        '0925611675',
        '1207857028',
        '0956129506',
        '0940558620',
        '1317404216',
        '0927458943',
        '0922262761',
        '0922566237',
        '0952080372',
        '0953429768',
        '0919619619',
        '0943993683',
        '0953170495',
        '1206265959',
        '0927385294',
        '0956433528',
        '0943816223',
        '0940376445',
        '0923399893',
        '0921338794',
        '0956483507',
        '1204082778',
        '0921594495',
        '0927444034',
        '0927802587',
        '0925608119',
        '0950535120',
        '0804380087',
        '0956038731',
        '0958621377',
        '0929052686',
        '0940656671',
        '0926822057',
        '0942240839',
        '0941792954',
        '0929202158',
        '0930031828',
        '1207252667',
        '0952039600',
        '0919694679',
        '0952417103',
        '1729951085',
        '0959029729',
        '0954811972',
        '0927157826',
        '0943478081',
        '0957469836',
        '1313666321',
        '1250861141',
        '0957570518',
        '0940104342',
        '0943043174',
        '1250673348',
        '0930574066',
        '0940968936',
        '0930276209',
        '0943519850',
        '1207594993',
        '0958965204',
        '0924943608',
        '0943045062',
        '0955024294',
        '0957065394',
        '0804591410',
        '0940228190',
        '0957514631',
        '0950505172',
        '0927957126',
        '0952708014',
        '0803401785',
        '0957784234',
        '0940119787',
        '0850044579',
        '0850835075',
        '0940817711',
        '0928067305',
        '0955325501',
        '0914916549',
        '0950174664',
        '1208038297',
        '0957921950',
        '0928955145',
        '0952835148',
        '0924602196',
        '1206614032',
        '1207241215',
        '1206282723',
        '0944165463',
        '0925519134',
        '1205471772',
        '0603721515',
        '0942125774',
        '0930170030',
        '0958128753',
        '0930086632',
        '0923601413',
        '0931132062',
        '0922565148',
        '0803398122',
        '0940875123',
        '0922958574',
        '1251243943',
        '1208745222',
        '0951540665',
        '0950670059',
        '0942613803',
        '0921334504',
        '0956828719',
        '0957462559',
        '1207679562',
        '0924241243',
        '0957390297',
        '0950030890',
        '0923195143',
        '0952859742',
        '1207545789',
        '0928173533',
        '0503717902',
        '0927217836',
        '1207262831',
        '0940613714',
        '0604807370',
        '0944341551',
        '0929588085',
        '0950213603',
        '0929858322',
        '0943689075',
        '1250964358',
        '0952810505',
        '0940324171',
        '0850412735',
        '0944342799',
        '0929818854',
        '0606216174',
        '0925493900',
        '0958215246',
        '0927958249',
        '0922365622',
        '0959010133',
        '1207679505',
        '0942709999',
        '0943914812',
        '0929174985',
        '0959395856',
        '0957935943',
        '0951695154',
        '0930559828',
        '0929051787',
        '0926619941',
        '0957608334',
        '0928068774',
        '0931310874',
        '0952111961',
        '0955603477',
        '0942119249',
        '1207015296',
        '0951753607',
        '0924284896',
        '0941021321',
        '0956671846',
        '0950885145',
        '0941504268',
        '0928034776',
        '0941358053',
        '0927005330',
        '0926826777',
        '0959061029',
        '0706568375',
        '0932490592',
        '1207486539',
        '0940388580',
        '0941229528',
        '0922616313',
        '0803666809',
        '0931489470',
        '0940582620',
        '0951148253',
        '0956890909',
        '2450554783',
        '0952828838',
        '0952012896',
        '0955870548',
        '0943832469',
        '0942093402',
        '2300492663',
        '0956446306',
        '1724810963',
        '1729832640',
        '0955729322',
        '0942327198',
        '0943949305',
        '0955814298',
        '0951576982',
        '0952450583',
        '0951521830',
        '0954679239',
        '0941897837',
        '0950987560',
        '1205326075',
        '0805368396',
        '0924945504',
        '0940356199',
        '0943619189',
        '1207150101',
        '0950221812',
        '0959306606',
        '0928150523',
        '0952503886',
        '0924015787',
        '0956632764',
        '0953217825',
        '0929856540',
        '0956414585',
        '0941598724',
        '0943648642',
        '0942443490',
        '0940511512',
        '0942221375',
        '0929831691',
        '1206922245',
        '0941492795',
        '0928069723',
        '0943603365',
        '0928646322',
        '0915977292',
        '0925739443',
        '0928682004',
        '0943866871',
        '0927852574',
        '0940016629',
        '1206925560',
        '0921638425',
        '0928840453',
        '0958808479',
        '0952347565',
        '1207298736',
        '0923421150',
        '0927908780',
        '0805343977',
        '0804526143',
        '0958348674',
        '0942056557',
        '0940538143',
        '0940657083',
        '0944320985',
        '0941499329',
        '0951914332',
        '0954126694',
        '1206137281',
        '0941050528',
        '0941484669',
        '0940511108',
        '0951899368',
        '1207817766',
        '0928262005',
        '0932032535',
        '0929076263',
        '1206645341',
        '0920999877',
        '0919584961',
        '0942061250',
        '0921696472',
        '1207223262',
        '0928374420',
        '0202235859',
        '1205962788',
        '0927258954',
        '0928684083',
        '0923767842',
        '0503582157',
        '0940122971',
        '0943099812',
        '0950107839',
        '0927424721',
        '0927354852',
        '0953507977',
        '0955336920',
        '0940360118',
        '0955591805',
        '0929609048',
        '0950547935',
        '0952772812',
        '0953418712',
        '0955371794',
        '0959210709',
        '1208617009',
        '0940447576',
        '1205891276',
        '0954856068',
        '0107900821',
        '0922478466',
        '0803880822',
        '0929972867',
        '1207957075',
        '0957242969',
        '0956750913',
        '0952330918',
        '0941764136',
        '1250710017',
        '0918124900',
        '0940312341',
        '1207606128',
        '0929338317',
        '0953333408',
        '0944308733',
        '0953757341',
        '0954392676',
        '0954792206',
        '0951510973',
        '0952032035',
        '0924503337',
        '1207707256',
        '0950984468',
        '0702634387',
        '0952751014',
        '0928468891',
        '0953524832',
        '0952373090',
        '0953368065',
        '1206216416',
        '0955928932',
        '0940562721',
        '0923074298',
        '0941385445',
        '0924301641',
        '0954774436',
        '0940357148',
        '0952426310',
        '0956301956',
        '0929851525',
        '0951319292',
        '0920023769',
        '0932294085',
        '0919825687',
        '0951109578',
        '1756013072',
        '0924470842',
        '0953411576',
        '0943630020',
        '0927524165',
        '0950823765',
        '0943670117',
        '1207886159',
        '0803680503',
        '0931119507',
        '0953837002',
        '0928331370',
        '0958783490',
        '0953362308',
        '1206671727',
        '1729753515',
        '0941201626',
        '1206730747',
        '1207145523',
        '0951886019',
        '0942986738',
        '0930664461',
        '0925896904',
        '0927983627',
        '0959385253',
        '0921239109',
        '0953032232',
        '0916221872',
        '0929965689',
        '0943728873',
        '0940906795',
        '1206586982',
        '0928873850',
        '0923005482',
        '0958119208',
        '0952810588',
        '0927480426',
        '0928369362',
        '0919069609',
        '1208058261',
        '0804022317',
        '0944197359',
        '0803049980',
        '1207455112',
        '0940586456',
        '0956925341',
        '0928203462',
        '0105236228',
        '0914887567',
        '0922933361',
        '0918195835',
        '1311075657',
        '0202329009',
        '0955058185',
        '0803551340',
        '0943517060',
        '1207778455',
        '0940607716',
        '1206663187',
        '1315222149',
        '0929809200',
        '0943251207',
        '0959346727',
        '0923000822',
        '2300083140',
        '1207562545',
        '0941884025',
        '0929859478',
        '1207786136',
        '0929859452',
        '1207304823',
        '0927634345',
        '0802237834',
        '0928173723',
        '0926446295',
        '0957912181',
        '0928731439',
        '0956679625',
        '0921966610',
        '1250366752',
        '0943220632',
        '1003407390',
        '0954145033',
        '0927476085',
        '0952537488',
        '0940917453',
        '0926862954',
        '0955288634',
        '0956568182',
        '1207062983',
        '1250139993',
        '0942053554',
        '0850978537',
        '1208615375',
        '0804121820',
        '0605046796',
        '1206628388',
        '1204509366',
        '0923611131',
        '0956162440',
        '0920824901',
        '0958995003',
        '0923187660',
        '0921618674',
        '0605502970',
        '0956519359',
        '0958146896',
        '0926787573',
        '0923706246',
        '0944043066',
        '0953150695',
        '0926470188',
        '0926586363',
        '0942739574',
        '0955380456',
        '0942873688',
        '0928326966',
        '0912880143',
        '0958157943',
        '0943132118',
        '0927953851',
        '0922974183',
        '0941326977',
        '0802950105',
        '0927677518',
        '0942998006',
        '0940956774',
        '1206987172',
        '0956606206',
        '1250464151',
        '0953348760',
        '0953162047',
        '0956804876',
        '1206092221',
        '0959453119',
        '0950618199',
        '0940060262',
        '0926100546',
        '0950371187',
        '0943761700',
        '0951747112',
        '1206981720',
        '0942482811',
        '0943615567',
        '1250115159',
        '0955285960',
        '1208122547',
        '1204701252',
        '0927987099',
        '1250187620',
        '0955802111',
        '1251147797',
        '1752677854',
        '0928064195',
        '1205518796',
        '0942898750',
        '0957906464',
        '0959091380',
        '0958999534',
        '1208339703',
        '0940450562',
        '1207415702',
        '0958286791',
        '0928424407',
        '0957704356',
        '0930872908',
        '0943175869',
        '0926920869',
        '0940072242',
        '0803203959',
        '0927959973',
        '0924184179',
        '1204039752',
        '0944233469',
        '0928096437',
        '0802393447',
        '0957064868',
        '0803607647',
        '1204265209',
        '0940103906',
        '0932564230',
        '0943116079',
        '0919326843',
        '0923711931',
        '0803198290',
        '0926192469',
        '1719052936',
        '0941898041',
        '1206414011',
        '0941649881',
        '0940837750',
        '0928770056',
        '0915555791',
        '0705498491',
        '0928058502',
        '0503745465',
        '0951307230',
        '0923742191',
        '0954390860',
        '0951896141',
        '0955691563',
        '0942072224',
        '0926230483',
        '0930302278',
        '2350890667',
        '0925680399',
        '0955095609',
        '0919982223',
        '0940714934',
        '0926262130',
        '0953295805',
        '0952021376',
        '0930252002',
        '0922814447',
        '0958985012',
        '0941799884',
        '0952873842',
        '1312999376',
        '0944357557',
        '0914016571',
        '0927803932',
        '1203858467',
        '0953042637',
        '0953789229',
        '0924655624',
        '0940644412',
        '0958903338',
        '0929185650',
        '1205600438',
        '0922716535',
        '0924838741',
        '1207018845',
        '0928264753',
        '1206112813',
        '0929705218',
        '0940698079',
        '0930996053',
        '0932030125',
        '0922439658',
        '0958988198',
        '0924217136',
        '0916748569',
        '0957339674',
        '0928582279',
        '1207673011',
        '0954779948',
        '0950110254',
        '0929079622',
        '0943236984',
        '0914230388',
        '0958298226',
        '0955682091',
        '0950677799',
        '0943402511',
        '1251190821',
        '0929064244',
        '0940145410',
        '0950952911',
        '0921772406',
        '1004026678',
        '0957169816',
        '0942473653',
        '0921762365',
        '0928045178',
        '0959481201',
        '1206856732',
        '0921781449',
        '0955578570',
        '2450468208',
        '0958619926',
        '0929853059',
        '0952897759',
        '1207989656',
        '0926551680',
        '0802237503',
        '0927317172',
        '0940079296',
        '0804193795',
        '0955161377',
        '0926408030',
        '0923847511',
        '0926472366',
        '0921891958',
        '0803244441',
        '2300135270',
        '1207842368',
        '0941327447',
        '0954599346',
        '0923770804',
        '0951800713',
        '0924830219',
        '1203134471',
        '0916515471',
        '0919916296',
        '1204649295',
        '1205760349',
        '0953942638',
        '0952009637',
        '0957550973',
        '0958299232',
        '0940229974',
        '0940099757',
        '1729754018',
        '1250855853',
        '0928912534',
        '0928092931',
        '0941495681',
        '0931015093',
        '0704952548',
        '0941540619',
        '0941917932',
        '0940329303',
        '1206341685',
        '0953335510',
        '1723386726',
        '0943305201',
        '1206879411',
        '0920868502',
        '0924907488',
        '0926999442',
        '0942242504',
        '0940145436',
        '0932048085',
        '0922601752',
        '0942092289',
        '1205711953',
        '0921659306',
        '1205701343',
        '1206425470',
        '0928399401',
        '0921333845',
        '1207289693',
        '0956834923',
        '0958522328',
        '0941157984',
        '1207156868',
        '0955182209',
        '0940149255',
        '0803912351',
        '0956229876',
        '0942782285',
        '0804026821',
        '0940494586',
        '0952061976',
        '0955771241',
        '1804943106',
        '0959037128',
        '0958289902',
        '0950567966',
        '0929052678',
        '1206330944',
        '0942858127',
        '0929856607',
        '0941219073',
        '0955447289',
        '0925577215',
        '0925324519',
        '1722981071',
        '0940317126',
        '0914058854',
        '0920990777',
        '0957570393',
        '1205024241',
        '0941331910',
        '0929190734',
        '0850859901',
        '0927157727',
        '0940005176',
        '1317958690',
        '1208691509',
        '0958474140',
        '0916610645',
        '0958635476',
        '0930029053',
        '0940365844',
        '0805301926',
        '0956495196',
        '0954479994',
        '0950406264',
        '0953404530',
        '0943547414',
        '0750991242',
        '0955447867',
        '0958229528',
        '1206905224',
        '0959030644',
        '0958234635',
        '1205097049',
        '0958491672',
        '0957688757',
        '1207616440',
        '0925186009',
        '0956271357',
        '1206357855',
        '0955692306',
        '0957692775',
        '0929880136',
        '1206979112',
        '0802925610',
        '0804558328',
        '0942197385',
        '0955351796',
        '0930632807',
        '0919600171',
        '0927869149',
        '1205268673',
        '1310398399',
        '1600449811',
        '0921999041',
        '0918898487',
        '0926275819',
        '0605426881',
        '0944247808',
        '0922358221',
        '0940403686',
        '0929966166',
        '0956840417',
        '0920540820',
        '0942436148',
        '0942590076',
        '0928342203',
        '0952102622',
        '0959019183',
        '0943949768',
        '0962495107',
        '0953693926',
        '0957649650',
        '0941615395',
        '0928649854',
        '0954586707',
        '0921764759',
        '0941982050',
        '0943363291',
        '0956881270',
        '0953411774',
        '0955502166',
        '0927345603',
        '0952656056',
        '0942432659',
        '0954508917',
        '0952489946',
        '1204916843',
        '0917777971',
        '0927678276',
        '0926999905',
        '0943635532',
        '1250343041',
        '0803835255',
        '0953454063',
        '0957276033',
        '0925716235',
        '1208531143',
        '0953441938',
        '0923503759',
        '0959085895',
        '1251171326',
        '1205708967',
        '0940175813',
        '0923877625',
        '0929649598',
        '0954686945',
        '0928795608',
        '0941611915',
        '0929466589',
        '0953299864',
        '1206618975',
        '0959394990',
        '0950372896',
        '0929045623',
        '0928818137',
        '0958566887',
        '0942381195',
        '0942697491',
        '0955468343',
        '0919042135',
        '1206971259',
        '0942774597',
        '1206399535',
        '1204396475',
        '0202456018',
        '0943539544',
        '0941317364',
        '0917942484',
        '0958552218',
        '0929994549',
        '0804513265',
        '0956012793',
        '1755146675',
        '0958569576',
        '0955780937',
        '0941498800',
        '0942356338',
        '0955516620',
        '0930858840',
        '0922974498',
        '0929004166',
        '0955899398',
        '0953314705',
        '0932039001',
        '0929713089',
        '0927623710',
        '0951702729',
        '0942453267',
        '0943623207',
        '0940110588',
        '0941738080',
        '0923966840',
        '0928067685',
        '0954723680',
        '0943762260',
        '0954999843',
        '0954287116',
        '0202436465',
        '0940120116',
        '0923331102',
        '0917810590',
        '0925174559',
        '1310880230',
        '0951072859',
        '0950943993',
        '0924691454',
        '0954378840',
        '0804324630',
        '0953822269',
        '0954061263',
        '0951838119',
        '0951305820',
        '0953570033',
        '0943478628',
        '0922501978',
        '0958013641',
        '0957729825',
        '0850658519',
        '1207640077',
        '0952037273',
        '0943868976',
        '0959097627',
        '0944297050',
        '0941469066',
        '1250123195',
        '0950601526',
        '0952550242',
        '0941432353',
        '0916226095',
        '0940703531',
        '1314633726',
        '0929778702',
        '0850267717',
        '0929709533',
        '0923902050',
        '0941238438',
        '1204628166',
        '0940407752',
        '0950902783',
        '2350176620',
        '0925038259',
        '0929177020',
        '0923796783',
        '0503742033',
        '1204352346',
        '1004217749',
        '0803663541',
        '0941953598',
        '0926847419',
        '0930667654',
        '0928154525',
        '1312407362',
        '1250214390',
        '0929082139',
        '1804479804',
        '0940388614',
        '0951164102',
        '0943479220',
        '0705700169',
        '0929972537',
        '0928252634',
        '1207332105',
        '0943646075',
        '1251013742',
        '0922410667',
        '0929938348',
        '0957411085',
        '0957875388',
        '0944265883',
        '0954021960',
        '0923602536',
        '0920994274',
        '1317438396',
        '0928256304',
        '0926484668',
        '0940586449',
        '0942838897',
        '0928131143',
        '0957872732',
        '0941117905',
        '0919418509',
        '0955928254',
        '0953047420',
        '0940311491',
        '0940194434',
        '0929911469',
        '0925385015',
        '0942365610',
        '0928898154',
        '1208936300',
        '0941777021',
        '0931785224',
        '0956004485',
        '0956942403',
        '0957218761',
        '0929053650',
        '0955338926',
        '2450694449',
        '0952515898',
        '0950635649',
        '0958181398',
        '0951840594',
        '0952482370',
        '0957372857',
        '0941601262',
        '0953465259',
        '0958142762',
        '0951857812',
        '0951616358',
        '0941575052',
        '2351143967',
        '0928573369',
        '1206817734',
        '0956756159',
        '0954940797',
        '0957499783',
        '1207322874',
        '0927439448',
        '0958457418',
        '0943163378',
        '0927423392',
        '1351392756',
        '0940914328',
        '1207012715',
        '1208146884',
        '0927422592',
        '0957017460',
        '0954795894',
        '0951254036',
        '0942366626',
        '0954568093',
        '0958360638',
        '0941184715',
        '1207547454',
        '0804514404',
        '0804190635',
        '0956756399',
        '0919790196',
        '1309027165',
        '0943665760',
        '0915071229',
        '0927678730',
        '0958949471',
        '0927688374',
        '1206812867',
        '2300191794',
        '0925222002',
        '1207276997',
        '0923537559',
        '0959313446',
        '0928257450',
        '0940311962',
        '0803072941',
        '0953813607',
        '0927957480',
        '1207694207',
        '0951732288',
        '0958827644',
        '0931138358',
        '0805056363',
        '0928487263',
        '0924672579',
        '1208393080',
        '0956880256',
        '0952438901',
        '0941072506',
        '0943160275',
        '0941567604',
        '0950080119',
        '0954586749',
        '0957192586',
        '0954228144',
        '0950808147',
        '0944339381',
        '0956056063',
        '1206974709',
        '0932425556',
        '0957285398',
        '0944284702',
        '0803406388',
        '0942242587',
        '0954707360',
        '0921006342',
        '1250982855',
        '0958770000',
        '0918229436',
        '0605606292',
        '0940298458',
        '0954797809',
        '1207057330',
        '0958512402',
        '1208414415',
        '0950557629',
        '1208774362',
        '1105081101',
        '0943444356',
        '1251084636',
        '0928267996',
        '0953556511',
        '0941439366',
        '0941421414',
        '1206827576',
        '0926975509',
        '1313472670',
        '0929522605',
        '1311132821',
        '0950735589',
        '0940695877',
        '0923511059',
        '0804116929',
        '0942070772',
        '0927531913',
        '0941487076',
        '0927978999',
        '0302525902',
        '0940109481',
        '0951885292',
        '1205171224',
        '0606104867',
        '0920834900',
        '0955625546',
        '1207040237',
        '0850076886',
        '1205529462',
        '0927310623',
        '0930993738',
        '0952594877',
        '0956883680',
        '0928187566',
        '1312482753',
        '1750859512',
        '1250801527',
        '0950873067',
        '0940660384',
        '0951303965',
        '0929145654',
        '1103124606',
        '1207746692',
        '0940702368',
        '0929722932',
        '0930958608',
        '0921287728',
        '0950250878',
        '0944212596',
        '0956810568',
        '0951502574',
        '0914032974',
        '0919410274',
        '0930972823',
        '0928322718',
        '1205914441',
        '0927151894',
        '0952405926',
        '1206899674',
        '0929005379',
        '1251070148',
        '0928069780',
        '0940516941',
        '0953575487',
        '0956755888',
        '0916697204',
        '0802644419',
        '1718264136',
        '0956019996',
        '0958744419',
        '0944180702',
        '0925044349',
        '0944266865',
        '1251375521',
        '0943085860',
        '1208030039',
        '0929216430',
        '0930164611',
        '0951950500',
        '1205227539',
        '0703422956',
        '0913283701',
        '1207057785',
        '0926844911',
        '0931159537',
        '0950387035',
        '0940096738',
        '0941149346',
        '0942974551',
        '0950547893',
        '0940425093',
        '0930961263',
        '0707058939',
        '0950987404',
        '0928260181',
        '0923484638',
        '0959293796',
        '0951993922',
        '0920752714',
        '0958195729',
        '0943692467',
        '0930998596',
        '0919722439',
        '0955792858',
        '1601077611',
        '0926411885',
        '0929074342',
        '0957086267',
        '0926474529',
        '0923300172',
        '0919370098',
        '0956799167',
        '0951517184',
        '0951809615',
        '0954288023',
        '0953782158',
        '0958903346',
        '0952086718',
        '0942440801',
        '0929438117',
        '0941647968',
        '0930103353',
        '1204630741',
        '0950094789',
        '0942654047',
        '0941065302',
        '0931003669',
        '0706306453',
        '0802491183',
        '0943738260',
        '0922046636',
        '0928586064',
        '0928440908',
        '0942451303',
        '0941803173',
        '0942775610',
        '0954862017',
        '0928544667',
        '0931040562',
        '0952583375',
        '0953482049',
        '0940098262',
        '0926479494',
        '0951608033',
        '1205362211',
        '0703934570',
        '2450578436',
        '0914703483',
        '0804149086',
        '0950842799',
        '1206954339',
        '0916324379',
        '0928551886',
        '0926612466',
        '1206263392',
        '0301905253',
        '0944115492',
        '0920301520',
        '0966206013',
        '0955004395',
        '0941728347',
        '0942479692',
        '0952995397',
        '0941859035',
        '0920559796',
        '0920378502',
        '0929776466',
        '0928062074',
        '0926349549',
        '1208587863',
        '0959361650',
        '0954069704',
        '0942256884',
        '0955675426',
        '0943500892',
        '0925194482',
        '0951623123',
        '1205737040',
        '0955680947',
        '0929763530',
        '0925179566',
        '1207778240',
        '0921745477',
        '1725419343',
        '0951921642',
        '0941166696',
        '0942308123',
        '0952155372',
        '0919409649',
        '0957029994',
        '0927433680',
        '0954016846',
        '0930784384',
        '0927613661',
        '0923185466',
        '0926399221',
        '0952607976',
        '0940918980',
        '0944014869',
        '0942393992',
        '0943686352',
        '0915975544',
        '0965282452',
        '0918506973',
        '0921060984',
        '0923208912',
        '0953603677',
        '0803877067',
        '0915505721',
        '0919289462',
        '0929829273',
        '2200366710',
        '1207010511',
        '0931771729',
        '0954580346',
        '0706981966',
        '0955562871',
        '0927953034',
        '1208204493',
        '0955317664',
        '1205238288',
        '0928926252',
        '0924251291',
        '0918869421',
        '0924665391',
        '1250782248',
        '1207731363',
        '0941366106',
        '0923603724',
        '0956763536',
        '0924475189',
        '0950636233',
        '1205261504',
        '0957699549',
        '1250116645',
        '1727238790',
        '0959081092',
        '0929907723',
        '0943783639',
        '0955746664',
        '0950602375',
        '0927956433',
        '0950228361',
        '0927007732',
        '0940094865',
        '0955915780',
        '2350582884',
        '0930131644',
        '0943730606',
        '0940449648',
        '0929118800',
        '1250973722',
        '0941252884',
        '0950960021',
        '1208645877',
        '0951850601',
        '0929892289',
        '1718105651',
        '0929968154',
        '0954032249',
        '0804095362',
        '0956921381',
        '1308774882',
        '0922707542',
        '0202544144',
        '0954841508',
        '0932015381',
        '1203218225',
        '0705498400',
        '0805261443',
        '0804421535',
        '0917503856',
        '0950950204',
        '0915901920',
        '0941107963',
        '1205095647',
        '0922008388',
        '1206150904',
        '0940451248',
        '0803313220',
        '0920512704',
        '1721568606',
        '0929951630',
        '0954752358',
        '1206569830',
        '0942247677',
        '0944008598',
        '0942310095',
        '0954136727',
        '0942115973',
        '0958560955',
        '0952402790',
        '0923662878',
        '1250218466',
        '0957854748',
        '0930992524',
        '1729904803',
        '1208761666',
        '0931500961',
        '0941503781',
        '0951593995',
        '0958000135',
        '0929367928',
        '0942958398',
        '0850038944',
        '0803405174',
        '0750122178',
        '1207874783',
        '0953621745',
        '0850578683',
        '0921023792',
        '1800699108',
        '0920024817',
        '0955940069',
        '1250429535',
        '0923541627',
        '0951644707',
        '0929205342',
        '0804608438',
        '0931304778',
        '1724097249',
        '0941100331',
        '0920741204',
        '1207743012',
        '0928546431',
        '0930665542',
        '0952923944',
        '0920489770',
        '0951764786',
        '1351317464',
        '0958332900',
        '0954882403',
        '0942264946',
        '0957731185',
        '0931275952',
        '0926496449',
        '0940301187',
        '1205364878',
        '0954507109',
        '1205432261',
        '1250085873',
        '0940111891',
        '1251302541',
        '0930148614',
        '0923010789',
        '0850961467',
        '1250495601',
        '0943053108',
        '1205660424',
        '0924746332',
        '0923543201',
        '0918011164',
        '0953695806',
        '0920708856',
        '1208822575',
        '0929387082',
        '0929674299',
        '0706681699',
        '0951313097',
        '1250115233',
        '1307773216',
        '0928950096',
        '0923075733',
        '0930421540',
        '0953975752',
        '0919484923',
        '0926815622',
        '0802273201',
        '0942479957',
        '0915724132',
        '1203090921',
        '0802731844',
        '1207919083',
        '0802880260',
        '1208629095',
        '0943605519',
        '1205573619',
        '0956365001',
        '0958603078',
        '0929979391',
        '0928640408',
        '0957329543',
        '0928687730',
        '0940413602',
        '0941896276',
        '0951013705',
        '0958537615',
        '1311100497',
        '0926107210',
        '0926155995',
        '0951264860',
        '0954360335',
        '0952837110',
        '0955437967',
        '0927163246',
        '0926848235',
        '0918015835',
        '0940945967',
        '0957966302',
        '0956200513',
        '1250569934',
        '0940793961',
        '0953738713',
        '0953436573',
        '0951880954',
        '1206108167',
        '0954254439',
        '1207740257',
        '0955648407',
        '0931625180',
        '0959380379',
        '0941527855',
        '0942476268',
        '0932308406',
        '0957085954',
        '0941104127',
        '0950427286',
        '0955372875',
        '0943364240',
        '0958520454',
        '1205758723',
        '0955731252',
        '0940494487',
        '0954584611',
        '0953639630',
        '0944225077',
        '0951512839',
        '0943239236',
        '0958903353',
        '0803149889',
        '0929914372',
        '0929741429',
        '0950014969',
        '1205067976',
        '0920564127',
        '0928699735',
        '1204900128',
        '0929395416',
        '0926976606',
        '1207419241',
        '0913409710',
        '0951942382',
        '0955014527',
        '0942344698',
        '0959217936',
        '0958196289',
        '0927288241',
        '1207106186',
        '0931458657',
        '0950018887',
        '0950294934',
        '0925832628',
        '0803401587',
        '0955496971',
        '1724285240',
        '0956189138',
        '0927643528',
        '0951576370',
        '1207587070',
        '0930722988',
        '1206184333',
        '0925954653',
        '0940749120',
        '0940937428',
        '1250570841',
        '0952458701',
        '0956007322',
        '0952039931',
        '0957385743',
        '0927001826',
        '1726759986',
        '0941247843',
        '0953929049',
        '0955631288',
        '0953796448',
        '0943938654',
        '0958072985',
        '0953392867',
        '0953920402',
        '0921212494',
        '1207469204',
        '0950973099',
        '0956272066',
        '1205461070',
        '0929684397',
        '0926613019',
        '0930521935',
        '0915956320',
        '0923239628',
        '0931123731',
        '0952063394',
        '0941676025',
        '0926547142',
        '0956312839',
        '0930875042',
        '0951641505',
        '0919818187',
        '0926064783',
        '1207055953',
        '1718592148',
        '0930890579',
        '1207066075',
        '0958438780',
        '0909937039',
        '0958366213',
        '0943621441',
        '0925692816',
        '0926589615',
        '0957994023',
        '0940121072',
        '0942496605',
        '0918252941',
        '0944208982',
        '0704140474',
        '0929744183',
        '1205771205',
        '0944169051',
        '0928202894',
        '0940841067',
        '0929951481',
        '0957084353',
        '0957367907',
        '0944273747',
        '0923290977',
        '0929365591',
        '0503670978',
        '0940429582',
        '0953589595',
        '1207967660',
        '0955639299',
        '0942443573',
        '0919609917',
        '1204682932',
        '0913962908',
        '0915331870',
        '0928772243',
        '0923641872',
        '0942385998',
        '0952846145',
        '0955363890',
        '0922797634',
        '0958189912',
        '0954970828',
        '0942384785',
        '1310008865',
        '1207349885',
        '1250255898',
        '1205697582',
        '0918558123',
        '0601664873',
        '1207809821',
        '0925106775',
        '0803593821',
        '0602991754',
        '1207479484',
        '1207543404',
        '1204107419',
        '0925330193',
        '0923301949',
        '1750168435',
        '0924063274',
        '0925703498',
        '0943580977',
        '0942379264',
        '0923123681',
        '0919868059',
        '0951901255',
        '0953911922',
        '1205199951',
        '0942794561',
        '0917488355',
        '1206495648',
        '0928318369',
        '0952719938',
        '0942477456',
        '0922446653',
        '0803397066',
        '0958092710',
        '0803910009',
        '0926858176',
        '0958500142',
        '0944195684',
        '0919877001',
        '0957406341',
        '1723395008',
        '0929213023',
        '1722093679',
        '0940043037',
        '0932558489',
        '1208310639',
        '0940750128',
        '0944266782',
        '1206285163',
        '0927296855',
        '0929158624',
        '0944241454',
        '1206949933',
        '0919072553',
        '0957408057',
        '0929990570',
        '0940389216',
        '0954446282',
        '0943957241',
        '1207108307',
        '2300613789',
        '0942387713',
        '1207318526',
        '0942349556',
        '1250166541',
        '0915029961',
        '1206869461',
        '0941886673',
        '0928712074',
        '0958165102',
        '0954500906',
        '1208186815',
        '0927958868',
        '0917530305',
        '0942223264',
        '0952978880',
        '1251061311',
        '0944253475',
        '0803333327',
        '0916391659',
        '0951823756',
        '0924976608',
        '1722227848',
        '1206650283',
        '0606214401',
        '0922084314',
        '0802968230',
        '0940700750',
        '1312387051',
        '0942234741',
        '1722395207',
        '1207584606',
        '0606072148',
        '0954815262',
        '0941320491',
        '0804250983',
        '1205516170',
        '0954045779',
        '1750830455',
        '0958569485',
        '1207552082',
        '0940699085',
        '1208423846',
        '0957329618',
        '0917448532',
        '1207888403',
        '0941970659',
        '0923234942',
        '0957463615',
        '0943775684',
        '0927451690',
        '0956709125',
        '0930370770',
        '0932162852',
        '1206789917',
        '0940010143',
        '0957999121',
        '0951529569',
        '0924637853',
        '0950696583',
        '0941266876',
        '1250221932',
        '1312957523',
        '0929212298',
        '0927315713',
        '0923930713',
        '0953736857',
        '0943034603'
    ]
    idh = 2764
    idf = 2764
    if DEBUG:
        idh = 2440
        idf = 2440
    eCoordinacion = Coordinacion.objects.get(id=9)
    eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen.objects.get(pk=idh)
    eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen.objects.filter(turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen).first()
    eMatriculas = Matricula.objects.filter(Q(inscripcion__persona__cedula__in=documentos) | Q(inscripcion__persona__pasaporte__in=documentos), nivel__periodo=ePeriodo, inscripcion__carrera__coordinacion=eCoordinacion)
    total_matriculas = eMatriculas.values("id").distinct().count()
    contador_matricula = 0
    for eMatricula in eMatriculas:
        ePerfilUsuario = eMatricula.inscripcion.persona.perfilusuario_set.filter(status=True, inscripcion=eMatricula.inscripcion).first()
        contador_matricula += 1
        # try:
        #     eMatriculaSedeExamen = MatriculaSedeExamen.objects.get(
        #         matricula=eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.matricula)
        # except ObjectDoesNotExist:
        #     eMatriculaSedeExamen = None
        # aceptotermino = False
        with transaction.atomic():
            try:
                eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(materiaasignada__matricula=eMatricula)
                for eMateriaAsignadaPlanificacionSedeVirtualExamen in eMateriaAsignadaPlanificacionSedeVirtualExamenes:
                    if eAulaPlanificacionSedeVirtualExamen:
                        eMateriaAsignadaPlanificacionSedeVirtualExamen.aulaplanificacion = eAulaPlanificacionSedeVirtualExamen
                        eMateriaAsignadaPlanificacionSedeVirtualExamen.fecha_qr = None
                        eMateriaAsignadaPlanificacionSedeVirtualExamen.url_qr = None
                        eMateriaAsignadaPlanificacionSedeVirtualExamen.codigo_qr = None
                        eMateriaAsignadaPlanificacionSedeVirtualExamen.save()
                if eAulaPlanificacionSedeVirtualExamen:
                    fecha = eTurnoPlanificacionSedeVirtualExamen.fechaplanificacion.fecha
                    horainicio = eTurnoPlanificacionSedeVirtualExamen.horainicio
                    fecha_visible = datetime.combine(fecha, horainicio)
                    titulo = 'Reprogramación de horario de examen'
                    cuerpo = f'Las asignaturas fueron reprogramadas'
                    url = f"https://sgaestudiante.unemi.edu.ec/alu_documentos/examenes"
                    eNotificacion = Notificacion(titulo=titulo,
                                                 cuerpo=cuerpo,
                                                 app_label='SIE',
                                                 destinatario=eMatricula.inscripcion.persona,
                                                 perfil=ePerfilUsuario,
                                                 leido=False,
                                                 visible=True,
                                                 url=url,
                                                 fecha_hora_visible=fecha_visible)
                    eNotificacion.save()
                print(f"({total_matriculas}/{contador_matricula}) - {eMatricula.__str__()}")

            except Exception as ex:
                print('error: %s' % ex)
                transaction.set_rollback(True)


def descifrar_notificacion(persona, periodo=None, tiposrubros=None):
    from django.db.models import Count, PROTECT, Sum
    from sagest.models import Rubro, Pago
    from sga.funciones import null_to_numeric
    tiene_valores_pendientes = False
    tiene_valores_vencidos = False
    msg = {}
    data = {}
    if persona:
        eRubros = Rubro.objects.filter(status=True, persona=persona, cancelado=False).exclude(
            persona__usuario__is_superuser=True)
        eRubrosMatriculas_No_Valida = eRubros.filter(
            Q(matricula__automatriculapregrado=True, matricula__fechaautomatriculapregrado__isnull=False) | Q(
                matricula__automatriculaadmision=True, matricula__fechaautomatriculaadmision__isnull=False),
            matricula__termino=False, matricula__fechatermino__isnull=True)
        if eRubrosMatriculas_No_Valida.values("id").exists():
            eRubros = eRubros.exclude(pk__in=eRubrosMatriculas_No_Valida.values_list("id", flat=True))
        if periodo:
            eRubros = eRubros.filter(matricula__nivel__periodo=periodo)
        if tiposrubros:
            eRubros = eRubros.filter(tipo__in=tiposrubros)
        if eRubros.values("id").exists():
            rubros_vencidos = eRubros.filter(fechavence__lt=datetime.now().date()).distinct()
            if rubros_vencidos.exists():
                valor_rubros = null_to_numeric(rubros_vencidos.aggregate(valor=Sum('valortotal'))['valor'])
                valor_pagos = null_to_numeric(
                    Pago.objects.filter(rubro__in=rubros_vencidos, status=True).distinct().aggregate(
                        valor=Sum('valortotal'))['valor'])
                valores_vencidos = valor_rubros - valor_pagos
                if valores_vencidos > 0:
                    msg = f"""{'Estimada' if persona.es_mujer() else 'Estimado'} estudiante, aún le quedan <b>VALORES PENDIENTES POR PAGAR</b>, total de deuda de ${valores_vencidos}. Por tal motivo su matrícula queda <b>CONDICIONADA</b> <br> <br><p style='color:#FE9900;'><b>Nota:</b></p>
                <p style='color:#ACAEAF;'><b><i>Para poder registrar asistencia en clases o subir tareas al aula virtual no debe tener deudas vencidas.</i></b></p>"""
                    tiene_valores_vencidos = True
            else:
                valor_rubros = null_to_numeric(eRubros.aggregate(valor=Sum('valortotal'))['valor'])
                valor_pagos = null_to_numeric(
                    Pago.objects.filter(rubro__in=eRubros, status=True).distinct().aggregate(valor=Sum('valortotal'))[
                        'valor'])
                valores_pendientes = valor_rubros - valor_pagos
                if valores_pendientes > 0:
                    msg = f"""{'Estimada' if persona.es_mujer() else 'Estimado'} estudiante, aún le quedan <b>VALORES PENDIENTES POR PAGAR</b>, total de deuda de ${valores_pendientes}."""
                    tiene_valores_pendientes = True
    data['tiene_valores_pendientes'] = tiene_valores_pendientes
    data['tiene_valores_vencidos'] = tiene_valores_vencidos
    data['msg_valores_rubros'] = msg
    return data


def automatricula_pregrado_segundo_quinto(ePeriodoAnterior, ePeriodoActual):
    ePersona = Persona.objects.get(pk=10730)
    usernotify = ePersona.usuario
    eNotificacion = Notificacion(cuerpo='Generación de automatricula de segundo hasta quinto nivel 2S 2023 PREGRADO',
                                 titulo=f'(En proceso) Generación de automatricula 2S 2023 PREGRADO',
                                 destinatario=ePersona,
                                 url='',
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=5),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()
    EJE_FORMATIVO_PRACTICAS = 9
    EJE_FORMATIVO_VINCULACION = 11
    EXCLUDE_EJE_FORMATIVO = [EJE_FORMATIVO_PRACTICAS, EJE_FORMATIVO_VINCULACION]
    ePeriodoMatricula = ePeriodoActual.periodomatricula_set.filter(status=True).first()
    if not ePeriodoMatricula:
        raise NameError(u"Periodo académico de matricula no existe")
    eUser = User.objects.get(pk=1)
    eCoordinaciones = Coordinacion.objects.filter(id__in=[1,2,3,4,5])
    eNivelMallaPrimero = NivelMalla.objects.get(pk=1)
    eNivelMallaSegundo = NivelMalla.objects.get(pk=2)
    eNivelMallaQuinto = NivelMalla.objects.get(pk=5)
    eMatriculasAnterior = Matricula.objects.filter(status=True, retiradomatricula=False, bloqueomatricula=False, nivelmalla__lt=eNivelMallaQuinto, inscripcion__inscripcionnivel__nivel__gte=eNivelMallaSegundo, nivel__periodo=ePeriodoAnterior, inscripcion__carrera__coordinacion__in=eCoordinaciones)
    if DEBUG:
        eMatriculasAnterior = eMatriculasAnterior.filter(inscripcion__carrera_id=133, inscripcion__id__in=[224282, 224688, 186865])
    eMatriculasAnterior = eMatriculasAnterior.filter(cerrada=True)
    eMatriculasAnterior = eMatriculasAnterior.exclude(pk__in=Rubro.objects.values_list("matricula__id", flat=True).filter(matricula__nivel__periodo=ePeriodoAnterior, tipo__subtiporubro=1, cancelado=False, fechavence__lt=datetime.now().date(), status=True).exclude(matricula__inscripcion__persona__usuario__is_superuser=True))
    eMatriculasAnterior = eMatriculasAnterior.exclude(pk__in=MatriculaGrupoSocioEconomico.objects.values_list("matricula__id", flat=True).filter(tipomatricula=2, estado_gratuidad=1, matricula__nivel__periodo=ePeriodoAnterior, matricula__inscripcion__carrera__coordinacion__in=eCoordinaciones))
    total_matriculas = eMatriculasAnterior.values("id").distinct().count()
    contador_matricula = 0
    resultados = []
    for eMatriculaAnterior in eMatriculasAnterior:
        contador_matricula += 1
        with transaction.atomic():
            try:
                paso = False
                eInscripcion = eMatriculaAnterior.inscripcion
                eInscripcionMalla = eInscripcion.malla_inscripcion()
                eMalla = eInscripcionMalla.malla
                eInscripcionNivel = eInscripcion.mi_nivel()
                eAsignaturasMalla = eMalla.asignaturamalla_set.select_related().filter(status=True).exclude(Q(nivelmalla_id=NIVEL_MALLA_CERO) | Q(opcional=True) | Q(ejeformativo_id__in=EXCLUDE_EJE_FORMATIVO) | Q(asignatura__in=AsignaturaMalla.objects.values_list("asignatura__id", flat=True).filter(malla_id=353))).order_by('nivelmalla', 'ejeformativo')
                # eMatriculaGrupoSocioEconomico = MatriculaGrupoSocioEconomico.objects.filter(matricula=eMatriculaAnterior).first()
                eModulosMalla = ModuloMalla.objects.filter(malla=eInscripcionMalla.malla)
                eNivelMallaAprobadoActual = eInscripcionNivel.nivel
                eNivelMallaMatriculaAnterior = eMatriculaAnterior.nivelmalla
                eAsignaturasMallaquedebeaprobar = eAsignaturasMalla.filter(nivelmalla__orden__lte=eNivelMallaAprobadoActual.orden).exclude(Q(asignatura__id__in=eModulosMalla.values_list('asignatura__id', flat=True)) | Q(asignatura__in=AsignaturaMalla.objects.values_list("asignatura__id", flat=True).filter(malla_id=353)))
                eAsignaturasRecord = eInscripcion.recordacademico_set.filter(asignaturamalla__in=eAsignaturasMalla, status=True)
                if eAsignaturasRecord.values("id").filter(aprobada=False).exists():
                    raise NameError("Tiene asignaturas en el record reprobadas")
                eAsignaturasAprobadashastanivel = eAsignaturasRecord.filter(asignaturamalla__in=eAsignaturasMallaquedebeaprobar, aprobada=True, status=True)
                if eAsignaturasAprobadashastanivel.values("id").count() <  eAsignaturasMallaquedebeaprobar.values("id").count():
                    raise NameError("Tiene asignaturas en el record reprobadas")
                eAsignaturasAprobadasAdelantada = eAsignaturasRecord.filter(asignaturamalla__in=eAsignaturasMalla.filter(nivelmalla__orden__gte=eNivelMallaAprobadoActual.orden + 1).exclude(Q(asignatura__id__in=eModulosMalla.values_list('asignatura__id', flat=True)) | Q(asignatura__in=AsignaturaMalla.objects.values_list("asignatura__id", flat=True).filter(malla_id=353))), aprobada=True, status=True)
                if eAsignaturasAprobadasAdelantada.values("id").exists():
                    raise NameError("Tiene asignaturas en el record que ha adelantado")
                eMateriaAsignadasAnterior = MateriaAsignada.objects.filter(matricula=eMatriculaAnterior, status=True).exclude(Q(materia__inglesepunemi=True) | Q(materia__asignatura__id__in=eModulosMalla.values_list('asignatura__id', flat=True)) | Q(materia__asignatura__in=AsignaturaMalla.objects.values_list("asignatura__id", flat=True).filter(malla_id=353)))
                if eMateriaAsignadasAnterior.values("id").filter(Q(cerrado=False) | Q(estado_id__in=[2,3,4]) | Q(retiromanual=True)).exists():
                    raise NameError("Tiene asignaturas en la matricula anterior con estado cerrado=False | estado en [EN CURSO, REPROBADO] | retiromanual=True")
                ids_paralelo = eMateriaAsignadasAnterior.values_list('materia__paralelomateria__id', flat=True).distinct()
                if len(ids_paralelo) > 1:
                    raise NameError(f"Tiene materias con paralelos de más de {len(ids_paralelo)}")
                if Matricula.objects.values("id").filter(inscripcion=eInscripcion, nivel__periodo=ePeriodoActual).exists():
                    raise NameError(f"Ya existe una matricula en el periodo {ePeriodoActual.__str__()}")
                eAsignaturasMallaNivelSiguiente = eAsignaturasMalla.filter(nivelmalla__orden=eNivelMallaAprobadoActual.orden + 1)
                if eAsignaturasMallaNivelSiguiente.values("id").filter(practicas=True).exists():
                    raise NameError(f"Existe asignarturas de practicas en el nivel de malla {eNivelMallaAprobadoActual.orden + 1} a matricular")
                if eAsignaturasMallaNivelSiguiente.values("id").filter(itinerario__gt=0).exists():
                    raise NameError(f"Existe asignarturas con itinerario en el nivel de malla {eNivelMallaAprobadoActual.orden + 1} a matricular")
                eNivel = Nivel.objects.filter(periodo=ePeriodoActual, nivellibrecoordinacion__coordinacion__carrera=eInscripcion.carrera, nivellibrecoordinacion__coordinacion__sede=eInscripcion.sede, sesion=eMatriculaAnterior.nivel.sesion, cerrado=False, fin__gte=datetime.now().date()).first()
                if not eNivel:
                    raise NameError(f"No existe nivel en el periodo {ePeriodoActual.__str__()}")
                eParalelo = Paralelo.objects.filter(pk__in=ids_paralelo).first()
                # eMateriasAbiertas = Materia.objects.annotate(numasignadados=Count('materiaasignada__id',distinct=True, filter=Q(materiaasignada__materiaasignadaretiro__isnull=True, materiaasignada__matricula__estado_matricula__in=[2, 3], materiaasignada__status=True)))
                eMateriasAbiertas = Materia.objects.filter(asignaturamalla__in=eAsignaturasMallaNivelSiguiente, inicio__gte=datetime.now(), nivel__cerrado=False, nivel__periodo=eNivel.periodo, paralelomateria=eParalelo, status=True).order_by('id')
                eMateriasAbiertas = eMateriasAbiertas.annotate(numasignadados=Count('materiaasignada__id', distinct=True)).filter(cupo__gt=F('numasignadados'))
                if not eMateriasAbiertas.values("id").exists():
                    raise NameError(f"No existe materias aperturadas del paralelo ({eParalelo.__str__()}) para el periodo {ePeriodoActual.__str__()}")
                if eAsignaturasMallaNivelSiguiente.values("id").count() != eMateriasAbiertas.values("id").count():
                    raise NameError(f"No existe suficiente materias aperturadas para el periodo {ePeriodoActual.__str__()}")
                eMatriculaActual = Matricula(inscripcion=eInscripcion,
                                             nivel=eNivel,
                                             pago=False,
                                             iece=False,
                                             becado=False,
                                             porcientobeca=0,
                                             fecha=datetime.now().date(),
                                             hora=datetime.now().time(),
                                             fechatope=fechatope(datetime.now().date()),
                                             automatriculapregrado=True,
                                             fechaautomatriculapregrado=datetime.now(),
                                             estado_matricula=2)
                eMatriculaActual.save(usuario_id=ADMINISTRADOR_ID)
                eMatriculaActual.grupo_socio_economico(1)
                eMatriculaActual.confirmar_matricula()
                for eMateria in eMateriasAbiertas:
                    matriculacupoadicional = False
                    if ePeriodoMatricula.valida_cupo_materia:
                        if not eMateria.tiene_cupo_materia():
                            if eMateria.cupoadicional > 0:
                                if not eMateria.existen_cupos_con_adicional():
                                    raise NameError(u"Capacidad limite de la materia: " + unicode(eMateria.asignatura) + ", seleccione otro.")
                                else:
                                    matriculacupoadicional = True
                            else:
                                raise NameError(u"Capacidad limite de la materia: " + unicode(eMateria.asignatura) + ", seleccione otro.")
                    matriculas = len(eMatriculaActual.inscripcion.historicorecordacademico_set.values('id').filter(asignatura=eMateria.asignatura, fecha__lt=eMateria.nivel.fin)) + 1
                    eMateriaAsignada = MateriaAsignada(matricula=eMatriculaActual,
                                                       materia=eMateria,
                                                       notafinal=0,
                                                       asistenciafinal=100,
                                                       asistenciafinalzoom=100,
                                                       cerrado=False,
                                                       matriculas=matriculas,
                                                       observaciones='',
                                                       estado_id=NOTA_ESTADO_EN_CURSO,
                                                       casoultimamatricula=None,
                                                       sinasistencia=False)
                    if ePeriodoActual.valida_asistencia:
                        if eMalla.modalidad.es_enlinea():
                            eMateriaAsignada.sinasistencia = True
                    else:
                        eMateriaAsignada.sinasistencia = True

                    eMateriaAsignada.save(usuario_id=ADMINISTRADOR_ID)
                    if matriculacupoadicional:
                        eMateria.totalmatriculadocupoadicional += 1
                        eMateria.cupo += 1
                        eMateria.save(usuario_id=ADMINISTRADOR_ID)
                        log(u'Estudiante matriculado en cupo adicional materia: %s - estudiante: %s y se aumento un cupo en materia' % (eMateria, eMatriculaActual), None, "add", eUser)
                    eMateriaAsignada.asistencias()
                    eMateriaAsignada.evaluacion()
                    eMateriaAsignada.mis_planificaciones()
                    eMateriaAsignada.save(usuario_id=ADMINISTRADOR_ID)
                    log(u'Materia seleccionada matricula: %s' % eMateriaAsignada, None, "add", eUser)
                eInscripcion.actualizar_nivel()
                eMatriculaActual.actualiza_matricula()
                eMatriculaActual.inscripcion.actualiza_estado_matricula()
                eMatriculaActual.grupo_socio_economico(1)
                eMatriculaActual.agregacion_aux(None)
                eMatriculaActual.calcula_nivel()
                eMatriculaActual.actualizar_horas_creditos()
                eMateriaAsignadasActual = MateriaAsignada.objects.filter(matricula=eMatriculaActual, status=True).exclude(Q(materia__inglesepunemi=True) | Q(materia__asignatura__id__in=eModulosMalla.values_list('asignatura__id', flat=True)) | Q(materia__asignatura__in=AsignaturaMalla.objects.values_list("asignatura__id", flat=True).filter(malla_id=353)))
                eParaleloActual = Paralelo.objects.filter(pk__in=eMateriaAsignadasActual.values_list('materia__paralelomateria__id', flat=True).distinct()).first()


                log(u'Automatricula estudiante: %s' % eMatriculaActual, None, "add", eUser)
                ConfirmaCapacidadTecnologica.objects.filter(persona=eMatriculaActual.inscripcion.persona).update(confirmado=True)
                paso = True
            except Exception as ex:
                print('error en (%s): %s' % (eMatriculaAnterior, ex))
                transaction.set_rollback(True)
                paso = False
        print(f"({total_matriculas}/{contador_matricula}) - {eMatriculaAnterior.__str__()}")
        if paso:
            resultados.append({'eInscripcion': eInscripcion,
                               'eNivelMallaAprobadoActual': eNivelMallaAprobadoActual,
                               'eMatriculaAnterior': eMatriculaAnterior,
                               'eParaleloAnterior': eParalelo,
                               'eMateriaAsignadasAnterior': eMateriaAsignadasAnterior,
                               'eAsignaturasMallaNivelSiguiente': eAsignaturasMallaNivelSiguiente,
                               'eMatriculaActual': eMatriculaActual,
                               'eMateriaAsignadasActual': eMateriaAsignadasActual,
                               'eParaleloActual': eParaleloActual,
                               })
    if len(resultados) > 0:
        nombre_archivo = "reporte_automaricula_2s_2023_segundo_quitno"
        # fuentecabecera = easyxf('font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        # fuentenormal = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        style0 = easyxf('font: name Times New Roman, color-index blue, bold off', num_format_str='#,##0.00')
        style_nb = easyxf('font: name Times New Roman, color-index blue, bold on', num_format_str='#,##0.00')
        style_sb = easyxf('font: name Times New Roman, color-index blue, bold on')
        title = easyxf('font: name Times New Roman, color-index blue, bold on , height 350; alignment: horiz centre')
        style1 = easyxf(num_format_str='D-MMM-YY')
        font_style = XFStyle()
        font_style.font.bold = True
        font_style2 = XFStyle()
        font_style2.font.bold = False
        wb = xlwt.Workbook()
        ws = wb.add_sheet('Sheetname')
        estilo = xlwt.easyxf('font: height 350, name Arial, colour_index black, bold on, italic on; align: wrap on, vert centre, horiz center;')
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        nombre = nombre_archivo + "_" + datetime.now().strftime('%Y%m%d_%H%M%S') + ".xls"
        filename = os.path.join(output_folder, nombre)

        columnas = [
            (u"#", 7000),
            (u"documento", 7000),
            (u"alumno", 7000),
            (u"facultad", 7000),
            (u"carrera", 7000),
            (u"nivelmallaaprobado", 7000),
            (u"matriculaanterior", 7000),
            (u"nivelmallamatriculaanterior", 7000),
            (u"paraleloanterior", 7000),
            (u"materiasanterior", 7000),
            (u"asignaturasdebetomar", 7000),
            (u"matriculaactual", 7000),
            (u"materiasactual", 7000),
            (u"paraleloactual", 7000),
        ]
        row_num = 0
        for col_num in range(len(columnas)):
            ws.write(row_num, col_num, columnas[col_num][0], font_style)
            ws.col(col_num).width = columnas[col_num][1]
        total = len(resultados)
        cont = 0
        row_num = 1
        i = 0
        for r in resultados:
            cont += 1
            i += 1
            eInscripcion = r.get('eInscripcion')
            ePersona = eInscripcion.persona
            eNivelMallaAprobadoActual = r.get('eNivelMallaAprobadoActual')
            eMatriculaAnterior = r.get('eMatriculaAnterior')
            eParaleloAnterior = r.get('eParaleloAnterior')
            eMateriaAsignadasAnterior = r.get('eMateriaAsignadasAnterior')
            eAsignaturasMallaNivelSiguiente = r.get('eAsignaturasMallaNivelSiguiente')
            eMatriculaActual = r.get('eMatriculaActual')
            eMateriaAsignadasActual = r.get('eMateriaAsignadasActual')
            eParaleloActual = r.get('eParaleloActual')
            eFacultad = eInscripcion.coordinacion
            eCarrera = eInscripcion.carrera
            ws.write(row_num, 0, i, font_style2) #
            ws.write(row_num, 1, "%s" % ePersona.documento(), font_style2) #documento
            ws.write(row_num, 2, "%s (%s)" % (ePersona.nombre_completo_inverso(), eInscripcion.id), font_style2) #alumno
            ws.write(row_num, 3, "%s" % eFacultad.__str__(), font_style2) #facultad
            ws.write(row_num, 4, "%s" % eCarrera.__str__(), font_style2) #carrera
            ws.write(row_num, 5, "%s" % eNivelMallaAprobadoActual.__str__(), font_style2) #nivelmallaaprobado
            ws.write(row_num, 6, "ID_MATRICULA: %s - PERIODO: %s" % (eMatriculaAnterior.id, eMatriculaAnterior.nivel.periodo.__str__()), font_style2) #matriculaanterior
            ws.write(row_num, 7, "%s" % eMatriculaAnterior.nivelmalla.__str__(), font_style2) #nivelmallamatriculaanterior
            ws.write(row_num, 8, "%s" % eParaleloAnterior.__str__(), font_style2) #paraleloanterior
            ws.write(row_num, 9, "%s" % ', '.join([x.materia.asignatura.nombre for x in eMateriaAsignadasAnterior]), font_style2) #materiasanterior
            ws.write(row_num, 10, "%s" % ', '.join([x.asignatura.nombre for x in eAsignaturasMallaNivelSiguiente]), font_style2) #asignaturasdebetomar
            ws.write(row_num, 11, "ID_MATRICULA: %s - PERIODO: %s" % (eMatriculaActual.id, eMatriculaActual.nivel.periodo.__str__()), font_style2)  #matriculaactual
            ws.write(row_num, 12, "%s" % ', '.join([x.materia.asignatura.nombre for x in eMateriaAsignadasActual]), font_style2)  # materiasactual
            ws.write(row_num, 13, "%s" % eParaleloActual.__str__(), font_style2)  # paraleloactual
            row_num += 1
            print(f"({total}/{cont}) Procesando . . .")
        wb.save(filename)
        print("ARCHIVO: ", filename)
        eNotificacion.url = "{}/{}".format(MEDIA_URL, nombre)
        eNotificacion.titulo=f'(Finalizado) Generación de automatricula 2S 2023 PREGRADO'
        eNotificacion.save()
        print("Proceso finalizado . . .")


def reporte_horario_primer_segundo_nivel_pregrado(ePeriodo):
    ePersona = Persona.objects.get(pk=29898)
    eNotificacion = Notificacion(cuerpo='Generación de reporte de horario primer-segundo nivel 2S 2023 PREGRADO',
                                 titulo=f'(En proceso) Generación de reporte de horario primer-segundo nivel 2S 2023 PREGRADO',
                                 destinatario=ePersona,
                                 url='',
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=5),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()
    cursor = connections['default'].cursor()
    sql = f"""
        SELECT 
            (CASE WHEN sga_p.cedula != '' THEN sga_p.cedula WHEN sga_p.pasaporte != '' THEN sga_p.pasaporte ELSE '' END) AS documento, 
            (sga_p.apellido1 || ' ' || sga_p.apellido2 || ' ' || sga_p.nombres) AS alumno,
            sga_coo.nombre AS facultad,
            sga_c.nombre AS carrera, 
            sga_mod.nombre AS modalidad,
            sga_per.nombre AS periodo, 
            sga_nm.nombre AS nivelmalla,
            sga_a.nombre AS asignatura,
            sga_par.nombre AS paralelo,
            (
            CASE sga_class.dia
            WHEN 1 THEN 'LUNES'
            WHEN 2 THEN 'MARTES'
            WHEN 3 THEN 'MIERCOLES'
            WHEN 4 THEN 'JUEVES'
            WHEN 5 THEN 'VIERNES'
            WHEN 6 THEN 'SABADO'
            WHEN 7 THEN 'DOMINGO'
            ELSE
            ''
            END 
            ) AS dia,
            (
            sga_t.comienza || '-' || sga_t.termina
            ) AS horario,
            (
            CASE 
            WHEN sga_class.profesor_id IS NOT NULL THEN
            (
                SELECT 
                    (sga_per_pro.apellido1 || ' ' || sga_per_pro.apellido2 || ' ' || sga_per_pro.nombres) 
                FROM 
                    sga_profesor AS sga_pro 
                    INNER JOIN sga_persona AS sga_per_pro ON sga_per_pro.id=sga_pro.persona_id
                WHERE 
                    sga_pro.id=sga_class.profesor_id
            )
            WHEN sga_class.grupoprofesor_id IS NOT NULL THEN 
            (
                SELECT 
                    (sga_per_pro.apellido1 || ' ' || sga_per_pro.apellido2 || ' ' || sga_per_pro.nombres)
                FROM 
                    sga_gruposprofesormateria AS sga_gpm 
                    INNER JOIN sga_profesormateria AS sga_pm ON sga_pm.id=sga_gpm.profesormateria_id
                    INNER JOIN sga_profesor AS sga_pro ON sga_pro.id=sga_pm.profesor_id
                    INNER JOIN sga_persona AS sga_per_pro ON sga_per_pro.id=sga_pro.persona_id
                WHERE 
                    sga_gpm.id=sga_class.grupoprofesor_id
            )
            ELSE 
                ''
            END
            ) AS profesor,
            sga_tp.nombre AS tipo_profesor
            FROM sga_matricula AS sga_m
            INNER JOIN sga_materiaasignada AS sga_ma ON sga_ma.matricula_id=sga_m.id
            INNER JOIN sga_materia AS sga_mat ON sga_mat.id=sga_ma.materia_id
            INNER JOIN sga_clase AS sga_class ON sga_class.materia_id=sga_mat.id
            INNER JOIN sga_tipoprofesor AS sga_tp ON sga_tp.id=sga_class.tipoprofesor_id
            INNER JOIN sga_turno AS sga_t ON sga_t.id=sga_class.turno_id
            INNER JOIN sga_asignaturamalla AS sga_am ON sga_am.id=sga_mat.asignaturamalla_id
            INNER JOIN sga_asignatura AS sga_a ON sga_a.id=sga_am.asignatura_id
            INNER JOIN sga_paralelo AS sga_par ON sga_par.id=sga_mat.paralelomateria_id
            INNER JOIN sga_nivel AS sga_n ON sga_n.id=sga_m.nivel_id
            INNER JOIN sga_periodo AS sga_per ON sga_per.id=sga_n.periodo_id
            INNER JOIN sga_inscripcion AS sga_i ON sga_i.id=sga_m.inscripcion_id
            INNER JOIN sga_inscripcionmalla AS sga_inm ON sga_inm.inscripcion_id=sga_i.id
            INNER JOIN sga_malla AS sga_mall ON sga_mall.id=sga_inm.malla_id
            INNER JOIN sga_carrera AS sga_c ON sga_c.id=sga_i.carrera_id AND sga_mall.carrera_id=sga_c.id
            INNER JOIN sga_modalidad AS sga_mod ON sga_mod.id=sga_mall.modalidad_id
            INNER JOIN sga_coordinacion_carrera AS sga_c_c ON sga_c_c.carrera_id = sga_c.id
            INNER JOIN sga_coordinacion AS sga_coo ON sga_coo.id=sga_c_c.coordinacion_id
            INNER JOIN sga_persona AS sga_p ON sga_p.id=sga_i.persona_id
            INNER JOIN sga_nivelmalla AS sga_nm ON sga_nm.id=sga_m.nivelmalla_id
            WHERE 
            sga_n.periodo_id={ePeriodo.pk} 
            AND sga_i.coordinacion_id IN (1,2,3,4,5) 
            AND sga_m."status" 
            AND sga_m.retiradomatricula= FALSE 
            AND sga_m.bloqueomatricula= FALSE 
            AND sga_nm.id IN (1,2) 
            AND (sga_m.automatriculapregrado AND sga_m.termino AND sga_m.fechatermino IS NOT NULL)
            ORDER BY 
            sga_coo.id,
            sga_c.id,
            sga_p.apellido1,
            sga_p.apellido2,
            sga_p.nombres;
    """
    cursor.execute(sql)
    rows = cursor.fetchall()
    nombre_archivo = "reporte_horario_primer_segundo_nivel_224"
    output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
    nombre = nombre_archivo + "_" + datetime.now().strftime('%Y%m%d_%H%M%S') + ".xlsx"
    directory = os.path.join(output_folder, nombre)
    output = io.BytesIO()
    workbook = xlsxwriter.Workbook(directory, {'constant_memory': True})
    ws = workbook.add_worksheet("Horario")
    fuentecabecera = workbook.add_format({
        'align': 'center',
        'bg_color': 'silver',
        'border': 1,
        'bold': 1
    })

    formatoceldacenter = workbook.add_format({
        'border': 1,
        'valign': 'vcenter',
        'align': 'center'})

    formatoceldacenter = workbook.add_format({
        'border': 1,
        'valign': 'vcenter',
        'align': 'center'})

    fuenteencabezado = workbook.add_format({
        'align': 'center',
        'bg_color': '#1C3247',
        'font_color': 'white',
        'border': 1,
        'font_size': 24,
        'bold': 1
    })

    columnas = [
        (u"#", 10),
        (u"documento", 20),
        (u"alumno", 80),
        (u"facultad", 80),
        (u"carrera", 80),
        (u"modalidad", 40),
        (u"nivelmalla", 40),
        (u"asignatura", 80),
        (u"paralelo", 20),
        (u"dia", 30),
        (u"horario", 40),
        (u"profesor", 80),
        (u"tipoprofesor", 20),
    ]
    ws.merge_range(0, 0, 0, columnas.__len__() - 1, 'UNIVERSIDAD ESTATAL ESTATAL DE MILAGRO', fuenteencabezado)
    ws.merge_range(1, 0, 1, columnas.__len__() - 1, f'HORARIO DE ESTUDIANTES MATRICULADOS EN PREGRADO EN EL PERIODO {ePeriodo}', fuenteencabezado)
    row_num, numcolum = 2, 0
    for col_name in columnas:
        ws.write(row_num, numcolum, col_name[0], fuentecabecera)
        ws.set_column(numcolum, numcolum, col_name[1])
        numcolum += 1
    row_num = 3
    contador = 0
    if rows:
        for row in rows:
            contador += 1
            ws.write(row_num, 0, contador, formatoceldacenter)  #
            ws.write(row_num, 1, "%s" % row[0], formatoceldacenter)  # documento
            ws.write(row_num, 2, "%s" % row[1], formatoceldacenter)  # alumno
            ws.write(row_num, 3, "%s" % row[2], formatoceldacenter)  # facultad
            ws.write(row_num, 4, "%s" % row[3], formatoceldacenter)  # carrera
            ws.write(row_num, 5, "%s" % row[4], formatoceldacenter)  # modalidad
            ws.write(row_num, 6, "%s" % row[6], formatoceldacenter)  # nivelmalla
            ws.write(row_num, 7, "%s" % row[7], formatoceldacenter)  # asignatura
            ws.write(row_num, 8, "%s" % row[8], formatoceldacenter)  # paralelo
            ws.write(row_num, 9, "%s" % row[9], formatoceldacenter)  # dia
            ws.write(row_num, 10, "%s" % row[10], formatoceldacenter)  # horario
            ws.write(row_num, 11, "%s" % row[11], formatoceldacenter)  # profesor
            ws.write(row_num, 12, "%s" % row[12], formatoceldacenter)  # tipoprofesor

            row_num += 1
    workbook.close()
    print("ARCHIVO: ", directory)
    eNotificacion.url = "{}/{}".format(MEDIA_URL, nombre)
    eNotificacion.titulo = f'(Finalizado) Generación de reporte de horario primer-segundo nivel 2S 2023 PREGRADO'
    eNotificacion.save()
    print("Proceso finalizado . . .")


def reporte_examen_segundo_parcial_en_linea(ePeriodo):
    ePersona = Persona.objects.get(pk=10730)
    eNotificacion = Notificacion(cuerpo='Generación de reporte de examenes 2S 2023 PREGRADO',
                                 titulo=f'(En proceso) Generación de reporte de examenes 2S 2023 PREGRADO',
                                 destinatario=ePersona,
                                 url='',
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=5),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()
    nombre_archivo = "reporte_examen_segundo_parcial_2s2023"
    output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
    nombre = nombre_archivo + "_" + datetime.now().strftime('%Y%m%d_%H%M%S') + ".xlsx"
    directory = os.path.join(output_folder, nombre)
    output = io.BytesIO()
    workbook = xlsxwriter.Workbook(directory, {'constant_memory': True})
    ws = workbook.add_worksheet("Hoja1")
    fuentecabecera = workbook.add_format({
        'align': 'center',
        'bg_color': 'silver',
        'border': 1,
        'bold': 1
    })

    formatoceldacenter = workbook.add_format({
        'border': 1,
        'valign': 'vcenter',
        'align': 'center'})

    formatoceldacenter = workbook.add_format({
        'border': 1,
        'valign': 'vcenter',
        'align': 'center'})

    fuenteencabezado = workbook.add_format({
        'align': 'center',
        'bg_color': '#1C3247',
        'font_color': 'white',
        'border': 1,
        'font_size': 24,
        'bold': 1
    })

    columnas = [
        (u"#", 10),
        (u"ID_MATERIA", 20),
        (u"CARRERA", 20),
        (u"MATERIA", 20),
        (u"TIPO", 20),
        (u"NIVEL", 20),
        (u"ID_CURSO", 80),
        (u"ID_TEST", 80),
        (u"ID_ACTIVIDAD", 80),
    ]
    ws.merge_range(0, 0, 0, columnas.__len__() - 1, 'UNIVERSIDAD ESTATAL ESTATAL DE MILAGRO', fuenteencabezado)
    ws.merge_range(1, 0, 1, columnas.__len__() - 1, f'EXAMENES DE SEGUNDO PARCIAL EN PREGRADO EN EL PERIODO {ePeriodo}', fuenteencabezado)
    row_num, numcolum = 2, 0
    for col_name in columnas:
        ws.write(row_num, numcolum, col_name[0], fuentecabecera)
        ws.set_column(numcolum, numcolum, col_name[1])
        numcolum += 1
    row_num = 3
    contador = 0
    eNiveles = Nivel.objects.filter(status=True, periodo=ePeriodo, nivellibrecoordinacion__coordinacion_id__in=[1, 2, 3, 4, 5])
    eMaterias = Materia.objects.filter(status=True, nivel__in=eNiveles, asignaturamalla__malla__modalidad_id=3)
    for eMateria in eMaterias:
        ePlanificacionClaseSilabos = PlanificacionClaseSilabo.objects.filter(status=True, parcial=2, examen=True, tipoplanificacion__periodo=ePeriodo, tipoplanificacion__planificacionclasesilabo_materia__materia=eMateria)
        eSilabo = Silabo.objects.filter(materia=eMateria, codigoqr=True, status=True).first()
        eSilaboSemanales = SilaboSemanal.objects.filter(silabo=eSilabo, numsemana__in=ePlanificacionClaseSilabos.values_list('semana', flat=True), examen=True)
        eDetalleModeloEvaluativos = DetalleModeloEvaluativo.objects.filter(nombre="EX2", modelo=eMateria.modeloevaluativo, status=True)
        eTestSilaboSemanales = TestSilaboSemanal.objects.filter(status=True, silabosemanal__in=eSilaboSemanales, detallemodelo__in=eDetalleModeloEvaluativos, tiporecurso_id=11)
        for eTestSilaboSemanal in eTestSilaboSemanales:
            print("eTestSilaboSemanal: ", eTestSilaboSemanal)
            print("idtestmoodle: ", eTestSilaboSemanal.idtestmoodle)
            contador += 1
            ws.write(row_num, 0, contador, formatoceldacenter)  #
            ws.write(row_num, 1, "%s" % eMateria.id, formatoceldacenter) #ID_MATERIA
            ws.write(row_num, 2, "%s" % eMateria.asignaturamalla.malla.carrera.nombre, formatoceldacenter) #CARRERA
            ws.write(row_num, 3, "%s" % eMateria.__str__(), formatoceldacenter) #MATERIA
            ws.write(row_num, 4, "%s" % eMateria.get_tipomateria_display(), formatoceldacenter) #TIPO
            ws.write(row_num, 5, "%s" % eMateria.asignaturamalla.nivelmalla.nombre, formatoceldacenter) #NIVEL
            ws.write(row_num, 6, "%s" % eMateria.idcursomoodle if eMateria.idcursomoodle else 0, formatoceldacenter)
            ws.write(row_num, 7, "%s" % eTestSilaboSemanal.idtestmoodle if eTestSilaboSemanal.idtestmoodle else 0, formatoceldacenter)
            ws.write(row_num, 8, "%s" % eTestSilaboSemanal.id, formatoceldacenter)
            row_num += 1
    workbook.close()
    print("ARCHIVO: ", directory)
    eNotificacion.url = "{}/{}".format(MEDIA_URL, nombre)
    eNotificacion.titulo = f'(Finalizado) Generación de reporte de examenes 2S 2023 PREGRADO'
    eNotificacion.save()
    print("Proceso finalizado . . .")


def eliminar_examen_segundo_parcial_en_linea(ePeriodo):
    ePersona = Persona.objects.get(pk=10730)
    eNotificacion = Notificacion(cuerpo='Eliminación examenes 2S 2023 PREGRADO',
                                 titulo=f'(En proceso) Eliminación de examenes 2S 2023 PREGRADO',
                                 destinatario=ePersona,
                                 url='',
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=5),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()

    eNiveles = Nivel.objects.filter(status=True, periodo=ePeriodo, nivellibrecoordinacion__coordinacion_id__in=[1, 2, 3, 4, 5])
    eMaterias = Materia.objects.filter(status=True, nivel__in=eNiveles, asignaturamalla__malla__modalidad_id=3, asignaturamalla__nivelmalla_id__lte=8)
    for eMateria in eMaterias:
        ePlanificacionClaseSilabos = PlanificacionClaseSilabo.objects.filter(status=True, parcial=2, examen=True, tipoplanificacion__periodo=ePeriodo, tipoplanificacion__planificacionclasesilabo_materia__materia=eMateria)
        eSilabo = Silabo.objects.filter(materia=eMateria, codigoqr=True, status=True).first()
        eSilaboSemanales = SilaboSemanal.objects.filter(silabo=eSilabo, numsemana__in=ePlanificacionClaseSilabos.values_list('semana', flat=True), examen=True)
        eDetalleModeloEvaluativos = DetalleModeloEvaluativo.objects.filter(nombre="EX2", modelo=eMateria.modeloevaluativo, status=True)
        eTestSilaboSemanales = TestSilaboSemanal.objects.filter(status=True, silabosemanal__in=eSilaboSemanales, detallemodelo__in=eDetalleModeloEvaluativos, tiporecurso_id=11)
        # eTestSilaboSemanales = eTestSilaboSemanales.exclude(usuario_creacion_id=1)
        for eTestSilaboSemanal in eTestSilaboSemanales:
            id_test = eTestSilaboSemanal.id
            print("eTestSilaboSemanal: ", eTestSilaboSemanal)
            print("idtestmoodle: ", eTestSilaboSemanal.idtestmoodle)
            eTestSilaboSemanal.delete()
            print(f"Se elimino {id_test}")

    eNotificacion.url = None
    eNotificacion.titulo = f'(Finalizado) Eliminación de examenes 2S 2023 PREGRADO'
    eNotificacion.save()
    print("Proceso finalizado . . .")


def creacion_examen_segundo_parcial_en_linea(ePeriodo):
    from Moodle_Funciones import CrearExamenMoodle
    ePersona = Persona.objects.get(pk=10730)
    eNotificacion = Notificacion(cuerpo='Creación examenes 2S 2023 PREGRADO',
                                 titulo=f'(En proceso) Creación de examenes 2S 2023 PREGRADO',
                                 destinatario=ePersona,
                                 url='',
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=5),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()

    eNiveles = Nivel.objects.filter(status=True, periodo=ePeriodo, nivellibrecoordinacion__coordinacion_id__in=[1, 2, 3, 4, 5])
    eMaterias = Materia.objects.filter(status=True, nivel__in=eNiveles, asignaturamalla__malla__modalidad_id=3, asignaturamalla__nivelmalla_id__lte=8)
    total = eMaterias.count()
    contador = 0
    for eMateria in eMaterias:
        eProfesor = eMateria.profesor_principal()
        with transaction.atomic():
            try:
                contador += 1
                print(f"({contador}/{total}) Materia: ", eMateria.__str__())
                ePlanificacionClaseSilabos = PlanificacionClaseSilabo.objects.filter(status=True, parcial=2, examen=True, tipoplanificacion__periodo=ePeriodo, tipoplanificacion__planificacionclasesilabo_materia__materia=eMateria)
                eSilabo = Silabo.objects.filter(materia=eMateria, codigoqr=True, status=True).first()
                if not eSilabo:
                    raise NameError(u"No se encontro silabo de la materia: %s" % eMateria.__str__())
                if (ePlanificacion := ePlanificacionClaseSilabos.first()) is not None:
                    numsemana = ePlanificacion.semana
                    try:
                        eSilaboSemanal = SilaboSemanal.objects.get(silabo=eSilabo, numsemana=numsemana)
                    except ObjectDoesNotExist:
                        eSilaboSemanal = SilaboSemanal(silabo=eSilabo,
                                                       numsemana=numsemana,
                                                       fechainiciosemana=ePlanificacion.fechainicio,
                                                       fechafinciosemana=ePlanificacion.fechafin,
                                                       examen=True,
                                                       semana=ePlanificacion.fechainicio.isocalendar()[1])
                    eSilaboSemanal.fechainiciosemana=ePlanificacion.fechainicio
                    eSilaboSemanal.fechafinciosemana=ePlanificacion.fechafin
                    eSilaboSemanal.semana=ePlanificacion.fechainicio.isocalendar()[1]
                    eSilaboSemanal.examen = True
                    eSilaboSemanal.save()
                    eDetalleModeloEvaluativo = DetalleModeloEvaluativo.objects.filter(nombre="EX2", modelo=eMateria.modeloevaluativo, status=True).first()
                    try:
                        eTestSilaboSemanal = TestSilaboSemanal.objects.get(silabosemanal=eSilaboSemanal, detallemodelo=eDetalleModeloEvaluativo, tiporecurso_id=11)
                    except ObjectDoesNotExist:
                        eTestSilaboSemanal = TestSilaboSemanal(silabosemanal=eSilaboSemanal,
                                                               detallemodelo=eDetalleModeloEvaluativo,
                                                               tiporecurso_id=11)
                    instruccion = """- Antes de ingresar a realizar el examen el estudiante debe revisar y estudiar todo el material
del curso correspondiente al segundo parcial.
- Inicie el examen en la plataforma en la fecha y hora indicada. (No habrá prórroga)
- Para resolver el presente Examen, dispone de un solo intento.
- El examen debe ser resuelto en el tiempo máximo indicado, verificar su tiempo de
disponibilidad.
- Cualquier acto de deshonestidad académica será considerado como una falta y motivo de la
inmediata suspensión del examen."""
                    recomendacion = """- El examen tendrá una puntuación máxima de 20 puntos.
- Preste atención a la hora de inicio del examen.
- Si comienza el intento tiempo después, ese tiempo se le descontará de la hora
preestablecida.
- No se puede prorrogar el horario del examen.
- Leer cuidadosamente cada pregunta y seguir la instrucción de la misma.
- Una vez finalizado el examen no olvide dar clic en terminar el intento."""
                    eTestSilaboSemanal.estado_id=2
                    eTestSilaboSemanal.calificar=True
                    eTestSilaboSemanal.nombretest='EXAMEN_2'
                    eTestSilaboSemanal.instruccion=instruccion
                    eTestSilaboSemanal.recomendacion=recomendacion
                    eTestSilaboSemanal.fechadesde=ePlanificacion.fechainicio
                    eTestSilaboSemanal.horadesde=datetime(ePlanificacion.fechainicio.year, ePlanificacion.fechainicio.month, ePlanificacion.fechainicio.day, 0, 1)
                    eTestSilaboSemanal.fechahasta=ePlanificacion.fechafin
                    eTestSilaboSemanal.horahasta=datetime(ePlanificacion.fechafin.year, ePlanificacion.fechafin.month, ePlanificacion.fechafin.day, 23, 59)
                    eTestSilaboSemanal.vecesintento=1
                    eTestSilaboSemanal.navegacion=2
                    eTestSilaboSemanal.tiempoduracion=60
                    eTestSilaboSemanal.password='Un3m12023-ex@'
                    # eTestSilaboSemanal.usuario_creacion_id=1
                    # eTestSilaboSemanal.save(usuario_id=1)
                    eTestSilaboSemanal.save()
                    if eProfesor:
                        value, msg = CrearExamenMoodle(eTestSilaboSemanal.id, eProfesor.persona)
                        if not value:
                            raise NameError(msg)
                        eMateria.actualizarhtml = True
                        eMateria.save()
                    print(f"({contador}/{total}) Test: {eTestSilaboSemanal.__str__()} - Materia: ", eMateria.__str__())
            except Exception as ex:
                transaction.set_rollback(True)
                msg = ex.__str__()
                print(msg)

    eNotificacion.url = None
    eNotificacion.titulo = f'(Finalizado) Creación de examenes 2S 2023 PREGRADO'
    eNotificacion.save()
    print("Proceso finalizado . . .")


def eliminar_matricula_nivelacion(ePeriodo):
    ePersona = Persona.objects.get(pk=10730)
    eNotificacion = Notificacion(cuerpo='Eliminación de matriculas 2S 2023 NIVELACIÓN',
                                 titulo=f'(En proceso) Eliminación de matriculas 2S 2023 NIVELACIÓN',
                                 destinatario=ePersona,
                                 url='',
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=5),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()

    eNiveles = Nivel.objects.filter(status=True, periodo=ePeriodo, pk__in=[1516, 1517])
    filtro = Q(nivel__in=eNiveles)
    if not DEBUG:
        filtro = filtro & Q(automatriculaadmision=True, termino=False)
    eMatriculas = Matricula.objects.filter(filtro)
    total = eMatriculas.count()
    contador = 0
    for eMatricula in eMatriculas:
        with transaction.atomic():
            try:
                contador += 1
                eMatricula.status=False
                MateriaAsignada.objects.filter(matricula=eMatricula).update(status=False)
                Rubro.objects.filter(matricula=eMatricula).update(status=False, cancelado=False)
                eMatricula.save()
                print(f"({contador}/{total}) Eliminada Matricula: ", eMatricula.__str__())

            except Exception as ex:
                transaction.set_rollback(True)
                msg = ex.__str__()
                print(msg)

    eNotificacion.url = None
    eNotificacion.titulo = f'(Finalizado) Eliminación de matriculas 2S 2023 NIVELACIÓN'
    eNotificacion.save()
    print("Proceso finalizado . . .")


def reporte_disenio_carrera(ePeriodos):
    ePersona = Persona.objects.get(pk=10730)
    eNotificacion = Notificacion(cuerpo='Generación de reporte para diseño de carrera PREGRADO',
                                 titulo=f'(En proceso) Generación de reporte para diseño de carrera PREGRADO',
                                 destinatario=ePersona,
                                 url='',
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=5),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()
    nombre_archivo = "reporte_disenio_carrera"
    output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
    nombre = nombre_archivo + "_" + datetime.now().strftime('%Y%m%d_%H%M%S') + ".xlsx"
    directory = os.path.join(output_folder, nombre)
    output = io.BytesIO()
    workbook = xlsxwriter.Workbook(directory, {'constant_memory': True})
    ws = workbook.add_worksheet("Hoja1")
    fuentecabecera = workbook.add_format({
        'align': 'center',
        'bg_color': 'silver',
        'border': 1,
        'bold': 1
    })

    formatoceldacenter = workbook.add_format({
        'border': 1,
        'valign': 'vcenter',
        'align': 'center'})

    formatoceldacenter = workbook.add_format({
        'border': 1,
        'valign': 'vcenter',
        'align': 'center'})

    fuenteencabezado = workbook.add_format({
        'align': 'center',
        'bg_color': '#1C3247',
        'font_color': 'white',
        'border': 1,
        'font_size': 24,
        'bold': 1
    })

    columnas = [
        (u"#", 10),
        (u"DOCUMENTO", 20),
        (u"APPELIDO PATERNO", 80),
        (u"APPELIDO MATERNO", 80),
        (u"NOMBRES", 80),
        (u"CARRERA", 80),
        (u"NIVEL", 20),
        (u"PAIS RESIDE", 80),
        (u"PROVINCIA RESIDE", 80),
        (u"CANTON RESIDE", 80),
        (u"PERIODO", 80),
    ]
    ws.merge_range(0, 0, 0, columnas.__len__() - 1, 'UNIVERSIDAD ESTATAL ESTATAL DE MILAGRO', fuenteencabezado)
    ws.merge_range(1, 0, 1, columnas.__len__() - 1, f'REPORTE DE MATRICULADOS DE LOS ÚLTIMOS CINCO AÑOS', fuenteencabezado)
    row_num, numcolum = 2, 0
    for col_name in columnas:
        ws.write(row_num, numcolum, col_name[0], fuentecabecera)
        ws.set_column(numcolum, numcolum, col_name[1])
        numcolum += 1
    row_num = 3
    contador = 0
    eNiveles = Nivel.objects.filter(status=True, periodo__in=ePeriodos, nivellibrecoordinacion__coordinacion_id__in=[1, 2, 3, 4, 5])
    eMatriculas = Matricula.objects.filter(status=True, nivel__in=eNiveles)
    total = eMatriculas.values("id").count()
    for eMatricula in eMatriculas:
        ePeriodo = eMatricula.nivel.periodo
        ePersona = eMatricula.inscripcion.persona
        eCarrera = eMatricula.inscripcion.carrera
        contador += 1
        print(f"({contador}/{total}) {ePersona.nombre_completo()} - {ePeriodo.nombre}")
        ws.write(row_num, 0, contador, formatoceldacenter)
        ws.write(row_num, 1, "%s" % ePersona.documento(), formatoceldacenter)
        ws.write(row_num, 2, "%s" % ePersona.apellido1, formatoceldacenter)
        ws.write(row_num, 3, "%s" % ePersona.apellido2, formatoceldacenter)
        ws.write(row_num, 4, "%s" % ePersona.nombres, formatoceldacenter)
        ws.write(row_num, 5, "%s" % eCarrera.__str__(), formatoceldacenter)
        ws.write(row_num, 6, "%s" % eMatricula.nivelmalla.__str__(), formatoceldacenter)
        ws.write(row_num, 7, "%s" % ePersona.pais.nombre if ePersona.pais else '', formatoceldacenter)
        ws.write(row_num, 8, "%s" % ePersona.provincia.nombre if ePersona.provincia else '', formatoceldacenter)
        ws.write(row_num, 9, "%s" % ePersona.canton.nombre if ePersona.canton else '', formatoceldacenter)
        ws.write(row_num, 10, "%s" % ePeriodo.nombre, formatoceldacenter)

        row_num += 1
    workbook.close()
    print("ARCHIVO: ", directory)
    eNotificacion.url = "{}/{}".format(MEDIA_URL, nombre)
    eNotificacion.titulo = f'(Finalizado) Generación de reporte para diseño de carrera PREGRADO'
    eNotificacion.save()
    print("Proceso finalizado . . .")


def crear_planificacion_disertacion_en_linea(archivo):
    periodo_id = 224
    folder = os.path.join(os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', '2s-2023', 'disertaciones', archivo))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    rows = sheet.rows
    linea = 0
    sede_id = 11 # VIRTUAL
    aula_id = 289 # VIRTUAL-DISERTACIÓN
    detallemodeloevaluativo_id = 117
    # total = len(rows)
    # print(total)
    for row in rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            id_matricula = row[3].value
            id_materia = row[4].value
            fecha = row[10].value
            try:
                eDisertacionFechaPlanificacion = DisertacionFechaPlanificacion.objects.get(fecha=fecha, sede_id=sede_id, periodo_id=periodo_id)
            except ObjectDoesNotExist:
                eDisertacionFechaPlanificacion = DisertacionFechaPlanificacion(fecha=fecha,
                                                                               sede_id=sede_id,
                                                                               periodo_id=periodo_id)
                eDisertacionFechaPlanificacion.save()
            horainicio = row[11].value
            horafin = row[12].value
            try:
                eDisertacionTurnoPlanificacion = DisertacionTurnoPlanificacion.objects.get(fechaplanificacion=eDisertacionFechaPlanificacion, horainicio=horainicio, horafin=horafin)
            except ObjectDoesNotExist:
                eDisertacionTurnoPlanificacion = DisertacionTurnoPlanificacion(fechaplanificacion=eDisertacionFechaPlanificacion,
                                                                               horainicio=horainicio,
                                                                               horafin=horafin)
                eDisertacionTurnoPlanificacion.save()
            try:
                eDisertacionAulaPlanificacion = DisertacionAulaPlanificacion.objects.get(turnoplanificacion=eDisertacionTurnoPlanificacion, aula_id=aula_id)
            except ObjectDoesNotExist:
                eDisertacionAulaPlanificacion = DisertacionAulaPlanificacion(turnoplanificacion=eDisertacionTurnoPlanificacion,
                                                                             aula_id=aula_id)
                eDisertacionAulaPlanificacion.save()

            grupo = row[18].value
            responsable = row[17].value
            eResponsable = None
            try:
                eResponsable = Persona.objects.get(Q(cedula=responsable) | Q(pasaporte=responsable))
            except ObjectDoesNotExist:
                eResponsable = None
            try:
                eMateria = Materia.objects.get(pk=id_materia)
            except ObjectDoesNotExist:
                eMateria = None
            if grupo and eResponsable and eMateria:
                try:
                    eDisertacionGrupoPlanificacion = DisertacionGrupoPlanificacion.objects.get(aulaplanificacion=eDisertacionAulaPlanificacion, grupo=grupo, materia=eMateria, detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                except ObjectDoesNotExist:
                    eDisertacionGrupoPlanificacion = DisertacionGrupoPlanificacion(aulaplanificacion=eDisertacionAulaPlanificacion,
                                                                                   materia=eMateria,
                                                                                   detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                                   grupo=grupo)
                eDisertacionGrupoPlanificacion.responsable = eResponsable
                eDisertacionGrupoPlanificacion.save()
                profesor_1 = row[13].value
                if profesor_1:
                    try:
                        eProfesor1 = Persona.objects.get(Q(cedula=profesor_1) | Q(pasaporte=profesor_1))
                    except ObjectDoesNotExist:
                        eProfesor1 = None
                    if eProfesor1:
                        try:
                            eDisertacionTribunalPlanificacion1 = DisertacionTribunalPlanificacion.objects.get(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor1)
                        except ObjectDoesNotExist:
                            eDisertacionTribunalPlanificacion1 = DisertacionTribunalPlanificacion(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor1)
                            eDisertacionTribunalPlanificacion1.save()
                profesor_2 = row[14].value
                if profesor_2:
                    try:
                        eProfesor2 = Persona.objects.get(Q(cedula=profesor_2) | Q(pasaporte=profesor_2))
                    except ObjectDoesNotExist:
                        eProfesor2 = None
                    if eProfesor2:
                        try:
                            eDisertacionTribunalPlanificacion2 = DisertacionTribunalPlanificacion.objects.get(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor2)
                        except ObjectDoesNotExist:
                            eDisertacionTribunalPlanificacion2 = DisertacionTribunalPlanificacion(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor2)
                            eDisertacionTribunalPlanificacion2.save()
                profesor_3 = row[15].value
                if profesor_3:
                    try:
                        eProfesor3 = Persona.objects.get(Q(cedula=profesor_3) | Q(pasaporte=profesor_3))
                    except ObjectDoesNotExist:
                        eProfesor3 = None
                    if eProfesor3:
                        try:
                            eDisertacionTribunalPlanificacion3 = DisertacionTribunalPlanificacion.objects.get(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor3)
                        except ObjectDoesNotExist:
                            eDisertacionTribunalPlanificacion3 = DisertacionTribunalPlanificacion(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor3)
                            eDisertacionTribunalPlanificacion3.save()
                profesor_4 = row[16].value
                if profesor_4:
                    try:
                        eProfesor4 = Persona.objects.get(Q(cedula=profesor_4) | Q(pasaporte=profesor_4))
                    except ObjectDoesNotExist:
                        eProfesor4 = None
                    if eProfesor4:
                        try:
                            eDisertacionTribunalPlanificacion4 = DisertacionTribunalPlanificacion.objects.get(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor4)
                        except ObjectDoesNotExist:
                            eDisertacionTribunalPlanificacion4 = DisertacionTribunalPlanificacion(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor4)
                            eDisertacionTribunalPlanificacion4.save()

                try:
                    eMatricula = Matricula.objects.get(pk=id_matricula)
                except ObjectDoesNotExist:
                    eMatricula = None
                if eMatricula:
                    try:
                        eMateriaAsignada = MateriaAsignada.objects.get(matricula=eMatricula, materia=eMateria)
                    except ObjectDoesNotExist:
                        eMateriaAsignada = None
                    if eMateriaAsignada:
                        try:
                            eDisertacionMateriaAsignadaPlanificacion = DisertacionMateriaAsignadaPlanificacion.objects.get(grupoplanificacion=eDisertacionGrupoPlanificacion, materiaasignada=eMateriaAsignada)
                        except ObjectDoesNotExist:
                            eDisertacionMateriaAsignadaPlanificacion = DisertacionMateriaAsignadaPlanificacion(grupoplanificacion=eDisertacionGrupoPlanificacion, materiaasignada=eMateriaAsignada)
                            eDisertacionMateriaAsignadaPlanificacion.save()
    # for fecha in fechas:
    #     print(f"*** FECHA: {fecha}")
    #     eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
    #                                                                                                 periodo_id=periodo_id,
    #                                                                                                 fecha=fecha)
    #     if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
    #         eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
    #                                                                                    periodo_id=periodo_id,
    #                                                                                    fecha=fecha)
    #         eFechaPlanificacionSedeVirtualExamen.save()
    #     else:
    #         eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()
    #
    #     for hora in horas:
    #         horainicio = hora[0]
    #         horafin = hora[1]
    #         print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
    #         eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
    #             fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
    #         if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
    #             eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
    #                 fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
    #                 horainicio=horainicio,
    #                 horafin=horafin)
    #             eTurnoPlanificacionSedeVirtualExamen.save()
    #         else:
    #             eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()
    #
    #         for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
    #                                                                      tipo_id=2):
    #             print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
    #             eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
    #                 turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
    #             if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
    #                 eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
    #                     turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
    #                     aula=eLaboratorioVirtual)
    #                 eAulaPlanificacionSedeVirtualExamen.save()
    #             else:
    #                 eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()                     eDisertacionMateriaAsignadaPlanificacion.save()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")


def crear_planificacion_disertacion_presencial(archivo):
    periodo_id = 224
    folder = os.path.join(os.path.join(BASE_DIR, 'runback', 'arreglos', 'archivos', '2s-2023', 'disertaciones', archivo))
    workbook = openpyxl.load_workbook(folder)
    sheet = workbook.worksheets[0]
    rows = sheet.rows
    linea = 0
    sede_id = 11 # VIRTUAL
    aula_id = 315 # VIRTUAL-DISERTACIÓN
    if DEBUG:
        aula_id = 289
    detallemodeloevaluativo_id = 117
    # total = len(rows)
    # print(total)
    for row in rows:
        linea += 1
        if linea > 1:
            print(f"Fila {linea}")
            id_matricula = row[3].value
            id_materia = row[4].value
            fecha = row[10].value
            try:
                eDisertacionFechaPlanificacion = DisertacionFechaPlanificacion.objects.get(fecha=fecha, sede_id=sede_id, periodo_id=periodo_id)
            except ObjectDoesNotExist:
                eDisertacionFechaPlanificacion = DisertacionFechaPlanificacion(fecha=fecha,
                                                                               sede_id=sede_id,
                                                                               periodo_id=periodo_id)
                eDisertacionFechaPlanificacion.save()
            horainicio = row[11].value
            horafin = row[12].value
            try:
                eDisertacionTurnoPlanificacion = DisertacionTurnoPlanificacion.objects.get(fechaplanificacion=eDisertacionFechaPlanificacion, horainicio=horainicio, horafin=horafin)
            except ObjectDoesNotExist:
                eDisertacionTurnoPlanificacion = DisertacionTurnoPlanificacion(fechaplanificacion=eDisertacionFechaPlanificacion,
                                                                               horainicio=horainicio,
                                                                               horafin=horafin)
                eDisertacionTurnoPlanificacion.save()
            try:
                eDisertacionAulaPlanificacion = DisertacionAulaPlanificacion.objects.get(turnoplanificacion=eDisertacionTurnoPlanificacion, aula_id=aula_id)
            except ObjectDoesNotExist:
                eDisertacionAulaPlanificacion = DisertacionAulaPlanificacion(turnoplanificacion=eDisertacionTurnoPlanificacion,
                                                                             aula_id=aula_id)
                eDisertacionAulaPlanificacion.save()

            grupo = row[18].value
            responsable = row[17].value
            eResponsable = None
            try:
                eResponsable = Persona.objects.get(Q(cedula=responsable) | Q(pasaporte=responsable))
            except ObjectDoesNotExist:
                eResponsable = None
            try:
                eMateria = Materia.objects.get(pk=id_materia)
            except ObjectDoesNotExist:
                eMateria = None
            if grupo and eResponsable and eMateria:
                try:
                    eDisertacionGrupoPlanificacion = DisertacionGrupoPlanificacion.objects.get(aulaplanificacion=eDisertacionAulaPlanificacion, grupo=grupo, materia=eMateria, detallemodeloevaluativo_id=detallemodeloevaluativo_id)
                except ObjectDoesNotExist:
                    eDisertacionGrupoPlanificacion = DisertacionGrupoPlanificacion(aulaplanificacion=eDisertacionAulaPlanificacion,
                                                                                   materia=eMateria,
                                                                                   detallemodeloevaluativo_id=detallemodeloevaluativo_id,
                                                                                   grupo=grupo)
                eDisertacionGrupoPlanificacion.responsable = eResponsable
                eDisertacionGrupoPlanificacion.save()
                profesor_1 = row[13].value
                if profesor_1:
                    try:
                        eProfesor1 = Persona.objects.get(Q(cedula=profesor_1) | Q(pasaporte=profesor_1))
                    except ObjectDoesNotExist:
                        eProfesor1 = None
                    if eProfesor1:
                        try:
                            eDisertacionTribunalPlanificacion1 = DisertacionTribunalPlanificacion.objects.get(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor1)
                        except ObjectDoesNotExist:
                            eDisertacionTribunalPlanificacion1 = DisertacionTribunalPlanificacion(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor1)
                            eDisertacionTribunalPlanificacion1.save()
                profesor_2 = row[14].value
                if profesor_2:
                    try:
                        eProfesor2 = Persona.objects.get(Q(cedula=profesor_2) | Q(pasaporte=profesor_2))
                    except ObjectDoesNotExist:
                        eProfesor2 = None
                    if eProfesor2:
                        try:
                            eDisertacionTribunalPlanificacion2 = DisertacionTribunalPlanificacion.objects.get(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor2)
                        except ObjectDoesNotExist:
                            eDisertacionTribunalPlanificacion2 = DisertacionTribunalPlanificacion(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor2)
                            eDisertacionTribunalPlanificacion2.save()
                profesor_3 = row[15].value
                if profesor_3:
                    try:
                        eProfesor3 = Persona.objects.get(Q(cedula=profesor_3) | Q(pasaporte=profesor_3))
                    except ObjectDoesNotExist:
                        eProfesor3 = None
                    if eProfesor3:
                        try:
                            eDisertacionTribunalPlanificacion3 = DisertacionTribunalPlanificacion.objects.get(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor3)
                        except ObjectDoesNotExist:
                            eDisertacionTribunalPlanificacion3 = DisertacionTribunalPlanificacion(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor3)
                            eDisertacionTribunalPlanificacion3.save()
                profesor_4 = row[16].value
                if profesor_4:
                    try:
                        eProfesor4 = Persona.objects.get(Q(cedula=profesor_4) | Q(pasaporte=profesor_4))
                    except ObjectDoesNotExist:
                        eProfesor4 = None
                    if eProfesor4:
                        try:
                            eDisertacionTribunalPlanificacion4 = DisertacionTribunalPlanificacion.objects.get(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor4)
                        except ObjectDoesNotExist:
                            eDisertacionTribunalPlanificacion4 = DisertacionTribunalPlanificacion(grupoplanificacion=eDisertacionGrupoPlanificacion, responsable=eProfesor4)
                            eDisertacionTribunalPlanificacion4.save()

                try:
                    eMatricula = Matricula.objects.get(pk=id_matricula)
                except ObjectDoesNotExist:
                    eMatricula = None
                if eMatricula:
                    try:
                        eMateriaAsignada = MateriaAsignada.objects.get(matricula=eMatricula, materia=eMateria)
                    except ObjectDoesNotExist:
                        eMateriaAsignada = None
                    if eMateriaAsignada:
                        try:
                            eDisertacionMateriaAsignadaPlanificacion = DisertacionMateriaAsignadaPlanificacion.objects.get(grupoplanificacion=eDisertacionGrupoPlanificacion, materiaasignada=eMateriaAsignada)
                        except ObjectDoesNotExist:
                            eDisertacionMateriaAsignadaPlanificacion = DisertacionMateriaAsignadaPlanificacion(grupoplanificacion=eDisertacionGrupoPlanificacion, materiaasignada=eMateriaAsignada)
                            eDisertacionMateriaAsignadaPlanificacion.save()
                            print(f"Planificación {eDisertacionMateriaAsignadaPlanificacion.__str__()}")
    # for fecha in fechas:
    #     print(f"*** FECHA: {fecha}")
    #     eFechaPlanificacionSedeVirtualExamenes = FechaPlanificacionSedeVirtualExamen.objects.filter(sede_id=sede_id,
    #                                                                                                 periodo_id=periodo_id,
    #                                                                                                 fecha=fecha)
    #     if not eFechaPlanificacionSedeVirtualExamenes.values("id").exists():
    #         eFechaPlanificacionSedeVirtualExamen = FechaPlanificacionSedeVirtualExamen(sede_id=sede_id,
    #                                                                                    periodo_id=periodo_id,
    #                                                                                    fecha=fecha)
    #         eFechaPlanificacionSedeVirtualExamen.save()
    #     else:
    #         eFechaPlanificacionSedeVirtualExamen = eFechaPlanificacionSedeVirtualExamenes.first()
    #
    #     for hora in horas:
    #         horainicio = hora[0]
    #         horafin = hora[1]
    #         print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin}")
    #         eTurnoPlanificacionSedeVirtualExamenes = TurnoPlanificacionSedeVirtualExamen.objects.filter(
    #             fechaplanificacion=eFechaPlanificacionSedeVirtualExamen, horainicio=horainicio, horafin=horafin)
    #         if not eTurnoPlanificacionSedeVirtualExamenes.values("id").exists():
    #             eTurnoPlanificacionSedeVirtualExamen = TurnoPlanificacionSedeVirtualExamen(
    #                 fechaplanificacion=eFechaPlanificacionSedeVirtualExamen,
    #                 horainicio=horainicio,
    #                 horafin=horafin)
    #             eTurnoPlanificacionSedeVirtualExamen.save()
    #         else:
    #             eTurnoPlanificacionSedeVirtualExamen = eTurnoPlanificacionSedeVirtualExamenes.first()
    #
    #         for eLaboratorioVirtual in LaboratorioVirtual.objects.filter(sedevirtual_id=sede_id, activo=True,
    #                                                                      tipo_id=2):
    #             print(f"*** FECHA: {fecha} -> hora: {horainicio} - {horafin} -> aula: {eLaboratorioVirtual.nombre}")
    #             eAulaPlanificacionSedeVirtualExamenes = AulaPlanificacionSedeVirtualExamen.objects.filter(
    #                 turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen, aula=eLaboratorioVirtual)
    #             if not eAulaPlanificacionSedeVirtualExamenes.values("id").exists():
    #                 eAulaPlanificacionSedeVirtualExamen = AulaPlanificacionSedeVirtualExamen(
    #                     turnoplanificacion=eTurnoPlanificacionSedeVirtualExamen,
    #                     aula=eLaboratorioVirtual)
    #                 eAulaPlanificacionSedeVirtualExamen.save()
    #             else:
    #                 eAulaPlanificacionSedeVirtualExamen = eAulaPlanificacionSedeVirtualExamenes.first()                     eDisertacionMateriaAsignadaPlanificacion.save()
    print(f"********************************FINALIZA PROCESO PLANIFICAR ")



# eliminar_examen_segundo_parcial_en_linea(Periodo.objects.get(pk=224))
#  creacion_examen_segundo_parcial_en_linea(Periodo.objects.get(pk=224))


# reporte_disenio_carrera(Periodo.objects.filter(pk__in=[224, 177, 153, 126, 119, 113, 112, 110, 90, 85, 80, 76]))





# def importar_cerrar_materias(carrera):
#     periodo = Periodo.objects.get(id=177)
#     materias = Materia.objects.filter(status=True, nivel__periodo=periodo, cerrado=False, asignaturamalla__malla__carrera_id=carrera, fin__lte=datetime.now().date()).order_by('asignaturamalla__nivelmalla__orden')
#     total_materias = materias.values("id").count()
#     contador = 0
#     for materia in materias:
#         contador += 1
#         with transaction.atomic():
#             try:
#                 for asig in materia.asignados_a_esta_materia():
#                     asig.cerrado = True
#                     asig.save(actualiza=False)
#                     asig.actualiza_estado()
#                     asig.cierre_materia_asignada()
#                 materia.cerrado = True
#                 materia.fechacierre = datetime.now().date()
#                 materia.save()
#                 print(f"({total_materias}/{contador}) Materia ({materia.__str__()})")
#             except Exception as ex:
#                 transaction.set_rollback(True)
#                 msg = ex.__str__()
#                 textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
#                 print(textoerror)
#                 print(msg)
#     print('PROCESO FINALIZADO')
#
#
# def coordinacion4():
#     for carrera in Materia.objects.filter(status=True, nivel__periodo_id=177, cerrado=False, asignaturamalla__malla__carrera__coordinacion=4).values_list('asignaturamalla__malla__carrera_id', flat=True).distinct():
#         importar_cerrar_materias(carrera)
#
#
# coordinacion4()

# eMatriculas = Matricula.objects.filter(status=True, retiradomatricula=False, bloqueomatricula=False, nivel__periodo_id=177, inscripcion__carrera__coordinacion__id__in=[1,2,3,4,5])
# eMatriculas = eMatriculas.filter(inscripcion__carrera_id=133)
# # eMatriculas = eMatriculas.filter(cerrada=False)
# total_matriculas = eMatriculas.values("id").count()
# contador = 0
# for eMatricula in eMatriculas:
#     contador += 1
#     MateriaAsignada.objects.filter(matricula=eMatricula, cerrado=False).update(cerrado=True, fechacierre=datetime.now().date())
#     eMatricula.cerrada = True
#     eMatricula.save()
#     eInscripcion = eMatricula.inscripcion
#     eInscripcion.actualizar_nivel()
#     print(f"({total_matriculas} / {contador}) - Matricula: {eMatricula.__str__()} cerrada")


archivos = [
    'EDUESPE - 8VO NIVEL - A1.xlsx',
    'ECO2019 - 8VO NIVEL.xlsx',
    'FISIOTE. - 9VO NIVEL - A1.xlsx',
    'EDU-2019 - 8VO NIVEL - C1.xlsx',
    'EDU-2019 - 8VO NIVEL - B1.xlsx',
    'EDU-2019 - 8VO NIVEL - B2.xlsx',
    'EDU-2019 - 8VO NIVEL - B3.xlsx',
    'TRAB-SOC-2019 - 8VO NIVEL.xlsx',
    'AMBI2019 - 8VO NIVEL.xlsx',
]
for archivo in archivos:
    print(f"Leyendo archivo {archivo}")
    crear_planificacion_disertacion_presencial(archivo)
