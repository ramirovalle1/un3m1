import os
import sys
import io
import xlsxwriter
import xlwt
import openpyxl
import xlwt
from xlwt import *
from django.http import HttpResponse
from xlwt import *

# SITE_ROOT = os.path.dirname(os.path.realpath(__file__))


YOUR_PATH = os.path.dirname(os.path.realpath(__file__))
# print(f"YOUR_PATH: {YOUR_PATH}")
SITE_ROOT = os.path.dirname(os.path.dirname(YOUR_PATH))
SITE_ROOT = os.path.join(SITE_ROOT, '')
# print(f"SITE_ROOT: {SITE_ROOT}")
your_djangoproject_home = os.path.split(SITE_ROOT)[0]
# print(f"your_djangoproject_home: {your_djangoproject_home}")
sys.path.append(your_djangoproject_home)

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
application = get_wsgi_application()

from django.http import HttpResponse
from settings import MEDIA_ROOT, BASE_DIR
from xlwt import easyxf, XFStyle
from sga.adm_criteriosactividadesdocente import asistencia_tutoria
from inno.models import *
from sga.models import *
from sagest.models import *
from balcon.models import *
from inno.funciones import *
from Moodle_Funciones import crearhtmlphpmoodle
from collections import Counter
from django.db import transaction, connection
from django.db.models import Q, Sum, Count


################################################# VERIFICADAS ################################################
###MIGRACION TRABAJO SOCIAL
# @transaction.atomic()
def homologacion_ts():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_ts_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ts.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=130
        mallaantigua_id=206
        mallanueva_id=485

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10777, 10787]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10777:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=8)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10787:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10724, 10730]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10724 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas = horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                            )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10730 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas = horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                            )
                                            vinculacion.save()


                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def homologacion_ts_rezagados():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_ts_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inscripcion_ts.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=130
        mallaantigua_id=206
        mallanueva_id=485
        sin_matricula = []

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                inscripcion = int(currentValues[0])

                if not inscripcion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion_id=inscripcion).first()
                if matricula:
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s - %s" % (matricula, cont, inscripcion))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                        imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True



                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():



                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                           creditos=recordnuevo.creditos,
                                                                                                                           horas=recordnuevo.horas,
                                                                                                                           homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10777, 10787]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10777:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=8)


                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()


                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=ioctavonuevo.horas_practicas,
                                                                                                             nivelmalla=ioctavonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=ioctavonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10787:
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=inovenonuevo.horas_practicas,
                                                                                                             nivelmalla=inovenonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=inovenonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)


                                if equivalencia.asignaturamallasalto_id in [10724, 10730]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10724 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas = horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10730 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas = horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                )
                                                vinculacion.save()


                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)


                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                    fila += 1

                    time.sleep(1)
                else:
                    sin_matricula.append(inscripcion)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
        print(str(sin_matricula))


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def llenar_tabla_equivalencias_ts():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_trabajosocial.xlsx")
        lista = miarchivo.get_sheet_by_name('malla_nuevas')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva = int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                   asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                           asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s" % tablaeq)
                else:
                    tablaeq = \
                    TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[
                        0]
                    tablaeq.asignaturamallasalto_id = idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s" % a)

    except Exception as ex:
            print('error: %s' % ex)

###MIGRACION IDIOMAS
def llenar_tabla_equivalencias_idiomas():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_pedagogia.xlsx")
        lista = miarchivo.get_sheet_by_name('datos')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva = int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                   asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                           asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s" % tablaeq)
                else:
                    tablaeq = \
                    TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[
                        0]
                    tablaeq.asignaturamallasalto_id = idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s" % a)

    except Exception as ex:
            print('error: %s' % ex)


def homologacion_idiomas():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_idiomas.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("idiomas.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=129
        mallaantigua_id=198
        mallanueva_id=492

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [11018,11021,11020,10990,10991,11005,10993,10997,11007]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [11018,11021,11020,10990,10991,11005,10993,10997,11007]:
                                if not practicaspp or not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 11018:

                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioprimero).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)

                                        if equivalencia.asignaturamallasalto_id == 11021:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosegundo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)

                                        if equivalencia.asignaturamallasalto_id == 11020:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariotercero).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10990:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariocuarto).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10991:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioquinto).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)

                                        if equivalencia.asignaturamallasalto_id == 11005:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10993:
                                            ####################################### VINCULACION ###################################################
                                            if not horasvinculacion:
                                                if inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                    horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                    vinculacion = ParticipantesMatrices(status=True,
                                                                                        matrizevidencia_id=2,
                                                                                        proyecto_id=601,
                                                                                        inscripcion=inscripcion,
                                                                                        horas=horasfalta,
                                                                                        registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                        registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                        estado=1
                                                                                        )
                                                    vinculacion.save()
                                            ######################################################################################################
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10997:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 11007:
                                            ####################################### VINCULACION ###################################################
                                            if not horasvinculacion:
                                                if inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                    horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                    vinculacion = ParticipantesMatrices(status=True,
                                                                                        matrizevidencia_id=2,
                                                                                        proyecto_id=601,
                                                                                        inscripcion=inscripcion,
                                                                                        horas=horasfalta,
                                                                                        registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                        registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                        estado=1
                                                                                        )
                                                    vinculacion.save()
                                            ######################################################################################################
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def homologacion_idiomas_rezagados():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_idiomas.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inscripcion_idiomas.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=129
        mallaantigua_id=198
        mallanueva_id=492
        sin_matricula = []

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                inscripcion = int(currentValues[0])

                if not inscripcion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion_id=inscripcion).first()
                if matricula:
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s - %s" % (matricula, cont, inscripcion))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                        imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [11018,11021,11020,10990,10991,11005,10993,10997,11007]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True


                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():



                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                           creditos=recordnuevo.creditos,
                                                                                                                           horas=recordnuevo.horas,
                                                                                                                           homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                                if equivalencia.asignaturamallasalto_id in [11018,11021,11020,10990,10991,11005,10993,10997,11007]:
                                    if not practicaspp or not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 11018:

                                                itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                                iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarioprimero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioprimero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarioprimero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iprimeronuevo.horas_practicas,
                                                                                                             nivelmalla=iprimeronuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iprimeronuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarioprimero).update(
                                                    itinerario=iprimeronuevo)

                                            if equivalencia.asignaturamallasalto_id == 11021:
                                                itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=2)
                                                isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=2)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariosegundo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosegundo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariosegundo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=isegundonuevo.horas_practicas,
                                                                                                             nivelmalla=isegundonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=isegundonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariosegundo).update(
                                                    itinerario=isegundonuevo)

                                            if equivalencia.asignaturamallasalto_id == 11020:
                                                itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=3)
                                                iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=3)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariotercero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariotercero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariotercero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iterceronuevo.horas_practicas,
                                                                                                             nivelmalla=iterceronuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iterceronuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariotercero).update(
                                                    itinerario=iterceronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10990:
                                                itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=4)
                                                icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=4)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariocuarto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariocuarto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariocuarto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=icuartonuevo.horas_practicas,
                                                                                                             nivelmalla=icuartonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=icuartonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariocuarto).update(
                                                    itinerario=icuartonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10991:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iquintonuevo.horas_practicas,
                                                                                                             nivelmalla=iquintonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iquintonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)

                                            if equivalencia.asignaturamallasalto_id == 11005:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=isextonuevo.horas_practicas,
                                                                                                             nivelmalla=isextonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=isextonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10993:
                                                ####################################### VINCULACION ###################################################
                                                if not horasvinculacion:
                                                    if inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                        horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                        vinculacion = ParticipantesMatrices(status=True,
                                                                                            matrizevidencia_id=2,
                                                                                            proyecto_id=601,
                                                                                            inscripcion=inscripcion,
                                                                                            horas=horasfalta,
                                                                                            registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                            registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                            estado=1
                                                                                            )
                                                        vinculacion.save()
                                                ######################################################################################################
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=7)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iseptimonuevo.horas_practicas,
                                                                                                             nivelmalla=iseptimonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iseptimonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10997:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=8)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=ioctavonuevo.horas_practicas,
                                                                                                             nivelmalla=ioctavonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=ioctavonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)

                                            if equivalencia.asignaturamallasalto_id == 11007:
                                                ####################################### VINCULACION ###################################################
                                                if not horasvinculacion:
                                                    if inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                        horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                        vinculacion = ParticipantesMatrices(status=True,
                                                                                            matrizevidencia_id=2,
                                                                                            proyecto_id=601,
                                                                                            inscripcion=inscripcion,
                                                                                            horas=horasfalta,
                                                                                            registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                            registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                            estado=1
                                                                                            )
                                                        vinculacion.save()
                                                ######################################################################################################
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=inovenonuevo.horas_practicas,
                                                                                                             nivelmalla=inovenonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=inovenonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)


                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                    fila += 1

                    time.sleep(1)

                else:
                    sin_matricula.append(inscripcion)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
        print(str(sin_matricula))

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


###MIGRACION COMUNICACION
def llenar_tabla_equivalencias_com():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_comunicacion.xlsx")
        lista = miarchivo.get_sheet_by_name('MALLA_NUEVA')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva = int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                   asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                           asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s" % tablaeq)
                else:
                    tablaeq = \
                    TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[
                        0]
                    tablaeq.asignaturamallasalto_id = idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s" % a)

    except Exception as ex:
            print('error: %s' % ex)


def homologacion_comunicacion():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_comunicacion.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("comlinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=131
        mallaantigua_id=205
        mallanueva_id=488

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10850,10853,10854,10859,10865]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10850,10853,10854]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10850:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[0]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[0]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10854:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[1]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[1]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10853:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[2]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[2]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)


                            if equivalencia.asignaturamallasalto_id in [10859,10865]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10859 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10865 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                # if cont_asig_vinculacion_aprobadas != 0:
                #     if cont_asig_vinculacion_aprobadas == 1:
                #         horasfalta = 80
                #     elif cont_asig_vinculacion_aprobadas == 2:
                #         horasfalta = 160
                #     vinculacion = ParticipantesMatrices(status=True,
                #                                         matrizevidencia_id=2,
                #                                         proyecto_id=601,
                #                                         inscripcion=inscripcion,
                #                                         horas=horasfalta,
                #                                         registrohorasdesde=datetime.now().date(),
                #                                         registrohorashasta=datetime.now().date(),
                #                                         estado=1
                #                                         )
                #     vinculacion.save()

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def homologacion_comunicacion_rezagados():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_comunicacion.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inscripcion_comunicacion.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=131
        mallaantigua_id=205
        mallanueva_id=488
        sin_matricula = []

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                inscripcion = int(currentValues[0])

                if not inscripcion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion_id=inscripcion).first()
                if matricula:
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                        imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10850,10853,10854,10859,10865]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True



                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():



                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                           creditos=recordnuevo.creditos,
                                                                                                                           horas=recordnuevo.horas,
                                                                                                                           homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10850,10853,10854]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10850:
                                                itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[0]
                                                itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[0]

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariosanteriores).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosanteriores).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariosanteriores).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=itinerariosnuevos.horas_practicas,
                                                                                                             nivelmalla=itinerariosnuevos.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=itinerariosnuevos,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariosanteriores).update(
                                                    itinerario=itinerariosnuevos)

                                            if equivalencia.asignaturamallasalto_id == 10854:
                                                itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[1]
                                                itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[1]

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariosanteriores).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosanteriores).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariosanteriores).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=itinerariosnuevos.horas_practicas,
                                                                                                             nivelmalla=itinerariosnuevos.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=itinerariosnuevos,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariosanteriores).update(
                                                    itinerario=itinerariosnuevos)

                                            if equivalencia.asignaturamallasalto_id == 10853:
                                                itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[2]
                                                itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[2]

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariosanteriores).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosanteriores).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariosanteriores).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=itinerariosnuevos.horas_practicas,
                                                                                                             nivelmalla=itinerariosnuevos.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=itinerariosnuevos,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariosanteriores).update(
                                                    itinerario=itinerariosnuevos)


                                if equivalencia.asignaturamallasalto_id in [10859,10865]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10859 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10865 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    # if cont_asig_vinculacion_aprobadas != 0:
                    #     if cont_asig_vinculacion_aprobadas == 1:
                    #         horasfalta = 80
                    #     elif cont_asig_vinculacion_aprobadas == 2:
                    #         horasfalta = 160
                    #     vinculacion = ParticipantesMatrices(status=True,
                    #                                         matrizevidencia_id=2,
                    #                                         proyecto_id=601,
                    #                                         inscripcion=inscripcion,
                    #                                         horas=horasfalta,
                    #                                         registrohorasdesde=datetime.now().date(),
                    #                                         registrohorashasta=datetime.now().date(),
                    #                                         estado=1
                    #                                         )
                    #     vinculacion.save()

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

                else:
                    sin_matricula.append(inscripcion)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
        print(str(sin_matricula))

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


###MIGRACION ECONOMIA
def llenar_tabla_equivalencias_econo():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_economia.xlsx")
        lista = miarchivo.get_sheet_by_name('MALLA NUEVA')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva = int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                   asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                           asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s" % tablaeq)
                else:
                    tablaeq = \
                    TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[
                        0]
                    tablaeq.asignaturamallasalto_id = idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s" % a)

    except Exception as ex:
            print('error: %s' % ex)


def homologacion_economia():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_econo.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("econo.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=128
        mallaantigua_id=201
        mallanueva_id=489

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10733, 10742, 10770, 10774]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True

                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10770, 10774]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10770:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10774:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                            if equivalencia.asignaturamallasalto_id in [10733, 10742]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10733 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10742 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()


                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def homologacion_economia_rezagados():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_econo.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inscripcion_economia.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("datos1")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=128
        mallaantigua_id=201
        mallanueva_id=489
        sin_matricula = []

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                inscripcion = int(currentValues[0])

                if not inscripcion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion_id=inscripcion).first()
                # if not matricula:
                #     sin_matricula.append(inscripcion)
                if matricula:
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                        imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10733, 10742, 10770, 10774]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True

                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():



                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                           creditos=recordnuevo.creditos,
                                                                                                                           horas=recordnuevo.horas,
                                                                                                                           homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                                if equivalencia.asignaturamallasalto_id in [10770, 10774]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10770:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=isextonuevo.horas_practicas,
                                                                                                             nivelmalla=isextonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=isextonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10774:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=7)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iseptimonuevo.horas_practicas,
                                                                                                             nivelmalla=iseptimonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iseptimonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                if equivalencia.asignaturamallasalto_id in [10733, 10742]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10733 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10742 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()


                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

                else:
                    sin_matricula.append(inscripcion)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
        print(str(sin_matricula))

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

###MIGRACION INICIAL
def homologacion_inicial():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_inicial.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inicial.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10926,10928]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10928]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10831:
                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud=3,
                                                                                                               itinerariomalla=itinerarioprimero).exists()

                                            if not practica or practicarechazada :
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10856:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosegundo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10880:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariotercero).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10894:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariocuarto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10899:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioquinto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10907:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10910:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10928:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10926]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10926 and inscripcion.numero_horas_proyectos_vinculacion() < 320:
                                            horasfalta = 320 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def homologacion_inicial_rezagados():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_inicial.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inscripcion_inicial.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491
        sin_matricula = []

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                inscripcion = int(currentValues[0])

                if not inscripcion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion_id=inscripcion).first()
                if matricula:
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                        imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10926,10928]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True


                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():



                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                           creditos=recordnuevo.creditos,
                                                                                                                           horas=recordnuevo.horas,
                                                                                                                           homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                                if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10928]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10831:
                                                itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                                iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarioprimero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud=3,
                                                                                                                   itinerariomalla=itinerarioprimero).exists()

                                                if not practica or practicarechazada :
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarioprimero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iprimeronuevo.horas_practicas,
                                                                                                             nivelmalla=iprimeronuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iprimeronuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarioprimero).update(
                                                    itinerario=iprimeronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10856:
                                                itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=2)
                                                isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=2)


                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariosegundo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosegundo).exists()


                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariosegundo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=isegundonuevo.horas_practicas,
                                                                                                             nivelmalla=isegundonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=isegundonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariosegundo).update(
                                                    itinerario=isegundonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10880:
                                                itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=3)
                                                iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=3)


                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariotercero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariotercero).exists()


                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariotercero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iterceronuevo.horas_practicas,
                                                                                                             nivelmalla=iterceronuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iterceronuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariotercero).update(
                                                    itinerario=iterceronuevo)

                                            if equivalencia.asignaturamallasalto_id == 10894:
                                                itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=4)
                                                icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=4)


                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariocuarto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariocuarto).exists()


                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariocuarto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=icuartonuevo.horas_practicas,
                                                                                                             nivelmalla=icuartonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=icuartonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariocuarto).update(
                                                    itinerario=icuartonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10899:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)


                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()


                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iquintonuevo.horas_practicas,
                                                                                                             nivelmalla=iquintonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iquintonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10907:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()


                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=isextonuevo.horas_practicas,
                                                                                                             nivelmalla=isextonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=isextonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10910:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=7)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iseptimonuevo.horas_practicas,
                                                                                                             nivelmalla=iseptimonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iseptimonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10928:
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=inovenonuevo.horas_practicas,
                                                                                                             nivelmalla=inovenonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=inovenonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)


                                if equivalencia.asignaturamallasalto_id in [10926]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10926 and inscripcion.numero_horas_proyectos_vinculacion() < 320:
                                                horasfalta = 320 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

                else:
                    sin_matricula.append(inscripcion)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
        print(str(sin_matricula))

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def llenar_tabla_equivalencias_inicial():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_einicial.xlsx")
        lista = miarchivo.get_sheet_by_name('datos')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva = int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                   asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                           asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s" % tablaeq)
                else:
                    tablaeq = \
                    TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[
                        0]
                    tablaeq.asignaturamallasalto_id = idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s" % a)

    except Exception as ex:
            print('error: %s' % ex)


###MIGRACION BASICA
def llenar_tabla_equivalencias_basica():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_eb.xlsx")
        lista = miarchivo.get_sheet_by_name('datos')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva = int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                   asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                           asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s" % tablaeq)
                else:
                    tablaeq = \
                    TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[
                        0]
                    tablaeq.asignaturamallasalto_id = idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s" % a)

    except Exception as ex:
            print('error: %s' % ex)

###MIGRACION BASICA
def homologacion_basica():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_basica.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("basica.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=135
        mallaantigua_id=208
        mallanueva_id=490

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10822,10834,10846,10858,10870,10888,10913,10930,10944]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10822,10834,10846,10858,10870,10888,10913,10930,10944]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10822:
                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioprimero).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)


                                        if equivalencia.asignaturamallasalto_id == 10834:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosegundo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)


                                        if equivalencia.asignaturamallasalto_id == 10846:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariotercero).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)


                                        if equivalencia.asignaturamallasalto_id == 10858:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariocuarto).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)


                                        if equivalencia.asignaturamallasalto_id == 10870:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioquinto).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)


                                        if equivalencia.asignaturamallasalto_id == 10888:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)


                                        if equivalencia.asignaturamallasalto_id == 10913:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)


                                        if equivalencia.asignaturamallasalto_id == 10930:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)


                                        if equivalencia.asignaturamallasalto_id == 10944:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10913,10930]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10913 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10930 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                # if cont_asig_vinculacion_aprobadas != 0:
                #     if cont_asig_vinculacion_aprobadas == 1:
                #         horasfalta = 80
                #     elif cont_asig_vinculacion_aprobadas == 2:
                #         horasfalta = 160
                #     horasfalta = horasfalta - inscripcion.numero_horas_proyectos_vinculacion()
                #     vinculacion = ParticipantesMatrices(status=True,
                #                                         matrizevidencia_id=2,
                #                                         proyecto_id=601,
                #                                         inscripcion=inscripcion,
                #                                         horas=horasfalta,
                #                                         registrohorasdesde=fechainicioitinerario,
                #                                         registrohorashasta=fechafinitinerario,
                #                                         estado=1
                #                                         )
                #     vinculacion.save()

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def homologacion_basica_rezagados():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_basica.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inscripcion_basica.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("datos")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=135
        mallaantigua_id=208
        mallanueva_id=490
        sin_matricula = []
        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                inscripcion = int(currentValues[0])

                if not inscripcion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion_id=inscripcion).first()
                # if not matricula:
                #     sin_matricula.append(inscripcion)

                if matricula:
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                        imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10822,10834,10846,10858,10870,10888,10913,10930,10944]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True


                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():



                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                           creditos=recordnuevo.creditos,
                                                                                                                           horas=recordnuevo.horas,
                                                                                                                           homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                                if equivalencia.asignaturamallasalto_id in [10822,10834,10846,10858,10870,10888,10913,10930,10944]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10822:
                                                itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                                iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarioprimero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioprimero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarioprimero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iprimeronuevo.horas_practicas,
                                                                                                             nivelmalla=iprimeronuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iprimeronuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarioprimero).update(
                                                    itinerario=iprimeronuevo)


                                            if equivalencia.asignaturamallasalto_id == 10834:
                                                itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=2)
                                                isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=2)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariosegundo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosegundo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariosegundo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=isegundonuevo.horas_practicas,
                                                                                                             nivelmalla=isegundonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=isegundonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariosegundo).update(
                                                    itinerario=isegundonuevo)


                                            if equivalencia.asignaturamallasalto_id == 10846:
                                                itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=3)
                                                iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=3)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariotercero).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariotercero).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariotercero).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iterceronuevo.horas_practicas,
                                                                                                             nivelmalla=iterceronuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iterceronuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariotercero).update(
                                                    itinerario=iterceronuevo)


                                            if equivalencia.asignaturamallasalto_id == 10858:
                                                itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=4)
                                                icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=4)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariocuarto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariocuarto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariocuarto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=icuartonuevo.horas_practicas,
                                                                                                             nivelmalla=icuartonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=icuartonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariocuarto).update(
                                                    itinerario=icuartonuevo)


                                            if equivalencia.asignaturamallasalto_id == 10870:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iquintonuevo.horas_practicas,
                                                                                                             nivelmalla=iquintonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iquintonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)


                                            if equivalencia.asignaturamallasalto_id == 10888:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=isextonuevo.horas_practicas,
                                                                                                             nivelmalla=isextonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=isextonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)


                                            if equivalencia.asignaturamallasalto_id == 10913:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=7)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=iseptimonuevo.horas_practicas,
                                                                                                             nivelmalla=iseptimonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=iseptimonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)


                                            if equivalencia.asignaturamallasalto_id == 10930:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=8)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=ioctavonuevo.horas_practicas,
                                                                                                             nivelmalla=ioctavonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=ioctavonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)


                                            if equivalencia.asignaturamallasalto_id == 10944:
                                                itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=9)
                                                inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=9)
                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               estadosolicitud__in=[
                                                                                                                   1, 2, 4,
                                                                                                                   5, 6],
                                                                                                               itinerariomalla=itinerarionoveno).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarionoveno).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                               inscripcion=inscripcion,
                                                                                                               actividad__itinerariomalla=itinerarionoveno).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                             inscripcion=inscripcion,
                                                                                                             fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             numerohora=inovenonuevo.horas_practicas,
                                                                                                             nivelmalla=inovenonuevo.nivel,
                                                                                                             tiposolicitud=1,
                                                                                                             estadosolicitud=2,
                                                                                                             tipo=1,
                                                                                                             itinerariomalla=inovenonuevo,
                                                                                                             supervisor=profesor,
                                                                                                             tutorunemi=profesor,
                                                                                                             fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             tipoinstitucion=1,
                                                                                                             sectoreconomico=6,
                                                                                                             empresaempleadora_id=3,
                                                                                                             culminada=True,
                                                                                                             fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                             lugarpractica_id=2,
                                                                                                             observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                             )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                              itinerario=itinerarionoveno).update(
                                                    itinerario=inovenonuevo)


                                if equivalencia.asignaturamallasalto_id in [10913,10930]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10913 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10930 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    # if cont_asig_vinculacion_aprobadas != 0:
                    #     if cont_asig_vinculacion_aprobadas == 1:
                    #         horasfalta = 80
                    #     elif cont_asig_vinculacion_aprobadas == 2:
                    #         horasfalta = 160
                    #     horasfalta = horasfalta - inscripcion.numero_horas_proyectos_vinculacion()
                    #     vinculacion = ParticipantesMatrices(status=True,
                    #                                         matrizevidencia_id=2,
                    #                                         proyecto_id=601,
                    #                                         inscripcion=inscripcion,
                    #                                         horas=horasfalta,
                    #                                         registrohorasdesde=fechainicioitinerario,
                    #                                         registrohorashasta=fechafinitinerario,
                    #                                         estado=1
                    #                                         )
                    #     vinculacion.save()

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
        print(str(sin_matricula))

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1




###TURISMO
def homologacion_turismo_rezagados():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_turismo_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inscripcion_turismo.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("datos")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 134
        mallaantigua_id = 199
        mallanueva_id = 487
        sin_matricula = []
        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                inscripcion = int(currentValues[0])

                if not inscripcion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion_id=inscripcion).first()
                if matricula:
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    itinerarios = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                            InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                            malla_id=mallaantigua_id)[
                                0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')

                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10929, 10947, 10959, 10953, 10964]:
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True



                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10929, 10947, 10953]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10929:
                                                itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=5)
                                                iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=5)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioquinto).exists()
                                                practicarechazada = False

                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioquinto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioquinto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iquintonuevo.horas_practicas,
                                                            nivelmalla=iquintonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iquintonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioquinto).update(
                                                    itinerario=iquintonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10947:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False

                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10953:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False

                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                if equivalencia.asignaturamallasalto_id in [10959, 10964]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            totalhoras = inscripcion.numero_horas_proyectos_vinculacion()
                                            if totalhoras == 0:
                                                a = 0
                                                print('sin horas')
                                            if equivalencia.asignaturamallasalto_id == 10959 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10964 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)


                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

                else:
                    sin_matricula.append(inscripcion)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
        print(str(sin_matricula))

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def llenar_tabla_equivalencias_turismo():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_turismo.xlsx")
        lista = miarchivo.get_sheet_by_name('MALLA_NUEVA')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva = int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                   asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                           asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s" % tablaeq)
                else:
                    tablaeq = \
                    TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[
                        0]
                    tablaeq.asignaturamallasalto_id = idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s" % a)

    except Exception as ex:
            print('error: %s' % ex)


###PSICOLOGÍA
def homologacion_psicologia_rezagados():
    try:
        libre_origen = '/homologacion_psico_2_8.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inscripcion_psicologia.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("datos")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 132
        mallaantigua_id = 204
        mallanueva_id = 479
        sin_matricula = []

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                inscripcion = int(currentValues[0])

                if not inscripcion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion_id=inscripcion).first()
                # if not matricula:
                #     sin_matricula.append(inscripcion)
                if matricula:
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                            InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                            malla_id=mallaantigua_id)[0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')

                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None

                    temporal = []
                    for e in equivalencias:
                        temporal.append(
                            [inscripcion.recordacademico_set.filter(status=True,
                                                                    asignaturamalla=e.asignaturamalla).first(),
                             e])

                    for t in temporal:
                        recordantiguo, equivalencia = t

                        old, new = equivalencia.asignaturamalla, equivalencia.asignaturamallasalto
                        print(f"Nueva - {equivalencia.asignaturamallasalto}")

                        if recordantiguo:
                            print(f"Anterior - {equivalencia.asignaturamalla}")
                            print(f"Record antiguo: {recordantiguo}")

                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            recordnuevo, homologada = None, False
                            if equivalencia.asignaturamallasalto_id in (10646, 10649, 10654, 10639):
                                observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                                homologada = True
                            else:
                                observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"

                            if recordnuevo := inscripcion.recordacademico_set.filter(asignaturamalla=new,
                                                                                     status=True).first():
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()
                            else:
                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo, creditos=recordnuevo.creditos, horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(recordacademicooriginal=recordantiguo,
                                                                             recordacademiconuevo=recordnuevo)
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()

                                if equivalencia.asignaturamallasalto_id in [10646, 10649, 10654]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10646:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)

                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()
                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10649:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10654:
                                                itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallaantigua_id,
                                                                                                nivel_id=8)
                                                ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallanueva_id,
                                                                                            nivel_id=8)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariooctavo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariooctavo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariooctavo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=ioctavonuevo.horas_practicas,
                                                            nivelmalla=ioctavonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=ioctavonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                        )
                                                        nuevapractica.save()
                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariooctavo).update(
                                                    itinerario=ioctavonuevo)

                                if equivalencia.asignaturamallasalto_id in [10639, 10654]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10639:
                                                cont_asig_vinculacion_aprobadas += 1

                                            if equivalencia.asignaturamallasalto_id == 10654:
                                                cont_asig_vinculacion_aprobadas += 1
                                            fechainicioitinerario = recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date()
                                            fechafinitinerario = recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date()

                                print(u"Record actualizado %s" % recordnuevo)
                        else:
                            hojadestino.write(fila, 5, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    if cont_asig_vinculacion_aprobadas != 0:
                        if cont_asig_vinculacion_aprobadas == 1:
                            horasfalta = 144
                        if cont_asig_vinculacion_aprobadas == 2:
                            horasfalta = 160
                        horasfalta = horasfalta - inscripcion.numero_horas_proyectos_vinculacion()
                        vinculacion = ParticipantesMatrices(status=True,
                                                            matrizevidencia_id=2,
                                                            proyecto_id=601,
                                                            inscripcion=inscripcion,
                                                            horas=horasfalta,
                                                            registrohorasdesde=fechainicioitinerario,
                                                            registrohorashasta=fechafinitinerario,
                                                            estado=1
                                                            )
                        vinculacion.save()

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                    fila += 1

                    time.sleep(1)
                else:
                    sin_matricula.append(inscripcion)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
        print(str(sin_matricula))

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def llenar_tabla_equivalencias_psicología():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_psicolo.xlsx")
        lista = miarchivo.get_sheet_by_name('MALLA_NUEVA')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva = int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                   asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                           asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s" % tablaeq)
                else:
                    tablaeq = \
                    TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[
                        0]
                    tablaeq.asignaturamallasalto_id = idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s" % a)

    except Exception as ex:
            print('error: %s' % ex)
##########################################################################################################################


#################################################### POR VERIFICAR ######################################################

###MIGRACION TICS
def llenar_tabla_equivalencias_tics():
    try:
        miarchivo = openpyxl.load_workbook("equivalencia_malla_tics.xlsx")
        lista = miarchivo.get_sheet_by_name('datos')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva = int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                   asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                           asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s" % tablaeq)
                else:
                    tablaeq = \
                    TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[
                        0]
                    tablaeq.asignaturamallasalto_id = idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s" % a)

    except Exception as ex:
            print('error: %s' % ex)

###MIGRACION TICS
def homologacion_tics():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_tics.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACIÓN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACIÓN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("tics.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=133
        mallaantigua_id=202
        mallanueva_id=478

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10587,10618,10612]:
                            observaciones = recordantiguo.observaciones + " Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migración con base a RESOLUCIÓN CGA-SO-9-2023-NO15 Y RESOLUCIÓN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10618,10612]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10618:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10612:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)
                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologación con base a RESOLUCIÓN CGA-SO-9-2023-NO28 Y RESOLUCIÓN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)


                            if equivalencia.asignaturamallasalto_id in [10587]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10587 and inscripcion.numero_horas_proyectos_vinculacion() < 96:
                                            horasfalta = 96 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()


                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def reporte_estudiantes_horas_PPP_culminadas_aprobadas():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/reporte_estudiantes_horas_PPP_culminadas_aprobadas.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                    (u"ITINERARO REPETIDO", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        miarchivo = openpyxl.load_workbook("idiomas.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        carrera_id = 129
        mallaantigua_id = 198
        mallanueva_id = 492
        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                inscripcion = matricula.inscripcion
                PPP = inscripcion.numero_horas_practicas_pre_profesionales()

                for i in range(1, 10):

                    practicaanterior = False
                    itinerarioviejo = ItinerariosMalla.objects.get(status=True,
                                                                    malla_id=mallaantigua_id,
                                                                    nivel_id=i)
                    itinerarionuevo = ItinerariosMalla.objects.get(status=True,
                                                                malla_id=mallanueva_id,
                                                                nivel_id=i)


                    practicanueva = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                           inscripcion=inscripcion,
                                                                                           estadosolicitud__in=[
                                                                                               1, 2, 4],
                                                                                           itinerariomalla=itinerarionuevo).exists()
                    practicaactividad = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                        inscripcion=inscripcion,
                                                                        estadosolicitud__in=[1, 2, 4],
                                                                        actividad__itinerariomalla=itinerarioviejo).exists()
                    if not practicaactividad:
                        practicaanterior = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                               inscripcion=inscripcion,
                                                                                               estadosolicitud__in=[
                                                                                                   1, 2, 4],
                                                                                               itinerariomalla=itinerarioviejo).exists()

                    if practicaanterior:
                        if practicaanterior and practicanueva:
                            hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                            hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                            hojadestino.write(fila, 2, str(itinerarioviejo.nombre) + ' ' + str(itinerarioviejo.nivel) + ' - ' + str(itinerarionuevo.nombre) + ' ' + str(itinerarionuevo.nivel), fuentenormal)
                            fila += 1

                    if practicaactividad:
                        if practicaactividad and practicanueva:
                            hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                            hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                            hojadestino.write(fila, 2, str(itinerarioviejo.nombre) + ' ' + str(itinerarioviejo.nivel) + ' - ' + str(itinerarionuevo.nombre) + ' ' + str(itinerarionuevo.nivel), fuentenormal)
                            fila += 1

            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def reporte_estudiantes_sin_horas_vinculacion():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/reporte_estudiantes_sin_horas_vinculacion.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"HORAS_VINCULACION", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        miarchivo = openpyxl.load_workbook("ts.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        carrera_id = 130
        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                inscripcion = matricula.inscripcion
                horasvinculacion = inscripcion.numero_horas_proyectos_vinculacion()
                if horasvinculacion < 160:
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, horasvinculacion, fuentenormal)

                fila += 1

            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def reporte_estudiantes_horas_PPP_Vinc():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/reporte_estudiantes_horas_PPP_Vinc_INICIAL2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                    (u"PPP - 680", 6000),
                   (u"HORAS_VINCULACION - 160", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        miarchivo = openpyxl.load_workbook("basica.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        carrera_id = 135
        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                inscripcion = matricula.inscripcion
                horasvinculacion = inscripcion.numero_horas_proyectos_vinculacion()
                PPP = inscripcion.numero_horas_practicas_pre_profesionales()

                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, PPP, fuentenormal)
                hojadestino.write(fila, 3, horasvinculacion, fuentenormal)

                fila += 1

            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1



@transaction.atomic()
def carga_de_candidatos_a_presidentes():
    from inno.models import EstudiantesCandidatosaPresidentesdeCurso
    from sga.models import MatriculacionPrimerNivelCarrera, Periodo, AsignaturaMalla, Matricula, MateriaAsignada, \
        RecordAcademico, Notificacion
    from collections import Counter
    from django.db import transaction
    try:
        periodo = Periodo.objects.get(status=True, pk=317)
        carreras = []
        inscripciones = []
        notarecord = 0.0
        carrera_admision = 0
        id_configuracion_admision_pregrado = 0
        bandera = False
        matriculas = None
        contador_registro = 0
        cant_materias_estudiante = 0

        id_configuracion_admision_pregrado = MatriculacionPrimerNivelCarrera.objects.values_list('configuracion_id',
                                                                                                 flat=True).filter(status=True, ejecutoaccion=True).order_by('configuracion_id').last()

        # carreras = MatriculacionPrimerNivelCarrera.objects.values_list('carrerapregrado_id',flat=True).filter(status=True, ejecutoaccion=True, configuracion_id = id_configuracion_admision_pregrado)
        carreras = [150,146,151,153,139,133,140,131,143,128,158,188,130,160,225,140,141,134,138,156,135,175,127,149,142,170,187,129,157,110,112,224,111]
        for carrera in carreras:
            with transaction.atomic():
                niveles_carrera = AsignaturaMalla.objects.values_list('nivelmalla__orden', 'nivelmalla__nombre').filter(
                    status=True, malla__carrera_id=carrera, malla__status=True).order_by(
                    'nivelmalla__orden').distinct()

                for nivel in niveles_carrera:
                    matriculas = Matricula.objects.filter(status=True, nivel__periodo=periodo,
                                                          inscripcion__carrera_id=carrera,
                                                          nivelmalla__orden=nivel[0]).order_by('nivelmalla__orden')

                    for matricula in matriculas:
                        mi_malla = matricula.inscripcion.mi_malla()
                        cant_asignatura_malla = AsignaturaMalla.objects.filter(status=True, malla = mi_malla, malla__carrera=matricula.inscripcion.carrera,
                                                                 nivelmalla=matricula.nivelmalla).exclude(
                            itinerario__gt=0).exclude(ejeformativo_id__in=[4, 9, 11]).count()
                        # cant_asignatura_malla = list(filter(lambda e: e.malla.uso_en_periodo(periodo), asigmal)).__len__()
                        cant_materias_estudiante = MateriaAsignada.objects.filter(status=True,
                                                                                  matricula=matricula, retiramateria=False,
                                                                                  materia__asignaturamalla__nivelmalla=matricula.nivelmalla).exclude(
                            materia__asignaturamalla__itinerario__gt=0).exclude(materia__asignaturamalla__ejeformativo_id__in=[4, 9, 11]).count()
                        # cant_asignaturas_aprobadas_en_el_nivel = RecordAcademico.objects.filter(status=True,
                        #                                                                         inscripcion=matricula.inscripcion,
                        #                                                                         asignaturamalla__nivelmalla=matricula.nivelmalla,
                        #                                                                         aprobada=True).exclude(asignaturamalla__itinerario__gt=0).exclude(asignaturamalla__ejeformativo_id__in=[4, 9, 11]).count()
                        # cant_materias_estudiante += cant_asignaturas_aprobadas_en_el_nivel
                        if cant_asignatura_malla == cant_materias_estudiante:
                            if matricula.nivelmalla.id == 1:
                                carrera_admision = list(
                                    MatriculacionPrimerNivelCarrera.objects.values_list('carreraadmision_id',
                                                                                        flat=True).filter(
                                        status=True, carrerapregrado_id=carrera,
                                        configuracion_id=id_configuracion_admision_pregrado).distinct())[0]
                                materia_asignada_admision = MateriaAsignada.objects.values_list('notafinal',
                                                                                                flat=True).filter(
                                    status=True,
                                    matricula__inscripcion__persona__cedula=matricula.inscripcion.persona.cedula,
                                    matricula__inscripcion__carrera__id=carrera_admision, estado=1)
                                if materia_asignada_admision:
                                    notarecord = round(
                                        sum(materia_asignada_admision) / materia_asignada_admision.count(), 2)
                            else:
                                notarecord = matricula.inscripcion.promedio_record()
                            if matricula.tipomatriculalumno() == 'REGULAR':
                                materiasasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                   matricula=matricula, retiramateria=False)
                                bandera = False
                                if materiasasignadas:
                                    for materiaasignada in materiasasignadas:
                                        if materiaasignada.cantidad_matriculas() > 1:
                                            bandera = True
                                            break

                                    if not bandera == True:
                                        paralelos_estudiante = list(
                                            materiasasignadas.values_list('materia__paralelo', flat=True))
                                        contador = Counter(paralelos_estudiante)
                                        paralelo_perteneciente = contador.most_common(1)[0][0]

                                        inscripciones.append(matricula.nivelmalla.nombre)
                                        sexo = ''
                                        if matricula.inscripcion.persona.sexo.id == 1:
                                            sexo = 'MUJER'
                                        else:
                                            sexo = 'HOMBRE'

                                        if not EstudiantesCandidatosaPresidentesdeCurso.objects.filter(status=True,
                                                                                                       periodo_id=int(
                                                                                                           periodo.pk),
                                                                                                       matricula=int(
                                                                                                           matricula.pk),
                                                                                                       inscripcion=int(
                                                                                                           matricula.inscripcion.pk),
                                                                                                       carrera_id=int(
                                                                                                           carrera)).exists():
                                            presidentes = EstudiantesCandidatosaPresidentesdeCurso(status=True,
                                                                                                   periodo_id=int(periodo.pk),
                                                                                                   periodo_nombre=str(periodo.nombre),
                                                                                                   carrera_id=int(carrera),
                                                                                                   inscripcion=int(matricula.inscripcion.pk),
                                                                                                   matricula=int(matricula.pk),
                                                                                                   cedula=str(
                                                                                                       matricula.inscripcion.persona.cedula),
                                                                                                   nombres=str(
                                                                                                       matricula.inscripcion.persona.nombre_completo_inverso()),
                                                                                                   correo=str(
                                                                                                       matricula.inscripcion.persona.emailinst),
                                                                                                   telefono=str(
                                                                                                       matricula.inscripcion.persona.telefono),
                                                                                                   sexo=sexo,
                                                                                                   carrera=str(matricula.inscripcion.carrera.nombre),
                                                                                                   orden=int(nivel[0]),
                                                                                                   nivel=str(nivel[1]),
                                                                                                   paralelo=str(paralelo_perteneciente),
                                                                                                   promedio_final=str(notarecord))
                                            presidentes.save()
                                            contador_registro += 1
                                            print(str(contador_registro) + ' - ' + str(matricula.inscripcion.persona.cedula) + ' - ' + str(matricula.inscripcion.persona.nombre_completo_inverso()) + ' - ' + str(matricula.inscripcion.carrera.nombre) + ' - ' + str(nivel[1]) + ' - ' + str(paralelo_perteneciente) + ' - ' + str(notarecord) )

    except Exception as ex:
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=29898, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
        transaction.set_rollback(True)
        print('error: %s' % ex)


@transaction.atomic()
def carga_de_candidatos_a_presidentes_casos_especiales_derecho():
    from inno.models import EstudiantesCandidatosaPresidentesdeCurso
    from sga.models import MatriculacionPrimerNivelCarrera, Periodo, AsignaturaMalla, Matricula, MateriaAsignada, \
        RecordAcademico, Notificacion
    from collections import Counter
    from django.db import transaction
    try:
        periodo = Periodo.objects.get(status=True, pk=336)
        carreras = []
        inscripciones = []
        notarecord = 0.0
        carrera_admision = 0
        cant_materias_estudiante = 0
        id_configuracion_admision_pregrado = 0
        bandera = False
        matriculas = None
        contador_registro = 0
        filtrobasemateriaasignada = Q(materia__asignaturamalla__itinerario=0, retiromanual=False, retiramateria=False,
                                      matricula__retiradomatricula=False, matricula__status=True, materia__status=True,
                                      materia__asignaturamalla__status=True,
                                      materia__asignaturamalla__asignatura__modulo=False, status=True)
        id_configuracion_admision_pregrado = MatriculacionPrimerNivelCarrera.objects.values_list('configuracion_id',
                                                                                                 flat=True).filter(status=True, ejecutoaccion=True).order_by('configuracion_id').last()

        # carreras = MatriculacionPrimerNivelCarrera.objects.values_list('carrerapregrado_id',flat=True).filter(status=True, ejecutoaccion=True, configuracion_id = id_configuracion_admision_pregrado)
        carreras = [126]
        for carrera in carreras:
            with transaction.atomic():
                # niveles_carrera = AsignaturaMalla.objects.values_list('nivelmalla__orden', 'nivelmalla__nombre').filter(
                #     status=True, malla__carrera_id=carrera, malla__status=True).order_by(
                #     'nivelmalla__orden').distinct()[5:]
                niveles_carrera = AsignaturaMalla.objects.values_list('nivelmalla__orden', 'nivelmalla__nombre').filter(status=True, malla__carrera_id=carrera, malla__status=True).order_by('nivelmalla__orden').distinct()[5:]

                for nivel in niveles_carrera:
                    matriculas = Matricula.objects.filter(status=True, nivel__periodo=periodo,
                                                          inscripcion__carrera_id=carrera,
                                                          nivelmalla__orden=nivel[0]).order_by('nivelmalla__orden')

                    for matricula in matriculas:
                        mi_malla = matricula.inscripcion.mi_malla()
                        cant_asignatura_malla = AsignaturaMalla.objects.filter(status=True, malla = mi_malla, malla__carrera=matricula.inscripcion.carrera,
                                                                 nivelmalla=matricula.nivelmalla).exclude(
                            itinerario__gt=0).exclude(ejeformativo_id__in=[4, 9, 11]).count()

                        cant_materias_estudiante = MateriaAsignada.objects.filter(filtrobasemateriaasignada,
                                                                                  matricula=matricula,
                                                                                  materia__asignaturamalla__nivelmalla=matricula.nivelmalla).exclude(
                            materia__asignaturamalla__itinerario__gt=0).exclude(materia__asignaturamalla__ejeformativo_id__in=[4, 9, 11]).exclude(materia__asignaturamalla__malla=353).count()
                        cant_asignaturas_aprobadas_en_el_nivel = RecordAcademico.objects.filter(status=True, inscripcion=matricula.inscripcion, asignaturamalla__nivelmalla = matricula.nivelmalla, aprobada = True).exclude(asignaturamalla__itinerario__gt=0).exclude(asignaturamalla__ejeformativo_id__in=[4, 9, 11]).count()
                        cant_materias_estudiante += cant_asignaturas_aprobadas_en_el_nivel
                        if cant_asignatura_malla == cant_materias_estudiante:
                            if matricula.nivelmalla.id == 1:
                                carrera_admision = list(
                                    MatriculacionPrimerNivelCarrera.objects.values_list('carreraadmision_id',
                                                                                        flat=True).filter(
                                        status=True, carrerapregrado_id=carrera,
                                        configuracion_id=id_configuracion_admision_pregrado).distinct())[0]
                                materia_asignada_admision = MateriaAsignada.objects.values_list('notafinal',
                                                                                                flat=True).filter(
                                    status=True,
                                    matricula__inscripcion__persona__cedula=matricula.inscripcion.persona.cedula,
                                    matricula__inscripcion__carrera__id=carrera_admision, estado=1)
                                if materia_asignada_admision:
                                    notarecord = round(
                                        sum(materia_asignada_admision) / materia_asignada_admision.count(), 2)
                            else:
                                notarecord = matricula.inscripcion.promedio_record()
                            if matricula.tipomatriculalumno() == 'REGULAR':
                                materiasasignadas = MateriaAsignada.objects.filter(filtrobasemateriaasignada,
                                                                                   matricula=matricula).exclude(materia__asignaturamalla__itinerario__gt=0).exclude(materia__asignaturamalla__ejeformativo_id__in=[4, 9, 11]).exclude(materia__asignaturamalla__malla=353)
                                bandera = False
                                if materiasasignadas:
                                    for materiaasignada in materiasasignadas:
                                        if materiaasignada.cantidad_matriculas() > 1:
                                            bandera = True
                                            break

                                    if not bandera == True:
                                        paralelos_estudiante = list(
                                            materiasasignadas.values_list('materia__paralelo', flat=True))
                                        contador = Counter(paralelos_estudiante)
                                        paralelo_perteneciente = contador.most_common(1)[0][0]
                                        inscripciones.append(matricula.nivelmalla.nombre)
                                        sexo = ''
                                        if matricula.inscripcion.persona.sexo.id == 1:
                                            sexo = 'MUJER'
                                        else:
                                            sexo = 'HOMBRE'

                                        if not EstudiantesCandidatosaPresidentesdeCurso.objects.filter(status=True,
                                                                                                       periodo_id=int(
                                                                                                           periodo.pk),
                                                                                                       matricula=int(
                                                                                                           matricula.pk),
                                                                                                       inscripcion=int(
                                                                                                           matricula.inscripcion.pk),
                                                                                                       carrera_id=int(
                                                                                                           carrera)).exists():
                                            presidentes = EstudiantesCandidatosaPresidentesdeCurso(status=True,
                                                                                                   periodo_id=int(periodo.pk),
                                                                                                   periodo_nombre=str(periodo.nombre),
                                                                                                   carrera_id=int(carrera),
                                                                                                   inscripcion=int(matricula.inscripcion.pk),
                                                                                                   matricula=int(matricula.pk),
                                                                                                   cedula=str(
                                                                                                       matricula.inscripcion.persona.cedula),
                                                                                                   nombres=str(
                                                                                                       matricula.inscripcion.persona.nombre_completo_inverso()),
                                                                                                   correo=str(
                                                                                                       matricula.inscripcion.persona.emailinst),
                                                                                                   telefono=str(
                                                                                                       matricula.inscripcion.persona.telefono),
                                                                                                   sexo=sexo,
                                                                                                   carrera=str(matricula.inscripcion.carrera.nombre),
                                                                                                   orden=int(nivel[0]),
                                                                                                   nivel=str(nivel[1]),
                                                                                                   paralelo=str(paralelo_perteneciente),
                                                                                                   promedio_final=str(notarecord))
                                            presidentes.save()
                                            contador_registro += 1
                                            print(str(contador_registro) + ' - ' + str(matricula.inscripcion.persona.cedula) + ' - ' + str(matricula.inscripcion.persona.nombre_completo_inverso()) + ' - ' + str(matricula.inscripcion.carrera.nombre) + ' - ' + str(nivel[1]) + ' - ' + str(paralelo_perteneciente) + ' - ' + str(notarecord) )

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)

# carga_de_candidatos_a_presidentes_casos_especiales_derecho()


@transaction.atomic()
def carga_de_candidatos_a_presidentes_casos_especiales_psicologia():
    from inno.models import EstudiantesCandidatosaPresidentesdeCurso
    from sga.models import MatriculacionPrimerNivelCarrera, Periodo, AsignaturaMalla, Matricula, MateriaAsignada, \
        RecordAcademico, Notificacion
    from collections import Counter
    from django.db import transaction
    try:

        periodo = Periodo.objects.get(status=True, pk=336)
        carreras = []
        inscripciones = []
        notarecord = 0.0
        carrera_admision = 0
        id_configuracion_admision_pregrado = 0
        bandera = False
        matriculas = None
        contador_registro = 0
        cant_asignaturas_aprobadas_en_el_nivel = 0
        filtrobasemateriaasignada = Q(materia__asignaturamalla__itinerario=0, retiromanual=False, retiramateria=False,
                                      matricula__retiradomatricula=False, matricula__status=True, materia__status=True,
                                      materia__asignaturamalla__status=True,
                                      materia__asignaturamalla__asignatura__modulo=False, status=True)
        id_configuracion_admision_pregrado = MatriculacionPrimerNivelCarrera.objects.values_list('configuracion_id',
                                                                                                 flat=True).filter(status=True, ejecutoaccion=True).order_by('configuracion_id').last()

        # carreras = MatriculacionPrimerNivelCarrera.objects.values_list('carrerapregrado_id',flat=True).filter(status=True, ejecutoaccion=True, configuracion_id = id_configuracion_admision_pregrado)
        carreras = [132, 137]
        for carrera in carreras:
            with transaction.atomic():
                # EstudiantesCandidatosaPresidentesdeCurso.objects.filter(status=True, carrera_id=carrera,periodo_id=int(periodo.pk)).update(status=False)
                niveles_carrera = AsignaturaMalla.objects.values_list('nivelmalla__orden', 'nivelmalla__nombre').filter(
                    status=True, malla__carrera_id=carrera, malla__status=True).order_by(
                    'nivelmalla__orden').distinct()

                for nivel in niveles_carrera:
                    matriculas = Matricula.objects.filter(status=True, nivel__periodo=periodo,
                                                          inscripcion__carrera_id=carrera,
                                                          nivelmalla__orden=nivel[0]).order_by('nivelmalla__orden')

                    for matricula in matriculas:
                        mi_malla = matricula.inscripcion.mi_malla()
                        cant_asignatura_malla = AsignaturaMalla.objects.filter(status=True, malla = mi_malla, malla__carrera=matricula.inscripcion.carrera,
                                                                 nivelmalla=matricula.nivelmalla).exclude(
                            itinerario__gt=0).exclude(ejeformativo_id__in=[4, 9, 11]).count()
                        # cant_asignatura_malla = list(filter(lambda e: e.malla.uso_en_periodo(periodo), asigmal)).__len__()
                        cant_materias_estudiante = MateriaAsignada.objects.filter(filtrobasemateriaasignada,
                                                                                  matricula=matricula,
                                                                                  materia__asignaturamalla__nivelmalla=matricula.nivelmalla).exclude(
                            materia__asignaturamalla__itinerario__gt=0).exclude(materia__asignaturamalla__ejeformativo_id__in=[4, 9, 11]).exclude(materia__asignaturamalla__malla=353).count()
                        cant_asignaturas_aprobadas_en_el_nivel = RecordAcademico.objects.filter(status=True, inscripcion=matricula.inscripcion, asignaturamalla__nivelmalla = matricula.nivelmalla, aprobada = True).exclude(asignaturamalla__itinerario__gt=0).exclude(asignaturamalla__ejeformativo_id__in=[4, 9, 11]).count()
                        cant_materias_estudiante += cant_asignaturas_aprobadas_en_el_nivel
                        if cant_asignatura_malla == cant_materias_estudiante:
                            if matricula.nivelmalla.id == 1:
                                notarecord = 'Matricula especial'
                            else:
                                notarecord = matricula.inscripcion.promedio_record()
                            if matricula.tipomatriculalumno() == 'REGULAR':
                                materiasasignadas = MateriaAsignada.objects.filter(filtrobasemateriaasignada,
                                                                                  matricula=matricula,
                                                                                  materia__asignaturamalla__nivelmalla=matricula.nivelmalla).exclude(
                            materia__asignaturamalla__itinerario__gt=0).exclude(materia__asignaturamalla__ejeformativo_id__in=[4, 9, 11]).exclude(materia__asignaturamalla__malla=353)
                                bandera = False
                                if materiasasignadas:
                                    for materiaasignada in materiasasignadas:
                                        if materiaasignada.cantidad_matriculas() > 1:
                                            bandera = True
                                            break

                                    if not bandera == True:
                                        paralelos_estudiante = list(
                                            materiasasignadas.values_list('materia__paralelo', flat=True))
                                        contador = Counter(paralelos_estudiante)
                                        paralelo_perteneciente = contador.most_common(1)[0][0]
                                        inscripciones.append(matricula.nivelmalla.nombre)
                                        sexo = ''
                                        if matricula.inscripcion.persona.sexo.id == 1:
                                            sexo = 'MUJER'
                                        else:
                                            sexo = 'HOMBRE'

                                        if not EstudiantesCandidatosaPresidentesdeCurso.objects.filter(status=True,
                                                                                                   periodo_id=int(periodo.pk),
                                                                                                   matricula=int(matricula.pk),inscripcion=int(matricula.inscripcion.pk), carrera_id=int(carrera)).exists():
                                            presidentes = EstudiantesCandidatosaPresidentesdeCurso(status=True,
                                                                                                   periodo_id=int(periodo.pk),
                                                                                                   periodo_nombre=str(periodo.nombre),
                                                                                                   carrera_id=int(carrera),
                                                                                                   inscripcion=int(matricula.inscripcion.pk),
                                                                                                   matricula=int(matricula.pk),
                                                                                                   cedula=str(
                                                                                                       matricula.inscripcion.persona.cedula),
                                                                                                   nombres=str(
                                                                                                       matricula.inscripcion.persona.nombre_completo_inverso()),
                                                                                                   correo=str(
                                                                                                       matricula.inscripcion.persona.emailinst),
                                                                                                   telefono=str(
                                                                                                       matricula.inscripcion.persona.telefono),
                                                                                                   sexo=sexo,
                                                                                                   carrera=str(matricula.inscripcion.carrera.nombre),
                                                                                                   orden=int(nivel[0]),
                                                                                                   nivel=str(nivel[1]),
                                                                                                   paralelo=str(paralelo_perteneciente),
                                                                                                   promedio_final=str(notarecord))
                                            presidentes.save()
                                            contador_registro += 1
                                            print(str(contador_registro) + ' - ' + str(matricula.inscripcion.persona.cedula) + ' - ' + str(matricula.inscripcion.persona.nombre_completo_inverso()) + ' - ' + str(matricula.inscripcion.carrera.nombre) + ' - ' + str(nivel[1]) + ' - ' + str(paralelo_perteneciente) + ' - ' + str(notarecord) )

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)

# carga_de_candidatos_a_presidentes_casos_especiales_psicologia()

@transaction.atomic()
def generar_reporte_estudiantes_ppp_vin_Derecho():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    import xlwt
    from django.db import transaction, connection
    try:
        cadena = ''
        linea, excluidos, conexito = 0, 0, 0
        libre_origen = '/reporte_estudiantes_ppp_vin_ECONOMIA.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('ECONOMIA')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                    (u"ESTUDIANTE", 6000),
                    (u"NIVEL MATRICULA", 6000),
                    (u"NIVEL INSCRIPCION", 6000),
                    (u"VINCULACION", 6000),
                    (u"APROBADA VINCULACION", 6000),
                    (u"PRAXIS PROFESIONAL I", 6000),
                    (u"APROBADA PRAXIS PROFESIONAL I", 6000),
                    (u"PRAXIS PROFESIONAL II", 6000),
                    (u"APROBADA PRAXIS PROFESIONAL II", 6000),
                    (u"ASIGNATURAS APROBADAS HASTA 6", 6000),
                    (u"ASIGNATURAS QUE DEBERIA TENER APROBADAS HASTA 6", 6000),
                    # (u"PERDIDA DE GRATUIDAD", 6000),
                    (u"TOTAL DE SALDO PENDIENTE", 6000),
                    (u"TOTAL PAGADO", 6000),
                    (u"RUBROS DE ASIGNATURAS PPP Y VINC", 6000),
                    (u"ESTADO DE PAGO", 6000),
                    (u"OBSERVACIONES", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        cursor = connection.cursor()
        sql = f'''SELECT 
        mat.id,
        pers.cedula, 
        CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres) AS ESTUDIANTE,
        nivmal.nombre AS nivel_matricula,
        nivmal2.nombre AS nivel_inscripcion,
        --IDS DE LAS ASIGNATURAS
        MAX(CASE WHEN asigmal.id = 10615 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Vinculacion,
        CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
         INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
          INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
          WHERE malla.id=480 AND asigmalla.id = 10615 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Vinculacion,
          
        MAX(CASE WHEN asigmal.id = 10623 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Praxis_Profesional_I,
        CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
         INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
          INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
          WHERE malla.id=480 AND asigmalla.id = 10623 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Praxis_I,
          
        MAX(CASE WHEN asigmal.id = 10627 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Praxis_Profesional_II,
        CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
         INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
          INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
          WHERE malla.id=480 AND asigmalla.id = 10627 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Praxis_II,
        (SELECT COUNT(*) 
         FROM sga_recordacademico recacad
         INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
          INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
          INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
         -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
          WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0
          AND nivmalla.orden < 7
          --ID DE LA MALLA DE LA CARRERA
          AND malla.id = 480
          AND recacad.status=TRUE 
          AND recacad.inscripcion_id=ins.id 
          AND recacad.aprobada=TRUE 
          and recacad.valida=TRUE 
          AND recacad.validapromedio=True) AS Asignaturas_Aprobadas_Hasta_6to_Nivel,
          (SELECT COUNT(*) 
         FROM sga_asignaturamalla asigmalla
          INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
          INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
          -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
          WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0 AND nivmalla.orden<7
          --ID DE LA MALLA DE LA CARRERA
          AND malla.id = 480) AS Asignaturas_que_deben_estar_aprobadas_hasta_6to_nivel,
          
          -- MAX(CASE WHEN( ins.estado_gratuidad = 2 OR ins.estado_gratuidad = 3) THEN 'SI' ELSE 'NO' END) AS Perdida_Gratuidad,
         
         (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) AS total_saldo_PENDIENTE,
         
         
         (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
         INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
         INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
         WHERE sagrubr.matricula_id = mat.id
         AND sagpago.status = TRUE
         AND sagrubr.status = TRUE
         AND rubro_tipo.subtiporubro = 1
        ) AS TOTAL_PAGADO,
         
         
         (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
         INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
         WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10615,10623,10627) )
         AS TOTAL_PAGO_ASIGNATURAS_PPP_VINC,
         
         
         CASE 
           WHEN ((SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
             INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
             INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
             WHERE sagrubr.matricula_id = mat.id
             AND sagpago.status = TRUE
             AND sagrubr.status = TRUE
             AND rubro_tipo.subtiporubro = 1
            ) = 0 AND (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) = 0) THEN 'NO TIENE SALDOS'   
            
            WHEN (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
             INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
             WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10615,10623,10627) )= 0 THEN 'NO DEBE PAGAR ASIGNATURAS PPP o VINC'
            
            WHEN (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
             INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
             INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
             WHERE sagrubr.matricula_id = mat.id
             AND sagpago.status = TRUE
             AND sagrubr.status = TRUE
             AND rubro_tipo.subtiporubro = 1
            ) > 0 AND (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
             INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
             WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10615,10623,10627) ) > 0 THEN 'ASIGNATURAS PAGADAS'
            ELSE 'AUN NO PAGA ASIGNATURAS'
            
         END AS resultado
         
    FROM 
        sga_materiaasignada matasig 
    INNER JOIN 
        sga_materia mate ON matasig.materia_id = mate.id
    INNER JOIN 
        sga_asignaturamalla asigmal ON mate.asignaturamalla_id = asigmal.id
    INNER JOIN 
        sga_asignatura asig ON asigmal.asignatura_id = asig.id
    INNER JOIN 
        sga_matricula mat ON matasig.matricula_id = mat.id
    INNER JOIN 
        sga_nivel niv ON mat.nivel_id = niv.id
    INNER JOIN 
        sga_periodo per ON niv.periodo_id = per.id
    INNER JOIN 
        sga_inscripcion ins ON mat.inscripcion_id = ins.id
    INNER JOIN 
        sga_persona pers ON ins.persona_id = pers.id
    INNER JOIN 
        sga_carrera carr ON ins.carrera_id = carr.id
    INNER JOIN 
        sga_nivelmalla nivmal ON mat.nivelmalla_id = nivmal.id
    INNER JOIN 
        sga_inscripcionnivel insniv ON insniv.inscripcion_id = ins.id
    INNER JOIN 
        sga_nivelmalla nivmal2 ON insniv.nivel_id = nivmal2.id
    WHERE 
         -- IDS DE LAS ASIGNATURA MALLA -- ID DE LA CARRERA
        asigmal.id IN (10615,10623,10627) AND carr.id = 126 AND per.id = 317 and asigmal."status" = TRUE
    GROUP BY 
        pers.cedula, 
        pers.id,
        ins.id,
        mat.id,
        CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres),
        nivmal.nombre,
        nivmal2.nombre,
        nivmal2.id
    ORDER BY
         CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres) '''

        cursor.execute(sql)
        results = cursor.fetchall()
        nivel = 0
        ##SON 0 - 12 RESULTADOS
        for per in results:
            eMatricula = Matricula.objects.get(pk=per[0])
            ePeriodoMatricula = None
            if eMatricula.nivel.periodo.periodomatricula_set.values('id').filter(status=True).exists():
                ePeriodoMatricula = eMatricula.nivel.periodo.periodomatricula_set.filter(status=True)[0]
            if eMatricula.inscripcion.coordinacion_id in [1, 2, 3, 4, 5]:
                porcentaje_perdidad_parcial_gratuidad = PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD
                if ePeriodoMatricula and ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad > 0:
                    porcentaje_perdidad_parcial_gratuidad = ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad
                cursor2 = connection.cursor()
                itinerario = 0
                if not eMatricula.inscripcion.itinerario is None and eMatricula.inscripcion.itinerario > 0:
                    itinerario = eMatricula.inscripcion.itinerario
                sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
                if itinerario > 0:
                    sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id and (am.itinerario=0 or am.itinerario=" + str(
                        itinerario) + ") GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"

                cursor2.execute(sql)
                results = cursor2.fetchall()
                nivel = 0
                for dat in results:
                    nivel = dat[0]
                    cantidad_seleccionadas = dat[1]
                cantidad_nivel = 0
                materiasnivel = []
                eAsignaturaMallas = AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True,
                                                                   malla=eMatricula.inscripcion.mi_malla())
                if itinerario > 0:
                    eAsignaturaMallas = eAsignaturaMallas.filter(Q(itinerario=0) | Q(itinerario=itinerario))
                for eAsignaturaMalla in eAsignaturaMallas:
                    if Materia.objects.values('id').filter(nivel__periodo=eMatricula.nivel.periodo,
                                                           asignaturamalla=eAsignaturaMalla).exists():
                        if eMatricula.inscripcion.estado_asignatura(eAsignaturaMalla.asignatura) != 1:
                            cantidad_nivel += 1

                porcentaje_seleccionadas = int(round(
                    Decimal((float(cantidad_nivel) * float(porcentaje_perdidad_parcial_gratuidad)) / 100).quantize(
                        Decimal('.00')), 0))

                if per[16] > 0:
                    if eMatricula.inscripcion.estado_gratuidad == 1 or eMatricula.inscripcion.estado_gratuidad == 2:
                        if (cantidad_seleccionadas < porcentaje_seleccionadas):
                            mensaje = f"Estudiante irregular, se ha matriculado en menos del {porcentaje_perdidad_parcial_gratuidad}%, debe cancelar por todas las asignaturas."
                        else:
                            mensaje = u"Debe cancelar por las asignaturas que se matriculó por más de una vez."
                    else:
                        if eMatricula.inscripcion.estado_gratuidad == 2:
                            mensaje = u"Su estado es de pérdida parcial de la gratuidad. Debe cancelar por las asignaturas que se matriculó por más de una vez."

                    if eMatricula.inscripcion.persona.tiene_otro_titulo(inscripcion=eMatricula.inscripcion):
                        mensaje = u"El estudiante registra título en otra IES Pública o SENESCYT ha reportado. Su estado es de pérdida total de la gratuidad. Debe cancelar por todas las asignaturas."

                    hojadestino.write(fila, 0, per[1], fuentenormal)
                    hojadestino.write(fila, 1, per[2], fuentenormal)
                    hojadestino.write(fila, 2, per[3], fuentenormal)
                    hojadestino.write(fila, 3, per[4], fuentenormal)
                    hojadestino.write(fila, 4, per[5], fuentenormal)
                    hojadestino.write(fila, 5, per[6], fuentenormal)
                    hojadestino.write(fila, 6, per[7], fuentenormal)
                    hojadestino.write(fila, 7, per[8], fuentenormal)
                    hojadestino.write(fila, 8, per[9], fuentenormal)
                    hojadestino.write(fila, 9, per[10], fuentenormal)
                    hojadestino.write(fila, 10, per[11], fuentenormal)
                    hojadestino.write(fila, 11, per[12], fuentenormal)
                    hojadestino.write(fila, 12, per[13], fuentenormal)
                    hojadestino.write(fila, 13, per[14], fuentenormal)
                    hojadestino.write(fila, 14, per[15], fuentenormal)
                    hojadestino.write(fila, 15, per[16], fuentenormal)
                    hojadestino.write(fila, 16, mensaje, fuentenormal)
                    # hojadestino.write(fila, 17, mensaje, fuentenormal)
                    fila += 1
            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



def generar_reporte_estudiantes_ppp_vin_Economia():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    import xlwt
    from django.db import transaction, connection
    try:
        cadena = ''
        linea, excluidos, conexito = 0, 0, 0
        libre_origen = '/reporte_estudiantes_ppp_vin_ECONOMIA.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('ECONOMIA')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                    (u"ESTUDIANTE", 6000),
                    (u"NIVEL MATRICULA", 6000),
                    (u"NIVEL INSCRIPCION", 6000),
                    (u"ECONOMIA POLITICA", 6000),
                    (u"APROBADA ECONOMIA POLITICA", 6000),
                    (u"POLITICA ECONOMICA", 6000),
                    (u"APROBADA POLITICA ECONOMICA", 6000),
                    (u"POLITICA MONETARIA Y FINANCIERA", 6000),
                    (u"APROBADA POLITICA MONETARIA Y FINANCIERA", 6000),
                    (u"ECONOMIA SOCIAL Y SOLIDARIA", 6000),
                    (u"APROBADA ECONOMIA SOCIAL Y SOLIDARIA", 6000),
                    (u"ASIGNATURAS APROBADAS HASTA 5TO", 6000),
                    (u"ASIGNATURAS QUE DEBERIA TENER APROBADAS HASTA 5TO", 6000),
                    # (u"PERDIDA DE GRATUIDAD", 6000),
                    (u"TOTAL DE SALDO PENDIENTE", 6000),
                    (u"TOTAL PAGADO", 6000),
                    (u"RUBROS DE ASIGNATURAS PPP Y VINC", 6000),
                    (u"ESTADO DE PAGO", 6000),
                    (u"OBSERVACIONES", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        cursor = connection.cursor()
        sql = f'''SELECT mat.id,
    pers.cedula, 
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres) AS ESTUDIANTE,
    nivmal.nombre AS nivel_matricula,
    nivmal2.nombre AS nivel_inscripcion,
    --IDS DE LAS ASIGNATURAS
    MAX(CASE WHEN asigmal.id = 10733 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Economia_Politica,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=489 AND asigmalla.id = 10733 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Economia_Politica,
    MAX(CASE WHEN asigmal.id = 10742 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Politica_Economica,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=489 AND asigmalla.id = 10742 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Politica_Economica,
    MAX(CASE WHEN asigmal.id = 10770 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Politica_Monetaria_y_Financiera,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=489 AND asigmalla.id = 10770 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Politica_Monetaria_y_Financiera,
	  MAX(CASE WHEN asigmal.id = 10774 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Economia_Social_y_Solidaria,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=489 AND asigmalla.id = 10774 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Economia_Social_y_Solidaria,
    (SELECT COUNT(*) 
     FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
     -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0
	  AND nivmalla.orden < 6
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 489
	  AND recacad.status=TRUE 
	  AND recacad.inscripcion_id=ins.id 
	  AND recacad.aprobada=TRUE 
	  and recacad.valida=TRUE 
	  AND recacad.validapromedio=True) AS Asignaturas_Aprobadas_Hasta_5to_Nivel,
	  (SELECT COUNT(*) 
     FROM sga_asignaturamalla asigmalla
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
	  -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0 AND nivmalla.orden<6
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 489) AS Asignaturas_que_deben_estar_aprobadas_hasta_5to_nivel,
	  
	  
	  ----------------------DESDE AQUI PEGAR Y CAMBIAR EN LAS DEMÁS CARRERAS-----------------------------
	  
	  (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) AS total_saldo_PENDIENTE,
	 
	 
	 (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
	 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
	 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
	 WHERE sagrubr.matricula_id = mat.id
	 AND sagpago.status = TRUE
	 AND sagrubr.status = TRUE
	 AND rubro_tipo.subtiporubro = 1
    ) AS TOTAL_PAGADO,
	 
	 
	 (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10733,10742,10770,10774) )
     AS TOTAL_PAGO_ASIGNATURAS_PPP_VINC,
     
     
     CASE 
       WHEN ((SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) = 0 AND (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) = 0) THEN 'NO TIENE SALDOS'   
	    
	    WHEN (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10733,10742,10770,10774) )= 0 THEN 'NO DEBE PAGAR ASIGNATURAS PPP o VINC'
	    
	    WHEN (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) > 0 AND (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10733,10742,10770,10774) ) > 0 THEN 'ASIGNATURAS PAGADAS'
        ELSE 'AUN NO PAGA ASIGNATURAS'
        
     END AS resultado
	  
FROM 
    sga_materiaasignada matasig 
INNER JOIN 
    sga_materia mate ON matasig.materia_id = mate.id
INNER JOIN 
    sga_asignaturamalla asigmal ON mate.asignaturamalla_id = asigmal.id
INNER JOIN 
    sga_asignatura asig ON asigmal.asignatura_id = asig.id
INNER JOIN 
    sga_matricula mat ON matasig.matricula_id = mat.id
INNER JOIN 
    sga_nivel niv ON mat.nivel_id = niv.id
INNER JOIN 
    sga_periodo per ON niv.periodo_id = per.id
INNER JOIN 
    sga_inscripcion ins ON mat.inscripcion_id = ins.id
INNER JOIN 
    sga_persona pers ON ins.persona_id = pers.id
INNER JOIN 
    sga_carrera carr ON ins.carrera_id = carr.id
INNER JOIN 
    sga_nivelmalla nivmal ON mat.nivelmalla_id = nivmal.id
INNER JOIN 
    sga_inscripcionnivel insniv ON insniv.inscripcion_id = ins.id
INNER JOIN 
    sga_nivelmalla nivmal2 ON insniv.nivel_id = nivmal2.id
WHERE 
	 -- IDS DE LAS ASIGNATURA MALLA -- ID DE LA CARRERA
    asigmal.id IN (10733,10742,10770,10774) AND carr.id = 128 AND per.id = 317 and asigmal."status" = TRUE
GROUP BY 
    pers.cedula, 
    ins.id,
    mat.id,
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres),
    nivmal.nombre,
    nivmal2.nombre
ORDER BY
	 CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres)'''

        cursor.execute(sql)
        results = cursor.fetchall()
        nivel = 0
        ##SON 0 - 12 RESULTADOS
        for per in results:
            eMatricula = Matricula.objects.get(pk=per[0])
            ePeriodoMatricula = None
            if eMatricula.nivel.periodo.periodomatricula_set.values('id').filter(status=True).exists():
                ePeriodoMatricula = eMatricula.nivel.periodo.periodomatricula_set.filter(status=True)[0]
            if eMatricula.inscripcion.coordinacion_id in [1, 2, 3, 4, 5]:
                porcentaje_perdidad_parcial_gratuidad = PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD
                if ePeriodoMatricula and ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad > 0:
                    porcentaje_perdidad_parcial_gratuidad = ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad
                cursor2 = connection.cursor()
                itinerario = 0
                if not eMatricula.inscripcion.itinerario is None and eMatricula.inscripcion.itinerario > 0:
                    itinerario = eMatricula.inscripcion.itinerario
                sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
                if itinerario > 0:
                    sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id and (am.itinerario=0 or am.itinerario=" + str(
                        itinerario) + ") GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"

                cursor2.execute(sql)
                results = cursor2.fetchall()
                nivel = 0
                for dat in results:
                    nivel = dat[0]
                    cantidad_seleccionadas = dat[1]
                cantidad_nivel = 0
                materiasnivel = []
                eAsignaturaMallas = AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True,
                                                                   malla=eMatricula.inscripcion.mi_malla())
                if itinerario > 0:
                    eAsignaturaMallas = eAsignaturaMallas.filter(Q(itinerario=0) | Q(itinerario=itinerario))
                for eAsignaturaMalla in eAsignaturaMallas:
                    if Materia.objects.values('id').filter(nivel__periodo=eMatricula.nivel.periodo,
                                                           asignaturamalla=eAsignaturaMalla).exists():
                        if eMatricula.inscripcion.estado_asignatura(eAsignaturaMalla.asignatura) != 1:
                            cantidad_nivel += 1

                porcentaje_seleccionadas = int(round(
                    Decimal((float(cantidad_nivel) * float(porcentaje_perdidad_parcial_gratuidad)) / 100).quantize(
                        Decimal('.00')), 0))

                if per[17] > 0:
                    if eMatricula.inscripcion.estado_gratuidad == 1 or eMatricula.inscripcion.estado_gratuidad == 2:
                        if (cantidad_seleccionadas < porcentaje_seleccionadas):
                            mensaje = f"Estudiante irregular, se ha matriculado en menos del {porcentaje_perdidad_parcial_gratuidad}%, debe cancelar por todas las asignaturas."
                        else:
                            mensaje = u"Debe cancelar por las asignaturas que se matriculó por más de una vez."
                    else:
                        if eMatricula.inscripcion.estado_gratuidad == 2:
                            mensaje = u"Su estado es de pérdida parcial de la gratuidad. Debe cancelar por las asignaturas que se matriculó por más de una vez."

                    if eMatricula.inscripcion.persona.tiene_otro_titulo(inscripcion=eMatricula.inscripcion):
                        mensaje = u"El estudiante registra título en otra IES Pública o SENESCYT ha reportado. Su estado es de pérdida total de la gratuidad. Debe cancelar por todas las asignaturas."

                    hojadestino.write(fila, 0, per[1], fuentenormal)
                    hojadestino.write(fila, 1, per[2], fuentenormal)
                    hojadestino.write(fila, 2, per[3], fuentenormal)
                    hojadestino.write(fila, 3, per[4], fuentenormal)
                    hojadestino.write(fila, 4, per[5], fuentenormal)
                    hojadestino.write(fila, 5, per[6], fuentenormal)
                    hojadestino.write(fila, 6, per[7], fuentenormal)
                    hojadestino.write(fila, 7, per[8], fuentenormal)
                    hojadestino.write(fila, 8, per[9], fuentenormal)
                    hojadestino.write(fila, 9, per[10], fuentenormal)
                    hojadestino.write(fila, 10, per[11], fuentenormal)
                    hojadestino.write(fila, 11, per[12], fuentenormal)
                    hojadestino.write(fila, 12, per[13], fuentenormal)
                    hojadestino.write(fila, 13, per[14], fuentenormal)
                    hojadestino.write(fila, 14, per[15], fuentenormal)
                    hojadestino.write(fila, 15, per[16], fuentenormal)
                    hojadestino.write(fila, 16, per[17], fuentenormal)
                    hojadestino.write(fila, 17, per[18], fuentenormal)
                    hojadestino.write(fila, 18, mensaje, fuentenormal)
                    # hojadestino.write(fila, 17, mensaje, fuentenormal)
                    fila += 1
            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def generar_reporte_estudiantes_ppp_vin_Turismo():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    import xlwt
    from django.db import transaction, connection
    try:
        cadena = ''
        linea, excluidos, conexito = 0, 0, 0
        libre_origen = '/reporte_estudiantes_ppp_vin_TURISMO.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('TURISMO')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                    (u"ESTUDIANTE", 6000),
                    (u"NIVEL MATRICULA", 6000),
                    (u"NIVEL INSCRIPCION", 6000),
                    (u"DESARROLLO DEL TURISMO SOSTENIBLE", 6000),
                    (u"APROBADA DESARROLLO DEL TURISMO SOSTENIBLE", 6000),
                    (u"PLANIFICACION TURISTICA", 6000),
                    (u"APROBADA PLANIFICACION TURISTICA", 6000),
                    (u"PATRIMONIO", 6000),
                    (u"APROBADA PATRIMONIO", 6000),
                    (u"INTEGRACIONN REGIONAL TURISTICA", 6000),
                    (u"APROBADA INTEGRACIONN REGIONAL TURISTICA", 6000),
                    (u"GESTION INTEGRAL DE DESTINOS TURISTICOS", 6000),
                    (u"APROBADA GESTION INTEGRAL DE DESTINOS TURISTICOS", 6000),
                    (u"ASIGNATURAS APROBADAS HASTA 4TO", 6000),
                    (u"ASIGNATURAS QUE DEBERIA TENER APROBADAS HASTA 4TO", 6000),
                    # (u"PERDIDA DE GRATUIDAD", 6000),
                    (u"TOTAL DE SALDO PENDIENTE", 6000),
                    (u"TOTAL PAGADO", 6000),
                    (u"RUBROS DE ASIGNATURAS PPP Y VINC", 6000),
                    (u"ESTADO DE PAGO", 6000),
                    (u"OBSERVACIONES", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        cursor = connection.cursor()
        sql = f'''SELECT mat.id,
    pers.cedula, 
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres) AS ESTUDIANTE,
    nivmal.nombre AS nivel_matricula,
    nivmal2.nombre AS nivel_inscripcion,
    
	 --IDS DE LAS ASIGNATURAS
    MAX(CASE WHEN asigmal.id = 10929 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Desarrollo_Del_Tursimo_Sostenible,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=487 AND asigmalla.id = 10929 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Desarrollo_Del_Tursimo_Sostenible,
    
	 MAX(CASE WHEN asigmal.id = 10947 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Planificacion_Turistica,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=487 AND asigmalla.id = 10947 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Planificacion_Turistica,
    
	 MAX(CASE WHEN asigmal.id = 10953 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Patrimonio,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=487 AND asigmalla.id = 10953 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Patrimonio,
	 
	 MAX(CASE WHEN asigmal.id = 10959 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Integracion_Regional_Turistica,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=487 AND asigmalla.id = 10959 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Integracion_Regional_Turistica,
	  
	 MAX(CASE WHEN asigmal.id = 10964 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS Gestion_Integral_De_Destinos_Turisticos,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=487 AND asigmalla.id = 10964 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_Gestion_Integral_De_Destinos_Turisticos,
    
	 (SELECT COUNT(*) 
     FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
     -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0
	  AND nivmalla.orden < 5
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 487
	  AND recacad.status=TRUE 
	  AND recacad.inscripcion_id=ins.id 
	  AND recacad.aprobada=TRUE 
	  and recacad.valida=TRUE 
	  AND recacad.validapromedio=True) AS Asignaturas_Aprobadas_Hasta_4to_Nivel,
	  
	 (SELECT COUNT(*) 
     FROM sga_asignaturamalla asigmalla
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
	  -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0 AND nivmalla.orden<5
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 487) AS Asignaturas_que_deben_estar_aprobadas_hasta_4to_nivel,
	  
	  
	  ----------------------DESDE AQUI PEGAR Y CAMBIAR EN LAS DEMÁS CARRERAS-----------------------------
	  
	  (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) AS total_saldo_PENDIENTE,
	 
	 
	 (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
	 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
	 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
	 WHERE sagrubr.matricula_id = mat.id
	 AND sagpago.status = TRUE
	 AND sagrubr.status = TRUE
	 AND rubro_tipo.subtiporubro = 1
    ) AS TOTAL_PAGADO,
	 
	 
	 (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10929, 10947, 10953, 10959, 10964) )
     AS TOTAL_PAGO_ASIGNATURAS_PPP_VINC,
     
     
     CASE 
       WHEN ((SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) = 0 AND (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) = 0) THEN 'NO TIENE SALDOS'   
	    
	    WHEN (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10929, 10947, 10953, 10959, 10964) )= 0 THEN 'NO DEBE PAGAR ASIGNATURAS PPP o VINC'
	    
	    WHEN (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) > 0 AND (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10929, 10947, 10953, 10959, 10964) ) > 0 THEN 'ASIGNATURAS PAGADAS'
        ELSE 'AUN NO PAGA ASIGNATURAS'
        
     END AS resultado
	  
FROM 
    sga_materiaasignada matasig 
INNER JOIN 
    sga_materia mate ON matasig.materia_id = mate.id
INNER JOIN 
    sga_asignaturamalla asigmal ON mate.asignaturamalla_id = asigmal.id
INNER JOIN 
    sga_asignatura asig ON asigmal.asignatura_id = asig.id
INNER JOIN 
    sga_matricula mat ON matasig.matricula_id = mat.id
INNER JOIN 
    sga_nivel niv ON mat.nivel_id = niv.id
INNER JOIN 
    sga_periodo per ON niv.periodo_id = per.id
INNER JOIN 
    sga_inscripcion ins ON mat.inscripcion_id = ins.id
INNER JOIN 
    sga_persona pers ON ins.persona_id = pers.id
INNER JOIN 
    sga_carrera carr ON ins.carrera_id = carr.id
INNER JOIN 
    sga_nivelmalla nivmal ON mat.nivelmalla_id = nivmal.id
INNER JOIN 
    sga_inscripcionnivel insniv ON insniv.inscripcion_id = ins.id
INNER JOIN 
    sga_nivelmalla nivmal2 ON insniv.nivel_id = nivmal2.id
WHERE 
	 -- IDS DE LAS ASIGNATURA MALLA -- ID DE LA CARRERA
    asigmal.id IN (10929, 10947, 10953, 10959, 10964) AND carr.id = 134 AND per.id = 317 and asigmal."status" = TRUE
GROUP BY 
    pers.cedula, 
    ins.id,
    mat.id,
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres),
    nivmal.nombre,
    nivmal2.nombre
ORDER BY
	 CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres)'''

        cursor.execute(sql)
        results = cursor.fetchall()
        nivel = 0
        ##SON 0 - 12 RESULTADOS
        for per in results:
            eMatricula = Matricula.objects.get(pk=per[0])
            ePeriodoMatricula = None
            if eMatricula.nivel.periodo.periodomatricula_set.values('id').filter(status=True).exists():
                ePeriodoMatricula = eMatricula.nivel.periodo.periodomatricula_set.filter(status=True)[0]
            if eMatricula.inscripcion.coordinacion_id in [1, 2, 3, 4, 5]:
                porcentaje_perdidad_parcial_gratuidad = PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD
                if ePeriodoMatricula and ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad > 0:
                    porcentaje_perdidad_parcial_gratuidad = ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad
                cursor2 = connection.cursor()
                itinerario = 0
                if not eMatricula.inscripcion.itinerario is None and eMatricula.inscripcion.itinerario > 0:
                    itinerario = eMatricula.inscripcion.itinerario
                sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
                if itinerario > 0:
                    sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id and (am.itinerario=0 or am.itinerario=" + str(
                        itinerario) + ") GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"

                cursor2.execute(sql)
                results = cursor2.fetchall()
                nivel = 0
                for dat in results:
                    nivel = dat[0]
                    cantidad_seleccionadas = dat[1]
                cantidad_nivel = 0
                materiasnivel = []
                eAsignaturaMallas = AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True,
                                                                   malla=eMatricula.inscripcion.mi_malla())
                if itinerario > 0:
                    eAsignaturaMallas = eAsignaturaMallas.filter(Q(itinerario=0) | Q(itinerario=itinerario))
                for eAsignaturaMalla in eAsignaturaMallas:
                    if Materia.objects.values('id').filter(nivel__periodo=eMatricula.nivel.periodo,
                                                           asignaturamalla=eAsignaturaMalla).exists():
                        if eMatricula.inscripcion.estado_asignatura(eAsignaturaMalla.asignatura) != 1:
                            cantidad_nivel += 1

                porcentaje_seleccionadas = int(round(
                    Decimal((float(cantidad_nivel) * float(porcentaje_perdidad_parcial_gratuidad)) / 100).quantize(
                        Decimal('.00')), 0))

                if per[19] > 0:
                    if eMatricula.inscripcion.estado_gratuidad == 1 or eMatricula.inscripcion.estado_gratuidad == 2:
                        if (cantidad_seleccionadas < porcentaje_seleccionadas):
                            mensaje = f"Estudiante irregular, se ha matriculado en menos del {porcentaje_perdidad_parcial_gratuidad}%, debe cancelar por todas las asignaturas."
                        else:
                            mensaje = u"Debe cancelar por las asignaturas que se matriculó por más de una vez."
                    else:
                        if eMatricula.inscripcion.estado_gratuidad == 2:
                            mensaje = u"Su estado es de pérdida parcial de la gratuidad. Debe cancelar por las asignaturas que se matriculó por más de una vez."

                    if eMatricula.inscripcion.persona.tiene_otro_titulo(inscripcion=eMatricula.inscripcion):
                        mensaje = u"El estudiante registra título en otra IES Pública o SENESCYT ha reportado. Su estado es de pérdida total de la gratuidad. Debe cancelar por todas las asignaturas."

                    hojadestino.write(fila, 0, per[1], fuentenormal)
                    hojadestino.write(fila, 1, per[2], fuentenormal)
                    hojadestino.write(fila, 2, per[3], fuentenormal)
                    hojadestino.write(fila, 3, per[4], fuentenormal)
                    hojadestino.write(fila, 4, per[5], fuentenormal)
                    hojadestino.write(fila, 5, per[6], fuentenormal)
                    hojadestino.write(fila, 6, per[7], fuentenormal)
                    hojadestino.write(fila, 7, per[8], fuentenormal)
                    hojadestino.write(fila, 8, per[9], fuentenormal)
                    hojadestino.write(fila, 9, per[10], fuentenormal)
                    hojadestino.write(fila, 10, per[11], fuentenormal)
                    hojadestino.write(fila, 11, per[12], fuentenormal)
                    hojadestino.write(fila, 12, per[13], fuentenormal)
                    hojadestino.write(fila, 13, per[14], fuentenormal)
                    hojadestino.write(fila, 14, per[15], fuentenormal)
                    hojadestino.write(fila, 15, per[16], fuentenormal)
                    hojadestino.write(fila, 16, per[17], fuentenormal)
                    hojadestino.write(fila, 17, per[18], fuentenormal)
                    hojadestino.write(fila, 18, per[19], fuentenormal)
                    hojadestino.write(fila, 19, per[20], fuentenormal)
                    hojadestino.write(fila, 20, mensaje, fuentenormal)
                    # hojadestino.write(fila, 17, mensaje, fuentenormal)
                    fila += 1
            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def generar_reporte_estudiantes_ppp_vin_Comunicacion():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    import xlwt
    from django.db import transaction, connection
    try:
        cadena = ''
        linea, excluidos, conexito = 0, 0, 0
        libre_origen = '/reporte_estudiantes_ppp_vin_COMUNICACION.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('COMUNICACION')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                    (u"ESTUDIANTE", 6000),
                    (u"NIVEL MATRICULA", 6000),
                    (u"NIVEL INSCRIPCION", 6000),
                    (u"ESTRATEGIAS Y HERRAMIENTAS DIGITALES DE LA COMUNICACION", 6000),
                    (u"APROBADA ESTRATEGIAS Y HERRAMIENTAS DIGITALES DE LA COMUNICACION", 6000),
                    (u"GERENCIAS DE MEDIOS DE COMUNICACION", 6000),
                    (u"APROBADA GERENCIAS DE MEDIOS DE COMUNICACION", 6000),
                    (u"COMUNICACION PARA LOS PROCESOS SOCIALES", 6000),
                    (u"APROBADA COMUNICACION PARA LOS PROCESOS SOCIALES", 6000),
                    (u"DIRECCION DE LA COMUNICACION", 6000),
                    (u"APROBADA DIRECCION DE LA COMUNICACION", 6000),
                    (u"NEGOCIACION Y MANEJOS DE CRISIS COMUNICACIONALES", 6000),
                    (u"APROBADA NEGOCIACION Y MANEJOS DE CRISIS COMUNICACIONALES", 6000),
                    (u"ASIGNATURAS APROBADAS HASTA 7MO", 6000),
                    (u"ASIGNATURAS QUE DEBERIA TENER APROBADAS HASTA 7MO", 6000),
                    # (u"PERDIDA DE GRATUIDAD", 6000),
                    (u"TOTAL DE SALDO PENDIENTE", 6000),
                    (u"TOTAL PAGADO", 6000),
                    (u"RUBROS DE ASIGNATURAS PPP Y VINC", 6000),
                    (u"ESTADO DE PAGO", 6000),
                    (u"OBSERVACIONES", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        cursor = connection.cursor()
        sql = f'''SELECT mat.id,
    pers.cedula, 
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres) AS ESTUDIANTE,
    nivmal.nombre AS nivel_matricula,
    nivmal2.nombre AS nivel_inscripcion,
    
	 --IDS DE LAS ASIGNATURAS
    MAX(CASE WHEN asigmal.id = 10853 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS ESTRATEGIAS_Y_HERRAMIENTAS_DIGITALES_DE_LA_COMUNCACION,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=488 AND asigmalla.id = 10853 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_ESTRATEGIAS_Y_HERRAMIENTAS_DIGITALES_DE_LA_COMUNCACION,
    
	 MAX(CASE WHEN asigmal.id = 10854 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS GERENCIAS_DE_MEDIOS_DE_COMUNICACION,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=488 AND asigmalla.id = 10854 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_GERENCIAS_DE_MEDIOS_DE_COMUNICACION,
    
	 MAX(CASE WHEN asigmal.id = 10850 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS COMUNICACION_PARA_LOS_PROCESOS_SOCIALES,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=488 AND asigmalla.id = 10850 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_COMUNICACION_PARA_LOS_PROCESOS_SOCIALES,
	 
	 MAX(CASE WHEN asigmal.id = 10859 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS DIRECCION_DE_LA_COMUNICACION,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=488 AND asigmalla.id = 10859 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_DIRECCION_DE_LA_COMUNICACION,
	  
	 MAX(CASE WHEN asigmal.id = 10865 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS NEGOCIACION_Y_MANEJOS_DE_CRISIS_COMUNICACIONALES,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=488 AND asigmalla.id = 10865 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_NEGOCIACION_Y_MANEJOS_DE_CRISIS_COMUNICACIONALES,
    
	 (SELECT COUNT(*) 
     FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
     -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0
	  AND nivmalla.orden < 8
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 488
	  AND recacad.status=TRUE 
	  AND recacad.inscripcion_id=ins.id 
	  AND recacad.aprobada=TRUE 
	  and recacad.valida=TRUE 
	  AND recacad.validapromedio=True) AS Asignaturas_Aprobadas_Hasta_7mo_Nivel,
	  
	 (SELECT COUNT(*) 
     FROM sga_asignaturamalla asigmalla
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
	  -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0 AND nivmalla.orden<8
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 488) AS Asignaturas_que_deben_estar_aprobadas_hasta_7mo_nivel,
	  
	  
	  ----------------------DESDE AQUI PEGAR Y CAMBIAR EN LAS DEMÁS CARRERAS-----------------------------
	  
	  (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) AS total_saldo_PENDIENTE,
	 
	 
	 (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
	 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
	 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
	 WHERE sagrubr.matricula_id = mat.id
	 AND sagpago.status = TRUE
	 AND sagrubr.status = TRUE
	 AND rubro_tipo.subtiporubro = 1
    ) AS TOTAL_PAGADO,
	 
	 
	 (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10853,10854,10850,10859,10865) )
     AS TOTAL_PAGO_ASIGNATURAS_PPP_VINC,
     
     
     CASE 
       WHEN ((SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) = 0 AND (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) = 0) THEN 'NO TIENE SALDOS'   
	    
	    WHEN (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10853,10854,10850,10859,10865) )= 0 THEN 'NO DEBE PAGAR ASIGNATURAS PPP o VINC'
	    
	    WHEN (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) > 0 AND (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10853,10854,10850,10859,10865) ) > 0 THEN 'ASIGNATURAS PAGADAS'
        ELSE 'AUN NO PAGA ASIGNATURAS'
        
     END AS resultado
	  
	  
FROM 
    sga_materiaasignada matasig 
INNER JOIN 
    sga_materia mate ON matasig.materia_id = mate.id
INNER JOIN 
    sga_asignaturamalla asigmal ON mate.asignaturamalla_id = asigmal.id
INNER JOIN 
    sga_asignatura asig ON asigmal.asignatura_id = asig.id
INNER JOIN 
    sga_matricula mat ON matasig.matricula_id = mat.id
INNER JOIN 
    sga_nivel niv ON mat.nivel_id = niv.id
INNER JOIN 
    sga_periodo per ON niv.periodo_id = per.id
INNER JOIN 
    sga_inscripcion ins ON mat.inscripcion_id = ins.id
INNER JOIN 
    sga_persona pers ON ins.persona_id = pers.id
INNER JOIN 
    sga_carrera carr ON ins.carrera_id = carr.id
INNER JOIN 
    sga_nivelmalla nivmal ON mat.nivelmalla_id = nivmal.id
INNER JOIN 
    sga_inscripcionnivel insniv ON insniv.inscripcion_id = ins.id
INNER JOIN 
    sga_nivelmalla nivmal2 ON insniv.nivel_id = nivmal2.id
WHERE 
	 -- IDS DE LAS ASIGNATURA MALLA -- ID DE LA CARRERA
    asigmal.id IN (10853,10854,10850,10859,10865) AND carr.id = 131 AND per.id = 317 and asigmal."status" = TRUE
GROUP BY 
    pers.cedula, 
    ins.id,
    mat.id,
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres),
    nivmal.nombre,
    nivmal2.nombre
ORDER BY
	 CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres)'''

        cursor.execute(sql)
        results = cursor.fetchall()
        nivel = 0
        ##SON 0 - 12 RESULTADOS
        for per in results:
            eMatricula = Matricula.objects.get(pk=per[0])
            ePeriodoMatricula = None
            if eMatricula.nivel.periodo.periodomatricula_set.values('id').filter(status=True).exists():
                ePeriodoMatricula = eMatricula.nivel.periodo.periodomatricula_set.filter(status=True)[0]
            if eMatricula.inscripcion.coordinacion_id in [1, 2, 3, 4, 5]:
                porcentaje_perdidad_parcial_gratuidad = PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD
                if ePeriodoMatricula and ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad > 0:
                    porcentaje_perdidad_parcial_gratuidad = ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad
                cursor2 = connection.cursor()
                itinerario = 0
                if not eMatricula.inscripcion.itinerario is None and eMatricula.inscripcion.itinerario > 0:
                    itinerario = eMatricula.inscripcion.itinerario
                sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
                if itinerario > 0:
                    sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id and (am.itinerario=0 or am.itinerario=" + str(
                        itinerario) + ") GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"

                cursor2.execute(sql)
                results = cursor2.fetchall()
                nivel = 0
                for dat in results:
                    nivel = dat[0]
                    cantidad_seleccionadas = dat[1]
                cantidad_nivel = 0
                materiasnivel = []
                eAsignaturaMallas = AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True,
                                                                   malla=eMatricula.inscripcion.mi_malla())
                if itinerario > 0:
                    eAsignaturaMallas = eAsignaturaMallas.filter(Q(itinerario=0) | Q(itinerario=itinerario))
                for eAsignaturaMalla in eAsignaturaMallas:
                    if Materia.objects.values('id').filter(nivel__periodo=eMatricula.nivel.periodo,
                                                           asignaturamalla=eAsignaturaMalla).exists():
                        if eMatricula.inscripcion.estado_asignatura(eAsignaturaMalla.asignatura) != 1:
                            cantidad_nivel += 1

                porcentaje_seleccionadas = int(round(
                    Decimal((float(cantidad_nivel) * float(porcentaje_perdidad_parcial_gratuidad)) / 100).quantize(
                        Decimal('.00')), 0))

                if per[19] > 0:
                    if eMatricula.inscripcion.estado_gratuidad == 1 or eMatricula.inscripcion.estado_gratuidad == 2:
                        if (cantidad_seleccionadas < porcentaje_seleccionadas):
                            mensaje = f"Estudiante irregular, se ha matriculado en menos del {porcentaje_perdidad_parcial_gratuidad}%, debe cancelar por todas las asignaturas."
                        else:
                            mensaje = u"Debe cancelar por las asignaturas que se matriculó por más de una vez."
                    else:
                        if eMatricula.inscripcion.estado_gratuidad == 2:
                            mensaje = u"Su estado es de pérdida parcial de la gratuidad. Debe cancelar por las asignaturas que se matriculó por más de una vez."

                    if eMatricula.inscripcion.persona.tiene_otro_titulo(inscripcion=eMatricula.inscripcion):
                        mensaje = u"El estudiante registra título en otra IES Pública o SENESCYT ha reportado. Su estado es de pérdida total de la gratuidad. Debe cancelar por todas las asignaturas."

                    hojadestino.write(fila, 0, per[1], fuentenormal)
                    hojadestino.write(fila, 1, per[2], fuentenormal)
                    hojadestino.write(fila, 2, per[3], fuentenormal)
                    hojadestino.write(fila, 3, per[4], fuentenormal)
                    hojadestino.write(fila, 4, per[5], fuentenormal)
                    hojadestino.write(fila, 5, per[6], fuentenormal)
                    hojadestino.write(fila, 6, per[7], fuentenormal)
                    hojadestino.write(fila, 7, per[8], fuentenormal)
                    hojadestino.write(fila, 8, per[9], fuentenormal)
                    hojadestino.write(fila, 9, per[10], fuentenormal)
                    hojadestino.write(fila, 10, per[11], fuentenormal)
                    hojadestino.write(fila, 11, per[12], fuentenormal)
                    hojadestino.write(fila, 12, per[13], fuentenormal)
                    hojadestino.write(fila, 13, per[14], fuentenormal)
                    hojadestino.write(fila, 14, per[15], fuentenormal)
                    hojadestino.write(fila, 15, per[16], fuentenormal)
                    hojadestino.write(fila, 16, per[17], fuentenormal)
                    hojadestino.write(fila, 17, per[18], fuentenormal)
                    hojadestino.write(fila, 18, per[19], fuentenormal)
                    hojadestino.write(fila, 19, per[20], fuentenormal)
                    hojadestino.write(fila, 20, mensaje, fuentenormal)
                    # hojadestino.write(fila, 17, mensaje, fuentenormal)
                    fila += 1
            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def generar_reporte_estudiantes_ppp_vin_Psicologia():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    import xlwt
    from django.db import transaction, connection
    try:
        cadena = ''
        linea, excluidos, conexito = 0, 0, 0
        libre_origen = '/reporte_estudiantes_ppp_vin_PSICOLOGIA.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('PSICOLOGIA')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                    (u"ESTUDIANTE", 6000),
                    (u"NIVEL MATRICULA", 6000),
                    (u"NIVEL INSCRIPCION", 6000),
                    (u"PSICOLOGIA SOCIAL Y COMUNITARIA", 6000),
                    (u"APROBADA PSICOLOGIA SOCIAL Y COMUNITARIA", 6000),
                    (u"PSICOLOGIA DE LA SALUD", 6000),
                    (u"APROBADA PSICOLOGIA DE LA SALUD", 6000),
                    (u"PROCESOS DE INCLUSION EDUCATIVA", 6000),
                    (u"APROBADA PROCESOS DE INCLUSION EDUCATIVA", 6000),
                    (u"INTERVENCION EN MALTRATO Y VIOLENCIA", 6000),
                    (u"APROBADA INTERVENCION EN MALTRATO Y VIOLENCIA", 6000),
                    (u"ASIGNATURAS APROBADAS HASTA 4TO", 6000),
                    (u"ASIGNATURAS QUE DEBERIA TENER APROBADAS HASTA 4TO", 6000),
                    # (u"PERDIDA DE GRATUIDAD", 6000),
                    (u"TOTAL DE SALDO PENDIENTE", 6000),
                    (u"TOTAL PAGADO", 6000),
                    (u"RUBROS DE ASIGNATURAS PPP Y VINC", 6000),
                    (u"ESTADO DE PAGO", 6000),
                    (u"OBSERVACIONES", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        cursor = connection.cursor()
        sql = f'''SELECT mat.id,
    pers.cedula, 
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres) AS ESTUDIANTE,
    nivmal.nombre AS nivel_matricula,
    nivmal2.nombre AS nivel_inscripcion,
    
	 --IDS DE LAS ASIGNATURAS
    MAX(CASE WHEN asigmal.id = 10639 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS PSICOLOGIA_SOCIAL_Y_COMUNITARIA,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=479 AND asigmalla.id = 10639 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_PSICOLOGIA_SOCIAL_Y_COMUNITARIA,
    
	 MAX(CASE WHEN asigmal.id = 10646 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS PSICOLOGIA_DE_LA_SALUD,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=479 AND asigmalla.id = 10646 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_PSICOLOGIA_DE_LA_SALUD,
    
	 MAX(CASE WHEN asigmal.id = 10649 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "PROCESOS DE INCLUSION EDUCATIVA",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=479 AND asigmalla.id = 10649 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA PROCESOS DE INCLUSION EDUCATIVA",
	 
	 MAX(CASE WHEN asigmal.id = 10654 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "INTERVENCION EN MALTRATO Y VIOLENCIA",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=479 AND asigmalla.id = 10654 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA INTERVENCION EN MALTRATO Y VIOLENCIA",
	  
	 (SELECT COUNT(*) 
     FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
     -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0
	  AND nivmalla.orden < 5
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 479
	  AND recacad.status=TRUE 
	  AND recacad.inscripcion_id=ins.id 
	  AND recacad.aprobada=TRUE 
	  and recacad.valida=TRUE 
	  AND recacad.validapromedio=True) AS Asignaturas_Aprobadas_Hasta_4to_Nivel,
	  
	 (SELECT COUNT(*) 
     FROM sga_asignaturamalla asigmalla
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
	  -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0 AND nivmalla.orden<5
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 479) AS Asignaturas_que_deben_estar_aprobadas_hasta_4to_nivel,
	  
	  
	  ----------------------DESDE AQUI PEGAR Y CAMBIAR EN LAS DEMÁS CARRERAS-----------------------------
	  
	  (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) AS total_saldo_PENDIENTE,
	 
	 
	 (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
	 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
	 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
	 WHERE sagrubr.matricula_id = mat.id
	 AND sagpago.status = TRUE
	 AND sagrubr.status = TRUE
	 AND rubro_tipo.subtiporubro = 1
    ) AS TOTAL_PAGADO,
	 
	 
	 (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10639,10646,10649,10654) )
     AS TOTAL_PAGO_ASIGNATURAS_PPP_VINC,
     
     
     CASE 
       WHEN ((SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) = 0 AND (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) = 0) THEN 'NO TIENE SALDOS'   
	    
	    WHEN (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10639,10646,10649,10654) )= 0 THEN 'NO DEBE PAGAR ASIGNATURAS PPP o VINC'
	    
	    WHEN (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) > 0 AND (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10639,10646,10649,10654) ) > 0 THEN 'ASIGNATURAS PAGADAS'
        ELSE 'AUN NO PAGA ASIGNATURAS'
        
     END AS resultado
	  
	  
FROM 
    sga_materiaasignada matasig 
INNER JOIN 
    sga_materia mate ON matasig.materia_id = mate.id
INNER JOIN 
    sga_asignaturamalla asigmal ON mate.asignaturamalla_id = asigmal.id
INNER JOIN 
    sga_asignatura asig ON asigmal.asignatura_id = asig.id
INNER JOIN 
    sga_matricula mat ON matasig.matricula_id = mat.id
INNER JOIN 
    sga_nivel niv ON mat.nivel_id = niv.id
INNER JOIN 
    sga_periodo per ON niv.periodo_id = per.id
INNER JOIN 
    sga_inscripcion ins ON mat.inscripcion_id = ins.id
INNER JOIN 
    sga_persona pers ON ins.persona_id = pers.id
INNER JOIN 
    sga_carrera carr ON ins.carrera_id = carr.id
INNER JOIN 
    sga_nivelmalla nivmal ON mat.nivelmalla_id = nivmal.id
INNER JOIN 
    sga_inscripcionnivel insniv ON insniv.inscripcion_id = ins.id
INNER JOIN 
    sga_nivelmalla nivmal2 ON insniv.nivel_id = nivmal2.id
WHERE 
	 -- IDS DE LAS ASIGNATURA MALLA -- ID DE LA CARRERA
    asigmal.id IN (10639,10646,10649,10654) AND carr.id = 132 AND per.id = 317 and asigmal."status" = TRUE
GROUP BY 
    pers.cedula, 
    ins.id,
    mat.id,
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres),
    nivmal.nombre,
    nivmal2.nombre
ORDER BY
	 CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres)'''

        cursor.execute(sql)
        results = cursor.fetchall()
        nivel = 0
        ##SON 0 - 12 RESULTADOS
        for per in results:
            eMatricula = Matricula.objects.get(pk=per[0])
            ePeriodoMatricula = None
            if eMatricula.nivel.periodo.periodomatricula_set.values('id').filter(status=True).exists():
                ePeriodoMatricula = eMatricula.nivel.periodo.periodomatricula_set.filter(status=True)[0]
            if eMatricula.inscripcion.coordinacion_id in [1, 2, 3, 4, 5]:
                porcentaje_perdidad_parcial_gratuidad = PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD
                if ePeriodoMatricula and ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad > 0:
                    porcentaje_perdidad_parcial_gratuidad = ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad
                cursor2 = connection.cursor()
                itinerario = 0
                if not eMatricula.inscripcion.itinerario is None and eMatricula.inscripcion.itinerario > 0:
                    itinerario = eMatricula.inscripcion.itinerario
                sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
                if itinerario > 0:
                    sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id and (am.itinerario=0 or am.itinerario=" + str(
                        itinerario) + ") GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"

                cursor2.execute(sql)
                results = cursor2.fetchall()
                nivel = 0
                for dat in results:
                    nivel = dat[0]
                    cantidad_seleccionadas = dat[1]
                cantidad_nivel = 0
                materiasnivel = []
                eAsignaturaMallas = AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True,
                                                                   malla=eMatricula.inscripcion.mi_malla())
                if itinerario > 0:
                    eAsignaturaMallas = eAsignaturaMallas.filter(Q(itinerario=0) | Q(itinerario=itinerario))
                for eAsignaturaMalla in eAsignaturaMallas:
                    if Materia.objects.values('id').filter(nivel__periodo=eMatricula.nivel.periodo,
                                                           asignaturamalla=eAsignaturaMalla).exists():
                        if eMatricula.inscripcion.estado_asignatura(eAsignaturaMalla.asignatura) != 1:
                            cantidad_nivel += 1

                porcentaje_seleccionadas = int(round(
                    Decimal((float(cantidad_nivel) * float(porcentaje_perdidad_parcial_gratuidad)) / 100).quantize(
                        Decimal('.00')), 0))

                if per[17] > 0:
                    if eMatricula.inscripcion.estado_gratuidad == 1 or eMatricula.inscripcion.estado_gratuidad == 2:
                        if (cantidad_seleccionadas < porcentaje_seleccionadas):
                            mensaje = f"Estudiante irregular, se ha matriculado en menos del {porcentaje_perdidad_parcial_gratuidad}%, debe cancelar por todas las asignaturas."
                        else:
                            mensaje = u"Debe cancelar por las asignaturas que se matriculó por más de una vez."
                    else:
                        if eMatricula.inscripcion.estado_gratuidad == 2:
                            mensaje = u"Su estado es de pérdida parcial de la gratuidad. Debe cancelar por las asignaturas que se matriculó por más de una vez."

                    if eMatricula.inscripcion.persona.tiene_otro_titulo(inscripcion=eMatricula.inscripcion):
                        mensaje = u"El estudiante registra título en otra IES Pública o SENESCYT ha reportado. Su estado es de pérdida total de la gratuidad. Debe cancelar por todas las asignaturas."

                    hojadestino.write(fila, 0, per[1], fuentenormal)
                    hojadestino.write(fila, 1, per[2], fuentenormal)
                    hojadestino.write(fila, 2, per[3], fuentenormal)
                    hojadestino.write(fila, 3, per[4], fuentenormal)
                    hojadestino.write(fila, 4, per[5], fuentenormal)
                    hojadestino.write(fila, 5, per[6], fuentenormal)
                    hojadestino.write(fila, 6, per[7], fuentenormal)
                    hojadestino.write(fila, 7, per[8], fuentenormal)
                    hojadestino.write(fila, 8, per[9], fuentenormal)
                    hojadestino.write(fila, 9, per[10], fuentenormal)
                    hojadestino.write(fila, 10, per[11], fuentenormal)
                    hojadestino.write(fila, 11, per[12], fuentenormal)
                    hojadestino.write(fila, 12, per[13], fuentenormal)
                    hojadestino.write(fila, 13, per[14], fuentenormal)
                    hojadestino.write(fila, 14, per[15], fuentenormal)
                    hojadestino.write(fila, 15, per[16], fuentenormal)
                    hojadestino.write(fila, 16, per[17], fuentenormal)
                    hojadestino.write(fila, 17, per[18], fuentenormal)
                    hojadestino.write(fila, 18, mensaje, fuentenormal)
                    # hojadestino.write(fila, 17, mensaje, fuentenormal)
                    fila += 1
            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



def generar_reporte_estudiantes_ppp_vin_Trabajo_social():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    import xlwt
    from django.db import transaction, connection
    try:
        cadena = ''
        linea, excluidos, conexito = 0, 0, 0
        libre_origen = '/reporte_estudiantes_ppp_vin_TrabSocial.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('TRABAJO SOCIAL')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                    (u"ESTUDIANTE", 6000),
                    (u"NIVEL MATRICULA", 6000),
                    (u"NIVEL INSCRIPCION", 6000),
                    (u"TALLER URBANO", 6000),
                    (u"APROBADA TALLER URBANO", 6000),
                    (u"TALLER RURAL", 6000),
                    (u"APROBADA TALLER RURAL", 6000),
                    (u"INTERVENCION PROFESIONAL", 6000),
                    (u"APROBADA INTERVENCION PROFESIONAL", 6000),
                    (u"INTERVENCION PROFESIONAL II", 6000),
                    (u"APROBADA INTERVENCION PROFESIONAL II", 6000),
                    (u"ASIGNATURAS APROBADAS HASTA 3RO", 6000),
                    (u"ASIGNATURAS QUE DEBERIA TENER APROBADAS HASTA 3RO", 6000),
                    # (u"PERDIDA DE GRATUIDAD", 6000),
                    (u"TOTAL DE SALDO PENDIENTE", 6000),
                    (u"TOTAL PAGADO", 6000),
                    (u"RUBROS DE ASIGNATURAS PPP Y VINC", 6000),
                    (u"ESTADO DE PAGO", 6000),
                    (u"OBSERVACIONES", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        cursor = connection.cursor()
        sql = f'''SELECT mat.id,
    pers.cedula, 
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres) AS ESTUDIANTE,
    nivmal.nombre AS nivel_matricula,
    nivmal2.nombre AS nivel_inscripcion,
    
	 --IDS DE LAS ASIGNATURAS
    MAX(CASE WHEN asigmal.id = 10724 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS TALLER_URBANO,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=485 AND asigmalla.id = 10724 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_TALLER_URBANO,
    
	 MAX(CASE WHEN asigmal.id = 10730 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS TALLER_RURAL,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=485 AND asigmalla.id = 10730 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_TALLER_RURAL,
    
	 MAX(CASE WHEN asigmal.id = 10777 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS INTERVENCION_PROFESIONAL,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=485 AND asigmalla.id = 10777 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_INTERVENCION_PROFESIONAL,
	 
	 MAX(CASE WHEN asigmal.id = 10787 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS INTERVENCION_PROFESIONAL_II,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=485 AND asigmalla.id = 10787 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_INTERVENCION_PROFESIONAL_II,
	  
	 (SELECT COUNT(*) 
     FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
     -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0
	  AND nivmalla.orden < 4
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 485
	  AND recacad.status=TRUE 
	  AND recacad.inscripcion_id=ins.id 
	  AND recacad.aprobada=TRUE 
	  and recacad.valida=TRUE 
	  AND recacad.validapromedio=True) AS Asignaturas_Aprobadas_Hasta_3ro_Nivel,
	  
	 (SELECT COUNT(*) 
     FROM sga_asignaturamalla asigmalla
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
	  -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0 AND nivmalla.orden<4
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 485) AS Asignaturas_que_deben_estar_aprobadas_hasta_3ro_nivel,
	  
	  
	  ----------------------DESDE AQUI PEGAR Y CAMBIAR EN LAS DEMÁS CARRERAS-----------------------------
	  
	  (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) AS total_saldo_PENDIENTE,
	 
	 
	 (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
	 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
	 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
	 WHERE sagrubr.matricula_id = mat.id
	 AND sagpago.status = TRUE
	 AND sagrubr.status = TRUE
	 AND rubro_tipo.subtiporubro = 1
    ) AS TOTAL_PAGADO,
	 
	 
	 (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10724,10730, 10777,10787) )
     AS TOTAL_PAGO_ASIGNATURAS_PPP_VINC,
     
     
     CASE 
       WHEN ((SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) = 0 AND (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) = 0) THEN 'NO TIENE SALDOS'   
	    
	    WHEN (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10724,10730, 10777,10787) )= 0 THEN 'NO DEBE PAGAR ASIGNATURAS PPP o VINC'
	    
	    WHEN (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) > 0 AND (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10724,10730, 10777,10787) ) > 0 THEN 'ASIGNATURAS PAGADAS'
        ELSE 'AUN NO PAGA ASIGNATURAS'
        
     END AS resultado
	  
	  
FROM 
    sga_materiaasignada matasig 
INNER JOIN 
    sga_materia mate ON matasig.materia_id = mate.id
INNER JOIN 
    sga_asignaturamalla asigmal ON mate.asignaturamalla_id = asigmal.id
INNER JOIN 
    sga_asignatura asig ON asigmal.asignatura_id = asig.id
INNER JOIN 
    sga_matricula mat ON matasig.matricula_id = mat.id
INNER JOIN 
    sga_nivel niv ON mat.nivel_id = niv.id
INNER JOIN 
    sga_periodo per ON niv.periodo_id = per.id
INNER JOIN 
    sga_inscripcion ins ON mat.inscripcion_id = ins.id
INNER JOIN 
    sga_persona pers ON ins.persona_id = pers.id
INNER JOIN 
    sga_carrera carr ON ins.carrera_id = carr.id
INNER JOIN 
    sga_nivelmalla nivmal ON mat.nivelmalla_id = nivmal.id
INNER JOIN 
    sga_inscripcionnivel insniv ON insniv.inscripcion_id = ins.id
INNER JOIN 
    sga_nivelmalla nivmal2 ON insniv.nivel_id = nivmal2.id
WHERE 
	 -- IDS DE LAS ASIGNATURA MALLA -- ID DE LA CARRERA
    asigmal.id IN (10724,10730, 10777,10787) AND carr.id = 130 AND per.id = 317 and asigmal."status" = TRUE
GROUP BY 
    pers.cedula, 
    ins.id,
    mat.id,
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres),
    nivmal.nombre,
    nivmal2.nombre
ORDER BY
	 CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres)'''

        cursor.execute(sql)
        results = cursor.fetchall()
        nivel = 0
        ##SON 0 - 12 RESULTADOS
        for per in results:
            eMatricula = Matricula.objects.get(pk=per[0])
            ePeriodoMatricula = None
            if eMatricula.nivel.periodo.periodomatricula_set.values('id').filter(status=True).exists():
                ePeriodoMatricula = eMatricula.nivel.periodo.periodomatricula_set.filter(status=True)[0]
            if eMatricula.inscripcion.coordinacion_id in [1, 2, 3, 4, 5]:
                porcentaje_perdidad_parcial_gratuidad = PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD
                if ePeriodoMatricula and ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad > 0:
                    porcentaje_perdidad_parcial_gratuidad = ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad
                cursor2 = connection.cursor()
                itinerario = 0
                if not eMatricula.inscripcion.itinerario is None and eMatricula.inscripcion.itinerario > 0:
                    itinerario = eMatricula.inscripcion.itinerario
                sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
                if itinerario > 0:
                    sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id and (am.itinerario=0 or am.itinerario=" + str(
                        itinerario) + ") GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"

                cursor2.execute(sql)
                results = cursor2.fetchall()
                nivel = 0
                for dat in results:
                    nivel = dat[0]
                    cantidad_seleccionadas = dat[1]
                cantidad_nivel = 0
                materiasnivel = []
                eAsignaturaMallas = AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True,
                                                                   malla=eMatricula.inscripcion.mi_malla())
                if itinerario > 0:
                    eAsignaturaMallas = eAsignaturaMallas.filter(Q(itinerario=0) | Q(itinerario=itinerario))
                for eAsignaturaMalla in eAsignaturaMallas:
                    if Materia.objects.values('id').filter(nivel__periodo=eMatricula.nivel.periodo,
                                                           asignaturamalla=eAsignaturaMalla).exists():
                        if eMatricula.inscripcion.estado_asignatura(eAsignaturaMalla.asignatura) != 1:
                            cantidad_nivel += 1

                porcentaje_seleccionadas = int(round(
                    Decimal((float(cantidad_nivel) * float(porcentaje_perdidad_parcial_gratuidad)) / 100).quantize(
                        Decimal('.00')), 0))

                if per[17] > 0:
                    if eMatricula.inscripcion.estado_gratuidad == 1 or eMatricula.inscripcion.estado_gratuidad == 2:
                        if (cantidad_seleccionadas < porcentaje_seleccionadas):
                            mensaje = f"Estudiante irregular, se ha matriculado en menos del {porcentaje_perdidad_parcial_gratuidad}%, debe cancelar por todas las asignaturas."
                        else:
                            mensaje = u"Debe cancelar por las asignaturas que se matriculó por más de una vez."
                    else:
                        if eMatricula.inscripcion.estado_gratuidad == 2:
                            mensaje = u"Su estado es de pérdida parcial de la gratuidad. Debe cancelar por las asignaturas que se matriculó por más de una vez."

                    if eMatricula.inscripcion.persona.tiene_otro_titulo(inscripcion=eMatricula.inscripcion):
                        mensaje = u"El estudiante registra título en otra IES Pública o SENESCYT ha reportado. Su estado es de pérdida total de la gratuidad. Debe cancelar por todas las asignaturas."

                    hojadestino.write(fila, 0, per[1], fuentenormal)
                    hojadestino.write(fila, 1, per[2], fuentenormal)
                    hojadestino.write(fila, 2, per[3], fuentenormal)
                    hojadestino.write(fila, 3, per[4], fuentenormal)
                    hojadestino.write(fila, 4, per[5], fuentenormal)
                    hojadestino.write(fila, 5, per[6], fuentenormal)
                    hojadestino.write(fila, 6, per[7], fuentenormal)
                    hojadestino.write(fila, 7, per[8], fuentenormal)
                    hojadestino.write(fila, 8, per[9], fuentenormal)
                    hojadestino.write(fila, 9, per[10], fuentenormal)
                    hojadestino.write(fila, 10, per[11], fuentenormal)
                    hojadestino.write(fila, 11, per[12], fuentenormal)
                    hojadestino.write(fila, 12, per[13], fuentenormal)
                    hojadestino.write(fila, 13, per[14], fuentenormal)
                    hojadestino.write(fila, 14, per[15], fuentenormal)
                    hojadestino.write(fila, 15, per[16], fuentenormal)
                    hojadestino.write(fila, 16, per[17], fuentenormal)
                    hojadestino.write(fila, 17, per[18], fuentenormal)
                    hojadestino.write(fila, 18, mensaje, fuentenormal)
                    # hojadestino.write(fila, 17, mensaje, fuentenormal)
                    fila += 1
            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def generar_reporte_estudiantes_ppp_vin_TICS():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    import xlwt
    from django.db import transaction, connection
    try:
        cadena = ''
        linea, excluidos, conexito = 0, 0, 0
        libre_origen = '/reporte_estudiantes_ppp_vin_TICS.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('TICS')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                    (u"ESTUDIANTE", 6000),
                    (u"NIVEL MATRICULA", 6000),
                    (u"NIVEL INSCRIPCION", 6000),
                    (u"PRACTICAS DE SERVICIO COMUNITARIO", 6000),
                    (u"APROBADA PRACTICAS DE SERVICIO COMUNITARIO", 6000),
                    (u"PRACTICAS LABORALES I", 6000),
                    (u"APROBADA PRACTICAS LABORALES I", 6000),
                    (u"PRACTICAS LABORALES II", 6000),
                    (u"APROBADA PRACTICAS LABORALES IIL", 6000),
                    (u"ASIGNATURAS APROBADAS HASTA 6TO", 6000),
                    (u"ASIGNATURAS QUE DEBERIA TENER APROBADAS HASTA 6TO", 6000),
                    # (u"PERDIDA DE GRATUIDAD", 6000),
                    (u"TOTAL DE SALDO PENDIENTE", 6000),
                    (u"TOTAL PAGADO", 6000),
                    (u"RUBROS DE ASIGNATURAS PPP Y VINC", 6000),
                    (u"ESTADO DE PAGO", 6000),
                    (u"OBSERVACIONES", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        cursor = connection.cursor()
        sql = f'''SELECT mat.id,
    pers.cedula, 
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres) AS ESTUDIANTE,
    nivmal.nombre AS nivel_matricula,
    nivmal2.nombre AS nivel_inscripcion,
    
	 --IDS DE LAS ASIGNATURAS
    MAX(CASE WHEN asigmal.id = 10587 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS PRACTICAS_DE_SERVICIO_COMUNITARIO,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=478 AND asigmalla.id = 10587 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_PRACTICAS_DE_SERVICIO_COMUNITARIO,
    
	 MAX(CASE WHEN asigmal.id = 10618 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS PRACTICAS_LABORALES_I,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=478 AND asigmalla.id = 10618 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_PRACTICAS_LABORALES_I,
    
	 MAX(CASE WHEN asigmal.id = 10612 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS PRACTICAS_LABORALES_II,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=478 AND asigmalla.id = 10612 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_PRACTICAS_LABORALES_II,
	 
	 (SELECT COUNT(*) 
     FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
     -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0
	  AND nivmalla.orden < 7
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 478
	  AND recacad.status=TRUE 
	  AND recacad.inscripcion_id=ins.id 
	  AND recacad.aprobada=TRUE 
	  and recacad.valida=TRUE 
	  AND recacad.validapromedio=True) AS Asignaturas_Aprobadas_Hasta_6to_Nivel,
	  
	 (SELECT COUNT(*) 
     FROM sga_asignaturamalla asigmalla
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
	  -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0 AND nivmalla.orden<7
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 478) AS Asignaturas_que_deben_estar_aprobadas_hasta_6to_nivel,
	  
	  
	  ----------------------DESDE AQUI PEGAR Y CAMBIAR EN LAS DEMÁS CARRERAS-----------------------------
	  
	  (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) AS total_saldo_PENDIENTE,
	 
	 
	 (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
	 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
	 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
	 WHERE sagrubr.matricula_id = mat.id
	 AND sagpago.status = TRUE
	 AND sagrubr.status = TRUE
	 AND rubro_tipo.subtiporubro = 1
    ) AS TOTAL_PAGADO,
	 
	 
	 (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10587,10618,10612) )
     AS TOTAL_PAGO_ASIGNATURAS_PPP_VINC,
     
     
     CASE 
       WHEN ((SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) = 0 AND (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) = 0) THEN 'NO TIENE SALDOS'   
	    
	    WHEN (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10587,10618,10612) )= 0 THEN 'NO DEBE PAGAR ASIGNATURAS PPP o VINC'
	    
	    WHEN (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) > 0 AND (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10587,10618,10612) ) > 0 THEN 'ASIGNATURAS PAGADAS'
        ELSE 'AUN NO PAGA ASIGNATURAS'
        
     END AS resultado
	  
	  
FROM 
    sga_materiaasignada matasig 
INNER JOIN 
    sga_materia mate ON matasig.materia_id = mate.id
INNER JOIN 
    sga_asignaturamalla asigmal ON mate.asignaturamalla_id = asigmal.id
INNER JOIN 
    sga_asignatura asig ON asigmal.asignatura_id = asig.id
INNER JOIN 
    sga_matricula mat ON matasig.matricula_id = mat.id
INNER JOIN 
    sga_nivel niv ON mat.nivel_id = niv.id
INNER JOIN 
    sga_periodo per ON niv.periodo_id = per.id
INNER JOIN 
    sga_inscripcion ins ON mat.inscripcion_id = ins.id
INNER JOIN 
    sga_persona pers ON ins.persona_id = pers.id
INNER JOIN 
    sga_carrera carr ON ins.carrera_id = carr.id
INNER JOIN 
    sga_nivelmalla nivmal ON mat.nivelmalla_id = nivmal.id
INNER JOIN 
    sga_inscripcionnivel insniv ON insniv.inscripcion_id = ins.id
INNER JOIN 
    sga_nivelmalla nivmal2 ON insniv.nivel_id = nivmal2.id
WHERE 
	 -- IDS DE LAS ASIGNATURA MALLA -- ID DE LA CARRERA
    asigmal.id IN (10587,10618,10612) AND carr.id = 133 AND per.id = 317 and asigmal."status" = TRUE
GROUP BY 
    pers.cedula, 
    ins.id,
    mat.id,
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres),
    nivmal.nombre,
    nivmal2.nombre
ORDER BY
	 CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres)'''

        cursor.execute(sql)
        results = cursor.fetchall()
        nivel = 0
        ##SON 0 - 12 RESULTADOS
        for per in results:
            eMatricula = Matricula.objects.get(pk=per[0])
            ePeriodoMatricula = None
            if eMatricula.nivel.periodo.periodomatricula_set.values('id').filter(status=True).exists():
                ePeriodoMatricula = eMatricula.nivel.periodo.periodomatricula_set.filter(status=True)[0]
            if eMatricula.inscripcion.coordinacion_id in [1, 2, 3, 4, 5]:
                porcentaje_perdidad_parcial_gratuidad = PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD
                if ePeriodoMatricula and ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad > 0:
                    porcentaje_perdidad_parcial_gratuidad = ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad
                cursor2 = connection.cursor()
                itinerario = 0
                if not eMatricula.inscripcion.itinerario is None and eMatricula.inscripcion.itinerario > 0:
                    itinerario = eMatricula.inscripcion.itinerario
                sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
                if itinerario > 0:
                    sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id and (am.itinerario=0 or am.itinerario=" + str(
                        itinerario) + ") GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"

                cursor2.execute(sql)
                results = cursor2.fetchall()
                nivel = 0
                for dat in results:
                    nivel = dat[0]
                    cantidad_seleccionadas = dat[1]
                cantidad_nivel = 0
                materiasnivel = []
                eAsignaturaMallas = AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True,
                                                                   malla=eMatricula.inscripcion.mi_malla())
                if itinerario > 0:
                    eAsignaturaMallas = eAsignaturaMallas.filter(Q(itinerario=0) | Q(itinerario=itinerario))
                for eAsignaturaMalla in eAsignaturaMallas:
                    if Materia.objects.values('id').filter(nivel__periodo=eMatricula.nivel.periodo,
                                                           asignaturamalla=eAsignaturaMalla).exists():
                        if eMatricula.inscripcion.estado_asignatura(eAsignaturaMalla.asignatura) != 1:
                            cantidad_nivel += 1

                porcentaje_seleccionadas = int(round(
                    Decimal((float(cantidad_nivel) * float(porcentaje_perdidad_parcial_gratuidad)) / 100).quantize(
                        Decimal('.00')), 0))

                if per[15] > 0:
                    if eMatricula.inscripcion.estado_gratuidad == 1 or eMatricula.inscripcion.estado_gratuidad == 2:
                        if (cantidad_seleccionadas < porcentaje_seleccionadas):
                            mensaje = f"Estudiante irregular, se ha matriculado en menos del {porcentaje_perdidad_parcial_gratuidad}%, debe cancelar por todas las asignaturas."
                        else:
                            mensaje = u"Debe cancelar por las asignaturas que se matriculó por más de una vez."
                    else:
                        if eMatricula.inscripcion.estado_gratuidad == 2:
                            mensaje = u"Su estado es de pérdida parcial de la gratuidad. Debe cancelar por las asignaturas que se matriculó por más de una vez."

                    if eMatricula.inscripcion.persona.tiene_otro_titulo(inscripcion=eMatricula.inscripcion):
                        mensaje = u"El estudiante registra título en otra IES Pública o SENESCYT ha reportado. Su estado es de pérdida total de la gratuidad. Debe cancelar por todas las asignaturas."

                    hojadestino.write(fila, 0, per[1], fuentenormal)
                    hojadestino.write(fila, 1, per[2], fuentenormal)
                    hojadestino.write(fila, 2, per[3], fuentenormal)
                    hojadestino.write(fila, 3, per[4], fuentenormal)
                    hojadestino.write(fila, 4, per[5], fuentenormal)
                    hojadestino.write(fila, 5, per[6], fuentenormal)
                    hojadestino.write(fila, 6, per[7], fuentenormal)
                    hojadestino.write(fila, 7, per[8], fuentenormal)
                    hojadestino.write(fila, 8, per[9], fuentenormal)
                    hojadestino.write(fila, 9, per[10], fuentenormal)
                    hojadestino.write(fila, 10, per[11], fuentenormal)
                    hojadestino.write(fila, 11, per[12], fuentenormal)
                    hojadestino.write(fila, 12, per[13], fuentenormal)
                    hojadestino.write(fila, 13, per[14], fuentenormal)
                    hojadestino.write(fila, 14, per[15], fuentenormal)
                    hojadestino.write(fila, 15, per[16], fuentenormal)
                    hojadestino.write(fila, 16, mensaje, fuentenormal)
                    # hojadestino.write(fila, 17, mensaje, fuentenormal)
                    fila += 1
            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



def generar_reporte_estudiantes_ppp_vin_Inicial():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    import xlwt
    from django.db import transaction, connection
    try:
        cadena = ''
        linea, excluidos, conexito = 0, 0, 0
        libre_origen = '/reporte_estudiantes_ppp_vin_INICIAL.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('INICIAL')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                    (u"ESTUDIANTE", 6000),
                    (u"NIVEL MATRICULA", 6000),
                    (u"NIVEL INSCRIPCION", 6000),
                    (u"CONTEXTOS Y SISTEMAS EDUCATIVOS PARA LA EDUCACION INICIAL", 6000),
                    (u"APROBADA CONTEXTOS Y SISTEMAS EDUCATIVOS PARA LA EDUCACION INICIAL", 6000),
                    (u"CONTEXTOS DE LOS SUJETOS EDUCATIVOS Y EL APRENDIZAJE HUMANO", 6000),
                    (u"APROBADA CONTEXTOS DE LOS SUJETOS EDUCATIVOS Y EL APRENDIZAJE HUMANO", 6000),
                    (u"DISEÑO Y DESARROLLO DE MODELOS PEDAGOGICOS", 6000),
                    (u"APROBADA DISEÑO Y DESARROLLO DE MODELOS PEDAGOGICOS", 6000),
                    (u"METODOLOGIAS ACTIVAS PARA EL APRENDIZAJE EN EL NIVEL INICIAL", 6000),
                    (u"APROBADA METODOLOGIAS ACTIVAS PARA EL APRENDIZAJE EN EL NIVEL INICIAL", 6000),
                    (u"TEORIA DISEÑO GESTION Y EVALUACION CURRICULAR PARA LA EDUCACION INICIAL SUBNIVEL 1", 6000),
                    (u"APROBADA TEORIA DISEÑO GESTION Y EVALUACION CURRICULAR PARA LA EDUCACION INICIAL SUBNIVEL 1", 6000),
                    (u"TEORIA DISEÑO GESTION Y EVALUACION CURRICULAR PARA LA EDUCACION INICIAL SUBNIVEL 2", 6000),
                    (u"APROBADA TEORIA DISEÑO GESTION Y EVALUACION CURRICULAR PARA LA EDUCACION INICIAL SUBNIVEL 2", 6000),
                    (u"DISEÑO Y DESARROLLO DE PROCESOS DE ENSEÑANZA PPERSONALIZADA EN LA EDUCACION INICIAL", 6000),
                    (u"APROBADA DISEÑO Y DESARROLLO DE PROCESOS DE ENSEÑANZA PPERSONALIZADA EN LA EDUCACION INICIAL", 6000),
                    (u"ORGANIZACION DE CENTROS INFANTILES COMUNIDADES DE APRENDIZAJE Y PARTICIPACION", 6000),
                    (u"APROBADA ORGANIZACION DE CENTROS INFANTILES COMUNIDADES DE APRENDIZAJE Y PARTICIPACION", 6000),
                    (u"EVALUACION Y SISTEMATIZACION DE LA PRACTICA EDUCATIVA", 6000),
                    (u"APROBADA EVALUACION Y SISTEMATIZACION DE LA PRACTICA EDUCATIVA", 6000),
                    # (u"PERDIDA DE GRATUIDAD", 6000),
                    (u"TOTAL DE SALDO PENDIENTE", 6000),
                    (u"TOTAL PAGADO", 6000),
                    (u"RUBROS DE ASIGNATURAS PPP Y VINC", 6000),
                    (u"ESTADO DE PAGO", 6000),
                    (u"OBSERVACIONES", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        cursor = connection.cursor()
        sql = f'''SELECT mat.id,
    pers.cedula, 
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres) AS ESTUDIANTE,
    nivmal.nombre AS nivel_matricula,
    nivmal2.nombre AS nivel_inscripcion,
    
	 --IDS DE LAS ASIGNATURAS
    MAX(CASE WHEN asigmal.id = 10831 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS CONTEXTOS_Y_SISTEMAS_EDUCATIVOS_PARA_LA_EDUCACION_INICIAL,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=491 AND asigmalla.id = 10831 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_CONTEXTOS_Y_SISTEMAS_EDUCATIVOS_PARA_LA_EDUCACION_INICIAL,
	  
	 
	 MAX(CASE WHEN asigmal.id = 10856 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS CONTEXTOS_DE_LOS_SUJETOS_EDUCATIVOS_Y_EL_APRENDIZAJE_HUMANO,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=491 AND asigmalla.id = 10856 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_CONTEXTOS_DE_LOS_SUJETOS_EDUCATIVOS_Y_EL_APRENDIZAJE_HUMANO,
	  
	MAX(CASE WHEN asigmal.id = 10880 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS DISEÑO_Y_DESARROLLO_DE_MODELOS_PEDAGOGICOS,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=491 AND asigmalla.id = 10880 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_DISEÑO_Y_DESARROLLO_DE_MODELOS_PEDAGOGICOS,
	  
	  MAX(CASE WHEN asigmal.id = 10894 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS METODOLOGIAS_ACTIVAS_PARA_EL_APRENDIZAJE_EN_EL_NIVEL_INICIAL,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=491 AND asigmalla.id = 10894 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_METODOLOGIAS_ACTIVAS_PARA_EL_APRENDIZAJE_EN_EL_NIVEL_INICIAL,
	  
	  MAX(CASE WHEN asigmal.id = 10899 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS TEORIA_DISEÑO_GESTION_Y_EVALUACION_CURRICULAR_PARA_LA_EDUCACION_INICIAL_SUBNIVEL_1,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=491 AND asigmalla.id = 10899 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_TEORIA_DISEÑO_GESTION_Y_EVALUACION_CURRICULAR_PARA_LA_EDUCACION_INICIAL_SUBNIVEL_1,
	  
	  MAX(CASE WHEN asigmal.id = 10907 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS TEORIA_DISEÑO_GESTION_Y_EVALUACION_CURRICULAR_PARA_LA_EDUCACION_INICIAL_SUBNIVEL_2,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=491 AND asigmalla.id = 10907 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_TEORIA_DISEÑO_GESTION_Y_EVALUACION_CURRICULAR_PARA_LA_EDUCACION_INICIAL_SUBNIVEL_2,
	  
	  MAX(CASE WHEN asigmal.id = 10910 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS DISEÑO_Y_DESARROLLO_DE_PROCESOS_DE_ENSEÑANZA_PERSONALIZADA_EN_LA_EDUCACION_INICIAL,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=491 AND asigmalla.id = 10910 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_DISEÑO_Y_DESARROLLO_DE_PROCESOS_DE_ENSEÑANZA_PERSONALIZADA_EN_LA_EDUCACION_INICIAL,
    
	 MAX(CASE WHEN asigmal.id = 10926 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS ORGANIZACION_DE_CENTROS_INFANTILES_COMUNIDADES_DE_APRENDIZAJE_Y_PARTICIPACION,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=491 AND asigmalla.id = 10926 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_ORGANIZACION_DE_CENTROS_INFANTILES_COMUNIDADES_DE_APRENDIZAJE_Y_PARTICIPACION,
    
	 MAX(CASE WHEN asigmal.id = 10928 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS EVALUACION_Y_SISTEMATIZACION_DE_LA_PRACTICA_EDUCATIVA,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=491 AND asigmalla.id = 10928 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS Aprobada_EVALUACION_Y_SISTEMATIZACION_DE_LA_PRACTICA_EDUCATIVA,
	  
	  
	  ----------------------DESDE AQUI PEGAR Y CAMBIAR EN LAS DEMÁS CARRERAS-----------------------------
	  
	  (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) AS total_saldo_PENDIENTE,
	 
	 
	 (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
	 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
	 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
	 WHERE sagrubr.matricula_id = mat.id
	 AND sagpago.status = TRUE
	 AND sagrubr.status = TRUE
	 AND rubro_tipo.subtiporubro = 1
    ) AS TOTAL_PAGADO,
	 
	 
	 (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10831,10856,10880,10894,10899,10907,10910,10926,10928) )
     AS TOTAL_PAGO_ASIGNATURAS_PPP_VINC,
     
     
     CASE 
       WHEN ((SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) = 0 AND (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) = 0) THEN 'NO TIENE SALDOS'   
	    
	    WHEN (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10831,10856,10880,10894,10899,10907,10910,10926,10928) )= 0 THEN 'NO DEBE PAGAR ASIGNATURAS PPP o VINC'
	    
	    WHEN (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) > 0 AND (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10831,10856,10880,10894,10899,10907,10910,10926,10928) ) > 0 THEN 'ASIGNATURAS PAGADAS'
        ELSE 'AUN NO PAGA ASIGNATURAS'
        
     END AS resultado
	 
/*	 (SELECT COUNT(*) 
     FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
     -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0
	  AND nivmalla.orden < 7
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 491
	  AND recacad.status=TRUE 
	  AND recacad.inscripcion_id=ins.id 
	  AND recacad.aprobada=TRUE 
	  and recacad.valida=TRUE 
	  AND recacad.validapromedio=True) AS Asignaturas_Aprobadas_Hasta_6to_Nivel,
	  
	 (SELECT COUNT(*) 
     FROM sga_asignaturamalla asigmalla
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
	  -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0 AND nivmalla.orden<7
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 491) AS Asignaturas_que_deben_estar_aprobadas_hasta_6to_nivel*/
FROM 
    sga_materiaasignada matasig 
INNER JOIN 
    sga_materia mate ON matasig.materia_id = mate.id
INNER JOIN 
    sga_asignaturamalla asigmal ON mate.asignaturamalla_id = asigmal.id
INNER JOIN 
    sga_asignatura asig ON asigmal.asignatura_id = asig.id
INNER JOIN 
    sga_matricula mat ON matasig.matricula_id = mat.id
INNER JOIN 
    sga_nivel niv ON mat.nivel_id = niv.id
INNER JOIN 
    sga_periodo per ON niv.periodo_id = per.id
INNER JOIN 
    sga_inscripcion ins ON mat.inscripcion_id = ins.id
INNER JOIN 
    sga_persona pers ON ins.persona_id = pers.id
INNER JOIN 
    sga_carrera carr ON ins.carrera_id = carr.id
INNER JOIN 
    sga_nivelmalla nivmal ON mat.nivelmalla_id = nivmal.id
INNER JOIN 
    sga_inscripcionnivel insniv ON insniv.inscripcion_id = ins.id
INNER JOIN 
    sga_nivelmalla nivmal2 ON insniv.nivel_id = nivmal2.id
WHERE 
	 -- IDS DE LAS ASIGNATURA MALLA -- ID DE LA CARRERA
    asigmal.id IN (10831,10856,10880,10894,10899,10907,10910,10926,10928) AND carr.id = 127 AND per.id = 317 and asigmal."status" = TRUE
GROUP BY 
    pers.cedula, 
    ins.id,
    mat.id,
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres),
    nivmal.nombre,
    nivmal2.nombre

HAVING (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10831,10856,10880,10894,10899,10907,10910,10926,10928) ) > 0    

ORDER BY
	 CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres)'''

        cursor.execute(sql)
        results = cursor.fetchall()
        nivel = 0
        ##SON 0 - 12 RESULTADOS
        for per in results:
            eMatricula = Matricula.objects.get(pk=per[0])
            ePeriodoMatricula = None
            if eMatricula.nivel.periodo.periodomatricula_set.values('id').filter(status=True).exists():
                ePeriodoMatricula = eMatricula.nivel.periodo.periodomatricula_set.filter(status=True)[0]
            if eMatricula.inscripcion.coordinacion_id in [1, 2, 3, 4, 5]:
                porcentaje_perdidad_parcial_gratuidad = PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD
                if ePeriodoMatricula and ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad > 0:
                    porcentaje_perdidad_parcial_gratuidad = ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad
                cursor2 = connection.cursor()
                itinerario = 0
                if not eMatricula.inscripcion.itinerario is None and eMatricula.inscripcion.itinerario > 0:
                    itinerario = eMatricula.inscripcion.itinerario
                sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
                if itinerario > 0:
                    sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id and (am.itinerario=0 or am.itinerario=" + str(
                        itinerario) + ") GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"

                cursor2.execute(sql)
                results = cursor2.fetchall()
                nivel = 0
                for dat in results:
                    nivel = dat[0]
                    cantidad_seleccionadas = dat[1]
                cantidad_nivel = 0
                materiasnivel = []
                eAsignaturaMallas = AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True,
                                                                   malla=eMatricula.inscripcion.mi_malla())
                if itinerario > 0:
                    eAsignaturaMallas = eAsignaturaMallas.filter(Q(itinerario=0) | Q(itinerario=itinerario))
                for eAsignaturaMalla in eAsignaturaMallas:
                    if Materia.objects.values('id').filter(nivel__periodo=eMatricula.nivel.periodo,
                                                           asignaturamalla=eAsignaturaMalla).exists():
                        if eMatricula.inscripcion.estado_asignatura(eAsignaturaMalla.asignatura) != 1:
                            cantidad_nivel += 1

                porcentaje_seleccionadas = int(round(
                    Decimal((float(cantidad_nivel) * float(porcentaje_perdidad_parcial_gratuidad)) / 100).quantize(
                        Decimal('.00')), 0))

                if per[25] > 0:
                    if eMatricula.inscripcion.estado_gratuidad == 1 or eMatricula.inscripcion.estado_gratuidad == 2:
                        if (cantidad_seleccionadas < porcentaje_seleccionadas):
                            mensaje = f"Estudiante irregular, se ha matriculado en menos del {porcentaje_perdidad_parcial_gratuidad}%, debe cancelar por todas las asignaturas."
                        else:
                            mensaje = u"Debe cancelar por las asignaturas que se matriculó por más de una vez."
                    else:
                        if eMatricula.inscripcion.estado_gratuidad == 2:
                            mensaje = u"Su estado es de pérdida parcial de la gratuidad. Debe cancelar por las asignaturas que se matriculó por más de una vez."

                    if eMatricula.inscripcion.persona.tiene_otro_titulo(inscripcion=eMatricula.inscripcion):
                        mensaje = u"El estudiante registra título en otra IES Pública o SENESCYT ha reportado. Su estado es de pérdida total de la gratuidad. Debe cancelar por todas las asignaturas."

                    hojadestino.write(fila, 0, per[1], fuentenormal)
                    hojadestino.write(fila, 1, per[2], fuentenormal)
                    hojadestino.write(fila, 2, per[3], fuentenormal)
                    hojadestino.write(fila, 3, per[4], fuentenormal)
                    hojadestino.write(fila, 4, per[5], fuentenormal)
                    hojadestino.write(fila, 5, per[6], fuentenormal)
                    hojadestino.write(fila, 6, per[7], fuentenormal)
                    hojadestino.write(fila, 7, per[8], fuentenormal)
                    hojadestino.write(fila, 8, per[9], fuentenormal)
                    hojadestino.write(fila, 9, per[10], fuentenormal)
                    hojadestino.write(fila, 10, per[11], fuentenormal)
                    hojadestino.write(fila, 11, per[12], fuentenormal)
                    hojadestino.write(fila, 12, per[13], fuentenormal)
                    hojadestino.write(fila, 13, per[14], fuentenormal)
                    hojadestino.write(fila, 14, per[15], fuentenormal)
                    hojadestino.write(fila, 15, per[16], fuentenormal)
                    hojadestino.write(fila, 16, per[17], fuentenormal)
                    hojadestino.write(fila, 17, per[18], fuentenormal)
                    hojadestino.write(fila, 18, per[19], fuentenormal)
                    hojadestino.write(fila, 19, per[20], fuentenormal)
                    hojadestino.write(fila, 20, per[21], fuentenormal)
                    hojadestino.write(fila, 21, per[22], fuentenormal)
                    hojadestino.write(fila, 22, per[23], fuentenormal)
                    hojadestino.write(fila, 23, per[24], fuentenormal)
                    hojadestino.write(fila, 24, per[25], fuentenormal)
                    hojadestino.write(fila, 25, per[26], fuentenormal)
                    hojadestino.write(fila, 26, mensaje, fuentenormal)
                    # hojadestino.write(fila, 17, mensaje, fuentenormal)
                    fila += 1
            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def generar_reporte_estudiantes_ppp_vin_Basica():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    import xlwt
    from django.db import transaction, connection
    try:
        cadena = ''
        linea, excluidos, conexito = 0, 0, 0
        libre_origen = '/reporte_estudiantes_ppp_vin_BASICA.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('BASICA')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                    (u"ESTUDIANTE", 6000),
                    (u"NIVEL MATRICULA", 6000),
                    (u"NIVEL INSCRIPCION", 6000),
                    (u"CONTEXTOS Y PROBLEMAS DE EDUCACION BASICA", 6000),
                    (u"APROBADA CONTEXTOS Y PROBLEMAS DE EDUCACION BASICA", 6000),
                    (u"CONTEXTOS DE LOS SUJETOS EDUCATIVOS Y APRENDIZAJE HUMANO CULTURA Y SUBJETIVIDAD", 6000),
                    (u"APROBADA CONTEXTOS DE LOS SUJETOS EDUCATIVOS Y APRENDIZAJE HUMANO CULTURA Y SUBJETIVIDAD", 6000),
                    (u"TEORIAS DEL APRENDIZAJE", 6000),
                    (u"APROBADA TEORIAS DEL APRENDIZAJE", 6000),
                    (u"MODELOS CURRICULARES CONTEXTUALIZADOS E INCLUSIVOS", 6000),
                    (u"APROBADA MODELOS CURRICULARES CONTEXTUALIZADOS E INCLUSIVOS", 6000),
                    (u"INTEGRACION DEL PROCESO EDUCATIVO CON AREAS ESPECIFICAS", 6000),
                    (u"APROBADA INTEGRACION DEL PROCESO EDUCATIVO CON AREAS ESPECIFICAS", 6000),
                    (u"REFLEXION SOBRE LA APLICACION DE PROCESOS DE EVALUACION EN LOS PROCESOS DE APRENDIZAJES", 6000),
                    (u"APROBADA REFLEXION SOBRE LA APLICACION DE PROCESOS DE EVALUACION EN LOS PROCESOS DE APRENDIZAJES", 6000),
                    (u"REFLEXION SOBRE LA APLICACION DE PROCESOS DIDACTICOS EN EL DESARROLLO INTEGRAL", 6000),
                    (u"APROBADA REFLEXION SOBRE LA APLICACION DE PROCESOS DIDACTICOS EN EL DESARROLLO INTEGRAL", 6000),
                    (u"RELACION INSTITUCION Y COMUNIDAD EFECTIVA", 6000),
                    (u"APROBADA RELACION INSTITUCION Y COMUNIDAD EFECTIVA", 6000),
                    (u"SISTEMATIZACION DE LA NARRATIVA DE TITULACION", 6000),
                    (u"APROBADA SISTEMATIZACION DE LA NARRATIVA DE TITULACION", 6000),
                    # (u"PERDIDA DE GRATUIDAD", 6000),
                    (u"TOTAL DE SALDO PENDIENTE", 6000),
                    (u"TOTAL PAGADO", 6000),
                    (u"RUBROS DE ASIGNATURAS PPP Y VINC", 6000),
                    (u"ESTADO DE PAGO", 6000),
                    (u"OBSERVACIONES", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        cursor = connection.cursor()
        sql = f'''SELECT mat.id,
    pers.cedula, 
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres) AS ESTUDIANTE,
    nivmal.nombre AS nivel_matricula,
    nivmal2.nombre AS nivel_inscripcion,
    
	 --IDS DE LAS ASIGNATURAS
    MAX(CASE WHEN asigmal.id = 10822 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS CONTEXTOS_Y_PROBLEMAS_DE_EDUCACIÓN_BÁSICA,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=490 AND asigmalla.id = 10822 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA CONTEXTOS_Y_PROBLEMAS_DE_EDUCACIÓN_BÁSICA",
	  
	 
	 MAX(CASE WHEN asigmal.id = 10834 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS CONTEXTOS_DE_LOS_SUJETOS_EDUCATIVOS_Y_APRENDIZAJE_HUMANO_CULTURA_Y_SUBJETIVIDAD,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=490 AND asigmalla.id = 10834 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA CONTEXTOS_DE_LOS_SUJETOS_EDUCATIVOS_Y_APRENDIZAJE_HUMANO_CULTURA_Y_SUBJETIVIDAD",
	  
	MAX(CASE WHEN asigmal.id = 10846 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS TEORÍAS_DEL_APRENDIZAJE,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=490 AND asigmalla.id = 10846 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA TEORÍAS_DEL_APRENDIZAJE",
	  
	  MAX(CASE WHEN asigmal.id = 10858 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS MODELOS_CURRICULARES_CONTEXTUALIZADOS_E_INCLUSIVOS,
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=490 AND asigmalla.id = 10858 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA MODELOS_CURRICULARES_CONTEXTUALIZADOS_E_INCLUSIVOS",
	  
	  MAX(CASE WHEN asigmal.id = 10870 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "INTEGRACIÓN DEL PROCESO EDUCATIVO CON ÁREAS ESPECÍFICAS",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=490 AND asigmalla.id = 10870 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA INTEGRACIÓN DEL PROCESO EDUCATIVO CON ÁREAS ESPECÍFICAS",
	  
	  MAX(CASE WHEN asigmal.id = 10888 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "REFLEXIÓN SOBRE APLICACIÓN DE PROCESOS DE EVALUACIÓN ENLOS PROCESOS DE APRENDIZAJE",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=490 AND asigmalla.id = 10888 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA REFLEXIÓN SOBRE APLICACIÓN DE PROCESOS DE EVALUACIÓN ENLOS PROCESOS DE APRENDIZAJE",
	  
	  MAX(CASE WHEN asigmal.id = 10913 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "REFLEXIÓN SOBRE LA APLICACIÓN DE PROCESOS DIDÁCTICOS EN EL DESARROLLO INTEGRAL",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=490 AND asigmalla.id = 10913 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA REFLEXIÓN SOBRE LA APLICACIÓN DE PROCESOS DIDÁCTICOS EN EL DESARROLLO INTEGRAL",
    
	 MAX(CASE WHEN asigmal.id = 10930 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "RELACIÓN INSTITUCIÓN Y COMUNIDAD EDUCATIVA",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=490 AND asigmalla.id = 10930 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA RELACIÓN INSTITUCIÓN Y COMUNIDAD EDUCATIVA",
    
	 MAX(CASE WHEN asigmal.id = 10944 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "SISTEMATIZACIÓN DE LA NARRATIVA DE TITULACIÓN",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=490 AND asigmalla.id = 10944 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA SISTEMATIZACIÓN DE LA NARRATIVA DE TITULACIÓN",
	  
	  
	  ----------------------DESDE AQUI PEGAR Y CAMBIAR EN LAS DEMÁS CARRERAS-----------------------------
	  
	  (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) AS total_saldo_PENDIENTE,
	 
	 
	 (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
	 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
	 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
	 WHERE sagrubr.matricula_id = mat.id
	 AND sagpago.status = TRUE
	 AND sagrubr.status = TRUE
	 AND rubro_tipo.subtiporubro = 1
    ) AS TOTAL_PAGADO,
	 
	 
	 (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10822,10834,10846,10858,10870,10888,10913,10930,10944) )
     AS TOTAL_PAGO_ASIGNATURAS_PPP_VINC,
     
     
     CASE 
       WHEN ((SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) = 0 AND (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) = 0) THEN 'NO TIENE SALDOS'   
	    
	    WHEN (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10822,10834,10846,10858,10870,10888,10913,10930,10944) )= 0 THEN 'NO DEBE PAGAR ASIGNATURAS PPP o VINC'
	    
	    WHEN (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) > 0 AND (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10822,10834,10846,10858,10870,10888,10913,10930,10944) ) > 0 THEN 'ASIGNATURAS PAGADAS'
        ELSE 'AUN NO PAGA ASIGNATURAS'
        
     END AS resultado
	 
/*	 (SELECT COUNT(*) 
     FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
     -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0
	  AND nivmalla.orden < 7
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 491
	  AND recacad.status=TRUE 
	  AND recacad.inscripcion_id=ins.id 
	  AND recacad.aprobada=TRUE 
	  and recacad.valida=TRUE 
	  AND recacad.validapromedio=True) AS Asignaturas_Aprobadas_Hasta_6to_Nivel,
	  
	 (SELECT COUNT(*) 
     FROM sga_asignaturamalla asigmalla
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
	  -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0 AND nivmalla.orden<7
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 491) AS Asignaturas_que_deben_estar_aprobadas_hasta_6to_nivel*/
FROM 
    sga_materiaasignada matasig 
INNER JOIN 
    sga_materia mate ON matasig.materia_id = mate.id
INNER JOIN 
    sga_asignaturamalla asigmal ON mate.asignaturamalla_id = asigmal.id
INNER JOIN 
    sga_asignatura asig ON asigmal.asignatura_id = asig.id
INNER JOIN 
    sga_matricula mat ON matasig.matricula_id = mat.id
INNER JOIN 
    sga_nivel niv ON mat.nivel_id = niv.id
INNER JOIN 
    sga_periodo per ON niv.periodo_id = per.id
INNER JOIN 
    sga_inscripcion ins ON mat.inscripcion_id = ins.id
INNER JOIN 
    sga_persona pers ON ins.persona_id = pers.id
INNER JOIN 
    sga_carrera carr ON ins.carrera_id = carr.id
INNER JOIN 
    sga_nivelmalla nivmal ON mat.nivelmalla_id = nivmal.id
INNER JOIN 
    sga_inscripcionnivel insniv ON insniv.inscripcion_id = ins.id
INNER JOIN 
    sga_nivelmalla nivmal2 ON insniv.nivel_id = nivmal2.id
WHERE 
	 -- IDS DE LAS ASIGNATURA MALLA -- ID DE LA CARRERA
    asigmal.id IN (10822,10834,10846,10858,10870,10888,10913,10930,10944) AND carr.id = 135 AND per.id = 317 and asigmal."status" = TRUE
GROUP BY 
    pers.cedula, 
    ins.id,
    mat.id,
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres),
    nivmal.nombre,
    nivmal2.nombre
    
HAVING (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (10822,10834,10846,10858,10870,10888,10913,10930,10944) ) > 0   

ORDER BY
	 CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres)'''

        cursor.execute(sql)
        results = cursor.fetchall()
        nivel = 0
        ##SON 0 - 12 RESULTADOS
        for per in results:
            eMatricula = Matricula.objects.get(pk=per[0])
            ePeriodoMatricula = None
            if eMatricula.nivel.periodo.periodomatricula_set.values('id').filter(status=True).exists():
                ePeriodoMatricula = eMatricula.nivel.periodo.periodomatricula_set.filter(status=True)[0]
            if eMatricula.inscripcion.coordinacion_id in [1, 2, 3, 4, 5]:
                porcentaje_perdidad_parcial_gratuidad = PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD
                if ePeriodoMatricula and ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad > 0:
                    porcentaje_perdidad_parcial_gratuidad = ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad
                cursor2 = connection.cursor()
                itinerario = 0
                if not eMatricula.inscripcion.itinerario is None and eMatricula.inscripcion.itinerario > 0:
                    itinerario = eMatricula.inscripcion.itinerario
                sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
                if itinerario > 0:
                    sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id and (am.itinerario=0 or am.itinerario=" + str(
                        itinerario) + ") GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"

                cursor2.execute(sql)
                results = cursor2.fetchall()
                nivel = 0
                for dat in results:
                    nivel = dat[0]
                    cantidad_seleccionadas = dat[1]
                cantidad_nivel = 0
                materiasnivel = []
                eAsignaturaMallas = AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True,
                                                                   malla=eMatricula.inscripcion.mi_malla())
                if itinerario > 0:
                    eAsignaturaMallas = eAsignaturaMallas.filter(Q(itinerario=0) | Q(itinerario=itinerario))
                for eAsignaturaMalla in eAsignaturaMallas:
                    if Materia.objects.values('id').filter(nivel__periodo=eMatricula.nivel.periodo,
                                                           asignaturamalla=eAsignaturaMalla).exists():
                        if eMatricula.inscripcion.estado_asignatura(eAsignaturaMalla.asignatura) != 1:
                            cantidad_nivel += 1

                porcentaje_seleccionadas = int(round(
                    Decimal((float(cantidad_nivel) * float(porcentaje_perdidad_parcial_gratuidad)) / 100).quantize(
                        Decimal('.00')), 0))

                if per[25] > 0:
                    if eMatricula.inscripcion.estado_gratuidad == 1 or eMatricula.inscripcion.estado_gratuidad == 2:
                        if (cantidad_seleccionadas < porcentaje_seleccionadas):
                            mensaje = f"Estudiante irregular, se ha matriculado en menos del {porcentaje_perdidad_parcial_gratuidad}%, debe cancelar por todas las asignaturas."
                        else:
                            mensaje = u"Debe cancelar por las asignaturas que se matriculó por más de una vez."
                    else:
                        if eMatricula.inscripcion.estado_gratuidad == 2:
                            mensaje = u"Su estado es de pérdida parcial de la gratuidad. Debe cancelar por las asignaturas que se matriculó por más de una vez."

                    if eMatricula.inscripcion.persona.tiene_otro_titulo(inscripcion=eMatricula.inscripcion):
                        mensaje = u"El estudiante registra título en otra IES Pública o SENESCYT ha reportado. Su estado es de pérdida total de la gratuidad. Debe cancelar por todas las asignaturas."

                    hojadestino.write(fila, 0, per[1], fuentenormal)
                    hojadestino.write(fila, 1, per[2], fuentenormal)
                    hojadestino.write(fila, 2, per[3], fuentenormal)
                    hojadestino.write(fila, 3, per[4], fuentenormal)
                    hojadestino.write(fila, 4, per[5], fuentenormal)
                    hojadestino.write(fila, 5, per[6], fuentenormal)
                    hojadestino.write(fila, 6, per[7], fuentenormal)
                    hojadestino.write(fila, 7, per[8], fuentenormal)
                    hojadestino.write(fila, 8, per[9], fuentenormal)
                    hojadestino.write(fila, 9, per[10], fuentenormal)
                    hojadestino.write(fila, 10, per[11], fuentenormal)
                    hojadestino.write(fila, 11, per[12], fuentenormal)
                    hojadestino.write(fila, 12, per[13], fuentenormal)
                    hojadestino.write(fila, 13, per[14], fuentenormal)
                    hojadestino.write(fila, 14, per[15], fuentenormal)
                    hojadestino.write(fila, 15, per[16], fuentenormal)
                    hojadestino.write(fila, 16, per[17], fuentenormal)
                    hojadestino.write(fila, 17, per[18], fuentenormal)
                    hojadestino.write(fila, 18, per[19], fuentenormal)
                    hojadestino.write(fila, 19, per[20], fuentenormal)
                    hojadestino.write(fila, 20, per[21], fuentenormal)
                    hojadestino.write(fila, 21, per[22], fuentenormal)
                    hojadestino.write(fila, 22, per[23], fuentenormal)
                    hojadestino.write(fila, 23, per[24], fuentenormal)
                    hojadestino.write(fila, 24, per[25], fuentenormal)
                    hojadestino.write(fila, 25, per[26], fuentenormal)
                    hojadestino.write(fila, 26, mensaje, fuentenormal)
                    # hojadestino.write(fila, 17, mensaje, fuentenormal)
                    fila += 1
            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def generar_reporte_estudiantes_ppp_vin_Idiomas():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    import xlwt
    from django.db import transaction, connection
    try:
        cadena = ''
        linea, excluidos, conexito = 0, 0, 0
        libre_origen = '/reporte_estudiantes_ppp_vin_IDIOMAS.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('IDIOMAS')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                    (u"ESTUDIANTE", 6000),
                    (u"NIVEL MATRICULA", 6000),
                    (u"NIVEL INSCRIPCION", 6000),
                    (u"CÁTEDRA INTEGRADORA SISTEMAS EDUCATIVOS Y POLÍTICAS EDUCATIVAS EN EL PROCESO DE ENSEÑANZA APRENDIZAJE DE INGLÉS COMO LENGUA EXTRANJERA", 6000),
                    (u"APROBADA CÁTEDRA INTEGRADORA SISTEMAS EDUCATIVOS Y POLÍTICAS EDUCATIVAS EN EL PROCESO DE ENSEÑANZA APRENDIZAJE DE INGLÉS COMO LENGUA EXTRANJERA", 6000),
                    (u"CÁTEDRA INTEGRADORA: LOS CONTEXTOS DE LOS SUJETOS EDUCATIVOS Y EL APRENDIZAJE HUMANO. EL TRATAMIENTO DEL INGLÉS EN LOS DIFERENTES CONTEXTOS EDUCATIVOS: EDUCACIÓN GENERAL BÁSICA Y BACHILLERATO", 6000),
                    (u"APROBADA CÁTEDRA INTEGRADORA: LOS CONTEXTOS DE LOS SUJETOS EDUCATIVOS Y EL APRENDIZAJE HUMANO. EL TRATAMIENTO DEL INGLÉS EN LOS DIFERENTES CONTEXTOS EDUCATIVOS: EDUCACIÓN GENERAL BÁSICA Y BACHILLERATO", 6000),
                    (u"CÁTEDRA INTEGRADORA: DESIGN AND DEVELOPMENT OF PEDAGOGICAL MODELS.", 6000),
                    (u"APROBADA CÁTEDRA INTEGRADORA: DESIGN AND DEVELOPMENT OF PEDAGOGICAL MODELS.", 6000),
                    (u"CÁTEDRA INTEGRADORA: DISEÑO, GESTIÓN Y EVALUACIÓN DE MODELOS CURRICULARES CONTEXTUALIZADOS, FLEXIBLES Y ADAPTADOS A LA ENSEÑANZA APRENDIZAJE DEL INGLÉS.", 6000),
                    (u"APROBADA CÁTEDRA INTEGRADORA: DISEÑO, GESTIÓN Y EVALUACIÓN DE MODELOS CURRICULARES CONTEXTUALIZADOS, FLEXIBLES Y ADAPTADOS A LA ENSEÑANZA APRENDIZAJE DEL INGLÉS.", 6000),
                    (u"CÁTEDRA INTEGRADORA: DISEÑO Y GESTIÓN DE AMBIENTES DE APRENDIZAJE EN EFL.", 6000),
                    (u"APROBADA CÁTEDRA INTEGRADORA: DISEÑO Y GESTIÓN DE AMBIENTES DE APRENDIZAJE EN EFL.", 6000),
                    (u"CÁTEDRA INTEGRADORA: DISEÑO Y DESARROLLO DE RECURSOS Y ESTRATEGIAS EDUCATIVAS EN EFL", 6000),
                    (u"APROBADA CÁTEDRA INTEGRADORA: DISEÑO Y DESARROLLO DE RECURSOS Y ESTRATEGIAS EDUCATIVAS EN EFL", 6000),
                    (u"CÁTEDRA INTEGRADORA: EXPERIENCIAS DE APRENDIZAJE: EL APRENDIZAJE PERSONALIZADO: MODELOS Y PRÁCTICAS PARA LA INCLUSIÓN Y LA DIVERSIDAD", 6000),
                    (u"APROBADA CÁTEDRA INTEGRADORA: EXPERIENCIAS DE APRENDIZAJE: EL APRENDIZAJE PERSONALIZADO: MODELOS Y PRÁCTICAS PARA LA INCLUSIÓN Y LA DIVERSIDAD", 6000),
                    (u"CATEDRA INTEGRADORA: ORGANIZACIÓN Y GESTIÓN ESCOLAR, COMUNIDADES DE APRENDIZAJE EN LA ENSEÑANZA Y APRENDIZAJE DE INGLÉS", 6000),
                    (u"APROBADA CATEDRA INTEGRADORA: ORGANIZACIÓN Y GESTIÓN ESCOLAR, COMUNIDADES DE APRENDIZAJE EN LA ENSEÑANZA Y APRENDIZAJE DE INGLÉS", 6000),
                    (u"CÁTEDRA INTEGRADORA: EVALUACIÓN Y SISTEMATIZACIÓN DE LA PRÁCTICA EDUCATIVA EN EL PROCESO DE ENSEÑANZA Y APRENDIZAJE DEL INGLÉS", 6000),
                    (u"APROBADA CÁTEDRA INTEGRADORA: EVALUACIÓN Y SISTEMATIZACIÓN DE LA PRÁCTICA EDUCATIVA EN EL PROCESO DE ENSEÑANZA Y APRENDIZAJE DEL INGLÉS", 6000),
                    # (u"PERDIDA DE GRATUIDAD", 6000),
                    (u"TOTAL DE SALDO PENDIENTE", 6000),
                    (u"TOTAL PAGADO", 6000),
                    (u"RUBROS DE ASIGNATURAS PPP Y VINC", 6000),
                    (u"ESTADO DE PAGO", 6000),
                    (u"OBSERVACIONES", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        cursor = connection.cursor()
        sql = f'''SELECT mat.id,
    pers.cedula, 
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres) AS ESTUDIANTE,
    nivmal.nombre AS nivel_matricula,
    nivmal2.nombre AS nivel_inscripcion,
    
	 --IDS DE LAS ASIGNATURAS
    MAX(CASE WHEN asigmal.id = 11018 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "CÁTEDRA INTEGRADORA SISTEMAS EDUCATIVOS Y POLÍTICAS EDUCATIVAS EN EL PROCESO DE ENSEÑANZA APRENDIZAJE DE INGLÉS COMO LENGUA EXTRANJERA",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=492 AND asigmalla.id = 11018 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA INTEGRADORA SISTEMAS EDUCATIVOS Y POLÍTICAS EDUCATIVAS EN EL PROCESO DE ENSEÑANZA APRENDIZAJE DE INGLÉS COMO LENGUA EXTRANJERA",
	  
	 
	 MAX(CASE WHEN asigmal.id = 11021 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "CÁTEDRA INTEGRADORA: LOS CONTEXTOS DE LOS SUJETOS EDUCATIVOS Y EL APRENDIZAJE HUMANO. EL TRATAMIENTO DEL INGLÉS EN LOS DIFERENTES CONTEXTOS EDUCATIVOS: EDUCACIÓN GENERAL BÁSICA Y BACHILLERATO",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=492 AND asigmalla.id = 11021 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA CÁTEDRA INTEGRADORA: LOS CONTEXTOS DE LOS SUJETOS EDUCATIVOS Y EL APRENDIZAJE HUMANO. EL TRATAMIENTO DEL INGLÉS EN LOS DIFERENTES CONTEXTOS EDUCATIVOS: EDUCACIÓN GENERAL BÁSICA Y BACHILLERATO",
	  
	MAX(CASE WHEN asigmal.id = 11020 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "CÁTEDRA INTEGRADORA: DESIGN AND DEVELOPMENT OF PEDAGOGICAL MODELS.",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=492 AND asigmalla.id = 11020 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA CÁTEDRA INTEGRADORA: DESIGN AND DEVELOPMENT OF PEDAGOGICAL MODELS.",
	  
	  MAX(CASE WHEN asigmal.id = 10990 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "CÁTEDRA INTEGRADORA: DISEÑO, GESTIÓN Y EVALUACIÓN DE MODELOS CURRICULARES CONTEXTUALIZADOS, FLEXIBLES Y ADAPTADOS A LA ENSEÑANZA APRENDIZAJE DEL INGLÉS.",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=492 AND asigmalla.id = 10990 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA CÁTEDRA INTEGRADORA: DISEÑO, GESTIÓN Y EVALUACIÓN DE MODELOS CURRICULARES CONTEXTUALIZADOS, FLEXIBLES Y ADAPTADOS A LA ENSEÑANZA APRENDIZAJE DEL INGLÉS.",
	  
	  MAX(CASE WHEN asigmal.id = 10991 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "CÁTEDRA INTEGRADORA: DISEÑO Y GESTIÓN DE AMBIENTES DE APRENDIZAJE EN EFL.",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=492 AND asigmalla.id = 10991 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA CÁTEDRA INTEGRADORA: DISEÑO Y GESTIÓN DE AMBIENTES DE APRENDIZAJE EN EFL.",
	  
	  MAX(CASE WHEN asigmal.id = 11005 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "CÁTEDRA INTEGRADORA: DISEÑO Y DESARROLLO DE RECURSOS Y ESTRATEGIAS EDUCATIVAS EN EFL",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=492 AND asigmalla.id = 11005 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA CÁTEDRA INTEGRADORA: DISEÑO Y DESARROLLO DE RECURSOS Y ESTRATEGIAS EDUCATIVAS EN EFL",
	  
	  MAX(CASE WHEN asigmal.id = 10993 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "CÁTEDRA INTEGRADORA: EXPERIENCIAS DE APRENDIZAJE: EL APRENDIZAJE PERSONALIZADO: MODELOS Y PRÁCTICAS PARA LA INCLUSIÓN Y LA DIVERSIDAD",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=492 AND asigmalla.id = 10993 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA CÁTEDRA INTEGRADORA: EXPERIENCIAS DE APRENDIZAJE: EL APRENDIZAJE PERSONALIZADO: MODELOS Y PRÁCTICAS PARA LA INCLUSIÓN Y LA DIVERSIDAD",
    
	 MAX(CASE WHEN asigmal.id = 10997 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "CATEDRA INTEGRADORA: ORGANIZACIÓN Y GESTIÓN ESCOLAR, COMUNIDADES DE APRENDIZAJE EN LA ENSEÑANZA Y APRENDIZAJE DE INGLÉS",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=492 AND asigmalla.id = 10997 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA CATEDRA INTEGRADORA: ORGANIZACIÓN Y GESTIÓN ESCOLAR, COMUNIDADES DE APRENDIZAJE EN LA ENSEÑANZA Y APRENDIZAJE DE INGLÉS",
    
	 MAX(CASE WHEN asigmal.id = 11007 AND matasig.retiramateria = False THEN 'SI' ELSE 'NO' END) AS "CÁTEDRA INTEGRADORA: EVALUACIÓN Y SISTEMATIZACIÓN DE LA PRÁCTICA EDUCATIVA EN EL PROCESO DE ENSEÑANZA Y APRENDIZAJE DEL INGLÉS",
    CASE WHEN (SELECT recacad.aprobada FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  WHERE malla.id=492 AND asigmalla.id = 11007 AND recacad.inscripcion_id=ins.id AND recacad.aprobada=TRUE) THEN 'APROBADA' ELSE 'NO APROBADA' END AS "APROBADA CÁTEDRA INTEGRADORA: EVALUACIÓN Y SISTEMATIZACIÓN DE LA PRÁCTICA EDUCATIVA EN EL PROCESO DE ENSEÑANZA Y APRENDIZAJE DEL INGLÉS",
	  
	  	 
----------------------DESDE AQUI PEGAR Y CAMBIAR EN LAS DEMÁS CARRERAS-----------------------------
	  
	  (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) AS total_saldo_PENDIENTE,
	 
	 
	 (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
	 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
	 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
	 WHERE sagrubr.matricula_id = mat.id
	 AND sagpago.status = TRUE
	 AND sagrubr.status = TRUE
	 AND rubro_tipo.subtiporubro = 1
    ) AS TOTAL_PAGADO,
	 
	 
	 (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (11018,11021,11020,10990,10991,11005,10993,10997,11007) )
     AS TOTAL_PAGO_ASIGNATURAS_PPP_VINC,
     
     
     CASE 
       WHEN ((SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) = 0 AND (SELECT COALESCE(SUM(sagrubro.saldo),0.0) FROM sagest_rubro sagrubro WHERE sagrubro.matricula_id = mat.id AND sagrubro.status = TRUE) = 0) THEN 'NO TIENE SALDOS'   
	    
	    WHEN (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (11018,11021,11020,10990,10991,11005,10993,10997,11007) )= 0 THEN 'NO DEBE PAGAR ASIGNATURAS PPP o VINC'
	    
	    WHEN (SELECT COALESCE(SUM(sagpago.valortotal), 0.0) FROM sagest_Pago sagpago
		 INNER JOIN sagest_rubro sagrubr ON sagpago.rubro_id = sagrubr.id
		 INNER JOIN sagest_TipoOtroRubro rubro_tipo ON sagrubr.tipo_id = rubro_tipo.id
		 WHERE sagrubr.matricula_id = mat.id
		 AND sagpago.status = TRUE
		 AND sagrubr.status = TRUE
		 AND rubro_tipo.subtiporubro = 1
	    ) > 0 AND (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
		 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
		 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (11018,11021,11020,10990,10991,11005,10993,10997,11007) ) > 0 THEN 'ASIGNATURAS PAGADAS'
        ELSE 'AUN NO PAGA ASIGNATURAS'
        
     END AS resultado
	 
/*	 (SELECT COUNT(*) 
     FROM sga_recordacademico recacad
     INNER JOIN sga_asignaturamalla asigmalla ON recacad.asignaturamalla_id= asigmalla.id
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
     -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0
	  AND nivmalla.orden < 7
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 491
	  AND recacad.status=TRUE 
	  AND recacad.inscripcion_id=ins.id 
	  AND recacad.aprobada=TRUE 
	  and recacad.valida=TRUE 
	  AND recacad.validapromedio=True) AS Asignaturas_Aprobadas_Hasta_6to_Nivel,
	  
	 (SELECT COUNT(*) 
     FROM sga_asignaturamalla asigmalla
	  INNER JOIN sga_malla malla ON asigmalla.malla_id=malla.id
	  INNER JOIN sga_nivelmalla nivmalla ON asigmalla.nivelmalla_id=nivmalla.id
	  -- NO DEBEN SER OPTATIVAS -- NO DEBEN SER DE ITINERARIO Y SON LAS ASIGNATURAS QUE DEBE TENER APROBADAS HASTA 6 NIVEL
	  WHERE NOT asigmalla.ejeformativo_id = 4 AND NOT asigmalla.itinerario > 0 AND nivmalla.orden<7
	  --ID DE LA MALLA DE LA CARRERA
	  AND malla.id = 491) AS Asignaturas_que_deben_estar_aprobadas_hasta_6to_nivel*/
FROM 
    sga_materiaasignada matasig 
INNER JOIN 
    sga_materia mate ON matasig.materia_id = mate.id
INNER JOIN 
    sga_asignaturamalla asigmal ON mate.asignaturamalla_id = asigmal.id
INNER JOIN 
    sga_asignatura asig ON asigmal.asignatura_id = asig.id
INNER JOIN 
    sga_matricula mat ON matasig.matricula_id = mat.id
INNER JOIN 
    sga_nivel niv ON mat.nivel_id = niv.id
INNER JOIN 
    sga_periodo per ON niv.periodo_id = per.id
INNER JOIN 
    sga_inscripcion ins ON mat.inscripcion_id = ins.id
INNER JOIN 
    sga_persona pers ON ins.persona_id = pers.id
INNER JOIN 
    sga_carrera carr ON ins.carrera_id = carr.id
INNER JOIN 
    sga_nivelmalla nivmal ON mat.nivelmalla_id = nivmal.id
INNER JOIN 
    sga_inscripcionnivel insniv ON insniv.inscripcion_id = ins.id
INNER JOIN 
    sga_nivelmalla nivmal2 ON insniv.nivel_id = nivmal2.id
WHERE 
	 -- IDS DE LAS ASIGNATURA MALLA -- ID DE LA CARRERA
    asigmal.id IN (11018,11021,11020,10990,10991,11005,10993,10997,11007) AND carr.id = 129 AND per.id = 317 and asigmal."status" = TRUE
GROUP BY 
    pers.cedula, 
    ins.id,
    mat.id,
    CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres),
    nivmal.nombre,
    nivmal2.nombre

HAVING (SELECT round(COALESCE(SUM(detrub.creditos * detrub.costo), 0.0),2) FROM matricula_detallerubromatricula detrub
	 INNER JOIN sga_materia mater ON detrub.materia_id = mater.id
	 WHERE detrub.matricula_id = mat.id AND mater.asignaturamalla_id IN (11018,11021,11020,10990,10991,11005,10993,10997,11007) ) > 0      

ORDER BY
	 CONCAT(pers.apellido1,' ', pers.apellido2,' ', pers.nombres)'''

        cursor.execute(sql)
        results = cursor.fetchall()
        nivel = 0
        ##SON 0 - 12 RESULTADOS
        for per in results:
            eMatricula = Matricula.objects.get(pk=per[0])
            ePeriodoMatricula = None
            if eMatricula.nivel.periodo.periodomatricula_set.values('id').filter(status=True).exists():
                ePeriodoMatricula = eMatricula.nivel.periodo.periodomatricula_set.filter(status=True)[0]
            if eMatricula.inscripcion.coordinacion_id in [1, 2, 3, 4, 5]:
                porcentaje_perdidad_parcial_gratuidad = PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD
                if ePeriodoMatricula and ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad > 0:
                    porcentaje_perdidad_parcial_gratuidad = ePeriodoMatricula.porcentaje_perdidad_parcial_gratuidad
                cursor2 = connection.cursor()
                itinerario = 0
                if not eMatricula.inscripcion.itinerario is None and eMatricula.inscripcion.itinerario > 0:
                    itinerario = eMatricula.inscripcion.itinerario
                sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
                if itinerario > 0:
                    sql = f"select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id={str(eMatricula.id)} and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id and (am.itinerario=0 or am.itinerario=" + str(
                        itinerario) + ") GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"

                cursor2.execute(sql)
                results = cursor2.fetchall()
                nivel = 0
                for dat in results:
                    nivel = dat[0]
                    cantidad_seleccionadas = dat[1]
                cantidad_nivel = 0
                materiasnivel = []
                eAsignaturaMallas = AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True,
                                                                   malla=eMatricula.inscripcion.mi_malla())
                if itinerario > 0:
                    eAsignaturaMallas = eAsignaturaMallas.filter(Q(itinerario=0) | Q(itinerario=itinerario))
                for eAsignaturaMalla in eAsignaturaMallas:
                    if Materia.objects.values('id').filter(nivel__periodo=eMatricula.nivel.periodo,
                                                           asignaturamalla=eAsignaturaMalla).exists():
                        if eMatricula.inscripcion.estado_asignatura(eAsignaturaMalla.asignatura) != 1:
                            cantidad_nivel += 1

                porcentaje_seleccionadas = int(round(
                    Decimal((float(cantidad_nivel) * float(porcentaje_perdidad_parcial_gratuidad)) / 100).quantize(
                        Decimal('.00')), 0))

                if per[25] > 0:
                    if eMatricula.inscripcion.estado_gratuidad == 1 or eMatricula.inscripcion.estado_gratuidad == 2:
                        if (cantidad_seleccionadas < porcentaje_seleccionadas):
                            mensaje = f"Estudiante irregular, se ha matriculado en menos del {porcentaje_perdidad_parcial_gratuidad}%, debe cancelar por todas las asignaturas."
                        else:
                            mensaje = u"Debe cancelar por las asignaturas que se matriculó por más de una vez."
                    else:
                        if eMatricula.inscripcion.estado_gratuidad == 2:
                            mensaje = u"Su estado es de pérdida parcial de la gratuidad. Debe cancelar por las asignaturas que se matriculó por más de una vez."

                    if eMatricula.inscripcion.persona.tiene_otro_titulo(inscripcion=eMatricula.inscripcion):
                        mensaje = u"El estudiante registra título en otra IES Pública o SENESCYT ha reportado. Su estado es de pérdida total de la gratuidad. Debe cancelar por todas las asignaturas."

                    hojadestino.write(fila, 0, per[1], fuentenormal)
                    hojadestino.write(fila, 1, per[2], fuentenormal)
                    hojadestino.write(fila, 2, per[3], fuentenormal)
                    hojadestino.write(fila, 3, per[4], fuentenormal)
                    hojadestino.write(fila, 4, per[5], fuentenormal)
                    hojadestino.write(fila, 5, per[6], fuentenormal)
                    hojadestino.write(fila, 6, per[7], fuentenormal)
                    hojadestino.write(fila, 7, per[8], fuentenormal)
                    hojadestino.write(fila, 8, per[9], fuentenormal)
                    hojadestino.write(fila, 9, per[10], fuentenormal)
                    hojadestino.write(fila, 10, per[11], fuentenormal)
                    hojadestino.write(fila, 11, per[12], fuentenormal)
                    hojadestino.write(fila, 12, per[13], fuentenormal)
                    hojadestino.write(fila, 13, per[14], fuentenormal)
                    hojadestino.write(fila, 14, per[15], fuentenormal)
                    hojadestino.write(fila, 15, per[16], fuentenormal)
                    hojadestino.write(fila, 16, per[17], fuentenormal)
                    hojadestino.write(fila, 17, per[18], fuentenormal)
                    hojadestino.write(fila, 18, per[19], fuentenormal)
                    hojadestino.write(fila, 19, per[20], fuentenormal)
                    hojadestino.write(fila, 20, per[21], fuentenormal)
                    hojadestino.write(fila, 21, per[22], fuentenormal)
                    hojadestino.write(fila, 22, per[23], fuentenormal)
                    hojadestino.write(fila, 23, per[24], fuentenormal)
                    hojadestino.write(fila, 24, per[25], fuentenormal)
                    hojadestino.write(fila, 25, per[26], fuentenormal)
                    hojadestino.write(fila, 26, mensaje, fuentenormal)
                    # hojadestino.write(fila, 17, mensaje, fuentenormal)
                    fila += 1
            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



#-----------------------------------------------------------------------PROCESO DE DESMATRICULACION-----------------------------------------------------
def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass


def desmatricular_TICS_PPP_vinc():
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_vinc = ['0705770535', '0951793884','1314069491',
    '0953920873',
    '0941253320',
    '0954621140',
    '0940472533',
    '0958274722',
    '0928140250',
    '0955482245',
    '0956288146',
    '0956281810',
    '0707061693',
    '1721249470',
    '0954797544',
    '0706521341',
    '0950023325',
    '0923657175',
    '0102798501',
    '0930667852',
    '1723994644',
    '0930505185',
    '0928356203',
    '0705264620',
    '2100764659',
    '0953449212',
    '0750622730',
    '1207506815',
    '0925569758',
    '0957268881',
    '0941491649',
    '0950542951',
    '0923541973',
    '0952218212',
    '1105688830',
    '0950517979',
    '1726746561',
    '1721133690',
    '1715074843',
    '0921185989',
    '0920953940',
    '0957210784',
    '0944199884',
    '0930240551',
    '0924799596',
    '0926120635',
    '2200570295',
    '0921576625',
    '1208514990',
    '0704964725',
    '1751375575',
    '0957554009',
    '0959152430',
    '0926142704',
    '1105707952',
    '0919861633',
    '0922097589',
    '1401065717',
    '1718563693',
    '0930506217',
    '0803821594',
    '2400210387',
    '0951754522',
    '0704667062',
    '0925557225',
    '0957253297',
    '0703690610',
    '0927906008',
    '0940269392',
    '0916292766',
    '0750686511',
    '1104729627']
        cedulas_ppp_I = ['1718746769', '0706026309',
'1206899252',
'0201893534',
'0954308078',
'0958274722',
'2450338187',
'0931258834',
'0930604780',
'1207069947',
'0923618540',
'0923444921',
'0926316639',
'0951144146',
'0102798501',
'2300506066',
'1723994644',
'0959175282',
'1713895892',
'0955461009',
'0957388184',
'0957300759',
'0750590028',
'0202085189',
'1207506815',
'0952502441',
'0918326471',
'0950447185',
'0924472152',
'0202545356',
'0952218212',
'0705165835',
'1105402927',
'1104663578',
'2450826488',
'1712904471',
'1309134623',
'0951888627',
'0932522329',
'0924455314',
'1105901548',
'0930294970',
'0924802028',
'0706024130',
'0705315414',
'0926120635',
'0931303234',
'0956908883',
'0926614348',
'0704964725',
'0706416260',
'0942912155',
'0922097589',
'0106617772',
'0703115675',
'0920132370',
'1717496846',
'0706693892',
'0921172854',
'0930981816',
'0917203580',
'0400900098',
'0927702027',
'0104238225',
'0923720890',
'0929739365',
'0956129191',
'0103737334',
'0950608323',
'0953195344',
'2200602346',
'0704716174',
'1250132113',
'0955519855',
'0957991383',
'0705667517',
'0927638171',
'1714829502',
'0957354483']
        carrera = 133
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_VINC = []
        cedulasconrubros_PPP = []
        ids_asignaturamalla = [10587, 10618]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                if asigmal_id == 10587:
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_vinc in cedulas_vinc:
                    # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_vinc)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                      materia__nivel__status=True,
                                                                                      materia__asignaturamalla_id = asigmal_id,
                                                                                      matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_VINC.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                                        # ------------------ACTUALIZAR MOODLE DEL ESTUDIANTE PARA ELIMINARLO--------------------#
                                        # ematricula = Matricula.objects.get(pk=matricula.pk, status=True)
                                        # emateria = Materia.objects.get(pk=materia.pk, status=True)
                                        # if materia.coordinacion().id == 9:
                                        #     tipourl = 2
                                        # else:
                                        #     tipourl = 1
                                        # materia.quitar_un_estudiante_curso(moodle, tipourl, matricula)
                                        # DesEnrolarMoodle(materia)

                elif asigmal_id == 10618:
                    cont = 0
                    #------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_ppp_I in cedulas_ppp_I:
                    # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_ppp_I)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula,materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_PPP.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                                        # ------------------ACTUALIZAR MOODLE DEL ESTUDIANTE PARA ELIMINARLO--------------------#
                                        # ematricula = Matricula.objects.get(pk=matricula.pk, status=True)
                                        # emateria = Materia.objects.get(pk=materia.pk, status=True)
                                        # if materia.coordinacion().id == 9:
                                        #     tipourl = 2
                                        # else:
                                        #     tipourl = 1
                                        # materia.quitar_un_estudiante_curso(moodle, tipourl, matricula)
                                        # DesEnrolarMoodle(materia)
            print(cedulasconrubros_VINC)
            print(cedulasconrubros_PPP)
            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    DesEnrolarMoodle(materia)

            print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()




def casos_rubros_TICS():
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    try:
        cedulas_vinc = ['1723994644',
                        '1207506815',
                        '0940269392',
                        '0916292766']
        cedulas_ppp_I = ['1723994644',
                        '0750590028',
                        '1207506815',
                        '0927702027',
                        '0929739365']
        ids_asignaturamalla = [10587, 10618]
        carrera = 133
        periodo = 317
        cont = 0
        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                if asigmal_id == 10587:
                    cont = 0
                    for cedula_vinc in cedulas_vinc:
                        # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_vinc)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=False, materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        if DEBUG: print(str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            matricula.inscripcion.carrera) + ' - ' + str(materiaasignada.materia))
                                        materiaasignada.status = True
                                        materiaasignada.retiramateria = True
                                        materiaasignada.save()

                elif asigmal_id == 10618:
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_ppp_I in cedulas_ppp_I:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_ppp_I)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=False, materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        if DEBUG: print(str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            matricula.inscripcion.carrera) + ' - ' + str(materiaasignada.materia))
                                        materiaasignada.status = True
                                        materiaasignada.retiramateria = True
                                        materiaasignada.save()

    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



def desmatricular_DERECHO_PPP_vinc():
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_vinc = ['0919088575',
'1207769694',
'1351401441',
'0941341125',
'0201754561',
'0951960129',
'1003886650',
'0301651790',
'0918657487',
'0926774928',
'0919601344',
'0605841022',
'0930435482',
'0926146796',
'1311771693',
'0929852317',
'1250694013',
'0201280518',
'0706060209',
'2300335904',
'0940085913',
'0605912997',
'1722896618',
'0941524779',
'0923214134',
'0928926849',
'0706827839',
'0955542360',
'0906337738',
'0107296519',
'0750126955',
'1105715591',
'0950314880',
'0924771579',
'0941574055',
'0940872781',
'0920857901',
'0924841083',
'0928421304',
'0920585353',
'0919562157',
'1207056654',
'2101121487',
'0705625291',
'0302381280',
'1714958236',
'1725168601',
'1725736001',
'0705976215',
'1722783691',
'0604972356',
'0931009997',
'1003148952',
'0502854375',
'0952974772',
'0928395276',
'0920352648',
'1150031357',
'0923175996',
'1205670910',
'0940322415',
'1313408252',
'0917645517',
'0926320052',
'0750110843',
'0918543703',
'1309613295',
'1900485523',
'0202124798',
'0927068288',
'0941597460',
'0950395087',
'1309774139',
'0302796446',
'0940538309',
'1725600215',
'1003846704',
'1723584643',
'0922985999',
'0920161460',
'1724458268',
'1105010225',
'0929682193',
'0201756954',
'0927622761',
'0201136025',
'1206333898',
'0940321656',
'1002842811',
'0941277014',
'1311094765']
        cedulas_ppp_I = ['0705309060',
'0917613978',
'2300651706',
'0952005635',
'0951465624',
'0951960129',
'1803771573',
'0926094517',
'0803238559',
'0924434301',
'1206374983',
'0942376963',
'0913888673',
'0955638978',
'0925978173',
'0605841022',
'0705710242',
'0956707442',
'1207974302',
'0951285899',
'1104914294',
'2350868358',
'1202167761',
'0923483598',
'0930981733',
'1003793559',
'0923931406',
'1311567851',
'2100633110',
'1900753730',
'0915489538',
'0941025108',
'0704883248',
'0202156816',
'1311868622',
'0924573991',
'0924569197',
'1003477153',
'0919613893',
'0401692736',
'0942446915',
'1105711624',
'0926611658',
'0953825122',
'0750590093',
'1721932414',
'1720940780',
'2300442056',
'0940363252',
'0923859367',
'1723299879',
'0918583626',
'0955706338',
'0921367751',
'0929370344',
'1719034835',
'0953685377',
'1251074272',
'0926559121',
'1308611407',
'0923214134',
'0706300266',
'0803235548',
'2300121965',
'0930579123',
'1850622232',
'1207137058',
'0930933577',
'0703311167',
'0922609532',
'0927843045',
'1103560023',
'0750126955',
'1726006248',
'0929035780',
'1713988291',
'1207734052',
'0921323846',
'0954524658',
'0941393845',
'0202081618',
'0923175285',
'1005020597',
'0932009699',
'0954836540',
'0605496389',
'0958686289',
'1720568037',
'0951111178',
'0940811623',
'1804813432',
'1726970849',
'1727479766',
'1206667832',
'0950809715',
'1803618238',
'1206722660',
'0950941757',
'0928429893',
'0604972356',
'0940572225',
'0931009997',
'1716801798',
'0503410839',
'0502854375',
'0918669268',
'0952974772',
'1717111478',
'1150031357',
'1717573396',
'0925750200',
'0917373292',
'2100805205',
'0925436206',
'0915291785',
'0503450264',
'0750207680',
'0944151364',
'0926475583',
'0919877647',
'0706990140',
'1717435745',
'1104394828',
'0920113602',
'1719689919',
'1206798504',
'0941081028',
'0940538309',
'1002688727',
'0503558280',
'0302525027',
'0940607823',
'0953868262',
'1205700030',
'0924300296',
'0202135406',
'0941993032',
'0940637309',
'0929216299',
'0942057928',
'0931309215',
'0803445758',
'1718889874',
'0926762006',
'0955800263',
'0202214805',
'0925929697',
'1314040500',
'0909296220',
'0941277014',
'0923352488']
        cedulas_ppp_II = ['0705309060',
'0914740451',
'0150702199',
'2300651706',
'0952005635',
'0951465624',
'0951960129',
'1803771573',
'0926094517',
'0955385489',
'0924434301',
'0957554280',
'0942376963',
'0913888673',
'0955638978',
'0925978173',
'0605841022',
'0705710242',
'0956707442',
'1207974302',
'0951285899',
'1104914294',
'2350868358',
'1202167761',
'0923483598',
'0930981733',
'0302309703',
'1003793559',
'0923931406',
'1751322296',
'1311567851',
'2100633110',
'0941025108',
'0704883248',
'0202156816',
'1311868622',
'0924573991',
'1003477153',
'0919613893',
'1716410467',
'1805274063',
'0401692736',
'0942446915',
'1717868937',
'1207101575',
'1105711624',
'0953825122',
'0750590093',
'0957857857',
'1720940780',
'2300442056',
'0940363252',
'0923859367',
'1004447841',
'1723299879',
'0918583626',
'0921367751',
'0929370344',
'0703992206',
'1251074272',
'0926559121',
'1308611407',
'0923214134',
'0706300266',
'0803235548',
'2300121965',
'1716612328',
'1850622232',
'0930933577',
'0915084156',
'0922609532',
'0927843045',
'1103560023',
'0750126955',
'1726006248',
'0929035780',
'1713988291',
'0941890253',
'1207734052',
'0921323846',
'0502881220',
'0954524658',
'0941393845',
'0956845309',
'0928369461',
'1205859901',
'0932009699',
'0927921577',
'0954836540',
'1003976766',
'0605496389',
'0958686289',
'1720568037',
'1714128863',
'0951111178',
'0940811623',
'1804813432',
'1726970849',
'0942248436',
'1727479766',
'0917501561',
'0950809715',
'1803618238',
'1206722660',
'0927150383',
'0950941757',
'0928429893',
'0604972356',
'0940572225',
'0957057458',
'1716801798',
'0941342289',
'0503410839',
'0918669268',
'0952974772',
'0956743157',
'1717111478',
'1150031357',
'1717573396',
'0925750200',
'0917373292',
'2100805205',
'0604878264',
'0915291785',
'0503450264',
'1207115716',
'0750207680',
'0944151364',
'0926475583',
'1726903816',
'0106503527',
'0919877647',
'0915898225',
'0928892223',
'0706990140',
'0920581717',
'0750312266',
'1717435745',
'0950619759',
'1104394828',
'0920113602',
'1205131350',
'1719689919',
'1803607058',
'1206798504',
'0941081028',
'0940538309',
'1752296853',
'1002688727',
'0105517585',
'0503558280',
'0913971388',
'0302525027',
'0940607823',
'0921461869',
'1314280973',
'1726043449',
'1206303982',
'0953868262',
'1205700030',
'0924300296',
'0202135406',
'0941993032',
'0940637309',
'0942057928',
'0931309215',
'0803445758',
'1718889874',
'0926762006',
'0955800263',
'0202214805',
'0913807640',
'0925929697',
'1314040500',
'0923335798',
'1717478208',
'0909296220',
'0941277014',
'0923352488',
'0750480675']
        carrera = 126
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_VINC = []
        cedulasconrubros_PPP = []
        cedulasconrubros_PPP_II = []
        ids_asignaturamalla = [10615,10623,10627]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10615:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_vinc in cedulas_vinc:
                    # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_vinc)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                      materia__nivel__status=True,
                                                                                      materia__asignaturamalla_id = asigmal_id,
                                                                                      matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_VINC.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10623:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    #------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_ppp_I in cedulas_ppp_I:
                    # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_ppp_I)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula,materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_PPP.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10627:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_ppp_II in cedulas_ppp_II:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_ppp_II)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_PPP_II.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(
                                                    matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(
                                                    matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

            if DEBUG: print(cedulasconrubros_VINC)
            if DEBUG: print(cedulasconrubros_PPP)
            if DEBUG: print(cedulasconrubros_PPP_II)
            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    DesEnrolarMoodle(materia)

            print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



##-----------------------------------------------------------------------------ECONOMIA------------------------------------------------------------------
def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_ECONOMIA_PPP_vinc():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        #-----ASIGNATURAS DE VINCULACION
        cedulas_econ_politica = ['0932204548','0944059641']
        cedulas_politica_econ = ['0705743284',
'0931386791',
'0940735137',
'1719176008',
'0954500583',
'0302597356',
'1106053844',
'0958370488',
'1313653220',
'0927471094',
'0930205265',
'0605049402',
'0942753989',
'0705180149',
'0705513109']
        # -----ASIGNATURAS DE PRACTICAS PP
        cedulas_monetaria_financiera = ['1500911647',
'1203753189',
'0929805182',
'0922266978',
'0928025378',
'0705964062',
'0932558737',
'1720119096',
'0931482210',
'0927543595',
'0921622007',
'0707020665',
'0944335223',
'1207336114',
'0957118227',
'0603640566',
'0926342304',
'0931747034',
'0105342372',
'1250690748',
'0942203985',
'0957186638',
'1725739625',
'0706265170',
'0950423947',
'0950764225',
'0707010880',
'0302759709',
'0941158305',
'1712213808',
'0944297753',
'0926194515',
'1726503624',
'0606189900',
'1206671651',
'0921654927',
'0927676916',
'0105941066',
'0956709331',
'0931071658',
'1314672575',
'0804576072',
'0705270221',
'2101152177',
'0944151802',
'0930351788',
'2350708273',
'2100416169',
'2450205618',
'2350428120',
'2150272520',
'1723580351',
'0957182116',
'1207114479',
'0931202683',
'0926801838',
'0957824212',
'0942838764',
'1725477911',
'0925046047',
'0930320379',
'0929087286',
'0944160720',
'0940388861',
'0941540536',
'1205326927',
'0951206119',
'0706988615',
'1250547948',
'0917953721',
'0302470034',
'1753779147',
'1311325706',
'0954187993',
'0940418882',
'0953300159',
'0954864849',
'0929110021',
'0931027858',
'1204814063',
'0941515439',
'0931036958',
'0931741219',
'0750538712',
'1207496454',
'0705043800',
'1313137562',
'0928426378',
'0705547842',
'0924656713',
'1203536436',
'0952103547',
'1206477802',
'0703650713',
'0917430209',
'1207009703',
'0202303343',
'1207211473',
'0928159342',
'1206172031',
'0106326648',
'0952307064',
'0955318027',
'0927526541',
'0706971066',
'0928796507',
'0706466968',
'0941137655',
'1207125061',
'0958447872',
'0705898468',
'0706510831',
'2450563644',
'0928987536',
'1317829818',
'0942132440',
'1753519709']
        cedulas_social_solidaria = ['1205130410',
'0954289583',
'1720885456',
'0921804076',
'1207336114',
'1718067406',
'0956142616',
'0301844858',
'0954511457',
'0921720868',
'0705928430',
'1207138197',
'0929130763',
'1250216171',
'0944081686',
'0928916014',
'0941243735',
'0704775857',
'0958625782',
'0952316099',
'0606189900',
'0750351504',
'1714567706',
'1721086369',
'1750244814',
'1314672575',
'1500674260',
'0958498115',
'2350708273',
'1205828997',
'0927205971',
'0929459675',
'0927768721',
'1314983808',
'1207114479',
'0942676743',
'0924869472',
'0707352092',
'2450009929',
'0928446574',
'0951548551',
'0956919815',
'0103864096',
'0923094916',
'0930177175',
'0923227235',
'0750936064',
'0924456841',
'1250201777',
'0930398870',
'0912603073',
'1313137562',
'2450410135',
'0926293721',
'1713314159',
'0940447451',
'0928086362',
'0950761197',
'0922878194',
'0928159342',
'0958749863',
'1206172031',
'0922767611',
'0950535161',
'0706971066',
'1207125061',
'0955002852',
'0941389017',
'0803106525',
'0956274427',
'0922943055',
'2450563644',
'0952032761']
        carrera = 128
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_econ_politica = []
        cedulasconrubros_politica_econ= []
        cedulasconrubros_monetaria_financiera = []
        cedulasconrubros_social_solidaria = []
        ids_asignaturamalla = [10733,10742,10770,10774]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10733:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_econ_politica in cedulas_econ_politica:
                    # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_econ_politica)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                      materia__nivel__status=True,
                                                                                      materia__asignaturamalla_id = asigmal_id,
                                                                                      matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_econ_politica.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10742:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    #------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_politica_econ in cedulas_politica_econ:
                    # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_politica_econ)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula,materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_politica_econ.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10770:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_monetaria_financiera in cedulas_monetaria_financiera:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_monetaria_financiera)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_monetaria_financiera.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10774:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_social_solidaria in cedulas_social_solidaria:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_social_solidaria)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_social_solidaria.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

            # if DEBUG: print(cedulasconrubros_econ_politica)
            # if DEBUG: print(cedulasconrubros_politica_econ)
            # if DEBUG: print(cedulasconrubros_monetaria_financiera)
            # if DEBUG: print(cedulasconrubros_social_solidaria)
            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)

            # if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
# funcionlocal.get("desmatricular_ECONOMIA_PPP_vinc")()


##-----------------------------------------------------------------------------TURISMO------------------------------------------------------------------
def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_TURISMO_PPP_vinc():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        #-----ASIGNATURAS DE VINCULACION
        cedulas_tur_sostenible = []
        cedulas_plan_turistica = ['1206844266']
        # -----ASIGNATURAS DE PRACTICAS PP
        cedulas_patrimonio = ['0940588452',
'0940223241',
'0930326640',
'0927066480',
'0923147011',
'1751049162',
'0942134842',
'0955739552',
'1712361086']
        cedulas_region_turistica = ['0950571984']
        cedulas_destinos_turisticos = []
        carrera = 134
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_tur_sostenible = []
        cedulasconrubros_plan_turistica= []
        cedulasconrubros_patrimonio = []
        cedulasconrubros_region_turistica = []
        cedulasconrubros_destinos_turisticos = []
        ids_asignaturamalla = [10929, 10947, 10953, 10959, 10964]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10929:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_tur_sostenible in cedulas_tur_sostenible:
                    # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_tur_sostenible)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                      materia__nivel__status=True,
                                                                                      materia__asignaturamalla_id = asigmal_id,
                                                                                      matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_tur_sostenible.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10947:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    #------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_plan_turistica in cedulas_plan_turistica:
                    # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_plan_turistica)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula,materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_plan_turistica.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10953:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_patrimonio in cedulas_patrimonio:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_patrimonio)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_patrimonio.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10959:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_region_turistica in cedulas_region_turistica:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_region_turistica)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_region_turistica.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10964:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_destinos_turisticos in cedulas_destinos_turisticos:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_destinos_turisticos)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_destinos_turisticos.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

            # if DEBUG: print(cedulasconrubros_tur_sostenible)
            # if DEBUG: print(cedulasconrubros_plan_turistica)
            # if DEBUG: print(cedulasconrubros_patrimonio)
            # if DEBUG: print(cedulasconrubros_region_turistica)
            # if DEBUG: print(cedulasconrubros_destinos_turisticos)
            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)

            if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
# funcionlocal.get("desmatricular_TURISMO_PPP_vinc")()




#SUBIR ASI
def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_DERECHO_PPP_vinc():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_vinc = ['0919088575',
'1207769694',
'1351401441',
'0941341125',
'0201754561',
'0951960129',
'1003886650',
'0301651790',
'0918657487',
'0926774928',
'0919601344',
'0605841022',
'0930435482',
'0926146796',
'1311771693',
'0929852317',
'1250694013',
'0201280518',
'0706060209',
'2300335904',
'0940085913',
'0605912997',
'1722896618',
'0941524779',
'0923214134',
'0928926849',
'0706827839',
'0955542360',
'0906337738',
'0107296519',
'0750126955',
'1105715591',
'0950314880',
'0924771579',
'0941574055',
'0940872781',
'0920857901',
'0924841083',
'0928421304',
'0920585353',
'0919562157',
'1207056654',
'2101121487',
'0705625291',
'0302381280',
'1714958236',
'1725168601',
'1725736001',
'0705976215',
'1722783691',
'0604972356',
'0931009997',
'1003148952',
'0502854375',
'0952974772',
'0928395276',
'0920352648',
'1150031357',
'0923175996',
'1205670910',
'0940322415',
'1313408252',
'0917645517',
'0926320052',
'0750110843',
'0918543703',
'1309613295',
'1900485523',
'0202124798',
'0927068288',
'0941597460',
'0950395087',
'1309774139',
'0302796446',
'0940538309',
'1725600215',
'1003846704',
'1723584643',
'0922985999',
'0920161460',
'1724458268',
'1105010225',
'0929682193',
'0201756954',
'0927622761',
'0201136025',
'1206333898',
'0940321656',
'1002842811',
'0941277014',
'1311094765']
        cedulas_ppp_I = ['0705309060',
'0917613978',
'2300651706',
'0952005635',
'0951465624',
'0951960129',
'1803771573',
'0926094517',
'0803238559',
'0924434301',
'1206374983',
'0942376963',
'0913888673',
'0955638978',
'0925978173',
'0605841022',
'0705710242',
'0956707442',
'1207974302',
'0951285899',
'1104914294',
'2350868358',
'1202167761',
'0923483598',
'0930981733',
'1003793559',
'0923931406',
'1311567851',
'2100633110',
'1900753730',
'0915489538',
'0941025108',
'0704883248',
'0202156816',
'1311868622',
'0924573991',
'0924569197',
'1003477153',
'0919613893',
'0401692736',
'0942446915',
'1105711624',
'0926611658',
'0953825122',
'0750590093',
'1721932414',
'1720940780',
'2300442056',
'0940363252',
'0923859367',
'1723299879',
'0918583626',
'0955706338',
'0921367751',
'0929370344',
'1719034835',
'0953685377',
'1251074272',
'0926559121',
'1308611407',
'0923214134',
'0706300266',
'0803235548',
'2300121965',
'0930579123',
'1850622232',
'1207137058',
'0930933577',
'0703311167',
'0922609532',
'0927843045',
'1103560023',
'0750126955',
'1726006248',
'0929035780',
'1713988291',
'1207734052',
'0921323846',
'0954524658',
'0941393845',
'0202081618',
'0923175285',
'1005020597',
'0932009699',
'0954836540',
'0605496389',
'0958686289',
'1720568037',
'0951111178',
'0940811623',
'1804813432',
'1726970849',
'1727479766',
'1206667832',
'0950809715',
'1803618238',
'1206722660',
'0950941757',
'0928429893',
'0604972356',
'0940572225',
'0931009997',
'1716801798',
'0503410839',
'0502854375',
'0918669268',
'0952974772',
'1717111478',
'1150031357',
'1717573396',
'0925750200',
'0917373292',
'2100805205',
'0925436206',
'0915291785',
'0503450264',
'0750207680',
'0944151364',
'0926475583',
'0919877647',
'0706990140',
'1717435745',
'1104394828',
'0920113602',
'1719689919',
'1206798504',
'0941081028',
'0940538309',
'1002688727',
'0503558280',
'0302525027',
'0940607823',
'0953868262',
'1205700030',
'0924300296',
'0202135406',
'0941993032',
'0940637309',
'0929216299',
'0942057928',
'0931309215',
'0803445758',
'1718889874',
'0926762006',
'0955800263',
'0202214805',
'0925929697',
'1314040500',
'0909296220',
'0941277014',
'0923352488']
        cedulas_ppp_II = ['0705309060',
'0914740451',
'0150702199',
'2300651706',
'0952005635',
'0951465624',
'0951960129',
'1803771573',
'0926094517',
'0955385489',
'0924434301',
'0957554280',
'0942376963',
'0913888673',
'0955638978',
'0925978173',
'0605841022',
'0705710242',
'0956707442',
'1207974302',
'0951285899',
'1104914294',
'2350868358',
'1202167761',
'0923483598',
'0930981733',
'0302309703',
'1003793559',
'0923931406',
'1751322296',
'1311567851',
'2100633110',
'0941025108',
'0704883248',
'0202156816',
'1311868622',
'0924573991',
'1003477153',
'0919613893',
'1716410467',
'1805274063',
'0401692736',
'0942446915',
'1717868937',
'1207101575',
'1105711624',
'0953825122',
'0750590093',
'0957857857',
'1720940780',
'2300442056',
'0940363252',
'0923859367',
'1004447841',
'1723299879',
'0918583626',
'0921367751',
'0929370344',
'0703992206',
'1251074272',
'0926559121',
'1308611407',
'0923214134',
'0706300266',
'0803235548',
'2300121965',
'1716612328',
'1850622232',
'0930933577',
'0915084156',
'0922609532',
'0927843045',
'1103560023',
'0750126955',
'1726006248',
'0929035780',
'1713988291',
'0941890253',
'1207734052',
'0921323846',
'0502881220',
'0954524658',
'0941393845',
'0956845309',
'0928369461',
'1205859901',
'0932009699',
'0927921577',
'0954836540',
'1003976766',
'0605496389',
'0958686289',
'1720568037',
'1714128863',
'0951111178',
'0940811623',
'1804813432',
'1726970849',
'0942248436',
'1727479766',
'0917501561',
'0950809715',
'1803618238',
'1206722660',
'0927150383',
'0950941757',
'0928429893',
'0604972356',
'0940572225',
'0957057458',
'1716801798',
'0941342289',
'0503410839',
'0918669268',
'0952974772',
'0956743157',
'1717111478',
'1150031357',
'1717573396',
'0925750200',
'0917373292',
'2100805205',
'0604878264',
'0915291785',
'0503450264',
'1207115716',
'0750207680',
'0944151364',
'0926475583',
'1726903816',
'0106503527',
'0919877647',
'0915898225',
'0928892223',
'0706990140',
'0920581717',
'0750312266',
'1717435745',
'0950619759',
'1104394828',
'0920113602',
'1205131350',
'1719689919',
'1803607058',
'1206798504',
'0941081028',
'0940538309',
'1752296853',
'1002688727',
'0105517585',
'0503558280',
'0913971388',
'0302525027',
'0940607823',
'0921461869',
'1314280973',
'1726043449',
'1206303982',
'0953868262',
'1205700030',
'0924300296',
'0202135406',
'0941993032',
'0940637309',
'0942057928',
'0931309215',
'0803445758',
'1718889874',
'0926762006',
'0955800263',
'0202214805',
'0913807640',
'0925929697',
'1314040500',
'0923335798',
'1717478208',
'0909296220',
'0941277014',
'0923352488',
'0750480675']
        carrera = 126
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_VINC = []
        cedulasconrubros_PPP = []
        cedulasconrubros_PPP_II = []
        ids_asignaturamalla = [10615,10623,10627]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10615:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_vinc in cedulas_vinc:
                    # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_vinc)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                      materia__nivel__status=True,
                                                                                      materia__asignaturamalla_id = asigmal_id,
                                                                                      matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_VINC.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10623:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    #------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_ppp_I in cedulas_ppp_I:
                    # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_ppp_I)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula,materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_PPP.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10627:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_ppp_II in cedulas_ppp_II:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_ppp_II)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_PPP_II.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(
                                                    matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(
                                                    matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

            if DEBUG: print(cedulasconrubros_VINC)
            if DEBUG: print(cedulasconrubros_PPP)
            if DEBUG: print(cedulasconrubros_PPP_II)
            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)

            print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()

# funcionlocal.get("desmatricular_DERECHO_PPP_vinc")()




##-----------------------------------------------------------------------------COMUNICACION------------------------------------------------------------------
def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_COMUNICACION_PPP_vinc():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        #-----ASIGNATURAS DE PPP
        cedulas_estra_herr = ['0942762683',
'0950634113',
'1206541227',
'0603889940',
'0850862095',
'1712005444',
'0751060179',
'1250046750',
'1150350039',
'0927893412',
'0927189407',
'0928132547',
'0941143885',
'2100141726',
'0928972140',
'0104644448',
'1312966086']
        cedulas_ger_medios = ['0929662153',
'0942762683',
'0951593193',
'0950634113',
'1206541227',
'1314773225',
'0603889940',
'0850862095',
'1712005444',
'0706115953',
'0927893412',
'0927189407',
'0941143885',
'2100141726',
'0941478356',
'0706999042',
'1312966086']
        cedulas_com_proc_sociales = ['0929662153',
'0942762683',
'0950634113',
'1206541227',
'0605454222',
'0603889940',
'0850862095',
'1712005444',
'0751060179',
'1250046750',
'1150350039',
'0927893412',
'0927189407',
'0928132547',
'0941143885',
'2100141726',
'0928972140',
'0941478356',
'0104644448',
'0706999042']
        # -----ASIGNATURAS DE VINCULACION
        cedulas_dir_comun = ['1205238650',
'1311150815']
        cedulas_neg_manejo_cris = ['0926691080',
'0605454222',
'1314773225',
'0705523025']
        carrera = 131
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_estra_herr = []
        cedulasconrubros_ger_medios= []
        cedulasconrubros_proc_sociales = []
        cedulasconrubros_dir_comun = []
        cedulasconrubros_neg_manejo_cris = []
        ids_asignaturamalla = [10853,10854,10850,10859,10865]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10853:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_estra_herr in cedulas_estra_herr:
                    # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_estra_herr)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                      materia__nivel__status=True,
                                                                                      materia__asignaturamalla_id = asigmal_id,
                                                                                      matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_estra_herr.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10854:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    #------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_ger_medios in cedulas_ger_medios:
                    # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_ger_medios)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula,materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_ger_medios.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10850:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_com_proc_sociales in cedulas_com_proc_sociales:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_com_proc_sociales)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_proc_sociales.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10859:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_dir_comun in cedulas_dir_comun:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_dir_comun)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_dir_comun.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10865:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_neg_manejo_cris in cedulas_neg_manejo_cris:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_neg_manejo_cris)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_neg_manejo_cris.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

            # if DEBUG: print(cedulasconrubros_estra_herr)
            # if DEBUG: print(cedulasconrubros_ger_medios)
            # if DEBUG: print(cedulasconrubros_proc_sociales)
            # if DEBUG: print(cedulasconrubros_dir_comun)
            # if DEBUG: print(cedulasconrubros_neg_manejo_cris)
            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    # funcionlocal.get("DesEnrolarMoodle")(materia)
                    DesEnrolarMoodle(materia)
            if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()

# funcionlocal.get("desmatricular_COMUNICACION_PPP_vinc")()




##-----------------------------------------------------------------------------PSICOLOGIA-------------------------------------------------------------------
def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_PSICOLOGIA_PPP_vinc():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_psic_social_comun = ['0928966126',
'0930720149',
'1103221352',
'1312604653',
'1316396058',
'2300442148',
'0955129747',
'0202493938',
'0952923027',
'2351156878',
'1725407074',
'1711709681',
'1250647292',
'1750259580',
'0955466677',
'0250166824',
'1727268698',
'1311973455',
'1207245430',
'0604166348',
'1103823447',
'1251139109',
'1208898377',
'0930598081',
'0957694193',
'0706064219',
'1207246503',
'1316873320',
'1002883914',
'1351276819',
'1208315802',
'1716107378',
'0803502699',
'0605159052',
'0927689802',
'1751017797',
'0703881466',
'1726435397',
'1723423404',
'0924870348',
'2450491986',
'0921295424',
'1752821205',
'0918040080',
'0927181289',
'1311065393',
'0958171118',
'0943129098',
'1004003149',
'1804907416',
'0705714525',
'1900959790',
'0503710154',
'0930064670',
'1804079190',
'0929951507',
'1208233294',
'2250277734',
'1724456585',
'0956450050',
'1206295303',
'1727065441',
'0950749028',
'0953817145',
'0919414441',
'1500879398',
'0603435942',
'0932258601',
'1754179107',
'0705216588',
'1714407796',
'0928396308',
'0929718039',
'0955135918',
'0929867950',
'0941400632',
'0954041976',
'0931215677',
'0802716951',
'1207642982',
'0202178224',
'0927243394',
'0953953072',
'0926338625',
'0940584253',
'0929810117',
'1400749279',
'0951833003',
'0954476925',
'1715263453',
'1600802100',
'1750011239',
'0954939898',
'0952299923',
'1206650002',
'1150547485',
'1900713460',
'0604875666',
'0956484349',
'1105422420',
'2300787088',
'1105393522',
'1205967829',
'0106261688',
'0750559817',
'0851001131',
'0750223331',
'2450408063',
'0502089139',
'1208439040',
'1150577508',
'0923423248',
'0957089584',
'0929293215',
'0940061856',
'1104786288',
'0956847990',
'0930153515',
'0928408855',
'0918523291',
'2400303711',
'1350411615',
'1208259059',
'0929677680']
        cedulas_psic_salud = ['0943234120',
'1104887474',
'0955728803',
'2300309859',
'0951953504',
'1501104895']
        cedulas_proc_incl_educ = []
        cedulas_int_malt_viol = ['0943807842',
'0921878310',
'1500627722',
'2100920459',
'0201859048',
'1310949613',
'1803413788',
'1106220989',
'1207231299',
'0920031010']
        carrera = 132
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_psic_social_comun = []
        cedulasconrubros_psic_salud = []
        cedulasconrubros_proc_incl_educ = []
        cedulasconrubros_int_malt_viol = []
        ids_asignaturamalla = [10639,10646,10649,10654]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10639:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_psic_social_comun in cedulas_psic_social_comun:
                    # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_psic_social_comun)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                      materia__nivel__status=True,
                                                                                      materia__asignaturamalla_id = asigmal_id,
                                                                                      matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_psic_social_comun.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10646:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    #------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_psic_salud in cedulas_psic_salud:
                    # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_psic_salud)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula,materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_psic_salud.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10649:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_proc_incl_educ in cedulas_proc_incl_educ:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_proc_incl_educ)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_proc_incl_educ.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10654:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_int_malt_viol in cedulas_int_malt_viol:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_int_malt_viol)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_int_malt_viol.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)


            # if DEBUG: print(cedulasconrubros_psic_social_comun)
            # if DEBUG: print(cedulasconrubros_psic_salud)
            # if DEBUG: print(cedulasconrubros_proc_incl_educ)
            # if DEBUG: print(cedulasconrubros_int_malt_viol)
            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)
                    # DesEnrolarMoodle(materia)
            # if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
# funcionlocal.get("desmatricular_PSICOLOGIA_PPP_vinc")()





##---------------------------------------------------------------------------TRABAJO SOCIAL-------------------------------------------------------------------
def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_TS_PPP_vinc():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_taller_urbano = ['0944224575']
        cedulas_taller_rural = ['0919922435','0915713978']
        cedulas_int_prof = ['0942057183']
        cedulas_int_prof_II = ['0302433909']
        carrera = 130
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_taller_urbano = []
        cedulasconrubros_taller_rural = []
        cedulasconrubros_int_prof = []
        cedulasconrubros_int_prof_II = []
        ids_asignaturamalla = [10724,10730, 10777,10787]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10724:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_taller_urbano in cedulas_taller_urbano:
                    # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_taller_urbano)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                      materia__nivel__status=True,
                                                                                      materia__asignaturamalla_id = asigmal_id,
                                                                                      matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_taller_urbano.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10730:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    #------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_taller_rural in cedulas_taller_rural:
                    # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_taller_rural)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula,materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_taller_rural.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10777:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_int_prof in cedulas_int_prof:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_int_prof)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_int_prof.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10787:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_int_prof_II in cedulas_int_prof_II:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_int_prof_II)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_int_prof_II.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)


            # if DEBUG: print(cedulasconrubros_taller_urbano)
            # if DEBUG: print(cedulasconrubros_taller_rural)
            # if DEBUG: print(cedulasconrubros_int_prof)
            # if DEBUG: print(cedulasconrubros_int_prof_II)
            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)
                    # DesEnrolarMoodle(materia)
            # if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
# funcionlocal.get("desmatricular_TS_PPP_vinc")()





##---------------------------------------------------------------------------INICIAL-------------------------------------------------------------------
def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_INICIAL_PPP_vinc():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_org_centros_inf = ['1729709624',
'0929128833',
'1716035835',
'0951078955',
'0706968930']
        carrera = 127
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_org_centros_inf = []
        ids_asignaturamalla = [10926]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10926:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_org_centros_inf in cedulas_org_centros_inf:
                    # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_org_centros_inf)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                      materia__nivel__status=True,
                                                                                      materia__asignaturamalla_id = asigmal_id,
                                                                                      matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_org_centros_inf.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

            # if DEBUG: print(cedulasconrubros_org_centros_inf)
            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)
                    # DesEnrolarMoodle(materia)
            # if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
# funcionlocal.get("desmatricular_INICIAL_PPP_vinc")()



##-----------------------------------------DERECHO DESMATRICULAR PRAXIS I----------------------------------------------
def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_DERECHO_PPP_AP():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_ppp_I = ['1718005778',
'0959223298',
'1104208267',
'0924431067',
'0105952188',
'0927868810',
'0926621236',
'0930904305',
'1722353073',
'0942100769',
'1711873313',
'0705096469',
'0923533525',
'0930670534',
'0504615980',
'1250765334']
        carrera = 126
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_PPP = []
        ids_asignaturamalla = [10623]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10623:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    #------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_ppp_I in cedulas_ppp_I:
                    # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_ppp_I)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        materiaasignada.status = False
                                        if DEBUG: print(
                                            str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                                matricula.inscripcion.carrera) + ' - ' + str(
                                                materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

            if DEBUG: print(cedulasconrubros_PPP)
            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)

            print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()

# funcionlocal.get("desmatricular_DERECHO_PPP_AP")()\






##--------------------------------------------------------------------------BASICA-------------------------------------------------------------------
def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_BASICA_PPP_vinc():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_refl_eval_proc_app = ['0707021499']
        cedulas_sist_narr_tit = ['1600569501',
'0703745067',
'1305648949',
'1104406952',
'0927048124',
'1105094658']
        carrera = 135
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_refl_eval_proc_app = []
        cedulasconrubros_sist_narr_tit = []
        ids_asignaturamalla = [10888,10944]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10888:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_refl_eval_proc_app in cedulas_refl_eval_proc_app:
                    # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_refl_eval_proc_app)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True, materia__status=True,
                                                                                      materia__nivel__status=True,
                                                                                      materia__asignaturamalla_id = asigmal_id,
                                                                                      matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_refl_eval_proc_app.append(matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10944:
                    # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_sist_narr_tit in cedulas_sist_narr_tit:
                        # ----------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_sist_narr_tit)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_sist_narr_tit.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)

            # if DEBUG: print(cedulasconrubros_refl_eval_proc_app)
            # if DEBUG: print(cedulasconrubros_sist_narr_tit)
            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)
                    # DesEnrolarMoodle(materia)
            # if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
# funcionlocal.get("desmatricular_BASICA_PPP_vinc")()


def generar_reporte_admision():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    from sagest.models import Rubro
    import xlwt
    from django.db import transaction, connection
    try:
        with transaction.atomic():
            cadena = ''
            linea, excluidos, conexito = 0, 0, 0
            libre_origen = '/reporte_estudiantes_Admision.xls'
            fuentecabecera = easyxf(
                'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
            fuentenormal = easyxf(
                'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

            output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
            # liborigen = xlrd.open_workbook(output_folder + libre_origen)
            libdestino = xlwt.Workbook()
            hojadestino = libdestino.add_sheet('DATOS')
            fil = 0
            lin = 0
            columnas = [(u"ID MATRICULA", 6000),
                        (u"ID RUBROS", 6000),
                        (u"RUBROS PAGADOS", 6000)
                        ]
            for col_num in range(len(columnas)):
                hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
                hojadestino.col(col_num).width = columnas[col_num][1]
            fila = 1

            cursor = connection.cursor()
            sql = f''' SELECT mat.id FROM sga_matricula mat
            INNER JOIN sga_nivel niv ON mat.nivel_id=niv.id
            INNER JOIN sga_periodo per ON niv.periodo_id=per.id
            INNER JOIN sga_inscripcion ins ON mat.inscripcion_id=ins.id
            INNER JOIN sga_persona pers ON ins.persona_id=pers.id
            INNER JOIN sga_carrera carr ON ins.carrera_id=carr.id
            INNER JOIN sga_coordinacion_carrera coor_car ON carr.id = coor_car.carrera_id
            WHERE per.id = 317 AND coor_car.coordinacion_id= 9
            AND mat."status" = FALSE '''

            cursor.execute(sql)
            results = cursor.fetchall()
            nivel = 0
            ##SON 0 - 12 RESULTADOS
            estado = ''
            for per in results:
                matricula = Matricula.objects.get(pk=per[0])
                valor_pendiente = matricula.total_saldo_rubro()
                valor_pagados = matricula.total_pagado_rubro_sin_liquidados()

                rubros = Rubro.objects.filter(status=True, matricula_id=per[0])
                if rubros:
                    if valor_pendiente > 0 and valor_pagados == 0:
                        estado = 'NO PAGADO'
                    elif valor_pagados > 0:
                        estado = 'PAGADO'
                    for rubro in rubros:
                        hojadestino.write(fila, 0, per[0], fuentenormal)
                        hojadestino.write(fila, 1, str(rubro.id), fuentenormal)
                        hojadestino.write(fila, 2, estado, fuentenormal)
                        fila += 1

                lin += 1
            libdestino.save(output_folder + libre_origen)
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


###################################################### MIGRACION PRE INCRIPCION PRACTICAS
def pre_inscripcion_PPP_carreras_enlinea():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion, PreInscripcionPracticasPP, DetalleRespuestaPreInscripcionPPP, DetallePreInscripcionPracticasPP
    try:
        with transaction.atomic():
            listado_estudiantes = MateriaAsignada.objects.filter(status=True, matricula__nivel__periodo_id=317,
                                                                 matricula__status=True, matricula__retiradomatricula=False,
                                                                 retiromanual=False, retiramateria=False,
                                                                 materia__status=True,
                                                                 materia__asignaturamalla__status=True,
                                                                 matricula__inscripcion__coordinacion_id__in=[1, 2, 3, 4,
                                                                                                              5],
                                                                 materia__asignaturamalla__malla__validamatricula=True,
                                                                 materia__asignaturamalla__asignaturapracticas=True, matricula__inscripcion__carrera_id__in=[128,132,133,130,134]
                                                                 ).distinct().order_by('-matricula__inscripcion__carrera_nombre')
            for ins in listado_estudiantes:
                print(str(ins.matricula.inscripcion.persona.cedula))
                inscripcion = Inscripcion.objects.get(pk=ins.matricula.inscripcion.id)
                facultadid = inscripcion.coordinacion.id
                nivelmalla = inscripcion.mi_nivel().nivel

                itinerariosvalidosid = []

                for it in inscripcion.inscripcionmalla_set.filter(status=True)[0].malla.itinerariosmalla_set.filter(
                        status=True, nivel=ins.materia.asignaturamalla.nivelmalla):
                    # nivelhasta = it.nivel.orden
                    # if inscripcion.todas_materias_aprobadas_rango_nivel(1, nivelhasta):
                    itinerariosvalidosid.append(it.pk)


                itinerarios = ItinerariosMalla.objects.filter(status=True, pk__in=itinerariosvalidosid)

                ####------------------------------------------------------------------AGREGACION-----------------------------------------------------------------
                if itinerarios:
                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                   inscripcion=inscripcion,
                                                                                   estadosolicitud__in=[1, 2, 4],
                                                                                   itinerariomalla=itinerarios[0]).exists()
                    practicarechazada = False
                    if not practica:
                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                            status=True,
                            inscripcion=inscripcion,
                            estadosolicitud__in=[3, 5, 6],
                            itinerariomalla=itinerarios[0]).exists()

                    if not practica or practicarechazada:
                        preinscripcion = PreInscripcionPracticasPP.objects.get(pk=36)
                        if not DetallePreInscripcionPracticasPP.objects.filter(status=True, inscripcion=inscripcion,
                                                                               preinscripcion=preinscripcion,
                                                                               itinerariomalla_id=itinerarios[0].id).exists():
                            detallerespuesta = DetalleRespuestaPreInscripcionPPP(preinscripcion=preinscripcion,
                                                                                 inscripcion=inscripcion)
                            detallerespuesta.save()

                            detallepreinscripcion = DetallePreInscripcionPracticasPP(
                                inscripcion = inscripcion,
                                nivelmalla = nivelmalla,
                                preinscripcion = preinscripcion,
                                fecha = datetime.now(),
                                itinerariomalla_id=itinerarios[0].id,
                                estado = 1,
                            )
                            detallepreinscripcion.save()
                    else:
                        print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante ya cumplio con las horas requeridas de practicas.")
                else:
                    print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante no ve asignaturas practicas")

            print('-- PROCESO FINALIZADO --')


    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


######---------------------------------CARRERAS DE EDUCACION-----------------------------
def pre_inscripcion_PPP_BASICA():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion, PreInscripcionPracticasPP, Inscripcion, ItinerariosMalla, DetalleRespuestaPreInscripcionPPP, DetallePreInscripcionPracticasPP,PracticasPreprofesionalesInscripcion, Profesor, DetalleRecoridoPreInscripcionPracticasPP
    try:
        with transaction.atomic():
            listado_estudiantes = MateriaAsignada.objects.filter(status=True, matricula__nivel__periodo_id=317,
                                                                 matricula__status=True, matricula__retiradomatricula=False,
                                                                 retiromanual=False, retiramateria=False,
                                                                 materia__status=True,
                                                                 materia__asignaturamalla__status=True,
                                                                 matricula__inscripcion__coordinacion_id__in=[1, 2, 3, 4,5],
                                                                 materia__asignaturamalla__malla__validamatricula=True,
                                                                 materia__asignaturamalla__asignaturapracticas=True, matricula__inscripcion__carrera_id__in=[135]).distinct().order_by('-matricula__inscripcion__carrera_nombre')
            ####### ESTUDIANTES QUE SOLO SE DEBEN PREINSCRIBIR
            estudiantes_preinscripcion = listado_estudiantes.filter(materia__asignaturamalla__nivelmalla__orden__gt = 6)
            for ins in estudiantes_preinscripcion:
                print(str(ins.matricula.inscripcion.persona.cedula))
                inscripcion = Inscripcion.objects.get(pk=ins.matricula.inscripcion.id)
                facultadid = inscripcion.coordinacion.id
                nivelmalla = inscripcion.mi_nivel().nivel

                itinerariosvalidosid = []

                for it in inscripcion.inscripcionmalla_set.filter(status=True)[0].malla.itinerariosmalla_set.filter(
                        status=True, nivel=ins.materia.asignaturamalla.nivelmalla):
                    # nivelhasta = it.nivel.orden
                    # if inscripcion.todas_materias_aprobadas_rango_nivel(1, nivelhasta):
                    itinerariosvalidosid.append(it.pk)

                itinerarios = ItinerariosMalla.objects.filter(status=True, pk__in=itinerariosvalidosid)

                ####------------------------------------------------------------------AGREGACION-----------------------------------------------------------------
                if itinerarios:
                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                   inscripcion=inscripcion,
                                                                                   estadosolicitud__in=[
                                                                                       1, 2, 4],
                                                                                   itinerariomalla=itinerarios[
                                                                                       0]).exists()
                    practicarechazada = False
                    if not practica:
                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                            status=True,
                            inscripcion=inscripcion,
                            estadosolicitud__in=[3, 5, 6],
                            itinerariomalla=itinerarios[0]).exists()

                    if not practica or practicarechazada:
                        preinscripcion = PreInscripcionPracticasPP.objects.get(pk=36)
                        if not DetallePreInscripcionPracticasPP.objects.filter(status=True, inscripcion=inscripcion,
                                                                               preinscripcion=preinscripcion,
                                                                               itinerariomalla_id=itinerarios[0].id).exists():
                            detallerespuesta = DetalleRespuestaPreInscripcionPPP(preinscripcion=preinscripcion,
                                                                                 inscripcion=inscripcion)
                            detallerespuesta.save()

                            detallepreinscripcion = DetallePreInscripcionPracticasPP(
                                inscripcion = inscripcion,
                                nivelmalla = nivelmalla,
                                preinscripcion = preinscripcion,
                                fecha = datetime.now(),
                                itinerariomalla_id=itinerarios[0].id,
                                estado = 1
                            )
                            detallepreinscripcion.save()
                else:
                    print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante no ve asignaturas practicas")


            ####### ESTUDIANTES QUE SE DEBEN PREINSCRIBIR Y ADICIONAR A LAS PRACTICAS
            profesores =  [1364,2135,4483,2123,3319]
            estudiantes_preins_inscripcion = listado_estudiantes.filter(materia__asignaturamalla__nivelmalla__orden__lt = 7)
            repeticiones_completas = len(estudiantes_preins_inscripcion) // len(profesores)
            registros_restantes = len(estudiantes_preins_inscripcion) % len(profesores)
            # Crea un nuevo arreglo con los elementos del arreglo repetidos de manera equitativa
            arreglo_completo = profesores * repeticiones_completas + profesores[:registros_restantes]
            for ins, arr in zip(estudiantes_preins_inscripcion, arreglo_completo):
                print(str(ins.matricula.inscripcion.persona.cedula))
                inscripcion = Inscripcion.objects.get(pk=ins.matricula.inscripcion.id)
                facultadid = inscripcion.coordinacion.id
                nivelmalla = inscripcion.mi_nivel().nivel

                itinerariosvalidosid = []

                for it in inscripcion.inscripcionmalla_set.filter(status=True)[0].malla.itinerariosmalla_set.filter(
                        status=True, nivel=ins.materia.asignaturamalla.nivelmalla):
                    # nivelhasta = it.nivel.orden
                    # if inscripcion.todas_materias_aprobadas_rango_nivel(1, nivelhasta):
                    itinerariosvalidosid.append(it.pk)


                itinerarios = ItinerariosMalla.objects.filter(status=True, pk__in=itinerariosvalidosid)

                ####------------------------------------------------------------------AGREGACION-----------------------------------------------------------------
                if itinerarios:
                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                   inscripcion=inscripcion,
                                                                                   estadosolicitud__in=[
                                                                                       1, 2, 4],
                                                                                   itinerariomalla=itinerarios[0]).exists()
                    practicarechazada = False
                    if not practica:
                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                            status=True,
                            inscripcion=inscripcion,
                            estadosolicitud__in=[3, 5, 6],
                            itinerariomalla=itinerarios[0]).exists()

                    if not practica or practicarechazada:
                        preinscripcion = PreInscripcionPracticasPP.objects.get(pk=36)
                        periodo_evidencia = CabPeriodoEvidenciaPPP.objects.get(status=True, pk=25)
                        if not DetallePreInscripcionPracticasPP.objects.filter(status=True, inscripcion=inscripcion,
                                                                               preinscripcion=preinscripcion,
                                                                               itinerariomalla_id=itinerarios[0].id).exists():
                            detallerespuesta = DetalleRespuestaPreInscripcionPPP(preinscripcion=preinscripcion,
                                                                                 inscripcion=inscripcion)
                            detallerespuesta.save()

                            detallepreinscripcion = DetallePreInscripcionPracticasPP(
                                inscripcion = inscripcion,
                                nivelmalla = nivelmalla,
                                preinscripcion = preinscripcion,
                                fecha = datetime.now(),
                                itinerariomalla_id=itinerarios[0].id,
                                estado = 2
                            )
                            detallepreinscripcion.save()

                            if not DetalleRecoridoPreInscripcionPracticasPP.objects.filter(preinscripcion = detallepreinscripcion, status = True).exists():
                                detalle_recorrido = DetalleRecoridoPreInscripcionPracticasPP(preinscripcion = detallepreinscripcion,
                                                                                             fecha = datetime.now().date(),
                                                                                             estado = 5,
                                                                                             esestudiante = True)
                                detalle_recorrido.save()

                            if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,inscripcion=inscripcion, preinscripcion = detallepreinscripcion).exists():
                                nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                     periodoppp = periodo_evidencia,
                                                                                     inscripcion=inscripcion,
                                                                                     fechadesde='2024-04-01',
                                                                                     fechahasta='2024-07-12',
                                                                                     numerohora=itinerarios[0].horas_practicas,
                                                                                     nivelmalla=itinerarios[0].nivel,
                                                                                     tiposolicitud=1,
                                                                                     estadosolicitud=2,
                                                                                     tipo=1,
                                                                                     itinerariomalla=itinerarios[0],
                                                                                     supervisor_id=arr,
                                                                                     tutorunemi_id=arr,
                                                                                     fechaasigtutor=datetime.now().date(),
                                                                                     tipoinstitucion=1,
                                                                                     sectoreconomico=6,
                                                                                     empresaempleadora_id=3,
                                                                                     fechaasigsupervisor=datetime.now().date(),
                                                                                     lugarpractica_id=2
                                                                                     )
                                nuevapractica.save()
                    else:
                        print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante ya cumplio con las horas requeridas de practicas.")
                else:
                    print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante no ve asignaturas practicas")

        print('-- PROCESO FINALIZADO --')


    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



def pre_inscripcion_PPP_INICIAL():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion, PreInscripcionPracticasPP, Inscripcion, ItinerariosMalla, DetalleRespuestaPreInscripcionPPP, DetallePreInscripcionPracticasPP,PracticasPreprofesionalesInscripcion, Profesor, DetalleRecoridoPreInscripcionPracticasPP
    try:
        with transaction.atomic():
            listado_estudiantes = MateriaAsignada.objects.filter(status=True, matricula__nivel__periodo_id=317,
                                                                 matricula__status=True, matricula__retiradomatricula=False,
                                                                 retiromanual=False, retiramateria=False,
                                                                 materia__status=True,
                                                                 materia__asignaturamalla__status=True,
                                                                 matricula__inscripcion__coordinacion_id__in=[1, 2, 3, 4,5],
                                                                 materia__asignaturamalla__malla__validamatricula=True,
                                                                 materia__asignaturamalla__asignaturapracticas=True, matricula__inscripcion__carrera_id__in=[127]).distinct().order_by('-matricula__inscripcion__carrera_nombre')
            ####### ESTUDIANTES QUE SOLO SE DEBEN PREINSCRIBIR
            estudiantes_preinscripcion = listado_estudiantes.filter(materia__asignaturamalla__nivelmalla__orden = 9)
            for ins in estudiantes_preinscripcion:
                print(str(ins.matricula.inscripcion.persona.cedula))
                inscripcion = Inscripcion.objects.get(pk=ins.matricula.inscripcion.id)
                facultadid = inscripcion.coordinacion.id
                nivelmalla = inscripcion.mi_nivel().nivel

                itinerariosvalidosid = []

                for it in inscripcion.inscripcionmalla_set.filter(status=True)[0].malla.itinerariosmalla_set.filter(
                        status=True, nivel=ins.materia.asignaturamalla.nivelmalla):
                    # nivelhasta = it.nivel.orden
                    # if inscripcion.todas_materias_aprobadas_rango_nivel(1, nivelhasta):
                    itinerariosvalidosid.append(it.pk)

                itinerarios = ItinerariosMalla.objects.filter(status=True, pk__in=itinerariosvalidosid)

                ####------------------------------------------------------------------AGREGACION-----------------------------------------------------------------
                if itinerarios:
                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                   inscripcion=inscripcion,
                                                                                   estadosolicitud__in=[
                                                                                       1, 2, 4],
                                                                                   itinerariomalla=itinerarios[
                                                                                       0]).exists()
                    practicarechazada = False
                    if not practica:
                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                            status=True,
                            inscripcion=inscripcion,
                            estadosolicitud__in=[3, 5, 6],
                            itinerariomalla=itinerarios[0]).exists()

                    if not practica or practicarechazada:
                    # if not inscripcion.cumple_total_parcticapp():
                        preinscripcion = PreInscripcionPracticasPP.objects.get(pk=36)
                        if not DetallePreInscripcionPracticasPP.objects.filter(status=True, inscripcion=inscripcion,
                                                                               preinscripcion=preinscripcion,
                                                                               itinerariomalla_id=itinerarios[0].id).exists():
                            detallerespuesta = DetalleRespuestaPreInscripcionPPP(preinscripcion=preinscripcion,
                                                                                 inscripcion=inscripcion)
                            detallerespuesta.save()

                            detallepreinscripcion = DetallePreInscripcionPracticasPP(
                                inscripcion = inscripcion,
                                nivelmalla = nivelmalla,
                                preinscripcion = preinscripcion,
                                fecha = datetime.now(),
                                itinerariomalla_id=itinerarios[0].id,
                                estado = 1
                            )
                            detallepreinscripcion.save()
                else:
                    print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante no ve asignaturas practicas")


            ####### ESTUDIANTES QUE SE DEBEN PREINSCRIBIR Y ADICIONAR A LAS PRACTICAS
            profesores =  [4094,1455,4312,4483,4485,1433]
            estudiantes_preins_inscripcion = listado_estudiantes.filter(materia__asignaturamalla__nivelmalla__orden__lt = 8)
            repeticiones_completas = len(estudiantes_preins_inscripcion) // len(profesores)
            registros_restantes = len(estudiantes_preins_inscripcion) % len(profesores)
            # Crea un nuevo arreglo con los elementos del arreglo repetidos de manera equitativa
            arreglo_completo = profesores * repeticiones_completas + profesores[:registros_restantes]
            for ins, arr in zip(estudiantes_preins_inscripcion, arreglo_completo):
                print(str(ins.matricula.inscripcion.persona.cedula))
                inscripcion = Inscripcion.objects.get(pk=ins.matricula.inscripcion.id)
                facultadid = inscripcion.coordinacion.id
                nivelmalla = inscripcion.mi_nivel().nivel

                itinerariosvalidosid = []

                for it in inscripcion.inscripcionmalla_set.filter(status=True)[0].malla.itinerariosmalla_set.filter(
                        status=True, nivel=ins.materia.asignaturamalla.nivelmalla):
                    # nivelhasta = it.nivel.orden
                    # if inscripcion.todas_materias_aprobadas_rango_nivel(1, nivelhasta):
                    itinerariosvalidosid.append(it.pk)


                itinerarios = ItinerariosMalla.objects.filter(status=True, pk__in=itinerariosvalidosid)

                ####------------------------------------------------------------------AGREGACION-----------------------------------------------------------------
                if itinerarios:
                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                   inscripcion=inscripcion,
                                                                                   estadosolicitud__in=[
                                                                                       1, 2, 4],
                                                                                   itinerariomalla=itinerarios[
                                                                                       0]).exists()
                    practicarechazada = False
                    if not practica:
                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                            status=True,
                            inscripcion=inscripcion,
                            estadosolicitud__in=[3, 5, 6],
                            itinerariomalla=itinerarios[0]).exists()

                    if not practica or practicarechazada:
                    # if not inscripcion.cumple_total_parcticapp():
                        preinscripcion = PreInscripcionPracticasPP.objects.get(pk=36)
                        periodo_evidencia = CabPeriodoEvidenciaPPP.objects.get(status=True, pk=25)
                        if not DetallePreInscripcionPracticasPP.objects.filter(status=True, inscripcion=inscripcion,
                                                                               preinscripcion=preinscripcion,
                                                                               itinerariomalla_id=itinerarios[0].id).exists():
                            detallerespuesta = DetalleRespuestaPreInscripcionPPP(preinscripcion=preinscripcion,
                                                                                 inscripcion=inscripcion)
                            detallerespuesta.save()

                            detallepreinscripcion = DetallePreInscripcionPracticasPP(
                                inscripcion = inscripcion,
                                nivelmalla = nivelmalla,
                                preinscripcion = preinscripcion,
                                fecha = datetime.now(),
                                itinerariomalla_id=itinerarios[0].id,
                                estado = 2
                            )
                            detallepreinscripcion.save()

                            if not DetalleRecoridoPreInscripcionPracticasPP.objects.filter(preinscripcion = detallepreinscripcion, status = True).exists():
                                detalle_recorrido = DetalleRecoridoPreInscripcionPracticasPP(preinscripcion = detallepreinscripcion,
                                                                                             fecha = datetime.now().date(),
                                                                                             estado = 5,
                                                                                             esestudiante = True)
                                detalle_recorrido.save()

                            if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,inscripcion=inscripcion, preinscripcion = detallepreinscripcion).exists():
                                nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                     periodoppp = periodo_evidencia,
                                                                                     inscripcion=inscripcion,
                                                                                     fechadesde='2024-04-01',
                                                                                     fechahasta='2024-07-12',
                                                                                     numerohora=itinerarios[0].horas_practicas,
                                                                                     nivelmalla=itinerarios[0].nivel,
                                                                                     tiposolicitud=1,
                                                                                     estadosolicitud=2,
                                                                                     tipo=1,
                                                                                     itinerariomalla=itinerarios[0],
                                                                                     supervisor_id=arr,
                                                                                     tutorunemi_id=arr,
                                                                                     fechaasigtutor=datetime.now().date(),
                                                                                     tipoinstitucion=1,
                                                                                     sectoreconomico=6,
                                                                                     empresaempleadora_id=3,
                                                                                     fechaasigsupervisor=datetime.now().date(),
                                                                                     lugarpractica_id=2
                                                                                     )
                                nuevapractica.save()
                    else:
                        print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante ya cumplio con las horas requeridas de practicas.")
                else:
                    print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante no ve asignaturas practicas")

        print('-- PROCESO FINALIZADO --')


    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



def pre_inscripcion_PPP_IDIOMAS():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion, PreInscripcionPracticasPP, Inscripcion, ItinerariosMalla, DetalleRespuestaPreInscripcionPPP, DetallePreInscripcionPracticasPP,PracticasPreprofesionalesInscripcion, Profesor, DetalleRecoridoPreInscripcionPracticasPP
    try:
        with transaction.atomic():
            listado_estudiantes = MateriaAsignada.objects.filter(status=True, matricula__nivel__periodo_id=317,
                                                                 matricula__status=True, matricula__retiradomatricula=False,
                                                                 retiromanual=False, retiramateria=False,
                                                                 materia__status=True,
                                                                 materia__asignaturamalla__status=True,
                                                                 matricula__inscripcion__coordinacion_id__in=[1, 2, 3, 4,5],
                                                                 materia__asignaturamalla__malla__validamatricula=True,
                                                                 materia__asignaturamalla__asignaturapracticas=True, matricula__inscripcion__carrera_id__in=[129]).distinct().order_by('-matricula__inscripcion__carrera_nombre')
            ####### ESTUDIANTES QUE SOLO SE DEBEN PREINSCRIBIR
            estudiantes_preinscripcion = listado_estudiantes.filter(materia__asignaturamalla__nivelmalla__orden__gt = 7)
            for ins in estudiantes_preinscripcion:
                print(str(ins.matricula.inscripcion.persona.cedula))
                inscripcion = Inscripcion.objects.get(pk=ins.matricula.inscripcion.id)
                facultadid = inscripcion.coordinacion.id
                nivelmalla = inscripcion.mi_nivel().nivel

                itinerariosvalidosid = []

                for it in inscripcion.inscripcionmalla_set.filter(status=True)[0].malla.itinerariosmalla_set.filter(
                        status=True, nivel=ins.materia.asignaturamalla.nivelmalla):
                    # nivelhasta = it.nivel.orden
                    # if inscripcion.todas_materias_aprobadas_rango_nivel(1, nivelhasta):
                    itinerariosvalidosid.append(it.pk)

                itinerarios = ItinerariosMalla.objects.filter(status=True, pk__in=itinerariosvalidosid)

                ####------------------------------------------------------------------AGREGACION-----------------------------------------------------------------
                if itinerarios:
                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                   inscripcion=inscripcion,
                                                                                   estadosolicitud__in=[
                                                                                       1, 2, 4],
                                                                                   itinerariomalla=itinerarios[
                                                                                       0]).exists()
                    practicarechazada = False
                    if not practica:
                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                            status=True,
                            inscripcion=inscripcion,
                            estadosolicitud__in=[3, 5, 6],
                            itinerariomalla=itinerarios[0]).exists()

                    if not practica or practicarechazada:
                    # if not inscripcion.cumple_total_parcticapp():
                        preinscripcion = PreInscripcionPracticasPP.objects.get(pk=36)
                        if not DetallePreInscripcionPracticasPP.objects.filter(status=True, inscripcion=inscripcion,
                                                                               preinscripcion=preinscripcion,
                                                                               itinerariomalla_id=itinerarios[0].id).exists():
                            detallerespuesta = DetalleRespuestaPreInscripcionPPP(preinscripcion=preinscripcion,
                                                                                 inscripcion=inscripcion)
                            detallerespuesta.save()

                            detallepreinscripcion = DetallePreInscripcionPracticasPP(
                                inscripcion = inscripcion,
                                nivelmalla = nivelmalla,
                                preinscripcion = preinscripcion,
                                fecha = datetime.now(),
                                itinerariomalla_id=itinerarios[0].id,
                                estado = 1
                            )
                            detallepreinscripcion.save()
                else:
                    print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante no ve asignaturas practicas")


            ####### ESTUDIANTES QUE SE DEBEN PREINSCRIBIR Y ADICIONAR A LAS PRACTICAS
            profesores =  [4315, 4312, 4075, 4540]
            estudiantes_preins_inscripcion = listado_estudiantes.filter(materia__asignaturamalla__nivelmalla__orden__lt = 8)
            repeticiones_completas = len(estudiantes_preins_inscripcion) // len(profesores)
            registros_restantes = len(estudiantes_preins_inscripcion) % len(profesores)
            # Crea un nuevo arreglo con los elementos del arreglo repetidos de manera equitativa
            arreglo_completo = profesores * repeticiones_completas + profesores[:registros_restantes]
            for ins, arr in zip(estudiantes_preins_inscripcion, arreglo_completo):
                print(str(ins.matricula.inscripcion.persona.cedula))
                inscripcion = Inscripcion.objects.get(pk=ins.matricula.inscripcion.id)
                facultadid = inscripcion.coordinacion.id
                nivelmalla = inscripcion.mi_nivel().nivel

                itinerariosvalidosid = []

                for it in inscripcion.inscripcionmalla_set.filter(status=True)[0].malla.itinerariosmalla_set.filter(
                        status=True, nivel=ins.materia.asignaturamalla.nivelmalla):
                    # nivelhasta = it.nivel.orden
                    # if inscripcion.todas_materias_aprobadas_rango_nivel(1, nivelhasta):
                    itinerariosvalidosid.append(it.pk)


                itinerarios = ItinerariosMalla.objects.filter(status=True, pk__in=itinerariosvalidosid)

                ####------------------------------------------------------------------AGREGACION-----------------------------------------------------------------
                if itinerarios:
                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                   inscripcion=inscripcion,
                                                                                   estadosolicitud__in=[
                                                                                       1, 2, 4],
                                                                                   itinerariomalla=itinerarios[
                                                                                       0]).exists()
                    practicarechazada = False
                    if not practica:
                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                            status=True,
                            inscripcion=inscripcion,
                            estadosolicitud__in=[3, 5, 6],
                            itinerariomalla=itinerarios[0]).exists()

                    if not practica or practicarechazada:
                    # if not inscripcion.cumple_total_parcticapp():
                        preinscripcion = PreInscripcionPracticasPP.objects.get(pk=36)
                        periodo_evidencia = CabPeriodoEvidenciaPPP.objects.get(status=True, pk=25)
                        if not DetallePreInscripcionPracticasPP.objects.filter(status=True, inscripcion=inscripcion,
                                                                               preinscripcion=preinscripcion,
                                                                               itinerariomalla_id=itinerarios[0].id).exists():
                            detallerespuesta = DetalleRespuestaPreInscripcionPPP(preinscripcion=preinscripcion,
                                                                                 inscripcion=inscripcion)
                            detallerespuesta.save()

                            detallepreinscripcion = DetallePreInscripcionPracticasPP(
                                inscripcion = inscripcion,
                                nivelmalla = nivelmalla,
                                preinscripcion = preinscripcion,
                                fecha = datetime.now(),
                                itinerariomalla_id=itinerarios[0].id,
                                estado = 2
                            )
                            detallepreinscripcion.save()

                            if not DetalleRecoridoPreInscripcionPracticasPP.objects.filter(preinscripcion = detallepreinscripcion, status = True).exists():
                                detalle_recorrido = DetalleRecoridoPreInscripcionPracticasPP(preinscripcion = detallepreinscripcion,
                                                                                             fecha = datetime.now().date(),
                                                                                             estado = 5,
                                                                                             esestudiante = True)
                                detalle_recorrido.save()

                            if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,inscripcion=inscripcion, preinscripcion = detallepreinscripcion).exists():
                                nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                     periodoppp = periodo_evidencia,
                                                                                     inscripcion=inscripcion,
                                                                                     fechadesde='2024-04-01',
                                                                                     fechahasta='2024-07-12',
                                                                                     numerohora=itinerarios[0].horas_practicas,
                                                                                     nivelmalla=itinerarios[0].nivel,
                                                                                     tiposolicitud=1,
                                                                                     estadosolicitud=2,
                                                                                     tipo=1,
                                                                                     itinerariomalla=itinerarios[0],
                                                                                     supervisor_id=arr,
                                                                                     tutorunemi_id=arr,
                                                                                     fechaasigtutor=datetime.now().date(),
                                                                                     tipoinstitucion=1,
                                                                                     sectoreconomico=6,
                                                                                     empresaempleadora_id=3,
                                                                                     fechaasigsupervisor=datetime.now().date(),
                                                                                     lugarpractica_id=2
                                                                                     )
                                nuevapractica.save()
                    else:
                        print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante ya cumplio con las horas requeridas de practicas.")
                else:
                    print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante no ve asignaturas practicas")

        print('-- PROCESO FINALIZADO --')


    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



def pre_inscripcion_PPP_DERECHO():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion, PreInscripcionPracticasPP, Inscripcion, ItinerariosMalla, DetalleRespuestaPreInscripcionPPP, DetallePreInscripcionPracticasPP,PracticasPreprofesionalesInscripcion, Profesor
    try:
        with transaction.atomic():
            listado_estudiantes = MateriaAsignada.objects.filter(status=True, matricula__nivel__periodo_id=317,
                                                                 matricula__status=True, matricula__retiradomatricula=False,
                                                                 retiromanual=False, retiramateria=False,
                                                                 materia__status=True,
                                                                 materia__asignaturamalla__status=True,
                                                                 matricula__inscripcion__coordinacion_id__in=[1, 2, 3, 4,5],
                                                                 materia__asignaturamalla__malla__validamatricula=True,
                                                                 materia__asignaturamalla__asignaturapracticas=True, matricula__inscripcion__carrera_id__in=[126], materia__asignaturamalla__nivelmalla__orden = 8).distinct().order_by('-matricula__inscripcion__carrera_nombre')
            ####### ESTUDIANTES QUE SOLO SE DEBEN PREINSCRIBIR
            for ins in listado_estudiantes:
                # print(str(ins.matricula.inscripcion.persona.cedula))
                ##PRAXIS I
                if ins.materia.asignaturamalla.id == 10623:
                    itinerarios = ItinerariosMalla.objects.filter(status=True, pk=294)
                ##PRAXIS II
                elif ins.materia.asignaturamalla.id == 10627:
                    itinerarios = ItinerariosMalla.objects.filter(status=True, pk=295)
                inscripcion = Inscripcion.objects.get(pk=ins.matricula.inscripcion.id)
                facultadid = inscripcion.coordinacion.id
                nivelmalla = inscripcion.mi_nivel().nivel

                ####------------------------------------------------------------------AGREGACION-----------------------------------------------------------------
                if itinerarios:
                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                   inscripcion=inscripcion,
                                                                                   estadosolicitud__in=[
                                                                                       1, 2, 4],
                                                                                   itinerariomalla=itinerarios[
                                                                                       0]).exists()
                    practicarechazada = False
                    if not practica:
                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                            status=True,
                            inscripcion=inscripcion,
                            estadosolicitud__in=[3, 5, 6],
                            itinerariomalla=itinerarios[0]).exists()

                    if not practica or practicarechazada:
                    # if not inscripcion.cumple_total_parcticapp():
                        preinscripcion = PreInscripcionPracticasPP.objects.get(pk=36)
                        if not DetallePreInscripcionPracticasPP.objects.filter(status=True,inscripcion = inscripcion, preinscripcion = preinscripcion,
                                                                             itinerariomalla_id=itinerarios[0].id).exists():
                            detallerespuesta = DetalleRespuestaPreInscripcionPPP(preinscripcion=preinscripcion,
                                                                                 inscripcion=inscripcion)
                            detallerespuesta.save()

                            detallepreinscripcion = DetallePreInscripcionPracticasPP(
                                inscripcion = inscripcion,
                                nivelmalla = nivelmalla,
                                preinscripcion = preinscripcion,
                                fecha = datetime.now(),
                                itinerariomalla_id=itinerarios[0].id,
                                estado = 1
                            )
                            detallepreinscripcion.save()
                else:
                    print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante no ve asignaturas practicas")

        # print('-- PROCESO FINALIZADO --')

    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



def pre_inscripcion_PPP_COMUNICACION():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion, PreInscripcionPracticasPP, Inscripcion, ItinerariosMalla, DetalleRespuestaPreInscripcionPPP, DetallePreInscripcionPracticasPP,PracticasPreprofesionalesInscripcion, Profesor
    try:
        with transaction.atomic():
            listado_estudiantes = MateriaAsignada.objects.filter(status=True, matricula__nivel__periodo_id=317,
                                                                 matricula__status=True, matricula__retiradomatricula=False,
                                                                 retiromanual=False, retiramateria=False,
                                                                 materia__status=True,
                                                                 materia__asignaturamalla__status=True,
                                                                 matricula__inscripcion__coordinacion_id__in=[1, 2, 3, 4,5],
                                                                 materia__asignaturamalla__malla__validamatricula=True,
                                                                 materia__asignaturamalla__asignaturapracticas=True, matricula__inscripcion__carrera_id__in=[131], materia__asignaturamalla__nivelmalla__orden = 8).distinct().order_by('-matricula__inscripcion__carrera_nombre')
            ####### ESTUDIANTES QUE SOLO SE DEBEN PREINSCRIBIR
            for ins in listado_estudiantes:
                print(str(ins.matricula.inscripcion.persona.cedula))
                ##COMUNCACION PARA LOS PROCESOS
                if ins.materia.asignaturamalla.id == 10850:
                    itinerarios = ItinerariosMalla.objects.filter(status=True, pk=300)
                ##GERENCIAS DE MEDIOS DE COMUNICACION
                elif ins.materia.asignaturamalla.id == 10854:
                    itinerarios = ItinerariosMalla.objects.filter(status=True, pk=301)
                ##ESTRATEGIAS Y HERRAMIENTAS DIGITALES
                elif ins.materia.asignaturamalla.id == 10853:
                    itinerarios = ItinerariosMalla.objects.filter(status=True, pk=302)
                inscripcion = Inscripcion.objects.get(pk=ins.matricula.inscripcion.id)
                facultadid = inscripcion.coordinacion.id
                nivelmalla = inscripcion.mi_nivel().nivel

                ####------------------------------------------------------------------AGREGACION-----------------------------------------------------------------
                if itinerarios:
                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                   inscripcion=inscripcion,
                                                                                   estadosolicitud__in=[
                                                                                       1, 2, 4],
                                                                                   itinerariomalla=itinerarios[
                                                                                       0]).exists()
                    practicarechazada = False
                    if not practica:
                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                            status=True,
                            inscripcion=inscripcion,
                            estadosolicitud__in=[3, 5, 6],
                            itinerariomalla=itinerarios[0]).exists()

                    if not practica or practicarechazada:
                    # if not inscripcion.cumple_total_parcticapp():
                        preinscripcion = PreInscripcionPracticasPP.objects.get(pk=36)
                        if not DetallePreInscripcionPracticasPP.objects.filter(status=True,inscripcion = inscripcion, preinscripcion = preinscripcion,
                                                                             itinerariomalla_id=itinerarios[0].id).exists():
                            detallerespuesta = DetalleRespuestaPreInscripcionPPP(preinscripcion=preinscripcion,
                                                                                 inscripcion=inscripcion)
                            detallerespuesta.save()

                            detallepreinscripcion = DetallePreInscripcionPracticasPP(
                                inscripcion = inscripcion,
                                nivelmalla = nivelmalla,
                                preinscripcion = preinscripcion,
                                fecha = datetime.now(),
                                itinerariomalla_id=itinerarios[0].id,
                                estado = 1
                            )
                            detallepreinscripcion.save()
                else:
                    print(str(ins.matricula.inscripcion.persona.cedula) + " - " + " Estudiante no ve asignaturas practicas")

        print('-- PROCESO FINALIZADO --')

    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()




def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_TS_PPP_vinc_nuevo():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion,PreInscripcionPracticasPP
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_int_prof_II = ['0707036612',
'1004827455',
'0953561107',
'0805094596',
'1205699455',
'0924536717',
'1105422891',
'1313892000',
'0750914442',
'0912621331',
'0941509101',
'0932301906',
'0942693276',
'0922521588',
'1724986763',
'0604668988',
'0929160646',
'1310418965',
'1600704439',
'2200494439',
'1755664396',
'0953633138',
'0954232963',
'2100165865',
'1311329849',
'0926120445',
'1315843233',
'0918031493',
'1103874093',
'1312156597',
'1208071801',
'1313093567',
'0952102812']
        carrera = 130
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_int_prof_II = []
        ids_asignaturamalla = [10787]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            ## --------------- PRE INSCRIPCION PRACTICAS STATUS FALSE
            preinscripcion = PreInscripcionPracticasPP.objects.get(status=True, pk=36)
            preinscripciones = preinscripcion.detallepreinscripcionpracticaspp_set.filter(status=True, inscripcion__persona__cedula__in = cedulas_int_prof_II).update(status = False)
            for asigmal_id in ids_asignaturamalla:

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10787:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_int_prof_II in cedulas_int_prof_II:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_int_prof_II)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_int_prof_II.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia.id)


            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)
                    # DesEnrolarMoodle(materia)
            # if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()




def DesEnrolarMoodle_TS_Int_II():
    from django.db import connections
    from moodle import moodle
    from sga.models import Materia
    cursor = connections['moodle_db'].cursor()
    tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    materias = Materia.objects.filter(pk__in = [89097,88195,89126])
    for materia in materias:
        if materia.idcursomoodle:
            cursoid = materia.idcursomoodle
            idusers = ""
            for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
                idusers += "'%s'," % x[0]
            docentes = materia.mis_profesores()
            for curpro in docentes:
                profesor = curpro.profesor
                if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                    username = profesor.persona.usuario.username
                    idusers += "'%s'," % username
            queryest = """
                            SELECT DISTINCT asi.userid, asi.roleid
                            FROM  mooc_role_assignments asi
                            INNER JOIN mooc_user user2 on user2.id=asi.userid
                            INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                    """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
            cursor.execute(queryest)
            rowest = cursor.fetchall()
            if rowest:
                for deluserest in rowest:
                    for intento in range(1, 4):
                        try:
                            unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                            break
                        except Exception as ex:
                            print("Ups, error al eliminar rol %s" % ex)
                            pass

def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_TS_Inter_Prof_I():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion,PreInscripcionPracticasPP
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_int_prof_I = ['0928004217',
'0706650397',
'1311603169',
'0930130430',
'0706423993',
'1724789472',
'0107065237',
'1204659310',
'0929396083',
'0922726575',
'0750564171',
'0928624899',
'1208592814',
'0951437458',
'2200619746',
'0940530843',
'0150524056',
'1205060211',
'0942057183',
'1716305196',
'0706124955',
'2100323803',
'2300117583',
'0954151817',
'0930149885',
'1205889056',
'1314305861',
'1719786749',
'0953466117',
'0923964738',
'0925007312',
'1900779925',
'0202220059',
'0927011247',
'1207069442',
'0953309622']
        carrera = 130
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_int_prof_II = []
        ids_asignaturamalla = [10777]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            ## --------------- PRE INSCRIPCION PRACTICAS STATUS FALSE
            preinscripcion = PreInscripcionPracticasPP.objects.get(status=True, pk=36)
            preinscripciones = preinscripcion.detallepreinscripcionpracticaspp_set.filter(status=True, inscripcion__persona__cedula__in = cedulas_int_prof_I).update(status = False)
            for asigmal_id in ids_asignaturamalla:

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10777:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_int_prof_I in cedulas_int_prof_I:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_int_prof_I)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_int_prof_II.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - '  + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)


            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)
                    # DesEnrolarMoodle(materia)
            # if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def DesEnrolarMoodle(materia):
    from django.db import connections
    from sga.models import Notificacion
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        noti = Notificacion(titulo='Error',
                                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                                ex, sys.exc_info()[-1].tb_lineno),
                                            destinatario_id=38488, url="",
                                            prioridad=1, app_label='SGA',
                                            fecha_hora_visible=datetime.now() + timedelta(days=1),
                                            tipo=2, en_proceso=False, error=True)
                        noti.save()
                        pass
def desmatricular_turismo_patrimonio():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion,PreInscripcionPracticasPP
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_patrimonio = ['2300116874',
'1312854944',
'1207795400',
'0952384733',
'0202261822',
'0957839186',
'2100818679',
'0931069827',
'0302662903',
'0953371358',
'0954864989',
'0955665690']
        carrera = 134
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_patrimonio = []
        ids_asignaturamalla = [10953]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            ## --------------- PRE INSCRIPCION PRACTICAS STATUS FALSE
            preinscripcion = PreInscripcionPracticasPP.objects.get(status=True, pk=36)
            preinscripciones = preinscripcion.detallepreinscripcionpracticaspp_set.filter(status=True, inscripcion__persona__cedula__in = cedulas_patrimonio).update(status = False)
            for asigmal_id in ids_asignaturamalla:

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10953:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_patrimonio in cedulas_patrimonio:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_patrimonio)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_patrimonio.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - '  + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)


            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)
                    # DesEnrolarMoodle(materia)
            # if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



def matricular_DERECHO_PPP():
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion, RecordAcademico
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_ppp_I = ['0105952188',
'0302525027',
'0504615980',
'0705096469',
'0750590093',
'0923533525',
'0927868810',
'0930904305',
'0940607823',
'0942376963',
'1103560023',
'1104208267',
'1202167761',
'1711873313',
'1713988291',
'1718005778',
'1722353073']
        cedulas_ppp_II = ['0105517585',
'0106503527',
'0302309703',
'0302525027',
'0502881220',
'0604878264',
'0703992206',
'0750480675',
'0750590093',
'0913807640',
'0913971388',
'0914740451',
'0915084156',
'0917501561',
'0920581717',
'0921461869',
'0923335798',
'0923859367',
'0927150383',
'0927921577',
'0928369461',
'0928892223',
'0940607823',
'0941342289',
'0941890253',
'0942248436',
'0942376963',
'0950619759',
'0956743157',
'0956845309',
'0957057458',
'0957554280',
'0957857857',
'0958686289',
'1003976766',
'1004447841',
'1103560023',
'1202167761',
'1205131350',
'1205859901',
'1206303982',
'1207101575',
'1207115716',
'1314280973',
'1713988291',
'1714128863',
'1717478208',
'1717868937',
'1751322296',
'1752296853',
'1804813432',
'1805274063']
        carrera = 126
        periodo = 317
        cont = 0
        materias = []
        ids_asignaturamalla = [10623,10627]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            for asigmal_id in ids_asignaturamalla:
                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10623:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    #------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_ppp_I in cedulas_ppp_I:
                    # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_ppp_I)
                        for matricula in matriculas:
                            if matricula:
                                asignatura_aprobada = RecordAcademico.objects.filter(status=True, asignaturamalla_id = asigmal_id, inscripcion = matricula.inscripcion, aprobada = True).exists()
                                if not asignatura_aprobada:
                                    materiaasignadas_false = MateriaAsignada.objects.filter(status=False, materia__status=True,
                                                                                      materia__nivel__status=True,
                                                                                      materia__asignaturamalla_id=asigmal_id,
                                                                                      matricula=matricula)

                                    materiaasignadas_retirada = MateriaAsignada.objects.filter(status=True,
                                                                                            materia__status=True,
                                                                                            materia__nivel__status=True,
                                                                                            materia__asignaturamalla_id=asigmal_id,
                                                                                            matricula=matricula, retiramateria = True)
                                    if materiaasignadas_false:
                                        for materiaasignada in materiaasignadas_false:
                                            materia = materiaasignada.materia
                                            matricula = materiaasignada.matricula
                                            cont += 1
                                            materia.cupo += 1
                                            materia.totalmatriculadocupoadicional += 1
                                            materia.save()

                                            materiaasignada.status = True
                                            materiaasignada.save()
                                            matricula.actualizar_horas_creditos()
                                            materias.append(materia)

                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - '  + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'AGREGADA')

                                    if materiaasignadas_retirada:
                                        for materiaasignada in materiaasignadas_retirada:
                                            materia = materiaasignada.materia
                                            matricula = materiaasignada.matricula
                                            cont += 1
                                            materia.cupo += 1
                                            materia.totalmatriculadocupoadicional += 1
                                            materia.save()

                                            materiaasignada.retiramateria = False
                                            materiaasignada.save()
                                            matricula.actualizar_horas_creditos()
                                            materias.append(materia)
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'YA NO RETIRADA')

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                elif asigmal_id == 10627:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_ppp_II in cedulas_ppp_II:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_ppp_II)
                        for matricula in matriculas:
                            if matricula:
                                asignatura_aprobada = RecordAcademico.objects.filter(status=True,
                                                                                     asignaturamalla_id=asigmal_id,
                                                                                     inscripcion=matricula.inscripcion,
                                                                                     aprobada=True).exists()

                                if not asignatura_aprobada:
                                    materiaasignadas_false = MateriaAsignada.objects.filter(status=False,
                                                                                            materia__status=True,
                                                                                            materia__nivel__status=True,
                                                                                            materia__asignaturamalla_id=asigmal_id,
                                                                                            matricula=matricula)

                                    materiaasignadas_retirada = MateriaAsignada.objects.filter(status=True,
                                                                                               materia__status=True,
                                                                                               materia__nivel__status=True,
                                                                                               materia__asignaturamalla_id=asigmal_id,
                                                                                               matricula=matricula,
                                                                                               retiramateria=True)
                                    if materiaasignadas_false:
                                        for materiaasignada in materiaasignadas_false:
                                            materia = materiaasignada.materia
                                            matricula = materiaasignada.matricula
                                            cont += 1
                                            materia.cupo += 1
                                            materia.totalmatriculadocupoadicional += 1
                                            materia.save()

                                            materiaasignada.status = True
                                            materiaasignada.save()
                                            matricula.actualizar_horas_creditos()
                                            materias.append(materia)
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - '  + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'AGREGADA')
                                    if materiaasignadas_retirada:
                                        for materiaasignada in materiaasignadas_retirada:
                                            materia = materiaasignada.materia
                                            matricula = materiaasignada.matricula
                                            cont += 1
                                            materia.cupo += 1
                                            materia.totalmatriculadocupoadicional += 1
                                            materia.save()

                                            materiaasignada.retiramateria = False
                                            materiaasignada.save()
                                            matricula.actualizar_horas_creditos()
                                            materias.append(materia)
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'YA NO RETIRADA')

            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    materia.crear_actualizar_estudiantes_curso(moodle,2)

            # print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def carga_de_candidatos_a_presidentes_actualizado():
    from inno.models import EstudiantesCandidatosaPresidentesdeCurso
    from sga.models import MatriculacionPrimerNivelCarrera, Periodo, AsignaturaMalla, Matricula, MateriaAsignada, \
        RecordAcademico, Notificacion
    from collections import Counter
    from django.db import transaction
    try:
        periodo = Periodo.objects.get(status=True, pk=336)
        carreras = []
        inscripciones = []
        notarecord = 0.0
        carrera_admision = 0
        id_configuracion_admision_pregrado = 0
        bandera = False
        matriculas = None
        contador_registro = 0
        cant_materias_estudiante = 0

        id_configuracion_admision_pregrado = MatriculacionPrimerNivelCarrera.objects.values_list('configuracion_id',flat=True).filter(status=True, ejecutoaccion=True).order_by('configuracion_id').last()

        # carreras = MatriculacionPrimerNivelCarrera.objects.values_list('carrerapregrado_id',flat=True).filter(status=True, ejecutoaccion=True, configuracion_id = id_configuracion_admision_pregrado)
        carreras = [133]
        for carrera in carreras:
            with transaction.atomic():
                # ELIMINAR LISTADO ANTERIOR PARA REALIZAR ALGUNA MODIFICACION
                EstudiantesCandidatosaPresidentesdeCurso.objects.filter(status=True,carrera_id=carrera, periodo_id=int(periodo.pk)).update(status=False)
                niveles_carrera = AsignaturaMalla.objects.values_list('nivelmalla__orden', 'nivelmalla__nombre').filter(status=True, malla__carrera_id=carrera, malla__status=True).order_by('nivelmalla__orden').distinct()

                for nivel in niveles_carrera:
                    matriculas = Matricula.objects.filter(status=True, nivel__periodo=periodo,
                                                          inscripcion__carrera_id=carrera,
                                                          nivelmalla__orden=nivel[0]).order_by('nivelmalla__orden')

                    for matricula in matriculas:
                        mi_malla = matricula.inscripcion.mi_malla()
                        cant_asignatura_malla = AsignaturaMalla.objects.filter(status=True, malla = mi_malla, malla__carrera=matricula.inscripcion.carrera,nivelmalla=matricula.nivelmalla).exclude(
                            itinerario__gt=0).exclude(ejeformativo_id__in=[4, 9, 11,12]).count()
                        # cant_asignatura_malla = list(filter(lambda e: e.malla.uso_en_periodo(periodo), asigmal)).__len__()
                        cant_materias_estudiante_nivel = MateriaAsignada.objects.filter(status=True,matricula=matricula, retiramateria=False, materia__asignaturamalla__nivelmalla=matricula.nivelmalla).exclude(
                            materia__asignaturamalla__itinerario__gt=0).exclude(materia__asignaturamalla__ejeformativo_id__in=[4, 9, 11, 12]).count()
                        # if cant_asignatura_malla == cant_materias_estudiante_total:
                        #     cant_materias_estudiante_nivel = MateriaAsignada.objects.filter(status=True,
                        #                                                               matricula=matricula,
                        #                                                               retiramateria=False,
                        #                                                               materia__asignaturamalla__nivelmalla=matricula.nivelmalla).exclude(materia__asignaturamalla__itinerario__gt=0).exclude(materia__asignaturamalla__ejeformativo_id__in=[4, 9, 11 ,12]).count()

                            # cant_asignaturas_aprobadas_en_el_nivel = RecordAcademico.objects.filter(status=True,
                            #                                                                         inscripcion=matricula.inscripcion,
                            #                                                                         asignaturamalla__nivelmalla=matricula.nivelmalla,
                            #                                                                         aprobada=True).exclude(asignaturamalla__itinerario__gt=0).exclude(asignaturamalla__ejeformativo_id__in=[4, 9, 11]).count()
                            # cant_materias_estudiante += cant_asignaturas_aprobadas_en_el_nivel
                        if cant_asignatura_malla == cant_materias_estudiante_nivel:
                            if matricula.nivelmalla.id == 1:
                                carrera_admision = list(
                                    MatriculacionPrimerNivelCarrera.objects.values_list('carreraadmision_id',
                                                                                        flat=True).filter(
                                        status=True, carrerapregrado_id=carrera,
                                        configuracion_id=id_configuracion_admision_pregrado).distinct())[0]
                                materia_asignada_admision = MateriaAsignada.objects.values_list('notafinal',
                                                                                                flat=True).filter(
                                    status=True,
                                    matricula__inscripcion__persona__cedula=matricula.inscripcion.persona.cedula,
                                    matricula__inscripcion__carrera__id=carrera_admision, estado=1)
                                if materia_asignada_admision:
                                    notarecord = round(sum(materia_asignada_admision) / materia_asignada_admision.count(), 2)
                            else:
                                notarecord = matricula.inscripcion.promedio_record()
                            if matricula.tipomatriculalumno() == 'REGULAR':
                                materiasasignadas = MateriaAsignada.objects.filter(status=True,matricula=matricula, retiramateria=False)
                                bandera = False
                                if materiasasignadas:
                                    for materiaasignada in materiasasignadas:
                                        if materiaasignada.cantidad_matriculas() > 1:
                                            bandera = True
                                            break

                                    if not bandera == True:
                                        paralelos_estudiante = list(
                                            materiasasignadas.values_list('materia__paralelo', flat=True))
                                        contador = Counter(paralelos_estudiante)
                                        paralelo_perteneciente = contador.most_common(1)[0][0]

                                        inscripciones.append(matricula.nivelmalla.nombre)
                                        sexo = ''
                                        if matricula.inscripcion.persona.sexo.id == 1:
                                            sexo = 'MUJER'
                                        else:
                                            sexo = 'HOMBRE'

                                        if not EstudiantesCandidatosaPresidentesdeCurso.objects.filter(status=True,
                                                                                                       periodo_id=int(
                                                                                                           periodo.pk),
                                                                                                       matricula=int(
                                                                                                           matricula.pk),
                                                                                                       inscripcion=int(
                                                                                                           matricula.inscripcion.pk),
                                                                                                       carrera_id=int(
                                                                                                           carrera)).exists():
                                            presidentes = EstudiantesCandidatosaPresidentesdeCurso(status=True,
                                                                                                   periodo_id=int(periodo.pk),
                                                                                                   periodo_nombre=str(periodo.nombre),
                                                                                                   carrera_id=int(carrera),
                                                                                                   inscripcion=int(matricula.inscripcion.pk),
                                                                                                   matricula=int(matricula.pk),
                                                                                                   cedula=str(
                                                                                                       matricula.inscripcion.persona.cedula),
                                                                                                   nombres=str(
                                                                                                       matricula.inscripcion.persona.nombre_completo_inverso()),
                                                                                                   correo=str(
                                                                                                       matricula.inscripcion.persona.emailinst),
                                                                                                   telefono=str(
                                                                                                       matricula.inscripcion.persona.telefono),
                                                                                                   sexo=sexo,
                                                                                                   carrera=str(matricula.inscripcion.carrera.nombre),
                                                                                                   orden=int(nivel[0]),
                                                                                                   nivel=str(nivel[1]),
                                                                                                   paralelo=str(paralelo_perteneciente),
                                                                                                   promedio_final=str(notarecord))
                                            presidentes.save()
                                            contador_registro += 1
                                            print(str(contador_registro) + ' - ' + str(matricula.inscripcion.persona.cedula) + ' - ' + str(matricula.inscripcion.persona.nombre_completo_inverso()) + ' - ' + str(matricula.inscripcion.carrera.nombre) + ' - ' + str(nivel[1]) + ' - ' + str(paralelo_perteneciente) + ' - ' + str(notarecord) )

    except Exception as ex:
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=29898, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
        transaction.set_rollback(True)
        print('error: %s' % ex)

# carga_de_candidatos_a_presidentes_actualizado()

## EJECUTAR DESDE AQUÍ
def DesEnrolarMoodle(materia):
    from django.db import connections
    from sga.models import Notificacion
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        noti = Notificacion(titulo='Error',
                                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                                ex, sys.exc_info()[-1].tb_lineno),
                                            destinatario_id=38488, url="",
                                            prioridad=1, app_label='SGA',
                                            fecha_hora_visible=datetime.now() + timedelta(days=1),
                                            tipo=2, en_proceso=False, error=True)
                        noti.save()
                        pass
def desmatricular_Idiomas_titulacion():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion,PreInscripcionPracticasPP
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_thesis_I = ['1750508796',
'1351593767',
'0705674786',
'1350523690',
'1720179231',
'0951236041',
'1600812737',
'0951932920',
'0929818870',
'1104274400',
'0942509779',
'0956554935',
'0926602152',
'0958588295',
'0707042586',
'0928826007',
'0952550010',
'1850454370',
'0930612932',
'0954919486',
'0957586373',
'1729779262',
'0706515939',
'0922836556',
'0942361270',
'0750111171',
'0850640806',
'0925520017',
'2350574824',
'1723504088',
'0707375564',
'0956801252',
'1315623155',
'1754590907',
'1105571648',
'2300545353',
'0950338087',
'0915827638',
'1725683393',
'0927396358',
'1723147102']
        carrera = 129
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_thesis_I = []
        ids_asignaturamalla = [11003]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            ## --------------- PRE INSCRIPCION PRACTICAS STATUS FALSE
            # preinscripcion = PreInscripcionPracticasPP.objects.get(status=True, pk=36)
            # preinscripciones = preinscripcion.detallepreinscripcionpracticaspp_set.filter(status=True, inscripcion__persona__cedula__in = cedulas_thesis_I).update(status = False)
            for asigmal_id in ids_asignaturamalla:

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 11003:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_thesis_I in cedulas_thesis_I:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_thesis_I)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_thesis_I.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - '  + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)


            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)
                    # DesEnrolarMoodle(materia)
            # if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()





def DesEnrolarMoodle(materia):
    from django.db import connections
    from sga.models import Notificacion
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        noti = Notificacion(titulo='Error',
                                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                                ex, sys.exc_info()[-1].tb_lineno),
                                            destinatario_id=38488, url="",
                                            prioridad=1, app_label='SGA',
                                            fecha_hora_visible=datetime.now() + timedelta(days=1),
                                            tipo=2, en_proceso=False, error=True)
                        noti.save()
                        pass
def desmatricular_Comunicacion_titulacion_I_y_II():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion,PreInscripcionPracticasPP
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_titulacion = ['0603889940']
        carrera = 131
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_thesis_I = []
        ids_asignaturamalla = [10862,10868]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            ## --------------- PRE INSCRIPCION PRACTICAS STATUS FALSE
            # preinscripcion = PreInscripcionPracticasPP.objects.get(status=True, pk=36)
            # preinscripciones = preinscripcion.detallepreinscripcionpracticaspp_set.filter(status=True, inscripcion__persona__cedula__in = cedulas_titulacion).update(status = False)
            for asigmal_id in ids_asignaturamalla:

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10862:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_titulacion in cedulas_titulacion:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_titulacion)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_thesis_I.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(
                                                    matricula.inscripcion.persona.cedula) + ' - '  + str(
                                                    matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(
                                                    matricula.inscripcion.persona.cedula) + ' - ' + str(
                                                    matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)


                if asigmal_id == 10868:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_titulacion in cedulas_titulacion:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_titulacion)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_thesis_I.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(
                                                    matricula.inscripcion.persona.cedula) + ' - '  + str(
                                                    matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            if DEBUG: print(
                                                str(cont) + ' - ' + str(
                                                    matricula.inscripcion.persona.cedula) + ' - ' + str(
                                                    matricula.inscripcion) + ' - ' + str(
                                                    matricula.inscripcion.carrera) + ' - ' + str(
                                                    materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)


            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)
                    # DesEnrolarMoodle(materia)
            # if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def DesEnrolarMoodle(materia):
    from django.db import connections
    from moodle import moodle
    if materia.coordinacion().id == 9:
        cursor = connections['db_moodle_virtual'].cursor()
        tipourl = 2
    elif materia.coordinacion().id == 7:
        cursor = connections['moodle_pos'].cursor()
        tipourl = 3
    else:
        cursor = connections['moodle_db'].cursor()
        tipourl = 1
    #################################################################################################################
    # QUITAR ESTUDIANTE
    #################################################################################################################
    if materia.idcursomoodle:
        cursoid = materia.idcursomoodle
        idusers = ""
        for x in materia.materiaasignada_set.select_related().filter(status=True, retiramateria=False).values_list('matricula__inscripcion__persona__usuario__username', flat=False):
            idusers += "'%s'," % x[0]
        docentes = materia.mis_profesores()
        for curpro in docentes:
            profesor = curpro.profesor
            if profesor and profesor.persona.usuario and not 'POR DEFINIR' in profesor.persona.nombres:
                username = profesor.persona.usuario.username
                idusers += "'%s'," % username
        queryest = """
                        SELECT DISTINCT asi.userid, asi.roleid
                        FROM  mooc_role_assignments asi
                        INNER JOIN mooc_user user2 on user2.id=asi.userid
                        INNER JOIN MOOC_CONTEXT CON ON asi.CONTEXTID=CON.ID AND ASI.ROLEID=%s AND CON.INSTANCEID=%s AND user2.username not in(%s'')
                """ % (materia.nivel.periodo.rolestudiante, cursoid, idusers)
        cursor.execute(queryest)
        rowest = cursor.fetchall()
        if rowest:
            for deluserest in rowest:
                for intento in range(1, 4):
                    try:
                        unrolest = moodle.UnEnrolarCurso(materia.nivel.periodo, tipourl, deluserest[1], deluserest[0], cursoid)
                        break
                    except Exception as ex:
                        print("Ups, error al eliminar rol %s" % ex)
                        pass
def desmatricular_TS_Inter_Prof_II():
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction
    from settings import DEBUG
    from sga.models import MateriaAsignada, Materia, Matricula, Notificacion,PreInscripcionPracticasPP
    from matricula.models import DetalleRubroMatricula
    from moodle import moodle
    try:
        #----------------------------------------CAMBIAR ESTAS VARIABLES PARA LAS DEMAS CARRERAS-----------------------------------------
        cedulas_int_prof_II = ['0927402651']
        carrera = 130
        periodo = 317
        cont = 0
        materias = []
        cedulasconrubros_int_prof_II = []
        ids_asignaturamalla = [10787]
        # -------------------------------------------------------------------------------------------------------------------------------

        with transaction.atomic():
            ## --------------- PRE INSCRIPCION PRACTICAS STATUS FALSE
            preinscripcion = PreInscripcionPracticasPP.objects.get(status=True, pk=36)
            preinscripciones = preinscripcion.detallepreinscripcionpracticaspp_set.filter(status=True, inscripcion__persona__cedula__in = cedulas_int_prof_II).update(status = False)
            for asigmal_id in ids_asignaturamalla:

                # ------------------------------------------CAMBIAR EL ID DE LA ASIGNATURA---------------------------------
                if asigmal_id == 10787:
                # ----------------------------------------------------------------------------------------------------------
                    cont = 0
                    # ------------------------------------------CAMBIAR EL ARREGLO DE LA CEDULA---------------------------------
                    for cedula_int_prof_II in cedulas_int_prof_II:
                        # ---------------------------------------------------------------------------------------------------------
                        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=periodo,
                                                              inscripcion__carrera_id=carrera,
                                                              inscripcion__persona__cedula=cedula_int_prof_II)
                        for matricula in matriculas:
                            if matricula:
                                materiaasignadas = MateriaAsignada.objects.filter(status=True,
                                                                                  materia__status=True,
                                                                                  materia__nivel__status=True,
                                                                                  materia__asignaturamalla_id=asigmal_id,
                                                                                  matricula=matricula)

                                for materiaasignada in materiaasignadas:
                                    if materiaasignada:
                                        materia = materiaasignada.materia
                                        matricula = materiaasignada.matricula
                                        cont += 1
                                        materia.cupo -= 1
                                        materia.totalmatriculadocupoadicional -= 1
                                        materia.save()
                                        rubro_asignatura = DetalleRubroMatricula.objects.filter(
                                            matricula=matricula, materia=materia)
                                        # if matricula.total_saldo_rubro() > 0:
                                        if rubro_asignatura.first():
                                            cedulasconrubros_int_prof_II.append(
                                                matricula.inscripcion.persona.cedula)
                                            materiaasignada.retiramateria = True
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - '  + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'RETIRADA')
                                        else:
                                            materiaasignada.status = False
                                            # if DEBUG: print(
                                            #     str(cont) + ' - ' + str(
                                            #         matricula.inscripcion.persona.cedula) + ' - ' + str(
                                            #         matricula.inscripcion) + ' - ' + str(
                                            #         matricula.inscripcion.carrera) + ' - ' + str(
                                            #         materiaasignada.materia) + ' - ' + 'ELIMINADA')
                                        materiaasignada.save()
                                        matricula.actualizar_horas_creditos()
                                        materias.append(materia)


            if len(materias) > 0:
                arreglo_materias = list(set(materias))
                for materia in arreglo_materias:
                    funcionlocal.get("DesEnrolarMoodle")(materia)
                    # DesEnrolarMoodle(materia)
            # if DEBUG: print('------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def asignar_encuesta_masiva_seguimiento_silabo():
    try:
        from sga.models import Periodo, Inscripcion, Matricula, MateriaAsignada
        from inno.models import EncuestaGrupoEstudianteSeguimientoSilabo, InscripcionEncuestaEstudianteSeguimientoSilabo
        from settings import DEBUG
        from datetime import datetime
        import sys
        from django.db import transaction
        with transaction.atomic():
            grupo_encuesta_estudiante_ID = 93
            # PARA HACER OTRO APARTADO DE ENCUESTA (MATERIAS PRACTICAS)
            # grupo_encuesta_estudiante_practica_ID = 82
            fecha_inicio_encuesta = '2024-10-10'
            fecha_fin_encuesta = '2024-10-18'
            periodo = Periodo.objects.get(status=True,pk=336)
            id_encuesta_seguimiento_silabo = EncuestaGrupoEstudianteSeguimientoSilabo.objects.values_list('id',flat=True).filter(status=True, encuestagrupoestudiantes_id=grupo_encuesta_estudiante_ID).order_by('id').last()
            # PARA HACER OTRO APARTADO DE ENCUESTA (MATERIAS PRACTICAS)
            # id_encuesta_practica_seguimiento_silabo = EncuestaGrupoEstudianteSeguimientoSilabo.objects.values_list('id',flat=True).filter(status=True, encuestagrupoestudiantes_id=grupo_encuesta_estudiante_practica_ID).order_by('id').last()
            encuesta_est_seg_silabo = EncuestaGrupoEstudianteSeguimientoSilabo.objects.get(pk=id_encuesta_seguimiento_silabo)
            # PARA HACER OTRO APARTADO DE ENCUESTA (MATERIAS PRACTICAS)
            # encuesta_est_practica_seg_silabo = EncuestaGrupoEstudianteSeguimientoSilabo.objects.get(pk=id_encuesta_practica_seguimiento_silabo)
            if not EncuestaGrupoEstudianteSeguimientoSilabo.objects.filter(status=True, periodo = periodo, encuestagrupoestudiantes_id = grupo_encuesta_estudiante_ID).exists():
                encuesta_estudiante_silabo = encuesta_est_seg_silabo
                encuesta_estudiante_silabo.fechainicioencuesta = fecha_inicio_encuesta
                encuesta_estudiante_silabo.fechafinencuesta = fecha_fin_encuesta
                encuesta_estudiante_silabo.periodo = periodo
                encuesta_estudiante_silabo.save()
            # PARA HACER OTRO APARTADO DE ENCUESTA (MATERIAS PRACTICAS)
            # if not EncuestaGrupoEstudianteSeguimientoSilabo.objects.filter(status=True, periodo = periodo, encuestagrupoestudiantes_id = grupo_encuesta_estudiante_practica_ID).exists():
            #     encuesta_estudiante_silabo_practica = encuesta_est_practica_seg_silabo
            #     encuesta_estudiante_silabo_practica.fechainicioencuesta = fecha_inicio_encuesta
            #     encuesta_estudiante_silabo_practica.fechafinencuesta = fecha_fin_encuesta
            #     encuesta_estudiante_silabo_practica.periodo = periodo
            #     encuesta_estudiante_silabo_practica.encuesta_practica = True
            #     encuesta_estudiante_silabo_practica.save()

            inscripciones = Inscripcion.objects.values_list('id',flat=True).filter(
                status=True,
                matricula__retiradomatricula=False,
                matricula__nivel__periodo_id=periodo,
                coordinacion_id__in=[1, 2, 3, 4, 5])
            cantidad_ins = inscripciones.count()
            cont = 0
            for inscripcion in inscripciones:
                cont += 1
                ids_matriculas = Matricula.objects.values_list('id', flat=True).filter(
                    inscripcion_id=inscripcion,
                    nivel__periodo_id=periodo,
                    retiradomatricula = False,
                    status=True)
                if ids_matriculas:
                    for id_matricula in ids_matriculas:
                        ids_materias = MateriaAsignada.objects.values_list('materia_id',
                                                                           flat=True).filter(
                            status=True,
                            matricula_id=id_matricula,
                            materia__profesormateria__status=True,
                            retiramateria = False,
                            materia__profesormateria__tipoprofesor__in=[
                                1, 14],
                            materia__profesormateria__activo=True,
                            materia__profesormateria__hora__gt=0,
                            materia__profesormateria__principal=True,
                            materia__profesormateria__desde__lte=datetime.now().date(),
                            materia__profesormateria__hasta__gte=datetime.now().date(),
                            materia__asignatura__modulo = False
                        ).exclude(materia__asignatura__nombre__iexact = 'internado')
                        # PARA HACER OTRO APARTADO DE ENCUESTA (MATERIAS PRACTICAS)
                        # ids_materias_ape = ids_materias.filter(materia__asignaturamalla__horasapetotal__gt = 0)
                        # ids_materias = ids_materias.exclude(materia__asignaturamalla__horasapetotal__gt = 0)
                        encuesta_seguimiento = None
                        if ids_materias:
                            for id_mat in ids_materias:
                                if not InscripcionEncuestaEstudianteSeguimientoSilabo.objects.filter(
                                        encuesta_id=grupo_encuesta_estudiante_ID,
                                        inscripcion_id=inscripcion,
                                        materia_id=id_mat,
                                        status=True).exists():
                                    encuesta_seguimiento = InscripcionEncuestaEstudianteSeguimientoSilabo(
                                        encuesta_id=grupo_encuesta_estudiante_ID,
                                        inscripcion_id=inscripcion,
                                        materia_id=id_mat)
                                    encuesta_seguimiento.save()
                        # PARA HACER OTRO APARTADO DE ENCUESTA (MATERIAS PRACTICAS)
                        # if ids_materias_ape:
                        #     for id_mat_ape in ids_materias_ape:
                        #         if not InscripcionEncuestaEstudianteSeguimientoSilabo.objects.filter(
                        #                 encuesta_id=grupo_encuesta_estudiante_practica_ID,
                        #                 inscripcion_id=inscripcion,
                        #                 materia_id=id_mat_ape,
                        #                 status=True).exists():
                        #             encuesta_seguimiento = InscripcionEncuestaEstudianteSeguimientoSilabo(
                        #                 encuesta_id=grupo_encuesta_estudiante_practica_ID,
                        #                 inscripcion_id=inscripcion,
                        #                 materia_id=id_mat_ape)
                        #             encuesta_seguimiento.save()
                        if DEBUG: print(str(cont) + ' / ' + str(cantidad_ins))
                        if DEBUG: print(str(encuesta_seguimiento))
                        if encuesta_seguimiento == None:
                            if DEBUG: print('Inscripcion ' + str(inscripcion) + ' - Matricula: ' + str(id_matricula))
            if DEBUG: print('-------PROCESO FINALIZADO-------')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
asignar_encuesta_masiva_seguimiento_silabo()


def generar_reporte_estudiantes_psicologia_linea():
    from sga.models import Matricula, AsignaturaMalla, Materia, Notificacion
    import xlwt
    from openpyxl import workbook as openxl
    from openpyxl.styles import Font as openxlFont
    from openpyxl.styles.alignment import Alignment as alin
    from django.db import transaction, connection
    try:
        sql = f'''SELECT 
    pers.cedula AS "CEDULA", 
    CONCAT(pers.apellido1, ' ', pers.apellido2, ' ', pers.nombres) AS "ESTUDIANTE",
    pers.emailinst AS "CORREO INSTITUCIONAL",
    CASE
    		WHEN asigmal2.asignaturapracticas = TRUE THEN 'SI'
    		ELSE 'NO'
    END AS "ASIGNATURA PRACTICA",
    asig.nombre AS "ASIGNATURA MALLA NUEVA",
    nivmal2.nombre AS "NIVEL ASIGNATURA MALLA NUEVA",
    asig2.nombre AS "ASIGNATURA MALLA ANTIGUA",
    nivmal.nombre AS "NIVEL ASIGNATURA MALLA ANTIGUA",
    COALESCE(SUM(CASE 
        WHEN practica.tiposolicitud = 3 THEN practica.horahomologacion 
        ELSE practica.numerohora 
    END), 0) AS "TOTAL HORAS",
    CASE 
        WHEN grad.status = TRUE AND grad.estadograduado = TRUE THEN 'SI'
        ELSE 'NO'
    END AS "ES GRADUADO"
FROM 
    sga_recordacademico recacad 
INNER JOIN 
    sga_asignaturamalla asigmal ON recacad.asignaturamallahistorico_id = asigmal.id
INNER JOIN 
    sga_asignaturamalla asigmal2 ON recacad.asignaturamalla_id = asigmal2.id
INNER JOIN 
    sga_asignatura asig ON recacad.asignatura_id = asig.id
INNER JOIN 
    sga_asignatura asig2 ON asigmal.asignatura_id = asig2.id
INNER JOIN 
    sga_nivelmalla nivmal ON asigmal.nivelmalla_id = nivmal.id
INNER JOIN 
    sga_nivelmalla nivmal2 ON asigmal2.nivelmalla_id = nivmal2.id
INNER JOIN 
    sga_inscripcion ins ON recacad.inscripcion_id = ins.id
INNER JOIN 
    sga_persona pers ON ins.persona_id = pers.id
LEFT JOIN 
    sga_practicaspreprofesionalesinscripcion practica ON ins.id = practica.inscripcion_id
    AND practica.culminada = TRUE 
    AND practica.status = TRUE
LEFT JOIN 
    sga_graduado grad ON ins.id = grad.inscripcion_id
    AND grad.status = TRUE 
    AND grad.estadograduado = TRUE
WHERE 
    recacad.inscripcion_id IN (
        SELECT insmal.inscripcion_id 
        FROM sga_inscripcionmalla insmal 
        WHERE insmal.malla_id = 479
    )
AND 
    recacad.status = TRUE 
AND 
    recacad.asignaturamallahistorico_id IS NOT NULL
GROUP BY 
    pers.cedula, pers.apellido1, pers.apellido2, pers.nombres, pers.emailinst, asig.nombre, nivmal2.nombre, asig2.nombre, nivmal.nombre, grad.status, grad.estadograduado, asigmal2.asignaturapracticas
'''
        cursor = connections['default'].cursor()
        cursor.execute(sql)
        rows_effected = cursor.rowcount
        listado = cursor.fetchall()
        wb = openxl.Workbook()
        wb["Sheet"].title = "piscologia en linea"
        ws = wb.active
        style_title = openxlFont(name='Arial', size=16, bold=True)
        style_cab = openxlFont(name='Arial', size=10, bold=True)
        alinear = alin(horizontal="center", vertical="center")
        alinearizq = alin(horizontal="left", vertical="center")
        response = HttpResponse(content_type="application/ms-excel")
        response[
            'Content-Disposition'] = 'attachment; filename=Reporte de ofertas laborales con postulantes' + '-' + random.randint(
            1, 10000).__str__() + '.xlsx'
        ws.column_dimensions['B'].width = 35
        ws.column_dimensions['C'].width = 35
        ws.column_dimensions['D'].width = 15
        ws.column_dimensions['E'].width = 15
        ws.column_dimensions['F'].width = 35
        ws.column_dimensions['G'].width = 20
        ws.column_dimensions['H'].width = 20
        ws.column_dimensions['I'].width = 20
        ws.column_dimensions['J'].width = 20
        ws.column_dimensions['K'].width = 20


        columns = [u"CEDULA", u"ESTUDIANTE", u"CORREO INSTITUCIONAL", u"ASIGNATURA PRACTICA", u"ASIGNATURA MALLA NUEVA", u"NIVEL ASIGNATURA MALLA NUEVA",
                   u"ASIGNATURA MALLA ANTIGUA", u"NIVEL ASIGNATURA MALLA ANTIGUA", u"TOTAL HORAS PPP", u"ES GRADUADO"
                   ]
        row_num = 1
        for col_num in range(0, len(columns)):
            celda = ws.cell(row=row_num, column=(col_num + 1), value=columns[col_num])
            celda.font = style_cab
        row_num = 2
        for per in listado:
            ws.cell(row=row_num, column=1, value=per[0])
            ws.cell(row=row_num, column=2, value=per[1])
            ws.cell(row=row_num, column=3, value=per[2])
            ws.cell(row=row_num, column=4, value=per[3])
            ws.cell(row=row_num, column=5, value=per[4])
            ws.cell(row=row_num, column=6, value=per[5])
            ws.cell(row=row_num, column=7, value=per[6])
            ws.cell(row=row_num, column=8, value=per[7])
            ws.cell(row=row_num, column=9, value=per[8])
            ws.cell(row=row_num, column=10, value=per[9])
            row_num += 1
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        libre_origen = '/reporte_estudiantes_psicologia_linea.xlsx'
        wb.save(output_folder + libre_origen)
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def migrar_temas_impartidos_a_tabla():
    from sga.models import Materia, Silabo, TemaAsistencia, SubTemaAsistencia, SubTemaAdicionalAsistencia, \
        DiasNoLaborable, DetalleSilaboSemanalSubtema, SolicitudAperturaClase, Periodo, Notificacion
    from inno.models import TemaImpartidoDocente, SubtemaImpartidoDocente
    from settings import DEBUG
    from datetime import datetime, timedelta
    import sys
    from django.db import transaction, connections

    try:
        with transaction.atomic():
            periodo = Periodo.objects.get(status=True, pk=317)
            materias = Materia.objects.filter(status=True, profesormateria__activo=True, profesormateria__status=True,
                                              profesormateria__profesor__coordinacion__id__in=[1,2,3,4,5],
                                              nivel__periodo=periodo, profesormateria__tipoprofesor__in=[1, 14],
                                              profesormateria__principal=True, asignaturamalla__transversal=False,
                                              profesormateria__hora__gt=0).distinct().order_by(
                'asignaturamalla__malla__carrera__nombre', 'asignaturamalla__nivelmalla__nombre')
            cant_materias = materias.count()
            cont_materia = 0
            for materia in materias:
                cont_materia += 1
                cont = 0
                porcentajecumplimiento = 0
                porcentajetotal = 0
                fechaactual = datetime.now().date()
                if silabos := Silabo.objects.filter(status=True, materia_id=materia.id):
                    numeros_semana = [fecha.isocalendar()[1] for fecha in
                                      periodo.diasnolaborable_set.filter(status=True).values_list('fecha', flat=True)]
                    num_sem_dia_no_laborable = list(dict.fromkeys(numeros_semana))
                    silabosemanal = silabos.first().silabosemanal_set.filter(status=True).order_by('numsemana')
                    if silabosemanal:
                        cursor = connections['sga_select'].cursor()
                        for silsem in silabosemanal:
                            fechainicio = silsem.fechainiciosemana
                            fechafin = silsem.fechafinciosemana
                            if fechainicio > fechaactual:
                                break
                            if TemaImpartidoDocente.objects.filter(status=True, materia_id=materia.id,semana=silsem.numsemana, procentaje_tema='-') or not TemaImpartidoDocente.objects.filter(status=True, materia_id=materia.id,semana=silsem.numsemana).exists():
                                sql_tema = f"""SELECT "sga_detallesilabosemanaltema"."id", "sga_temaunidadresultadoprogramaanalitico"."descripcion", "sga_detallesilabosemanaltema"."temaunidadresultadoprogramaanalitico_id" FROM "sga_detallesilabosemanaltema" INNER JOIN "sga_temaunidadresultadoprogramaanalitico" ON ("sga_detallesilabosemanaltema"."temaunidadresultadoprogramaanalitico_id" = "sga_temaunidadresultadoprogramaanalitico"."id") WHERE ("sga_detallesilabosemanaltema"."silabosemanal_id" = {silsem.pk} AND "sga_temaunidadresultadoprogramaanalitico"."status" AND "sga_detallesilabosemanaltema"."status") ORDER BY "sga_temaunidadresultadoprogramaanalitico"."orden" ASC"""
                                cursor.execute(sql_tema)
                                unidadsilsem = cursor.fetchall()

                                num_semana_fechainiciosilabo = fechainicio.isocalendar()[1]
                                if (num_semana_fechainiciosilabo in num_sem_dia_no_laborable):
                                    fechafin += timedelta(weeks=2)
                                else:
                                    fechafin += timedelta(weeks=1)
                                if unidadsilsem:
                                    for tema in unidadsilsem:
                                        if (fechafin <= fechaactual) or (
                                                TemaAsistencia.objects.values('id').filter(fecha__lte=fechafin,
                                                                                           tema=tema[0]).exists()):
                                            cont += 1
                                            if (TemaAsistencia.objects.values('id').filter(fecha__lte=fechafin,
                                                                                           tema=tema[0]).exists()) or (
                                                    TemaAsistencia.objects.values('id').filter(leccion__solicitada=True,
                                                                                               tema=tema[0]).exists()):
                                                porcentajecumplimiento += 1
                                                porcentaje_tema = '100'
                                            else:
                                                porcentaje_tema = '0'
                                        else:
                                            porcentaje_tema = '-'
                                        tema_impartido, created = TemaImpartidoDocente.objects.get_or_create(
                                            materia_id=materia.id,
                                            periodo_id=periodo.id,
                                            periodo_nombre=periodo.nombre,
                                            semana=silsem.numsemana,
                                            fecha_inicio_semana=silsem.fechainiciosemana,
                                            fecha_fin_semana=silsem.fechafinciosemana,
                                            tema_descripcion=tema[1],
                                            defaults={'procentaje_tema': porcentaje_tema, 'status': True}
                                        )
                                        if not created:
                                            tema_impartido.procentaje_tema = porcentaje_tema
                                            tema_impartido.status = True
                                            tema_impartido.save()

                                        sql_subtemas = f"""SELECT "sga_detallesilabosemanalsubtema"."id", "sga_subtemaunidadresultadoprogramaanalitico"."descripcion" FROM "sga_detallesilabosemanalsubtema" INNER JOIN "sga_subtemaunidadresultadoprogramaanalitico" ON ("sga_detallesilabosemanalsubtema"."subtemaunidadresultadoprogramaanalitico_id" = "sga_subtemaunidadresultadoprogramaanalitico"."id") INNER JOIN "sga_temaunidadresultadoprogramaanalitico" ON ("sga_subtemaunidadresultadoprogramaanalitico"."temaunidadresultadoprogramaanalitico_id" = "sga_temaunidadresultadoprogramaanalitico"."id") WHERE ("sga_detallesilabosemanalsubtema"."silabosemanal_id" = {silsem.pk} AND "sga_detallesilabosemanalsubtema"."status" AND "sga_subtemaunidadresultadoprogramaanalitico"."status" AND "sga_subtemaunidadresultadoprogramaanalitico"."temaunidadresultadoprogramaanalitico_id" = {tema[2]} AND "sga_subtemaunidadresultadoprogramaanalitico"."temaunidadresultadoprogramaanalitico_id" IS NOT NULL AND "sga_temaunidadresultadoprogramaanalitico"."status") ORDER BY "sga_subtemaunidadresultadoprogramaanalitico"."orden" ASC"""
                                        cursor.execute(sql_subtemas)
                                        subtemas = cursor.fetchall()
                                        for subtema in subtemas:
                                            if (fechafin <= fechaactual) or (
                                                    SubTemaAsistencia.objects.values('id').filter(
                                                        subtema__silabosemanal=silsem,
                                                        fecha__lte=fechafin,
                                                        subtema=subtema[0]).exists()):
                                                cont += 1
                                                if (
                                                SubTemaAsistencia.objects.values('id').filter(subtema__silabosemanal=silsem,
                                                                                              fecha__lte=fechafin,
                                                                                              subtema=subtema[
                                                                                                  0]).exists()) or (
                                                        SubTemaAsistencia.objects.values('id').filter(
                                                            subtema__silabosemanal=silsem,
                                                            tema__leccion__solicitada=True,
                                                            subtema=subtema[0]).exists()):
                                                    porcentajecumplimiento += 1
                                                    porcentaje_subtema = '100'
                                                else:
                                                    porcentaje_subtema = '0'
                                            else:
                                                porcentaje_subtema = '-'
                                            subtema_impartido, subtema_created = SubtemaImpartidoDocente.objects.get_or_create(
                                                tema=tema_impartido,
                                                subtema_descripcion=subtema[1],
                                                defaults={'procentaje_subtema': porcentaje_subtema, 'status': True}
                                            )
                                            if not subtema_created:
                                                subtema_impartido.procentaje_subtema = porcentaje_subtema
                                                subtema_impartido.status = True
                                                subtema_impartido.save()

                                        subtemaadicional = silsem.subtemaadicionalessilabo_set.values_list('id',
                                                                                                           'subtema').filter(
                                            status=True, tema_id=tema[0]).order_by('id')
                                        for subtemasad in subtemaadicional:
                                            if (fechafin <= fechaactual) or (
                                                    SubTemaAdicionalAsistencia.objects.values('id').filter(
                                                        fecha__lte=fechafin,
                                                        subtema=subtemasad[
                                                            0]).exists()):
                                                cont += 1
                                                if (
                                                        SubTemaAdicionalAsistencia.objects.values('id').filter(
                                                            fecha__lte=fechafin,
                                                            subtema=subtemasad[
                                                                0]).exists()) or (
                                                        SubTemaAdicionalAsistencia.objects.values('id').filter(
                                                            tema__leccion__solicitada=True,
                                                            subtema=subtemasad[0]).exists()):
                                                    porcentajecumplimiento += 1
                                                    porcentaje_subtema = '100'
                                                else:
                                                    porcentaje_subtema = '0'
                                            else:
                                                porcentaje_subtema = '-'
                                            subtema_impartido_adicional, adicional_created = SubtemaImpartidoDocente.objects.get_or_create(
                                                tema=tema_impartido,
                                                subtema_descripcion=subtemasad[1],
                                                defaults={'procentaje_subtema': porcentaje_subtema, 'status': True}
                                            )
                                            if not adicional_created:
                                                subtema_impartido_adicional.procentaje_subtema = porcentaje_subtema
                                                subtema_impartido_adicional.status = True
                                                subtema_impartido_adicional.save()

                if DEBUG: print(str(cont_materia) + ' / ' + str(cant_materias))

    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def vaciar_tablas():
    if DEBUG:
        cursor = connections['sga_select'].cursor()
        lista_tablas_criticas = ["sga_sesionzoom", "sga_respuestaevaluacionacreditacion", "sga_matriculaseguimientotutor", "sga_evaluaciongenerica", "sga_datorespuestaencuesta", "sga_correomatriculaseguimientotutor", "sga_bibliograbiaapasilabo", "sga_auditorianotas", "sga_asistenciamoodle", "sga_actividadessakaialumno", "sagest_registromarcada", "sagest_logrubros", "sagest_logmarcada", "sagest_logdia", "sagest_factura", "inno_solicitudtutoriaindividual", "inno_materiaasignadaplanificacionsedevirtualexamen", "inno_calendariorecursoactividadalumno", "inno_calendariorecursoactividadalumnomotificacion", "sga_correomatriculatutornotificacion", "bd_logentrylogin", "django_admin_log", "sga_notificacion", "django_admin_log_backup", "django_admin_log_backupdos", "bd_geolocation", "bd_geolocationuser"]
        for table in lista_tablas_criticas:
            sql = f"TRUNCATE TABLE {table} CASCADE"
            cursor.execute(sql)

            print(f'{table} is empty...')


def migrar_horas_mallas():
    from sga.models import Periodo, Malla, AsignaturaMalla, Carrera, Coordinacion, Notificacion
    from inno.models import MallaHorasSemanalesComponentes
    from settings import DEBUG
    from datetime import datetime, timedelta
    from django.db import transaction
    try:
        with transaction.atomic():
            periodo_id = 317
            periodo = Periodo.objects.filter(status=True, pk = periodo_id).first()
            coordinaciones = Coordinacion.objects.filter(status=True, pk__in = [1,2,3,4,5])
            mallas_en_uso = []
            for coordinacion in coordinaciones:
                carreras = coordinacion.carrera.filter(status = True)
                mallas = Malla.objects.filter(status = True, vigente = True, carrera__in = carreras )

                for malla in mallas:
                    if malla.uso_en_periodo(periodo):
                        mallas_en_uso.append(malla.id)
                        if DEBUG: print(str(coordinacion.nombre) + ' - ' + str(malla.carrera.nombre))
                        ejes_formativos = malla.ejesformativos_malla().values_list('id',flat=True)
                        niveles_malla = malla.niveles_malla()
                        for nivel in niveles_malla:
                            suma_acd_semanal = 0
                            suma_semanal_componentes = 0
                            suma_total = 0
                            asignaturas_malla = malla.asignaturamalla_set.filter(status=True, ejeformativo_id__in = ejes_formativos, nivelmalla = nivel).filter(Q(itinerario=0) | Q(itinerario__isnull=True)).exclude(ejeformativo_id__in=[4, 9, 11,12]).order_by('nivelmalla')
                            asignaturas_itinerario_malla = malla.asignaturamalla_set.filter(status=True, ejeformativo_id__in = ejes_formativos, nivelmalla = nivel, itinerario__gt = 0).exclude(ejeformativo_id__in=[4, 9, 11,12]).order_by('nivelmalla').first()
                            if asignaturas_itinerario_malla:
                                suma_acd_semanal += round(asignaturas_itinerario_malla.horasacdtotal/16,2)
                                suma_semanal_componentes += round((asignaturas_itinerario_malla.horasapetotal/16) + (asignaturas_itinerario_malla.horasautonomas/16),2)
                            for asignatura in asignaturas_malla:
                                suma_acd_semanal += round(asignatura.horasacdtotal / 16,2)
                                suma_semanal_componentes += round((asignatura.horasapetotal / 16) + (asignatura.horasautonomas / 16),2)
                            suma_total = round(suma_acd_semanal + suma_semanal_componentes,2)
                            horas_semanales = MallaHorasSemanalesComponentes(malla = malla,
                                                                            nivelmalla = nivel,
                                                                            acd_horassemanales = suma_acd_semanal,
                                                                            ape_aa_horassemanales = suma_semanal_componentes,
                                                                            total_horassemanales = suma_total)
                            horas_semanales.save()

            if DEBUG: print('PROCESO FINALIZADO')


    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


# def migrar_temas_impartidos_a_tabla():
#     from sga.models import Materia, Silabo, TemaAsistencia, SubTemaAsistencia, SubTemaAdicionalAsistencia, \
#         DiasNoLaborable, DetalleSilaboSemanalSubtema, SolicitudAperturaClase, Periodo, Notificacion
#     from inno.models import TemaImpartidoDocente, SubtemaImpartidoDocente
#     from settings import DEBUG
#     from datetime import datetime, timedelta
#     import sys
#     from django.db import transaction, connections
#
#     try:
#         with transaction.atomic():
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         noti = Notificacion(titulo='Error',
#                             cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
#                                 ex, sys.exc_info()[-1].tb_lineno),
#                             destinatario_id=38488, url="",
#                             prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
#                             tipo=2, en_proceso=False, error=True)
#         noti.save()


def reporte_datos_estudiantes_nivelacion():
    import xlsxwriter
    import os
    import sys
    import html
    import re
    from django.db import transaction
    from settings import SITE_STORAGE
    from datetime import datetime, timedelta
    from sga.models import SilaboSemanal, Periodo, Materia, DiapositivaSilaboSemanal, CompendioSilaboSemanal, \
        GuiaEstudianteSilaboSemanal, MaterialAdicionalSilaboSemanal, VideoMagistralSilaboSemanal, Notificacion, Matricula, MateriaAsignada, Titulacion
    from socioecon.models import FichaSocioeconomicaINEC

    try:
        with transaction.atomic():
            periodo = Periodo.objects.get(pk=317)
            coordinacion = 9

            dominio_sistema = 'https://sga.unemi.edu.ec'
            output_folder = os.path.join(SITE_STORAGE, 'media')
            if not os.path.exists(output_folder):
                os.makedirs(output_folder)

            nombrearchivo = f"reporte_datos_estudiantes_nivelacion_{coordinacion}v2.xlsx"
            workbook = xlsxwriter.Workbook(os.path.join(output_folder, nombrearchivo))
            ws = workbook.add_worksheet("Estudiantes")

            # Formatos
            fcabeceracolumna = workbook.add_format({
                'font_name': 'Verdana', 'bold': True, 'font_size': 10,
                'bg_color': '#D3D3D3', 'border': 1, 'align': 'center', 'valign': 'vcenter'
            })
            fceldageneral = workbook.add_format({'font_name': 'Verdana', 'font_size': 10, 'border': 1})
            ftitulo2izq = workbook.add_format({
                'font_name': 'Verdana', 'bold': True, 'font_size': 14,
                'align': 'center', 'valign': 'vcenter'
            })
            fhyperlink = workbook.add_format({
                'font_name': 'Verdana', 'font_size': 10, 'font_color': 'blue', 'underline': 1, 'border': 1
            })

            # Títulos
            ws.merge_range(0, 0, 0, 41, 'UNIVERSIDAD ESTATAL DE MILAGRO', ftitulo2izq)
            ws.merge_range(1, 0, 1, 41, 'REPORTE DE ESTUDIANTES DE NIVELACIÓN', ftitulo2izq)
            ws.merge_range(2, 0, 2, 41, 'FECHA: ' + datetime.now().strftime("%d-%m-%Y"), ftitulo2izq)

            # Definir columnas
            columnas = [
                        (u"APELLIDOS", 20),
                        (u"NOMBRES", 20),
                        (u"CARRERA", 60),
                        (u"MODALIDAD", 20),
                        (u"NIVEL", 20),
                        (u"ASIGNATURA", 50),
                        (u"PARALELO", 20),
                        (u"SESIÓN", 15),
                        (u"CÉDULA", 15),
                        (u"EDAD", 10),
                        (u"ESTADO CIVIL", 25),
                        (u"COLEGIO", 60),
                        (u"TIPO COLEGIO", 30),
                        (u"F. BACHILLER", 15),
                        (u"ACCESOS IES PUNTAJE", 20),
                        (u"F. INGRESO PRIMER NIVEL", 20),
                        (u"PROBLEMA DE APRENDIZAJE", 20),
                        (u"TIENE DISCAPACIDAD", 15),
                        (u"DISCAPACIDAD", 15),
                        (u"TIENE TRABAJO", 15),
                        (u"LUGAR TRABAJO", 50),
                        (u"ES CABEZA DE FAMILIA", 20),
                        (u"OCUPACION CABEZA DE FAMILIA", 60),
                        (u"ESTADO DE SALUD", 20),
                        (u"ESTUDIA OTRA CARRERA", 20),
                        (u"TIPO VIVIENDA", 20),
                        (u"VIVIENDA", 20),
                        (u"HORAS USO INTERNET", 20),
                        (u"RECIBE AYUDA FAMILIAR", 20),
                        (u"RECIBE BECA", 15),
                        (u"HIJOS NUMERO", 15),
                        (u"TIENE FAMILIAR ENFERMEDAD", 20),
                        (u"TIENE FAMILIAR DISCAPACIDAD", 20),
                        (u"ESTADO MATERIA", 15),
                        (u"NOTA FINAL", 10),
                        (u"ASISTENCIA FINAL", 10),
                        (u"N1", 10),
                        (u"N2", 10),
                        (u"N3", 10),
                        (u"N4", 10),
                        (u"EX", 10),
                        (u"P", 10)
                        ]

            row_num = 3
            for col_num in range(len(columnas)):
                ws.write(row_num, col_num, columnas[col_num][0], fcabeceracolumna)
                ws.set_column(col_num, col_num, columnas[col_num][1])

            fila = 4

            matriculados_nivelacion = Matricula.objects.filter(status=True, bloqueomatricula=False, retiradomatricula=False, inscripcion__carrera__coordinacion__id=coordinacion, nivel__periodo=periodo)
            lista_materiaasignada = MateriaAsignada.objects.filter(matricula__in=matriculados_nivelacion, status=True, retiramateria=False).order_by('matricula__inscripcion__persona__apellido1', 'materia__asignatura__nombre')


            for e in lista_materiaasignada:

                estudiante = e.matricula.inscripcion.persona
                extensionpersona = estudiante.personaextension_set.filter(status=True).first()
                ficha = FichaSocioeconomicaINEC.objects.filter(persona=estudiante, status=True).first()
                _nivel = e.materia.asignaturamalla.nivelmalla

                ws.write(fila, 0, str(estudiante.apellidos()), fceldageneral)
                ws.write(fila, 1, str(estudiante.nombres), fceldageneral)
                ws.write(fila, 2, str(e.matricula.inscripcion.carrera), fceldageneral)
                ws.write(fila, 3, str(e.matricula.inscripcion.carrera.get_modalidad_display()), fceldageneral)
                ws.write(fila, 4, str(_nivel), fceldageneral)
                ws.write(fila, 5, str(e.materia.asignatura.nombre), fceldageneral)
                ws.write(fila, 6, str(e.materia.paralelo), fceldageneral)
                ws.write(fila, 7, str(e.matricula.nivel.sesion.nombre), fceldageneral)
                ws.write(fila, 8, str(estudiante.identificacion()), fceldageneral)
                ws.write(fila, 9, str(estudiante.edad()), fceldageneral)
                estado_civil = ''
                if estudiante.datos_extension() and estudiante.datos_extension().estadocivil:
                    estado_civil = estudiante.datos_extension().estadocivil.nombre
                ws.write(fila, 10, str(estado_civil), fceldageneral)

                colegio = 'NO REGISTRA'
                tipo_colegio = 'NO REGISTRA'
                if e.matricula.inscripcion.unidadeducativa:
                    _colegio = e.matricula.inscripcion.unidadeducativa
                    colegio = _colegio.nombre
                    tipo_colegio = e.matricula.inscripcion.unidadeducativa.tipocolegio.nombre.upper() if _colegio.tipocolegio else tipo_colegio

                ws.write(fila, 11, str(colegio), fceldageneral)
                ws.write(fila, 12, str(tipo_colegio), fceldageneral)

                titulo_bachiller = estudiante.titulacion_set.filter(status=True, titulo__nivel__id=1).first()
                fecha_bachiller = titulo_bachiller.fechaegresado.strftime("%d/%m/%Y") if titulo_bachiller and titulo_bachiller.fechaegresado else 'NO REGISTRA'
                ws.write(fila, 13, str(fecha_bachiller), fceldageneral)
                ws.write(fila, 14, str(e.matricula.inscripcion.puntajesenescyt), fceldageneral)
                fecha_primernivel = e.matricula.inscripcion.fechainicioprimernivel.strftime("%d/%m/%Y") if e.matricula.inscripcion.fechainicioprimernivel else 'NO REGISTRA'
                ws.write(fila, 15, str(fecha_primernivel), fceldageneral)
                ws.write(fila, 16, str('NO REGISTRA.'), fceldageneral)

                tienediscapacidad, tipodiscapacidad = 'NO', 'NINGUNA'
                if estudiante.tiene_discapasidad():
                    tienediscapacidad = 'SI'
                    if estudiante.tiene_discapasidad().filter(tipodiscapacidad__isnull=False).exists():
                        tipodiscapacidad = estudiante.tiene_discapasidad().first().tipodiscapacidad.nombre
                    else: tipodiscapacidad = 'NO DETERMINADA'

                ws.write(fila, 17, str(tienediscapacidad), fceldageneral)
                ws.write(fila, 18, str(tipodiscapacidad), fceldageneral)

                situacionlaboral = estudiante.personasituacionlaboral_set.filter(status=True).first()
                disponetrabajo = 'SI' if situacionlaboral and situacionlaboral.disponetrabajo else 'NO'
                lugar_trabajo = situacionlaboral.lugartrabajo if situacionlaboral and situacionlaboral.lugartrabajo else 'NO REGISTRA'
                ws.write(fila, 19, str(disponetrabajo), fceldageneral)
                ws.write(fila, 20, str(lugar_trabajo), fceldageneral)

                cabezafamilia = 'SI' if ficha and ficha.escabezafamilia else 'NO'
                ocupacion = ficha.ocupacionjefehogar.nombre if ficha and ficha.ocupacionjefehogar else 'NO REGISTRA'
                ws.write(fila, 21, str(cabezafamilia), fceldageneral)
                ws.write(fila, 22, str(ocupacion), fceldageneral)

                estado_general = ficha.get_estadogeneral_display() if ficha else 'NO REGISTRA'
                ws.write(fila, 23, str(estado_general), fceldageneral)

                otracarrera = e.matricula.inscripcion.matricula_set.filter(status=True,  bloqueomatricula=False, retiradomatricula=False, inscripcion__carrera__coordinacion__id=coordinacion, nivel__periodo=periodo).exclude(inscripcion__carrera=e.matricula.inscripcion.carrera).count()
                estudiaotracarrera = 'SI' if otracarrera > 0 else 'NO'
                ws.write(fila, 24, str(estudiaotracarrera), fceldageneral)

                tipo_vivienda = ficha.tipovivienda.nombre if ficha and ficha.tipovivienda else 'NO REGISTRA'
                nombre_vivienda = ficha.tipoviviendapro.nombre if ficha and ficha.tipoviviendapro else 'NO REGISTRA'
                usainternet = ficha.val_usainternetseism if ficha else 'NO REGISTRA'
                ws.write(fila, 25, str(tipo_vivienda), fceldageneral)
                ws.write(fila, 26, str(nombre_vivienda), fceldageneral)
                ws.write(fila, 27, str(usainternet), fceldageneral)

                esdependiente = 'SI' if ficha and ficha.esdependiente else 'NO'
                ws.write(fila, 28, str(esdependiente), fceldageneral)

                becado = 'SI' if e.matricula.becado else 'NO'
                ws.write(fila, 29, str(becado), fceldageneral)
                hijos = extensionpersona.hijos if extensionpersona and extensionpersona.hijos else '0'
                ws.write(fila, 30, str(hijos), fceldageneral)

                f_enfermedad = 'NO REGISTRA'
                f_discapacidad = 'SI' if estudiante.personadatosfamiliares_set.filter(status=True, tienediscapacidad=True) else 'NO'

                ws.write(fila, 31, str(f_enfermedad), fceldageneral)
                ws.write(fila, 32, str(f_discapacidad), fceldageneral)

                ws.write(fila, 33, str(e.estado.nombre), fceldageneral)


                ws.write(fila, 34, str(e.notafinal), fceldageneral)
                ws.write(fila, 35, str(e.asistenciafinal), fceldageneral)

                # registros_notas = e.evaluaciongenerica_set.filter(status=True)

                celda = 36
                for campo in e.materia.modeloevaluativo.campos():
                    nota = round(e.valor_nombre_campo(campo.nombre), campo.decimales)
                    ws.write(fila, celda, str(nota), fceldageneral)
                    celda += 1

                #
                # _n1 = '0.0'
                # if registros_notas.values("valor").filter(detallemodeloevaluativo__nombre='N1'):
                #     _n1 = e.evaluaciongenerica_set.values("valor").filter(detallemodeloevaluativo__nombre='N1')[0].get("valor")
                # ws.write(fila, 36, str(_n1), fceldageneral)
                #
                # _n2 = '0.0'
                # if registros_notas.values("valor").filter(detallemodeloevaluativo__nombre='N2'):
                #     _n2 = e.evaluaciongenerica_set.values("valor").filter(detallemodeloevaluativo__nombre='N1')[0].get("valor")
                # ws.write(fila, 37, str(_n2), fceldageneral)
                #
                # _n3 = '0.0'
                # if registros_notas.values("valor").filter(detallemodeloevaluativo__nombre='N3'):
                #     _n3 = e.evaluaciongenerica_set.values("valor").filter(detallemodeloevaluativo__nombre='N1')[0].get("valor")
                # ws.write(fila, 38, str(_n3), fceldageneral)
                #
                # _n4 = '0.0'
                # if registros_notas.values("valor").filter(detallemodeloevaluativo__nombre='N4'):
                #     _n4 = e.evaluaciongenerica_set.values("valor").filter(detallemodeloevaluativo__nombre='N1')[0].get("valor")
                # ws.write(fila, 39, str(_n4), fceldageneral)
                #
                # _ex = '0.0'
                # if registros_notas.values("valor").filter(detallemodeloevaluativo__nombre='EX'):
                #     _ex = e.evaluaciongenerica_set.values("valor").filter(detallemodeloevaluativo__nombre='EX')[0].get("valor")
                # ws.write(fila, 40, str(_ex), fceldageneral)
                #
                # _p = '0.0'
                # if registros_notas.values("valor").filter(detallemodeloevaluativo__nombre='P'):
                #     _ex = e.evaluaciongenerica_set.values("valor").filter(detallemodeloevaluativo__nombre='P')[0].get("valor")
                # ws.write(fila, 41, str(_p), fceldageneral)

                fila += 1


            workbook.close()
            noti = Notificacion(titulo='Proceso terminado',
                                cuerpo=f"Archivo guardado en: {os.path.join(output_folder, nombrearchivo)}",
                                destinatario_id=28157, url="",
                                prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                                tipo=2, en_proceso=False, error=True)
            noti.save()

    except Exception as ex:
        err = 'Error on line {}'.format(sys.exc_info()[-1].tb_lineno)
        msg_err = f"Ocurrio un error: {ex.__str__()}. {err}"
        print('%s' % msg_err)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=28157, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def masivo_observacion_perdida():
    import xlsxwriter
    import os
    import sys
    import html
    import re
    from django.db import transaction
    from settings import SITE_STORAGE, ADMINISTRADOR_ID
    from datetime import datetime, timedelta
    from sga.models import SilaboSemanal, Periodo, Materia, DiapositivaSilaboSemanal, CompendioSilaboSemanal, \
        GuiaEstudianteSilaboSemanal, MaterialAdicionalSilaboSemanal, VideoMagistralSilaboSemanal, Notificacion, Matricula, MateriaAsignada, Titulacion, PerdidaGratuidad
    from django.core.exceptions import ObjectDoesNotExist

    try:
        with transaction.atomic():
            matriculastodas = Matricula.objects.filter(status=True, nivel__periodo_id=336, nivelmalla_id=1,inscripcion__carrera_id=131, pk__in = [903894,903944,903977])
            for matricula in matriculastodas:
                if matricula.inscripcion.estado_gratuidad == 3:
                    observacion = f"Reportado por la SENESCYT"
                    observacion = f"{observacion}, Registra TITULO TERCER NIVEL REGISTRO SNIESE"
                    try:
                        ePerdidaGratuidad = PerdidaGratuidad.objects.get(inscripcion=matricula.inscripcion)
                    except ObjectDoesNotExist:
                        ePerdidaGratuidad = PerdidaGratuidad(inscripcion=matricula.inscripcion)
                    ePerdidaGratuidad.motivo = 1
                    ePerdidaGratuidad.titulo = None
                    ePerdidaGratuidad.titulo_sniese = True
                    ePerdidaGratuidad.observacion = observacion
                    ePerdidaGratuidad.save(usuario_id=ADMINISTRADOR_ID)
                    matricula.inscripcion.gratuidad = False
                    matricula.inscripcion.estado_gratuidad = 3
                    matricula.inscripcion.save(usuario_id=ADMINISTRADOR_ID)
    except Exception as ex:
        err = 'Error on line {}'.format(sys.exc_info()[-1].tb_lineno)
        msg_err = f"Ocurrio un error: {ex.__str__()}. {err}"
        print('%s' % msg_err)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()

# masivo_observacion_perdida()



def actualizacion_cierre_materias():
    import xlsxwriter
    import os
    import sys
    import html
    import re
    from django.db import transaction
    from settings import SITE_STORAGE, ADMINISTRADOR_ID, DEBUG
    from datetime import datetime, timedelta
    from sga.models import SilaboSemanal, Periodo, Materia, DiapositivaSilaboSemanal, CompendioSilaboSemanal, \
        GuiaEstudianteSilaboSemanal, MaterialAdicionalSilaboSemanal, VideoMagistralSilaboSemanal, Notificacion, \
        Matricula, MateriaAsignada, Titulacion, PerdidaGratuidad
    from django.core.exceptions import ObjectDoesNotExist

    try:
        with transaction.atomic():
            cont = 0
            nota = 0
            periodo = Periodo.objects.get(pk=317, status=True)
            ids_materia = []
            arreglo_sin_duplicados = []
            matriculas = Matricula.objects.filter(status=True, retiradomatricula=False, nivel__periodo_id = 317, inscripcion__coordinacion_id__in = [4])[:150]
            for matricula in matriculas:
                cont += 1
                materias = matricula.materiaasignada_set.filter(matricula__status=True, status=True)
                for mat in materias:
                    if cont <= 20:
                        nota = random.choice([60, 100])
                    elif cont > 20 and cont <= 40:
                        nota = 60
                    elif cont > 40:
                        nota = 100
                    mat.notafinal = nota
                    mat.asistenciafinal = 100
                    mat.estado_id = 1
                    mat.cerrado = True
                    mat.save(actualiza=False)
                    mat.actualiza_estado()
                    mat.cierre_materia_asignada()
                    # mat.save()
                    ids_materia.append(mat.materia.id)
                if DEBUG: print(str(cont)+ ' - ' + str(matricula.inscripcion.persona.cedula) + ' - ' + str(matricula.inscripcion.persona.nombre_completo_minus()) + ' - ' + str(matricula.inscripcion.carrera.nombre + ' - ' + str(matricula.nivelmalla.nombre)))
            arreglo_sin_duplicados = list(set(ids_materia))
            materias_v = Materia.objects.filter(pk__in = arreglo_sin_duplicados)
            for materia in materias_v:
                debe_cerrar_periodo = True
                if periodo.periodo_academia():
                    if not periodo.periodo_academia().cierra_materia:
                        debe_cerrar_periodo = False
                        raise Exception('En este periodo no debe cerrarse las materias.')
                if debe_cerrar_periodo:
                    materia.cerrado = True
                    materia.fechacierre = datetime.now().date()
                    materia.save()
                    # for asig in materia.asignados_a_esta_materia():
                    #     asig.cerrado = True
                    #     asig.save(actualiza=False)
                    #     asig.actualiza_estado()
                    # for asig in materia.asignados_a_esta_materia():
                    #     asig.cierre_materia_asignada()
            if DEBUG: print('----PROCESO FINALIZADO----')
    except Exception as ex:
        err = 'Error on line {}'.format(sys.exc_info()[-1].tb_lineno)
        msg_err = f"Ocurrio un error: {ex.__str__()}. {err}"
        print('%s' % msg_err)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



def reporte_asignaturas_malla_practicas_v6():
    import xlsxwriter
    import os
    import sys
    from django.db import transaction
    from django.db.models import Q
    from settings import SITE_STORAGE
    from datetime import datetime, timedelta
    from django.db.models import Exists, OuterRef
    from sga.models import Periodo, Notificacion, Malla, AsignaturaMalla, Materia, ItinerariosMalla, ItinerariosVinculacionMalla
    from socioecon.models import FichaSocioeconomicaINEC

    try:
        dominio_sistema = 'https://sga.unemi.edu.ec'
        output_folder = os.path.join(SITE_STORAGE, 'media')
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        nombrearchivo = f"reporte_asignaturas_malla_v6_estados.xlsx"
        workbook = xlsxwriter.Workbook(os.path.join(output_folder, nombrearchivo))
        ws = workbook.add_worksheet("Estudiantes")

        # Formatos
        fcabeceracolumna = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 10,
            'bg_color': '#D3D3D3', 'border': 1, 'align': 'center', 'valign': 'vcenter'
        })
        fceldageneral = workbook.add_format({'font_name': 'Verdana', 'font_size': 10, 'border': 1})
        ftitulo2izq = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 14,
            'align': 'center', 'valign': 'vcenter'
        })
        fhyperlink = workbook.add_format({
            'font_name': 'Verdana', 'font_size': 10, 'font_color': 'blue', 'underline': 1, 'border': 1
        })

        # Títulos
        ws.merge_range(0, 0, 0, 4, 'UNIVERSIDAD ESTATAL DE MILAGRO', ftitulo2izq)
        ws.merge_range(1, 0, 1, 4, 'REPORTE DE ESTUDIANTES DE NIVELACIÓN', ftitulo2izq)
        ws.merge_range(2, 0, 2, 4, 'FECHA: ' + datetime.now().strftime("%d-%m-%Y"), ftitulo2izq)

        # Definir columnas
        columnas = [
                    (u"COORDINACION", 60),
                    (u"CARRERA", 60),
                    (u"MODALIDAD", 20),
                    (u"NIVEL", 20),
                    (u"ID_ASIGNATURAMALLA", 50),
                    (u"ASIGNATURA", 50),
                    (u"PRACTICA", 50),
                    (u"VINCULACION", 50),
                    (u"ITINERARIO PRACTICA", 50),
                    (u"ITINERARIO VINCULACION", 50),
                    ]

        row_num = 3
        for col_num in range(len(columnas)):
            ws.write(row_num, col_num, columnas[col_num][0], fcabeceracolumna)
            ws.set_column(col_num, col_num, columnas[col_num][1])

        fila = 4

        periodo = Periodo.objects.get(pk=336)
        eMallas = Malla.objects.filter(vigente=True, status=True, carrera__modalidad=3).annotate(enusoperiodo=Exists(Materia.objects.filter(status=True, nivel__periodo_id=periodo.id, asignaturamalla__malla_id=OuterRef('id')))).filter(enusoperiodo=True).exclude(carrera__coordinacion__id=9)

        for eMalla in eMallas:
            listado_asignaturamalla = AsignaturaMalla.objects.filter(Q(asignaturapracticas=True) | Q(asignaturavinculacion=True), malla=eMalla, status=True).order_by('nivelmalla__orden')

            iti_practicas = ItinerariosMalla.objects.filter(status=True, malla=eMalla)
            iti_vinculacion = ItinerariosVinculacionMalla.objects.filter(status=True, malla=eMalla)

            for e in listado_asignaturamalla:
                practica = iti_practicas.filter(nivel=e.nivelmalla).first() if iti_practicas.filter(nivel=e.nivelmalla).first() else ''
                vincula = iti_vinculacion.filter(nivel=e.nivelmalla).first() if iti_vinculacion.filter(nivel=e.nivelmalla).first() else ''
                _nivel = e.nivelmalla
                ws.write(fila, 0, str(e.malla.carrera.coordinacion_carrera()), fceldageneral)
                ws.write(fila, 1, str(e.malla.carrera), fceldageneral)
                ws.write(fila, 2, str(e.malla.carrera.get_modalidad_display()), fceldageneral)
                ws.write(fila, 3, str(_nivel), fceldageneral)
                ws.write(fila, 4, str(e.id), fceldageneral)
                ws.write(fila, 5, str(e.asignatura.nombre), fceldageneral)
                ws.write(fila, 6, str(e.asignaturapracticas), fceldageneral)
                ws.write(fila, 7, str(e.asignaturavinculacion), fceldageneral)
                ws.write(fila, 8, str(practica), fceldageneral)
                ws.write(fila, 9, str(vincula), fceldageneral)

                fila += 1

        workbook.close()
        noti = Notificacion(titulo='Proceso terminado',
                            cuerpo=f"Archivo guardado en: {os.path.join(output_folder, nombrearchivo)}",
                            destinatario_id=28157, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()

    except Exception as ex:
        err = 'Error on line {}'.format(sys.exc_info()[-1].tb_lineno)
        msg_err = f"Ocurrio un error: {ex.__str__()}. {err}"
        print('%s' % msg_err)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=28157, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()

# reporte_asignaturas_malla_practicas_v6()
# actualizacion_cierre_materias()



def reporte_auditoria():
    from openpyxl import load_workbook, workbook as openxl
    from openpyxl.styles import Font as openxlFont
    from openpyxl.styles.alignment import Alignment as alin
    from bd.models import LogEntryLogin
    from django.contrib.admin.models import LogEntry
    try:
        usuario_id = 160
        cont = 0
        nombre_archivo = generar_nombre("reporte_auditoria", '') + '.xlsx'
        url = ''
        directory = os.path.join(SITE_STORAGE, 'media', 'auditoria')
        try:
            os.stat(directory)
        except:
            os.mkdir(directory)

        # Inicializo cabecera de  excel
        __author__ = 'Unemi'
        wb = openxl.Workbook()
        ws = wb.active
        style_title = openxlFont(name='Arial', size=14, bold=True)
        style_cab = openxlFont(name='Arial', size=10, bold=True)
        alinear = alin(horizontal="center", vertical="center")
        response = HttpResponse(content_type="application/ms-excel")
        response['Content-Disposition'] = f'attachment; filename={nombre_archivo}' + '-' + random.randint(1,
                                                                                                          10000).__str__() + '.xlsx'
        ws.merge_cells('A1:E1')
        ws.merge_cells('A2:E2')
        ws['A1'] = 'UNIVERSIDAD ESTATAL DE MILAGRO'
        ws['A2'] = 'REPORTE DE AUDITORIA'
        celda1 = ws['A1']
        celda1.font = style_title
        celda1.alignment = alinear
        celda2 = ws['A2']
        celda2.font = style_title
        celda2.alignment = alinear
        columns = ['Fecha',
                   'Hora',
                   'Acción',
                   'Usuario',
                   'Mensaje',
                   ]
        row_num = 3
        for col_num in range(0, len(columns)):
            celda = ws.cell(row=row_num, column=(col_num + 1), value=columns[col_num])
            celda.font = style_cab
        row_num = 4

        # Obtencion de directorio y varibles requeridas
        directory = os.path.join(MEDIA_ROOT, 'auditoria', nombre_archivo)
        pers = Persona.objects.get(usuario_id=usuario_id)
        baseDate = datetime.today()
        year = '2024'
        month = '04'
        persona = pers

        # Consultas y agrupacion de listas
        logs = LogEntry.objects.filter(Q(change_message__icontains=persona.__str__()) | Q(user=persona.usuario),
                                       action_time__year=int(year), action_time__month__gte=int(month))
        logs1 = LogEntryBackup.objects.filter(Q(change_message__icontains=persona.__str__()) | Q(user=persona.usuario),
                                              action_time__year=int(year), action_time__month__gte=int(month))
        logs2 = LogEntryBackupdos.objects.filter(
            Q(change_message__icontains=persona.__str__()) | Q(user=persona.usuario),
            action_time__year=int(year), action_time__month__gte=int(month))
        logs3 = LogEntryLogin.objects.filter(user=persona.usuario, action_time__year=int(year), action_time__month__gte=int(month))
        logslist0 = list(logs.values_list("action_time", "action_flag", "change_message", "user__username"))
        logslist1 = list(logs1.values_list("action_time", "action_flag", "change_message", "user__username"))
        logslist2 = list(logs2.values_list("action_time", "action_flag", "change_message", "user__username"))
        logslist = logslist0 + logslist1 + logslist2
        accioneslogin = {1: 'Exitoso', 2: 'Fallido'}
        acciones = {1: 'Agregar', 2: 'Editar', 3: 'Eliminar'}
        for xItem in logslist:
            cont += 1
            accion = acciones[xItem[1]] if xItem[1] in acciones else 'Otro'
            ws.cell(row=row_num, column=1, value=xItem[0].date())
            ws.cell(row=row_num, column=2, value=xItem[0].time())
            ws.cell(row=row_num, column=3, value=accion)
            ws.cell(row=row_num, column=4, value=xItem[3])
            ws.cell(row=row_num, column=5, value=xItem[2])
            row_num += 1
            print(cont)
        for xItem in list(logs3.values_list("action_time", "action_flag", "change_message", "user__username", "id")):
            cont += 1
            l = LogEntryLogin.objects.get(pk=xItem[4])
            accion = accioneslogin[xItem[1]] if xItem[1] in accioneslogin else 'Desconocido'
            ws.cell(row=row_num, column=1, value=xItem[0].date())
            ws.cell(row=row_num, column=2, value=xItem[0].time())
            ws.cell(row=row_num, column=3, value=accion)
            ws.cell(row=row_num, column=4, value=xItem[3])
            ws.cell(row=row_num, column=5, value=l.get_data_message())
            row_num += 1
            print(cont)
        wb.save(directory)

    except Exception as ex:
        err = 'Error on line {}'.format(sys.exc_info()[-1].tb_lineno)
        msg_err = f"Ocurrio un error: {ex.__str__()}. {err}"
        print('%s' % msg_err)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()

# reporte_auditoria()


def proceso_asignacion_practicas():
    from sga.models import Periodo, Malla, AsignaturaMalla, Carrera, Coordinacion, Notificacion, ProfesorMateria, ProfesorMateria
    from inno.models import MallaHorasSemanalesComponentes
    from settings import DEBUG
    from datetime import datetime, timedelta
    from django.db import transaction
    try:
        with transaction.atomic():
            periodo_id = 336
            #, matricula__nivelmalla__orden__gt = 1
            materia_ids = MateriaAsignada.objects.filter(status = True, matricula__nivel__periodo_id = periodo_id,materia_id = 99341, materia__practicas = True, materia__profesormateria__tipoprofesor_id__in = [2,13]).values_list('materia_id',flat=True).distinct('materia_id')
            profesoresmaterias = ProfesorMateria.objects.filter(status = True, materia_id__in = materia_ids, tipoprofesor__in = [2,13]).distinct()
            for profesormateria in profesoresmaterias:
                materiasasignadas = profesormateria.materia.materiaasignada_set.filter(status=True,
                                                                                       retiramateria=False).order_by(
                    'matricula__inscripcion__persona__apellido1', 'matricula__inscripcion__persona__apellido2',
                    'matricula__inscripcion__persona__nombres')
                listaestudiantes = []
                listadoprofemate = profesormateria.materia.profesormateria_set.filter(activo=True,tipoprofesor_id__in=[2, 13]).order_by('profesor__persona')
                for profesormate in listadoprofemate:
                    for grupoprofe in profesormate.grupoprofesormateria():
                        listaestudiantes.extend(
                            AlumnosPracticaMateria.objects.values_list('materiaasignada__id', flat=True).filter(
                                profesormateria=profesormate, grupoprofesor=grupoprofe, status=True))
                materiasasignadas = materiasasignadas.exclude(pk__in=listaestudiantes).distinct()
                for materiaasig in materiasasignadas:
                    #### DATOS PRACTICAS DE MATERIAS
                    if materiaasig.materia.asignaturamalla.malla.carrera_id.__str__() in variable_valor('LISTA_CARRERA_PARA_MATRICULA_GRUPO_PRACTICA'):
                        materiaespractica = materiaasig.materia.asignaturamalla.practicas
                        novalidar_horario_cupo_materiavirtual = materiaasig.materia.tipomateria == 2 and not variable_valor('VALIDAR_HORARIO_CUPO_MATERIA_VIRTUAL')
                        horario = []
                        profesoresmateria = None
                        if materiaespractica:
                            tipos = ProfesorMateria.objects.values_list("tipoprofesor_id", flat=True).filter(materia=materiaasig.materia,status=True,activo=True)
                            tiposprofesorpractica = TipoProfesor.objects.filter(pk__in=tipos)
                            profesoresmateria = materiaasig.materia.profesores_materia_segun_tipoprofesor_pm(tiposprofesorpractica,multiple=True)
                            for profesormateria in profesoresmateria:
                                grupoprofesor = profesormateria.grupoprofesormateria()
                                if grupoprofesor:
                                    for grupo in grupoprofesor:
                                        horarios = grupo.clases_informacion()
                                        if (horarios and grupo.cuposdisponiblesgrupoprofesor() > 0) or (novalidar_horario_cupo_materiavirtual):
                                            horario.append(["<br>".join(x for x in horarios),
                                                            profesormateria.id,
                                                            profesormateria.materia.cupo if novalidar_horario_cupo_materiavirtual else grupo.cuposdisponiblesgrupoprofesor(),
                                                            grupo.id, grupo.get_paralelopractica_display(),
                                                            grupo.profesormateria.profesor.persona.nombre_completo_inverso().__str__()])
                                            ## ASIGNACION MASIVA GRUPO
                                            gruposprofesor = GruposProfesorMateria.objects.filter(pk=horario[0][3])
                                            for grupoprofesor in gruposprofesor:
                                                if grupoprofesor.cuposdisponiblesgrupoprofesor_congrupos() > 0:
                                                    grupoprofesor = GruposProfesorMateria.objects.get(pk=horario[0][3])
                                                    if AlumnosPracticaMateria.objects.values('id').filter(
                                                            materiaasignada=materiaasig, status=True).exists():
                                                        alumnopractica = AlumnosPracticaMateria.objects.filter(
                                                            materiaasignada=materiaasig, status=True)[0]
                                                        alumnopractica.profesormateria = grupoprofesor.profesormateria
                                                        alumnopractica.grupoprofesor = grupoprofesor
                                                    else:
                                                        alumnopractica = AlumnosPracticaMateria(
                                                            profesormateria=grupoprofesor.profesormateria,
                                                            materiaasignada=materiaasig,
                                                            grupoprofesor=grupoprofesor)
                                                    alumnopractica.save()
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def proceso_asignacion_practicas_V2():
    from sga.models import Periodo, Malla, AsignaturaMalla, Carrera, Coordinacion, Notificacion, ProfesorMateria, ProfesorMateria
    from inno.models import MallaHorasSemanalesComponentes
    from settings import DEBUG
    from datetime import datetime, timedelta
    from django.db import transaction
    try:
        with transaction.atomic():
            periodo_id = 336
            materia_ids = MateriaAsignada.objects.filter(status = True, materia_id = 99341, matricula__nivel__periodo_id = periodo_id, materia__practicas = True, materia__profesormateria__tipoprofesor_id__in = [2,13]).values_list('materia_id',flat=True).distinct('materia_id')
            for mat_id in materia_ids:
                materia = Materia.objects.filter(status= True, pk=mat_id).first()
                materiasasignadas = materia.asignados_a_esta_materia()
                for materiaasig in materiasasignadas:
                    #### DATOS PRACTICAS DE MATERIAS
                    if materiaasig.materia.asignaturamalla.malla.carrera_id.__str__() in variable_valor('LISTA_CARRERA_PARA_MATRICULA_GRUPO_PRACTICA'):
                        materiaespractica = materiaasig.materia.asignaturamalla.practicas
                        novalidar_horario_cupo_materiavirtual = materiaasig.materia.tipomateria == 2 and not variable_valor('VALIDAR_HORARIO_CUPO_MATERIA_VIRTUAL')
                        horario = []
                        profesoresmateria = None
                        if materiaespractica:
                            tipos = ProfesorMateria.objects.values_list("tipoprofesor_id", flat=True).filter(materia=materiaasig.materia, status=True, activo=True)
                            tiposprofesorpractica = TipoProfesor.objects.filter(pk__in=tipos)
                            profesoresmateria = materiaasig.materia.profesores_materia_segun_tipoprofesor_pm(tiposprofesorpractica, multiple=True)
                            for profesormateria in profesoresmateria:
                                grupoprofesormat = profesormateria.grupoprofesormateria()
                                if grupoprofesormat:
                                    for grupo in grupoprofesormat:
                                        if grupoprofesormat.count() > 1:
                                            if DEBUG: print('TIENE MAS DE 1 GRUPO')
                                        horarios = grupo.clases_informacion()
                                        if (horarios and grupo.cuposdisponiblesgrupoprofesor() > 0) or (
                                        novalidar_horario_cupo_materiavirtual):
                                            horario.append(["<br>".join(x for x in horarios),
                                                            profesormateria.id,
                                                            profesormateria.materia.cupo if novalidar_horario_cupo_materiavirtual else grupo.cuposdisponiblesgrupoprofesor(),
                                                            grupo.id, grupo.get_paralelopractica_display(),
                                                            grupo.profesormateria.profesor.persona.nombre_completo_inverso().__str__()])
                                            ## ASIGNACION MASIVA GRUPO
                                            gruposprofesor = GruposProfesorMateria.objects.filter(pk=horario[0][3])
                                            for grupoprofesor in gruposprofesor:
                                                if grupoprofesor.cuposdisponiblesgrupoprofesor_congrupos() > 0:
                                                    grupoprofesor = GruposProfesorMateria.objects.get(pk=horario[0][3])
                                                    if AlumnosPracticaMateria.objects.values('id').filter(materiaasignada=materiaasig, status=True).exists():
                                                        alumnopractica = AlumnosPracticaMateria.objects.filter(materiaasignada=materiaasig, status=True)[0]
                                                        alumnopractica.profesormateria = grupoprofesor.profesormateria
                                                        alumnopractica.grupoprofesor = grupoprofesor
                                                    else:
                                                        alumnopractica = AlumnosPracticaMateria(
                                                            profesormateria=grupoprofesor.profesormateria,
                                                            materiaasignada=materiaasig,
                                                            grupoprofesor=grupoprofesor)
                                                    alumnopractica.save()
            if DEBUG: print('PROCESO TERMINADO')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()


def proceso_asignacion_practicas_V3():
    from sga.models import Periodo, Malla, AsignaturaMalla, Carrera, Coordinacion, Notificacion, ProfesorMateria, MateriaAsignada,TipoProfesor,GruposProfesorMateria,AlumnosPracticaMateria, Notificacion
    from settings import DEBUG
    from django.db import transaction
    from math import ceil
    from sga.funciones import variable_valor
    try:
        with transaction.atomic():
            periodo_id = 336
            #, matricula__nivelmalla__orden__gt = 1
            materias_asignadas = MateriaAsignada.objects.filter(status = True, matricula__nivel__periodo_id = periodo_id, materia_id = 97262, materia__practicas = True, materia__profesormateria__tipoprofesor_id__in = [2,13]).distinct('materia_id')
            for materiaasig in materias_asignadas:
                if materiaasig.materia.asignaturamalla.malla.carrera_id.__str__() in variable_valor('LISTA_CARRERA_PARA_MATRICULA_GRUPO_PRACTICA'):
                    materiaespractica = materiaasig.materia.asignaturamalla.practicas
                    novalidar_horario_cupo_materiavirtual = materiaasig.materia.tipomateria == 2 and not variable_valor('VALIDAR_HORARIO_CUPO_MATERIA_VIRTUAL')
                    horario = []
                    profesoresmateria = None
                    if materiaespractica:
                        tipos = ProfesorMateria.objects.values_list("tipoprofesor_id", flat=True).filter(materia=materiaasig.materia, status=True, activo=True)
                        tiposprofesorpractica = TipoProfesor.objects.filter(pk__in=tipos)
                        profesoresmateria = materiaasig.materia.profesores_materia_segun_tipoprofesor_pm(tiposprofesorpractica, multiple=True)
                        for profesormateria in profesoresmateria:
                            cant_grupo = 0
                            cant_estudiantes = 0
                            cant_cupos = 0
                            bandera = False
                            grupoprofesormat = profesormateria.grupoprofesormateria()
                            if grupoprofesormat:
                                registrados = []
                                cant_grupo = grupoprofesormat.count()
                                for grupo in grupoprofesormat:
                                    horario = []
                                    horarios = grupo.clases_informacion()
                                    if (horarios and grupo.cuposdisponiblesgrupoprofesor() > 0) or (novalidar_horario_cupo_materiavirtual):
                                        horario.append(["<br>".join(x for x in horarios),
                                                        profesormateria.id,
                                                        profesormateria.materia.cupo if novalidar_horario_cupo_materiavirtual else grupo.cuposdisponiblesgrupoprofesor(),
                                                        grupo.id, grupo.get_paralelopractica_display(),
                                                        grupo.profesormateria.profesor.persona.nombre_completo_inverso().__str__()])
                                        estudiantes = materiaasig.materia.asignados_a_esta_materia().exclude(pk__in = registrados)
                                        ## CUPOS
                                        gruposprofesor = GruposProfesorMateria.objects.filter(pk=horario[0][3])
                                        if bandera == False:
                                            cant_cupos = math.ceil(estudiantes.count() / cant_grupo)
                                            bandera = True
                                        for grup in gruposprofesor:
                                            grup.cupo = cant_cupos
                                            grup.save()

                                        for materiaasig in estudiantes:
                                            for grupoprofesor in gruposprofesor:
                                                if grupoprofesor.cuposdisponiblesgrupoprofesor_congrupos() > 0:
                                                    grupoprofesor = GruposProfesorMateria.objects.get(pk=horario[0][3])
                                                    if AlumnosPracticaMateria.objects.values('id').filter(
                                                            materiaasignada=materiaasig, status=True).exists():
                                                        alumnopractica = AlumnosPracticaMateria.objects.filter(
                                                            materiaasignada=2, status=True).first()
                                                        alumnopractica.profesormateria = grupoprofesor.profesormateria
                                                        alumnopractica.grupoprofesor = grupoprofesor
                                                    else:
                                                        alumnopractica = AlumnosPracticaMateria(
                                                            profesormateria=grupoprofesor.profesormateria,
                                                            materiaasignada=materiaasig,
                                                            grupoprofesor=grupoprofesor)
                                                    registrados.append(materiaasig.id)
                                                    alumnopractica.save()
            if DEBUG: print('PROCESO TERMINADO')
    except Exception as ex:
        transaction.set_rollback(True)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()

def reporte_matriculados_pasados_horas():
    import xlsxwriter
    import os
    import sys
    from django.db import transaction
    from django.db.models import Q
    from settings import SITE_STORAGE
    from datetime import datetime, timedelta
    from django.db.models import Exists, OuterRef
    from sga.models import Periodo, Notificacion, Malla, AsignaturaMalla, Materia, Matricula, MateriaAsignada

    try:
        dominio_sistema = 'https://sga.unemi.edu.ec'
        output_folder = os.path.join(SITE_STORAGE, 'media')
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        nombrearchivo = f"reporte_estudiantes_horas_matricula.xlsx"
        workbook = xlsxwriter.Workbook(os.path.join(output_folder, nombrearchivo))
        ws = workbook.add_worksheet("Reporte")

        # Formatos
        fcabeceracolumna = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 10,
            'bg_color': '#D3D3D3', 'border': 1, 'align': 'center', 'valign': 'vcenter'
        })
        fceldageneral = workbook.add_format({'font_name': 'Verdana', 'font_size': 10, 'border': 1})
        ftitulo2izq = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 14,
            'align': 'center', 'valign': 'vcenter'
        })
        fhyperlink = workbook.add_format({
            'font_name': 'Verdana', 'font_size': 10, 'font_color': 'blue', 'underline': 1, 'border': 1
        })

        # Títulos
        ws.merge_range(0, 0, 0, 4, 'UNIVERSIDAD ESTATAL DE MILAGRO', ftitulo2izq)
        ws.merge_range(1, 0, 1, 4, 'REPORTE DE ESTUDIANTES', ftitulo2izq)
        ws.merge_range(2, 0, 2, 4, 'FECHA: ' + datetime.now().strftime("%d-%m-%Y"), ftitulo2izq)

        # Definir columnas
        columnas = [
                    (u"CEDULA", 25),
                    (u"NOMBRES", 60),
                    (u"CARRERA", 60),
                    (u"MODALIDAD", 20),
                    (u"NIVEL", 20),
                    (u"CANTIDAD DE MATERIAS", 20),
                    (u"HORAS MATRICULA", 20),
                    (u"HORAS MÁXIMAS", 20),
                    ]

        row_num = 3
        for col_num in range(len(columnas)):
            ws.write(row_num, col_num, columnas[col_num][0], fcabeceracolumna)
            ws.set_column(col_num, col_num, columnas[col_num][1])

        fila = 4

        periodo = Periodo.objects.get(pk=336)
        matriculas = Matricula.objects.filter(status = True, nivel__periodo = periodo, retiradomatricula = False).order_by('inscripcion__carrera__nombre')[1000:10000]
        cont = 0
        for matricula in matriculas:
            contador_horas = 0
            contador_materias = 0
            horas_malla = 0
            irregular = False
            materias_ingles = Materia.objects.filter(status=True, asignaturamalla__malla_id__in=[353],nivel__periodo=periodo).values_list('asignaturamalla__asignatura_id', flat=True).distinct()
            materias_asignadas = MateriaAsignada.objects.filter(status = True, retiramateria = False, matricula = matricula).exclude(materia__asignaturamalla__asignatura_id__in=materias_ingles)
            if materias_asignadas.values_list('materia__asignaturamalla__nivelmalla__orden',flat=True).distinct().count() > 1:
                irregular = True
            for mataasig in materias_asignadas:
                contador_materias += 1
                contador_horas += mataasig.materia.asignaturamalla.horastotal()
                nivel_inicial = mataasig.materia.asignaturamalla.nivelmalla.orden
                if horas_malla == 0:
                    horas_malla = Malla.objects.values_list('maxhoras_semanal_matricula',flat=True).filter(status=True, pk = mataasig.materia.asignaturamalla.malla.id).first()

            if (contador_horas > horas_malla) and irregular:
                cont += 1
                # print(str(cont)+ ' ' +str(matricula.inscripcion.persona.cedula)+ ' ' +str(matricula.inscripcion.persona)+ ' ' +str(matricula.inscripcion.carrera.nombre)+ ' ' +str(matricula.inscripcion.modalidad.nombre)+ ' ' +str(matricula.nivelmalla.nombre) + ' ' +str(contador_materias)+ ' ' +str(contador_horas)+ ' ' +str(horas_malla))
                ws.write(fila, 0, str(matricula.inscripcion.persona.cedula), fceldageneral)
                ws.write(fila, 1, str(matricula.inscripcion.persona), fceldageneral)
                ws.write(fila, 2, str(matricula.inscripcion.carrera.nombre), fceldageneral)
                ws.write(fila, 3, str(matricula.inscripcion.modalidad.nombre), fceldageneral)
                ws.write(fila, 4, str(matricula.nivelmalla.nombre), fceldageneral)
                ws.write(fila, 5, str(contador_materias), fceldageneral)
                ws.write(fila, 6, str(contador_horas), fceldageneral)
                ws.write(fila, 7, str(horas_malla), fceldageneral)

                fila += 1


        workbook.close()
    except Exception as ex:
        err = 'Error on line {}'.format(sys.exc_info()[-1].tb_lineno)
        msg_err = f"Ocurrio un error: {ex.__str__()}. {err}"
        print('%s' % msg_err)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()



def reporte_estudiantes_psicologia_presencial():
    import xlsxwriter
    import os
    import sys
    from django.db import transaction
    from django.db.models import Q
    from settings import SITE_STORAGE
    from datetime import datetime, timedelta
    from django.db.models import Exists, OuterRef
    from sga.models import Periodo, Notificacion, Malla, AsignaturaMalla, Materia, Matricula, MateriaAsignada, Inscripcion,RetiroCarrera, Graduado, PerfilUsuario, RecordAcademico,MatriculaTitulacion
    from inno.funciones import asignaturas_aprobadas_primero_ultimo_nivel

    try:
        dominio_sistema = 'https://sga.unemi.edu.ec'
        output_folder = os.path.join(SITE_STORAGE, 'media')
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        nombrearchivo = f"reporte_estudiantes_psicologia_presencial_general_11092024.xlsx"
        workbook = xlsxwriter.Workbook(os.path.join(output_folder, nombrearchivo))
        ws = workbook.add_worksheet("Reporte")

        # Formatos
        fcabeceracolumna = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 10,
            'bg_color': '#D3D3D3', 'border': 1, 'align': 'center', 'valign': 'vcenter'
        })
        fceldageneral = workbook.add_format({'font_name': 'Verdana', 'font_size': 10, 'border': 1})
        ftitulo2izq = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 14,
            'align': 'center', 'valign': 'vcenter'
        })
        fhyperlink = workbook.add_format({
            'font_name': 'Verdana', 'font_size': 10, 'font_color': 'blue', 'underline': 1, 'border': 1
        })

        # Títulos
        ws.merge_range(0, 0, 0, 4, 'UNIVERSIDAD ESTATAL DE MILAGRO', ftitulo2izq)
        ws.merge_range(1, 0, 1, 4, 'REPORTE DE ESTUDIANTES', ftitulo2izq)
        ws.merge_range(2, 0, 2, 4, 'FECHA: ' + datetime.now().strftime("%d-%m-%Y"), ftitulo2izq)

        # Definir columnas
        columnas = [
                    (u"CEDULA", 25),
                    (u"PASAPORTE", 25),
                    (u"NOMBRES", 60),
                    (u"CARRERA", 60),
                    (u"MODALIDAD", 20),
                    (u"NIVEL", 20),
                    (u"ESTADO", 20),
                    (u"FECHA (RETIRO)", 20),
                    ]

        row_num = 3
        for col_num in range(len(columnas)):
            ws.write(row_num, col_num, columnas[col_num][0], fcabeceracolumna)
            ws.set_column(col_num, col_num, columnas[col_num][1])

        fila = 4

        periodo = Periodo.objects.get(pk=336)
        periodo_anterior = Periodo.objects.get(pk=317)
        # asignatura_titulacion = [7206]
        carrera = [137]
        # inscripciones = Inscripcion.objects.filter(status= True, carrera_id__in = carrera, activo=True, persona__cedula = '0942475609')
        inscripciones = Inscripcion.objects.filter(status= True, carrera_id__in = carrera, activo=True)
        cont = 0

        for inscripcion in inscripciones:
            bandera = False
            fecha_retiro = ''
            estado = ''
            nivel_persona = ''
            if PerfilUsuario.objects.filter(status=True, visible=True, inscripcion_id=inscripcion.id):
                if not inscripcion.es_graduado():
                    if not asignaturas_aprobadas_primero_ultimo_nivel(inscripcion.id):
                        if inscripcion.retiro_carrera():
                            estado = 'RETIRADO DE LA CARRERA'
                            fecha_retiro = RetiroCarrera.objects.values_list('fecha', flat=True).filter(status=True, inscripcion = inscripcion).first()
                            nivel_persona = inscripcion.mi_nivel().nivel.nombre
                        else:
                            matricula = Matricula.objects.filter(status=True, inscripcion = inscripcion)
                            if matricula.filter(nivel__periodo = periodo, retiradomatricula = False).exists():
                                estado = 'MATRICULADO EN EL PERIODO ACTUAL'
                                nivel_persona = matricula.first().nivelmalla.nombre
                            else:
                                if inscripcion.mi_nivel().nivel.orden == 1:
                                    materias_record = inscripcion.recordacademico_set.filter(status=True, asignaturamalla__nivelmalla__orden = 1).exclude(modulomalla_id__gt = 0).exclude(ofimatica_id__gt = 0)
                                    if materias_record:
                                        estado = 'NO ESTÁ CURSANDO ESTUDIOS EN EL PERIODO ACTUAL'
                                        nivel_persona = inscripcion.mi_nivel().nivel.nombre
                                    else:
                                        continue
                                else:
                                    estado = 'NO ESTÁ CURSANDO ESTUDIOS EN EL PERIODO ACTUAL'
                                    nivel_persona = inscripcion.mi_nivel().nivel.nombre
                    else:
                        if matriculado_titulacion := MatriculaTitulacion.objects.filter(inscripcion_id=inscripcion.id, status = True):
                            # if matriculado_titulacion.filter(Q(estado=10) | Q(estado=6) | Q(estado=1) | Q(estado=7)).exists():
                            if matriculado_titulacion.filter(estado__in = [10,6,1,7]).exists():
                                if matriculado_titulacion.first().estadotitulacion == 1:
                                    estado = 'CURSANDO PROCESO DE TITULACION'
                                elif matriculado_titulacion.first().estadotitulacion == 2:
                                    estado = 'REPROBADO - PENDIENTE DE PROCESO DE TITULACION'
                            else:
                                estado = 'PENDIENTE DE PROCESO DE TITULACION'
                        else:
                            estado = 'PENDIENTE DE PROCESO DE TITULACION'
                        nivel_persona = inscripcion.mi_nivel().nivel.nombre
                else:
                    registro_titulo = Graduado.objects.values_list('registro',flat=True).filter(status=True, inscripcion = inscripcion).first()
                    if not registro_titulo:
                        estado = 'TITULO NO REGISTRADO'
                    else:
                        estado = 'TITULO REGISTRADO'
                    nivel_persona = inscripcion.mi_nivel().nivel.nombre

                cont += 1
                print(str(cont)+ ' ' +str(inscripcion.persona.cedula)+ ' ' +str(inscripcion.persona)+ ' ' +str(inscripcion.carrera.nombre)+ ' ' +str(inscripcion.modalidad.nombre)+ ' ' +str(inscripcion.mi_nivel().nivel.nombre) + ' ' +str(estado)+ ' ' +str(fecha_retiro))
                ws.write(fila, 0, str(inscripcion.persona.cedula) if inscripcion.persona.cedula else '-', fceldageneral)
                ws.write(fila, 1, str(inscripcion.persona.pasaporte) if inscripcion.persona.pasaporte else '-', fceldageneral)
                ws.write(fila, 2, str(inscripcion.persona), fceldageneral)
                ws.write(fila, 3, str(inscripcion.carrera.nombre), fceldageneral)
                ws.write(fila, 4, str(inscripcion.modalidad.nombre), fceldageneral)
                ws.write(fila, 5, str(nivel_persona), fceldageneral)
                ws.write(fila, 6, str(estado) if estado else '-', fceldageneral)
                ws.write(fila, 7, str(fecha_retiro) if fecha_retiro else '-', fceldageneral)

                fila += 1

        workbook.close()
    except Exception as ex:
        err = 'Error on line {}'.format(sys.exc_info()[-1].tb_lineno)
        msg_err = f"Ocurrio un error: {ex.__str__()}. {err}"
        print('%s' % msg_err)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
# funcionlocal.get("reporte_estudiantes_psicologia_presencial")()
# reporte_estudiantes_psicologia_presencial()


def reporte_estudiantes_psicologia_enlinea_new():
    import xlsxwriter
    import os
    import sys
    from django.db import transaction
    from django.db.models import Q
    from settings import SITE_STORAGE
    from datetime import datetime, timedelta
    from django.db.models import Exists, OuterRef
    from sga.models import Periodo, Notificacion, Malla, AsignaturaMalla, Materia, Matricula, MateriaAsignada, Inscripcion,RetiroCarrera, Graduado, PerfilUsuario, RecordAcademico,MatriculaTitulacion, InscripcionMalla
    from inno.funciones import asignaturas_aprobadas_primero_ultimo_nivel

    try:
        dominio_sistema = 'https://sga.unemi.edu.ec'
        output_folder = os.path.join(SITE_STORAGE, 'media')
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        nombrearchivo = f"reporte_estudiantes_psicologia_enlinea_general_11092024.xlsx"
        workbook = xlsxwriter.Workbook(os.path.join(output_folder, nombrearchivo))
        ws = workbook.add_worksheet("Reporte")

        # Formatos
        fcabeceracolumna = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 10,
            'bg_color': '#D3D3D3', 'border': 1, 'align': 'center', 'valign': 'vcenter'
        })
        fceldageneral = workbook.add_format({'font_name': 'Verdana', 'font_size': 10, 'border': 1})
        ftitulo2izq = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 14,
            'align': 'center', 'valign': 'vcenter'
        })
        fhyperlink = workbook.add_format({
            'font_name': 'Verdana', 'font_size': 10, 'font_color': 'blue', 'underline': 1, 'border': 1
        })

        # Títulos
        ws.merge_range(0, 0, 0, 4, 'UNIVERSIDAD ESTATAL DE MILAGRO', ftitulo2izq)
        ws.merge_range(1, 0, 1, 4, 'REPORTE DE ESTUDIANTES', ftitulo2izq)
        ws.merge_range(2, 0, 2, 4, 'FECHA: ' + datetime.now().strftime("%d-%m-%Y"), ftitulo2izq)

        # Definir columnas
        columnas = [
                    (u"CEDULA", 25),
                    (u"PASAPORTE", 25),
                    (u"NOMBRES", 60),
                    (u"CARRERA", 60),
                    (u"MODALIDAD", 20),
                    (u"NIVEL", 20),
                    (u"ESTADO", 20),
                    (u"FECHA (RETIRO)", 20),
                    ]

        row_num = 3
        for col_num in range(len(columnas)):
            ws.write(row_num, col_num, columnas[col_num][0], fcabeceracolumna)
            ws.set_column(col_num, col_num, columnas[col_num][1])

        fila = 4

        periodo = Periodo.objects.get(pk=336)
        periodo_anterior = Periodo.objects.get(pk=317)
        # asignatura_titulacion = [7206]
        carrera = [132]
        EJE_FORMATIVO_VINCULACION, EJE_FORMATIVO_PRACTICAS = 11, 9
        itinerario = [0]
        # inscripciones = Inscripcion.objects.filter(status= True, carrera_id__in = carrera, activo=True, persona__cedula = '0956210322')
        inscripciones = Inscripcion.objects.filter(status= True, carrera_id__in = carrera, activo=True)
        cont = 0

        for inscripcion in inscripciones:
            bandera = False
            fecha_retiro = ''
            estado = ''
            nivel_persona = ''
            if PerfilUsuario.objects.filter(status=True, visible=True, inscripcion_id=inscripcion.id):
                if not inscripcion.es_graduado():
                    if not asignaturas_aprobadas_primero_ultimo_nivel(inscripcion.id):
                        if inscripcion.retiro_carrera():
                            estado = 'RETIRADO DE LA CARRERA'
                            fecha_retiro = RetiroCarrera.objects.values_list('fecha', flat=True).filter(status=True, inscripcion = inscripcion).first()
                            nivel_persona = inscripcion.mi_nivel().nivel.nombre
                        else:
                            matricula = Matricula.objects.filter(status=True, inscripcion = inscripcion)
                            if matricula.filter(nivel__periodo = periodo, retiradomatricula = False).exists():
                                estado = 'MATRICULADO EN EL PERIODO ACTUAL'
                                nivel_persona = matricula.first().nivelmalla.nombre
                            elif matricula_tercero_periodo_anterior := matricula.filter(nivel__periodo = periodo_anterior, retiradomatricula=False, materiaasignada__materia__asignaturamalla__nivelmalla__orden =3, materiaasignada__materia__asignaturamalla__asignatura__modulo=False):
                                if matricula_tercero_periodo_anterior:
                                    malla_estudiante = matricula_tercero_periodo_anterior.first().inscripcion.inscripcionmalla_set.values_list('malla_id',flat = True).filter(status=True)
                                    EXCLUDE_EJE_FORMATIVO = [EJE_FORMATIVO_PRACTICAS, EJE_FORMATIVO_VINCULACION]
                                    if matricula_tercero_periodo_anterior.first().inscripcion.itinerario > 0:
                                        itinerario.append(matricula_tercero_periodo_anterior.first().inscripcion.itinerario)
                                    materias_4to_nivel_malla = AsignaturaMalla.objects.values_list('id',flat = True).filter(status=True, malla_id__in = malla_estudiante, nivelmalla__orden = 4, itinerario__in = itinerario).exclude(ejeformativo_id__in=EXCLUDE_EJE_FORMATIVO)
                                    materias_4to_nivel_aprobado = RecordAcademico.objects.filter(status=True, inscripcion=matricula_tercero_periodo_anterior.first().inscripcion,asignaturamalla_id__in=materias_4to_nivel_malla,aprobada=True)
                                    if materias_4to_nivel_malla.count() == materias_4to_nivel_aprobado.count():
                                        estado = 'NO ESTÁ CURSANDO ESTUDIOS EN EL PERIODO ACTUAL'
                                    else:
                                        materias_3ero = matricula_tercero_periodo_anterior.first().materiaasignada_set.filter(status=True, materia__asignaturamalla__nivelmalla__orden =3)
                                        if materias_3ero.filter(estado = 1):
                                            estado = 'MATRICULADO EN 3ERO PERIODO ANTERIOR (EN CURSO - TIENE MATERIAS DE 3ERO APROBADAS)'
                                        else:
                                            estado = 'NO ESTÁ CURSANDO ESTUDIOS EN EL PERIODO ACTUAL'
                                else:
                                    estado = 'NO ESTÁ CURSANDO ESTUDIOS EN EL PERIODO ACTUAL'
                                nivel_persona = inscripcion.mi_nivel().nivel.nombre
                            elif inscripcion.mi_nivel().nivel.orden == 1:
                                    materias_record = inscripcion.recordacademico_set.filter(status=True, asignaturamalla__nivelmalla__orden = 1).exclude(modulomalla_id__gt = 0).exclude(ofimatica_id__gt = 0)
                                    if materias_record:
                                        estado = 'NO ESTÁ CURSANDO ESTUDIOS EN EL PERIODO ACTUAL'
                                        nivel_persona = inscripcion.mi_nivel().nivel.nombre
                                    else:
                                        continue
                            else:
                                estado = 'NO ESTÁ CURSANDO ESTUDIOS EN EL PERIODO ACTUAL'
                                nivel_persona = inscripcion.mi_nivel().nivel.nombre
                    else:
                        if matriculado_titulacion := MatriculaTitulacion.objects.filter(inscripcion_id=inscripcion.id, status = True):
                            if matriculado_titulacion.filter(estado__in = [10,6,1,7]).exists():
                                if matriculado_titulacion.first().estadotitulacion == 1:
                                    estado = 'CURSANDO PROCESO DE TITULACION'
                                elif matriculado_titulacion.first().estadotitulacion == 2:
                                    estado = 'REPROBADO - PENDIENTE DE PROCESO DE TITULACION'
                            else:
                                estado = 'PENDIENTE DE PROCESO DE TITULACION'
                        else:
                            estado = 'PENDIENTE DE PROCESO DE TITULACION'
                        nivel_persona = inscripcion.mi_nivel().nivel.nombre
                else:
                    registro_titulo = Graduado.objects.values_list('registro',flat=True).filter(status=True, inscripcion = inscripcion).first()
                    if not registro_titulo:
                        estado = 'TITULO NO REGISTRADO'
                    else:
                        estado = 'TITULO REGISTRADO'
                    nivel_persona = inscripcion.mi_nivel().nivel.nombre

                cont += 1
                print(str(cont)+ ' ' +str(inscripcion.persona.cedula)+ ' ' +str(inscripcion.persona)+ ' ' +str(inscripcion.carrera.nombre)+ ' ' +str(inscripcion.modalidad.nombre)+ ' ' +str(inscripcion.mi_nivel().nivel.nombre) + ' ' +str(estado)+ ' ' +str(fecha_retiro))
                ws.write(fila, 0, str(inscripcion.persona.cedula) if inscripcion.persona.cedula else '-', fceldageneral)
                ws.write(fila, 1, str(inscripcion.persona.pasaporte) if inscripcion.persona.pasaporte else '-', fceldageneral)
                ws.write(fila, 2, str(inscripcion.persona), fceldageneral)
                ws.write(fila, 3, str(inscripcion.carrera.nombre), fceldageneral)
                ws.write(fila, 4, str(inscripcion.modalidad.nombre), fceldageneral)
                ws.write(fila, 5, str(nivel_persona), fceldageneral)
                ws.write(fila, 6, str(estado) if estado else '-', fceldageneral)
                ws.write(fila, 7, str(fecha_retiro) if fecha_retiro else '-', fceldageneral)

                fila += 1

        workbook.close()
    except Exception as ex:
        err = 'Error on line {}'.format(sys.exc_info()[-1].tb_lineno)
        msg_err = f"Ocurrio un error: {ex.__str__()}. {err}"
        print('%s' % msg_err)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
# funcionlocal.get("reporte_estudiantes_psicologia_enlinea_new")()
# reporte_estudiantes_psicologia_enlinea_new()




def reporte_estudiantes_primer_nivel_psicologia_presencial():
    import xlsxwriter
    import os
    import sys
    from django.db import transaction
    from django.db.models import Q
    from settings import SITE_STORAGE
    from datetime import datetime, timedelta
    from django.db.models import Exists, OuterRef
    from sga.models import Periodo, Notificacion, Malla, AsignaturaMalla, Materia, Matricula, MateriaAsignada, Inscripcion,RetiroCarrera, Graduado, PerfilUsuario, RecordAcademico,MatriculaTitulacion
    from inno.funciones import asignaturas_aprobadas_primero_ultimo_nivel

    try:
        dominio_sistema = 'https://sga.unemi.edu.ec'
        output_folder = os.path.join(SITE_STORAGE, 'media')
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        nombrearchivo = f"reporte_estudiantes_primer_nivel_psicologia_presencial_general_11092024.xlsx"
        workbook = xlsxwriter.Workbook(os.path.join(output_folder, nombrearchivo))
        ws = workbook.add_worksheet("Reporte")

        # Formatos
        fcabeceracolumna = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 10,
            'bg_color': '#D3D3D3', 'border': 1, 'align': 'center', 'valign': 'vcenter'
        })
        fceldageneral = workbook.add_format({'font_name': 'Verdana', 'font_size': 10, 'border': 1})
        ftitulo2izq = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 14,
            'align': 'center', 'valign': 'vcenter'
        })
        fhyperlink = workbook.add_format({
            'font_name': 'Verdana', 'font_size': 10, 'font_color': 'blue', 'underline': 1, 'border': 1
        })

        # Títulos
        ws.merge_range(0, 0, 0, 4, 'UNIVERSIDAD ESTATAL DE MILAGRO', ftitulo2izq)
        ws.merge_range(1, 0, 1, 4, 'REPORTE DE ESTUDIANTES', ftitulo2izq)
        ws.merge_range(2, 0, 2, 4, 'FECHA: ' + datetime.now().strftime("%d-%m-%Y"), ftitulo2izq)

        # Definir columnas
        columnas = [
                    (u"CEDULA", 25),
                    (u"PASAPORTE", 25),
                    (u"NOMBRES", 60),
                    (u"CARRERA", 60),
                    (u"MODALIDAD", 20),
                    (u"AÑO", 20),
                    (u"PERIODO", 50),
                    ]

        row_num = 3
        for col_num in range(len(columnas)):
            ws.write(row_num, col_num, columnas[col_num][0], fcabeceracolumna)
            ws.set_column(col_num, col_num, columnas[col_num][1])

        fila = 4

        periodo = Periodo.objects.get(pk=336)
        periodo_anterior = Periodo.objects.get(pk=317)
        # asignatura_titulacion = [7206]
        carrera = [137]
        # inscripciones = Inscripcion.objects.filter(status= True, carrera_id__in = carrera, activo=True, persona__cedula = '0942475609')
        inscripciones = Inscripcion.objects.filter(status= True, carrera_id__in = carrera, activo=True)
        cont = 0

        periodosofertaacademica = Materia.objects.filter(nivel__periodo__inicio__year__in=[2019,2020,2021,2022],
                                                         asignaturamalla__asignatura__modulo=False,
                                                         asignaturamalla__malla__carrera__coordinacion__in=[2,3],
                                                         status=True).values_list('nivel__periodo',
                                                                                  flat=True).distinct().order_by('nivel__periodo__inicio','nivel__periodo_id')
        periodos = Periodo.objects.filter(pk__in=periodosofertaacademica,  status=True)

        for inscripcion in inscripciones:
            for periodo in periodos:
                matricula_primer_nivel = Matricula.objects.filter(status=True, retiradomatricula = False, nivelmalla_id =1, inscripcion = inscripcion, nivel__periodo = periodo)
                if matricula_primer_nivel:
                    cont += 1
                    print(str(cont)+ ' ' +str(inscripcion.persona.cedula)+ ' ' +str(inscripcion.persona)+ ' ' +str(inscripcion.carrera.nombre)+ ' ' +str(inscripcion.modalidad.nombre)+ ' ' +str(periodo.inicio.year)+ ' ' +str(periodo.nombre))
                    ws.write(fila, 0, str(inscripcion.persona.cedula) if inscripcion.persona.cedula else '-', fceldageneral)
                    ws.write(fila, 1, str(inscripcion.persona.pasaporte) if inscripcion.persona.pasaporte else '-', fceldageneral)
                    ws.write(fila, 2, str(inscripcion.persona), fceldageneral)
                    ws.write(fila, 3, str(inscripcion.carrera.nombre), fceldageneral)
                    ws.write(fila, 4, str(inscripcion.modalidad.nombre), fceldageneral)
                    ws.write(fila, 5, str(periodo.inicio.year), fceldageneral)
                    ws.write(fila, 6, str(periodo.nombre), fceldageneral)

                    fila += 1

        workbook.close()
    except Exception as ex:
        err = 'Error on line {}'.format(sys.exc_info()[-1].tb_lineno)
        msg_err = f"Ocurrio un error: {ex.__str__()}. {err}"
        print('%s' % msg_err)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
# funcionlocal.get("reporte_estudiantes_primer_nivel_psicologia_presencial")()
# reporte_estudiantes_primer_nivel_psicologia_presencial()

def reporte_estudiantes_primer_nivel_psicologia_enlinea():
    import xlsxwriter
    import os
    import sys
    from django.db import transaction
    from django.db.models import Q
    from settings import SITE_STORAGE
    from datetime import datetime, timedelta
    from django.db.models import Exists, OuterRef
    from sga.models import Periodo, Notificacion, Malla, AsignaturaMalla, Materia, Matricula, MateriaAsignada, Inscripcion,RetiroCarrera, Graduado, PerfilUsuario, RecordAcademico,MatriculaTitulacion
    from inno.funciones import asignaturas_aprobadas_primero_ultimo_nivel

    try:
        dominio_sistema = 'https://sga.unemi.edu.ec'
        output_folder = os.path.join(SITE_STORAGE, 'media')
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        nombrearchivo = f"reporte_estudiantes_primer_nivel_psicologia_enlinea_general_11092024.xlsx"
        workbook = xlsxwriter.Workbook(os.path.join(output_folder, nombrearchivo))
        ws = workbook.add_worksheet("Reporte")

        # Formatos
        fcabeceracolumna = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 10,
            'bg_color': '#D3D3D3', 'border': 1, 'align': 'center', 'valign': 'vcenter'
        })
        fceldageneral = workbook.add_format({'font_name': 'Verdana', 'font_size': 10, 'border': 1})
        ftitulo2izq = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 14,
            'align': 'center', 'valign': 'vcenter'
        })
        fhyperlink = workbook.add_format({
            'font_name': 'Verdana', 'font_size': 10, 'font_color': 'blue', 'underline': 1, 'border': 1
        })

        # Títulos
        ws.merge_range(0, 0, 0, 4, 'UNIVERSIDAD ESTATAL DE MILAGRO', ftitulo2izq)
        ws.merge_range(1, 0, 1, 4, 'REPORTE DE ESTUDIANTES', ftitulo2izq)
        ws.merge_range(2, 0, 2, 4, 'FECHA: ' + datetime.now().strftime("%d-%m-%Y"), ftitulo2izq)

        # Definir columnas
        columnas = [
                    (u"CEDULA", 25),
                    (u"PASAPORTE", 25),
                    (u"NOMBRES", 60),
                    (u"CARRERA", 60),
                    (u"MODALIDAD", 20),
                    (u"AÑO", 20),
                    (u"PERIODO", 50),
                    ]

        row_num = 3
        for col_num in range(len(columnas)):
            ws.write(row_num, col_num, columnas[col_num][0], fcabeceracolumna)
            ws.set_column(col_num, col_num, columnas[col_num][1])

        fila = 4

        periodo = Periodo.objects.get(pk=336)
        periodo_anterior = Periodo.objects.get(pk=317)
        # asignatura_titulacion = [7206]
        carrera = [132]
        # inscripciones = Inscripcion.objects.filter(status= True, carrera_id__in = carrera, activo=True, persona__cedula = '0942475609')
        inscripciones = Inscripcion.objects.filter(status= True, carrera_id__in = carrera, activo=True)
        cont = 0

        periodosofertaacademica = Materia.objects.filter(nivel__periodo__inicio__year__in=[2019,2020,2021,2022],
                                                         asignaturamalla__asignatura__modulo=False,
                                                         asignaturamalla__malla__carrera__coordinacion__in=[2,3],
                                                         status=True).values_list('nivel__periodo',
                                                                                  flat=True).distinct().order_by('nivel__periodo__inicio','nivel__periodo_id')
        periodos = Periodo.objects.filter(pk__in=periodosofertaacademica,  status=True)

        for inscripcion in inscripciones:
            for periodo in periodos:
                matricula_primer_nivel = Matricula.objects.filter(status=True, retiradomatricula = False, nivelmalla_id =1, inscripcion = inscripcion, nivel__periodo = periodo)
                if matricula_primer_nivel:
                    cont += 1
                    print(str(cont)+ ' ' +str(inscripcion.persona.cedula)+ ' ' +str(inscripcion.persona)+ ' ' +str(inscripcion.carrera.nombre)+ ' ' +str(inscripcion.modalidad.nombre)+ ' ' +str(periodo.inicio.year)+ ' ' +str(periodo.nombre))
                    ws.write(fila, 0, str(inscripcion.persona.cedula) if inscripcion.persona.cedula else '-', fceldageneral)
                    ws.write(fila, 1, str(inscripcion.persona.pasaporte) if inscripcion.persona.pasaporte else '-', fceldageneral)
                    ws.write(fila, 2, str(inscripcion.persona), fceldageneral)
                    ws.write(fila, 3, str(inscripcion.carrera.nombre), fceldageneral)
                    ws.write(fila, 4, str(inscripcion.modalidad.nombre), fceldageneral)
                    ws.write(fila, 5, str(periodo.inicio.year), fceldageneral)
                    ws.write(fila, 6, str(periodo.nombre), fceldageneral)

                    fila += 1

        workbook.close()
    except Exception as ex:
        err = 'Error on line {}'.format(sys.exc_info()[-1].tb_lineno)
        msg_err = f"Ocurrio un error: {ex.__str__()}. {err}"
        print('%s' % msg_err)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()
# reporte_estudiantes_primer_nivel_psicologia_enlinea()
# funcionlocal.get("reporte_estudiantes_primer_nivel_psicologia_enlinea")()


def reporte_estudiantes_psicologia_enlinea():
    import xlsxwriter
    import os
    import sys
    from django.db import transaction
    from django.db.models import Q
    from settings import SITE_STORAGE
    from datetime import datetime, timedelta
    from django.db.models import Exists, OuterRef
    from sga.models import Periodo, Notificacion, Malla, AsignaturaMalla, Materia, Matricula, MateriaAsignada, Inscripcion,RetiroCarrera, Graduado, PerfilUsuario, RecordAcademico
    from inno.funciones import asignaturas_aprobadas_primero_ultimo_nivel

    try:
        dominio_sistema = 'https://sga.unemi.edu.ec'
        output_folder = os.path.join(SITE_STORAGE, 'media')
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        nombrearchivo = f"reporte_estudiantes_primer_nivel_psicologia_enlinea_general.xlsx"
        workbook = xlsxwriter.Workbook(os.path.join(output_folder, nombrearchivo))
        ws = workbook.add_worksheet("Reporte")

        # Formatos
        fcabeceracolumna = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 10,
            'bg_color': '#D3D3D3', 'border': 1, 'align': 'center', 'valign': 'vcenter'
        })
        fceldageneral = workbook.add_format({'font_name': 'Verdana', 'font_size': 10, 'border': 1})
        ftitulo2izq = workbook.add_format({
            'font_name': 'Verdana', 'bold': True, 'font_size': 14,
            'align': 'center', 'valign': 'vcenter'
        })
        fhyperlink = workbook.add_format({
            'font_name': 'Verdana', 'font_size': 10, 'font_color': 'blue', 'underline': 1, 'border': 1
        })

        # Títulos
        ws.merge_range(0, 0, 0, 4, 'UNIVERSIDAD ESTATAL DE MILAGRO', ftitulo2izq)
        ws.merge_range(1, 0, 1, 4, 'REPORTE DE ESTUDIANTES', ftitulo2izq)
        ws.merge_range(2, 0, 2, 4, 'FECHA: ' + datetime.now().strftime("%d-%m-%Y"), ftitulo2izq)

        # Definir columnas
        columnas = [
                    (u"CEDULA", 25),
                    (u"PASAPORTE", 25),
                    (u"NOMBRES", 60),
                    (u"CARRERA", 60),
                    (u"MODALIDAD", 20),
                    (u"NIVEL", 20),
                    (u"ESTADO", 20),
                    (u"FECHA (RETIRO)", 20),
                    ]

        row_num = 3
        for col_num in range(len(columnas)):
            ws.write(row_num, col_num, columnas[col_num][0], fcabeceracolumna)
            ws.set_column(col_num, col_num, columnas[col_num][1])

        fila = 4

        periodo = Periodo.objects.get(pk=336)
        asignatura_titulacion_octavo = [10659]
        asignatura_titulacion_noveno = [10665]
        carrera = [132]
        # inscripciones = Inscripcion.objects.filter(status= True, carrera_id__in = [132, 137], activo=True)
        # inscripciones = Inscripcion.objects.filter(status= True, carrera_id__in = carrera, activo=True, persona__cedula = '0926405192')
        inscripciones = Inscripcion.objects.filter(status= True, carrera_id__in = carrera, activo=True)
        cont = 0

        for inscripcion in inscripciones:
            bandera = False
            fecha_retiro = ''
            estado = ''
            if PerfilUsuario.objects.filter(status=True, visible=True, inscripcion_id=inscripcion.id):
                if not inscripcion.es_graduado():
                    if not asignaturas_aprobadas_primero_ultimo_nivel(inscripcion.id):
                        if inscripcion.retiro_carrera():
                            estado = 'RETIRADO DE LA CARRERA'
                            fecha_retiro = RetiroCarrera.objects.values_list('fecha', flat=True).filter(status=True, inscripcion = inscripcion).first()
                        else:
                            matricula = Matricula.objects.filter(status=True, inscripcion = inscripcion)
                            if matricula.filter(nivel__periodo = periodo, retiradomatricula = False).exists():
                                materias_titulacion = MateriaAsignada.objects.filter(status=True, matricula=matricula.first(), retiramateria=False, materia__asignaturamalla_id__in = [10659,10665])
                                if materias_titulacion.exists():
                                    estado = 'MATRICULADO EN ASIGNATURAS DE TITULACION'
                                else:
                                    estado = 'MATRICULADO EN EL PERIODO ACTUAL'
                            else:
                                #TITULACION DE 8VO
                                aprobado_titulacion_octavo = RecordAcademico.objects.filter(status=True, inscripcion = inscripcion, asignaturamalla_id__in = asignatura_titulacion_octavo, aprobada = True)
                                if not aprobado_titulacion_octavo:
                                    asigmalla_octavo = AsignaturaMalla.objects.filter(status = True, pk__in = asignatura_titulacion_octavo).first()
                                    predecesoras_octavo = asigmalla_octavo.asignaturamallapredecesora_set.all().order_by('predecesora__asignatura')
                                    requisitos_aprobados_octavo = RecordAcademico.objects.filter(status=True, inscripcion = inscripcion, asignaturamalla_id__in = predecesoras_octavo.values_list('predecesora_id',flat=True), aprobada = True)
                                aprobado_titulacion_noveno = RecordAcademico.objects.filter(status=True,inscripcion=inscripcion,asignaturamalla_id__in=asignatura_titulacion_noveno,aprobada=True)
                                if not aprobado_titulacion_noveno:
                                    # TITULACION DE 9NO
                                    asigmalla_noveno = AsignaturaMalla.objects.filter(status=True, pk__in=asignatura_titulacion_noveno).first()
                                    predecesoras_noveno = asigmalla_noveno.asignaturamallapredecesora_set.all().order_by('predecesora__asignatura')
                                    requisitos_aprobados_noveno = RecordAcademico.objects.filter(status=True,inscripcion=inscripcion,asignaturamalla_id__in=predecesoras_noveno.values_list('predecesora_id',flat=True),aprobada=True)
                                if predecesoras_octavo.count() == requisitos_aprobados_octavo.count():
                                    estado = 'TIENE APROBADO REQUISITOS DE OCTAVO DE ASIGNATURA DE TITULACION - NO MATRICULADO EN EL PERIODO ACTUAL'
                                elif predecesoras_noveno.count() == requisitos_aprobados_noveno.count():
                                    estado = 'TIENE APROBADO REQUISITOS DE NOVENO DE ASIGNATURA DE TITULACION - NO MATRICULADO EN EL PERIODO ACTUAL'
                                else:
                                    continue
                    else:
                        continue
                else:
                    registro_titulo = Graduado.objects.values_list('registro',flat=True).filter(status=True, inscripcion = inscripcion).first()
                    if not registro_titulo:
                        estado = 'TITULO NO REGISTRADO'
                    else:
                        estado = 'TITULO REGISTRADO'

                cont += 1
                print(str(cont)+ ' ' +str(inscripcion.persona.cedula)+ ' ' +str(inscripcion.persona)+ ' ' +str(inscripcion.carrera.nombre)+ ' ' +str(inscripcion.modalidad.nombre)+ ' ' +str(inscripcion.mi_nivel().nivel.nombre) + ' ' +str(estado)+ ' ' +str(fecha_retiro))
                ws.write(fila, 0, str(inscripcion.persona.cedula) if inscripcion.persona.cedula else '-', fceldageneral)
                ws.write(fila, 1, str(inscripcion.persona.pasaporte) if inscripcion.persona.pasaporte else '-', fceldageneral)
                ws.write(fila, 2, str(inscripcion.persona), fceldageneral)
                ws.write(fila, 3, str(inscripcion.carrera.nombre), fceldageneral)
                ws.write(fila, 4, str(inscripcion.modalidad.nombre), fceldageneral)
                ws.write(fila, 5, str(inscripcion.mi_nivel().nivel.nombre), fceldageneral)
                ws.write(fila, 6, str(estado) if estado else '-', fceldageneral)
                ws.write(fila, 7, str(fecha_retiro) if fecha_retiro else '-', fceldageneral)

                fila += 1

        workbook.close()
    except Exception as ex:
        err = 'Error on line {}'.format(sys.exc_info()[-1].tb_lineno)
        msg_err = f"Ocurrio un error: {ex.__str__()}. {err}"
        print('%s' % msg_err)
        noti = Notificacion(titulo='Error',
                            cuerpo='Ha ocurrido un error {} - Error en la linea {}'.format(
                                ex, sys.exc_info()[-1].tb_lineno),
                            destinatario_id=38488, url="",
                            prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1),
                            tipo=2, en_proceso=False, error=True)
        noti.save()

# funcionlocal.get("reporte_estudiantes_psicologia_enlinea")()


# from sga.models import Periodo, Carrera, Materia
# from inno.models import EstudiantesCandidatosaPresidentesdeCurso
# def carga_de_candidatos_a_presidentes_actualizado_v3(periodo, carrera, niveles=None):
#         import sys
#         from settings import DEBUG
#         from collections import Counter
#         from django.db import transaction
#         from datetime import datetime, timedelta
#         from inno.models import EstudiantesCandidatosaPresidentesdeCurso
#         from sga.models import MatriculacionPrimerNivelCarrera, AsignaturaMalla, Matricula, MateriaAsignada, Notificacion
#         try:
#             notarecord = 0.0
#             inscripciones = []
#             bandera, matriculas = False, None
#             carrera_admision, contador_registro = 0, 0
#             with transaction.atomic():
#                 try:
#                     # ELIMINAR LISTADO ANTERIOR PARA REALIZAR ALGUNA MODIFICACION
#                     listadonomigrados = '<br>'
#                     filtrobaseasignaturamalla = Q(status=True, malla__carrera=carrera, malla__status=True)
#                     if niveles:
#                         filtrobaseasignaturamalla &= Q(nivelmalla__orden__in=niveles)
#                     niveles_carrera = AsignaturaMalla.objects.values_list('nivelmalla__orden', 'nivelmalla__nombre').filter(filtrobaseasignaturamalla).order_by('nivelmalla__orden').distinct()
#                     filtrobasemateriaasignada = Q(materia__asignaturamalla__itinerario=0, retiromanual=False, retiramateria=False, matricula__retiradomatricula=False, matricula__status=True, materia__status=True, materia__asignaturamalla__status=True, materia__asignaturamalla__asignatura__modulo=False, status=True)
#                     for nivel in niveles_carrera:
#                         if nivel and not f"{nivel[0]}".isdigit():
#                             continue
#                         matriculas = Matricula.objects.filter(status=True, nivel__periodo=periodo, inscripcion__carrera_id=carrera, nivelmalla__orden=nivel[0]).order_by('nivelmalla__orden')
#                         listadonomigrados = '<br>'
#                         for i, matricula in enumerate(matriculas, start=1):
#                             try:
#                                 mi_malla = matricula.inscripcion.mi_malla()
#                                 materiasasignadas = matricula.materiaasignada_set.filter(filtrobasemateriaasignada& Q(materia__asignaturamalla__nivelmalla=matricula.nivelmalla)).exclude(materia__asignaturamalla__ejeformativo_id__in=[4, 9, 11, 12]).exclude(materia__asignaturamalla__malla=353).exclude(materia__asignaturamalla__tipomateria=3)
#                                 asignaturasmallae = mi_malla.asignaturamalla_set.filter(itinerario=0, asignatura__modulo=False, status=True, malla__carrera=matricula.inscripcion.carrera, nivelmalla=matricula.nivelmalla, vigente=True, opcional=False).exclude(ejeformativo_id__in=[4, 9, 11, 12]).exclude(tipomateria=3)
#                                 cant_asignatura_malla, cant_materias_estudiante_nivel = asignaturasmallae.count(), materiasasignadas.count()
#                                 if cant_asignatura_malla == cant_materias_estudiante_nivel:
#                                     itinerario, regular = [0], True
#                                     eInscripcion_mat = matricula.inscripcion
#                                     EJE_FORMATIVO_VINCULACION, EJE_FORMATIVO_PRACTICAS = 11, 9
#                                     if eMatriculaAnterior := Matricula.objects.filter(status=True, nivel__periodo=periodo, inscripcion=matricula.inscripcion).first():
#                                         eInscripcion_mat = eMatriculaAnterior.inscripcion
#                                     EXCLUDE_EJE_FORMATIVO = [EJE_FORMATIVO_PRACTICAS, EJE_FORMATIVO_VINCULACION]
#                                     eInscripcionMalla_mat = eInscripcion_mat.malla_inscripcion()
#                                     eMalla_mat = eInscripcionMalla_mat.malla
#                                     eAsignaturasMalla = eMalla_mat.asignaturamalla_set.select_related().filter(vigente=True, opcional=False, status=True).exclude(nivelmalla_id=0).exclude(itinerario__gt=0).order_by('nivelmalla', 'ejeformativo')
#
#                                     if eInscripcionMalla_mat and eInscripcionMalla_mat.malla and eInscripcionMalla_mat.malla.modalidad and not eInscripcionMalla_mat.malla.modalidad.id == 3:
#                                         eAsignaturasMalla = eAsignaturasMalla.exclude(ejeformativo_id__in=EXCLUDE_EJE_FORMATIVO)
#                                     eModulosMalla = ModuloMalla.objects.filter(malla=eInscripcionMalla_mat.malla)
#
#                                     if matricula.tipomatriculalumno() == 'REGULAR':
#                                         tienesegundamatricula = False
#                                         for materiaasignada in materiasasignadas:
#                                             if materiaasignada.cantidad_matriculas() > 1:
#                                                 tienesegundamatricula = True
#                                                 break
#                                         if materiasasignadas and not tienesegundamatricula:
#                                             paralelos_estudiante = list(materiasasignadas.values_list('materia__paralelo', flat=True))
#                                             contador = Counter(paralelos_estudiante)
#                                             paralelo_perteneciente = contador.most_common(1)[0][0]
#                                             inscripciones.append(matricula.nivelmalla.nombre)
#                                             sexo = 'MUJER' if matricula.inscripcion.persona.es_mujer() else 'HOMBRE'
#                                             if not EstudiantesCandidatosaPresidentesdeCurso.objects.filter(periodo_id=periodo.id, cedula=matricula.inscripcion.persona.cedula, nivel=str(nivel[1]), carrera_id=carrera.pk, status=True).exists():
#                                                 if matricula and matricula.nivelmalla and matricula.nivelmalla.id == 1:
#                                                     if id_configuracion_admision_pregrado := MatriculacionPrimerNivelCarrera.objects.values_list('configuracion_id', flat=True).filter(status=True, ejecutoaccion=True).order_by('configuracion_id').last():
#                                                         if carrera_admision := list(MatriculacionPrimerNivelCarrera.objects.values_list('carreraadmision_id', flat=True).filter(status=True, carrerapregrado_id=carrera, configuracion_id=id_configuracion_admision_pregrado).distinct()):
#                                                             if materia_asignada_admision := MateriaAsignada.objects.values_list('notafinal', flat=True).filter(status=True, matricula__inscripcion__persona__cedula=matricula.inscripcion.persona.cedula, matricula__inscripcion__carrera__id=carrera_admision[0], estado=1):
#                                                                 notarecord = round(sum(materia_asignada_admision) / materia_asignada_admision.count(), 2)
#                                                 else:
#                                                     notarecord = matricula.inscripcion.promedio_record()
#                                                 presidentes = EstudiantesCandidatosaPresidentesdeCurso(status=True,
#                                                                                                        periodo_id=periodo.id,
#                                                                                                        periodo_nombre=periodo.nombre,
#                                                                                                        carrera_id=carrera.pk,
#                                                                                                        inscripcion=matricula.inscripcion.pk,
#                                                                                                        matricula=matricula.pk,
#                                                                                                        cedula=matricula.inscripcion.persona.cedula,
#                                                                                                        nombres=matricula.inscripcion.persona.nombre_completo_inverso(),
#                                                                                                        correo=matricula.inscripcion.persona.emailinst,
#                                                                                                        telefono=matricula.inscripcion.persona.telefono,
#                                                                                                        sexo=sexo,
#                                                                                                        carrera=matricula.inscripcion.carrera.nombre,
#                                                                                                        orden=int(nivel[0]),
#                                                                                                        nivel=str(nivel[1]),
#                                                                                                        paralelo=f"{paralelo_perteneciente}",
#                                                                                                        promedio_final=str(notarecord))
#                                                 presidentes.save()
#                                                 contador_registro += 1
#                                                 DEBUG and print(f"{presidentes.nivel}.- {matricula.inscripcion.persona.nombre_completo_inverso()} - {carrera.nombre}")
#                             except Exception as ex:
#                                 listadonomigrados += f'{matricula.inscripcion.persona} - {ex} <br>'
#                     noti = Notificacion(titulo=f'Proceso finalizado...', cuerpo=f'{listadonomigrados} - {carrera}', destinatario_id=37121, url="", prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1), tipo=2, en_proceso=False, error=True)
#                     noti.save()
#                 except Exception as ex:
#                     transaction.set_rollback(True)
#                     raise NameError(f"{ex} - L: {sys.exc_info()[-1].tb_lineno}")
#         except Exception as ex:
#             noti = Notificacion(titulo=f'Error en {carrera}'.upper(), cuerpo=f'Ha ocurrido un error {ex} - error en la linea {sys.exc_info()[-1].tb_lineno}', destinatario_id=37121, url="", prioridad=1, app_label='SGA', fecha_hora_visible=datetime.now() + timedelta(days=1), tipo=2, en_proceso=False, error=True)
#             noti.save()
#
# periodo = Periodo.objects.get(id=336)
# for carrera in Carrera.objects.filter(id__in=[110, 112, 138, 133], status=True, malla__vigente=True):
#     EstudiantesCandidatosaPresidentesdeCurso.objects.filter(status=True, carrera_id=carrera.pk, periodo_id=periodo.pk).delete()
#     carga_de_candidatos_a_presidentes_actualizado_v3(periodo, carrera)
#     # funcionlocal.get("carga_de_candidatos_a_presidentes_actualizado_v3")(periodo, carrera)

# carrerasconitinerario = Materia.objects.values_list('asignaturamalla__malla__carrera__id','asignaturamalla__nivelmalla__orden').filter(status=True, nivel__periodo=periodo).exclude(asignaturamalla__itinerario=0).distinct()
# carreras = list(set([c[0] for c in carrerasconitinerario]))
# for c in carreras:
#     niveles = [x[1] for x in carrerasconitinerario if x[0] == c]
#     carrera = Carrera.objects.get(id=c)
#     carga_de_candidatos_a_presidentes_actualizado_v3(periodo, carrera, niveles)
#     # funcionlocal.get("carga_de_candidatos_a_presidentes_actualizado_v3")(periodo, carrera, niveles)


def carga_de_candidatos_a_presidentes_casos_especiales_psicologia_actualizado_promedio():
    from inno.models import EstudiantesCandidatosaPresidentesdeCurso
    from sga.models import MatriculacionPrimerNivelCarrera, Periodo, AsignaturaMalla, Matricula, MateriaAsignada, \
        RecordAcademico, Notificacion
    from collections import Counter
    from django.db import transaction
    try:

        periodo = Periodo.objects.get(status=True, pk=336)
        carreras = []
        inscripciones = []
        notarecord = 0.0
        carrera_admision = 0
        id_configuracion_admision_pregrado = 0
        bandera = False
        matriculas = None
        contador_registro = 0
        cant_asignaturas_aprobadas_en_el_nivel = 0
        filtrobasemateriaasignada = Q(materia__asignaturamalla__itinerario=0, retiromanual=False, retiramateria=False,
                                      matricula__retiradomatricula=False, matricula__status=True, materia__status=True,
                                      materia__asignaturamalla__status=True,
                                      materia__asignaturamalla__asignatura__modulo=False, status=True)
        id_configuracion_admision_pregrado = MatriculacionPrimerNivelCarrera.objects.values_list('configuracion_id',
                                                                                                 flat=True).filter(
            status=True, ejecutoaccion=True).order_by('configuracion_id').last()

        # carreras = MatriculacionPrimerNivelCarrera.objects.values_list('carrerapregrado_id',flat=True).filter(status=True, ejecutoaccion=True, configuracion_id = id_configuracion_admision_pregrado)
        carreras = [132]
        periodo_anterior = Periodo.objects.get(pk=317)
        for carrera in carreras:
            with transaction.atomic():
                # EstudiantesCandidatosaPresidentesdeCurso.objects.filter(status=True, carrera_id=carrera,periodo_id=int(periodo.pk)).update(status=False)
                EstudiantesCandidatosaPresidentesdeCurso.objects.filter(
                    status=True,
                    periodo_id=336,
                    carrera_id=132,
                    paralelo__iexact='C4',  # ilike equivalente en ORM es iexact
                    orden=8
                ).update(status=False)
                # niveles_carrera = AsignaturaMalla.objects.values_list('nivelmalla__orden', 'nivelmalla__nombre').filter(
                #     status=True, malla__carrera_id=carrera, malla__status=True).order_by(
                #     'nivelmalla__orden').distinct()
                niveles_carrera = AsignaturaMalla.objects.values_list('nivelmalla__orden', 'nivelmalla__nombre').filter(
                    status=True, malla__carrera_id=carrera, malla__status=True, nivelmalla__orden = 8).order_by(
                    'nivelmalla__orden').distinct()

                for nivel in niveles_carrera:
                    matriculas = Matricula.objects.filter(status=True, nivel__periodo=periodo,
                                                          inscripcion__carrera_id=carrera,
                                                          nivelmalla__orden=nivel[0]).order_by('nivelmalla__orden')

                    for matricula in matriculas:
                        mi_malla = matricula.inscripcion.mi_malla()
                        cant_asignatura_malla = AsignaturaMalla.objects.filter(status=True, malla=mi_malla,
                                                                               malla__carrera=matricula.inscripcion.carrera,
                                                                               nivelmalla=matricula.nivelmalla).exclude(
                            itinerario__gt=0).exclude(ejeformativo_id__in=[4, 9, 11]).count()
                        # cant_asignatura_malla = list(filter(lambda e: e.malla.uso_en_periodo(periodo), asigmal)).__len__()
                        cant_materias_estudiante = MateriaAsignada.objects.filter(filtrobasemateriaasignada,
                                                                                  matricula=matricula,
                                                                                  materia__asignaturamalla__nivelmalla=matricula.nivelmalla).exclude(
                            materia__asignaturamalla__itinerario__gt=0).exclude(
                            materia__asignaturamalla__ejeformativo_id__in=[4, 9, 11]).exclude(
                            materia__asignaturamalla__malla=353).count()
                        cant_asignaturas_aprobadas_en_el_nivel = RecordAcademico.objects.filter(status=True,
                                                                                                inscripcion=matricula.inscripcion,
                                                                                                asignaturamalla__nivelmalla=matricula.nivelmalla,
                                                                                                aprobada=True).exclude(
                            asignaturamalla__itinerario__gt=0).exclude(
                            asignaturamalla__ejeformativo_id__in=[4, 9, 11]).count()
                        cant_materias_estudiante += cant_asignaturas_aprobadas_en_el_nivel
                        if cant_asignatura_malla == cant_materias_estudiante:
                            if matricula.tipomatriculalumno() == 'REGULAR':
                                materiasasignadas = MateriaAsignada.objects.filter(filtrobasemateriaasignada,
                                                                                   matricula=matricula,
                                                                                   materia__asignaturamalla__nivelmalla=matricula.nivelmalla).exclude(
                                    materia__asignaturamalla__itinerario__gt=0).exclude(
                                    materia__asignaturamalla__ejeformativo_id__in=[4, 9, 11]).exclude(
                                    materia__asignaturamalla__malla=353)
                                bandera = False
                                if materiasasignadas:
                                    for materiaasignada in materiasasignadas:
                                        if materiaasignada.cantidad_matriculas() > 1:
                                            bandera = True
                                            break

                                    if not bandera == True:
                                        if matricula.nivelmalla.id == 1:
                                            notarecord = 'Matricula especial'
                                        else:
                                            # notarecord = matricula.inscripcion.promedio_record()
                                            sum_notarecord = 0
                                            notarecord = 0
                                            matricula_anterior = Matricula.objects.filter(status=True,
                                                                                          nivel__periodo=periodo_anterior,
                                                                                          retiradomatricula=False,
                                                                                          bloqueomatricula=False,
                                                                                          inscripcion=matricula.inscripcion,
                                                                                          inscripcion__carrera_id=carrera).first()
                                            if matricula_anterior:
                                                materias_asignadas_periodo_anterior = matricula_anterior.materiaasignada_set.filter(
                                                    status=True, retiramateria=False, materia__asignaturamalla__asignatura__modulo=False)
                                                total_materias = len(materias_asignadas_periodo_anterior)  # Cantidad de materias
                                                # Asegúrate de que haya materias antes de realizar la operación
                                                if total_materias > 0:
                                                    for mat in materias_asignadas_periodo_anterior:
                                                        sum_notarecord += mat.notafinal  # Suma de las notas finales
                                                    notarecord = round((sum_notarecord / total_materias),2)
                                            else:
                                                continue
                                        paralelos_estudiante = list(
                                            materiasasignadas.values_list('materia__paralelo', flat=True))
                                        contador = Counter(paralelos_estudiante)
                                        paralelo_perteneciente = contador.most_common(1)[0][0]
                                        if paralelo_perteneciente == 'C4':
                                            inscripciones.append(matricula.nivelmalla.nombre)
                                            sexo = ''
                                            if matricula.inscripcion.persona.sexo.id == 1:
                                                sexo = 'MUJER'
                                            else:
                                                sexo = 'HOMBRE'

                                            if not EstudiantesCandidatosaPresidentesdeCurso.objects.filter(status=True,
                                                                                                           periodo_id=int(
                                                                                                               periodo.pk),
                                                                                                           matricula=int(
                                                                                                               matricula.pk),
                                                                                                           inscripcion=int(
                                                                                                               matricula.inscripcion.pk),
                                                                                                           carrera_id=int(
                                                                                                               carrera)).exists():
                                                presidentes = EstudiantesCandidatosaPresidentesdeCurso(status=True,
                                                                                                       periodo_id=int(
                                                                                                           periodo.pk),
                                                                                                       periodo_nombre=str(
                                                                                                           periodo.nombre),
                                                                                                       carrera_id=int(
                                                                                                           carrera),
                                                                                                       inscripcion_id=int(
                                                                                                           matricula.inscripcion.pk),
                                                                                                       matricula=int(
                                                                                                           matricula.pk),
                                                                                                       cedula=str(
                                                                                                           matricula.inscripcion.persona.cedula),
                                                                                                       nombres=str(
                                                                                                           matricula.inscripcion.persona.nombre_completo_inverso()),
                                                                                                       correo=str(
                                                                                                           matricula.inscripcion.persona.emailinst),
                                                                                                       telefono=str(
                                                                                                           matricula.inscripcion.persona.telefono),
                                                                                                       sexo=sexo,
                                                                                                       carrera=str(
                                                                                                           matricula.inscripcion.carrera.nombre),
                                                                                                       orden=int(nivel[0]),
                                                                                                       nivel=str(nivel[1]),
                                                                                                       paralelo=str(
                                                                                                           paralelo_perteneciente),
                                                                                                       promedio_final=str(
                                                                                                           notarecord))
                                                presidentes.save()
                                                contador_registro += 1
                                                print(str(contador_registro) + ' - ' + str(
                                                    matricula.inscripcion.persona.cedula) + ' - ' + str(
                                                    matricula.inscripcion.persona.nombre_completo_inverso()) + ' - ' + str(
                                                    matricula.inscripcion.carrera.nombre) + ' - ' + str(
                                                    nivel[1]) + ' - ' + str(paralelo_perteneciente) + ' - ' + str(
                                                    notarecord))
                                            else:
                                                continue

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)

# carga_de_candidatos_a_presidentes_casos_especiales_psicologia_actualizado_promedio()
# funcionlocal.get("carga_de_candidatos_a_presidentes_casos_especiales_psicologia_actualizado_promedio")()