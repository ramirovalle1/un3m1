# -*- coding: UTF-8 -*-
# import datetime
import json
import os
import io
import random
import fitz
import time
import sys
import math
import zipfile
import calendar
from core.firmar_documentos import firmar, firmarmasivo, obtener_posicion_y, obtener_posicion_x_y_saltolinea
from core.firmar_documentos_ec import JavaFirmaEc
from datetime import date, datetime, timedelta, time
from django.views.decorators.csrf import csrf_exempt
from decimal import Decimal
from django.db import models, connection, connections
import pyqrcode
from django.contrib.auth.decorators import login_required
from django.db import transaction
from django.db.models import Count, PROTECT, Sum, Avg, Min, Max, F, OuterRef, Subquery, FloatField, Exists
from django.db.models.query_utils import Q
from django.forms import model_to_dict
from django.http import HttpResponseRedirect, JsonResponse, HttpResponse
from django.shortcuts import render
from django.template.context import Context
from django.template.loader import get_template
from xlwt import *
from django.contrib import messages
from django.core.files import File as DjangoFile
from decorators import secure_module, last_access
from moodle import moodle
from moodle.moodle import ActualizarBannerCurso
from sagest.models import Departamento
from settings import MATRICULACION_LIBRE, ARCHIVO_TIPO_SYLLABUS, VER_SILABO_MALLA, VER_PLAN_ESTUDIO, SITE_STORAGE, \
    TIPO_DOCENTE_TEORIA, TIPO_DOCENTE_FIRMA, TIPO_DOCENTE_AYUDANTIA, DEBUG, MEDIA_URL
from sga.commonviews import adduserdata, actualizar_nota_planificacion, verificar_si_pertenece_materia_docente, \
    traerNotificaciones
from sga.excelbackground import reportematriculadosenmateria
from sga.forms import LinkMateriaExamenForm, PlanificacionForm, ArchivoPlanificacionForm, ImportarPlanificacionForm, \
    DocumentoMateriaForm, ArchivoSyllabusPdfForm, ArchivoSyllabusWordForm, ArchivoSyllabusForm, AvComunicacionForm, \
    SilaboForm, BibliografiaProgramaAnaliticoAsignaturaForm, GPPracticaFrom, SilaboDigitalFirmadoForm, \
    BibliografiaComplementariaForm, SilaboSemanalForm, AvPreguntaDocenteIniForm, RecursosTutorSemanalForm, \
    TareaSilaboSemanalForm, ForoSilaboSemanalForm, TestSilaboSemanalForm, \
    GuiaEstudianteSilaboSemanalForm, GuiaDocenteSilaboSemanalForm, DiapositivaSilaboSemanalForm, \
    CompendioSilaboSemanalForm, MaterialAdicionalSemanalForm, VideoMagistralSilaboSemanalForm, \
    ArticuloSilaboSemanalForm, GPPracticaRecursoFrom, \
    ObjetivoProgramaAnaliticoAsignaturaForm, TareaPracticaSilaboSemanalForm, TareaSilaboSemanalRubricaForm, \
    TestSilaboSemanalAdmisionForm, CriterioRubricaForm, DetalleCriterioRubricaForm, RubricaProfesorForm, ExamenSilaboSemanalForm, TestSilaboSemanalAdmForm, BannerMateriaForm
from sga.funciones import log, generar_nombre, variable_valor, null_to_decimal, dia_semana_ennumero_fecha, MiPaginador, \
    convertir_fecha_hora_invertida, numeroactividadesdinamico, ultimocodigoactividaddinamico, \
    remover_caracteres_tildes_unicode, remover_caracteres_especiales_unicode, convertir_lista, convertir_fecha, tituloinstitucion
from sga.funciones_templatepdf import actatitulacioncomplexivo, listadofaltantefirmaracta
from sga.funcionesxhtml2pdf import conviert_html_to_pdf, conviert_html_to_pdfsaveqrguiapractica, \
    conviert_html_to_pdf_parametros_save, conviert_html_to_pdf_name, conviert_html_to_pdf_save_file_model
from sga.models import LinkMateriaExamen, Materia, PlanificacionMateria, MateriaAsignadaPlanificacion, \
    DocumentosMateria, Archivo, ProgramaAnaliticoMalla, ProgramaAnaliticoAsignaturaMalla, \
    ProgramaAnaliticoAsignatura, ContenidoResultadoProgramaAnalitico, \
    BibliografiaProgramaAnaliticoAsignatura, AvPreguntaDocente, \
    AvPreguntaRespuesta, miinstitucion, AvComunicacion, SilaboSemanal, DetalleSilaboSemanalBibliografiaDocente, \
    Silabo, DetalleSilaboSemanalSubtema, DetalleSilaboSemanalTema, SubtemaUnidadResultadoProgramaAnalitico, \
    DetalleSilaboSemanalBibliografia, InventarioLaboratorioAcademia, \
    GPGuiaPracticaSemanal, GPInstruccion, GPLugarPracticaDetalle, \
    LibroKohaProgramaAnaliticoAsignatura, PlanificacionClaseSilabo_Materia, CronogramaSilabo, \
    TemaUnidadResultadoProgramaAnalitico, Persona, CUENTAS_CORREOS, AuditoriaTareas, PlanificacionSemanalSalida, \
    AuditoriaNotas, BibliograbiaAPASilabo, SubTemaAdicionalesSilabo, TemaAsistencia, SubTemaAsistencia, \
    SubTemaAdicionalAsistencia, Periodo, RecursosDidacticosSemanal, ProfesorMateria, MateriaAsignada, \
    PlanificacionClaseSilabo, TIPO_RECURSOS, TIPO_LINK, TIPO_ACTIVIDAD, DetalleRecursoTutorSemanal, \
    DetalleModeloEvaluativo, TareaSilaboSemanal, GuiaDocenteSilaboSemanal, GuiaEstudianteSilaboSemanal, \
    DiapositivaSilaboSemanal, ForoSilaboSemanal, CompendioSilaboSemanal, TestSilaboSemanal, \
    MaterialAdicionalSilaboSemanal, PreguntaTestSilaboSemanal, AlternativaPreguntaTestSilaboSemanal, \
    DetalleSilaboSemanalActividadesMoodle, ActividadesMoodle, \
    SubtemaUnidadResultadoProgramaAnaliticoPosgrado, DetalleSilaboSemanalSubtemaPosgrado, CoordinadorCarrera, \
    SilaboFirmas, HistorialaprobacionTarea, HistorialaprobacionForo, HistorialaprobacionTest, \
    HistorialaprobacionGuiaEstudiante, HistorialaprobacionGuiaDocente, HistorialaprobacionDiapositiva, \
    HistorialaprobacionCompendio, HistorialaprobacionMaterial, VideoMagistralSilaboSemanal, \
    HistorialaprobacionVideoMagistral, EvaluacionAprendizajeComponente, EvaluacionAprendizajeSilaboSemanal, \
    ArticuloSilaboSemanal, GPObjetivo, GPBibliografiaBasica, GPBibliografiaComplementaria, GPBibliografiaVirtual, \
    GPTemas, TareaPracticaSilaboSemanal, GPArticulo, AMBIENTE_APRENDIZAJE, UBICACION_APRENDIZAJE, RubricaMoodle, \
    DetalleItemRubricaMoodle, TestSilaboSemanalAdmision, ItemRubricaMoodle, HorarioExamen, \
    HistorialaprobacionTareaPractica, EvaluacionAprendizajeTema, ArticuloInvestigacion, EvaluacionComponente, \
    COLORES_ACTIVIDADES, HistorialaprobacionTestAdmision, SesionZoom, Matricula, HistorialPersonaPPL, \
    HorarioExamenDetalleAlumno, HorarioExamenDetalle, SedeVirtual, TipoAula, MateriaTitulacion, Profesor, \
    DetalleGrupoAsignatura, LibrosOdiloSilaboSemanal, TipoActa, TablaEquivalenciaAsignaturas, MESES_CHOICES, SalaCrai, \
    Turno, ReservasCrai, LaboratorioAcademia, Notificacion
from sga.tasks import send_html_mail, conectar_cuenta
from sga.templatetags.sga_extras import encrypt
from inno.models import ConfiguracionRecurso, HistorialDetalleListaVerificacionTarea, \
    HistorialDetalleListaVerificacionForo, HistorialDetalleListaVerificacionTest, \
    HistorialDetalleListaVerificacionGuiaEstudiante, HistorialDetalleListaVerificacionGuiaDocente, \
    HistorialDetalleListaVerificacionDiapositiva, HistorialDetalleListaVerificacionCompendio, \
    HistorialDetalleListaVerificacionMaterialAdicional, HistorialDetalleListaVerificacionTareaPractica, \
    LogIngresoAsistenciaLeccion, MateriaAsignadaPlanificacionSedeVirtualExamen, AulaPlanificacionSedeVirtualExamen, \
    AuditoriaMateriaAsignadaPlanificacionSedeVirtualExamen, FirmaGrupoTitulacion, MateriaTitulacionFirma, GrupoFirma, \
    DisertacionTribunalPlanificacion, DisertacionGrupoPlanificacion, DisertacionMateriaAsignadaPlanificacion, FormatoPlanificacionRecurso, RequerimientoInternoPractica, GPRequerimientoPractica, GPLibrosOdilo
from inno.funciones import generar_clave_aleatoria
from sga.alu_mundocrai import controlar_horas
from time import sleep

unicode = str


def daterange(start_date, end_date):
    for n in range(int((end_date - start_date).days)):
        yield start_date + timedelta(days=n)


@csrf_exempt
@login_required(redirect_field_name='ret', login_url='/loginsga')
@secure_module
@last_access
@transaction.atomic()
def view(request):
    data = {}
    adduserdata(request, data)
    persona = request.session['persona']
    perfilprincipal = request.session['perfilprincipal']
    periodo = request.session['periodo']
    if not periodo:
        return HttpResponseRedirect("/?info=Estimado docente, no tiene asignaturas en distributivo.")
    d = datetime.now()
    data['horasegundo'] = d.strftime('%Y%m%d_%H%M%S')
    data['persona'] = persona
    data['profesor'] = profesor = persona.profesor()
    if not perfilprincipal.es_profesor():
        return HttpResponseRedirect("/?info=Solo los perfiles de profesores pueden ingresar al modulo.")
    profesor = perfilprincipal.profesor
    activo_pme = variable_valor('PRUEBA_MODELO_EVALUATIVO')
    prueba_modelo_evaluativo = False
    if activo_pme and periodo.id == 345: prueba_modelo_evaluativo = True
    data['PRUEBA_MODELO_EVALUATIVO'] = prueba_modelo_evaluativo
    if request.method == 'POST':
        if 'action' in request.POST:
            action = request.POST['action']

            if action == 'traeralumnosmoodle':
                try:
                    materia = Materia.objects.get(pk=request.POST['id'], status=True)
                    estudiantes = materia.asignados_a_esta_materia_moodle().filter(retiramateria=False)
                    primerestudiante = estudiantes.filter(matricula__bloqueomatricula=False).first()
                    bandera = True
                    modelo_mood = ''
                    modelo_sga = ''
                    for notasmooc in materia.notas_de_moodle(primerestudiante.matricula.inscripcion.persona):
                        bandera = primerestudiante.evaluacion_generica().filter(detallemodeloevaluativo__nombre=notasmooc[1].upper().strip()).exists()
                        if not bandera:
                            for notasmoocstr in materia.notas_de_moodle(primerestudiante.matricula.inscripcion.persona):
                                modelo_mood += "{}, ".format(notasmoocstr[1])
                            for notassga in primerestudiante.evaluacion_generica():
                                modelo_sga += "{}, ".format(notassga.detallemodeloevaluativo.nombre)
                            return JsonResponse({"result": "bad", "mensaje": u"Modelo Evaluativo extraido es diferente al modelo existente\nMoodle:\n{}\nSGA:\n{}".format(modelo_mood, modelo_sga)})
                    listaenviar = estudiantes.filter(matricula__bloqueomatricula=False).values('id', 'matricula__inscripcion__persona__apellido1', 'matricula__inscripcion__persona__apellido2', 'matricula__inscripcion__persona__nombres').order_by('matricula__inscripcion__persona__apellido1')
                    return JsonResponse({"result": "ok", "cantidad": len(listaenviar), "inscritos": convertir_lista(listaenviar)})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'addinsumopractica':
                try:
                    materia = Materia.objects.get(id=request.POST['id'])
                    if RequerimientoInternoPractica.objects.filter(detalle=request.POST['detalle'], status=True):
                        raise NameError(f'Ya se registró este elemento')
                    object = RequerimientoInternoPractica(tipo=int(request.POST['t']), detalle=request.POST['detalle'], ubicacion=request.POST['ubicacion'], carrera=materia.asignaturamalla.malla.carrera)
                    object.save(request)
                    return JsonResponse({'result': 'ok', 'id': object.pk})
                except Exception as ex:
                    return JsonResponse({'mensaje': f"{ex=}"})

            elif action == 'traernotaindividual':
                try:
                    materia = Materia.objects.get(pk=request.POST['idmateria'], status=True)
                    alumno = MateriaAsignada.objects.get(pk=request.POST['id'])
                    if materia.notas_de_moodle(alumno.matricula.inscripcion.persona):
                        for notasmooc in materia.notas_de_moodle(alumno.matricula.inscripcion.persona):
                            campo = alumno.campo(notasmooc[1].upper().strip())
                            # if not alumno.matricula.bloqueomatricula:
                            if type(notasmooc[0]) is Decimal:
                                if null_to_decimal(campo.valor) != float(notasmooc[0]) or (
                                        alumno.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                    actualizar_nota_planificacion(alumno.id, notasmooc[1].upper().strip(), notasmooc[0])
                                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                    calificacion=notasmooc[0])
                                    auditorianotas.save(request)
                            else:
                                if null_to_decimal(campo.valor) != float(0) or (
                                        alumno.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                    actualizar_nota_planificacion(alumno.id, notasmooc[1].upper().strip(), notasmooc[0])
                                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                    auditorianotas.save(request)
                    else:
                        for detallemodelo in materia.modeloevaluativo.detallemodeloevaluativo_set.filter(migrarmoodle=True):
                            campo = alumno.campo(detallemodelo.nombre)
                            actualizar_nota_planificacion(alumno.id, detallemodelo.nombre, 0)
                            auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                            auditorianotas.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    import sys
                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos. %s" % ex})

            elif action == 'changebannermateria':
                try:
                    form = BannerMateriaForm(request.POST, request.FILES)
                    materia_ = Materia.objects.get(pk=int(request.POST['id']))
                    if form.is_valid():
                        materia_.banner = request.FILES['banner']
                        materia_.save(request)
                        if materia_.coordinacion().id == 9:
                            tipourl = 2
                        else:
                            tipourl = 1
                        materia_ = Materia.objects.get(pk=int(request.POST['id']))
                        ActualizarBannerCurso(materia_.idcursomoodle, periodo, tipourl, materia_.banner, request.FILES['banner']._name)
                        log(u'Cambio Banner curso: %s' % materia_, request, "changebannermateria")
                        return JsonResponse({"result": False}, safe=False)
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": True, "mensaje": u"Error al guardar los datos."})

            elif action == 'add':
                try:
                    materia = Materia.objects.get(pk=int(encrypt(request.POST['id'])))
                    form = PlanificacionForm(request.POST, request.FILES)
                    if form.is_valid():
                        desde = form.cleaned_data['desde']
                        hasta = form.cleaned_data['hasta']
                        # if desde < datetime.now().date():
                        #     return JsonResponse({"result": "bad", "mensaje": u"Fecha de inicio incorrecta."})
                        if materia.cerrado:
                            return JsonResponse({"result": "bad", "mensaje": u"Materia cerrada."})
                        if desde > hasta:
                            return JsonResponse({"result": "bad", "mensaje": u"Fechas incorrectas."})
                        rubricaevaluacion = None
                        evaluacion = None
                        if 'rubricaevaluacion' in request.FILES:
                            rubricaevaluacion = request.FILES['rubricaevaluacion']
                            rubricaevaluacion._name = generar_nombre("rubricaevaluacion_", rubricaevaluacion._name)
                        if 'evaluacion' in request.FILES:
                            evaluacion = request.FILES['evaluacion']
                            evaluacion._name = generar_nombre("evaluacion_", evaluacion._name)
                        planificacion = PlanificacionMateria(materia=materia,
                                                             descripcion=form.cleaned_data['descripcion'],
                                                             tipoevaluacion=form.cleaned_data['tipoevaluacion'],
                                                             tipoplanificacion_id=1,
                                                             desde=form.cleaned_data['desde'],
                                                             hasta=form.cleaned_data['hasta'],
                                                             rubricaevaluacion=rubricaevaluacion,
                                                             evaluacion=evaluacion,
                                                             enlinea=form.cleaned_data['enlinea'],
                                                             paraevaluacion=form.cleaned_data['paraevaluacion'],
                                                             horadesde=form.cleaned_data['horadesde'],
                                                             horahasta=form.cleaned_data['horahasta'])
                        planificacion.save(request)
                        cuenta = CUENTAS_CORREOS[3][1]

                        for materiaasignada in materia.asignados_a_esta_materia():
                            materiaasignada.mi_planificacion(planificacion)
                            correo = materiaasignada.matricula.inscripcion.persona.lista_emails_envio()
                            # for p in Persona.objects.filter(pk__in=[825, 843]):
                            #     correo = p.lista_emails_envio()
                            send_html_mail("SGA - Aula Virtual.", "emails/tareanueva.html", {'sistema': request.session['nombresistema'], 'fecha': datetime.now().date(), 'hora': datetime.now().time(), 'planificacion': planificacion, 't': miinstitucion()}, correo, [], cuenta=cuenta)

                        if planificacion.paraevaluacion:
                            materia.actualizar_promedio_deberes(planificacion.tipoevaluacion)

                        log(u'Adiciono planificación del profesor: %s - [%s]' % (planificacion, planificacion.tipoevaluacion), request, "add")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    try:
                        transaction.set_rollback(True)
                    except Exception as ex:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'edit':
                try:
                    planificacionmateria = PlanificacionMateria.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = planificacionmateria.materia
                    form = PlanificacionForm(request.POST, request.FILES)
                    if form.is_valid():
                        desde = form.cleaned_data['desde']
                        hasta = form.cleaned_data['hasta']
                        # if desde < datetime.now().date():
                        #     return JsonResponse({"result": "bad", "mensaje": u"Fecha de inicio incorrecta."})
                        if materia.cerrado:
                            return JsonResponse({"result": "bad", "mensaje": u"Materia cerrada."})
                        if desde > hasta:
                            return JsonResponse({"result": "bad", "mensaje": u"Fechas incorrectas."})
                        rubricaevaluacion = None
                        evaluacion = None
                        if 'rubricaevaluacion' in request.FILES:
                            rubricaevaluacion = request.FILES['rubricaevaluacion']
                            rubricaevaluacion._name = generar_nombre("rubricaevaluacion_", rubricaevaluacion._name)
                        if 'evaluacion' in request.FILES:
                            evaluacion = request.FILES['evaluacion']
                            evaluacion._name = generar_nombre("evaluacion_", evaluacion._name)

                        planificacionmateria.descripcion = form.cleaned_data['descripcion']
                        planificacionmateria.tipoplanificacion_id = 1
                        planificacionmateria.desde = form.cleaned_data['desde']
                        planificacionmateria.hasta = form.cleaned_data['hasta']
                        planificacionmateria.horadesde = form.cleaned_data['horadesde']
                        planificacionmateria.horahasta = form.cleaned_data['horahasta']
                        if 'rubricaevaluacion' in request.FILES:
                            planificacionmateria.rubricaevaluacion = rubricaevaluacion
                        if 'evaluacion' in request.FILES:
                            planificacionmateria.evaluacion = evaluacion
                        planificacionmateria.enlinea = form.cleaned_data['enlinea']
                        oldtipoeva = planificacionmateria.tipoevaluacion
                        oldparaeva = planificacionmateria.paraevaluacion
                        planificacionmateria.paraevaluacion = form.cleaned_data['paraevaluacion']
                        planificacionmateria.tipoevaluacion = form.cleaned_data['tipoevaluacion']
                        planificacionmateria.save(request)
                        for materiaasignada in materia.asignados_a_esta_materia():
                            materiaasignada.mi_planificacion(planificacionmateria)
                        if oldtipoeva != form.cleaned_data['tipoevaluacion']:
                            for tipo in materia.modeloevaluativo.detallemodeloevaluativo_set.filter(dependiente=False, nombre__contains='N'):
                                materia.actualizar_promedio_deberes(tipo)
                        if oldparaeva != form.cleaned_data['paraevaluacion']:
                            materia.actualizar_promedio_deberes(planificacionmateria.tipoevaluacion)
                        log(u'Modifico planificacion del profesor: %s - [%s]' % (planificacionmateria, planificacionmateria.tipoevaluacion), request, "edit")

                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'programanaliticopdf':
                try:
                    if 'ban' in request.POST:
                        data['proanalitico'] = pro = ProgramaAnaliticoAsignatura.objects.get(pk=int(encrypt(request.POST['id'])))
                    else:
                        filters = Q(status=True)
                        if prueba_modelo_evaluativo: filters &= Q(procedimientoeva_id=6)
                        else: filters &= Q(activo=True)
                        materia = Materia.objects.get(pk=int(encrypt(request.POST['id'])))
                        data['proanalitico'] = pro = ProgramaAnaliticoAsignatura.objects.filter(asignaturamalla=materia.asignaturamalla).filter(filters).first()
                    return conviert_html_to_pdf(
                        'mallas/programanalitico_pdf.html',
                        {
                            'pagesize': 'A4',
                            'data': pro.plananalitico_pdf(periodo),
                        }
                    )
                except Exception as ex:
                    pass

            elif action == 'programanaliticoposgradopdf':
                try:
                    if 'ban' in request.POST:
                        data['proanalitico'] = pro = ProgramaAnaliticoAsignatura.objects.get(pk=int(encrypt(request.POST['id'])))
                    else:
                        materia = Materia.objects.get(pk=int(encrypt(request.POST['id'])))
                        data['proanalitico'] = pro = ProgramaAnaliticoAsignatura.objects.get(asignaturamalla=materia.asignaturamalla, status=True, activo=True)
                    return conviert_html_to_pdf(
                        'mallas/programanaliticoposgrado_pdf.html',
                        {
                            'pagesize': 'A4',
                            'data': pro.plananalitico_pdf(periodo)
                        }
                    )
                except Exception as ex:
                    pass

            elif action == 'delete':
                try:
                    planificacion = PlanificacionMateria.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = planificacion.materia
                    tipoevaluacion = planificacion.tipoevaluacion
                    paraevaluar = planificacion.paraevaluacion
                    planificacion.status = False
                    planificacion.save(request)
                    if paraevaluar:
                        materia.actualizar_promedio_deberes(tipoevaluacion, True)
                    log(u'Elimino planificación: %s' % planificacion, request, "del")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al eliminar los datos."})

            elif action == 'addcomponente':
                try:
                    if 'listadotemas' in request.POST:
                        listadotemas = request.POST['listadotemas'].split(',')

                        if EvaluacionAprendizajeSilaboSemanal.objects.filter(silabosemanal__silabo_id=int(request.POST['codsilabo']), evaluacionaprendizaje_id=request.POST['id_componente'], tipoactividadsemanal=1, silabosemanal__status=True, status=True):
                            evalapendizaje = EvaluacionAprendizajeSilaboSemanal.objects.values('numactividad').filter(silabosemanal__silabo_id=int(request.POST['codsilabo']), evaluacionaprendizaje_id=request.POST['id_componente'], tipoactividadsemanal=1, silabosemanal__status=True, status=True).order_by('-numactividad')[0]
                            secuencial = evalapendizaje['numactividad'] + 1
                        else:
                            secuencial = 1
                    else:
                        secuencial = 1

                    if EvaluacionAprendizajeSilaboSemanal.objects.values_list('evaluacionaprendizaje_id').filter(silabosemanal_id=int(encrypt(request.POST['id_silsemana'])), evaluacionaprendizaje_id=request.POST['id_componente'], silabosemanal__status=True, tipoactividadsemanal=1, status=True):
                        return JsonResponse({"result": "bad", "mensaje": u"Componente ya existe."})
                    evaluacionaprendizaje = EvaluacionAprendizajeSilaboSemanal(silabosemanal_id=int(encrypt(request.POST['id_silsemana'])),
                                                                               evaluacionaprendizaje_id=request.POST['id_componente'],
                                                                               numactividad=secuencial)
                    evaluacionaprendizaje.save(request)

                    # // Comienza a actualizar el secuencia para ordenar desde creacion con 1 a cada actividad
                    if 'listadotemas' in request.POST:
                        cuentasecuencia = 0
                        recorreevaluacionsemanal = EvaluacionAprendizajeSilaboSemanal.objects.filter(silabosemanal__silabo_id=int(request.POST['codsilabo']), evaluacionaprendizaje_id=request.POST['id_componente'], tipoactividadsemanal=1, silabosemanal__status=True, status=True).order_by('silabosemanal__numsemana')
                        for lisaprendizaje in recorreevaluacionsemanal:
                            cuentasecuencia = cuentasecuencia + 1
                            lisaprendizaje.numactividad = cuentasecuencia
                            lisaprendizaje.save(request)
                        # //
                        for idtema in listadotemas:
                            evaluaciontema = EvaluacionAprendizajeTema(evaluacion=evaluacionaprendizaje, temasemanal_id=idtema)
                            evaluaciontema.save(request)
                    log(u'adiciona componente: %s - %s' % (evaluacionaprendizaje.silabosemanal, evaluacionaprendizaje.evaluacionaprendizaje), request, "add")
                    return JsonResponse({"result": "ok", "nomcomponente": evaluacionaprendizaje.evaluacionaprendizaje.componente.alias, "nomactividad": evaluacionaprendizaje.evaluacionaprendizaje.descripcion, "evaluacionaprendizaje": evaluacionaprendizaje.id, "idsilabo": int(encrypt(request.POST['id_silsemana']))})
                except Exception as ex:
                    pass

            elif action == 'deletecomponente':
                try:
                    evalcomponente = EvaluacionAprendizajeSilaboSemanal.objects.get(pk=request.POST['id'])
                    codsilabo = evalcomponente.silabosemanal.silabo.id
                    idcomponente = evalcomponente.evaluacionaprendizaje.id
                    log(u'Eliminó componente : %s' % (evalcomponente.evaluacionaprendizaje), request, "del")
                    evalcomponente.delete()
                    cuentasecuencia = 0
                    recorreevaluacionsemanal = EvaluacionAprendizajeSilaboSemanal.objects.filter(silabosemanal__silabo_id=codsilabo, evaluacionaprendizaje_id=idcomponente, tipoactividadsemanal=1, silabosemanal__status=True, status=True).order_by('silabosemanal__numsemana')
                    for lisaprendizaje in recorreevaluacionsemanal:
                        cuentasecuencia = cuentasecuencia + 1
                        lisaprendizaje.numactividad = cuentasecuencia
                        lisaprendizaje.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'subirrubrica':
                try:
                    planificacion = PlanificacionMateria.objects.get(pk=int(encrypt(request.POST['id'])))
                    form = ArchivoPlanificacionForm(request.POST, request.FILES)
                    if form.is_valid():
                        rubricaevaluacion = request.FILES['archivo']
                        rubricaevaluacion._name = generar_nombre("rubricaevaluacion_", rubricaevaluacion._name)
                        planificacion.rubricaevaluacion = rubricaevaluacion
                        planificacion.save(request)
                        log(u'Subir rubica planificación: %s' % planificacion, request, "add")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'eliminarrubrica':
                try:
                    planificacion = PlanificacionMateria.objects.get(pk=int(encrypt(request.POST['id'])))
                    planificacion.rubricaevaluacion = None
                    log(u'Elimino rubica de Planificación: %s' % planificacion, request, "del")
                    planificacion.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al eliminar los datos."})

            elif action == 'eliminarevaluacion':
                try:
                    planificacion = PlanificacionMateria.objects.get(pk=int(encrypt(request.POST['id'])))
                    planificacion.evaluacion = None
                    planificacion.save(request)
                    log(u'Elimina evaluación: %s' % (planificacion), request, "del")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al eliminar los datos."})

            elif action == 'subirevaluacion':
                try:
                    planificacion = PlanificacionMateria.objects.get(pk=int(encrypt(request.POST['id'])))
                    form = ArchivoPlanificacionForm(request.POST, request.FILES)
                    if form.is_valid():
                        evaluacion = request.FILES['archivo']
                        evaluacion._name = generar_nombre("evaluacion_", evaluacion._name)
                        planificacion.evaluacion = evaluacion
                        planificacion.save(request)
                        log(u'Elimina evaluación: %s' % (planificacion), request, "del")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importarplanificacion':
                try:
                    materia = Materia.objects.get(pk=request.POST['id'])
                    form = ImportarPlanificacionForm(request.POST)
                    if form.is_valid():
                        materiaplanificada = form.cleaned_data['materia']
                        for planificacion in materiaplanificada.planificacionmateria_set.all():
                            nuevaplanificacion = PlanificacionMateria(materia=materia,
                                                                      descripcion=planificacion.descripcion,
                                                                      tipoevaluacion=planificacion.tipoevaluacion,
                                                                      tipoplanificacion=planificacion.tipoplanificacion,
                                                                      rubricaevaluacion=planificacion.rubricaevaluacion,
                                                                      evaluacion=planificacion.evaluacion,
                                                                      desde=materia.fin,
                                                                      hasta=materia.fin,
                                                                      enlinea=planificacion.enlinea,
                                                                      paraevaluacion=planificacion.paraevaluacion)
                            nuevaplanificacion.save(request)
                            log(u'Adiciono importación de planificacion: %s' % nuevaplanificacion, request, "del")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'nota':
                try:
                    materiaasignadaplani = MateriaAsignadaPlanificacion.objects.get(pk=int(encrypt(request.POST['id'])))

                    # if float(materiaasignadaplani.calificacion) <= 0:
                    materiaasignadaplani.calificacion = float(request.POST['valor'])
                    materiaasignadaplani.fechacalificacion = datetime.now().date()
                    materiaasignadaplani.horacalificacion = datetime.now().time()
                    materiaasignadaplani.save(request)
                    materiaasignada_id = materiaasignadaplani.materiaasignada.id
                    sel_id = request.POST['sel']
                    valor = materiaasignadaplani.promedio_calificacion()
                    actualizar_nota_planificacion(materiaasignada_id, sel_id, valor)
                    campo = materiaasignadaplani.materiaasignada.campo(sel_id)
                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=campo.valor)
                    auditorianotas.save(request)
                    auditoriatareas = AuditoriaTareas(materiaasignadaplanificacion=materiaasignadaplani, calificacion=float(request.POST['valor']))
                    auditoriatareas.save(request)
                    # SE QUITO EL REGISTRO DE LOG YA QUE AuditoriTareas suplanta al LOG
                    # log(u'Ingreso nota: %s [%s][%s][%s]' % (materiaasignadaplani.materiaasignada, materiaasignadaplani.id,materiaasignadaplani.calificacion, sel_id), request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'observacion':
                try:
                    materiaasignadaplani = MateriaAsignadaPlanificacion.objects.get(pk=int(encrypt(request.POST['id'])))
                    materiaasignadaplani.observacion = request.POST['valor']
                    materiaasignadaplani.save(request)
                    return JsonResponse({"result": "ok"})
                    log(u'Adiciono observación en materia asignada planificación: %s' % materiaasignadaplani, request, "del")
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'adddocumento':
                try:
                    form = DocumentoMateriaForm(request.POST, request.FILES)
                    if form.is_valid():
                        materia = Materia.objects.get(pk=int(encrypt(request.POST['id'])))
                        newfile = request.FILES['archivo']
                        newfile._name = generar_nombre("documentosmateria_", newfile._name)
                        archivo = DocumentosMateria(materia=materia,
                                                    nombre=form.cleaned_data['nombre'],
                                                    descripcion=form.cleaned_data['observaciones'],
                                                    archivo=newfile)
                        archivo.save(request)
                        log(u'Adiciono documento de materia: %s' % archivo, request, "add")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'deldocumento':
                try:
                    documento = DocumentosMateria.objects.get(pk=request.POST['id'])
                    log(u'Elimino documento de materia: %s' % documento, request, "del")
                    documento.status = False
                    documento.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al eliminar los datos."})
            # DESDE AQUI CON RESPECTO A RECURSOS
            elif action == 'crearmoodle':
                try:
                    from Moodle_Funciones import CrearTareasMoodle, CrearTareasTEMoodle
                    tarea = TareaSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    if tarea.calificar:
                        if not tarea.detallemodelo:
                            return JsonResponse({"result": "bad", "mensaje": u"Tarea no tiene configurado Categoría de calificación, por favor comuníquese con servicios informáticos"})
                    if tarea.actividad.categoriamoodle == 3:
                        value, msg = CrearTareasMoodle(int(encrypt(request.POST['id'])), persona)
                        if not value:
                            raise NameError(msg)
                    if tarea.actividad.categoriamoodle == 4:
                        value, msg = CrearTareasTEMoodle(int(encrypt(request.POST['id'])), persona)
                        if not value:
                            raise NameError(msg)
                    log(u'Crea en moodle trea silabo semanal : %s - %s' % (tarea, tarea.silabosemanal), request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear la tarea. %s" % ex})

            elif action == 'creartareapracticamoodle':
                try:
                    from Moodle_Funciones import CrearPracticasTareasMoodle
                    tarea = TareaPracticaSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    if tarea.calificar:
                        if not tarea.detallemodelo:
                            return JsonResponse({"result": "bad", "mensaje": u"Por favor configure la categoría de calificación."})
                    if not (tarea.fechadesde and tarea.fechahasta):
                        raise NameError(f"Por favor configure las fechas inicio y fin de la actividad")
                    value, msg = CrearPracticasTareasMoodle(int(encrypt(request.POST['id'])), persona)
                    if not value:
                        raise NameError(msg)
                    log(u'Crea en moodle tarea practica silabo semanal : %s - %s' % (tarea, tarea.silabosemanal), request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear la practica. %s" % ex})

            elif action == 'creartestmoodle':
                try:
                    from Moodle_Funciones import CrearTestMoodle
                    tarea = TestSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    if tarea.calificar:
                        if not tarea.detallemodelo:
                            return JsonResponse({"result": "bad", "mensaje": u"Por favor configure la categoría de calificación."})
                    value, msg = CrearTestMoodle(int(encrypt(request.POST['id'])), persona)
                    if not value:
                        raise NameError(msg)
                    log(u'Crea en moodle tarea practica silabo semanal : %s - %s' % (tarea, tarea.silabosemanal), request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear la tarea. %s" % ex.__str__()})

            elif action == 'creartestmoodleadmision':
                try:
                    from Moodle_Funciones import CrearTestMoodleAdmision
                    tarea = TestSilaboSemanalAdmision.objects.get(pk=int(encrypt(request.POST['id'])))
                    if tarea.calificar:
                        if not tarea.detallemodelo:
                            return JsonResponse({"result": "bad", "mensaje": u"Por favor configure la categoría de calificación."})
                    value, msg = CrearTestMoodleAdmision(int(encrypt(request.POST['id'])), persona)
                    if not value:
                        raise NameError(msg)
                    log(u'Crea en moodle test admision silabo semanal : %s - %s' % (tarea, tarea.silabosemanal), request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear la tarea. %s" % ex.__str__()})

            elif action == 'crearexamenmoodle':
                try:
                    from Moodle_Funciones import CrearExamenMoodle
                    test = TestSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    if test.calificar:
                        if not test.detallemodelo:
                            return JsonResponse({"result": "bad", "mensaje": u"Por favor configure la categoría de calificación."})
                    value, msg = CrearExamenMoodle(int(encrypt(request.POST['id'])), persona)
                    if not value:
                        raise NameError(msg)
                    log(u'Crea en moodle examen silabo semanal : %s - %s' % (test, test.silabosemanal), request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el examen %s." % ex})

            elif action == 'crearmoodleforo':
                try:
                    from Moodle_Funciones import CrearForosMoodle
                    foross = ForoSilaboSemanal.objects.get(id=int(encrypt(request.POST['id'])))
                    value, msg = CrearForosMoodle(int(encrypt(request.POST['id'])), persona)
                    if not value:
                        raise NameError(msg)
                    log(u'Crea en moodle foro silabo semanal : %s - %s' % (foross, foross.silabosemanal), request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el foro. %s " % ex})

            elif action == 'crearmoodlerecurso':
                try:
                    from Moodle_Funciones import CrearRecursoMoodle
                    value, msg = CrearRecursoMoodle(int(encrypt(request.POST['id'])), persona)
                    if not value:
                        raise NameError(msg)
                    log(u'Crea en moodle recurso', request, "edit")
                    data['nombrediv'] = nombrediv = request.POST['nombrediv']
                    data['opciondiv'] = 1
                    data['diapositiva'] = DiapositivaSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    template = get_template("pro_planificacion/listarecursosdiv.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": False, "nombrediv": nombrediv, 'html': json_content}, safe=False)
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s" % ex})

            elif action == 'crearmoodlematerial':
                try:
                    from Moodle_Funciones import CrearMaterialesMoodle
                    value, msg = CrearMaterialesMoodle(int(encrypt(request.POST['id'])), persona)
                    if not value:
                        raise NameError(msg)
                    log(u'Crea en moodle material', request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s" % ex})

            elif action == 'crearmoodlecompendio':
                try:
                    from Moodle_Funciones import CrearCompendioMoodle
                    value, msg = CrearCompendioMoodle(int(encrypt(request.POST['id'])), persona)
                    if not value:
                        raise NameError(msg)
                    log(u'Crea en moodle compendio', request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s" % ex})

            elif action == 'crearmoodlepresentacionmasivo':
                try:
                    from Moodle_Funciones import CrearRecursoMoodle
                    lista_errores = []
                    listadopresentaciones = DiapositivaSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.POST['id']), estado_id__in=[2, 1], status=True)
                    for lis in listadopresentaciones:
                        try:
                            value, msg = CrearRecursoMoodle(lis.id, persona)
                            if not value:
                                raise NameError(msg)
                        except Exception as ex:
                            lista_errores.append({"actividad": "Presentación", "nombre": lis.nombre, "descripcion": lis.__str__(), "error": ex.__str__()})
                    if listadopresentaciones:
                        log(u'Crea en moodle presentación %s - %s' % (listadopresentaciones[0], listadopresentaciones[0].silabosemanal), request, "edit")
                    return JsonResponse({"result": "ok", "errores": lista_errores})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s " % ex})

            elif action == 'migrarmasivomoodle':
                try:
                    silaboactual = Silabo.objects.get(pk=int(request.POST['idsilabo']))
                    idcoordinacion = silaboactual.materia.asignaturamalla.malla.carrera.mi_coordinacion2()
                    listatarea = json.loads(request.POST['listatarea'])
                    listavideo = json.loads(request.POST['listavideo'])
                    listatareapractica = json.loads(request.POST['listatareapractica'])
                    listaforo = json.loads(request.POST['listaforo'])
                    listatest = json.loads(request.POST['listatest'])
                    listaguiaestudiante = json.loads(request.POST['listaguiaestudiante'])
                    listadiapositiva = json.loads(request.POST['listadiapositiva'])
                    listacompendio = json.loads(request.POST['listacompendio'])
                    listamaterial = json.loads(request.POST['listamaterial'])
                    lista_errores = []
                    if listatarea:
                        from Moodle_Funciones import CrearTareasMoodle, CrearTareasTEMoodle
                        for lista in listatarea:
                            tarea = TareaSilaboSemanal.objects.get(pk=lista)
                            personacrea = Persona.objects.get(usuario_id=tarea.usuario_creacion_id, status=True)
                            if tarea.calificar:
                                if not tarea.detallemodelo:
                                    raise NameError(u"La tarea %s no tiene configurado una categoría de calificación." % tarea)
                            if tarea.actividad.categoriamoodle == 3:
                                try:
                                    value, msg = CrearTareasMoodle(tarea.id, personacrea)
                                    if not value:
                                        raise NameError(msg)
                                except Exception as ex:
                                    lista_errores.append({"actividad": "Tarea", "nombre": tarea.nombre, "error": ex.__str__()})

                            if tarea.actividad.categoriamoodle == 4:
                                try:
                                    value, msg = CrearTareasTEMoodle(tarea.id, personacrea)
                                    if not value:
                                        raise NameError(msg)
                                except Exception as ex:
                                    lista_errores.append({"actividad": "Tarea", "nombre": tarea.nombre, "descripcion": tarea.__str__(), "error": ex.__str__()})

                    if listatareapractica:
                        from Moodle_Funciones import CrearPracticasTareasMoodle
                        for lista in listatareapractica:
                            tarea = TareaPracticaSilaboSemanal.objects.get(pk=lista)
                            personacrea = Persona.objects.get(usuario_id=tarea.usuario_creacion_id, status=True)
                            try:
                                if tarea.calificar:
                                    if not tarea.detallemodelo:
                                        raise NameError(u"La tarea %s no tiene configurada una categoría de calificación. " % tarea)
                                value, msg = CrearPracticasTareasMoodle(tarea.id, personacrea)
                                # value, msg = False, "Demo prueba"
                                if not value:
                                    raise NameError(msg)
                            except Exception as ex:
                                lista_errores.append({"actividad": "Tarea práctica", "nombre": tarea.nombre, "descripcion": tarea.__str__(), "error": ex.__str__()})

                    if listaforo:
                        from Moodle_Funciones import CrearForosMoodle
                        for lista in listaforo:
                            foross = ForoSilaboSemanal.objects.get(pk=lista)
                            personacrea = Persona.objects.get(usuario_id=foross.usuario_creacion_id, status=True)
                            try:
                                value, msg = CrearForosMoodle(foross.id, personacrea)
                                if not value:
                                    raise NameError(msg)
                            except Exception as ex:
                                lista_errores.append({"actividad": "Foro", "nombre": foross.nombre, "descripcion": foross.__str__(), "error": ex.__str__()})

                    if listatest:
                        from Moodle_Funciones import CrearTestMoodle, CrearTestMoodleAdmision
                        if idcoordinacion != 9:
                            for lista in listatest:
                                tarea = TestSilaboSemanal.objects.get(pk=lista)
                                personacrea = Persona.objects.get(usuario_id=tarea.usuario_creacion_id, status=True)
                                try:
                                    if tarea.calificar:
                                        if not tarea.detallemodelo:
                                            raise NameError(u"El test %s no tiene configurado categoría de calificación." % tarea)
                                    value, msg = CrearTestMoodle(tarea.id, personacrea)
                                    if not value:
                                        raise NameError(msg)
                                except Exception as ex:
                                    lista_errores.append({"actividad": "Test", "nombre": tarea.nombretest, "descripcion": tarea.__str__(), "error": ex.__str__()})
                        else:
                            for lista in listatest:
                                tarea = TestSilaboSemanalAdmision.objects.get(pk=lista)
                                personacrea = Persona.objects.get(usuario_id=tarea.usuario_creacion_id, status=True)
                                try:
                                    if tarea.calificar:
                                        if not tarea.detallemodelo:
                                            raise NameError(u"El test %s no tiene configurado categoría de calificación." % tarea)
                                    value, msg = CrearTestMoodleAdmision(tarea.id, personacrea)
                                    if not value:
                                        raise NameError(msg)
                                except Exception as ex:
                                    lista_errores.append({"actividad": "Test", "nombre": tarea.titulo, "descripcion": tarea.__str__(), "error": ex.__str__()})


                    if listaguiaestudiante:
                        from Moodle_Funciones import CrearGuiaestudianteMoodle
                        for lista in listaguiaestudiante:
                            guiaestudiante = GuiaEstudianteSilaboSemanal.objects.get(pk=lista)
                            personacrea = Persona.objects.get(usuario_id=guiaestudiante.usuario_creacion_id, status=True)
                            try:
                                value, msg = CrearGuiaestudianteMoodle(guiaestudiante.id, personacrea)
                                if not value:
                                    raise NameError(msg)
                            except Exception as ex:
                                lista_errores.append({"actividad": "Guía de estudiante", "observacion": guiaestudiante.__str__(), "error": ex.__str__()})
                    if listadiapositiva:
                        from Moodle_Funciones import CrearRecursoMoodle
                        for lista in listadiapositiva:
                            diapositiva = DiapositivaSilaboSemanal.objects.get(pk=lista)
                            personacrea = Persona.objects.get(usuario_id=diapositiva.usuario_creacion_id, status=True)
                            try:
                                value, msg = CrearRecursoMoodle(diapositiva.id, personacrea)
                                if not value:
                                    raise NameError(msg)
                            except Exception as ex:
                                lista_errores.append({"actividad": "Presentación", "nombre": diapositiva.nombre, "descripcion": diapositiva.__str__(), "error": ex.__str__()})
                    if listacompendio:
                        from Moodle_Funciones import CrearCompendioMoodle
                        for lista in listacompendio:
                            compendio = CompendioSilaboSemanal.objects.get(pk=lista)
                            personacrea = Persona.objects.get(usuario_id=compendio.usuario_creacion_id, status=True)
                            try:
                                value, msg = CrearCompendioMoodle(compendio.id, personacrea)
                                if not value:
                                    raise NameError(msg)
                            except Exception as ex:
                                lista_errores.append({"actividad": "Compendio", "descripcion": compendio.__str__(), "error": ex.__str__()})
                    if listamaterial:
                        from Moodle_Funciones import CrearMaterialesMoodle
                        for lista in listamaterial:
                            material = MaterialAdicionalSilaboSemanal.objects.get(pk=lista)
                            personacrea = Persona.objects.get(usuario_id=material.usuario_creacion_id, status=True)
                            try:
                                value, msg = CrearMaterialesMoodle(material.id, personacrea)
                                if not value:
                                    raise NameError(msg)
                            except Exception as ex:
                                lista_errores.append({"actividad": "Material complementario", "nombre": material.nombre, "descripcion": material.__str__(), "error": ex.__str__()})
                    if listavideo:
                        from Moodle_Funciones import CrearVidMagistralMoodle
                        for lista in listavideo:
                            video = VideoMagistralSilaboSemanal.objects.get(pk=lista)
                            personacrea = Persona.objects.get(usuario_id=video.usuario_creacion_id, status=True)
                            try:
                                value, msg = CrearVidMagistralMoodle(video.id, personacrea)
                                if not value:
                                    raise NameError(msg)
                            except Exception as ex:
                                lista_errores.append({"actividad": "Video magistral", "nombre": video.nombre, "descripcion": video.__str__(), "error": ex.__str__()})
                    log(u'Crea en moodle los recursos', request, "edit")
                    return JsonResponse({"result": "ok", "errores": lista_errores})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s" % ex})

            elif action == 'crearmoodlecompendiomasivo':
                try:
                    from Moodle_Funciones import CrearCompendioMoodle
                    listadocompendios = CompendioSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.POST['id']), estado_id__in=[2, 1], status=True)
                    lista_errores = []
                    for lis in listadocompendios:
                        try:
                            value, msg = CrearCompendioMoodle(lis.id, persona)
                            if not value:
                                raise NameError(msg)
                        except Exception as ex:
                            lista_errores.append({"actividad": "Compendio", "descripcion": lis.__str__(), "error": ex.__str__()})
                    log(u'Crea en moodle compendio masivo', request, "edit")
                    return JsonResponse({"result": "ok", "lista_error": lista_errores})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s " % ex})

            elif action == 'crearmoodlevideomasivo':
                try:
                    from Moodle_Funciones import CrearVidMagistralMoodle
                    if periodo.clasificacion == 1:
                        listadovideos = VideoMagistralSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.POST['id']), estado_id=2, status=True)
                    else:
                        listadovideos = VideoMagistralSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.POST['id']), estado_id__in=[2, 1], status=True)
                    lista_errores = []
                    for lis in listadovideos:
                        try:
                            value, msg = CrearVidMagistralMoodle(lis.id, persona)
                            if not value:
                                raise NameError(msg)
                        except Exception as ex:
                            lista_errores.append({"actividad": "Video Magistral", "descripcion": lis.__str__(), "error": ex.__str__()})
                    log(u'Crea en moodle video magistral masivo', request, "edit")
                    return JsonResponse({"result": "ok", "lista_error": lista_errores})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s " % ex})

            elif action == 'crearmoodlematerialmasivo':
                try:
                    from Moodle_Funciones import CrearMaterialesMoodle
                    lista_errores = []
                    listadomateriales = MaterialAdicionalSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.POST['id']), estado_id__in=[2, 1], status=True)
                    for lis in listadomateriales:
                        try:
                            value, msg = CrearMaterialesMoodle(lis.id, persona)
                            if not value:
                                raise NameError(msg)
                        except Exception as ex:
                            lista_errores.append({"actividad": "Material complementario", "nombre": lis.nombre, "descripcion": lis.__str__(), "error": ex.__str__()})
                    log(u'Crea en moodle material adicional silabo', request, "edit")
                    return JsonResponse({"result": "ok", "errores": lista_errores})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s" % ex})

            elif action == 'crearmoodletestmasivo':
                try:
                    from Moodle_Funciones import CrearTestMoodleAdmision
                    lista_errores = []
                    listadotests = TestSilaboSemanalAdmision.objects.filter(silabosemanal__silabo_id=encrypt(request.POST['id']), estado_id__in=[2, 1], status=True)
                    for lis in listadotests:
                        try:
                            value, msg = CrearTestMoodleAdmision(lis.id, persona)
                            if not value:
                                raise NameError(msg)
                        except Exception as ex:
                            lista_errores.append({"actividad": "Test Admisión", "nombre": lis.nombre, "descripcion": lis.__str__(), "error": ex.__str__()})
                    log(u'Crea en moodle test admisión silabo', request, "edit")
                    return JsonResponse({"result": "ok", "errores": lista_errores})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s" % ex})

            elif action == 'crearmoodleguiaestudiante':
                try:
                    from Moodle_Funciones import CrearGuiaestudianteMoodle
                    value, msg = CrearGuiaestudianteMoodle(int(encrypt(request.POST['id'])), persona)
                    if not value:
                        raise NameError(msg)
                    log(u'Crea en moodle guia de estudiante', request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso guía del estudiante. %s " % ex})

            elif action == 'crearmoodleguiadocente':
                try:
                    from Moodle_Funciones import CrearGuiadocenteMoodle
                    value, msg = CrearGuiadocenteMoodle(int(encrypt(request.POST['id'])), persona)
                    if not value:
                        raise NameError(msg)
                    log(u'Crea en moodle guia de docente', request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s " % ex})

            elif action == 'crearmoodleguiasmasivo':
                try:
                    from Moodle_Funciones import CrearGuiaestudianteMoodle, CrearGuiadocenteMoodle
                    lista_errores = []
                    listadoguiasestudiantes = GuiaEstudianteSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.POST['id']), estado_id__in=[2, 1], status=True)
                    listadoguiasdocentes = GuiaDocenteSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.POST['id']), estado_id__in=[2, 1], status=True)
                    for lestudiante in listadoguiasestudiantes:
                        try:
                            value, msg = CrearGuiaestudianteMoodle(lestudiante.id, persona)
                            if not value:
                                raise NameError(msg)
                        except Exception as ex:
                            lista_errores.append({"actividad": "Guía de estudiante", "observacion": lestudiante.__str__(), "error": ex.__str__()})
                    for ldocente in listadoguiasdocentes:
                        try:
                            value, msg = CrearGuiadocenteMoodle(ldocente.id, persona)
                            if not value:
                                raise NameError(msg)
                        except Exception as ex:
                            lista_errores.append({"actividad": "Guía de docente", "observacion": ldocente.__str__(), "error": ex.__str__()})
                    log(u'Crea en moodle guia de docente y estudiante masivo', request, "edit")
                    return JsonResponse({"result": "ok", "errores": lista_errores})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s " % ex})

            elif action == 'crearmoodlevidmagistral':
                try:
                    from Moodle_Funciones import CrearVidMagistralMoodle
                    value, msg = CrearVidMagistralMoodle(int(encrypt(request.POST['id'])), persona)
                    if not value:
                        raise NameError(msg)
                    log(u'Crea en moodle video magistral', request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al crear el recurso. %s " % ex})

            elif action == 'rechazarvideomagistral':
                try:
                    vidmagistral = VideoMagistralSilaboSemanal.objects.get(pk=request.POST['id'])
                    vidmagistral.estado_id = 3
                    vidmagistral.save(request)
                    historial = HistorialaprobacionVideoMagistral(material=vidmagistral,
                                                                  observacion=request.POST['id_observacion'],
                                                                  estado_id=3)
                    historial.save(request)
                    correo = persona.lista_emails_envio()
                    if CoordinadorCarrera.objects.filter(status=True, carrera=vidmagistral.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=vidmagistral.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = correo + coordinadordecarrera.persona.lista_emails_envio()
                    nombrerecurso = 'VIDEO MAGISTRAL'
                    correo.append('sop_docencia_crai@unemi.edu.ec')
                    semana = vidmagistral.silabosemanal.numsemana
                    nombre_carrera = vidmagistral.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.nombre_completo()
                    cuenta = CUENTAS_CORREOS[0][1]
                    # send_html_mail("SGA - VIDEOS MAGISTRALES - RECHAZADO - %s" % nombre_carrera, "emails/rechazovideomagistral.html",
                    #                {'sistema': request.session['nombresistema'], 'nombredocente': persona,
                    #                 'nombrerecurso': nombrerecurso, 'semana': semana, 'vidmagistral': vidmagistral, 'nombrecarrera': nombre_carrera,
                    #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                    log(u'rechaza video magistral %s %s' % (vidmagistral, vidmagistral.silabosemanal), request, "edit")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'duplicar_silabo_otro_periodo':
                try:
                    data['title'] = u'Sílabos que puede importar de otros periodos'
                    listaperiodo = []
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.POST['ids'])))
                    # data['periodos'] = Periodo.objects.filter(status=True, pk__in=silabo.lista_periodos_silabos()).exclude(tipo_id=3).order_by('-inicio')
                    data['periodos'] = Periodo.objects.filter(status=True).exclude(tipo_id=3).order_by('-inicio')
                    data['semana'] = request.POST['semana']
                    data['numsemana'] = request.POST['numsemana']
                    data['fini'] = str(request.POST['fini'])
                    data['ffin'] = str(request.POST['ffin'])
                    data['idsact'] = silabo.id
                    template = get_template("pro_planificacion/importarsilaboperiodo.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'lista_silabos_periodo':
                lista = []
                try:
                    if 'ida' in request.POST and 'id' in request.POST:
                        silaboact = Silabo.objects.get(status=True, pk=int(request.POST['ida']))
                        if silaboact.materia.nivel.modalidad.id == 3:
                            if Silabo.objects.values("id").filter(status=True, programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id, materia__asignaturamalla__id=silaboact.materia.asignaturamalla.id, materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id).exists():
                                silabos = Silabo.objects.filter(status=True, programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id, materia__asignaturamalla__id=silaboact.materia.asignaturamalla.id, materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)
                            else:
                                silabos = Silabo.objects.filter(status=True,  materia__asignaturamalla__id__in=TablaEquivalenciaAsignaturas.objects.values_list('asignaturamalla_id').filter(asignaturamallasalto_id=silaboact.materia.asignaturamalla.id, status=True), materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)
                        else:
                            silabos = Silabo.objects.filter(status=True, programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id, materia__asignaturamalla__id=silaboact.materia.asignaturamalla.id, materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)
                        for silabo in silabos:
                            if silabo.aprobado == True or silabo.codigoqr == True:
                                lista.append([silabo.id, silabo.materia.asignaturamalla.asignatura.nombre + " " + str(silabo.materia.asignaturamalla.nivelmalla) + " " + str(silabo.materia.paralelo), str(silabo.fecha_creacion.strftime("%Y/%m/%d")), str(silabo.profesor), str(silabo.estado_planificacion_clases())])
                        return JsonResponse({"result": "ok", "lista": lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'planificacion_semanal_importar':
                lista = []
                try:
                    if 'idsant' in request.POST:
                        data['idsact'] = request.POST['idsact']
                        data['semana'] = request.POST['semana']
                        data['numsemana'] = request.POST['numsemana']
                        data['fini'] = request.POST['fini']
                        data['ffin'] = request.POST['ffin']
                        silabo = Silabo.objects.get(status=True, pk=int(request.POST['idsant']))
                        for semana in silabo.silabosemanal_set.filter(status=True).order_by('numsemana', 'fechainiciosemana'):
                            listabibliografiacomplementaria = []
                            for biblic in semana.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                                listabibliografiacomplementaria.append([str(biblic.librokohaprogramaanaliticoasignatura)])
                            listabibliografiabasica = []
                            for biblib in semana.detallesilabosemanalbibliografia_set.filter(status=True):
                                listabibliografiabasica.append([str(biblib)])
                            lista.append([semana.silabo.id,
                                          semana.id,
                                          str(semana.fechainiciosemana.strftime("%Y/%m/%d")),
                                          str(semana.fechafinciosemana.strftime("%Y/%m/%d")),
                                          semana,
                                          listabibliografiabasica,
                                          listabibliografiacomplementaria,
                                          str(semana.objetivoaprendizaje),
                                          str(semana.enfoque),
                                          str(semana.recursos),
                                          str(semana.evaluacion),
                                          str(semana.numsemana)])
                    data['semanas'] = lista
                    template = get_template("pro_planificacion/planificacion_semanal.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addimportarsilabomateria':
                try:
                    idsilaboviej = request.POST['idsilabo']
                    idcabsilaboactu = request.POST['idcabsilabo']
                    silaboviejo = Silabo.objects.get(pk=idsilaboviej)
                    silaboimportviejo = silaboviejo.silabosemanal_set.filter(status=True)
                    silaboactu = Silabo.objects.get(pk=idcabsilaboactu)
                    for silaboimp in silaboimportviejo:
                        planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silaboactu.materia, status=True)

                        planificacionclaseviejo = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, orden=silaboimp.numsemana, status=True)[0]

                        silabosemana = SilaboSemanal(silabo_id=idcabsilaboactu,
                                                     numsemana=planificacionclaseviejo.orden,
                                                     semana=planificacionclaseviejo.semana,
                                                     fechainiciosemana=planificacionclaseviejo.fechainicio,
                                                     fechafinciosemana=planificacionclaseviejo.fechafin,
                                                     objetivoaprendizaje=silaboimp.objetivoaprendizaje,
                                                     enfoque=silaboimp.enfoque,
                                                     recursos=silaboimp.recursos,
                                                     evaluacion=silaboimp.evaluacion
                                                     )
                        silabosemana.save(request)

                        listadosemanaltema = silaboimp.detallesilabosemanaltema_set.filter(status=True)
                        for tem in listadosemanaltema:
                            ingresostemas = DetalleSilaboSemanalTema(silabosemanal=silabosemana,
                                                                     temaunidadresultadoprogramaanalitico=tem.temaunidadresultadoprogramaanalitico,
                                                                     objetivoaprendizaje=tem.objetivoaprendizaje)
                            ingresostemas.save(request)

                        listadosemanalsubtema = silaboimp.detallesilabosemanalsubtemaposgrado_set.filter(status=True)
                        for subt in listadosemanalsubtema:
                            ingresosubt = DetalleSilaboSemanalSubtemaPosgrado(silabosemanal=silabosemana,
                                                                              subtemaunidadresultadoprogramaanaliticoposgrado=subt.subtemaunidadresultadoprogramaanaliticoposgrado)
                            ingresosubt.save(request)

                        biblibasica = silaboimp.detallesilabosemanalbibliografia_set.filter(status=True)
                        for basica in biblibasica:
                            if not DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal=silabosemana,
                                                                                   bibliografiaprogramaanaliticoasignatura=basica.bibliografiaprogramaanaliticoasignatura).exists():
                                bbasica = DetalleSilaboSemanalBibliografia(silabosemanal=silabosemana, bibliografiaprogramaanaliticoasignatura=basica.bibliografiaprogramaanaliticoasignatura)
                                bbasica.save(request)

                        biblicomple = silaboimp.detallesilabosemanalbibliografiadocente_set.filter(status=True)
                        for comple in biblicomple:
                            if not DetalleSilaboSemanalBibliografiaDocente.objects.filter(silabosemanal=silabosemana,
                                                                                          librokohaprogramaanaliticoasignatura=comple.librokohaprogramaanaliticoasignatura).exists():
                                bcomple = DetalleSilaboSemanalBibliografiaDocente(silabosemanal=silabosemana, librokohaprogramaanaliticoasignatura=comple.librokohaprogramaanaliticoasignatura)
                                bcomple.save(request)

                        bibliapa = silaboimp.bibliograbiaapasilabo_set.filter(status=True)
                        for apa in bibliapa:
                            if not BibliograbiaAPASilabo.objects.filter(silabosemanal=silabosemana,
                                                                        bibliografia=apa.bibliografia).exists():
                                bapa = BibliograbiaAPASilabo(silabosemanal=silabosemana, bibliografia=apa.bibliografia)
                                bapa.save(request)
                                log(u'Adicionó Bibliografia Apa: %s al sílabo de la materia %s:' % (
                                    bapa, bapa.silabosemanal.silabo.materia), request, "add")

                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s" % ex})

            elif action == 'importar_semana_planificada':
                try:
                    if 'idi' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['ids']))
                        semanaant = silaboant.silabosemanal_set.get(pk=int(request.POST['idi']))
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        semana = SilaboSemanal(silabo=silaboactual,
                                               numsemana=request.POST['numsemana'],
                                               semana=request.POST['semana'],
                                               fechainiciosemana=request.POST['fini'],
                                               fechafinciosemana=request.POST['ffin'],
                                               objetivoaprendizaje=semanaant.objetivoaprendizaje,
                                               enfoque=semanaant.enfoque,
                                               enfoquedos=semanaant.enfoquedos,
                                               enfoquetres=semanaant.enfoquetres,
                                               recursos=semanaant.recursos,
                                               evaluacion=semanaant.evaluacion,
                                               horaspresencial=semanaant.horaspresencial,
                                               horaautonoma=semanaant.horaautonoma)
                        semana.save(request)
                        lista_temas_migrar = []
                        lista_temas_id = []
                        if silaboactual.materia.nivel.modalidad_id == 3:
                            for tema in semanaant.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True):
                                temaanterior = tema
                                temasilaboactual=TemaUnidadResultadoProgramaAnalitico.objects.filter(unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura=silaboactual.programaanaliticoasignatura,descripcion=tema.temaunidadresultadoprogramaanalitico.descripcion,status=True).first()
                                if temasilaboactual:
                                    if tema.objetivoaprendizaje:
                                        tema_nuevo = DetalleSilaboSemanalTema(silabosemanal=semana, temaunidadresultadoprogramaanalitico=temasilaboactual, objetivoaprendizaje=tema.objetivoaprendizaje)
                                    else:
                                        tema_nuevo = DetalleSilaboSemanalTema(silabosemanal=semana, temaunidadresultadoprogramaanalitico=temasilaboactual, objetivoaprendizaje=semana.objetivoaprendizaje)
                                    tema_nuevo.save(request)
                                    lista_temas_migrar.append([temaanterior.id, tema_nuevo.id])
                                    lista_temas_id.append(temaanterior.id)

                                    if semanaant.subtemaadicionalessilabo_set.filter(status=True, tema=tema).exists():
                                        for subtemaadicional in semanaant.subtemaadicionalessilabo_set.filter(status=True, tema=tema):
                                            sub = SubTemaAdicionalesSilabo(silabosemanal=semana, tema=tema, subtema=subtemaadicional.subtema)
                                            sub.save(request)

                                    for subtema in semanaant.detallesilabosemanalsubtema_set.filter(status=True):
                                        listasubtemasactuales = temasilaboactual.subtemaunidadresultadoprogramaanalitico_set.filter(descripcion=subtema.subtemaunidadresultadoprogramaanalitico.descripcion, status=True).first()
                                        if listasubtemasactuales:
                                            subtema = DetalleSilaboSemanalSubtema(silabosemanal=semana, subtemaunidadresultadoprogramaanalitico=listasubtemasactuales)
                                            subtema.save(request)
                        else:
                            for tema in semanaant.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True):
                                temaanterior = tema
                                if tema.objetivoaprendizaje:
                                    tema_nuevo = DetalleSilaboSemanalTema(silabosemanal=semana, temaunidadresultadoprogramaanalitico=tema.temaunidadresultadoprogramaanalitico, objetivoaprendizaje=tema.objetivoaprendizaje)
                                else:
                                    tema_nuevo = DetalleSilaboSemanalTema(silabosemanal=semana, temaunidadresultadoprogramaanalitico=tema.temaunidadresultadoprogramaanalitico, objetivoaprendizaje=semana.objetivoaprendizaje)
                                tema_nuevo.save(request)
                                lista_temas_migrar.append([temaanterior.id, tema_nuevo.id])
                                lista_temas_id.append(temaanterior.id)

                                if semanaant.subtemaadicionalessilabo_set.filter(status=True, tema=tema).exists():
                                    for subtemaadicional in semanaant.subtemaadicionalessilabo_set.filter(status=True, tema=tema):
                                        sub = SubTemaAdicionalesSilabo(silabosemanal=semana, tema=tema, subtema=subtemaadicional.subtema)
                                        sub.save(request)
                            for subtema in semanaant.detallesilabosemanalsubtema_set.filter(status=True):
                                subtema = DetalleSilaboSemanalSubtema(silabosemanal=semana, subtemaunidadresultadoprogramaanalitico=subtema.subtemaunidadresultadoprogramaanalitico)
                                subtema.save(request)
                        for biblio in semanaant.detallesilabosemanalbibliografia_set.filter(status=True):
                            bibliografia = DetalleSilaboSemanalBibliografia(silabosemanal=semana, bibliografiaprogramaanaliticoasignatura_id=biblio.bibliografiaprogramaanaliticoasignatura.id)
                            bibliografia.save(request)
                        for biblic in semanaant.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                            bibliografiac = DetalleSilaboSemanalBibliografiaDocente(silabosemanal=semana, librokohaprogramaanaliticoasignatura=biblic.librokohaprogramaanaliticoasignatura)
                            bibliografiac.save(request)
                        if semanaant.bibliograbiaapasilabo_set.filter(status=True).exists():
                            for bibliv in semanaant.bibliograbiaapasilabo_set.filter(status=True):
                                bibliografiav = BibliograbiaAPASilabo(silabosemanal=semana, bibliografia=bibliv.bibliografia)
                                bibliografiav.save(request)
                        if semanaant.recursosdidacticossemanal_set.filter(status=True).exists():
                            for recurso in semanaant.recursosdidacticossemanal_set.filter(status=True):
                                rec = RecursosDidacticosSemanal(silabosemanal=semana, descripcion=recurso.descripcion, link=recurso.link)
                                rec.save(request)
                        if semanaant.articulosilabosemanal_set.filter(status=True).exists():
                            for articulo in semanaant.articulosilabosemanal_set.filter(status=True):
                                a = ArticuloSilaboSemanal(silabosemanal=semana, articulo=articulo.articulo)
                                a.save(request)
                        # if semanaant.evaluacionaprendizajesilabosemanal_set.filter(status=True).exists():
                        #     for articulo in semanaant.evaluacionaprendizajesilabosemanal_set.filter(status=True):
                        #         a = EvaluacionAprendizajeSilaboSemanal(silabosemanal=semana, evaluacionaprendizaje=articulo.evaluacionaprendizaje)
                        #         a.save(request)

                        if silaboant.versionsilabo == 2 and silaboant.materia.nivel.periodo_id >= 113:
                            if silaboactual.materia.nivel.modalidad_id == 3:
                                temasactuales = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, status=True)
                                listadoaprendizaje = EvaluacionAprendizajeTema.objects.filter(evaluacion__silabosemanal=semanaant, evaluacion__silabosemanal__status=True, evaluacion__tipoactividadsemanal=1, temasemanal__silabosemanal__status=True, temasemanal__silabosemanal__silabo__status=True, temasemanal__status=True, status=True).distinct()
                                if lista_temas_migrar:
                                    for lisaprendizaje in listadoaprendizaje:
                                        for temaactual in temasactuales:
                                            codaprendizaje = EvaluacionAprendizajeTema.objects.get(pk=lisaprendizaje.id)
                                            semanacod = codaprendizaje.temasemanal.silabosemanal.numsemana
                                            if temaactual.temaunidadresultadoprogramaanalitico.descripcion == lisaprendizaje.temasemanal.temaunidadresultadoprogramaanalitico.descripcion and temaactual.silabosemanal.numsemana == semanacod:
                                                aprendizajestemassilabo(request, temaactual.id, lisaprendizaje.evaluacion.evaluacionaprendizaje.id, semana.id, lisaprendizaje.evaluacion.numactividad)
                            else:
                                temasactuales = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, status=True)
                                listadoaprendizaje = EvaluacionAprendizajeTema.objects.filter(evaluacion__silabosemanal=semanaant, evaluacion__silabosemanal__status=True, evaluacion__tipoactividadsemanal=1, temasemanal__silabosemanal__status=True, temasemanal__silabosemanal__silabo__status=True, temasemanal__status=True, status=True).distinct()
                                if lista_temas_migrar:
                                    for lisaprendizaje in listadoaprendizaje:
                                        for temaactual in temasactuales:
                                            codaprendizaje = EvaluacionAprendizajeTema.objects.get(pk=lisaprendizaje.id)
                                            semanacod = codaprendizaje.temasemanal.silabosemanal.numsemana
                                            if temaactual.temaunidadresultadoprogramaanalitico == lisaprendizaje.temasemanal.temaunidadresultadoprogramaanalitico and temaactual.silabosemanal.numsemana == semanacod:
                                                aprendizajestemassilabo(request, temaactual.id, lisaprendizaje.evaluacion.evaluacionaprendizaje.id, semana.id, lisaprendizaje.evaluacion.numactividad)

                            # if lista_temas_migrar:
                            #     for listami in lista_temas_migrar:
                            #         for lisaprendizaje in listadoaprendizaje:
                            #             # itentest = EvaluacionAprendizajeTema.objects.get(temasemanal_id=listami[0], evaluacion__silabosemanal=semanaant,temasemanal__silabosemanal=semanaant,evaluacion__evaluacionaprendizaje_id=lisaprendizaje.id, evaluacion__silabosemanal__status=True, evaluacion__tipoactividadsemanal=1, temasemanal__silabosemanal__status=True, temasemanal__silabosemanal__silabo__status=True, temasemanal__status=True, status=True)
                            #             # ordentest = itentest.evaluacion.numactividad
                            #             # aprendizajestemassilabo(request, listami[1], lisaprendizaje.id, semana.id, ordentest)
                            #             aprendizajestemassilabo(request, listami[1], lisaprendizaje.evaluacion.evaluacionaprendizaje.id, semana.id, lisaprendizaje.evaluacion.numactividad)

                        log(u'Importó el semana: %s del profesor: %s a la semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semana, semana.silabo.profesor.persona.nombre_completo_inverso()), request, "add")
                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_recursosemana_planificada':
                try:
                    if 'idi' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['ids']))
                        semanaant = silaboant.silabosemanal_set.get(pk=int(request.POST['idi']))
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        semanaactual = SilaboSemanal.objects.get(status=True, pk=int(request.POST['idsemanal']))

                        for importatarea in semanaant.tareasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            tarea = TareaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                       silabosemanal_id=semanaactual.id,
                                                       estado_id=2,
                                                       calificar=importatarea.calificar,
                                                       nombre=importatarea.nombre,
                                                       objetivo=importatarea.objetivo,
                                                       instruccion=importatarea.instruccion,
                                                       recomendacion=importatarea.recomendacion,
                                                       rubrica=importatarea.rubrica,
                                                       rubricamoodle=importatarea.rubricamoodle,
                                                       archivorubrica=importatarea.archivorubrica,
                                                       archivotareasilabo=importatarea.archivotareasilabo,
                                                       fechadesde=importatarea.fechadesde,
                                                       fechahasta=importatarea.fechahasta,
                                                       word=importatarea.word,
                                                       pdf=importatarea.pdf,
                                                       excel=importatarea.excel,
                                                       powerpoint=importatarea.powerpoint,
                                                       todos=importatarea.todos,
                                                       tiporecurso_id=5)
                            tarea.save(request)
                            importar = importatarea
                            # TareaSilaboSemanal.objects.filter(pk=tarea.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in importatarea.historialaprobaciontarea_set.filter(status=True, estado_id__lte=2):
                                historialaprobaciontarea = HistorialaprobacionTarea(tarea=tarea,
                                                                                    estado=historial.estado,
                                                                                    observacion=historial.observacion)
                                historialaprobaciontarea.save(request)
                                # HistorialaprobacionTarea.objects.filter(pk=historialaprobaciontarea.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importaforo in semanaant.forosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            foro = ForoSilaboSemanal(detallemodelo=importaforo.detallemodelo,
                                                     silabosemanal_id=semanaactual.id,
                                                     calificar=importaforo.calificar,
                                                     tipoforo=importaforo.tipoforo,
                                                     tipoconsolidacion=importaforo.tipoconsolidacion,
                                                     estado_id=2,
                                                     nombre=importaforo.nombre,
                                                     objetivo=importaforo.objetivo,
                                                     instruccion=importaforo.instruccion,
                                                     recomendacion=importaforo.recomendacion,
                                                     rubrica=importaforo.rubrica,
                                                     archivorubrica=importaforo.archivorubrica,
                                                     archivoforo=importaforo.archivoforo,
                                                     fechadesde=importaforo.fechadesde,
                                                     fechahasta=importaforo.fechahasta,
                                                     tiporecurso_id=9)
                            foro.save(request)
                            importar = importaforo
                            # ForoSilaboSemanal.objects.filter(pk=foro.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in importaforo.historialaprobacionforo_set.filter(status=True, estado_id__lte=2):
                                historialaprobacionforo = HistorialaprobacionForo(foro=foro, estado=historial.estado, observacion=historial.observacion)
                                historialaprobacionforo.save(request)
                                # HistorialaprobacionForo.objects.filter(pk=historialaprobacionforo.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importatest in semanaant.testsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            testsilabo = TestSilaboSemanal(detallemodelo=importatest.detallemodelo,
                                                           silabosemanal_id=semanaactual.id,
                                                           estado_id=2,
                                                           calificar=importatest.calificar,
                                                           instruccion=importatest.instruccion,
                                                           recomendacion=importatest.recomendacion,
                                                           fechadesde=importatest.fechadesde,
                                                           fechahasta=importatest.fechahasta,
                                                           vecesintento=importatest.vecesintento,
                                                           archivorubrica=importatest.archivorubrica,
                                                           tiempoduracion=importatest.tiempoduracion,
                                                           tiporecurso_id=11)
                            testsilabo.save(request)
                            importar = importatest
                            # TestSilaboSemanal.objects.filter(pk=testsilabo.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in testsilabo.historialaprobaciontest_set.filter(status=True, estado_id__lte=2):
                                historialaprobaciontest = HistorialaprobacionTest(test=testsilabo,
                                                                                  estado=historial.estado,
                                                                                  observacion=historial.observacion)
                                historialaprobaciontest.save(request)
                                # HistorialaprobacionTest.objects.filter(pk=historialaprobaciontest.id).update(usuario_creacion=historial.usuario_creacion, fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importaguiaes in semanaant.guiaestudiantesilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            guiaestudiante = GuiaEstudianteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                         estado_id=2,
                                                                         observacion=importaguiaes.observacion,
                                                                         archivoguiaestudiante=importaguiaes.archivoguiaestudiante,
                                                                         archivo_logo=importaguiaes.archivo_logo,
                                                                         archivo_sin_logo=importaguiaes.archivo_sin_logo,
                                                                         tiporecurso_id=2)
                            guiaestudiante.save(request)
                            importar = importaguiaes
                            # GuiaEstudianteSilaboSemanal.objects.filter(pk=guiaestudiante.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in guiaestudiante.historialaprobacionguiaestudiante_set.filter(status=True, estado_id__lte=2):
                                historialaprobacionguiaestudiante = HistorialaprobacionGuiaEstudiante(guiaestudiante=guiaestudiante,
                                                                                                      estado=historial.estado,
                                                                                                      observacion=historial.observacion)
                                historialaprobacionguiaestudiante.save(request)
                                # HistorialaprobacionGuiaEstudiante.objects.filter(pk=historialaprobacionguiaestudiante.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        # for importaguiado in semanaant.guiadocentesilabosemanal_set.filter(status=True,estado_id__in=[2,4]):
                        #     guiadocente = GuiaDocenteSilaboSemanal(silabosemanal_id=semanaactual.id,
                        #                                            estado_id=2,
                        #                                            observacion=importaguiado.observacion,
                        #                                            archivoguiadocente=importaguiado.archivoguiadocente)
                        #     guiadocente.save(request)
                        #     importar = importaguiado
                        #     # GuiaDocenteSilaboSemanal.objects.filter(pk=guiadocente.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                        #     # historial
                        #     for historial in guiadocente.historialaprobacionguiadocente_set.filter(status=True,estado_id__lte=2):
                        #         historialaprobacionguiadocente = HistorialaprobacionGuiaDocente(guiadocente=guiadocente,
                        #                                                                         estado=historial.estado,
                        #                                                                         observacion=historial.observacion)
                        #         historialaprobacionguiadocente.save(request)
                        # HistorialaprobacionGuiaDocente.objects.filter(pk=historialaprobacionguiadocente.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importadiapositiva in semanaant.diapositivasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            diapositiva = DiapositivaSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                   estado_id=2,
                                                                   nombre=importadiapositiva.nombre,
                                                                   descripcion=importadiapositiva.descripcion,
                                                                   url=importadiapositiva.url,
                                                                   tipomaterial=importadiapositiva.tipomaterial,
                                                                   archivodiapositiva=importadiapositiva.archivodiapositiva,
                                                                   tiporecurso_id=1)
                            diapositiva.save(request)
                            importar = importadiapositiva
                            # DiapositivaSilaboSemanal.objects.filter(pk=diapositiva.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in diapositiva.historialaprobaciondiapositiva_set.filter(status=True, estado_id__lte=2):
                                historialaprobaciondiapositiva = HistorialaprobacionDiapositiva(diapositiva=diapositiva,
                                                                                                estado=historial.estado,
                                                                                                observacion=historial.observacion)
                                historialaprobaciondiapositiva.save(request)
                                # HistorialaprobacionDiapositiva.objects.filter(pk=historialaprobaciondiapositiva.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importacompendio in semanaant.compendiosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            compendio = CompendioSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                               estado_id=2,
                                                               descripcion=importacompendio.descripcion,
                                                               archivocompendio=importacompendio.archivocompendio,
                                                               archivo_logo=importacompendio.archivo_logo,
                                                               archivo_sin_logo=importacompendio.archivo_sin_logo,
                                                               tiporecurso_id=3)
                            compendio.save(request)
                            importar = importacompendio
                            # CompendioSilaboSemanal.objects.filter(pk=compendio.id).update(
                            #     usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,
                            #     usuario_modificacion=importar.usuario_modificacion,
                            #     fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in compendio.historialaprobacioncompendio_set.filter(status=True, estado_id__lte=2):
                                historialaprobacioncompendio = HistorialaprobacionCompendio(compendio=compendio,
                                                                                            estado=historial.estado,
                                                                                            observacion=historial.observacion)
                                historialaprobacioncompendio.save(request)
                                # HistorialaprobacionCompendio.objects.filter(pk=historialaprobacioncompendio.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                      estado_id=2,
                                                                      tipomaterial=importamaterial.tipomaterial,
                                                                      nombre=importamaterial.nombre,
                                                                      descripcion=importamaterial.descripcion,
                                                                      testourl=importamaterial.testourl,
                                                                      tiporecurso=importamaterial.tiporecurso,
                                                                      archivomaterial=importamaterial.archivomaterial,
                                                                      tiporecursos_id=4)
                            material.save(request)
                            importar = importamaterial
                            # MaterialAdicionalSilaboSemanal.objects.filter(pk=material.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                          estado=historial.estado,
                                                                                          observacion=historial.observacion)
                                historialaprobacionmaterial.save(request)
                                # HistorialaprobacionMaterial.objects.filter(pk=historialaprobacionmaterial.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        log(u'Importó el recurso de la semana: %s del profesor: %s al recurso de la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")
                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_recursosemana_planificada_todo':
                try:
                    if 'idsact' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['idsant']))
                        id_periodo_ant = silaboant.materia.nivel.periodo.id
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        id_periodo_actual = silaboactual.materia.nivel.periodo.id
                        estado = 1
                        if id_periodo_ant == id_periodo_actual:
                            estado = 2
                        for semanaant in silaboant.silabosemanal_set.filter(status=True).order_by('numsemana'):
                            semanaactual_aux = silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana)
                            if semanaactual_aux:
                                semanaactual = semanaactual_aux[0]
                                if not semanaactual.tareasilabosemanal_set.filter(status=True).exists():
                                    for importatarea in semanaant.tareasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        tarea = TareaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                                   silabosemanal_id=semanaactual.id,
                                                                   estado_id=estado,
                                                                   calificar=importatarea.calificar,
                                                                   nombre=importatarea.nombre,
                                                                   objetivo=importatarea.objetivo,
                                                                   instruccion=importatarea.instruccion,
                                                                   recomendacion=importatarea.recomendacion,
                                                                   rubrica=importatarea.rubrica,
                                                                   rubricamoodle=importatarea.rubricamoodle,
                                                                   archivorubrica=importatarea.archivorubrica,
                                                                   archivotareasilabo=importatarea.archivotareasilabo,
                                                                   fechadesde=importatarea.fechadesde,
                                                                   fechahasta=importatarea.fechahasta,
                                                                   word=importatarea.word,
                                                                   pdf=importatarea.pdf,
                                                                   excel=importatarea.excel,
                                                                   todos=importatarea.todos,
                                                                   migrado=True,
                                                                   actividad_id=5,
                                                                   powerpoint=importatarea.powerpoint,
                                                                   tiporecurso_id=5)
                                        tarea.save(request)
                                        importar = importatarea
                                        # if estado == 2:
                                        #     TareaSilaboSemanal.objects.filter(pk=tarea.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in importatarea.historialaprobaciontarea_set.filter(status=True, estado_id__lte=2):  # estado_id__lte=2
                                                historialaprobaciontarea = HistorialaprobacionTarea(tarea=tarea,
                                                                                                    estado=historial.estado,
                                                                                                    observacion=historial.observacion)
                                                historialaprobaciontarea.save(request)
                                                # HistorialaprobacionTarea.objects.filter(pk=historialaprobaciontarea.id).update(usuario_creacion=historial.usuario_creacion, fecha_creacion=historial.fecha_creacion, usuario_modificacion=historial.usuario_modificacion, fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.forosilabosemanal_set.filter(status=True).exists():
                                    for importaforo in semanaant.forosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        foro = ForoSilaboSemanal(detallemodelo=importaforo.detallemodelo,
                                                                 silabosemanal_id=semanaactual.id,
                                                                 calificar=importaforo.calificar,
                                                                 tipoforo=importaforo.tipoforo,
                                                                 tipoconsolidacion=importaforo.tipoconsolidacion,
                                                                 estado_id=estado,
                                                                 nombre=importaforo.nombre,
                                                                 objetivo=importaforo.objetivo,
                                                                 instruccion=importaforo.instruccion,
                                                                 recomendacion=importaforo.recomendacion,
                                                                 rubrica=importaforo.rubrica,
                                                                 archivorubrica=importaforo.archivorubrica,
                                                                 archivoforo=importaforo.archivoforo,
                                                                 fechadesde=importaforo.fechadesde,
                                                                 migrado=True,
                                                                 fechahasta=importaforo.fechahasta,
                                                                 tiporecurso_id=9)
                                        foro.save(request)
                                        importar = importaforo
                                        # if estado == 2:
                                        #     ForoSilaboSemanal.objects.filter(pk=foro.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in importaforo.historialaprobacionforo_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionforo = HistorialaprobacionForo(foro=foro,
                                                                                                  estado=historial.estado,
                                                                                                  observacion=historial.observacion)
                                                historialaprobacionforo.save(request)
                                                # HistorialaprobacionForo.objects.filter(pk=historialaprobacionforo.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.testsilabosemanal_set.filter(status=True).exists():
                                    for importatest in semanaant.testsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        testsilabo = TestSilaboSemanal(detallemodelo=importatest.detallemodelo,
                                                                       silabosemanal_id=semanaactual.id,
                                                                       estado_id=estado,
                                                                       calificar=importatest.calificar,
                                                                       instruccion=importatest.instruccion,
                                                                       recomendacion=importatest.recomendacion,
                                                                       fechadesde=importatest.fechadesde,
                                                                       fechahasta=importatest.fechahasta,
                                                                       vecesintento=importatest.vecesintento,
                                                                       archivorubrica=importatest.archivorubrica,
                                                                       tiempoduracion=importatest.tiempoduracion,
                                                                       migrado=True,
                                                                       nombretest=importatest.nombretest,
                                                                       tiporecurso_id=11)
                                        testsilabo.save(request)
                                        importar = importatest
                                        # if estado == 2:
                                        #     TestSilaboSemanal.objects.filter(pk=testsilabo.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in testsilabo.historialaprobaciontest_set.filter(status=True, estado_id__lte=2):
                                                historialaprobaciontest = HistorialaprobacionTest(test=testsilabo,
                                                                                                  estado=historial.estado,
                                                                                                  observacion=historial.observacion)
                                                historialaprobaciontest.save(request)
                                                # HistorialaprobacionTest.objects.filter(pk=historialaprobaciontest.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.guiaestudiantesilabosemanal_set.filter(status=True).exists():
                                    for importaguiaes in semanaant.guiaestudiantesilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        guiaestudiante = GuiaEstudianteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                     estado_id=estado,
                                                                                     migrado=True,
                                                                                     observacion=importaguiaes.observacion,
                                                                                     archivoguiaestudiante=importaguiaes.archivoguiaestudiante,
                                                                                     tiporecurso_id=2)
                                        guiaestudiante.save(request)
                                        importar = importaguiaes
                                        # if estado == 2:
                                        #     GuiaEstudianteSilaboSemanal.objects.filter(pk=guiaestudiante.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in guiaestudiante.historialaprobacionguiaestudiante_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionguiaestudiante = HistorialaprobacionGuiaEstudiante(guiaestudiante=guiaestudiante,
                                                                                                                      estado=historial.estado,
                                                                                                                      observacion=historial.observacion)
                                                historialaprobacionguiaestudiante.save(request)
                                                # HistorialaprobacionGuiaEstudiante.objects.filter(pk=historialaprobacionguiaestudiante.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                # if not semanaactual.guiadocentesilabosemanal_set.filter(status=True).exists():
                                #     for importaguiado in semanaant.guiadocentesilabosemanal_set.filter(status=True, estado_id__in=[2,4]):
                                #         guiadocente = GuiaDocenteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                #                                                estado_id=estado,
                                #                                                migrado=True,
                                #                                                observacion=importaguiado.observacion,
                                #                                                archivoguiadocente=importaguiado.archivoguiadocente)
                                #         guiadocente.save(request)
                                #         importar = importaguiado
                                #         # if estado == 2:
                                #         #     GuiaDocenteSilaboSemanal.objects.filter(pk=guiadocente.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                #         if estado == 2:
                                #             # historial
                                #             for historial in guiadocente.historialaprobacionguiadocente_set.filter(status=True, estado_id__lte=2):
                                #                 historialaprobacionguiadocente = HistorialaprobacionGuiaDocente(guiadocente=guiadocente,
                                #                                                                                 estado=historial.estado,
                                #                                                                                 observacion=historial.observacion)
                                #                 historialaprobacionguiadocente.save(request)
                                # HistorialaprobacionGuiaDocente.objects.filter(pk=historialaprobacionguiadocente.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.diapositivasilabosemanal_set.filter(status=True).exists():
                                    for importadiapositiva in semanaant.diapositivasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        diapositiva = DiapositivaSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                               estado_id=estado,
                                                                               migrado=True,
                                                                               nombre=importadiapositiva.nombre,
                                                                               descripcion=importadiapositiva.descripcion,
                                                                               url=importadiapositiva.url,
                                                                               tipomaterial=importadiapositiva.tipomaterial,
                                                                               archivodiapositiva=importadiapositiva.archivodiapositiva,
                                                                               tiporecurso_id=1)
                                        diapositiva.save(request)
                                        importar = importadiapositiva
                                        # if estado == 2:
                                        #     DiapositivaSilaboSemanal.objects.filter(pk=diapositiva.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in diapositiva.historialaprobaciondiapositiva_set.filter(status=True, estado_id__lte=2):
                                                historialaprobaciondiapositiva = HistorialaprobacionDiapositiva(diapositiva=diapositiva,
                                                                                                                estado=historial.estado,
                                                                                                                observacion=historial.observacion)
                                                historialaprobaciondiapositiva.save(request)
                                                # HistorialaprobacionDiapositiva.objects.filter(pk=historialaprobaciondiapositiva.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.compendiosilabosemanal_set.filter(status=True).exists():
                                    for importacompendio in semanaant.compendiosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        compendio = CompendioSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                           estado_id=estado,
                                                                           migrado=True,
                                                                           descripcion=importacompendio.descripcion,
                                                                           archivocompendio=importacompendio.archivocompendio,
                                                                           archivo_logo=importacompendio.archivo_logo,
                                                                           archivo_sin_logo=importacompendio.archivo_sin_logo,
                                                                           tiporecurso_id=3)
                                        compendio.save(request)
                                        importar = importacompendio
                                        # if estado == 2:
                                        #     CompendioSilaboSemanal.objects.filter(pk=compendio.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in compendio.historialaprobacioncompendio_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacioncompendio = HistorialaprobacionCompendio(compendio=compendio,
                                                                                                            estado=historial.estado,
                                                                                                            observacion=historial.observacion)
                                                historialaprobacioncompendio.save(request)
                                                # HistorialaprobacionCompendio.objects.filter(pk=historialaprobacioncompendio.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                    for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                  estado_id=estado,
                                                                                  migrado=True,
                                                                                  tipomaterial=importamaterial.tipomaterial,
                                                                                  nombre=importamaterial.nombre,
                                                                                  descripcion=importamaterial.descripcion,
                                                                                  testourl=importamaterial.testourl,
                                                                                  tiporecurso=importamaterial.tiporecurso,
                                                                                  archivomaterial=importamaterial.archivomaterial,
                                                                                  tiporecursos_id=4)
                                        material.save(request)
                                        importar = importamaterial
                                        # if estado == 2:
                                        #     MaterialAdicionalSilaboSemanal.objects.filter(pk=material.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                                          estado=historial.estado,
                                                                                                          observacion=historial.observacion)
                                                historialaprobacionmaterial.save(request)
                                                # HistorialaprobacionMaterial.objects.filter(pk=historialaprobacionmaterial.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if silaboactual.materia.nivel.modalidad_id == 3:
                                    if not semanaactual.videomagistralsilabosemanal_set.filter(status=True).exists():
                                        for importavideo in semanaant.videomagistralsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                            videomagistral = VideoMagistralSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                         estado_id=2,
                                                                                         tipomaterial=importavideo.tipomaterial,
                                                                                         nombre=importavideo.nombre,
                                                                                         descripcion=importavideo.descripcion,
                                                                                         archivovideomagistral=importavideo.archivovideomagistral,
                                                                                         url=importavideo.url,
                                                                                         migrado=True,
                                                                                         tipograbacion=importavideo.tipograbacion,
                                                                                         tiporecurso=importavideo.tiporecurso,
                                                                                         urlcrai=importavideo.urlcrai,
                                                                                         tiporecursos_id=7)
                                            videomagistral.save(request)
                                            importar = importavideo
                                            # if estado == 2:
                                            #     VideoMagistralSilaboSemanal.objects.filter(pk=videomagistral.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                            if estado == 2:
                                                for historial in videomagistral.historialaprobacionvideomagistral_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobacionvideo = HistorialaprobacionVideoMagistral(material=videomagistral,
                                                                                                                 estado=historial.estado,
                                                                                                                 observacion=historial.observacion)
                                                    historialaprobacionvideo.save(request)
                                                    # HistorialaprobacionVideoMagistral.objects.filter(pk=historialaprobacionvideo.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                    for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                  estado_id=estado,
                                                                                  migrado=True,
                                                                                  tipomaterial=importamaterial.tipomaterial,
                                                                                  nombre=importamaterial.nombre,
                                                                                  descripcion=importamaterial.descripcion,
                                                                                  testourl=importamaterial.testourl,
                                                                                  tiporecurso=importamaterial.tiporecurso,
                                                                                  archivomaterial=importamaterial.archivomaterial,
                                                                                  tiporecursos_id=4)
                                        material.save(request)
                                        importar = importamaterial
                                        # if estado == 2:
                                        #     MaterialAdicionalSilaboSemanal.objects.filter(pk=material.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                                          estado=historial.estado,
                                                                                                          observacion=historial.observacion)
                                                historialaprobacionmaterial.save(request)
                                                # HistorialaprobacionMaterial.objects.filter(pk=historialaprobacionmaterial.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.tareapracticasilabosemanal_set.filter(status=True).exists():
                                    for importatarea in semanaant.tareapracticasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        tareapracticasilabosemanal = TareaPracticaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                                                                silabosemanal_id=semanaactual.id,
                                                                                                estado_id=estado,
                                                                                                calificar=importatarea.calificar,
                                                                                                nombre=importatarea.nombre,
                                                                                                # objetivo=importatarea.objetivo,
                                                                                                # instruccion=importatarea.instruccion,
                                                                                                # recomendacion=importatarea.recomendacion,
                                                                                                rubrica=importatarea.rubrica,
                                                                                                rubricamoodle=importatarea.rubricamoodle,
                                                                                                # archivorubrica=importatarea.archivorubrica,
                                                                                                archivotareapracticasilabo=importatarea.archivotareapracticasilabo,
                                                                                                fechadesde=importatarea.fechadesde,
                                                                                                fechahasta=importatarea.fechahasta,
                                                                                                word=importatarea.word,
                                                                                                pdf=importatarea.pdf,
                                                                                                excel=importatarea.excel,
                                                                                                todos=importatarea.todos,
                                                                                                detalle=importatarea.detalle,
                                                                                                # migrado=True,
                                                                                                powerpoint=importatarea.powerpoint,
                                                                                                tiporecurso_id=10)
                                        tareapracticasilabosemanal.save(request)
                                        # importar = importavideo
                                        # if estado == 2:
                                        #     VideoMagistralSilaboSemanal.objects.filter(pk=videomagistral.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            for historial in tareapracticasilabosemanal.historialaprobaciontareapractica_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionvideo = HistorialaprobacionTareaPractica(tareapractica=tareapracticasilabosemanal,
                                                                                                            estado=historial.estado,
                                                                                                            observacion=historial.observacion)
                                                historialaprobacionvideo.save(request)
                                                # HistorialaprobacionTareaPractica.objects.filter(pk=historialaprobacionvideo.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)
                                log(u'Importó el tarea practica de la semana: %s del profesor: %s al recurso de la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")

                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_recursosemana_planificada_todovdosvidm':
                try:
                    if 'idsact' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['idsant']))
                        id_periodo_ant = silaboant.materia.nivel.periodo.id
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        idcoordinacion = silaboactual.materia.asignaturamalla.malla.carrera.mi_coordinacion2()
                        id_periodo_actual = silaboactual.materia.nivel.periodo.id
                        for semanaant in silaboant.silabosemanal_set.filter(status=True).order_by('numsemana'):
                            semanaactual_aux = silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana)
                            if semanaactual_aux:
                                semanaactual = semanaactual_aux[0]
                                if not semanaactual.videomagistralsilabosemanal_set.filter(status=True).exists():
                                    for importavideo in semanaant.videomagistralsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        videomagistral = VideoMagistralSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                     estado_id=2,
                                                                                     tipomaterial=importavideo.tipomaterial,
                                                                                     nombre=importavideo.nombre,
                                                                                     descripcion=importavideo.descripcion,
                                                                                     archivovideomagistral=importavideo.archivovideomagistral,
                                                                                     url=importavideo.url,
                                                                                     migrado=True,
                                                                                     tipograbacion=importavideo.tipograbacion,
                                                                                     tiporecurso=importavideo.tiporecurso,
                                                                                     urlcrai=importavideo.urlcrai,
                                                                                     tiporecursos_id=7)
                                        videomagistral.save(request)
                                        importar = importavideo
                                        for historial in videomagistral.historialaprobacionvideomagistral_set.filter(status=True, estado_id__lte=2):
                                            historialaprobacionvideo = HistorialaprobacionVideoMagistral(material=videomagistral,
                                                                                                         estado=historial.estado,
                                                                                                         observacion=historial.observacion)
                                            historialaprobacionvideo.save(request)
                                log(u'Importó el tarea practica de la semana: %s del profesor: %s al recurso de la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")

                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_recursosemana_planificada_todovdos':
                try:
                    if 'idsact' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['idsant']))
                        id_periodo_ant = silaboant.materia.nivel.periodo.id
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        idcoordinacion = silaboactual.materia.asignaturamalla.malla.carrera.mi_coordinacion2()
                        id_periodo_actual = silaboactual.materia.nivel.periodo.id
                        estado = 1
                        # if id_periodo_ant == id_periodo_actual:
                        #     estado = 2
                        for semanaant in silaboant.silabosemanal_set.filter(status=True).order_by('numsemana'):
                            semanaactual_aux = silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana)
                            if semanaactual_aux:
                                semanaactual = semanaactual_aux[0]
                                if not semanaactual.tareasilabosemanal_set.filter(status=True).exists():
                                    for importatarea in semanaant.tareasilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                        tarea = TareaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                                   silabosemanal_id=semanaactual.id,
                                                                   estado_id=estado,
                                                                   calificar=importatarea.calificar,
                                                                   nombre=importatarea.nombre,
                                                                   objetivo=importatarea.objetivo,
                                                                   instruccion=importatarea.instruccion,
                                                                   recomendacion=importatarea.recomendacion,
                                                                   rubrica=importatarea.rubrica,
                                                                   rubricamoodle=importatarea.rubricamoodle,
                                                                   archivorubrica=importatarea.archivorubrica,
                                                                   archivotareasilabo=importatarea.archivotareasilabo,
                                                                   fechadesde=importatarea.fechadesde,
                                                                   fechahasta=importatarea.fechahasta,
                                                                   word=importatarea.word,
                                                                   pdf=importatarea.pdf,
                                                                   excel=importatarea.excel,
                                                                   todos=importatarea.todos,
                                                                   actividad=importatarea.actividad,
                                                                   migrado=True,
                                                                   powerpoint=importatarea.powerpoint,
                                                                   tiporecurso_id=5)
                                        tarea.save(request)
                                        importar = importatarea
                                        if estado == 2:
                                            for historial in importatarea.historialaprobaciontarea_set.filter(status=True, estado_id__lte=2):  # estado_id__lte=2
                                                historialaprobaciontarea = HistorialaprobacionTarea(tarea=tarea,
                                                                                                    estado=historial.estado,
                                                                                                    observacion=historial.observacion)
                                                historialaprobaciontarea.save(request)

                                if not semanaactual.forosilabosemanal_set.filter(status=True).exists():
                                    for importaforo in semanaant.forosilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                        foro = ForoSilaboSemanal(detallemodelo=importaforo.detallemodelo,
                                                                 silabosemanal_id=semanaactual.id,
                                                                 calificar=importaforo.calificar,
                                                                 tipoforo=importaforo.tipoforo,
                                                                 tipoconsolidacion=importaforo.tipoconsolidacion,
                                                                 estado_id=estado,
                                                                 nombre=importaforo.nombre,
                                                                 objetivo=importaforo.objetivo,
                                                                 instruccion=importaforo.instruccion,
                                                                 recomendacion=importaforo.recomendacion,
                                                                 rubrica=importaforo.rubrica,
                                                                 archivorubrica=importaforo.archivorubrica,
                                                                 archivoforo=importaforo.archivoforo,
                                                                 fechadesde=importaforo.fechadesde,
                                                                 migrado=True,
                                                                 fechahasta=importaforo.fechahasta,
                                                                 tiporecurso_id=9)
                                        foro.save(request)
                                        importar = importaforo
                                        if estado == 2:
                                            for historial in importaforo.historialaprobacionforo_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionforo = HistorialaprobacionForo(foro=foro,
                                                                                                  estado=historial.estado,
                                                                                                  observacion=historial.observacion)
                                                historialaprobacionforo.save(request)

                                if idcoordinacion != 9:
                                    if not semanaactual.testsilabosemanal_set.filter(status=True).exists():
                                        for importatest in semanaant.testsilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                            testsilabo = TestSilaboSemanal(detallemodelo=importatest.detallemodelo,
                                                                           silabosemanal_id=semanaactual.id,
                                                                           estado_id=estado,
                                                                           calificar=importatest.calificar,
                                                                           instruccion=importatest.instruccion,
                                                                           recomendacion=importatest.recomendacion,
                                                                           fechadesde=importatest.fechadesde,
                                                                           fechahasta=importatest.fechahasta,
                                                                           vecesintento=importatest.vecesintento,
                                                                           archivorubrica=importatest.archivorubrica,
                                                                           tiempoduracion=importatest.tiempoduracion,
                                                                           migrado=True,
                                                                           nombretest=importatest.nombretest,
                                                                           tiporecurso_id=11)
                                            testsilabo.save(request)
                                            importar = importatest
                                            if estado == 2:
                                                for historial in testsilabo.historialaprobaciontest_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobaciontest = HistorialaprobacionTest(test=testsilabo,
                                                                                                      estado=historial.estado,
                                                                                                      observacion=historial.observacion)
                                                    historialaprobaciontest.save(request)
                                                    # HistorialaprobacionTest.objects.filter(pk=historialaprobaciontest.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)
                                else:
                                    for importatest in semanaant.testsilabosemanaladmision_set.filter(status=True, estado_id__in=[5, 1, 2, 4]).order_by('titulo'):
                                        if not semanaactual.testsilabosemanaladmision_set.filter(status=True, titulo=importatest.titulo).exists():
                                            testsilabo = TestSilaboSemanalAdmision(silabosemanal_id=semanaactual.id,
                                                                                   estado_id=estado,
                                                                                   titulo=importatest.titulo,
                                                                                   descripcion=importatest.descripcion,
                                                                                   # url1=importatest.url1,
                                                                                   # url2=importatest.url2,
                                                                                   fecha=importatest.fecha,
                                                                                   horainicio=importatest.horainicio,
                                                                                   horafin=importatest.horafin,
                                                                                   detallemodelo=importatest.detallemodelo,
                                                                                   fechadesde=importatest.fechadesde,
                                                                                   fechahasta=importatest.fechahasta,
                                                                                   vecesintento=importatest.vecesintento,
                                                                                   tiempoduracion=importatest.tiempoduracion,
                                                                                   calificar=importatest.calificar,
                                                                                   navegacion=importatest.navegacion,
                                                                                   esquemapregunta=importatest.esquemapregunta)
                                            testsilabo.save(request)
                                            importar = importatest
                                            if estado == 2:
                                                for historial in testsilabo.historialaprobaciontestadmision_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobaciontest = HistorialaprobacionTestAdmision(test=testsilabo,
                                                                                                              estado=historial.estado,
                                                                                                              observacion=historial.observacion)
                                                    historialaprobaciontest.save(request)

                                if silaboactual.materia.nivel.modalidad_id == 3:
                                    if not semanaactual.videomagistralsilabosemanal_set.filter(status=True).exists():
                                        for importavideo in semanaant.videomagistralsilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                            videomagistral = VideoMagistralSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                         estado_id=2,
                                                                                         tipomaterial=importavideo.tipomaterial,
                                                                                         nombre=importavideo.nombre,
                                                                                         descripcion=importavideo.descripcion,
                                                                                         archivovideomagistral=importavideo.archivovideomagistral,
                                                                                         url=importavideo.url,
                                                                                         migrado=True,
                                                                                         tipograbacion=importavideo.tipograbacion,
                                                                                         tiporecurso=importavideo.tiporecurso,
                                                                                         urlcrai=importavideo.urlcrai,
                                                                                         tiporecursos_id=7)
                                            videomagistral.save(request)
                                            importar = importavideo
                                            for historial in videomagistral.historialaprobacionvideomagistral_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionvideo = HistorialaprobacionVideoMagistral(material=videomagistral,
                                                                                                             estado=historial.estado,
                                                                                                             observacion=historial.observacion)
                                                historialaprobacionvideo.save(request)

                                    if not semanaactual.guiaestudiantesilabosemanal_set.filter(status=True).exists():
                                        for importaguiaes in semanaant.guiaestudiantesilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                            guiaestudiante = GuiaEstudianteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                         estado_id=estado,
                                                                                         migrado=True,
                                                                                         observacion=importaguiaes.observacion,
                                                                                         archivoguiaestudiante=importaguiaes.archivoguiaestudiante,
                                                                                         archivo_logo=importaguiaes.archivo_logo,
                                                                                         archivo_sin_logo=importaguiaes.archivo_sin_logo,
                                                                                         tiporecurso_id=2)
                                            guiaestudiante.save(request)
                                            importar = importaguiaes
                                            if estado == 2:
                                                for historial in guiaestudiante.historialaprobacionguiaestudiante_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobacionguiaestudiante = HistorialaprobacionGuiaEstudiante(guiaestudiante=guiaestudiante,
                                                                                                                          estado=historial.estado,
                                                                                                                          observacion=historial.observacion)
                                                    historialaprobacionguiaestudiante.save(request)
                                                    # HistorialaprobacionGuiaEstudiante.objects.filter(pk=historialaprobacionguiaestudiante.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                # if not semanaactual.guiadocentesilabosemanal_set.filter(status=True).exists():
                                #     for importaguiado in semanaant.guiadocentesilabosemanal_set.filter(status=True, estado_id__in=[2,4]):
                                #         guiadocente = GuiaDocenteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                #                                                estado_id=estado,
                                #                                                migrado=True,
                                #                                                observacion=importaguiado.observacion,
                                #                                                archivoguiadocente=importaguiado.archivoguiadocente,
                                #                                                tiporecurso_id=8)
                                #         guiadocente.save(request)
                                #         importar = importaguiado
                                #         if estado == 2:
                                #             for historial in guiadocente.historialaprobacionguiadocente_set.filter(status=True, estado_id__lte=2):
                                #                 historialaprobacionguiadocente = HistorialaprobacionGuiaDocente(guiadocente=guiadocente,
                                #                                                                                 estado=historial.estado,
                                #                                                                                 observacion=historial.observacion)
                                #                 historialaprobacionguiadocente.save(request)

                                if not semanaactual.diapositivasilabosemanal_set.filter(status=True).exists():
                                    for importadiapositiva in semanaant.diapositivasilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                        diapositiva = DiapositivaSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                               estado_id=estado,
                                                                               migrado=True,
                                                                               nombre=importadiapositiva.nombre,
                                                                               descripcion=importadiapositiva.descripcion,
                                                                               url=importadiapositiva.url,
                                                                               tipomaterial=importadiapositiva.tipomaterial,
                                                                               archivodiapositiva=importadiapositiva.archivodiapositiva,
                                                                               tiporecurso_id=1)
                                        diapositiva.save(request)
                                        importar = importadiapositiva
                                        if estado == 2:
                                            for historial in diapositiva.historialaprobaciondiapositiva_set.filter(status=True, estado_id__lte=2):
                                                historialaprobaciondiapositiva = HistorialaprobacionDiapositiva(diapositiva=diapositiva,
                                                                                                                estado=historial.estado,
                                                                                                                observacion=historial.observacion)
                                                historialaprobaciondiapositiva.save(request)

                                if not semanaactual.compendiosilabosemanal_set.filter(status=True).exists():
                                    for importacompendio in semanaant.compendiosilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                        compendio = CompendioSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                           estado_id=estado,
                                                                           migrado=True,
                                                                           descripcion=importacompendio.descripcion,
                                                                           archivocompendio=importacompendio.archivocompendio,
                                                                           archivo_logo=importacompendio.archivo_logo,
                                                                           archivo_sin_logo=importacompendio.archivo_sin_logo,
                                                                           archivoplagio=importacompendio.archivoplagio,
                                                                           tiporecurso_id=3)
                                        compendio.save(request)
                                        importar = importacompendio
                                        if estado == 2:
                                            for historial in compendio.historialaprobacioncompendio_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacioncompendio = HistorialaprobacionCompendio(compendio=compendio,
                                                                                                            estado=historial.estado,
                                                                                                            observacion=historial.observacion)
                                                historialaprobacioncompendio.save(request)

                                # if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                #     for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                #         material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                #                                                   estado_id=estado,
                                #                                                   migrado=True,
                                #                                                   tipomaterial=importamaterial.tipomaterial,
                                #                                                   nombre=importamaterial.nombre,
                                #                                                   descripcion=importamaterial.descripcion,
                                #                                                   testourl=importamaterial.testourl,
                                #                                                   tiporecurso=importamaterial.tiporecurso,
                                #                                                   archivomaterial=importamaterial.archivomaterial,
                                #                                                   tiporecursos_id=4)
                                #         material.save(request)
                                #         importar = importamaterial
                                #         if estado == 2:
                                #             for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                #                 historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                #                                                                           estado=historial.estado,
                                #                                                                           observacion=historial.observacion)
                                #                 historialaprobacionmaterial.save(request)

                                if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                    for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                        material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                  estado_id=estado,
                                                                                  migrado=True,
                                                                                  tipomaterial=importamaterial.tipomaterial,
                                                                                  nombre=importamaterial.nombre,
                                                                                  descripcion=importamaterial.descripcion,
                                                                                  testourl=importamaterial.testourl,
                                                                                  tiporecurso=importamaterial.tiporecurso,
                                                                                  archivomaterial=importamaterial.archivomaterial,
                                                                                  tiporecursos_id=4)
                                        material.save(request)
                                        importar = importamaterial
                                        if estado == 2:
                                            for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                                          estado=historial.estado,
                                                                                                          observacion=historial.observacion)
                                                historialaprobacionmaterial.save(request)

                                if not semanaactual.tareapracticasilabosemanal_set.filter(status=True).exists():
                                    if not semanaactual.gpguiapracticasemanal_set.filter(status=True).exists():
                                        for importaguia in semanaant.gpguiapracticasemanal_set.filter(status=True):
                                            guiapracticasilabosemanal = GPGuiaPracticaSemanal(silabosemanal_id=semanaactual.id,
                                                                                              numeropractica=importaguia.numeropractica,
                                                                                              tiempoactividad=importaguia.tiempoactividad,
                                                                                              fechaelaboracion=importaguia.fechaelaboracion,
                                                                                              individual=importaguia.individual,
                                                                                              grupo=importaguia.grupo,
                                                                                              cantidadalumnogrupo=importaguia.cantidadalumnogrupo,
                                                                                              objetvopactica=importaguia.objetvopactica,
                                                                                              actividaddesarrollar=importaguia.actividaddesarrollar,
                                                                                              rubica=importaguia.rubica,
                                                                                              calificar=importaguia.calificar,
                                                                                              calificarmax=importaguia.calificarmax,
                                                                                              calificarmin=importaguia.calificarmin,
                                                                                              cerrada=importaguia.cerrada,
                                                                                              registrado=importaguia.registrado,
                                                                                              laboratorio=importaguia.laboratorio,
                                                                                              nombrepractica=importaguia.nombrepractica,
                                                                                              asistida=importaguia.asistida,
                                                                                              noasistida=importaguia.noasistida,
                                                                                              tipoambiente=importaguia.tipoambiente,
                                                                                              nombreambiente=importaguia.nombreambiente,
                                                                                              ubicacionambiente=importaguia.ubicacionambiente,
                                                                                              unidad=importaguia.unidad)
                                            guiapracticasilabosemanal.save(request)
                                            if GPObjetivo.objects.filter(guiasemanal=importaguia, status=True):
                                                listadoobjetivo = GPObjetivo.objects.filter(guiasemanal=importaguia, status=True)
                                                for objetivo in listadoobjetivo:
                                                    objetivoguia = GPObjetivo(guiasemanal=guiapracticasilabosemanal,
                                                                              nombre=objetivo.nombre)
                                                    objetivoguia.save(request)
                                            if GPInstruccion.objects.filter(guiasemanal=importaguia, status=True):
                                                instruccion = GPInstruccion.objects.get(pk=GPInstruccion.objects.filter(guiasemanal=importaguia, status=True)[0].id, status=True)
                                                instruccionimporta = GPInstruccion(guiasemanal=guiapracticasilabosemanal,
                                                                                   observacion=instruccion.observacion)
                                                instruccionimporta.save(request)

                                log(u'Importó el tarea practica de la semana: %s del profesor: %s al recurso de la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")

                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_recursos_planificada_todo':
                try:
                    if 'idsact' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['idsant']))
                        id_periodo_ant = silaboant.materia.nivel.periodo.id
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        id_periodo_actual = silaboactual.materia.nivel.periodo.id
                        estado = 1
                        if id_periodo_ant == id_periodo_actual:
                            estado = 2
                        for semanaant in silaboant.silabosemanal_set.filter(status=True).order_by('numsemana'):
                            semanaactual_aux = silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana)
                            if semanaactual_aux:
                                semanaactual = semanaactual_aux[0]
                                if not semanaactual.guiaestudiantesilabosemanal_set.filter(status=True).exists():
                                    for importaguiaes in semanaant.guiaestudiantesilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        guiaestudiante = GuiaEstudianteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                     estado_id=estado,
                                                                                     migrado=True,
                                                                                     observacion=importaguiaes.observacion,
                                                                                     archivoguiaestudiante=importaguiaes.archivoguiaestudiante,
                                                                                     archivo_logo=importaguiaes.archivo_logo,
                                                                                     archivo_sin_logo=importaguiaes.archivo_sin_logo,
                                                                                     tiporecurso_id=2)
                                        guiaestudiante.save(request)
                                        if estado == 2:
                                            for historial in guiaestudiante.historialaprobacionguiaestudiante_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionguiaestudiante = HistorialaprobacionGuiaEstudiante(guiaestudiante=guiaestudiante,
                                                                                                                      estado=historial.estado,
                                                                                                                      observacion=historial.observacion)
                                                historialaprobacionguiaestudiante.save(request)
                                                # HistorialaprobacionGuiaEstudiante.objects.filter(pk=historialaprobacionguiaestudiante.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                # if not semanaactual.guiadocentesilabosemanal_set.filter(status=True).exists():
                                #     for importaguiado in semanaant.guiadocentesilabosemanal_set.filter(status=True, estado_id__in=[2,4]):
                                #         guiadocente = GuiaDocenteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                #                                                estado_id=estado,
                                #                                                migrado=True,
                                #                                                observacion=importaguiado.observacion,
                                #                                                archivoguiadocente=importaguiado.archivoguiadocente,
                                #                                                tiporecurso_id=8)
                                #         guiadocente.save(request)
                                #         importar = importaguiado
                                #         if estado == 2:
                                #             for historial in guiadocente.historialaprobacionguiadocente_set.filter(status=True, estado_id__lte=2):
                                #                 historialaprobacionguiadocente = HistorialaprobacionGuiaDocente(guiadocente=guiadocente,
                                #                                                                                 estado=historial.estado,
                                #                                                                                 observacion=historial.observacion)
                                #                 historialaprobacionguiadocente.save(request)

                                if not semanaactual.diapositivasilabosemanal_set.filter(status=True).exists():
                                    for importadiapositiva in semanaant.diapositivasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        diapositiva = DiapositivaSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                               estado_id=estado,
                                                                               migrado=True,
                                                                               nombre=importadiapositiva.nombre,
                                                                               descripcion=importadiapositiva.descripcion,
                                                                               url=importadiapositiva.url,
                                                                               tipomaterial=importadiapositiva.tipomaterial,
                                                                               archivodiapositiva=importadiapositiva.archivodiapositiva,
                                                                               tiporecurso_id=1)
                                        diapositiva.save(request)
                                        importar = importadiapositiva
                                        if estado == 2:
                                            for historial in diapositiva.historialaprobaciondiapositiva_set.filter(status=True, estado_id__lte=2):
                                                historialaprobaciondiapositiva = HistorialaprobacionDiapositiva(diapositiva=diapositiva,
                                                                                                                estado=historial.estado,
                                                                                                                observacion=historial.observacion)
                                                historialaprobaciondiapositiva.save(request)

                                if not semanaactual.compendiosilabosemanal_set.filter(status=True).exists():
                                    for importacompendio in semanaant.compendiosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        compendio = CompendioSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                           estado_id=2,
                                                                           migrado=True,
                                                                           descripcion=importacompendio.descripcion,
                                                                           archivocompendio=importacompendio.archivocompendio,
                                                                           archivo_logo=importacompendio.archivo_logo,
                                                                           archivo_sin_logo=importacompendio.archivo_sin_logo,
                                                                           archivoplagio=importacompendio.archivoplagio,
                                                                           tiporecurso_id=3)
                                        compendio.save(request)
                                        importar = importacompendio
                                        if estado == 2:
                                            for historial in compendio.historialaprobacioncompendio_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacioncompendio = HistorialaprobacionCompendio(compendio=compendio,
                                                                                                            estado=historial.estado,
                                                                                                            observacion=historial.observacion)
                                                historialaprobacioncompendio.save(request)

                                if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                    for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                  estado_id=estado,
                                                                                  migrado=True,
                                                                                  tipomaterial=importamaterial.tipomaterial,
                                                                                  nombre=importamaterial.nombre,
                                                                                  descripcion=importamaterial.descripcion,
                                                                                  testourl=importamaterial.testourl,
                                                                                  tiporecurso=importamaterial.tiporecurso,
                                                                                  archivomaterial=importamaterial.archivomaterial,
                                                                                  tiporecursos_id=4)
                                        material.save(request)
                                        importar = importamaterial
                                        if estado == 2:
                                            for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                                          estado=historial.estado,
                                                                                                          observacion=historial.observacion)
                                                historialaprobacionmaterial.save(request)

                                if silaboactual.materia.nivel.modalidad_id == 3:
                                    if not semanaactual.videomagistralsilabosemanal_set.filter(status=True).exists():
                                        for importavideo in semanaant.videomagistralsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                            videomagistral = VideoMagistralSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                         estado_id=2,
                                                                                         tipomaterial=importavideo.tipomaterial,
                                                                                         nombre=importavideo.nombre,
                                                                                         descripcion=importavideo.descripcion,
                                                                                         archivovideomagistral=importavideo.archivovideomagistral,
                                                                                         url=importavideo.url,
                                                                                         migrado=True,
                                                                                         tipograbacion=importavideo.tipograbacion,
                                                                                         tiporecurso=importavideo.tiporecurso,
                                                                                         urlcrai=importavideo.urlcrai,
                                                                                         tiporecursos_id=7)
                                            videomagistral.save(request)
                                            importar = importavideo
                                            if estado == 2:
                                                for historial in videomagistral.historialaprobacionvideomagistral_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobacionvideo = HistorialaprobacionVideoMagistral(material=videomagistral,
                                                                                                                 estado=historial.estado,
                                                                                                                 observacion=historial.observacion)
                                                    historialaprobacionvideo.save(request)

                                # if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                #     for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2,4]):
                                #         material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                #                                                   estado_id=estado,
                                #                                                   migrado=True,
                                #                                                   tipomaterial=importamaterial.tipomaterial,
                                #                                                   nombre=importamaterial.nombre,
                                #                                                   descripcion=importamaterial.descripcion,
                                #                                                   testourl=importamaterial.testourl,
                                #                                                   tiporecurso=importamaterial.tiporecurso,
                                #                                                   archivomaterial=importamaterial.archivomaterial,
                                #                                                   tiporecursos_id=4)
                                #         material.save(request)
                                #         importar = importamaterial
                                #         if estado == 2:
                                #             for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                #                 historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                #                                                                           estado=historial.estado,
                                #                                                                           observacion=historial.observacion)
                                #                 historialaprobacionmaterial.save(request)

                                log(u'Importó recursos  de la semana: %s del profesor: %s al la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")

                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_actividadsemana_planificada_todovdos':
                try:
                    if 'idsact' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['idsant']))
                        id_periodo_ant = silaboant.materia.nivel.periodo.id
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        id_periodo_actual = silaboactual.materia.nivel.periodo.id
                        estado = 1
                        if id_periodo_ant == id_periodo_actual:
                            estado = 2
                        for semanaant in silaboant.silabosemanal_set.filter(status=True).order_by('numsemana'):
                            semanaactual_aux = silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana)
                            if semanaactual_aux:
                                semanaactual = semanaactual_aux[0]
                                if not semanaactual.tareasilabosemanal_set.filter(status=True).exists():
                                    for importatarea in semanaant.tareasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        tarea = TareaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                                   silabosemanal_id=semanaactual.id,
                                                                   estado_id=estado,
                                                                   calificar=importatarea.calificar,
                                                                   nombre=importatarea.nombre,
                                                                   objetivo=importatarea.objetivo,
                                                                   instruccion=importatarea.instruccion,
                                                                   recomendacion=importatarea.recomendacion,
                                                                   rubrica=importatarea.rubrica,
                                                                   rubricamoodle=importatarea.rubricamoodle,
                                                                   archivorubrica=importatarea.archivorubrica,
                                                                   archivotareasilabo=importatarea.archivotareasilabo,
                                                                   fechadesde=importatarea.fechadesde,
                                                                   fechahasta=importatarea.fechahasta,
                                                                   word=importatarea.word,
                                                                   pdf=importatarea.pdf,
                                                                   excel=importatarea.excel,
                                                                   todos=importatarea.todos,
                                                                   actividad=importatarea.actividad,
                                                                   migrado=True,
                                                                   powerpoint=importatarea.powerpoint,
                                                                   tiporecurso_id=5)
                                        tarea.save(request)
                                        importar = importatarea
                                        if estado == 2:
                                            for historial in importatarea.historialaprobaciontarea_set.filter(status=True, estado_id__lte=2):  # estado_id__lte=2
                                                historialaprobaciontarea = HistorialaprobacionTarea(tarea=tarea,
                                                                                                    estado=historial.estado,
                                                                                                    observacion=historial.observacion)
                                                historialaprobaciontarea.save(request)

                                if not semanaactual.forosilabosemanal_set.filter(status=True).exists():
                                    for importaforo in semanaant.forosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        foro = ForoSilaboSemanal(detallemodelo=importaforo.detallemodelo,
                                                                 silabosemanal_id=semanaactual.id,
                                                                 calificar=importaforo.calificar,
                                                                 tipoforo=importaforo.tipoforo,
                                                                 tipoconsolidacion=importaforo.tipoconsolidacion,
                                                                 estado_id=estado,
                                                                 nombre=importaforo.nombre,
                                                                 objetivo=importaforo.objetivo,
                                                                 instruccion=importaforo.instruccion,
                                                                 recomendacion=importaforo.recomendacion,
                                                                 rubrica=importaforo.rubrica,
                                                                 archivorubrica=importaforo.archivorubrica,
                                                                 archivoforo=importaforo.archivoforo,
                                                                 fechadesde=importaforo.fechadesde,
                                                                 migrado=True,
                                                                 fechahasta=importaforo.fechahasta,
                                                                 tiporecurso_id=9)
                                        foro.save(request)
                                        importar = importaforo
                                        if estado == 2:
                                            for historial in importaforo.historialaprobacionforo_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionforo = HistorialaprobacionForo(foro=foro,
                                                                                                  estado=historial.estado,
                                                                                                  observacion=historial.observacion)
                                                historialaprobacionforo.save(request)

                                if not semanaactual.testsilabosemanal_set.filter(status=True).exists():
                                    for importatest in semanaant.testsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        testsilabo = TestSilaboSemanal(detallemodelo=importatest.detallemodelo,
                                                                       silabosemanal_id=semanaactual.id,
                                                                       estado_id=estado,
                                                                       calificar=importatest.calificar,
                                                                       instruccion=importatest.instruccion,
                                                                       recomendacion=importatest.recomendacion,
                                                                       fechadesde=importatest.fechadesde,
                                                                       fechahasta=importatest.fechahasta,
                                                                       vecesintento=importatest.vecesintento,
                                                                       archivorubrica=importatest.archivorubrica,
                                                                       tiempoduracion=importatest.tiempoduracion,
                                                                       migrado=True,
                                                                       nombretest=importatest.nombretest,
                                                                       tiporecurso_id=11)
                                        testsilabo.save(request)
                                        importar = importatest
                                        if estado == 2:
                                            for historial in testsilabo.historialaprobaciontest_set.filter(status=True, estado_id__lte=2):
                                                historialaprobaciontest = HistorialaprobacionTest(test=testsilabo,
                                                                                                  estado=historial.estado,
                                                                                                  observacion=historial.observacion)
                                                historialaprobaciontest.save(request)

                                if not semanaactual.tareapracticasilabosemanal_set.filter(status=True).exists():
                                    for importatarea in semanaant.tareapracticasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        tareapracticasilabosemanal = TareaPracticaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                                                                silabosemanal_id=semanaactual.id,
                                                                                                estado_id=estado,
                                                                                                calificar=importatarea.calificar,
                                                                                                nombre=importatarea.nombre,
                                                                                                # objetivo=importatarea.objetivo,
                                                                                                # instruccion=importatarea.instruccion,
                                                                                                # recomendacion=importatarea.recomendacion,
                                                                                                rubrica=importatarea.rubrica,
                                                                                                rubricamoodle=importatarea.rubricamoodle,
                                                                                                # archivorubrica=importatarea.archivorubrica,
                                                                                                archivotareapracticasilabo=importatarea.archivotareapracticasilabo,
                                                                                                fechadesde=importatarea.fechadesde,
                                                                                                fechahasta=importatarea.fechahasta,
                                                                                                word=importatarea.word,
                                                                                                pdf=importatarea.pdf,
                                                                                                excel=importatarea.excel,
                                                                                                todos=importatarea.todos,
                                                                                                detalle=importatarea.detalle,
                                                                                                # migrado=True,
                                                                                                powerpoint=importatarea.powerpoint,
                                                                                                tiporecurso_id=10)
                                        tareapracticasilabosemanal.save(request)
                                        if estado == 2:
                                            for historial in tareapracticasilabosemanal.historialaprobaciontareapractica_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionvideo = HistorialaprobacionTareaPractica(tareapractica=tareapracticasilabosemanal,
                                                                                                            estado=historial.estado,
                                                                                                            observacion=historial.observacion)
                                                historialaprobacionvideo.save(request)
                                log(u'Importó actividades de la semana: %s del profesor: %s a la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")

                        reordenaforos = 0
                        for listareorden in TestSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'TEST_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in ForoSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'FORO_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in TareaSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True, actividad_id=2).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'EXPOSICIÓN_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in TareaSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True, actividad_id=3).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'TALLER_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in TareaSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True, actividad_id=5).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'TAREA_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in TareaSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True, actividad_id=7).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'TRABAJO DE INVESTIGACIÓN_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in TareaSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True, actividad_id=8).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'ANÁLISIS DE CASOS_' + str(reordenaforos)
                            listareorden.save(request)
                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'planificacion_recursosemanal_importar':
                lista = []
                try:
                    if 'idsant' in request.POST:
                        data['idsact'] = request.POST['idsact']
                        data['idsemanal'] = request.POST['idsemanal']
                        data['semana'] = request.POST['semana']
                        data['numsemana'] = request.POST['numsemana']
                        data['fini'] = request.POST['fini']
                        data['ffin'] = request.POST['ffin']
                        silabo = Silabo.objects.get(status=True, pk=int(request.POST['idsant']))
                        for semana in silabo.silabosemanal_set.filter(status=True).order_by('numsemana', 'fechainiciosemana'):
                            listabibliografiacomplementaria = []
                            for biblic in semana.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                                listabibliografiacomplementaria.append([str(biblic.librokohaprogramaanaliticoasignatura)])
                            listabibliografiabasica = []
                            for biblib in semana.detallesilabosemanalbibliografia_set.filter(status=True):
                                listabibliografiabasica.append([str(biblib)])
                            lista.append([semana.silabo.id, semana.id, str(semana.fechainiciosemana.strftime("%Y/%m/%d")), str(semana.fechafinciosemana.strftime("%Y/%m/%d")), semana, listabibliografiabasica, listabibliografiacomplementaria, str(semana.objetivoaprendizaje), str(semana.enfoque), str(semana.recursos), str(semana.evaluacion), str(semana.numsemana)])
                    data['semanas'] = lista
                    template = get_template("pro_planificacion/planificacion_recursosemanal.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'duplicar_recursossilabo_otro_periodo':
                try:
                    data['title'] = u'Recursos de sílabos que puede importar de otros periodos'
                    listaperiodo = []
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.POST['ids'])))
                    # data['periodos'] = Periodo.objects.filter(status=True, pk__in=silabo.lista_periodos_silabos()).exclude(tipo_id=3).order_by('-inicio')
                    data['periodos'] = Periodo.objects.filter(pk__gte=110, status=True).exclude(tipo_id__in=[3, 4]).order_by('-inicio')
                    data['semana'] = request.POST['semana']
                    data['idsemanal'] = request.POST['idsemanal']
                    data['numsemana'] = request.POST['numsemana']
                    data['fini'] = str(request.POST['fini'])
                    data['ffin'] = str(request.POST['ffin'])
                    data['idsact'] = silabo.id
                    template = get_template("pro_planificacion/importarrecursossilaboperiodo.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'duplicar_recursossilabo_otro_periodo_todo':
                try:
                    data['title'] = u'Recursos de sílabos que puede importar de otros periodos'
                    listaperiodo = []
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.POST['ids'])))
                    # data['periodos'] = Periodo.objects.filter(status=True, pk__in=silabo.lista_periodos_silabos()).exclude(tipo_id=3).order_by('-inicio')
                    data['periodos'] = Periodo.objects.filter(pk__gte=95, status=True).exclude(tipo_id__in=[3, 4]).order_by('-inicio')
                    data['idsact'] = silabo.id
                    template = get_template("pro_planificacion/importarrecursossilaboperiodotodo.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'duplicar_recursossilabovdos_otro_periodo_todo':
                try:
                    data['title'] = u'Recursos de sílabos que puede importar de otros periodos'
                    listaperiodo = []
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.POST['ids'])))
                    # data['periodos'] = Periodo.objects.filter(status=True, pk__in=silabo.lista_periodos_silabos()).exclude(tipo_id=3).order_by('-inicio')
                    data['idsact'] = silabo.id
                    tipo = int(request.POST['tipo'])
                    if tipo == 1:
                        data['periodos'] = Periodo.objects.filter(Q(pk=silabo.materia.nivel.periodo.id) | Q(id=131)).exclude(tipo_id__in=[3, 4]).order_by('-inicio')
                    else:
                        data['periodos'] = Periodo.objects.filter(Q(pk__gte=95) | Q(id=131), status=True).exclude(tipo_id__in=[3, 4]).order_by('-inicio')
                    if tipo == 1:
                        template = get_template("pro_planificacion/importarrecursossilaboperiodotodovdos.html")
                    if tipo == 2:
                        template = get_template("pro_planificacion/importarsolorecursos.html")
                    if tipo == 3:
                        template = get_template("pro_planificacion/importarsoloactividades.html")
                    if tipo == 4:
                        data['periodos'] = Periodo.objects.filter(pk__gte=95, pk__lte=silabo.materia.nivel.periodo.id, tipo=silabo.materia.nivel.periodo.tipo, status=True).exclude(tipo_id__in=[3, 4]).order_by('-inicio')
                        template = get_template("pro_planificacion/importarsolovideomagistral.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'replicar':
                try:
                    data['title'] = u'Recursos de sílabos que puede importar en el mimso periodo'
                    listaperiodo = []
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.POST['ids'])))
                    data['idsact'] = silabo.id
                    tipo = int(request.POST['tipo'])
                    data['listadosilabos'] = Silabo.objects.filter(materia__profesormateria__profesor=profesor, materia__nivel__periodo_id=silabo.materia.nivel.periodo.id, materia__asignaturamalla__asignatura_id=silabo.materia.asignaturamalla.asignatura.id, status=True).exclude(pk=silabo.id)
                    template = get_template("pro_planificacion/replicarrecursos.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'replicarecursos':
                try:
                    if 'idsact' in request.POST:
                        silaboant = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        idcoordinacion = silaboant.materia.asignaturamalla.malla.carrera.mi_coordinacion2()
                        id_periodo_actual = silaboant.materia.nivel.periodo.id
                        idlistasilabos = request.POST['lista'].split(',')
                        for elemento in idlistasilabos:
                            silaboactual = Silabo.objects.get(pk=elemento)
                            estado = 1
                            for semanaant in silaboant.silabosemanal_set.filter(status=True).order_by('numsemana'):
                                semanaactual_aux = silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana)
                                if semanaactual_aux:
                                    semanaactual = semanaactual_aux[0]
                                    if not semanaactual.tareasilabosemanal_set.filter(status=True).exists():
                                        for importatarea in semanaant.tareasilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                            tarea = TareaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                                       silabosemanal_id=semanaactual.id,
                                                                       estado_id=estado,
                                                                       calificar=importatarea.calificar,
                                                                       nombre=importatarea.nombre,
                                                                       objetivo=importatarea.objetivo,
                                                                       instruccion=importatarea.instruccion,
                                                                       recomendacion=importatarea.recomendacion,
                                                                       rubrica=importatarea.rubrica,
                                                                       rubricamoodle=importatarea.rubricamoodle,
                                                                       archivorubrica=importatarea.archivorubrica,
                                                                       archivotareasilabo=importatarea.archivotareasilabo,
                                                                       fechadesde=importatarea.fechadesde,
                                                                       fechahasta=importatarea.fechahasta,
                                                                       word=importatarea.word,
                                                                       pdf=importatarea.pdf,
                                                                       excel=importatarea.excel,
                                                                       todos=importatarea.todos,
                                                                       actividad=importatarea.actividad,
                                                                       migrado=True,
                                                                       powerpoint=importatarea.powerpoint,
                                                                       tiporecurso_id=5)
                                            tarea.save(request)
                                            importar = importatarea
                                            if estado == 2:
                                                for historial in importatarea.historialaprobaciontarea_set.filter(status=True, estado_id__lte=2):  # estado_id__lte=2
                                                    historialaprobaciontarea = HistorialaprobacionTarea(tarea=tarea,
                                                                                                        estado=historial.estado,
                                                                                                        observacion=historial.observacion)
                                                    historialaprobaciontarea.save(request)

                                    if not semanaactual.forosilabosemanal_set.filter(status=True).exists():
                                        for importaforo in semanaant.forosilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                            foro = ForoSilaboSemanal(detallemodelo=importaforo.detallemodelo,
                                                                     silabosemanal_id=semanaactual.id,
                                                                     calificar=importaforo.calificar,
                                                                     tipoforo=importaforo.tipoforo,
                                                                     tipoconsolidacion=importaforo.tipoconsolidacion,
                                                                     estado_id=estado,
                                                                     nombre=importaforo.nombre,
                                                                     objetivo=importaforo.objetivo,
                                                                     instruccion=importaforo.instruccion,
                                                                     recomendacion=importaforo.recomendacion,
                                                                     rubrica=importaforo.rubrica,
                                                                     archivorubrica=importaforo.archivorubrica,
                                                                     archivoforo=importaforo.archivoforo,
                                                                     fechadesde=importaforo.fechadesde,
                                                                     migrado=True,
                                                                     fechahasta=importaforo.fechahasta,
                                                                     tiporecurso_id=9)
                                            foro.save(request)
                                            importar = importaforo
                                            if estado == 2:
                                                for historial in importaforo.historialaprobacionforo_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobacionforo = HistorialaprobacionForo(foro=foro,
                                                                                                      estado=historial.estado,
                                                                                                      observacion=historial.observacion)
                                                    historialaprobacionforo.save(request)

                                    if idcoordinacion != 9:
                                        if not semanaactual.testsilabosemanal_set.filter(status=True).exists():
                                            for importatest in semanaant.testsilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                                testsilabo = TestSilaboSemanal(detallemodelo=importatest.detallemodelo,
                                                                               silabosemanal_id=semanaactual.id,
                                                                               estado_id=estado,
                                                                               calificar=importatest.calificar,
                                                                               instruccion=importatest.instruccion,
                                                                               recomendacion=importatest.recomendacion,
                                                                               fechadesde=importatest.fechadesde,
                                                                               fechahasta=importatest.fechahasta,
                                                                               vecesintento=importatest.vecesintento,
                                                                               archivorubrica=importatest.archivorubrica,
                                                                               tiempoduracion=importatest.tiempoduracion,
                                                                               migrado=True,
                                                                               nombretest=importatest.nombretest,
                                                                               tiporecurso_id=11)
                                                testsilabo.save(request)
                                                importar = importatest
                                                if estado == 2:
                                                    for historial in testsilabo.historialaprobaciontest_set.filter(status=True, estado_id__lte=2):
                                                        historialaprobaciontest = HistorialaprobacionTest(test=testsilabo,
                                                                                                          estado=historial.estado,
                                                                                                          observacion=historial.observacion)
                                                        historialaprobaciontest.save(request)
                                    else:
                                        if not semanaactual.testsilabosemanaladmision_set.filter(status=True).exists():
                                            for importatest in semanaant.testsilabosemanaladmision_set.filter(status=True, estado_id__in=[1, 5, 2, 4]).order_by('titulo'):
                                                testsilabo = TestSilaboSemanalAdmision(silabosemanal_id=semanaactual.id,
                                                                                       estado_id=estado,
                                                                                       titulo=importatest.titulo,
                                                                                       descripcion=importatest.descripcion,
                                                                                       # url1=importatest.url1,
                                                                                       # url2=importatest.url2,
                                                                                       fecha=importatest.fecha,
                                                                                       horainicio=importatest.horainicio,
                                                                                       horafin=importatest.horafin,
                                                                                       detallemodelo=importatest.detallemodelo,
                                                                                       fechadesde=importatest.fechadesde,
                                                                                       fechahasta=importatest.fechahasta,
                                                                                       vecesintento=importatest.vecesintento,
                                                                                       tiempoduracion=importatest.tiempoduracion,
                                                                                       calificar=importatest.calificar,
                                                                                       navegacion=importatest.navegacion,
                                                                                       esquemapregunta=importatest.esquemapregunta)
                                                testsilabo.save(request)
                                                importar = importatest
                                                if estado == 2:
                                                    for historial in testsilabo.historialaprobaciontestadmision_set.filter(status=True, estado_id__lte=2):
                                                        historialaprobaciontest = HistorialaprobacionTestAdmision(test=testsilabo,
                                                                                                                  estado=historial.estado,
                                                                                                                  observacion=historial.observacion)
                                                        historialaprobaciontest.save(request)

                                    if silaboactual.materia.nivel.modalidad_id == 3:
                                        if not semanaactual.videomagistralsilabosemanal_set.filter(status=True).exists():
                                            for importavideo in semanaant.videomagistralsilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                                videomagistral = VideoMagistralSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                             estado_id=2,
                                                                                             tipomaterial=importavideo.tipomaterial,
                                                                                             nombre=importavideo.nombre,
                                                                                             descripcion=importavideo.descripcion,
                                                                                             archivovideomagistral=importavideo.archivovideomagistral,
                                                                                             url=importavideo.url,
                                                                                             migrado=True,
                                                                                             tipograbacion=importavideo.tipograbacion,
                                                                                             tiporecurso=importavideo.tiporecurso,
                                                                                             urlcrai=importavideo.urlcrai,
                                                                                             tiporecursos_id=7)
                                                videomagistral.save(request)
                                                importar = importavideo
                                                for historial in videomagistral.historialaprobacionvideomagistral_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobacionvideo = HistorialaprobacionVideoMagistral(material=videomagistral,
                                                                                                                 estado=historial.estado,
                                                                                                                 observacion=historial.observacion)
                                                    historialaprobacionvideo.save(request)

                                        if not semanaactual.guiaestudiantesilabosemanal_set.filter(status=True).exists():
                                            for importaguiaes in semanaant.guiaestudiantesilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                                guiaestudiante = GuiaEstudianteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                             estado_id=estado,
                                                                                             migrado=True,
                                                                                             observacion=importaguiaes.observacion,
                                                                                             archivoguiaestudiante=importaguiaes.archivoguiaestudiante,
                                                                                             archivo_logo=importaguiaes.archivo_logo,
                                                                                             archivo_sin_logo=importaguiaes.archivo_sin_logo,
                                                                                             tiporecurso_id=2)
                                                guiaestudiante.save(request)
                                                importar = importaguiaes
                                                if estado == 2:
                                                    for historial in guiaestudiante.historialaprobacionguiaestudiante_set.filter(status=True, estado_id__lte=2):
                                                        historialaprobacionguiaestudiante = HistorialaprobacionGuiaEstudiante(guiaestudiante=guiaestudiante,
                                                                                                                              estado=historial.estado,
                                                                                                                              observacion=historial.observacion)
                                                        historialaprobacionguiaestudiante.save(request)

                                    if not semanaactual.diapositivasilabosemanal_set.filter(status=True).exists():
                                        for importadiapositiva in semanaant.diapositivasilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                            diapositiva = DiapositivaSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                   estado_id=estado,
                                                                                   migrado=True,
                                                                                   nombre=importadiapositiva.nombre,
                                                                                   descripcion=importadiapositiva.descripcion,
                                                                                   url=importadiapositiva.url,
                                                                                   tipomaterial=importadiapositiva.tipomaterial,
                                                                                   archivodiapositiva=importadiapositiva.archivodiapositiva,
                                                                                   tiporecurso_id=1)
                                            diapositiva.save(request)
                                            importar = importadiapositiva
                                            if estado == 2:
                                                for historial in diapositiva.historialaprobaciondiapositiva_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobaciondiapositiva = HistorialaprobacionDiapositiva(diapositiva=diapositiva,
                                                                                                                    estado=historial.estado,
                                                                                                                    observacion=historial.observacion)
                                                    historialaprobaciondiapositiva.save(request)

                                    if not semanaactual.compendiosilabosemanal_set.filter(status=True).exists():
                                        for importacompendio in semanaant.compendiosilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                            compendio = CompendioSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                               estado_id=estado,
                                                                               migrado=True,
                                                                               descripcion=importacompendio.descripcion,
                                                                               archivocompendio=importacompendio.archivocompendio,
                                                                               archivo_logo=importacompendio.archivo_logo,
                                                                               archivo_sin_logo=importacompendio.archivo_sin_logo,
                                                                               archivoplagio=importacompendio.archivoplagio,
                                                                               tiporecurso_id=3)
                                            compendio.save(request)
                                            importar = importacompendio
                                            if estado == 2:
                                                for historial in compendio.historialaprobacioncompendio_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobacioncompendio = HistorialaprobacionCompendio(compendio=compendio,
                                                                                                                estado=historial.estado,
                                                                                                                observacion=historial.observacion)
                                                    historialaprobacioncompendio.save(request)

                                    # if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                    # for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                    for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True):
                                        if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True, tiporecurso=importamaterial.tiporecurso, nombre=importamaterial.nombre, descripcion=importamaterial.descripcion):
                                            material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                      estado_id=estado,
                                                                                      migrado=True,
                                                                                      tipomaterial=importamaterial.tipomaterial,
                                                                                      nombre=importamaterial.nombre,
                                                                                      descripcion=importamaterial.descripcion,
                                                                                      testourl=importamaterial.testourl,
                                                                                      tiporecurso=importamaterial.tiporecurso,
                                                                                      archivomaterial=importamaterial.archivomaterial,
                                                                                      tiporecursos_id=4)
                                            material.save(request)
                                            importar = importamaterial
                                            if estado == 2:
                                                for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                                              estado=historial.estado,
                                                                                                              observacion=historial.observacion)
                                                    historialaprobacionmaterial.save(request)

                                    if not semanaactual.tareapracticasilabosemanal_set.filter(status=True).exists():
                                        if not semanaactual.gpguiapracticasemanal_set.filter(status=True).exists():
                                            for importaguia in semanaant.gpguiapracticasemanal_set.filter(status=True):
                                                guiapracticasilabosemanal = GPGuiaPracticaSemanal(silabosemanal_id=semanaactual.id,
                                                                                                  numeropractica=importaguia.numeropractica,
                                                                                                  tiempoactividad=importaguia.tiempoactividad,
                                                                                                  fechaelaboracion=importaguia.fechaelaboracion,
                                                                                                  individual=importaguia.individual,
                                                                                                  grupo=importaguia.grupo,
                                                                                                  cantidadalumnogrupo=importaguia.cantidadalumnogrupo,
                                                                                                  objetvopactica=importaguia.objetvopactica,
                                                                                                  actividaddesarrollar=importaguia.actividaddesarrollar,
                                                                                                  rubica=importaguia.rubica,
                                                                                                  calificar=importaguia.calificar,
                                                                                                  calificarmax=importaguia.calificarmax,
                                                                                                  calificarmin=importaguia.calificarmin,
                                                                                                  cerrada=importaguia.cerrada,
                                                                                                  registrado=importaguia.registrado,
                                                                                                  laboratorio=importaguia.laboratorio,
                                                                                                  nombrepractica=importaguia.nombrepractica,
                                                                                                  asistida=importaguia.asistida,
                                                                                                  noasistida=importaguia.noasistida,
                                                                                                  tipoambiente=importaguia.tipoambiente,
                                                                                                  nombreambiente=importaguia.nombreambiente,
                                                                                                  ubicacionambiente=importaguia.ubicacionambiente,
                                                                                                  unidad=importaguia.unidad)
                                                guiapracticasilabosemanal.save(request)
                                                if GPObjetivo.objects.filter(guiasemanal=importaguia, status=True):
                                                    listadoobjetivo = GPObjetivo.objects.filter(guiasemanal=importaguia, status=True)
                                                    for objetivo in listadoobjetivo:
                                                        objetivoguia = GPObjetivo(guiasemanal=guiapracticasilabosemanal,
                                                                                  nombre=objetivo.nombre)
                                                        objetivoguia.save(request)
                                                if GPInstruccion.objects.filter(guiasemanal=importaguia, status=True):
                                                    instruccion = GPInstruccion.objects.get(pk=GPInstruccion.objects.filter(guiasemanal=importaguia, status=True)[0].id, status=True)
                                                    instruccionimporta = GPInstruccion(guiasemanal=guiapracticasilabosemanal,
                                                                                       observacion=instruccion.observacion)
                                                    instruccionimporta.save(request)

                                    log(u'Importó el tarea practica de la semana: %s del profesor: %s al recurso de la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")

                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'listar_periodos':
                try:
                    lista = []
                    listaperiodos1 = Periodo.objects.filter(pk__gte=95, tipo_id=periodo.tipo.id, status=True).exclude(pk__gte=periodo.id).order_by('-inicio')
                    listaperiodos2 = Periodo.objects.filter(id=131)
                    listaperiodos = listaperiodos1 | listaperiodos2
                    for lis in listaperiodos:
                        lista.append([lis.id, lis.nombre])
                    return JsonResponse({"result": "ok", 'lista': lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'listarsilabos_periodos':
                try:
                    if not 'idperiodosilabo' in request.POST:
                        return JsonResponse({"result": "bad", "mensaje": u"Seleccione un periodo."})
                    if request.POST['idperiodosilabo'] == '':
                        return JsonResponse({"result": "bad", "mensaje": u"Seleccione un periodo."})
                    lista = []
                    silaboact = Silabo.objects.get(status=True, pk=int(request.POST['idsilabo']))
                    silabos = Silabo.objects.filter(status=True, programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id, materia__asignaturamalla__id=silaboact.materia.asignaturamalla.id, materia__nivel__periodo__id=int(request.POST['idperiodosilabo'])).exclude(pk=silaboact.id)
                    # silabos = Silabo.objects.filter(status=True, materia__asignaturamalla__asignatura__id=silaboact.materia.asignaturamalla.asignatura.id, materia__nivel__periodo__id=int(request.POST['idperiodosilabo'])).exclude(pk=silaboact.id)
                    for silabo in silabos:
                        if silabo.estado_planificacion_clases() >= 100:
                            lista.append([silabo.id, str(silabo.materia), str(silabo.fecha_creacion.strftime("%Y/%m/%d")), str(silabo.profesor), str(silabo.estado_planificacion_clases()), str(silabo.materia.asignaturamalla.nivelmalla.nombre)])
                    return JsonResponse({"result": "ok", "lista": lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'copiaractividad':
                try:
                    listatareas = [2, 3, 5, 7, 8]
                    idtipoactividad = int(request.POST['idtipoactividad'])
                    codmodelo = request.POST['codmodelo']
                    califica = request.POST['califica']
                    if idtipoactividad == 1:
                        actividad = TestSilaboSemanal.objects.get(pk=int(request.POST['id']))
                        replicatest = actividad
                        replicatest.pk = None
                        replicatest.idtestmoodle = 0
                        replicatest.tiporecurso_id = 11
                        replicatest.silabosemanal_id = int(encrypt(request.POST['idsilabosemanal']))
                        replicatest.estado_id = 1
                        if califica:
                            replicatest.calificar = True
                            replicatest.detallemodelo_id = codmodelo
                        replicatest.save(request)
                        replicatest.silabosemanal.silabo.update_ordenaactividad(idtipoactividad)
                    if idtipoactividad in listatareas:
                        actividad = TareaSilaboSemanal.objects.get(pk=int(request.POST['id']))
                        replicatest = actividad
                        replicatest.pk = None
                        replicatest.idtareamoodle = 0
                        replicatest.tiporecurso_id = 5
                        replicatest.silabosemanal_id = int(encrypt(request.POST['idsilabosemanal']))
                        replicatest.estado_id = 1
                        if califica:
                            replicatest.calificar = True
                            replicatest.detallemodelo_id = codmodelo
                        replicatest.save(request)
                        replicatest.silabosemanal.silabo.update_ordenaactividad(idtipoactividad)
                    if idtipoactividad == 6:
                        actividad = ForoSilaboSemanal.objects.get(pk=int(request.POST['id']))
                        replicatest = actividad
                        replicatest.pk = None
                        replicatest.idforomoodle = 0
                        replicatest.tiporecurso_id = 9
                        replicatest.silabosemanal_id = int(encrypt(request.POST['idsilabosemanal']))
                        replicatest.estado_id = 1
                        if califica:
                            replicatest.calificar = True
                            replicatest.detallemodelo_id = codmodelo
                        replicatest.save(request)
                        replicatest.silabosemanal.silabo.update_ordenaactividad(idtipoactividad)
                    if idtipoactividad == 4:
                        actividad = GPGuiaPracticaSemanal.objects.get(pk=int(request.POST['id']))
                        replicatest = actividad
                        replicatest.pk = None
                        replicatest.temapractica_id = None
                        replicatest.subtemapractica_id = None
                        replicatest.unidad_id = None
                        replicatest.codigoqr = False
                        replicatest.silabosemanal_id = int(encrypt(request.POST['idsilabosemanal']))
                        replicatest.save(request)
                        if GPObjetivo.objects.filter(guiasemanal_id=int(request.POST['id']), status=True):
                            listadoobjetivo = GPObjetivo.objects.filter(guiasemanal_id=int(request.POST['id']), status=True)
                            for objetivo in listadoobjetivo:
                                objetivoguia = GPObjetivo(guiasemanal=replicatest, nombre=objetivo.nombre)
                                objetivoguia.save(request)
                        if GPInstruccion.objects.filter(guiasemanal_id=int(request.POST['id']), status=True):
                            instruccion = GPInstruccion.objects.get(pk=GPInstruccion.objects.filter(guiasemanal_id=int(request.POST['id']), status=True)[0].id, status=True)
                            instruccionreplica = GPInstruccion(guiasemanal=replicatest, observacion=instruccion.observacion)
                            instruccionreplica.save(request)
                    # else:
                    #     replicatest = actividad
                    #     replicatest.pk = None
                    #     replicatest.silabosemanal_id = int(encrypt(request.POST['idsilabosemanal']))
                    #     replicatest.estado_id=1
                    #     replicatest.save(request)
                    #     replicatest.silabosemanal.silabo.update_ordenaactividad(idtipoactividad)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'listar_actividadsilabo':
                try:
                    lista = []
                    listatareas = [2, 3, 5, 7, 8]
                    data['idtipoactividad'] = idtipoactividad = int(request.POST['idtipoactividad'])
                    silabo = Silabo.objects.get(pk=request.POST['idsilaboperiodo'])
                    silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id_codsemanal'])))
                    if idtipoactividad == 1:
                        listadotest = TestSilaboSemanal.objects.filter(silabosemanal__silabo_id=request.POST['idsilaboperiodo'], status=True, estado_id__in=[2, 4]).order_by('silabosemanal__numsemana')
                        for lis in listadotest:
                            lista.append([lis.id, lis.silabosemanal.numsemana, lis.nombretest, lis.instruccion, 3, lis.estado.id, 'TEST', lis.calificar])
                    if idtipoactividad in listatareas:
                        listadotest = TareaSilaboSemanal.objects.filter(silabosemanal__silabo_id=request.POST['idsilaboperiodo'], actividad_id=idtipoactividad, status=True, estado_id__in=[2, 4]).order_by('silabosemanal__numsemana')
                        for lis in listadotest:
                            lista.append([lis.id, lis.silabosemanal.numsemana, lis.nombre, lis.objetivo, 1, lis.estado.id, lis.actividad.descripcion, lis.calificar])
                    if idtipoactividad == 4:
                        listadotest = GPGuiaPracticaSemanal.objects.filter(silabosemanal__silabo_id=request.POST['idsilaboperiodo'], status=True).order_by('silabosemanal__numsemana')
                        for lis in listadotest:
                            # if lis.id_estado_guiapractica() in [2,3]:
                            lista.append([lis.id, lis.silabosemanal.numsemana, lis.nombrepractica, lis.nombrepractica, 10, 2, 'GUÍA PRÁCTICA', lis.calificar])
                    if idtipoactividad == 6:
                        listadotest = ForoSilaboSemanal.objects.filter(silabosemanal__silabo_id=request.POST['idsilaboperiodo'], status=True, estado_id__in=[2, 4]).order_by('silabosemanal__numsemana')
                        for lis in listadotest:
                            lista.append([lis.id, lis.silabosemanal.numsemana, lis.nombre, lis.objetivo, 2, lis.estado.id, 'FORO', lis.calificar])
                    data['lista'] = lista
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    data['modeloevaluativo'] = DetalleModeloEvaluativo.objects.filter(modelo=silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, test=True, migrarmoodle=True, recurso=True, status=True)
                    template = get_template("pro_planificacion/itemsrecursos.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'lista_recursossilabos_periodo':
                lista = []
                try:
                    if 'ida' in request.POST and 'id' in request.POST:
                        silaboact = Silabo.objects.get(status=True, pk=int(request.POST['ida']))
                        silabos = Silabo.objects.filter(status=True, programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id, materia__asignaturamalla__id=silaboact.materia.asignaturamalla.id, materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)
                        for silabo in silabos:
                            if silabo.estado_planificacion_clases() >= 100:
                                lista.append([silabo.id, str(silabo.materia), str(silabo.fecha_creacion.strftime("%Y/%m/%d")), str(silabo.profesor), str(silabo.estado_planificacion_clases())])
                        return JsonResponse({"result": "ok", "lista": lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'lista_recursossilabos_periodo_todo':
                lista = []
                try:
                    if 'ida' in request.POST and 'id' in request.POST:
                        silaboact = Silabo.objects.get(status=True, pk=int(request.POST['ida']))
                        nombasignatura = silaboact.materia.asignaturamalla.asignatura.nombre
                        if silaboact.materia.modeloevaluativo.id in [27, 64]:
                            if silaboact.materia.asignaturamalla.asignatura.detallegrupoasignatura_set.filter(status=True):
                                listagrupoasig = silaboact.materia.asignaturamalla.asignatura.detallegrupoasignatura_set.filter(status=True)[0]
                                codigotransversales = DetalleGrupoAsignatura.objects.values_list('asignatura_id').filter(grupo_id=listagrupoasig.grupo.id, status=True)
                                silabos = Silabo.objects.filter(status=True, codigoqr=True, materia__asignaturamalla__asignatura_id__in=codigotransversales, materia__modeloevaluativo_id__in= [27, 64], materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)
                            else:
                                silabos = Silabo.objects.filter(status=True, codigoqr=True, materia__asignaturamalla__asignatura__nombre__icontains=nombasignatura[0:10], materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)
                        else:
                            silabos = Silabo.objects.filter(status=True, codigoqr=True, materia__asignaturamalla__asignatura__nombre__unaccent__icontains=nombasignatura[0:10], materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)  # programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id , materia__asignaturamalla__asignatura__nombre=nombasignatura, materia__profesormateria__profesor=profesor

                        for silabo in silabos:
                            lista.append([silabo.id, str(silabo.materia) + " " + str(silabo.materia.asignaturamalla.nivelmalla.nombre), str(silabo.fecha_creacion.strftime("%Y/%m/%d")), str(silabo.profesor), str(silabo.estado_planificacion_clases())])
                        return JsonResponse({"result": "ok", "lista": lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'lista_recursossilabos_periodo_todovidm':
                lista = []
                try:
                    if 'ida' in request.POST and 'id' in request.POST:
                        silaboact = Silabo.objects.get(status=True, pk=int(request.POST['ida']))
                        nombasignatura = silaboact.materia.asignaturamalla.asignatura.nombre
                        silabos = Silabo.objects.filter(status=True, materia__asignaturamalla__asignatura__nombre__icontains=nombasignatura[0:10], materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)  # programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id , materia__asignaturamalla__asignatura__nombre=nombasignatura, materia__profesormateria__profesor=profesor
                        for silabo in silabos:
                            hay_video = 0
                            if silabo.estado_planificacion_clases() >= 100:
                                if VideoMagistralSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo).exists():
                                    hay_video = 1
                                lista.append([silabo.id, str(silabo.materia) + " " + str(silabo.materia.asignaturamalla.nivelmalla.nombre), str(silabo.fecha_creacion.strftime("%Y/%m/%d")), str(silabo.profesor), str(silabo.estado_planificacion_clases()), hay_video])
                        return JsonResponse({"result": "ok", "lista": lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            # DESDE AQUI CON RESPECTO A SILABO

            elif action == 'addsyllabus':
                try:
                    form = ArchivoSyllabusForm(request.POST, request.FILES)
                    if form.is_valid():
                        materia = Materia.objects.get(pk=request.POST['materia'])
                        newfile1 = request.FILES['archivoword']
                        newfile1._name = generar_nombre("silabo_", newfile1._name)
                        archivo = Archivo(nombre=form.cleaned_data['nombre'],
                                          materia=materia,
                                          fecha=datetime.now().date(),
                                          archivo=newfile1,
                                          tipo_id=ARCHIVO_TIPO_SYLLABUS,
                                          profesor=profesor)
                        archivo.save(request)
                        newfile2 = request.FILES['archivopdf']
                        newfile2._name = generar_nombre("silabo_", newfile2._name)
                        archivo = Archivo(nombre=form.cleaned_data['nombre'],
                                          materia=materia,
                                          fecha=datetime.now().date(),
                                          archivo=newfile2,
                                          tipo_id=ARCHIVO_TIPO_SYLLABUS,
                                          profesor=profesor)
                        archivo.save(request)
                        log(u'Adiciono silabo: %s' % archivo, request, "add")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos, archivos pesados."})

            elif action == 'addsyllabusword':
                try:
                    form = ArchivoSyllabusWordForm(request.POST, request.FILES)
                    if form.is_valid():
                        newfile = request.FILES['archivo']
                        newfile._name = generar_nombre("silabo_", newfile._name)
                        materia = Materia.objects.get(pk=request.POST['materia'])
                        archivo = Archivo(nombre=form.cleaned_data['nombre'],
                                          materia=materia,
                                          fecha=datetime.now().date(),
                                          archivo=newfile,
                                          tipo_id=ARCHIVO_TIPO_SYLLABUS,
                                          profesor=profesor)
                        archivo.save(request)
                        log(u'Adiciono silabo: %s' % archivo, request, "add")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addsyllabuspdf':
                try:
                    form = ArchivoSyllabusPdfForm(request.POST, request.FILES)
                    if form.is_valid():
                        newfile = request.FILES['archivo']
                        newfile._name = generar_nombre("silabo_", newfile._name)
                        materia = Materia.objects.get(pk=request.POST['materia'])
                        archivo = Archivo(nombre=form.cleaned_data['nombre'],
                                          materia=materia,
                                          fecha=datetime.now().date(),
                                          archivo=newfile,
                                          tipo_id=ARCHIVO_TIPO_SYLLABUS,
                                          profesor=profesor)
                        archivo.save(request)
                        log(u'Adiciono silabo: %s' % archivo, request, "add")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'calcular':
                try:
                    materia = Materia.objects.filter(status=True, pk=int(encrypt(request.POST['id'])))[0]
                    materia.recalcularnota()
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'listamaterias':
                try:

                    listaasignaturas = MateriaAsignada.objects.filter(matricula_id=int(encrypt(request.POST['idmatricula'])))
                    lista = []
                    for asig in listaasignaturas:
                        datadoc = {}
                        datadoc['id'] = asig.id
                        datadoc['descripcion'] = asig.materia.asignatura.nombre
                        lista.append(datadoc)
                    return JsonResponse({'result': 'ok', 'lista': lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'descargazip':
                try:
                    planificacion = PlanificacionMateria.objects.get(pk=int(encrypt(request.POST['id'])))
                    url = 'https://sga.unemi.edu.ec/media/zipav/TareasCursoId_%s.zip' % (encrypt(planificacion.id))
                    fantasy_zip = zipfile.ZipFile(SITE_STORAGE + url, 'w')
                    for tareas in planificacion.materiaasignadaplanificacion_set.filter(archivo__isnull=False):
                        if tareas.archivo:
                            ext = tareas.archivo.__str__()[tareas.archivo.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + tareas.archivo.url, '%s_%s_%s%s' % (tareas.materiaasignada.matricula.inscripcion.persona.identificacion(), tareas.materiaasignada.matricula.inscripcion.persona.nombre_completo_inverso().replace(' ', '_'), encrypt(tareas.id), ext.lower()))
                    fantasy_zip.close()
                    return JsonResponse({"result": "ok", "url": url})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al comprimir los archivos. %s" % ex})

            elif action == 'responder':
                try:
                    avpreguntadocente = AvPreguntaDocente.objects.get(pk=int(encrypt(request.POST['id'])))
                    avpreguntarespuesta = AvPreguntaRespuesta(avpreguntadocente=avpreguntadocente,
                                                              profersormateria=avpreguntadocente.profersormateria,
                                                              respuesta=request.POST['respuesta'])
                    avpreguntarespuesta.save(request)
                    avpreguntadocente.estadolecturaalumno = True
                    avpreguntadocente.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'comunicacionmasiva':
                try:
                    form = AvComunicacionForm(request.POST)
                    if form.is_valid():
                        materia = Materia.objects.get(pk=int(encrypt(request.POST['id'])))
                        avcomunicacion = AvComunicacion(materia=materia,
                                                        titulo=form.cleaned_data['titulo'],
                                                        comunicado=form.cleaned_data['comunicado'])
                        avcomunicacion.save(request)
                        return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'edit_comunicado':
                try:
                    form = AvComunicacionForm(request.POST)
                    if form.is_valid():
                        avcomunicacion = AvComunicacion.objects.get(pk=int(encrypt(request.POST['id'])))
                        avcomunicacion.comunicado = form.cleaned_data['comunicado']
                        avcomunicacion.titulo = form.cleaned_data['titulo']
                        avcomunicacion.save(request)
                        return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # Silbo_ pasad de prosilabo
            elif action == 'addpsemanasilabo':
                try:
                    subtema = ''
                    tema = ''
                    form = SilaboForm(request.POST)
                    if form.is_valid():
                        cadena = request.POST['id'].split("_")
                        materia = Materia.objects.get(pk=cadena[0])
                        silabosemana = SilaboSemanal(materia=materia,
                                                     numsemana=cadena[4],
                                                     semana=cadena[1],
                                                     fechainiciosemana=cadena[2],
                                                     fechafinciosemana=cadena[3],
                                                     objetivoaprendizaje=form.cleaned_data['objetivoaprendizaje'],
                                                     enfoque=form.cleaned_data['enfoque'],
                                                     recursos=form.cleaned_data['recursos'],
                                                     evaluacion=form.cleaned_data['evaluacion'])
                        silabosemana.save(request)
                        log(u'Adiciono una semana del Plan de Estudio: %s - %s' % (silabosemana, materia), request, "add")
                        return JsonResponse({"result": "ok"}, )
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'eliminarbibliografia':
                try:
                    lib = DetalleSilaboSemanalBibliografiaDocente.objects.get(pk=request.POST['codigobiblio'])
                    lib.status = False
                    lib.save(request)
                    log(u'Elimino bilbiografia: %s' % (lib), request, "del")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al eliminar los datos."})

            elif action == 'listadelbibliografia':
                try:
                    lib = DetalleSilaboSemanalBibliografiaDocente.objects.get(pk=request.POST['id'])
                    nombrelibro = lib.librokohaprogramaanaliticoasignatura.nombre
                    codigolibro = lib.id
                    return JsonResponse({"result": "ok", 'descripcion': nombrelibro, 'codigolibro': codigolibro})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'adicionarbibliografia':
                try:
                    f = BibliografiaProgramaAnaliticoAsignaturaForm(request.POST)
                    if f.is_valid():
                        if DetalleSilaboSemanalBibliografiaDocente.objects.filter(librokohaprogramaanaliticoasignatura_id=int(f.cleaned_data['bibliografia']), silabosemanal_id=request.POST['id']).exists():
                            return JsonResponse({"result": "bad", "mensaje": u"Ya se encuentra registrada."})
                        bibliografia = DetalleSilaboSemanalBibliografiaDocente(librokohaprogramaanaliticoasignatura_id=int(f.cleaned_data['bibliografia']), silabosemanal_id=request.POST['id'])
                        bibliografia.save(request)
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            # elif action == 'addpsemanasilaboresultado':
            #     try:
            #         subtema = ''
            #         tema = ''
            #         bibliografia = ''
            #         listaometodologia = json.loads(request.POST['lista_items2'])
            #         if 'lista_items1' in request.POST:
            #             subtema = json.loads(request.POST['lista_items1'])
            #         if 'lista_items2' in request.POST:
            #             tema = json.loads(request.POST['lista_items2'])
            #         cadena = request.POST['id'].split("_")
            #         silabo = Silabo.objects.get(pk=cadena[0])
            #         silabosemana = SilaboSemanal(silabo=silabo,
            #                                      numsemana=cadena[4],
            #                                      semana=cadena[1],
            #                                      fechainiciosemana=cadena[2],
            #                                      fechafinciosemana=cadena[3],
            #                                      objetivoaprendizaje='',
            #                                      enfoque='',
            #                                      recursos='',
            #                                      evaluacion='',
            #                                      horaspresencial=0,
            #                                      horaautonoma=0)
            #         silabosemana.save(request)
            #         if subtema:
            #             for subt in subtema:
            #                 ingresosubt = DetalleSilaboSemanalSubtema(silabosemanal_id=silabosemana.id,subtemaunidadresultadoprogramaanalitico_id=subt)
            #                 ingresosubt.save(request)
            #         if tema:
            #             for tem in tema:
            #                 ingresostemas = DetalleSilaboSemanalTema(silabosemanal_id=silabosemana.id,temaunidadresultadoprogramaanalitico_id=tem)
            #                 ingresostemas.save(request)
            #         return JsonResponse({"result": "ok"}, )
            #     except Exception as ex:
            #         transaction.set_rollback(True)
            #         return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'deletetemasilabo':
                try:
                    valor = False
                    if DetalleSilaboSemanalTema.objects.filter(temaunidadresultadoprogramaanalitico_id=request.POST['idtema'], silabosemanal_id=request.POST['idsilabosemanal'], status=True).exists():
                        temasilabo = DetalleSilaboSemanalTema.objects.get(temaunidadresultadoprogramaanalitico_id=request.POST['idtema'], silabosemanal_id=request.POST['idsilabosemanal'], status=True)
                        silabosemanal = temasilabo.silabosemanal
                        if silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id == 7:
                            if DetalleSilaboSemanalSubtemaPosgrado.objects.values_list('subtemaunidadresultadoprogramaanaliticoposgrado_id', flat=True).filter(subtemaunidadresultadoprogramaanaliticoposgrado__temaunidadresultadoprogramaanalitico_id=temasilabo.temaunidadresultadoprogramaanalitico_id, silabosemanal_id=request.POST['idsilabosemanal'], status=True):
                                idsubtemasilaboposgrado = DetalleSilaboSemanalSubtemaPosgrado.objects.values_list('subtemaunidadresultadoprogramaanaliticoposgrado_id', flat=True).filter(subtemaunidadresultadoprogramaanaliticoposgrado__temaunidadresultadoprogramaanalitico_id=temasilabo.temaunidadresultadoprogramaanalitico_id, silabosemanal_id=request.POST['idsilabosemanal'], status=True)
                                for subtemaunidadresultadoprogramaanaliticoposgrado in SubtemaUnidadResultadoProgramaAnaliticoPosgrado.objects.filter(pk__in=idsubtemasilaboposgrado, status=True):
                                    subtemaunidadresultadoprogramaanaliticoposgrado.status = False
                                    subtemaunidadresultadoprogramaanaliticoposgrado.save(request)
                                for subtemasilaboposgrado in DetalleSilaboSemanalSubtemaPosgrado.objects.filter(subtemaunidadresultadoprogramaanaliticoposgrado__temaunidadresultadoprogramaanalitico_id=temasilabo.temaunidadresultadoprogramaanalitico_id, silabosemanal_id=request.POST['idsilabosemanal'], status=True):
                                    subtemasilaboposgrado.status = False
                                    subtemasilaboposgrado.save(request)
                        else:
                            listadosubtemasilabo = DetalleSilaboSemanalSubtema.objects.filter(subtemaunidadresultadoprogramaanalitico__temaunidadresultadoprogramaanalitico_id=temasilabo.temaunidadresultadoprogramaanalitico_id, silabosemanal_id=request.POST['idsilabosemanal'], status=True)
                            for subtemasilabo in listadosubtemasilabo:
                                subtemasilabo.status = False
                                subtemasilabo.save(request)
                        temasilabo.status = False
                        temasilabo.save(request)
                        valor = False
                    else:
                        ingresostemas = DetalleSilaboSemanalTema(silabosemanal_id=request.POST['idsilabosemanal'], temaunidadresultadoprogramaanalitico_id=request.POST['idtema'])
                        ingresostemas.save(request)
                        registrosubtemas = SubtemaUnidadResultadoProgramaAnalitico.objects.filter(temaunidadresultadoprogramaanalitico_id=request.POST['idtema'], status=True)
                        for sub in registrosubtemas:
                            ingresossubtemas = DetalleSilaboSemanalSubtema(silabosemanal_id=request.POST['idsilabosemanal'], subtemaunidadresultadoprogramaanalitico_id=sub.id)
                            ingresossubtemas.save(request)
                        valor = True
                    silabosemana = SilaboSemanal.objects.get(pk=int(request.POST['idsilabosemanal']))
                    silabosemana.modifico_silabo(persona, request)
                    silabosemana.fechainiciosemana = request.POST['fini']
                    silabosemana.fechafinciosemana = request.POST['ffin']
                    silabosemana.save(request)
                    return JsonResponse({"result": "ok", 'valor': valor})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al eliminar los datos."})

            elif action == 'deleteteemasilabo':
                try:
                    valor = False
                    valor = False
                    if DetalleSilaboSemanalSubtema.objects.filter(subtemaunidadresultadoprogramaanalitico_id=request.POST['idsubtema'], silabosemanal_id=request.POST['idsilabosemanal'], status=True).exists():
                        subtemasilabo = DetalleSilaboSemanalSubtema.objects.get(subtemaunidadresultadoprogramaanalitico_id=request.POST['idsubtema'], silabosemanal_id=request.POST['idsilabosemanal'], status=True)
                        subtemasilabo.status = False
                        subtemasilabo.save(request)
                        valor = False
                    else:
                        ingresostemas = DetalleSilaboSemanalSubtema(silabosemanal_id=request.POST['idsilabosemanal'], subtemaunidadresultadoprogramaanalitico_id=request.POST['idsubtema'])
                        ingresostemas.save(request)
                        if DetalleSilaboSemanalTema.objects.filter(silabosemanal_id=request.POST['idsilabosemanal'], temaunidadresultadoprogramaanalitico_id=ingresostemas.subtemaunidadresultadoprogramaanalitico.temaunidadresultadoprogramaanalitico_id, status=True).exists():
                            a = 0
                        else:
                            ingresostemas = DetalleSilaboSemanalTema(silabosemanal_id=request.POST['idsilabosemanal'], temaunidadresultadoprogramaanalitico_id=ingresostemas.subtemaunidadresultadoprogramaanalitico.temaunidadresultadoprogramaanalitico_id)
                            ingresostemas.save(request)
                        valor = True
                    silabosemana = SilaboSemanal.objects.get(pk=int(request.POST['idsilabosemanal']))
                    silabosemana.modifico_silabo(persona, request)
                    silabosemana.fechainiciosemana = request.POST['fini']
                    silabosemana.fechafinciosemana = request.POST['ffin']
                    silabosemana.save(request)
                    return JsonResponse({"result": "ok", 'valor': valor})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al eliminar los datos."})

            elif action == 'editsemanasilabo':
                try:
                    form = SilaboForm(request.POST)
                    if form.is_valid():
                        bibliografia = ''
                        if 'lista_items3' in request.POST:
                            bibliografia = json.loads(request.POST['lista_items3'])
                        silabosemana = SilaboSemanal.objects.get(pk=request.POST['id'])
                        silabosemana.objetivoaprendizaje = form.cleaned_data['objetivoaprendizaje']
                        silabosemana.enfoque = form.cleaned_data['enfoque']
                        silabosemana.recursos = form.cleaned_data['recursos']
                        silabosemana.evaluacion = form.cleaned_data['evaluacion']
                        silabosemana.save(request)
                        deletebibliografia = DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal_id=silabosemana.id)
                        deletebibliografia.status = False
                        deletebibliografia.save(request)
                        if bibliografia:
                            for bib in bibliografia:
                                ingresosbibliografia = DetalleSilaboSemanalBibliografia(silabosemanal_id=silabosemana.id, bibliografiaprogramaanaliticoasignatura_id=bib)
                                ingresosbibliografia.save(request)
                        log(u'Editó semana del sílabo %s' % (silabosemana), request, "add")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos.%s" % ex})
            # reporte de guia de prctica
            elif action == 'practicapdf':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['ids'])))
                    data['practicas'] = silabosemana.gpguiapracticasemanal_set.filter(status=True)
                    data['decano'] = silabosemana.silabo.materia.coordinacion_materia().responsable_periododos(silabosemana.silabo.materia.nivel.periodo, 1) if silabosemana.silabo.materia.coordinacion_materia().responsable_periododos(silabosemana.silabo.materia.nivel.periodo, 1) else None
                    data['director'] = silabosemana.silabo.materia.asignaturamalla.malla.carrera.coordinador(silabosemana.silabo.materia.nivel.periodo, silabosemana.silabo.profesor.coordinacion.sede).persona.nombre_completo_inverso() if silabosemana.silabo.materia.asignaturamalla.malla.carrera.coordinador(silabosemana.silabo.materia.nivel.periodo, silabosemana.silabo.profesor.coordinacion.sede) else None
                    return conviert_html_to_pdf(
                        'pro_planificacion/practica_pdf.html',
                        {
                            'pagesize': 'A4',
                            'data': data,
                        }
                    )
                except Exception as ex:
                    pass
            # Adicionar Guia de Práctica
            elif action == 'addpractica':
                try:
                    form = GPPracticaFrom(request.POST, request.FILES)
                    # if 'lista_items1' in request.POST and not json.loads(request.POST['lista_items1']):
                    #     return JsonResponse({"result": "bad", "mensaje": u"No a elegido un equipo/intrumento"})
                    # if not request.POST['lista_items2']:
                    #     return JsonResponse({"result": "bad", "mensaje": u"No a elegido un material/insumo"})
                    if not 'individual' in request.POST and not 'grupo' in request.POST:
                        return JsonResponse({"result": "bad", "mensaje": u"No ha elegido un Tipo de Práctica"})
                    if 'grupo' in request.POST and not int(request.POST['cantidadalumnogrupo']) > 1:
                        return JsonResponse({"result": "bad", "mensaje": u"La cantidad de Alumnos debe ser mayor a 1"})
                    listadoequipos = InventarioLaboratorioAcademia.objects.filter(id__in=[int(datos['idequipo']) for datos in json.loads(request.POST['lista_items1'])]) if request.POST['lista_items1'] else []
                    listaproductos = []
                    for datos in json.loads(request.POST['lista_items2']):
                        listaproductos.append((int(datos['idproducto']), int(datos['cantidad'])))
                    if form.is_valid():
                        silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        practica = GPGuiaPracticaSemanal(silabosemanal_id=int(encrypt(request.POST['id'])),
                                                         temapractica_id=request.POST['temapractica'],
                                                         subtemapractica=form.cleaned_data['subtemapractica'],
                                                         numeropractica=int(encrypt(request.POST['npractica'])),
                                                         tiempoactividad=request.POST['tiempoactividad'],
                                                         fechaelaboracion=datetime.now().date(),
                                                         individual=form.cleaned_data['individual'] if 'individual' in request.POST else False,
                                                         grupo=form.cleaned_data['grupo'] if 'grupo' in request.POST else False,
                                                         cantidadalumnogrupo=form.cleaned_data['cantidadalumnogrupo'] if 'cantidadalumnogrupo' in request.POST else 0,
                                                         objetvopactica=form.cleaned_data['objetvopactica'],
                                                         actividaddesarrollar=form.cleaned_data['actividaddesarrollar'],
                                                         rubica=form.cleaned_data['rubica'],
                                                         laboratorio=silabosemana.silabo.materia.laboratorio if silabosemana.silabo.materia.laboratorio else None)
                        practica.save(request)
                        log(u'Adiciono una practica a la semana: %s - %s' % (practica, practica.silabosemanal.silabo.materia), request, "add")

                        if 'instruccionarchivo' in request.FILES:
                            newfile = request.FILES['instruccionarchivo']
                            newfile._name = generar_nombre("instruccion_", newfile._name)
                            instruccion = GPInstruccion(guiasemanal=practica, observacion=form.cleaned_data['instruccionobservacion'], archivo=newfile)
                            instruccion.save(request)
                        else:
                            instruccion = GPInstruccion(guiasemanal=practica, observacion=form.cleaned_data['instruccionobservacion'])
                            instruccion.save(request)
                        for equipo in listadoequipos:
                            detallelaboratorio = GPLugarPracticaDetalle(guiapractica=practica, detalle_id=equipo.id)
                            detallelaboratorio.save(request)
                        for producto in listaproductos:
                            detallelaboratorio = GPLugarPracticaDetalle(guiapractica=practica, detalle_id=int(producto[0]), cantidad=int(producto[1]))
                            detallelaboratorio.save(request)
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addpracticarecurso':
                try:
                    form = GPPracticaRecursoFrom(request.POST, request.FILES)
                    # if 'lista_items1' in request.POST and not json.loads(request.POST['lista_items1']):
                    #     return JsonResponse({"result": "bad", "mensaje": u"No a elegido un equipo/intrumento"})
                    # if not request.POST['lista_items2']:
                    #     return JsonResponse({"result": "bad", "mensaje": u"No a elegido un material/insumo"})
                    if not 'individual' in request.POST and not 'grupo' in request.POST:
                        return JsonResponse({"result": "bad", "mensaje": u"No ha elegido un Tipo de Práctica"})
                    if 'grupo' in request.POST and not int(request.POST['cantidadalumnogrupo']) > 1:
                        return JsonResponse({"result": "bad", "mensaje": u"La cantidad de Alumnos debe ser mayor a 1"})

                    # listadoequipos = InventarioLaboratorioAcademia.objects.filter(id__in=[int(datos['idequipo']) for datos in json.loads(request.POST['lista_items1'])]) if request.POST['lista_items1'] else []
                    listadoequipos = list(map(int, json.loads(request.POST['lista_items1'])))
                    listaproductos = []
                    listaobjetivos = []
                    listabibbasica = []
                    listabibcomplementario = []
                    listabibvirtual = []
                    listatemas = []
                    listadosunidad = []
                    listadosarticulo = []
                    id_unidad = None
                    for datos in json.loads(request.POST['lista_items2']):
                        listaproductos.append((int(datos['idproducto']), int(datos['cantidad'])))
                    for datos in json.loads(request.POST['lista_items3']):
                        listaobjetivos.append(datos['objetivos'])
                    for datos in json.loads(request.POST['lista_items5']):
                        listabibbasica.append(datos['basico'])
                    for datos in json.loads(request.POST['lista_items4']):
                        listabibcomplementario.append(datos['codcomplementario'])
                    for datos in json.loads(request.POST['lista_items6']):
                        listabibvirtual.append(datos['virtual'])
                    for datos in json.loads(request.POST['lista_items7']):
                        listatemas.append(datos['idtema'])
                    for datos in json.loads(request.POST['lista_items8']):
                        listadosunidad.append(datos['idunidad'])
                    for datos in json.loads(request.POST['lista_items9']):
                        listadosarticulo.append(datos['idarticulo'])
                    for codigounidad in listadosunidad:
                        id_unidad = codigounidad
                    if form.is_valid():
                        silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        practica = GPGuiaPracticaSemanal(silabosemanal_id=int(encrypt(request.POST['id'])),
                                                         # temapractica_id=request.POST['temapractica'],
                                                         # subtemapractica=form.cleaned_data['subtemapractica'],
                                                         numeropractica=int(encrypt(request.POST['npractica'])),
                                                         tiempoactividad=request.POST['tiempoactividad'],
                                                         fechaelaboracion=datetime.now().date(),
                                                         individual=form.cleaned_data['individual'] if 'individual' in request.POST else False,
                                                         grupo=form.cleaned_data['grupo'] if 'grupo' in request.POST else False,
                                                         cantidadalumnogrupo=form.cleaned_data['cantidadalumnogrupo'] if 'cantidadalumnogrupo' in request.POST else 0,
                                                         # objetvopactica=form.cleaned_data['objetvopactica'],
                                                         # actividaddesarrollar=form.cleaned_data['actividaddesarrollar'],
                                                         # rubica=form.cleaned_data['rubrica'],
                                                         unidad_id=id_unidad,
                                                         nombrepractica=form.cleaned_data['nombrepractica'],
                                                         asistida=form.cleaned_data['asistida'] if 'asistida' in request.POST else False,
                                                         noasistida=form.cleaned_data['noasistida'] if 'noasistida' in request.POST else False,
                                                         tipoambiente=form.cleaned_data['tipoambiente'],
                                                         nombreambiente=form.cleaned_data['nombreambiente'],
                                                         ubicacionambiente=form.cleaned_data['ubicacionambiente'],
                                                         laboratorio=silabosemana.silabo.materia.laboratorio if silabosemana.silabo.materia.laboratorio else None)
                        practica.save(request)
                        log(u'Adiciono una practica a la semana: %s - %s' % (practica, practica.silabosemanal.silabo.materia), request, "add")

                        # if 'instruccionarchivo' in request.FILES:
                        #     newfile = request.FILES['instruccionarchivo']
                        #     newfile._name = generar_nombre("instruccion_", newfile._name)
                        #     instruccion = GPInstruccion(guiasemanal=practica,observacion=form.cleaned_data['instruccionobservacion'],archivo=newfile)
                        #     instruccion.save(request)
                        # else:
                        instruccion = GPInstruccion(guiasemanal=practica, observacion=form.cleaned_data['instruccionobservacion'])
                        instruccion.save(request)
                        for equipo in listadoequipos:
                            detallelaboratorio = GPLugarPracticaDetalle(guiapractica=practica, detalle_id=equipo.id)
                            detallelaboratorio.save(request)
                        for producto in listaproductos:
                            detallelaboratorio = GPLugarPracticaDetalle(guiapractica=practica, detalle_id=int(producto[0]), cantidad=int(producto[1]))
                            detallelaboratorio.save(request)
                        for objetivo in listaobjetivos:
                            detalleobjetivo = GPObjetivo(guiasemanal=practica, nombre=objetivo)
                            detalleobjetivo.save(request)
                        for basica in listabibbasica:
                            detallebasica = GPBibliografiaBasica(guiasemanal=practica, basica_id=basica)
                            detallebasica.save(request)
                        for complementaria in listabibcomplementario:
                            detallecomplementaria = GPBibliografiaComplementaria(guiasemanal=practica, complementaria_id=complementaria)
                            detallecomplementaria.save(request)
                        for virtual in listabibvirtual:
                            detallevirtual = GPBibliografiaVirtual(guiasemanal=practica, virtual_id=virtual)
                            detallevirtual.save(request)
                        for idtema in listatemas:
                            detalletema = GPTemas(guiasemanal=practica, tema_id=idtema)
                            detalletema.save(request)
                        for idarti in listadosarticulo:
                            detallearticulo = GPArticulo(guiasemanal=practica, articulo_id=idarti)
                            detallearticulo.save(request)
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addpracticarecursovdos':
                try:
                    form = GPPracticaRecursoFrom(request.POST, request.FILES)
                    listmap = lambda x: list(map(int, json.loads(request.POST[x])))
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    if not 'individual' in request.POST and not 'grupo' in request.POST and not 'asistida' in request.POST and not 'noasistida' in request.POST:
                        raise NameError(u"No ha elegido un tipo de práctica")
                    if 'grupo' in request.POST and not int(request.POST['cantidadalumnogrupo']) > 1:
                        raise NameError(u"La cantidad de Alumnos debe ser mayor a 1")

                    id_unidad = None
                    listabibvirtual, listadosarticulo = [], []
                    listadoequipos = listmap('lista_items1') if request.POST['lista_items1'] else []
                    listadolibroodilo = listmap('lista_items10') if request.POST['lista_items10'] else []
                    listaproductos, listaobjetivos, listabibbasica, listabibcomplementario = [], [], [], []
                    listabibvirtual = json.loads(request.POST['lista_items6']) if request.POST['lista_items6'] else []

                    for datos in json.loads(request.POST['lista_items2']):
                        listaproductos.append((int(datos['idproducto']), int(datos['cantidad'])))
                    for datos in json.loads(request.POST['lista_items3']):
                        listaobjetivos.append(datos['objetivos'])
                    for datos in json.loads(request.POST['lista_items5']):
                        listabibbasica.append(datos['basico'])
                    for datos in json.loads(request.POST['lista_items4']):
                        listabibcomplementario.append(datos['codcomplementario'])
                    for datos in json.loads(request.POST['lista_items9']):
                        listadosarticulo.append(datos['idarticulo'])

                    cantidadalumnogrupo = 0
                    if 'cantidadalumnogrupo' in request.POST:
                        if request.POST['cantidadalumnogrupo'].isdigit():
                            cantidadalumnogrupo = int(request.POST['cantidadalumnogrupo'])

                    id_laboratorio = int(request.POST.get('laboratorio', 0)) if int(request.POST.get('laboratorio', 0)) else None
                    if not id_laboratorio:
                        raise NameError('Porfavor, seleccione un registro del campo: Ubicación del ambiente de aprendizaje.')

                    if form.is_valid():
                        practica = GPGuiaPracticaSemanal(silabosemanal=silabosemana,
                                                         numeropractica=int(encrypt(request.POST['npractica'])),
                                                         tiempoactividad=request.POST['tiempoactividad'],
                                                         fechaelaboracion=datetime.now().date(),
                                                         laboratorio_id=id_laboratorio,
                                                         individual=form.cleaned_data['individual'] if 'individual' in request.POST else False,
                                                         grupo=form.cleaned_data['grupo'] if 'grupo' in request.POST else False,
                                                         cantidadalumnogrupo=cantidadalumnogrupo,
                                                         unidad_id=id_unidad,
                                                         nombrepractica=form.cleaned_data['nombrepractica'],
                                                         asistida=form.cleaned_data['asistida'] if 'asistida' in request.POST else False,
                                                         noasistida=form.cleaned_data['noasistida'] if 'noasistida' in request.POST else False,
                                                         tipoambiente=form.cleaned_data['tipoambiente'],
                                                         nombreambiente=form.cleaned_data['nombreambiente'],
                                                         #ubicacionambiente=form.cleaned_data['ubicacionambiente'],
                                                         cantidadgrupos=int(request.POST['cantidadgrupos']))
                        practica.save(request)
                        log(u'Adiciono una practica a la semana: %s - %s' % (practica, practica.silabosemanal.silabo.materia), request, "add")
                        instruccion = GPInstruccion(guiasemanal=practica, observacion=form.cleaned_data['instruccionobservacion'])
                        instruccion.save(request)

                        for r in listadoequipos:
                            g = GPRequerimientoPractica(guiapractica=practica, requerimiento_id=r)
                            g.save(request)

                        for r in listaproductos:
                            g = GPRequerimientoPractica(guiapractica=practica, requerimiento_id=r[0], cantidad=r[1])
                            g.save(request)

                        for objetivo in listaobjetivos:
                            detalleobjetivo = GPObjetivo(guiasemanal=practica, nombre=objetivo)
                            detalleobjetivo.save(request)

                        for basica in listabibbasica:
                            detallebasica = GPBibliografiaBasica(guiasemanal=practica, bibliografiaprogramaanaliticoasignatura_id=basica)
                            detallebasica.save(request)

                        for complementaria in listabibcomplementario:
                            detallecomplementaria = GPBibliografiaComplementaria(guiasemanal=practica, librokohaprogramaanaliticoasignatura_id=complementaria)
                            detallecomplementaria.save(request)

                        for virtual in listabibvirtual:
                            detallevirtual = GPBibliografiaVirtual(guiasemanal=practica, virtual_id=virtual)
                            detallevirtual.save(request)

                        for idarti in listadosarticulo:
                            detallearticulo = GPArticulo(guiasemanal=practica, articuloinvestigacion_id=idarti)
                            detallearticulo.save(request)

                        for idarti in listadolibroodilo:
                            detallearticulo = GPLibrosOdilo(guiapractica=practica, libroodilo_id=idarti)
                            detallearticulo.save(request)

                        if not periodo.tipo.id in [3, 4]:
                            try:
                                silabosemanal = practica.silabosemanal
                                modeloevaluativo, rubricamoodle, calificar = None, None, False
                                archivocreado, urlorerror = generar_archivo_guia_practica(practica)
                                carrera = silabosemanal.silabo.materia.asignaturamalla.malla.carrera
                                pmateria = silabosemanal.silabo.materia.planificacionclasesilabo_materia_set.filter(status=True).first()
                                if silabosemanal.test_plansemanal(4):
                                    calificar = True
                                    if clase := PlanificacionClaseSilabo.objects.filter(tipoplanificacion=pmateria.tipoplanificacion, semana=silabosemanal.numsemana, status=True).first():
                                        modeloevaluativo = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, nombre__in=['N2', 'N4'], migrarmoodle=True, recurso=True, status=True).first()

                                    p, r = None, None
                                    if RubricaMoodle.objects.filter(status=True, profesor=profesor, estado=True, tipotarea=2):
                                        p = RubricaMoodle.objects.filter(status=True, profesor=profesor, estado=True, tipotarea=2).distinct()
                                    if c := carrera.carrerarubricamoodle_set.filter(status=True, rubrica__tipotarea=2).values_list('rubrica__id', flat=True):
                                        r = RubricaMoodle.objects.filter(pk__in=c, status=True, estado=True, tipotarea=2).distinct()
                                    else:
                                        r = RubricaMoodle.objects.filter(status=True, estado=True, tipotarea=2, carrerarubricamoodle__isnull=True).distinct()

                                    queryset = p.union(r) if p and r else p if p else r
                                    queryset = queryset.filter(id=4) if queryset.filter(id=4).exists() else queryset
                                    rubricamoodle = queryset[0] if len(queryset) else None

                                tarea = TareaPracticaSilaboSemanal(detallemodelo=modeloevaluativo,
                                                                   silabosemanal=silabosemanal,
                                                                   estado_id=1,
                                                                   rubricamoodle=rubricamoodle,
                                                                   calificar=calificar,
                                                                   nombre=f"TRABAJO PRÁCTICO EXPERIMENTAL_{practica.numeropractica}",
                                                                   word=True,
                                                                   pdf=True,
                                                                   tiporecurso_id=10,
                                                                   archivotareapracticasilabo=urlorerror if archivocreado else None)
                                tarea.save(request)
                                # Para planificacion de los temas de los silabos en cada actividad
                                temasemanal = EvaluacionAprendizajeTema.objects.values_list('temasemanal', flat=True).filter(temasemanal__status=True, evaluacion__evaluacionaprendizaje_id=4, evaluacion__silabosemanal=practica.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                                aprendizajestemas(request, temasemanal, 4, tarea.silabosemanal.id)
                                # ORDENA LA ACTIVIDAD
                                tarea.silabosemanal.silabo.update_ordenaactividad(4)
                            except Exception as ex:
                                pass

                        return JsonResponse({"result": "ok"})
                    else:
                        for k, v in form.errors.items():
                            raise NameError(f"Error en {k}, {v[0]}")
                except Exception as ex:
                    import sys
                    transaction.set_rollback(True)
                    line_error = sys.exc_info()[-1].tb_lineno
                    return JsonResponse({"result": "bad", "mensaje": f"Error al guardar los datos. {ex} - [{line_error}]"})

            elif action == 'delpractica':
                try:
                    if 'id' in request.POST:
                        equipo = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        if equipo.gplugarpracticadetalle_set.all().exists():
                            equipo.gplugarpracticadetalle_set.all().update(status=False)
                        log(u'Elimino la Práctica : %s' % (equipo.silabosemanal.silabo.materia.asignatura), request, "del")
                        equipo.status = False
                        equipo.save(request)
                        return JsonResponse({"result": "ok"}, )
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delpracticarecurso':
                try:
                    if 'id' in request.POST:
                        equipo = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        if equipo.gplugarpracticadetalle_set.all().exists():
                            equipo.gplugarpracticadetalle_set.all().update(status=False)
                        log(u'Elimino la Práctica recurso : %s' % (equipo.silabosemanal.silabo.materia.asignatura), request, "del")
                        equipo.status = False
                        equipo.save(request)
                        return JsonResponse({"result": "ok"}, )
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # Editar Guia de Práctica
            elif action == 'editpractica':
                try:
                    form = GPPracticaFrom(request.POST, request.FILES)
                    # if request.POST['lista_items1'] and not json.loads(request.POST['lista_items1']):
                    #     return JsonResponse({"result": "bad", "mensaje": u"No a elegido un equipo/intrumento"})
                    # if not request.POST['lista_items2']:
                    #     return JsonResponse({"result": "bad", "mensaje": u"No a elegido un material/insumo"})
                    if not 'individual' in request.POST and not 'grupo' in request.POST:
                        return JsonResponse({"result": "bad", "mensaje": u"No ha elegido un Tipo de Práctica"})
                    if 'grupo' in request.POST and not int(request.POST['cantidadalumnogrupo']) > 1:
                        return JsonResponse({"result": "bad", "mensaje": u"La cantidad de Alumnos debe ser mayor a 1"})
                    #listadoequipos =InventarioLaboratorioAcademia.objects.filter(id__in=[int(datos['idequipo']) for datos in json.loads(request.POST['lista_items1'])]) if request.POST['lista_items1'] else []
                    listadoequipos = list(map(int, json.loads(request.POST['lista_items1'])))
                    listaproductos = []
                    for datos in json.loads(request.POST['lista_items2']):
                        listaproductos.append((int(datos['idproducto']), int(datos['cantidad'])))
                    if form.is_valid():
                        practica = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        practica.temapractica_id = request.POST['temapractica']
                        practica.subtemapractica = form.cleaned_data['subtemapractica']
                        practica.tiempoactividad = request.POST['tiempoactividad']
                        practica.fechaelaboracion = datetime.now().date()
                        practica.individual = form.cleaned_data['individual'] if 'individual' in request.POST else False
                        practica.grupo = form.cleaned_data['grupo'] if 'grupo' in request.POST else False
                        practica.cantidadalumnogrupo = form.cleaned_data['cantidadalumnogrupo'] if 'cantidadalumnogrupo' in request.POST else 0
                        practica.objetvopactica = form.cleaned_data['objetvopactica']
                        practica.actividaddesarrollar = form.cleaned_data['actividaddesarrollar']
                        practica.rubica = form.cleaned_data['rubica']
                        practica.save(request)
                        log(u'Adiciono una practica a la semana: %s - %s' % (practica, practica.silabosemanal.silabo.materia), request, "edit")
                        instruccion = GPInstruccion.objects.get(pk=practica.gpinstruccion_set.filter(status=True)[0].id, status=True)
                        if 'instruccionarchivo' in request.FILES:
                            newfile = request.FILES['instruccionarchivo']
                            newfile._name = generar_nombre("instruccion_", newfile._name)
                            instruccion.observacion = form.cleaned_data['instruccionobservacion']
                            instruccion.archivo = newfile
                        else:
                            instruccion.observacion = form.cleaned_data['instruccionobservacion']
                        instruccion.save(request)

                        practica.gprequerimientopractica_set.filter(status=True).delete()

                        for r in listadoequipos:
                            g = GPRequerimientoPractica(guiapractica=practica, requerimiento_id=r)
                            g.save(request)

                        for r in listaproductos:
                            g = GPRequerimientoPractica(guiapractica=practica, requerimiento_id=r[0], cantidad=r[1])
                            g.save(request)

                        practica.gplugarpracticadetalle_set.filter(detalle__activo__isnull=False).exclude(detalle__in=listadoequipos).update(status=False)
                        for equipo in listadoequipos:
                            if practica.gplugarpracticadetalle_set.filter(status=True, detalle_id=equipo.id).exists():
                                detalle = practica.gplugarpracticadetalle_set.get(status=True, detalle_id=equipo.id)
                                detalle.status = True
                                detalle.save(request)
                            else:
                                detalle = GPLugarPracticaDetalle(guiapractica=practica, detalle_id=equipo.id)
                                detalle.save(request)
                        if not listaproductos:
                            practica.gplugarpracticadetalle_set.filter(detalle__producto__isnull=False).update(status=False)
                        for producto in listaproductos:
                            if practica.gplugarpracticadetalle_set.filter(status=True, detalle_id=producto[0]).exists():
                                detalle = practica.gplugarpracticadetalle_set.get(detalle_id=producto[0])
                                detalle.status = True
                                detalle.cantidad = producto[1]
                                detalle.save(request)
                            else:
                                detalle = GPLugarPracticaDetalle(guiapractica=practica, detalle_id=int(producto[0]), cantidad=int(producto[1]))
                                detalle.save(request)
                        log(u'Editó guia de práctica : %s' % (practica), request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editpracticarecurso':
                try:
                    form = GPPracticaRecursoFrom(request.POST, request.FILES)
                    if not 'individual' in request.POST and not 'grupo' in request.POST:
                        return JsonResponse({"result": "bad", "mensaje": u"No ha elegido un Tipo de Práctica"})
                    if 'grupo' in request.POST and not int(request.POST['cantidadalumnogrupo']) > 1:
                        return JsonResponse({"result": "bad", "mensaje": u"La cantidad de Alumnos debe ser mayor a 1"})
                    listadoequipos = [] #InventarioLaboratorioAcademia.objects.filter(id__in=[int(datos['idequipo']) for datos in json.loads(request.POST['lista_items1'])]) if request.POST['lista_items1'] else []
                    listaproductos = []
                    listabibbasica = []
                    listabibcomplementario = []
                    listabibvirtual = []
                    listaobjetivos = []
                    listadostemas = []
                    listadosunidad = []
                    listadosarticulo = []
                    for datos in json.loads(request.POST['lista_items2']):
                        listaproductos.append((int(datos['idproducto']), int(datos['cantidad'])))
                    for datos in json.loads(request.POST['lista_items3']):
                        listaobjetivos.append(datos['objetivos'])
                    for datos in json.loads(request.POST['lista_items5']):
                        listabibbasica.append(datos['basico'])
                    for datos in json.loads(request.POST['lista_items4']):
                        listabibcomplementario.append(datos['codcomplementario'])
                    for datos in json.loads(request.POST['lista_items6']):
                        listabibvirtual.append(datos['virtual'])
                    for datos in json.loads(request.POST['lista_items7']):
                        listadostemas.append(datos['idtema'])
                    for datos in json.loads(request.POST['lista_items8']):
                        listadosunidad.append(datos['idunidad'])
                    for datos in json.loads(request.POST['lista_items9']):
                        listadosarticulo.append(datos['idarticulo'])
                    if form.is_valid():
                        practica = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        # practica.temapractica_id=request.POST['temapractica']
                        # practica.subtemapractica = form.cleaned_data['subtemapractica']
                        practica.tiempoactividad = request.POST['tiempoactividad']
                        practica.fechaelaboracion = datetime.now().date()
                        practica.individual = form.cleaned_data['individual'] if 'individual' in request.POST else False
                        practica.grupo = form.cleaned_data['grupo'] if 'grupo' in request.POST else False
                        practica.cantidadalumnogrupo = form.cleaned_data['cantidadalumnogrupo'] if 'cantidadalumnogrupo' in request.POST else 0
                        # practica.objetvopactica=form.cleaned_data['objetvopactica']
                        # practica.actividaddesarrollar=form.cleaned_data['actividaddesarrollar']
                        practica.nombrepractica = form.cleaned_data['nombrepractica']
                        practica.asistida = form.cleaned_data['asistida'] if 'asistida' in request.POST else False
                        practica.noasistida = form.cleaned_data['noasistida'] if 'noasistida' in request.POST else False
                        practica.tipoambiente = form.cleaned_data['tipoambiente']
                        practica.nombreambiente = form.cleaned_data['nombreambiente']
                        practica.ubicacionambiente = form.cleaned_data['ubicacionambiente']
                        # practica.rubica=form.cleaned_data['rubrica']
                        for codigounidad in listadosunidad:
                            practica.unidad_id = codigounidad
                            practica.save(request)

                        practica.save(request)

                        if practica.gpinstruccion_set.filter(status=True):
                            instruccion = GPInstruccion.objects.get(pk=practica.gpinstruccion_set.filter(status=True)[0].id, status=True)
                            instruccion.observacion = form.cleaned_data['instruccionobservacion']
                            instruccion.save(request)
                        else:
                            instruccion = GPInstruccion(guiasemanal=practica, observacion=form.cleaned_data['instruccionobservacion'])
                            instruccion.save(request)
                        practica.gplugarpracticadetalle_set.filter(detalle__activo__isnull=False).exclude(detalle__in=listadoequipos).update(status=False)
                        for equipo in listadoequipos:
                            if practica.gplugarpracticadetalle_set.filter(status=True, detalle_id=equipo.id).exists():
                                detalle = practica.gplugarpracticadetalle_set.get(status=True, detalle_id=equipo.id)
                                detalle.status = True
                                detalle.save(request)
                            else:
                                detalle = GPLugarPracticaDetalle(guiapractica=practica, detalle_id=equipo.id)
                                detalle.save(request)
                        if not listaproductos:
                            practica.gplugarpracticadetalle_set.filter(detalle__producto__isnull=False).update(status=False)
                        for producto in listaproductos:
                            if practica.gplugarpracticadetalle_set.filter(status=True, detalle_id=producto[0]).exists():
                                detalle = practica.gplugarpracticadetalle_set.get(detalle_id=producto[0])
                                detalle.status = True
                                detalle.cantidad = producto[1]
                                detalle.save(request)
                            else:
                                detalle = GPLugarPracticaDetalle(guiapractica=practica, detalle_id=int(producto[0]), cantidad=int(producto[1]))
                                detalle.save(request)
                        deletebasica = GPBibliografiaBasica.objects.filter(guiasemanal=practica)
                        deletebasica.update(status=False)
                        deletecomplementaria = GPBibliografiaComplementaria.objects.filter(guiasemanal=practica)
                        deletecomplementaria.update(status=False)
                        deletevirtual = GPBibliografiaVirtual.objects.filter(guiasemanal=practica)
                        deletevirtual.update(status=False)
                        deletetema = GPTemas.objects.filter(guiasemanal=practica)
                        deletetema.update(status=False)
                        deletearticulo = GPArticulo.objects.filter(guiasemanal=practica)
                        deletearticulo.update(status=False)
                        for objetivo in listaobjetivos:
                            detalleobjetivo = GPObjetivo(guiasemanal=practica, nombre=objetivo)
                            detalleobjetivo.save(request)
                        for basica in listabibbasica:
                            detallebasica = GPBibliografiaBasica(guiasemanal=practica, basica_id=basica)
                            detallebasica.save(request)
                        for complementaria in listabibcomplementario:
                            detallecomplementaria = GPBibliografiaComplementaria(guiasemanal=practica, complementaria_id=complementaria)
                            detallecomplementaria.save(request)
                        for virtual in listabibvirtual:
                            detallevirtual = GPBibliografiaVirtual(guiasemanal=practica, virtual_id=virtual)
                            detallevirtual.save(request)
                        for idtema in listadostemas:
                            detalletema = GPTemas(guiasemanal=practica, tema_id=idtema)
                            detalletema.save(request)
                        for idarti in listadosarticulo:
                            detallearticulo = GPArticulo(guiasemanal=practica, articulo_id=idarti)
                            detallearticulo.save(request)

                        log(u'Editó recurso de práctica: %s - %s' % (practica, practica.silabosemanal.silabo.materia), request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editpracticarecursovdos':
                try:

                    calugrupo = request.POST.get('cantidadalumnogrupo', '0')
                    listmap = lambda x: list(map(int, json.loads(request.POST[x])))
                    form = GPPracticaRecursoFrom(request.POST, request.FILES)
                    practica = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.POST['idpractica'])))

                    if not 'individual' in request.POST and not 'grupo' in request.POST:
                        raise NameError(f"No ha elegido un tipo de práctica")
                    if 'grupo' in request.POST and not int(calugrupo) > 1:
                        raise NameError(f"La cantidad de Alumnos debe ser mayor a 1")

                    listabibbasica, listabibcomplementario = [], []
                    listabibvirtual, listadosarticulo = json.loads(request.POST['lista_items6']), []
                    listadolibroodilo, listadoequipos = listmap('lista_items10'), listmap('lista_items1')

                    listaobjetivos = [e['objetivos'] for e in json.loads(request.POST['lista_items3'])]

                    for datos in json.loads(request.POST['lista_items5']):
                        listabibbasica.append(datos['basico'])

                    for datos in json.loads(request.POST['lista_items4']):
                        listabibcomplementario.append(datos['codcomplementario'])

                    for datos in json.loads(request.POST['lista_items9']):
                        listadosarticulo.append(datos['idarticulo'])

                    id_laboratorio = int(request.POST['laboratorio']) if 'laboratorio' in request.POST and request.POST['laboratorio'] else None
                    if not id_laboratorio:
                        raise NameError('Porfavor, seleccione un registro del campo: Ubicación del ambiente de aprendizaje.')
                    if form.is_valid():
                        practica.tiempoactividad = request.POST['tiempoactividad']
                        practica.grupo = form.cleaned_data['grupo'] if 'grupo' in request.POST else False
                        practica.asistida = form.cleaned_data['asistida'] if 'asistida' in request.POST else False
                        practica.individual = form.cleaned_data['individual'] if 'individual' in request.POST else False
                        practica.cantidadalumnogrupo = int(calugrupo) if calugrupo.isdigit() and 'grupo' in request.POST else 0
                        practica.laboratorio_id = id_laboratorio
                        practica.noasistida = form.cleaned_data['noasistida'] if 'noasistida' in request.POST else False
                        practica.tipoambiente = form.cleaned_data['tipoambiente']
                        practica.cantidadgrupos = int(request.POST['cantidadgrupos'])
                        practica.nombreambiente = form.cleaned_data['nombreambiente']
                        #practica.ubicacionambiente = form.cleaned_data['ubicacionambiente'] if 'ubicacionambiente' in request.POST else None
                        practica.save(request)

                        listadoequipos = list(map(int, json.loads(request.POST['lista_items1'])))
                        listaproductos = [(int(e['idproducto']), int(e['cantidad'])) for e in json.loads(request.POST['lista_items2'])]

                        practica.gprequerimientopractica_set.filter(status=True).delete()

                        for r in listadoequipos:
                            g = GPRequerimientoPractica(guiapractica=practica, requerimiento_id=r)
                            g.save(request)

                        for r in listaproductos:
                            g = GPRequerimientoPractica(guiapractica=practica, requerimiento_id=r[0], cantidad=r[1])
                            g.save(request)

                        practica.gpinstruccion_set.filter(status=True).update(status=False)
                        instruccion = GPInstruccion(guiasemanal=practica, observacion=form.cleaned_data['instruccionobservacion'])
                        instruccion.save(request)

                        practica.gpobjetivo_set.filter(status=True).update(status=False)
                        for e in listaobjetivos:
                            gpo = GPObjetivo(guiasemanal=practica, nombre=e)
                            gpo.save(request)

                        practica.gpbibliografiabasica_set.filter(status=True).update(status=False)
                        for basica in listabibbasica:
                            detallebasica = GPBibliografiaBasica(guiasemanal=practica, bibliografiaprogramaanaliticoasignatura_id=basica)
                            detallebasica.save(request)

                        practica.gpbibliografiacomplementaria_set.filter(status=True).update(status=False)
                        for complementaria in listabibcomplementario:
                            detallecomplementaria = GPBibliografiaComplementaria(guiasemanal=practica, librokohaprogramaanaliticoasignatura_id=complementaria)
                            detallecomplementaria.save(request)

                        practica.gpbibliografiavirtual_set.filter(status=True).update(status=False)
                        for virtual in listabibvirtual:
                            detallevirtual = GPBibliografiaVirtual(guiasemanal=practica, virtual_id=virtual)
                            detallevirtual.save(request)

                        practica.gparticulo_set.filter(status=True).update(status=False)
                        for idarti in listadosarticulo:
                            detallearticulo = GPArticulo(guiasemanal=practica, articuloinvestigacion_id=idarti)
                            detallearticulo.save(request)

                        practica.gplibrosodilo_set.filter(status=True).update(status=False)
                        for idarti in listadolibroodilo:
                            detallearticulo = GPLibrosOdilo(guiapractica=practica, libroodilo_id=idarti)
                            detallearticulo.save(request)

                        if tareas := practica.silabosemanal.tareapracticasilabosemanal_set.filter(status=True):
                            archivocreado, urlorerror = generar_archivo_guia_practica(practica)
                            if archivocreado and len(tareas) == 1:
                                tarea = tareas.first()
                                if tarea and tarea.estado.pk in [1, 3]:
                                    tarea.archivotareapracticasilabo = urlorerror
                                    tarea.save(request)

                        log(u'Editó recurso de práctica: %s - %s' % (practica, practica.silabosemanal.silabo.materia), request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": f"Error al guardar los datos. {ex}"})

            elif action == 'consultatemas':
                try:
                    semana = SilaboSemanal.objects.get(pk=request.POST['idsemana'])
                    listadotemas = semana.temas_silabounidad(request.POST['idunidad'])
                    lista = []
                    for tema in listadotemas:
                        lista.append([tema[0], tema[1]])
                    return JsonResponse({'result': 'ok', 'lista': lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'deleteobjetivo':
                try:
                    delobjetivo = GPObjetivo.objects.get(pk=request.POST['id'])
                    log(u'Eliminó objetivo : %s' % (delobjetivo.nombre), request, "del")
                    delobjetivo.status = False
                    delobjetivo.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # Adicionar silabo firmado
            elif action == 'silabodigitalfirmado':
                try:
                    form = SilaboDigitalFirmadoForm(request.FILES)
                    if form.is_valid():
                        silabo = Silabo.objects.get(pk=int(encrypt(request.POST['id'])))
                        if 'silabofirmado' in request.FILES:
                            newfile = request.FILES['silabofirmado']
                            newfile._name = generar_nombre("SilaboFirmado", newfile._name)
                            silabo.silabofirmado = newfile
                            silabo.save(request)
                            log(u'Adiciono un Silabo Firmado: %s' % silabo, request, "edit")
                            return JsonResponse({"result": "ok"})
                        else:
                            return JsonResponse({"result": "bad", "mensaje": u"No se Guardo el Silbo."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # Editar Bibliografia semanal de la planificación Silabo
            elif action == 'editbibliografia':
                try:
                    listaidscomplementarios = []
                    listaidsarticulos = []
                    lista_items1 = json.loads(request.POST['lista_items2'])
                    listadobibliografiacomplementaria = LibroKohaProgramaAnaliticoAsignatura.objects.filter(id__in=[int(datos['idbibliografia']) for datos in json.loads(request.POST['lista_items2'])]) if request.POST['lista_items2'] else []
                    silabosemana = SilaboSemanal.objects.get(pk=int(request.POST['id']))
                    if lista_items1:
                        for lista in lista_items1:
                            if int(lista['idtipocomplementaria']) == 1:
                                listaidscomplementarios.append(lista['idbibliografia'])
                                if not DetalleSilaboSemanalBibliografiaDocente.objects.filter(silabosemanal_id=silabosemana.id, silabosemanal__status=True, status=True, librokohaprogramaanaliticoasignatura_id=lista['idbibliografia']).exists():
                                    deta = DetalleSilaboSemanalBibliografiaDocente(silabosemanal_id=silabosemana.id, librokohaprogramaanaliticoasignatura_id=lista['idbibliografia'])
                                    deta.save(request)
                                    log(u'Adicionó nueva Bibliografia complentaria: %s al sílabo de la materia %s:' % (deta.librokohaprogramaanaliticoasignatura, deta.silabosemanal.silabo.materia), request, "add")
                            if int(lista['idtipocomplementaria']) == 2:
                                listaidsarticulos.append(lista['idbibliografia'])
                                if not ArticuloSilaboSemanal.objects.filter(silabosemanal_id=silabosemana.id, silabosemanal__status=True, status=True, articulo_id=lista['idbibliografia']).exists():
                                    deta = ArticuloSilaboSemanal(silabosemanal_id=silabosemana.id, articulo_id=lista['idbibliografia'])
                                    deta.save(request)
                                    log(u'Adicionó nuevo Articulo complentario: %s al sílabo de la materia %s:' % (deta.articulo, deta.silabosemanal.silabo.materia), request, "add")
                    if listaidscomplementarios:
                        if silabosemana.detallesilabosemanalbibliografiadocente_set.filter(silabosemanal__status=True, status=True).exclude(librokohaprogramaanaliticoasignatura_id__in=listaidscomplementarios):
                            for bibli in silabosemana.detallesilabosemanalbibliografiadocente_set.filter(silabosemanal__status=True, status=True).exclude(librokohaprogramaanaliticoasignatura_id__in=listaidscomplementarios):
                                log(u'Eliminó Bibliografia complentaria: %s al sílabo de la materia %s:' % (bibli.librokohaprogramaanaliticoasignatura, bibli.silabosemanal.silabo.materia), request, "del")
                            silabosemana.detallesilabosemanalbibliografiadocente_set.filter(silabosemanal__status=True, status=True).exclude(librokohaprogramaanaliticoasignatura_id__in=listaidscomplementarios).update(status=False)
                    if listaidsarticulos:
                        if silabosemana.articulosilabosemanal_set.filter(silabosemanal__status=True, status=True).exclude(articulo_id__in=listaidsarticulos):
                            for bibli in silabosemana.articulosilabosemanal_set.filter(silabosemanal__status=True, status=True).exclude(articulo_id__in=listaidsarticulos):
                                log(u'Eliminó Articulo complentaria: %s al sílabo de la materia %s:' % (bibli.articulo, bibli.silabosemanal.silabo.materia), request, "del")
                            silabosemana.articulosilabosemanal_set.filter(silabosemanal__status=True, status=True).exclude(articulo_id__in=listaidsarticulos).update(status=False)
                    if 'lista_items3' in request.POST:
                        bibliografia = json.loads(request.POST['lista_items3'])
                        for basica in json.loads(request.POST['lista_items3']):
                            if not DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal_id=silabosemana.id, bibliografiaprogramaanaliticoasignatura_id=basica, silabosemanal__status=True, status=True).exists():
                                detab = DetalleSilaboSemanalBibliografia(silabosemanal_id=silabosemana.id, bibliografiaprogramaanaliticoasignatura_id=basica)
                                detab.save(request)
                                log(u'Adicionó nueva Bibliografia Basica: %s al sílabo de la materia %s:' % (detab.bibliografiaprogramaanaliticoasignatura.librokohaprogramaanaliticoasignatura, detab.silabosemanal.silabo.materia), request, "add")
                        if silabosemana.detallesilabosemanalbibliografia_set.filter(silabosemanal__status=True, status=True).exclude(bibliografiaprogramaanaliticoasignatura_id__in=bibliografia):
                            for bibli in silabosemana.detallesilabosemanalbibliografia_set.filter(silabosemanal__status=True, status=True).exclude(bibliografiaprogramaanaliticoasignatura_id__in=bibliografia):
                                log(u'Eliminó Bibliografia Basica: %s al sílabo de la materia %s:' % (bibli.bibliografiaprogramaanaliticoasignatura.librokohaprogramaanaliticoasignatura, bibli.silabosemanal.silabo.materia), request, "del")
                            silabosemana.detallesilabosemanalbibliografia_set.filter(silabosemanal__status=True, status=True).exclude(bibliografiaprogramaanaliticoasignatura_id__in=bibliografia).update(status=False)
                    if 'lista_items4' in request.POST:
                        bibliapa = [x['bibliografiaexterna'] for x in json.loads(request.POST['lista_items4'])]
                        for apa in bibliapa:
                            if not BibliograbiaAPASilabo.objects.filter(silabosemanal_id=silabosemana.id, bibliografia=apa, silabosemanal__status=True, status=True).exists():
                                bapa = BibliograbiaAPASilabo(silabosemanal_id=silabosemana.id, bibliografia=apa)
                                bapa.save(request)
                                log(u'Adicionó Bibliografia Apa: %s al sílabo de la materia %s:' % (bapa, bapa.silabosemanal.silabo.materia), request, "add")
                        if silabosemana.bibliograbiaapasilabo_set.filter(silabosemanal__status=True, status=True).exclude(bibliografia__in=bibliapa):
                            for apa in silabosemana.bibliograbiaapasilabo_set.filter(silabosemanal__status=True, status=True).exclude(bibliografia__in=bibliapa):
                                log(u'Eliminó Bibliografia Apa: %s del  sílabo de la materia %s:' % (apa, apa.silabosemanal.silabo.materia), request, "del")
                            silabosemana.bibliograbiaapasilabo_set.filter(silabosemanal__status=True, status=True).exclude(bibliografia__in=bibliapa).update(status=False)

                    if 'lista_odilo_libros' in request.session:
                        lista_odilo_libros = request.session['lista_odilo_libros']
                        if lista_odilo_libros:
                            for odil in lista_odilo_libros:
                                if not LibrosOdiloSilaboSemanal.objects.filter(silabosemanal_id=silabosemana.id, codigo=odil[1]['id'], silabosemanal__status=True, status=True).exists():
                                    libroodil = LibrosOdiloSilaboSemanal(silabosemanal_id=silabosemana.id,
                                                                         codigo=odil[1]['id'],
                                                                         titulo=odil[1]['title'],
                                                                         isbm=odil[1]['isbn'],
                                                                         fpublicacion=odil[1]['publicationDate'],
                                                                         small=odil[1]['coverUrls']['small'],
                                                                         autor=odil[1]['author'])
                                    libroodil.save(request)
                                    # libroodil(u'Adicionó Bibliografia Apa: %s al sílabo de la materia %s:' % (bapa, bapa.silabosemanal.silabo.materia), request, "add")
                        del request.session['lista_odilo_libros']
                    silabosemana.silabo.materia.actualizarhtml = True
                    silabosemana.silabo.materia.save(request)
                    return JsonResponse({"result": "ok"}, )
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # Eliminar Bibliografia semanal de la planificación Silabo
            elif action == 'delsemanasilabo':
                try:
                    silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    listadoevalaprendizaje = EvaluacionAprendizajeTema.objects.filter(evaluacion__silabosemanal=silabosemanal, evaluacion__tipoactividadsemanal=1).update(status=False)
                    bibliografiabasica = silabosemanal.detallesilabosemanalbibliografia_set.filter(status=True)
                    if bibliografiabasica:
                        for bb in bibliografiabasica:
                            log(u'Eliminó Bibliografia Basica: %s del silabo %s' % (bb.bibliografiaprogramaanaliticoasignatura.librokohaprogramaanaliticoasignatura, silabosemanal.silabo), request, "del")
                        bibliografiabasica.update(status=False)
                    bibliografiacomplemetaria = silabosemanal.detallesilabosemanalbibliografiadocente_set.filter(status=True)
                    if bibliografiacomplemetaria:
                        for bc in bibliografiacomplemetaria:
                            log(u'Eliminó Bibliografia Complementaria: %s de la semana %s' % (bc.librokohaprogramaanaliticoasignatura, silabosemanal.silabo), request, "del")
                        bibliografiacomplemetaria.update(status=False)
                    temas = silabosemanal.detallesilabosemanaltema_set.filter(status=True)
                    if temas:
                        for t in temas:
                            log(u'Eliminó el tema: %s de la semana # %s de silabo %s' % (t, silabosemanal.numsemana, silabosemanal.silabo), request, "del")
                        temas.update(status=False)
                    subtemas = silabosemanal.detallesilabosemanalsubtema_set.filter(status=True)
                    if subtemas:
                        for st in subtemas:
                            log(u'Eliminó el Sub Temas: %s del silabo: %s de la la semana #: %s' % (st, silabosemanal.silabo, silabosemanal.numsemana), request, "del")
                        subtemas.update(status=False)
                    practicas = silabosemanal.gpguiapracticasemanal_set.all()
                    if practicas:
                        for pra in practicas:
                            instruccion = pra.gpinstruccion_set.all()
                            if instruccion:
                                instruccion.update(status=False)
                            # laboratorio = pra.gplugarpractica_set.all()
                            # if  laboratorio:
                            #     for lab in laboratorio:
                            #         lab.gplugarpracticadetalle_set.all().update(status=False)
                            #     laboratorio.update(status=False)
                            log(u'Eliminó  la Guía de Práctica: %s de la semana # %s del silabo: %s' % (pra, silabosemanal.numsemana, silabosemanal.silabo), request, "del")
                            pra.status = False
                            pra.save(request)
                    if silabosemanal.cronogramasilabo_set.all().exists():
                        silabosemanal.cronogramasilabo_set.all().update(status=False)
                    if SubTemaAsistencia.objects.filter(subtema__silabosemanal=silabosemanal).exists():
                        SubTemaAsistencia.objects.filter(subtema__silabosemanal=silabosemanal).update(status=False)
                    if TemaAsistencia.objects.filter(tema__silabosemanal=silabosemanal).exists():
                        TemaAsistencia.objects.filter(tema__silabosemanal=silabosemanal).update(status=False)
                    if SubTemaAdicionalAsistencia.objects.filter(subtema__silabosemanal=silabosemanal).exists():
                        SubTemaAdicionalAsistencia.objects.filter(subtema__silabosemanal=silabosemanal).update(status=False)
                    log(u'Eliminó la planificación de la semana: %s ' % (silabosemanal), request, "del")
                    silabosemanal.status = False
                    silabosemanal.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delsemanasilabotodo':
                try:
                    silabosemanal = SilaboSemanal.objects.filter(silabo_id=int(encrypt(request.POST['id'])))
                    silabosemanal.delete()
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            # Adicionar Semana de planificación de Silabo
            elif action == 'addsemanaplanificacion':
                try:
                    subtema = ''
                    tema = ''
                    cronograma = ''
                    listaidscomplementarios = []
                    listaidsarticulos = []
                    if 'lista_items1' in request.POST:
                        subtema = json.loads(request.POST['lista_items1'])
                    if 'lista_items4' in request.POST:
                        tema = json.loads(request.POST['lista_items4'])
                    if 'lista_items6' in request.POST:
                        cronograma = json.loads(request.POST['lista_items6'])
                    # listadobibliografiacomplementaria = LibroKohaProgramaAnaliticoAsignatura.objects.filter(id__in=[int(datos['idbibliografia']) for datos in json.loads(request.POST['lista_items2'])]) if request.POST['lista_items2'] else []
                    cadena = request.POST['id'].split("_")
                    silabo = Silabo.objects.get(pk=int(encrypt(cadena[0])))
                    lista_items1 = json.loads(request.POST['lista_items2'])
                    form = SilaboSemanalForm(request.POST)
                    if form.is_valid():
                        if SilaboSemanal.objects.filter(silabo=silabo, numsemana=int(encrypt(cadena[4])), status=True).exists():
                            return JsonResponse({"result": "bad", "mensaje": u"Error, semana ya existe."})
                        silabosemana = SilaboSemanal(silabo=silabo,
                                                     numsemana=int(encrypt(cadena[4])),
                                                     semana=int(encrypt(cadena[1])),
                                                     fechainiciosemana=cadena[2],
                                                     fechafinciosemana=cadena[3],
                                                     # objetivoaprendizaje=form.cleaned_data['objetivoaprendizaje'],
                                                     enfoque=form.cleaned_data['enfoque'],
                                                     enfoquedos=form.cleaned_data['enfoquedos'],
                                                     enfoquetres=form.cleaned_data['enfoquetres'],
                                                     recursos=form.cleaned_data['recursos'],
                                                     # evaluacion=form.cleaned_data['evaluacion'],
                                                     horaspresencial=silabo.materia.asignaturamalla.horaspresencialessemanales,
                                                     horaautonoma=silabo.materia.asignaturamalla.horasautonomassemanales)
                        silabosemana.save(request)
                        if lista_items1:
                            for lista in lista_items1:
                                if int(lista['idtipocomplementaria']) == 1:
                                    listaidscomplementarios.append(lista['idbibliografia'])
                                    if not DetalleSilaboSemanalBibliografiaDocente.objects.filter(silabosemanal_id=silabosemana.id, status=True, librokohaprogramaanaliticoasignatura_id=lista['idbibliografia']).exists():
                                        deta = DetalleSilaboSemanalBibliografiaDocente(silabosemanal_id=silabosemana.id, librokohaprogramaanaliticoasignatura_id=lista['idbibliografia'])
                                        deta.save(request)
                                        log(u'Adicionó nueva Bibliografia complentaria: %s al sílabo de la materia %s:' % (deta.librokohaprogramaanaliticoasignatura, deta.silabosemanal.silabo.materia), request, "add")
                                if int(lista['idtipocomplementaria']) == 2:
                                    listaidsarticulos.append(lista['idbibliografia'])
                                    if not ArticuloSilaboSemanal.objects.filter(silabosemanal_id=silabosemana.id, status=True, articulo_id=lista['idbibliografia']).exists():
                                        deta = ArticuloSilaboSemanal(silabosemanal_id=silabosemana.id, articulo_id=lista['idbibliografia'])
                                        deta.save(request)
                                        log(u'Adicionó nuevo Articulo complentario: %s al sílabo de la materia %s:' % (deta.articulo, deta.silabosemanal.silabo.materia), request, "add")
                        # for list in listadobibliografiacomplementaria:
                        #     # if not DetalleSilaboSemanalBibliografiaDocente.objects.filter(status=True,librokohaprogramaanaliticoasignatura_id=list.id).exists():
                        #     deta = DetalleSilaboSemanalBibliografiaDocente(silabosemanal_id=silabosemana.id,librokohaprogramaanaliticoasignatura_id=list.id)
                        #     deta.save(request)
                        #     log(u'Adicionó nueva Bibliografia complentaria: %s' % deta.librokohaprogramaanaliticoasignatura, request, "add")
                        if 'lista_items3' in request.POST:
                            for basica in json.loads(request.POST['lista_items3']):
                                if not DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal_id=silabosemana.id, bibliografiaprogramaanaliticoasignatura_id=basica).exists():
                                    detab = DetalleSilaboSemanalBibliografia(silabosemanal_id=silabosemana.id, bibliografiaprogramaanaliticoasignatura_id=basica)
                                    detab.save(request)
                                    log(u'Adicionó nueva Bibliografia Basica: %s' % detab.bibliografiaprogramaanaliticoasignatura.librokohaprogramaanaliticoasignatura, request, "add")
                        if subtema:
                            for subt in subtema:
                                ingresosubt = DetalleSilaboSemanalSubtema(silabosemanal_id=silabosemana.id, subtemaunidadresultadoprogramaanalitico_id=subt)
                                ingresosubt.save(request)
                        if tema:
                            for tem in tema:
                                ingresostemas = DetalleSilaboSemanalTema(silabosemanal_id=silabosemana.id, temaunidadresultadoprogramaanalitico_id=tem)
                                ingresostemas.save(request)
                        if cronograma:
                            for cro in cronograma:
                                cronograma = CronogramaSilabo(silabosemanal_id=silabosemana.id, cronograma_id=cro)
                                cronograma.save(request)
                        if 'lista_items7' in request.POST:
                            bibliapa = [x['bibliografiaexterna'] for x in json.loads(request.POST['lista_items7'])]
                            for apa in bibliapa:
                                if not BibliograbiaAPASilabo.objects.filter(silabosemanal_id=silabosemana.id, bibliografia=apa).exists():
                                    bapa = BibliograbiaAPASilabo(silabosemanal_id=silabosemana.id, bibliografia=apa)
                                    bapa.save(request)
                                    log(u'Adicionó Bibliografia Apa: %s al sílabo de la materia %s:' % (bapa, bapa.silabosemanal.silabo.materia), request, "add")
                        if 'lista_items8' in request.POST:
                            # links = [x['link'] for x in json.loads(request.POST['lista_items8'])]
                            # links = [x['link'] for x in json.loads(request.POST['lista_items8'])]
                            for link in json.loads(request.POST['lista_items8']):
                                if not RecursosDidacticosSemanal.objects.filter(silabosemanal=silabosemana, descripcion=str(link['descripcion']), link=str(link['link'])).exists():
                                    rlink = RecursosDidacticosSemanal(silabosemanal=silabosemana, descripcion=str(link['descripcion']), link=str(link['link']))
                                    rlink.save(request)
                                    log(u'Adicionó recurso didactico link: %s al sílabo de la materia %s:' % (link, rlink.silabosemanal.silabo.materia), request, "add")
                        return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # Adicionar Semana de planificación de Silabo
            elif action == 'editsemanaplanificacion':
                try:
                    subtema = ''
                    tema = ''
                    cronograma = ''
                    listaidscomplementarios = []
                    listaidsarticulos = []
                    if 'lista_items1' in request.POST:
                        subtema = json.loads(request.POST['lista_items1'])
                    if 'lista_items4' in request.POST:
                        tema = json.loads(request.POST['lista_items4'])
                    if 'lista_items6' in request.POST:
                        cronograma = json.loads(request.POST['lista_items6'])
                    listadobibliografiacomplementaria = LibroKohaProgramaAnaliticoAsignatura.objects.filter(id__in=[int(datos['idbibliografia']) for datos in json.loads(request.POST['lista_items2'])]) if request.POST['lista_items2'] else []
                    lista_items1 = json.loads(request.POST['lista_items2'])
                    form = SilaboSemanalForm(request.POST)
                    if form.is_valid():
                        silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        # silabosemana.objetivoaprendizaje=form.cleaned_data['objetivoaprendizaje']
                        silabosemana.enfoque = form.cleaned_data['enfoque']
                        silabosemana.enfoquedos = form.cleaned_data['enfoquedos']
                        silabosemana.enfoquetres = form.cleaned_data['enfoquetres']
                        silabosemana.recursos = form.cleaned_data['recursos']
                        # silabosemana.evaluacion = form.cleaned_data['evaluacion']
                        silabosemana.horaspresencial = silabosemana.silabo.materia.asignaturamalla.horaspresencialessemanales
                        silabosemana.horaautonoma = silabosemana.silabo.materia.asignaturamalla.horasautonomassemanales
                        silabosemana.fechainiciosemana = request.POST['fini']
                        silabosemana.fechafinciosemana = request.POST['ffin']
                        silabosemana.save(request)
                        if lista_items1:
                            for lista in lista_items1:
                                if int(lista['idtipocomplementaria']) == 1:
                                    listaidscomplementarios.append(lista['idbibliografia'])
                                    if not DetalleSilaboSemanalBibliografiaDocente.objects.filter(silabosemanal_id=silabosemana.id, silabosemanal__status=True, status=True, librokohaprogramaanaliticoasignatura_id=lista['idbibliografia']).exists():
                                        deta = DetalleSilaboSemanalBibliografiaDocente(silabosemanal_id=silabosemana.id, librokohaprogramaanaliticoasignatura_id=lista['idbibliografia'])
                                        deta.save(request)
                                        log(u'Adicionó nueva Bibliografia complentaria: %s al sílabo de la materia %s:' % (deta.librokohaprogramaanaliticoasignatura, deta.silabosemanal.silabo.materia), request, "add")
                                if int(lista['idtipocomplementaria']) == 2:
                                    listaidsarticulos.append(lista['idbibliografia'])
                                    if not ArticuloSilaboSemanal.objects.filter(silabosemanal_id=silabosemana.id, silabosemanal__status=True, status=True, articulo_id=lista['idbibliografia']).exists():
                                        deta = ArticuloSilaboSemanal(silabosemanal_id=silabosemana.id, articulo_id=lista['idbibliografia'])
                                        deta.save(request)
                                        log(u'Adicionó nuevo Articulo complentario: %s al sílabo de la materia %s:' % (deta.articulo, deta.silabosemanal.silabo.materia), request, "add")
                        # for list in listadobibliografiacomplementaria:
                        #     if not DetalleSilaboSemanalBibliografiaDocente.objects.filter(silabosemanal_id=silabosemana.id, status=True, librokohaprogramaanaliticoasignatura_id=list.id).exists():
                        #         deta = DetalleSilaboSemanalBibliografiaDocente(silabosemanal_id=silabosemana.id, librokohaprogramaanaliticoasignatura_id=list.id)
                        #         deta.save(request)
                        #         log(u'Adicionó nueva Bibliografia complentaria: %s' % deta, request, "add")
                        # if silabosemana.detallesilabosemanalbibliografiadocente_set.all().exclude(librokohaprogramaanaliticoasignatura_id__in=listadobibliografiacomplementaria):
                        #     for bibli in silabosemana.detallesilabosemanalbibliografiadocente_set.all().exclude(librokohaprogramaanaliticoasignatura_id__in=listadobibliografiacomplementaria):
                        #         log(u'Eliminó Bibliografia complentaria: %s' % bibli, request, "del")
                        #     silabosemana.detallesilabosemanalbibliografiadocente_set.all().exclude(librokohaprogramaanaliticoasignatura_id__in=listadobibliografiacomplementaria).update(status=False)
                        if listaidscomplementarios:
                            if silabosemana.detallesilabosemanalbibliografiadocente_set.filter(silabosemanal__status=True, status=True).exclude(librokohaprogramaanaliticoasignatura_id__in=listaidscomplementarios):
                                for bibli in silabosemana.detallesilabosemanalbibliografiadocente_set.filter(silabosemanal__status=True, status=True).exclude(librokohaprogramaanaliticoasignatura_id__in=listaidscomplementarios):
                                    log(u'Eliminó Bibliografia complentaria: %s al sílabo de la materia %s:' % (bibli.librokohaprogramaanaliticoasignatura, bibli.silabosemanal.silabo.materia), request, "del")
                                silabosemana.detallesilabosemanalbibliografiadocente_set.filter(silabosemanal__status=True, status=True).exclude(librokohaprogramaanaliticoasignatura_id__in=listaidscomplementarios).update(status=False)
                        if listaidsarticulos:
                            if silabosemana.articulosilabosemanal_set.filter(silabosemanal__status=True, status=True).exclude(articulo_id__in=listaidsarticulos):
                                for bibli in silabosemana.articulosilabosemanal_set.filter(silabosemanal__status=True, status=True).exclude(articulo_id__in=listaidsarticulos):
                                    log(u'Eliminó Articulo complentaria: %s al sílabo de la materia %s:' % (bibli.articulo, bibli.silabosemanal.silabo.materia), request, "del")
                                silabosemana.articulosilabosemanal_set.filter(silabosemanal__status=True, status=True).exclude(articulo_id__in=listaidsarticulos).update(status=False)
                        if 'lista_items3' in request.POST:
                            bibliografia = json.loads(request.POST['lista_items3'])
                            for basica in json.loads(request.POST['lista_items3']):
                                if not DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal_id=silabosemana.id, bibliografiaprogramaanaliticoasignatura_id=basica, silabosemanal__status=True, status=True).exists():
                                    detab = DetalleSilaboSemanalBibliografia(silabosemanal_id=silabosemana.id, bibliografiaprogramaanaliticoasignatura_id=basica)
                                    detab.save(request)
                                    log(u'Adicionó nueva Bibliografia Basica: %s' % detab, request, "add")
                            if silabosemana.detallesilabosemanalbibliografia_set.filter(silabosemanal__status=True, status=True).exclude(bibliografiaprogramaanaliticoasignatura_id__in=bibliografia):
                                for bibli in silabosemana.detallesilabosemanalbibliografia_set.filter(silabosemanal__status=True, status=True).exclude(bibliografiaprogramaanaliticoasignatura_id__in=bibliografia):
                                    log(u'Eliminó Bibliografia Basica: %s' % bibli, request, "del")
                                silabosemana.detallesilabosemanalbibliografia_set.filter(silabosemanal__status=True, status=True).exclude(bibliografiaprogramaanaliticoasignatura_id__in=bibliografia).update(status=False)

                        if subtema:
                            for subt in subtema:
                                if not DetalleSilaboSemanalSubtema.objects.filter(silabosemanal_id=silabosemana.id, subtemaunidadresultadoprogramaanalitico_id=subt, silabosemanal__status=True, status=True).exists():
                                    ingresosubt = DetalleSilaboSemanalSubtema(silabosemanal_id=silabosemana.id, subtemaunidadresultadoprogramaanalitico_id=subt, status=True)
                                    ingresosubt.save(request)
                                    log(u'Adicionó Nuevo Sub Tema: %s de la Planificación ha la Semanal: %s' % (ingresosubt, silabosemana.semana), request, "add")
                            if silabosemana.detallesilabosemanalsubtema_set.filter(silabosemanal__status=True, status=True).exclude(subtemaunidadresultadoprogramaanalitico_id__in=subtema).exists():
                                for subt in silabosemana.detallesilabosemanalsubtema_set.filter(silabosemanal__status=True, status=True).exclude(subtemaunidadresultadoprogramaanalitico_id__in=subtema):
                                    log(u'Eliminó Sub Tema: %s de la Planificación ha la Semanal: %s' % (subt, silabosemana.semana), request, "del")
                                silabosemana.detallesilabosemanalsubtema_set.filter(silabosemanal__status=True, status=True).exclude(subtemaunidadresultadoprogramaanalitico_id__in=subtema).update(status=False)
                        if tema:
                            for tem in tema:
                                if not DetalleSilaboSemanalTema.objects.filter(silabosemanal_id=silabosemana.id, temaunidadresultadoprogramaanalitico_id=tem, silabosemanal__status=True, status=True).exists():
                                    ingresostemas = DetalleSilaboSemanalTema(silabosemanal_id=silabosemana.id, temaunidadresultadoprogramaanalitico_id=tem, status=True)
                                    ingresostemas.save(request)
                                    log(u'Adicionó Nuevo Tema: %s de la Planificación ha la Semanal: %s' % (ingresostemas, silabosemana.semana), request, "add")
                            if silabosemana.detallesilabosemanaltema_set.filter(silabosemanal__status=True, status=True).exclude(temaunidadresultadoprogramaanalitico_id__in=tema).exists():
                                for tem in silabosemana.detallesilabosemanaltema_set.filter(silabosemanal__status=True, status=True).exclude(temaunidadresultadoprogramaanalitico_id__in=tema):
                                    log(u'Eliminó Tema: %s de la Planificación ha la Semanal: %s' % (tem, silabosemana.semana), request, "del")
                                silabosemana.detallesilabosemanaltema_set.filter(silabosemanal__status=True, status=True).exclude(temaunidadresultadoprogramaanalitico_id__in=tema).update(status=False)
                        # if cronograma:
                        for cro in cronograma:
                            if not silabosemana.cronogramasilabo_set.filter(silabosemanal__status=True, cronograma_id=cro).exists():
                                cron = CronogramaSilabo(silabosemanal=silabosemana, cronograma_id=cro)
                                cron.save(request)
                                log(u'Adicionó a la semana numero %s la Planificacion de silabo: %s ' % (silabosemana.numsemana, cron.cronograma), request, "add")
                        if silabosemana.cronogramasilabo_set.filter(silabosemanal__status=True, status=True).exclude(cronograma_id__in=cronograma).exists():
                            for cro in silabosemana.cronogramasilabo_set.filter(silabosemanal__status=True, status=True).exclude(cronograma_id__in=cronograma):
                                log(u'Eliminó Planificación de silabo: %s de la semana: %s' % (cro.cronograma, silabosemana.numsemana), request, "del")
                            silabosemana.cronogramasilabo_set.filter(silabosemanal__status=True, status=True).exclude(cronograma_id__in=cronograma).update(status=False)
                        # de rechazado pendiente
                        silabosemana.modifico_silabo(persona, request)
                        if 'lista_items7' in request.POST:
                            bibliapa = [x['bibliografiaexterna'] for x in json.loads(request.POST['lista_items7'])]
                            for apa in bibliapa:
                                if not BibliograbiaAPASilabo.objects.filter(silabosemanal_id=silabosemana.id, bibliografia=apa, silabosemanal__status=True, status=True).exists():
                                    bapa = BibliograbiaAPASilabo(silabosemanal_id=silabosemana.id, bibliografia=apa)
                                    bapa.save(request)
                                    log(u'Adicionó Bibliografia Apa: %s al sílabo de la materia %s:' % (bapa, bapa.silabosemanal.silabo.materia), request, "add")
                            if silabosemana.bibliograbiaapasilabo_set.all().exclude(bibliografia__in=bibliapa):
                                for apa in silabosemana.bibliograbiaapasilabo_set.all().exclude(bibliografia__in=bibliapa):
                                    log(u'Eliminó Bibliografia Apa: %s del  sílabo de la materia %s:' % (apa, apa.silabosemanal.silabo.materia), request, "del")
                                silabosemana.bibliograbiaapasilabo_set.all().exclude(bibliografia__in=bibliapa).update(status=False)
                        if 'lista_items8' in request.POST:
                            for link in json.loads(request.POST['lista_items8']):
                                if not RecursosDidacticosSemanal.objects.filter(silabosemanal=silabosemana, descripcion=link['descripcion'], link=link['link'], silabosemanal__status=True, status=True).exists():
                                    rlink = RecursosDidacticosSemanal(silabosemanal=silabosemana, descripcion=str(link['descripcion']), link=str(link['link']))
                                    rlink.save(request)
                                    log(u'Adicionó recurso didactico link: %s al sílabo de la materia %s:' % (link, rlink.silabosemanal.silabo.materia), request, "add")
                            listalink = []
                            for link in json.loads(request.POST['lista_items8']):
                                if silabosemana.recursosdidacticossemanal_set.filter(silabosemanal__status=True, status=True, descripcion=link['descripcion'].strip(), link=link['link'].strip()).exists():
                                    listalink.append(silabosemana.recursosdidacticossemanal_set.filter(silabosemanal__status=True, status=True, descripcion=link['descripcion'].strip(), link=link['link'].strip())[0].id)
                            if silabosemana.recursosdidacticossemanal_set.filter(silabosemanal__status=True, status=True).exclude(id__in=listalink):
                                for link in silabosemana.recursosdidacticossemanal_set.filter(silabosemanal__status=True, status=True).exclude(id__in=listalink):
                                    log(u'Eliminó recurso didactico link: %s del  sílabo de la materia %s:' % (
                                        link.descripcion, silabosemana.silabo.materia), request, "del")
                                    silabosemana.recursosdidacticossemanal_set.filter(silabosemanal__status=True, status=True).exclude(id__in=listalink).update(status=False)
                        return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'adicionararticulo':
                try:
                    form = ArticuloSilaboSemanalForm(request.POST)
                    if form.is_valid():
                        articulosilabosemanal = ArticuloSilaboSemanal(silabosemanal_id=request.POST['id'],
                                                                      articulo_id=form.cleaned_data['articulo'])
                        articulosilabosemanal.save(request)
                        return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'adicionararticulovirtual':
                try:
                    form = ArticuloSilaboSemanalForm(request.POST)
                    if form.is_valid():
                        articulosilabosemanal = ArticuloSilaboSemanal(silabosemanal_id=request.POST['id'],
                                                                      articulo_id=form.cleaned_data['articulo'])
                        articulosilabosemanal.save(request)
                        return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            # editar objetivo aprendizaje
            elif action == 'editarobjetivoaprendizaje':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['idso'])))
                    objetivo = json.loads(request.POST['objetivo'])
                    silabosemana.objetivoaprendizaje = objetivo
                    silabosemana.save(request)
                    # de rechazado pendiente
                    silabosemana.modifico_silabo(persona, request)
                    log(u'Editó Objetivo de Aprendizaje: %s' % silabosemana, request, "add")
                    return JsonResponse({"result": "ok", "ids": encrypt(silabosemana.silabo.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # editar enfoque metodologico
            elif action == 'editenfoquemetodologico':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['idse'])))
                    enfoque = json.loads(request.POST['enfoque'])
                    enfoquedos = json.loads(request.POST['enfoquedos'])
                    enfoquetres = json.loads(request.POST['enfoquetres'])
                    silabosemana.enfoque = enfoque
                    silabosemana.enfoquedos = enfoquedos
                    silabosemana.enfoquetres = enfoquetres
                    silabosemana.save(request)
                    # de rechazado pendiente
                    silabosemana.modifico_silabo(persona, request)
                    log(u'Editó Objetivo de Aprendizaje: %s' % silabosemana, request, "add")
                    return JsonResponse({"result": "ok", "ids": encrypt(silabosemana.silabo.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editenfoquemetodologicoposgrado':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['idse'])))
                    enfoque = json.loads(request.POST['enfoque'])
                    silabosemana.enfoque = enfoque
                    silabosemana.save(request)
                    # de rechazado pendiente
                    silabosemana.modifico_silabo(persona, request)
                    log(u'Editó Objetivo de Aprendizaje: %s' % silabosemana, request, "add")
                    return JsonResponse({"result": "ok", "ids": encrypt(silabosemana.silabo.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # editar recursos didacta
            elif action == 'editrecursodidactico':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['idsr'])))
                    recurso = json.loads(request.POST['recurso'])
                    silabosemana.recursos = recurso
                    silabosemana.save(request)
                    log(u'Editó Objetivo de Aprendizaje: %s' % silabosemana, request, "add")
                    # de rechazado pendiente
                    silabosemana.modifico_silabo(persona, request)
                    return JsonResponse({"result": "ok", "ids": encrypt(silabosemana.silabo.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # editar evaluacion
            elif action == 'editevaluacion':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['idsv'])))
                    evaluacion = json.loads(request.POST['evaluacion'])
                    silabosemana.evaluacion = evaluacion
                    silabosemana.save(request)
                    log(u'Editó Objetivo de Aprendizaje: %s' % silabosemana, request, "add")
                    # de rechazado pendiente
                    silabosemana.modifico_silabo(persona, request)
                    return JsonResponse({"result": "ok", "ids": encrypt(silabosemana.silabo.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # eliminar bibliografia complementaria

            elif action == 'delbibliografiacomplementaria':
                try:
                    bibliografiacomplemetaria = DetalleSilaboSemanalBibliografiaDocente.objects.get(pk=int(encrypt(request.POST['id'])))
                    log(u'Eliminó la Bibliografía Complementaria: %s' % bibliografiacomplemetaria, request, "del")
                    # de rechazado pendiente
                    bibliografiacomplemetaria.silabosemanal.modifico_silabo(persona, request)
                    bibliografiacomplemetaria.status = False
                    bibliografiacomplemetaria.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'dellibrosodilo':
                try:
                    libroodilo = LibrosOdiloSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    log(u'Eliminó libro odilo: idlibroodil: %s silabosemanal: %s codigolibroodil %s' % (libroodilo.id, libroodilo.silabosemanal.id, libroodilo.codigo), request, "del")
                    libroodilo.delete()
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            # eliminar bibliografia basica
            elif action == 'delbibliografiabasica':
                try:
                    if SilaboSemanal.objects.get(pk=DetalleSilaboSemanalBibliografia.objects.get(pk=int(encrypt(request.POST['id']))).silabosemanal.id).detallesilabosemanalbibliografia_set.all().count() > 1:
                        bibliografiabasica = DetalleSilaboSemanalBibliografia.objects.get(pk=int(encrypt(request.POST['id'])))
                        log(u'Eliminó la Bibliografía Basica: %s' % bibliografiabasica, request, "del")
                        # de rechazado pendiente
                        bibliografiabasica.silabosemanal.modifico_silabo(persona, request)
                        bibliografiabasica.status = False
                        bibliografiabasica.save(request)
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Es Obligación tener una Bibliografía Básica registrada."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # duplicar silabo digital
            elif action == 'delactividadposgrado':
                try:
                    # if SilaboSemanal.objects.get(pk=DetalleSilaboSemanalActividadesMoodle.objects.get(pk=int(encrypt(request.POST['id']))).silabosemanal.id).detallesilabosemanalactividadesmoodle_set.all().count()>1:
                    actividad = DetalleSilaboSemanalActividadesMoodle.objects.get(pk=int(encrypt(request.POST['id'])))
                    log(u'Eliminó la Actividad Moodle: %s' % actividad, request, "del")
                    # de rechazado pendiente
                    actividad.silabosemanal.modifico_silabo(persona, request)
                    actividad.status = False
                    actividad.save(request)
                    return JsonResponse({"result": "ok"})
                    # else:
                    #     return JsonResponse({"result": "bad", "mensaje": u"Es Obligación tener una Bibliografía Básica registrada."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delactividad':
                try:
                    if SilaboSemanal.objects.get(pk=DetalleSilaboSemanalActividadesMoodle.objects.get(pk=int(encrypt(request.POST['id']))).silabosemanal.id).detallesilabosemanalactividadesmoodle_set.all().count() > 1:
                        actividad = DetalleSilaboSemanalActividadesMoodle.objects.get(pk=int(encrypt(request.POST['id'])))
                        log(u'Eliminó la Actividad Moodle: %s' % actividad, request, "del")
                        # de rechazado pendiente
                        actividad.silabosemanal.modifico_silabo(persona, request)
                        actividad.update(status=False)
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Es Obligación tener una Actividad Moodle registrada."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # duplicar silabo digital
            elif action == 'duplicar_silabo':
                try:
                    if 'ida' in request.POST and 'idact' in request.POST:
                        silaboxduplicar = Silabo.objects.get(pk=int(request.POST['ida']))
                        silaboaduplicar = Silabo.objects.get(pk=int(request.POST['idact']))
                        if not silaboaduplicar.silabosemanal_set.filter(status=True).exists():
                            if silaboaduplicar.materia.tiene_cronograma():
                                planificacionsilaboact = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silaboaduplicar.materia, status=True).exclude(semana=0).order_by('orden')
                                for pact in planificacionsilaboact:
                                    pant = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silaboxduplicar.materia, status=True, semana=pact.semana)[0]
                                    if silaboxduplicar.silabosemanal_set.filter(status=True, fechainiciosemana__gte=pant.fechainicio, fechafinciosemana__lte=pant.fechafin).exists():
                                        semana = silaboxduplicar.silabosemanal_set.filter(status=True, fechainiciosemana__gte=pant.fechainicio, fechafinciosemana__lte=pant.fechafin)[0]
                                        if semana:
                                            # for dia in daterange(pact.fechainicio, pact.fechafin):
                                            # if not silaboaduplicar.silabosemanal_set.filter(semana=dia.isocalendar()[1]).exists():
                                            silabosemana = SilaboSemanal(silabo=silaboaduplicar,
                                                                         numsemana=pact.semana,
                                                                         semana=pact.fechainicio.isocalendar()[1],
                                                                         fechainiciosemana=pact.fechainicio,
                                                                         fechafinciosemana=pact.fechafin,
                                                                         objetivoaprendizaje=semana.objetivoaprendizaje,
                                                                         enfoque=semana.enfoque,
                                                                         enfoquedos=semana.enfoquedos,
                                                                         enfoquetres=semana.enfoquetres,
                                                                         recursos=semana.recursos,
                                                                         evaluacion=semana.evaluacion,
                                                                         horaspresencial=semana.horaspresencial,
                                                                         horaautonoma=semana.horaautonoma
                                                                         )
                                            silabosemana.save(request)
                                            if semana.detallesilabosemanalbibliografia_set.filter(status=True).exists():
                                                for blibliografiabasia in semana.detallesilabosemanalbibliografia_set.filter(status=True):
                                                    detallebb = DetalleSilaboSemanalBibliografia(silabosemanal=silabosemana, bibliografiaprogramaanaliticoasignatura=blibliografiabasia.bibliografiaprogramaanaliticoasignatura, status=True)
                                                    detallebb.save(request)
                                            if semana.detallesilabosemanalbibliografiadocente_set.filter(status=True).exists():
                                                for bibliografiacomplementaria in semana.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                                                    detallebc = DetalleSilaboSemanalBibliografiaDocente(silabosemanal=silabosemana, librokohaprogramaanaliticoasignatura=bibliografiacomplementaria.librokohaprogramaanaliticoasignatura, status=True)
                                                    detallebc.save(request)
                                            if semana.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True).exists():
                                                for itemtema in semana.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True):
                                                    tema = DetalleSilaboSemanalTema(silabosemanal=silabosemana, temaunidadresultadoprogramaanalitico=itemtema.temaunidadresultadoprogramaanalitico, status=True)
                                                    tema.save(request)
                                                    if semana.subtemaadicionalessilabo_set.filter(status=True, tema=tema).exists():
                                                        for subtemaadicional in semana.subtemaadicionalessilabo_set.filter(status=True, tema=tema):
                                                            sub = SubTemaAdicionalesSilabo(silabosemanal=silabosemana, tema=tema, subtema=subtemaadicional.subtema)
                                                            sub.save(request)
                                            if semana.bibliograbiaapasilabo_set.filter(status=True).exists():
                                                for bibliografiavirtual in semana.bibliograbiaapasilabo_set.filter(status=True):
                                                    bibli = BibliograbiaAPASilabo(silabosemanal=silabosemana, bibliografia=bibliografiavirtual.bibliografia)
                                                    bibli.save(request)
                                            if semana.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__status=True).exists():
                                                for itemsubtema in semana.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__status=True):
                                                    subtema = DetalleSilaboSemanalSubtema(silabosemanal=silabosemana, subtemaunidadresultadoprogramaanalitico=itemsubtema.subtemaunidadresultadoprogramaanalitico, status=True)
                                                    subtema.save(request)
                                            if semana.recursosdidacticossemanal_set.filter(status=True).exists():
                                                for recurso in semana.recursosdidacticossemanal_set.filter(status=True):
                                                    recurso = RecursosDidacticosSemanal(silabosemanal=silabosemana, descripcion=recurso.descripcion, link=recurso.link)
                                                    recurso.save(request)
                                            if semana.articulosilabosemanal_set.filter(status=True).exists():
                                                for articulo in semana.articulosilabosemanal_set.filter(status=True):
                                                    a = ArticuloSilaboSemanal(silabosemanal=silabosemana, articulo=articulo.articulo)
                                                    a.save(request)
                                            if silaboaduplicar.versionsilabo == 1:
                                                if semana.evaluacionaprendizajesilabosemanal_set.filter(status=True).exists():
                                                    for articulo in semana.evaluacionaprendizajesilabosemanal_set.filter(status=True):
                                                        a = EvaluacionAprendizajeSilaboSemanal(silabosemanal=silabosemana, evaluacionaprendizaje=articulo.evaluacionaprendizaje)
                                                        a.save(request)

                                log(u'Importó el Sílabo: %s del profesor: %s al Silabo: %s el profesor: %s' % (silaboaduplicar.materia, silaboaduplicar.profesor.persona.nombre_completo_inverso(), silaboxduplicar, profesor), request, "add")
                                return JsonResponse({"result": "ok"})
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error ya se importo el sílabo."})
                        else:
                            return JsonResponse({"result": "bad", "mensaje": u"Error ya se importo el sílabo."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'duplicar_silabovdos':
                try:
                    if 'ida' in request.POST and 'idact' in request.POST:
                        silaboxduplicar = Silabo.objects.get(pk=int(request.POST['ida']))
                        silaboaduplicar = Silabo.objects.get(pk=int(request.POST['idact']))
                        listadostestmigrar = []
                        if not silaboaduplicar.silabosemanal_set.filter(status=True).exists():
                            if silaboaduplicar.materia.tiene_cronograma():
                                planificacionsilaboact = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silaboaduplicar.materia, examen=False, status=True).exclude(semana=0).order_by('orden')
                                for pact in planificacionsilaboact:
                                    pant = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silaboxduplicar.materia, status=True, semana=pact.semana)[0]
                                    if silaboxduplicar.silabosemanal_set.filter(status=True, fechainiciosemana__gte=pant.fechainicio, fechafinciosemana__lte=pant.fechafin).exists():
                                        semana = silaboxduplicar.silabosemanal_set.filter(status=True, fechainiciosemana__gte=pant.fechainicio, fechafinciosemana__lte=pant.fechafin)[0]
                                        if semana:
                                            silabosemana = SilaboSemanal(silabo=silaboaduplicar,
                                                                         numsemana=pact.semana,
                                                                         semana=pact.fechainicio.isocalendar()[1],
                                                                         fechainiciosemana=pact.fechainicio,
                                                                         fechafinciosemana=pact.fechafin,
                                                                         objetivoaprendizaje=semana.objetivoaprendizaje,
                                                                         enfoque=semana.enfoque,
                                                                         enfoquedos=semana.enfoquedos,
                                                                         enfoquetres=semana.enfoquetres,
                                                                         recursos=semana.recursos,
                                                                         evaluacion=semana.evaluacion,
                                                                         horaspresencial=semana.horaspresencial,
                                                                         horaautonoma=semana.horaautonoma
                                                                         )
                                            silabosemana.save(request)
                                            if semana.detallesilabosemanalbibliografia_set.filter(status=True).exists():
                                                for blibliografiabasia in semana.detallesilabosemanalbibliografia_set.filter(status=True):
                                                    detallebb = DetalleSilaboSemanalBibliografia(silabosemanal=silabosemana, bibliografiaprogramaanaliticoasignatura=blibliografiabasia.bibliografiaprogramaanaliticoasignatura, status=True)
                                                    detallebb.save(request)
                                            if semana.librosodilosilabosemanal_set.filter(status=True).exists():
                                                for listadoodilo in semana.librosodilosilabosemanal_set.filter(status=True):
                                                    libodilo = LibrosOdiloSilaboSemanal(silabosemanal=silabosemana,
                                                                                        codigo=listadoodilo.codigo,
                                                                                        titulo=listadoodilo.titulo,
                                                                                        isbm=listadoodilo.isbm,
                                                                                        autor=listadoodilo.autor,
                                                                                        fpublicacion=listadoodilo.fpublicacion,
                                                                                        small=listadoodilo.small,
                                                                                        status=True)
                                                    libodilo.save(request)
                                            if semana.detallesilabosemanalbibliografiadocente_set.filter(status=True).exists():
                                                for bibliografiacomplementaria in semana.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                                                    detallebc = DetalleSilaboSemanalBibliografiaDocente(silabosemanal=silabosemana, librokohaprogramaanaliticoasignatura=bibliografiacomplementaria.librokohaprogramaanaliticoasignatura, status=True)
                                                    detallebc.save(request)
                                            if semana.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True).exists():
                                                for itemtema in semana.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True):
                                                    if itemtema.objetivoaprendizaje:
                                                        obj = itemtema.objetivoaprendizaje
                                                    else:
                                                        obj = silabosemana.objetivoaprendizaje
                                                    tema = DetalleSilaboSemanalTema(silabosemanal=silabosemana, temaunidadresultadoprogramaanalitico=itemtema.temaunidadresultadoprogramaanalitico, objetivoaprendizaje=obj, status=True)
                                                    tema.save(request)
                                                    listadostestmigrar.append([itemtema.id, tema.id, semana])
                                                    # if semana.subtemaadicionalessilabo_set.filter(status=True, tema=tema).exists():
                                                    #     for subtemaadicional in semana.subtemaadicionalessilabo_set.filter(status=True, tema=tema):
                                                    #         sub = SubTemaAdicionalesSilabo(silabosemanal=silabosemana, tema=tema, subtema=subtemaadicional.subtema)
                                                    #         sub.save(request)
                                            if semana.bibliograbiaapasilabo_set.filter(status=True).exists():
                                                for bibliografiavirtual in semana.bibliograbiaapasilabo_set.filter(status=True):
                                                    bibli = BibliograbiaAPASilabo(silabosemanal=silabosemana, bibliografia=bibliografiavirtual.bibliografia)
                                                    bibli.save(request)
                                            if semana.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__status=True).exists():
                                                for itemsubtema in semana.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__status=True):
                                                    subtema = DetalleSilaboSemanalSubtema(silabosemanal=silabosemana, subtemaunidadresultadoprogramaanalitico=itemsubtema.subtemaunidadresultadoprogramaanalitico, status=True)
                                                    subtema.save(request)
                                            if semana.recursosdidacticossemanal_set.filter(status=True).exists():
                                                for recurso in semana.recursosdidacticossemanal_set.filter(status=True):
                                                    recurso = RecursosDidacticosSemanal(silabosemanal=silabosemana, descripcion=recurso.descripcion, link=recurso.link)
                                                    recurso.save(request)
                                            if semana.articulosilabosemanal_set.filter(status=True).exists():
                                                for articulo in semana.articulosilabosemanal_set.filter(status=True):
                                                    a = ArticuloSilaboSemanal(silabosemanal=silabosemana, articulo=articulo.articulo)
                                                    a.save(request)

                                if silaboxduplicar.versionsilabo == 2 and silaboxduplicar.materia.nivel.periodo_id >= 113:
                                    listadosemanaante = silaboxduplicar.silabosemanal_set.filter(status=True).order_by('numsemana')
                                    temasactuales = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silaboaduplicar, silabosemanal__status=True, status=True)
                                    for semanaant in listadosemanaante:
                                        idsemanaactual = silaboaduplicar.silabosemanal_set.filter(numsemana=semanaant.numsemana, silabo__status=True, status=True)[0]
                                        listadoaprendizaje = EvaluacionAprendizajeTema.objects.filter(evaluacion__silabosemanal=semanaant, evaluacion__silabosemanal__status=True, evaluacion__tipoactividadsemanal=1, temasemanal__silabosemanal__status=True, temasemanal__silabosemanal__silabo__status=True, temasemanal__status=True, status=True).distinct()
                                        if listadostestmigrar:
                                            for lisaprendizaje in listadoaprendizaje:
                                                for temaactual in temasactuales:
                                                    codaprendizaje = EvaluacionAprendizajeTema.objects.get(pk=lisaprendizaje.id)
                                                    semanacod = codaprendizaje.temasemanal.silabosemanal.numsemana
                                                    if temaactual.temaunidadresultadoprogramaanalitico == lisaprendizaje.temasemanal.temaunidadresultadoprogramaanalitico and temaactual.silabosemanal.numsemana == semanacod:
                                                        aprendizajestemassilabo(request, temaactual.id, lisaprendizaje.evaluacion.evaluacionaprendizaje.id, idsemanaactual.id, lisaprendizaje.evaluacion.numactividad)
                                # if silaboaduplicar.versionsilabo == 2 and silaboaduplicar.materia.nivel.periodo_id >= 113:
                                #     if listadostestmigrar:
                                #         ordentest = 0
                                #         listadoaprendizaje = EvaluacionAprendizajeComponente.objects.filter(status=True)
                                #         for listami in listadostestmigrar:
                                #             idtemaantiguo = listami[0]
                                #             idtemaactual = ''
                                #             for lisaprendizaje in listadoaprendizaje:
                                #                 if EvaluacionAprendizajeTema.objects.values('id').filter(temasemanal_id=listami[0], evaluacion__silabosemanal=listami[2],temasemanal__silabosemanal=listami[2],evaluacion__evaluacionaprendizaje_id=lisaprendizaje.id, evaluacion__tipoactividadsemanal=1, temasemanal__silabosemanal__status=True, status=True).exists():
                                #                     itentest = EvaluacionAprendizajeTema.objects.filter(temasemanal_id=listami[0], evaluacion__silabosemanal=listami[2],temasemanal__silabosemanal=listami[2],evaluacion__evaluacionaprendizaje_id=lisaprendizaje.id, evaluacion__tipoactividadsemanal=1, temasemanal__silabosemanal__status=True, status=True)[0]
                                #                     if silaboaduplicar.silabosemanal_set.filter(numsemana=itentest.evaluacion.silabosemanal.numsemana, status=True).exists():
                                #                         semanaactual = silaboaduplicar.silabosemanal_set.get(numsemana=itentest.evaluacion.silabosemanal.numsemana, status=True)
                                #                         ordentest = itentest.evaluacion.numactividad
                                #                         aprendizajestemassilabo(request, listami[1], lisaprendizaje.id, semanaactual.id, ordentest)

                                log(u'Importó el Sílabo: %s del profesor: %s al Silabo: %s el profesor: %s' % (silaboaduplicar.materia, silaboaduplicar.profesor.persona.nombre_completo_inverso(), silaboxduplicar, profesor), request, "add")
                                return JsonResponse({"result": "ok"})
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error ya se importo el sílabo."})
                        else:
                            return JsonResponse({"result": "bad", "mensaje": u"Error ya se importo el sílabo."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            ### FALTA AJUSTAR EL CODIGO PARA DUPLICAR SILABO DE OTRA CARRERA
            elif action == 'duplicar_silabo_carrera':
                try:
                    if 'ida' in request.POST and 'idact' in request.POST:
                        silaboxduplicar = Silabo.objects.get(pk=int(request.POST['ida']))
                        silaboaduplicar = Silabo.objects.get(pk=int(request.POST['idact']))
                        idcarreradestino = silaboaduplicar.materia.asignaturamalla.malla.carrera.id
                        if not silaboaduplicar.silabosemanal_set.filter(status=True).exists():
                            if silaboaduplicar.materia.tiene_cronograma():
                                planificacionsilaboact = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silaboaduplicar.materia, status=True).exclude(semana=0).order_by('orden')
                                for pact in planificacionsilaboact:
                                    pant = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silaboxduplicar.materia, status=True, semana=pact.semana)[0]
                                    if silaboxduplicar.silabosemanal_set.filter(status=True, fechainiciosemana__gte=pant.fechainicio, fechafinciosemana__lte=pant.fechafin).exists():
                                        semana = silaboxduplicar.silabosemanal_set.filter(status=True, fechainiciosemana__gte=pant.fechainicio, fechafinciosemana__lte=pant.fechafin)[0]
                                        if semana:
                                            # for dia in daterange(pact.fechainicio, pact.fechafin):
                                            # if not silaboaduplicar.silabosemanal_set.filter(semana=dia.isocalendar()[1]).exists():
                                            silabosemana = SilaboSemanal(silabo=silaboaduplicar,
                                                                         numsemana=pact.semana,
                                                                         semana=pact.fechainicio.isocalendar()[1],
                                                                         fechainiciosemana=pact.fechainicio,
                                                                         fechafinciosemana=pact.fechafin,
                                                                         objetivoaprendizaje=semana.objetivoaprendizaje,
                                                                         enfoque=semana.enfoque,
                                                                         enfoquedos=semana.enfoquedos,
                                                                         enfoquetres=semana.enfoquetres,
                                                                         recursos=semana.recursos,
                                                                         evaluacion=semana.evaluacion,
                                                                         horaspresencial=semana.horaspresencial,
                                                                         horaautonoma=semana.horaautonoma
                                                                         )
                                            silabosemana.save(request)

                                            if semana.detallesilabosemanalbibliografia_set.filter(status=True).exists():
                                                for blibliografiabasia in semana.detallesilabosemanalbibliografia_set.filter(status=True):
                                                    idlibroacopiar = blibliografiabasia.bibliografiaprogramaanaliticoasignatura.librokohaprogramaanaliticoasignatura.id
                                                    proganaliticoasigdestino = silaboaduplicar.programaanaliticoasignatura
                                                    if BibliografiaProgramaAnaliticoAsignatura.objects.filter(librokohaprogramaanaliticoasignatura_id=idlibroacopiar, programaanaliticoasignatura=proganaliticoasigdestino, status=True).exists():
                                                        detallebb = DetalleSilaboSemanalBibliografia(silabosemanal=silabosemana,
                                                                                                     bibliografiaprogramaanaliticoasignatura=blibliografiabasia.bibliografiaprogramaanaliticoasignatura,
                                                                                                     status=True)
                                                        detallebb.save(request)

                                            if semana.detallesilabosemanalbibliografiadocente_set.filter(status=True).exists():
                                                for bibliografiacomplementaria in semana.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                                                    detallebc = DetalleSilaboSemanalBibliografiaDocente(silabosemanal=silabosemana, librokohaprogramaanaliticoasignatura=bibliografiacomplementaria.librokohaprogramaanaliticoasignatura, status=True)
                                                    detallebc.save(request)

                                            temaprogramadestino = None

                                            listaunidadtema = []

                                            if semana.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True).exists():
                                                for itemtema in semana.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True):

                                                    numerotemaorigen = itemtema.temaunidadresultadoprogramaanalitico.orden
                                                    textoorigen = itemtema.temaunidadresultadoprogramaanalitico.descripcion
                                                    unidadorigen = itemtema.temaunidadresultadoprogramaanalitico.unidadresultadoprogramaanalitico.orden

                                                    listaunidadtema.append([unidadorigen, numerotemaorigen])

                                                    proganaliticoasigdestino = silaboaduplicar.programaanaliticoasignatura
                                                    proganaliticoasigdestino = silaboaduplicar.programaanaliticoasignatura.asignaturamalla

                                                    temaprogramadestino = TemaUnidadResultadoProgramaAnalitico.objects.filter(unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__asignaturamalla=proganaliticoasigdestino,
                                                                                                                              unidadresultadoprogramaanalitico__orden=unidadorigen,
                                                                                                                              orden=numerotemaorigen,
                                                                                                                              status=True,
                                                                                                                              unidadresultadoprogramaanalitico__status=True,
                                                                                                                              unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__status=True,
                                                                                                                              unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__status=True,
                                                                                                                              unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__activo=True
                                                                                                                              )
                                                    # for td in temaprogramadestino:
                                                    #     print(td.orden)
                                                    #     print(td.descripcion)

                                                    if temaprogramadestino:
                                                        temadestino = temaprogramadestino[0]
                                                        print(temadestino.orden)
                                                        print(temadestino.descripcion)

                                                        tema = DetalleSilaboSemanalTema(silabosemanal=silabosemana, temaunidadresultadoprogramaanalitico=temadestino, status=True)
                                                        tema.save(request)
                                                        if semana.subtemaadicionalessilabo_set.filter(status=True, tema=tema).exists():
                                                            for subtemaadicional in semana.subtemaadicionalessilabo_set.filter(status=True, tema=tema):
                                                                sub = SubTemaAdicionalesSilabo(silabosemanal=silabosemana, tema=tema, subtema=subtemaadicional.subtema)
                                                                sub.save(request)

                                            if semana.bibliograbiaapasilabo_set.filter(status=True).exists():
                                                for bibliografiavirtual in semana.bibliograbiaapasilabo_set.filter(status=True):
                                                    bibli = BibliograbiaAPASilabo(silabosemanal=silabosemana, bibliografia=bibliografiavirtual.bibliografia)
                                                    bibli.save(request)

                                            if temaprogramadestino:
                                                temadestino = temaprogramadestino[0]

                                                if semana.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__status=True).exists():
                                                    for itemsubtema in semana.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__status=True):
                                                        numerosubtemaorigen = itemsubtema.subtemaunidadresultadoprogramaanalitico.orden
                                                        textosubtemaorigen = itemsubtema.subtemaunidadresultadoprogramaanalitico.descripcion

                                                        # numerotemaorigen = itemtema.temaunidadresultadoprogramaanalitico.orden
                                                        # textoorigen = itemtema.temaunidadresultadoprogramaanalitico.descripcion

                                                        proganaliticoasigdestino = silaboaduplicar.programaanaliticoasignatura
                                                        proganaliticoasigdestino = silaboaduplicar.programaanaliticoasignatura.asignaturamalla

                                                        for itemtema in listaunidadtema:
                                                            unidadorigenlista = itemtema[0]
                                                            numerotemaorigenlista = itemtema[1]

                                                            if unidadorigenlista == 2 and numerotemaorigenlista == 3:
                                                                print("Hola")

                                                            subtemaprogramadestino = SubtemaUnidadResultadoProgramaAnalitico.objects.filter(
                                                                temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__asignaturamalla=proganaliticoasigdestino,
                                                                temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden=unidadorigenlista,
                                                                temaunidadresultadoprogramaanalitico__orden=numerotemaorigenlista,
                                                                temaunidadresultadoprogramaanalitico__status=True,
                                                                orden=numerosubtemaorigen,
                                                                status=True,
                                                                temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True,
                                                                temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__status=True,
                                                                temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__status=True,
                                                                temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__activo=True
                                                            )

                                                            for subtemadestino in subtemaprogramadestino:
                                                                # print(st.orden)
                                                                # print(st.descripcion)
                                                                if not DetalleSilaboSemanalSubtema.objects.filter(silabosemanal=silabosemana, subtemaunidadresultadoprogramaanalitico=subtemadestino, status=True).exists():
                                                                    subtema = DetalleSilaboSemanalSubtema(silabosemanal=silabosemana, subtemaunidadresultadoprogramaanalitico=subtemadestino, status=True)
                                                                    subtema.save(request)

                                            if semana.recursosdidacticossemanal_set.filter(status=True).exists():
                                                for recurso in semana.recursosdidacticossemanal_set.filter(status=True):
                                                    recurso = RecursosDidacticosSemanal(silabosemanal=silabosemana, descripcion=recurso.descripcion, link=recurso.link)
                                                    recurso.save(request)
                                            if semana.articulosilabosemanal_set.filter(status=True).exists():
                                                for articulo in semana.articulosilabosemanal_set.filter(status=True):
                                                    a = ArticuloSilaboSemanal(silabosemanal=silabosemana, articulo=articulo.articulo)
                                                    a.save(request)
                                            if silaboaduplicar.versionsilabo == 1:
                                                if semana.evaluacionaprendizajesilabosemanal_set.filter(status=True).exists():
                                                    for articulo in semana.evaluacionaprendizajesilabosemanal_set.filter(status=True):
                                                        a = EvaluacionAprendizajeSilaboSemanal(silabosemanal=silabosemana, evaluacionaprendizaje=articulo.evaluacionaprendizaje)
                                                        a.save(request)

                                log(u'Importó el Sílabo: %s del profesor: %s al Silabo: %s el profesor: %s' % (silaboaduplicar.materia, silaboaduplicar.profesor.persona.nombre_completo_inverso(), silaboxduplicar, profesor), request, "add")
                                return JsonResponse({"result": "ok"})
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error ya se importo el sílabo."})
                        else:
                            return JsonResponse({"result": "bad", "mensaje": u"Error ya se importo el sílabo."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'duplicar_silabo_carreravdos':
                try:
                    if 'ida' in request.POST and 'idact' in request.POST:
                        silaboxduplicar = Silabo.objects.get(pk=int(request.POST['ida']))
                        silaboaduplicar = Silabo.objects.get(pk=int(request.POST['idact']))
                        idcarreradestino = silaboaduplicar.materia.asignaturamalla.malla.carrera.id
                        listadostestmigrar = []
                        if not silaboaduplicar.silabosemanal_set.filter(status=True).exists():
                            if silaboaduplicar.materia.tiene_cronograma():
                                planificacionsilaboact = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silaboaduplicar.materia, status=True).exclude(semana=0).order_by('orden')
                                for pact in planificacionsilaboact:
                                    pant = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silaboxduplicar.materia, status=True, semana=pact.semana)[0]
                                    if silaboxduplicar.silabosemanal_set.filter(status=True, fechainiciosemana__gte=pant.fechainicio, fechafinciosemana__lte=pant.fechafin).exists():
                                        semana = silaboxduplicar.silabosemanal_set.filter(status=True, fechainiciosemana__gte=pant.fechainicio, fechafinciosemana__lte=pant.fechafin)[0]
                                        if semana:
                                            silabosemana = SilaboSemanal(silabo=silaboaduplicar,
                                                                         numsemana=pact.semana,
                                                                         semana=pact.fechainicio.isocalendar()[1],
                                                                         fechainiciosemana=pact.fechainicio,
                                                                         fechafinciosemana=pact.fechafin,
                                                                         objetivoaprendizaje=semana.objetivoaprendizaje,
                                                                         enfoque=semana.enfoque,
                                                                         enfoquedos=semana.enfoquedos,
                                                                         enfoquetres=semana.enfoquetres,
                                                                         recursos=semana.recursos,
                                                                         evaluacion=semana.evaluacion,
                                                                         horaspresencial=semana.horaspresencial,
                                                                         horaautonoma=semana.horaautonoma
                                                                         )
                                            silabosemana.save(request)

                                            if semana.detallesilabosemanalbibliografia_set.filter(status=True).exists():
                                                for blibliografiabasia in semana.detallesilabosemanalbibliografia_set.filter(status=True):
                                                    idlibroacopiar = blibliografiabasia.bibliografiaprogramaanaliticoasignatura.librokohaprogramaanaliticoasignatura.id
                                                    proganaliticoasigdestino = silaboaduplicar.programaanaliticoasignatura
                                                    if BibliografiaProgramaAnaliticoAsignatura.objects.filter(librokohaprogramaanaliticoasignatura_id=idlibroacopiar, programaanaliticoasignatura=proganaliticoasigdestino, status=True).exists():
                                                        detallebb = DetalleSilaboSemanalBibliografia(silabosemanal=silabosemana,
                                                                                                     bibliografiaprogramaanaliticoasignatura=blibliografiabasia.bibliografiaprogramaanaliticoasignatura,
                                                                                                     status=True)
                                                        detallebb.save(request)

                                            if semana.librosodilosilabosemanal_set.filter(status=True).exists():
                                                for listadoodilo in semana.librosodilosilabosemanal_set.filter(status=True):
                                                    libodilo = LibrosOdiloSilaboSemanal(silabosemanal=silabosemana,
                                                                                        codigo=listadoodilo.codigo,
                                                                                        titulo=listadoodilo.titulo,
                                                                                        isbm=listadoodilo.isbm,
                                                                                        autor=listadoodilo.autor,
                                                                                        fpublicacion=listadoodilo.fpublicacion,
                                                                                        small=listadoodilo.small,
                                                                                        status=True)
                                                    libodilo.save(request)

                                            if semana.detallesilabosemanalbibliografiadocente_set.filter(status=True).exists():
                                                for bibliografiacomplementaria in semana.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                                                    detallebc = DetalleSilaboSemanalBibliografiaDocente(silabosemanal=silabosemana, librokohaprogramaanaliticoasignatura=bibliografiacomplementaria.librokohaprogramaanaliticoasignatura, status=True)
                                                    detallebc.save(request)

                                            temaprogramadestino = None

                                            listaunidadtema = []

                                            if semana.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True).exists():
                                                for itemtema in semana.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True):
                                                    numerotemaorigen = itemtema.temaunidadresultadoprogramaanalitico.orden
                                                    textoorigen = itemtema.temaunidadresultadoprogramaanalitico.descripcion
                                                    unidadorigen = itemtema.temaunidadresultadoprogramaanalitico.unidadresultadoprogramaanalitico.orden
                                                    listaunidadtema.append([unidadorigen, numerotemaorigen])
                                                    proganaliticoasigdestino = silaboaduplicar.programaanaliticoasignatura
                                                    proganaliticoasigdestino = silaboaduplicar.programaanaliticoasignatura.asignaturamalla
                                                    temaprogramadestino = TemaUnidadResultadoProgramaAnalitico.objects.filter(unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__asignaturamalla=proganaliticoasigdestino, unidadresultadoprogramaanalitico__orden=unidadorigen, orden=numerotemaorigen, status=True, unidadresultadoprogramaanalitico__status=True, unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__status=True,
                                                                                                                              unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__status=True, unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__activo=True)

                                                    if temaprogramadestino:
                                                        temadestino = temaprogramadestino[0]
                                                        # print(temadestino.orden)
                                                        # print(temadestino.descripcion)
                                                        if itemtema.objetivoaprendizaje:
                                                            obj = itemtema.objetivoaprendizaje
                                                        else:
                                                            obj = silabosemana.objetivoaprendizaje
                                                        tema = DetalleSilaboSemanalTema(silabosemanal=silabosemana, temaunidadresultadoprogramaanalitico=temadestino, objetivoaprendizaje=obj, status=True)
                                                        tema.save(request)
                                                        listadostestmigrar.append([itemtema.id, tema.id])
                                                        if semana.subtemaadicionalessilabo_set.filter(status=True, tema=tema).exists():
                                                            for subtemaadicional in semana.subtemaadicionalessilabo_set.filter(status=True, tema=tema):
                                                                sub = SubTemaAdicionalesSilabo(silabosemanal=silabosemana, tema=tema, subtema=subtemaadicional.subtema)
                                                                sub.save(request)

                                            if semana.bibliograbiaapasilabo_set.filter(status=True).exists():
                                                for bibliografiavirtual in semana.bibliograbiaapasilabo_set.filter(status=True):
                                                    bibli = BibliograbiaAPASilabo(silabosemanal=silabosemana, bibliografia=bibliografiavirtual.bibliografia)
                                                    bibli.save(request)

                                            if temaprogramadestino:
                                                temadestino = temaprogramadestino[0]

                                                if semana.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__status=True).exists():
                                                    for itemsubtema in semana.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__status=True):
                                                        numerosubtemaorigen = itemsubtema.subtemaunidadresultadoprogramaanalitico.orden
                                                        textosubtemaorigen = itemsubtema.subtemaunidadresultadoprogramaanalitico.descripcion
                                                        proganaliticoasigdestino = silaboaduplicar.programaanaliticoasignatura
                                                        proganaliticoasigdestino = silaboaduplicar.programaanaliticoasignatura.asignaturamalla

                                                        for itemtema in listaunidadtema:
                                                            unidadorigenlista = itemtema[0]
                                                            numerotemaorigenlista = itemtema[1]

                                                            if unidadorigenlista == 2 and numerotemaorigenlista == 3:
                                                                print("Hola")

                                                            subtemaprogramadestino = SubtemaUnidadResultadoProgramaAnalitico.objects.filter(temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__asignaturamalla=proganaliticoasigdestino, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden=unidadorigenlista, temaunidadresultadoprogramaanalitico__orden=numerotemaorigenlista,
                                                                                                                                            temaunidadresultadoprogramaanalitico__status=True, orden=numerosubtemaorigen, status=True, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__status=True,
                                                                                                                                            temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__status=True, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura__activo=True)

                                                            for subtemadestino in subtemaprogramadestino:
                                                                if not DetalleSilaboSemanalSubtema.objects.filter(silabosemanal=silabosemana, subtemaunidadresultadoprogramaanalitico=subtemadestino, status=True).exists():
                                                                    subtema = DetalleSilaboSemanalSubtema(silabosemanal=silabosemana, subtemaunidadresultadoprogramaanalitico=subtemadestino, status=True)
                                                                    subtema.save(request)

                                            if semana.recursosdidacticossemanal_set.filter(status=True).exists():
                                                for recurso in semana.recursosdidacticossemanal_set.filter(status=True):
                                                    recurso = RecursosDidacticosSemanal(silabosemanal=silabosemana, descripcion=recurso.descripcion, link=recurso.link)
                                                    recurso.save(request)
                                            if semana.articulosilabosemanal_set.filter(status=True).exists():
                                                for articulo in semana.articulosilabosemanal_set.filter(status=True):
                                                    a = ArticuloSilaboSemanal(silabosemanal=silabosemana, articulo=articulo.articulo)
                                                    a.save(request)
                                            if silaboaduplicar.versionsilabo == 1:
                                                if semana.evaluacionaprendizajesilabosemanal_set.filter(status=True).exists():
                                                    for articulo in semana.evaluacionaprendizajesilabosemanal_set.filter(status=True):
                                                        a = EvaluacionAprendizajeSilaboSemanal(silabosemanal=silabosemana, evaluacionaprendizaje=articulo.evaluacionaprendizaje)
                                                        a.save(request)

                                if silaboxduplicar.versionsilabo == 2 and silaboxduplicar.materia.nivel.periodo_id >= 113:
                                    listadosemanaante = silaboxduplicar.silabosemanal_set.filter(status=True).order_by('numsemana')
                                    temasactuales = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silaboaduplicar, silabosemanal__status=True, status=True)
                                    for semanaant in listadosemanaante:
                                        idsemanaactual = silaboaduplicar.silabosemanal_set.filter(numsemana=semanaant.numsemana, silabo__status=True, status=True)[0]
                                        listadoaprendizaje = EvaluacionAprendizajeTema.objects.filter(evaluacion__silabosemanal=semanaant, evaluacion__silabosemanal__status=True, evaluacion__tipoactividadsemanal=1, temasemanal__silabosemanal__status=True, temasemanal__silabosemanal__silabo__status=True, temasemanal__status=True, status=True).distinct()
                                        if listadostestmigrar:
                                            for lisaprendizaje in listadoaprendizaje:
                                                for temaactual in temasactuales:
                                                    codaprendizaje = EvaluacionAprendizajeTema.objects.get(pk=lisaprendizaje.id)
                                                    semanacod = codaprendizaje.temasemanal.silabosemanal.numsemana
                                                    if temaactual.temaunidadresultadoprogramaanalitico.descripcion == lisaprendizaje.temasemanal.temaunidadresultadoprogramaanalitico.descripcion and temaactual.silabosemanal.numsemana == semanacod:
                                                        aprendizajestemassilabo(request, temaactual.id, lisaprendizaje.evaluacion.evaluacionaprendizaje.id, idsemanaactual.id, lisaprendizaje.evaluacion.numactividad)

                                # if silaboaduplicar.versionsilabo == 2:
                                #     if listadostestmigrar:
                                #         ordentest = 0
                                #         listadoaprendizaje = EvaluacionAprendizajeComponente.objects.filter(status=True)
                                #         for listami in listadostestmigrar:
                                #             idtemaantiguo = listami[0]
                                #             idtemaactual = ''
                                #             # idtemaactual = list(listami[1])
                                #
                                #             # semanaactual = DetalleSilaboSemanalTema.objects.get(pk=listami[1])
                                #             for lisaprendizaje in listadoaprendizaje:
                                #                 if EvaluacionAprendizajeTema.objects.filter(temasemanal_id=listami[0], evaluacion__evaluacionaprendizaje_id=lisaprendizaje.id, evaluacion__tipoactividadsemanal=1, status=True):
                                #                     itentest = EvaluacionAprendizajeTema.objects.get(temasemanal_id=listami[0], evaluacion__evaluacionaprendizaje_id=lisaprendizaje.id, evaluacion__tipoactividadsemanal=1, status=True)
                                #                     semanaactual = silaboaduplicar.silabosemanal_set.get(numsemana=itentest.evaluacion.silabosemanal.numsemana)
                                #                     ordentest = itentest.evaluacion.numactividad
                                #                     aprendizajestemassilabo(request, listami[1], lisaprendizaje.id, semanaactual.id, ordentest)
                                log(u'Importó el Sílabo: %s del profesor: %s al Silabo: %s el profesor: %s' % (silaboaduplicar.materia, silaboaduplicar.profesor.persona.nombre_completo_inverso(), silaboxduplicar, profesor), request, "add")
                                return JsonResponse({"result": "ok"})
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error ya se importo el sílabo."})
                        else:
                            return JsonResponse({"result": "bad", "mensaje": u"Error ya se importo el sílabo."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            # adicionar nuevo silabo
            elif action == 'adicionar_silabo':
                try:
                    materia = Materia.objects.get(pk=int(request.POST['idm']))
                    if prueba_modelo_evaluativo:
                        programa = ProgramaAnaliticoAsignatura.objects.get(pk=int(request.POST['idp']))
                    else:
                        programa = ProgramaAnaliticoAsignatura.objects.get(pk=int(request.POST['idp']), status=True, activo=True)
                    # if Silabo.objects.filter(materia=materia, programaanaliticoasignatura=programa, profesor=profesor).exists():
                    if Silabo.objects.filter(materia=materia, status=True, programaanaliticoasignatura=programa).exists():
                        return JsonResponse({"result": "bad", "mensaje": u"El Programa Analítico ya se encuentra en un sílabo para la materia: " + str(materia.asignaturamalla.asignatura) + " - " + str(materia.asignaturamalla.nivelmalla.nombre) + " - P. [" + str(materia.paralelo) + "]."})
                    if not Silabo.objects.filter(materia=materia, profesor=profesor, status=True, programaanaliticoasignatura=programa).exists():
                        crearsilabo = Silabo(materia=materia,
                                             profesor=profesor,
                                             programaanaliticoasignatura=programa)
                        crearsilabo.save(request)
                        log(u'Adicionó nuevo Sílabo: %s' % crearsilabo, request, "add")
                        # materia.silabo_set.filter(profesor=profesor, programaanaliticoasignatura__activo=False).update(status = False)
                        if prueba_modelo_evaluativo: materia.silabo_set.filter(programaanaliticoasignatura__activo=False).exclude(programaanaliticoasignatura__procedimientoeva_id=6).update(status=False)
                        else: materia.silabo_set.filter(programaanaliticoasignatura__activo=False).update(status=False)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'adicionar_silabo_posgrado':
                try:
                    materia = Materia.objects.get(pk=int(request.POST['idm']))
                    carrera = materia.asignaturamalla.malla.carrera
                    coordinadorprograma = None
                    coordinadoracademico = None
                    cp = CoordinadorCarrera.objects.filter(periodo=periodo, carrera=carrera, tipo=3)
                    if cp:
                        coordinadorprograma = cp[0].persona
                    # else:
                    #     return JsonResponse({"result": "bad","mensaje": u"No se encuentra configurado el coordinador del Programa, favor solicitar ayuda a su coordinación"})
                    ca = Departamento.objects.filter(status=True, nombre__icontains='POSTGRADO')
                    if ca:
                        coordinadoracademico = ca[0].responsable
                    # else:
                    #     return JsonResponse({"result": "bad","mensaje": u"No se encuentra configurado el coordinador académico, favor solicitar ayuda al TICS"})

                    programa = ProgramaAnaliticoAsignatura.objects.get(pk=int(request.POST['idp']), status=True, activo=True)
                    # if Silabo.objects.filter(materia=materia, programaanaliticoasignatura=programa, profesor=profesor).exists():
                    if Silabo.objects.filter(materia=materia, programaanaliticoasignatura=programa).exists():
                        return JsonResponse({"result": "bad", "mensaje": u"El Programa Analítico ya se encuentra en un sílabo para la materia: " + str(materia.asignaturamalla.asignatura) + " - " + str(materia.asignaturamalla.nivelmalla.nombre) + " - P. [" + str(materia.paralelo) + "]."})
                    if not Silabo.objects.filter(materia=materia, profesor=profesor, status=True, programaanaliticoasignatura=programa).exists():
                        crearsilabo = Silabo(materia=materia,
                                             profesor=profesor,
                                             programaanaliticoasignatura=programa)
                        crearsilabo.save(request)
                        log(u'Adicionó nuevo Sílabo: %s' % crearsilabo, request, "add")
                        silabofirmas = SilaboFirmas(silabo=crearsilabo,
                                                    coordinadorprograma=coordinadorprograma,
                                                    coordinadoracademico=coordinadoracademico)
                        silabofirmas.save(request)
                        log(u'Adicionó firma silabo: %s' % silabofirmas, request, "add")
                        # materia.silabo_set.filter(profesor=profesor, programaanaliticoasignatura__activo=False).update(status = False)
                        materia.silabo_set.filter(programaanaliticoasignatura__activo=False).update(status=False)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'selecttema':
                try:
                    lista = []
                    tema = TemaUnidadResultadoProgramaAnalitico.objects.get(pk=int(request.POST['idt']))
                    subtemas = tema.subtemaunidadresultadoprogramaanalitico_set.filter(status=True)
                    if subtemas.exists():
                        for subtema in subtemas:
                            lista.append(subtema.id)
                    return JsonResponse({"result": "ok", 'lista': lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'cerrar_habilitacion':
                try:
                    habilitacion = profesor.cerrar_habilitacion()
                    habilitacion.status = False
                    habilitacion.save(request)
                    log(u'Cerró habilitación: %s' % (habilitacion), request, "del")
                    return JsonResponse({'result': 'ok'})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'detalleaprobacion':
                try:
                    data['silabo'] = silabo = Silabo.objects.get(pk=int(request.POST['id']))
                    data['historialaprobacion'] = silabo.aprobarsilabo_set.filter(status=True).order_by('-id').exclude(estadoaprobacion=variable_valor('PENDIENTE_SILABO'))
                    data['aprobar'] = variable_valor('APROBAR_SILABO')
                    data['rechazar'] = variable_valor('RECHAZAR_SILABO')
                    data['pendiente'] = variable_valor('PENDIENTE_SILABO')
                    template = get_template("pro_planificacion/detalleaprobacion.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'detalleaprobaciondecano':
                try:
                    data['silabo'] = silabo = Silabo.objects.get(pk=int(request.POST['id']))
                    data['historialaprobacion'] = silabo.aprobarsilabodecano_set.filter(status=True).order_by('-id').exclude(estadoaprobacion=variable_valor('PENDIENTE_SILABO'))
                    data['aprobar'] = variable_valor('APROBAR_SILABO')
                    data['rechazar'] = variable_valor('RECHAZAR_SILABO')
                    data['pendiente'] = variable_valor('PENDIENTE_SILABO')
                    template = get_template("pro_planificacion/detalleaprobacion.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
            # activar Silabo
            elif action == 'activarsilabo':
                try:
                    silabo = Silabo.objects.get(pk=int(encrypt(request.POST['id'])))
                    filters = Q(status=True)
                    if prueba_modelo_evaluativo:  filters &= Q(procedimientoeva_id=6)
                    else: filters &= Q(activo=True)
                    if ProgramaAnaliticoAsignatura.objects.values("id").filter(pk=silabo.programaanaliticoasignatura.id).filter(filters).exists():
                        if not silabo.status:
                            return JsonResponse({"result": "ok"})
                        else:
                            return JsonResponse({"result": "bad", "mensaje": u"Silabo no esta activo."})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"No Tiene Programa Analítico activo."})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'importarsilabo':
                try:
                    silabo = Silabo.objects.filter(materia__nivel__periodo_id=request.POST['id'], materia__asignatura_id=request.POST['idasig'], status=True)
                    lista = []
                    for detasilabo in silabo:
                        lista.append([detasilabo.id, detasilabo.materia.asignatura.nombre, detasilabo.materia.paralelo, detasilabo.profesor.persona.nombre_completo().lower().title()])
                    return JsonResponse({'result': 'ok', 'lista': lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'activarsilabod':
                try:
                    if 'id' in request.POST:
                        silabo = Silabo.objects.get(pk=int(encrypt(request.POST['id'])))
                        # Silabo.objects.filter(materia=silabo.materia, profesor=profesor).exclude(pk=silabo.id).update(status=False)
                        Silabo.objects.filter(materia=silabo.materia).exclude(pk=silabo.id).update(status=False)
                        silabo.status = True
                        silabo.save(request)
                        log(u'Activo el Sílabo: %s' % silabo, request, "edit")
                        return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # eliminar silabo cabecera si es que no cuenta con planificacion semanal
            elif action == 'delsilabo':
                try:
                    silabo = Silabo.objects.get(pk=int(encrypt(request.POST['id'])))
                    # if not silabo.silabosemanal_set.values("id").exists():
                    log(u'Eliminó cabecera de Sílabo: %s-%s la persona: %s' % (silabo.materia, silabo.fecha_creacion, persona), request, "del")
                    if silabo.aprobarsilabo_set.filter(status=True).exists():
                        silabo.aprobarsilabo_set.filter(status=True).update(status=False)
                    EvaluacionAprendizajeTema.objects.filter(evaluacion__silabosemanal__silabo=silabo, evaluacion__tipoactividadsemanal=1).update(status=False)
                    SilaboSemanal.objects.filter(silabo=silabo).update(status=False)
                    DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabo).update(status=False)
                    DetalleSilaboSemanalSubtema.objects.filter(silabosemanal__silabo=silabo).update(status=False)
                    DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal__silabo=silabo).update(status=False)
                    DetalleSilaboSemanalBibliografiaDocente.objects.filter(silabosemanal__silabo=silabo).update(status=False)
                    RecursosDidacticosSemanal.objects.filter(silabosemanal__silabo=silabo).update(status=False)
                    if GPGuiaPracticaSemanal.objects.filter(silabosemanal__silabo=silabo).exists():
                        GPInstruccion.objects.filter(guiasemanal_id__in=GPGuiaPracticaSemanal.objects.values_list('id', flat=False).filter(silabosemanal__silabo=silabo)).update(status=False)
                        GPGuiaPracticaSemanal.objects.filter(silabosemanal__silabo=silabo).update(status=False)
                    silabo.codigoqr = False
                    silabo.status = False
                    silabo.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # eliminar detalle de laboratorio
            elif action == 'deldetallelaboratorio':
                try:
                    detalle = GPLugarPracticaDetalle.objects.get(pk=int(encrypt(request.POST['id'])))
                    # if not silabo.silabosemanal_set.values("id").exists():
                    log(u'Eliminó el delatalle del laboratorio: %s la persona: %s' % (detalle, persona), request, "del")
                    detalle.status = False
                    detalle.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # editar evaluacion
            elif action == 'addplanificacion_salida':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['ids'])))
                    salida = PlanificacionSemanalSalida(silabosemanal=silabosemana, descripcion=request.POST['cont'])
                    salida.save(request)
                    log(u'Adicionó salida de clases: %s' % salida, request, "add")
                    # de rechazado pendiente
                    silabosemana.modifico_silabo(persona, request)
                    return JsonResponse({"result": "ok", "ids": encrypt(silabosemana.silabo.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editplanificacion_salida':
                try:
                    salida = PlanificacionSemanalSalida.objects.get(pk=int(encrypt(request.POST['ids'])))
                    salida.descripcion = request.POST['cont']
                    salida.save(request)
                    log(u'Editó salida de clases: %s' % salida, request, "edit")
                    # de rechazado pendiente
                    salida.silabosemanal.modifico_silabo(persona, request)
                    return JsonResponse({"result": "ok", "ids": encrypt(salida.silabosemanal.silabo.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delplanificacion_salida':
                try:
                    salida = PlanificacionSemanalSalida.objects.get(pk=int(encrypt(request.POST['id'])))
                    log(u'Eliminó salida de clase: %s la persona: %s' % (salida, persona), request, "del")
                    salida.status = False
                    salida.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # eliminar bibliografia virtual
            elif action == 'delbibliografiavirtual':
                try:
                    bvirtual = BibliograbiaAPASilabo.objects.get(pk=int(encrypt(request.POST['id'])))
                    log(u'Eliminó la Bibliografía Viertual: %s' % bvirtual, request, "del")
                    # de rechazado pendiente
                    bvirtual.silabosemanal.modifico_silabo(persona, request)
                    bvirtual.status = False
                    bvirtual.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delarticulosilabo':
                try:
                    articulo = ArticuloSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    log(u'Eliminó articulo semanal: %s' % articulo, request, "del")
                    articulo.silabosemanal.modifico_silabo(persona, request)
                    articulo.status = False
                    articulo.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delarticulosilabovirtual':
                try:
                    articulo = ArticuloSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    log(u'Eliminó articulo semanal: %s' % articulo, request, "del")
                    articulo.silabosemanal.modifico_silabo(persona, request)
                    articulo.update(status=False)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addsubtemasadicional':
                try:
                    silabosemana = SilaboSemanal.objects.get(status=True, pk=int(encrypt(request.POST['ids'])))
                    if 'lista' in request.POST:
                        for x in json.loads(request.POST['lista']):
                            if not SubTemaAdicionalesSilabo.objects.filter(status=True, silabosemanal_id=int(encrypt(request.POST['ids'])), subtema=x['subtema']).exists():
                                subtema = SubTemaAdicionalesSilabo(silabosemanal_id=int(encrypt(request.POST['ids'])), tema_id=int(x['idtema']), subtema=x['subtema'])
                                subtema.save(request)
                                log(u'Adicionó el subtema %s a la semana %s' % (subtema, subtema.silabosemanal), request, "add")
                        if SubTemaAdicionalesSilabo.objects.filter(status=True, silabosemanal_id=int(encrypt(request.POST['ids']))).exclude(subtema__in=[s['subtema'] for s in json.loads(request.POST['lista'])]):
                            for st in SubTemaAdicionalesSilabo.objects.filter(status=True, silabosemanal_id=int(encrypt(request.POST['ids']))).exclude(subtema__in=[s['subtema'] for s in json.loads(request.POST['lista'])]):
                                log(u'Eliminó el subtema %s a la semana %s' % (st, st.silabosemanal), request, "del")
                            SubTemaAdicionalesSilabo.objects.filter(status=True, silabosemanal_id=int(encrypt(request.POST['ids']))).exclude(subtema__in=[s['subtema'] for s in json.loads(request.POST['lista'])]).update(status=False)
                    silabosemana.modifico_silabo(persona, request)
                    return JsonResponse({"result": "ok", "ids": encrypt(silabosemana.silabo.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'duplicar_silabo_otro_periodo':
                try:
                    data['title'] = u'Sílabos que puede importar de otros periodos'
                    listaperiodo = []
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.POST['ids'])))
                    # data['periodos'] = Periodo.objects.filter(status=True, pk__in=silabo.lista_periodos_silabos()).exclude(tipo_id=3).order_by('-inicio')
                    data['periodos'] = Periodo.objects.filter(status=True).exclude(tipo_id=3).order_by('-inicio')
                    data['semana'] = request.POST['semana']
                    data['numsemana'] = request.POST['numsemana']
                    data['fini'] = str(request.POST['fini'])
                    data['ffin'] = str(request.POST['ffin'])
                    data['idsact'] = silabo.id
                    template = get_template("pro_planificacion/importarsilaboperiodo.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'lista_silabos_periodo':
                lista = []
                try:
                    if 'ida' in request.POST and 'id' in request.POST:
                        silaboact = Silabo.objects.get(status=True, pk=int(request.POST['ida']))
                        silabos = Silabo.objects.filter(status=True, programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id, materia__asignaturamalla__id=silaboact.materia.asignaturamalla.id, materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)
                        for silabo in silabos:
                            if silabo.estado_planificacion_clases() >= 100:
                                lista.append([silabo.id, silabo.materia.asignaturamalla.asignatura.nombre + " " + str(silabo.materia.asignaturamalla.nivelmalla) + " " + str(silabo.materia.paralelo), str(silabo.fecha_creacion.strftime("%Y/%m/%d")), str(silabo.profesor), str(silabo.estado_planificacion_clases())])
                        return JsonResponse({"result": "ok", "lista": lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'planificacion_semanal_importar':
                lista = []
                try:
                    if 'idsant' in request.POST:
                        data['idsact'] = request.POST['idsact']
                        data['semana'] = request.POST['semana']
                        data['numsemana'] = request.POST['numsemana']
                        data['fini'] = request.POST['fini']
                        data['ffin'] = request.POST['ffin']
                        silabo = Silabo.objects.get(status=True, pk=int(request.POST['idsant']))
                        for semana in silabo.silabosemanal_set.filter(status=True).order_by('numsemana', 'fechainiciosemana'):
                            listabibliografiacomplementaria = []
                            for biblic in semana.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                                listabibliografiacomplementaria.append([str(biblic.librokohaprogramaanaliticoasignatura)])
                            listabibliografiabasica = []
                            for biblib in semana.detallesilabosemanalbibliografia_set.filter(status=True):
                                listabibliografiabasica.append([str(biblib)])
                            lista.append([semana.silabo.id,
                                          semana.id,
                                          str(semana.fechainiciosemana.strftime("%Y/%m/%d")),
                                          str(semana.fechafinciosemana.strftime("%Y/%m/%d")),
                                          semana,
                                          listabibliografiabasica,
                                          listabibliografiacomplementaria,
                                          str(semana.objetivoaprendizaje),
                                          str(semana.enfoque),
                                          str(semana.recursos),
                                          str(semana.evaluacion),
                                          str(semana.numsemana)])
                    data['semanas'] = lista
                    template = get_template("pro_planificacion/planificacion_semanal.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_semana_planificada':
                try:
                    if 'idi' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['ids']))
                        semanaant = silaboant.silabosemanal_set.get(pk=int(request.POST['idi']))
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        semana = SilaboSemanal(silabo=silaboactual,
                                               numsemana=request.POST['numsemana'],
                                               semana=request.POST['semana'],
                                               fechainiciosemana=request.POST['fini'],
                                               fechafinciosemana=request.POST['ffin'],
                                               objetivoaprendizaje=semanaant.objetivoaprendizaje,
                                               enfoque=semanaant.enfoque,
                                               enfoquedos=semanaant.enfoquedos,
                                               enfoquetres=semanaant.enfoquetres,
                                               recursos=semanaant.recursos,
                                               evaluacion=semanaant.evaluacion,
                                               horaspresencial=semanaant.horaspresencial,
                                               horaautonoma=semanaant.horaautonoma)
                        semana.save(request)
                        lista_temas_migrar = []
                        for tema in semanaant.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True):
                            temaanterior = tema
                            if tema.objetivoaprendizaje:
                                tema_nuevo = DetalleSilaboSemanalTema(silabosemanal=semana, temaunidadresultadoprogramaanalitico=tema.temaunidadresultadoprogramaanalitico, objetivoaprendizaje=tema.objetivoaprendizaje)
                            else:
                                tema_nuevo = DetalleSilaboSemanalTema(silabosemanal=semana, temaunidadresultadoprogramaanalitico=tema.temaunidadresultadoprogramaanalitico, objetivoaprendizaje=semana.objetivoaprendizaje)
                            tema_nuevo.save(request)
                            lista_temas_migrar.append([temaanterior.id, tema_nuevo.id])

                            if semanaant.subtemaadicionalessilabo_set.filter(status=True, tema=tema).exists():
                                for subtemaadicional in semanaant.subtemaadicionalessilabo_set.filter(status=True, tema=tema):
                                    sub = SubTemaAdicionalesSilabo(silabosemanal=semana, tema=tema, subtema=subtemaadicional.subtema)
                                    sub.save(request)
                        for subtema in semanaant.detallesilabosemanalsubtema_set.filter(status=True):
                            subtema = DetalleSilaboSemanalSubtema(silabosemanal=semana, subtemaunidadresultadoprogramaanalitico=subtema.subtemaunidadresultadoprogramaanalitico)
                            subtema.save(request)
                        for biblio in semanaant.detallesilabosemanalbibliografia_set.filter(status=True):
                            bibliografia = DetalleSilaboSemanalBibliografia(silabosemanal=semana, bibliografiaprogramaanaliticoasignatura_id=biblio.bibliografiaprogramaanaliticoasignatura.id)
                            bibliografia.save(request)
                        for biblic in semanaant.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                            bibliografiac = DetalleSilaboSemanalBibliografiaDocente(silabosemanal=semana, librokohaprogramaanaliticoasignatura=biblic.librokohaprogramaanaliticoasignatura)
                            bibliografiac.save(request)
                        if semanaant.bibliograbiaapasilabo_set.filter(status=True).exists():
                            for bibliv in semanaant.bibliograbiaapasilabo_set.filter(status=True):
                                bibliografiav = BibliograbiaAPASilabo(silabosemanal=semana, bibliografia=bibliv.bibliografia)
                                bibliografiav.save(request)
                        if semanaant.recursosdidacticossemanal_set.filter(status=True).exists():
                            for recurso in semanaant.recursosdidacticossemanal_set.filter(status=True):
                                rec = RecursosDidacticosSemanal(silabosemanal=semana, descripcion=recurso.descripcion, link=recurso.link)
                                rec.save(request)
                        if semanaant.articulosilabosemanal_set.filter(status=True).exists():
                            for articulo in semanaant.articulosilabosemanal_set.filter(status=True):
                                a = ArticuloSilaboSemanal(silabosemanal=semana, articulo=articulo.articulo)
                                a.save(request)
                        # if semanaant.evaluacionaprendizajesilabosemanal_set.filter(status=True).exists():
                        #     for articulo in semanaant.evaluacionaprendizajesilabosemanal_set.filter(status=True):
                        #         a = EvaluacionAprendizajeSilaboSemanal(silabosemanal=semana, evaluacionaprendizaje=articulo.evaluacionaprendizaje)
                        #         a.save(request)

                        # if silaboant.versionsilabo == 2 and silaboant.materia.nivel.periodo_id >= 113:
                        #     if lista_temas_migrar:
                        #         ordentest = 0
                        #         listadoaprendizaje = EvaluacionAprendizajeComponente.objects.filter(status=True)
                        #         for listami in lista_temas_migrar:
                        #             idtemaantiguo = listami[0]
                        #             idtemaactual = ''
                        #             for lisaprendizaje in listadoaprendizaje:
                        #                 if EvaluacionAprendizajeTema.objects.values('id').filter(
                        #                         temasemanal_id=listami[0],
                        #                         evaluacion__evaluacionaprendizaje_id=lisaprendizaje.id,
                        #                         evaluacion__tipoactividadsemanal=1,
                        #                         evaluacion__silabosemanal__status=True,
                        #                         temasemanal__silabosemanal__status=True, status=True).exists():
                        #                     itentest = EvaluacionAprendizajeTema.objects.get(temasemanal_id=listami[0], evaluacion__evaluacionaprendizaje_id=lisaprendizaje.id, evaluacion__silabosemanal__status=True, evaluacion__tipoactividadsemanal=1, temasemanal__silabosemanal__status=True, temasemanal__silabosemanal__silabo__status=True, temasemanal__status=True, status=True)
                        #                     ordentest = itentest.evaluacion.numactividad
                        #                     aprendizajestemassilabo(request, listami[1], lisaprendizaje.id, semana.id, ordentest)

                        log(u'Importó el semana: %s del profesor: %s a la semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semana, semana.silabo.profesor.persona.nombre_completo_inverso()), request, "add")
                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_recursosemana_planificada':
                try:
                    if 'idi' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['ids']))
                        semanaant = silaboant.silabosemanal_set.get(pk=int(request.POST['idi']))
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        semanaactual = SilaboSemanal.objects.get(status=True, pk=int(request.POST['idsemanal']))

                        for importatarea in semanaant.tareasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            tarea = TareaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                       silabosemanal_id=semanaactual.id,
                                                       estado_id=2,
                                                       calificar=importatarea.calificar,
                                                       nombre=importatarea.nombre,
                                                       objetivo=importatarea.objetivo,
                                                       instruccion=importatarea.instruccion,
                                                       recomendacion=importatarea.recomendacion,
                                                       rubrica=importatarea.rubrica,
                                                       rubricamoodle=importatarea.rubricamoodle,
                                                       archivorubrica=importatarea.archivorubrica,
                                                       archivotareasilabo=importatarea.archivotareasilabo,
                                                       fechadesde=importatarea.fechadesde,
                                                       fechahasta=importatarea.fechahasta,
                                                       word=importatarea.word,
                                                       pdf=importatarea.pdf,
                                                       excel=importatarea.excel,
                                                       todos=importatarea.todos,
                                                       powerpoint=importatarea.powerpoint,
                                                       tiporecurso_id=5)
                            tarea.save(request)
                            importar = importatarea
                            # TareaSilaboSemanal.objects.filter(pk=tarea.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in importatarea.historialaprobaciontarea_set.filter(status=True, estado_id__lte=2):
                                historialaprobaciontarea = HistorialaprobacionTarea(tarea=tarea,
                                                                                    estado=historial.estado,
                                                                                    observacion=historial.observacion)
                                historialaprobaciontarea.save(request)
                                # HistorialaprobacionTarea.objects.filter(pk=historialaprobaciontarea.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importaforo in semanaant.forosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            foro = ForoSilaboSemanal(detallemodelo=importaforo.detallemodelo,
                                                     silabosemanal_id=semanaactual.id,
                                                     calificar=importaforo.calificar,
                                                     tipoforo=importaforo.tipoforo,
                                                     tipoconsolidacion=importaforo.tipoconsolidacion,
                                                     estado_id=2,
                                                     nombre=importaforo.nombre,
                                                     objetivo=importaforo.objetivo,
                                                     instruccion=importaforo.instruccion,
                                                     recomendacion=importaforo.recomendacion,
                                                     rubrica=importaforo.rubrica,
                                                     archivorubrica=importaforo.archivorubrica,
                                                     archivoforo=importaforo.archivoforo,
                                                     fechadesde=importaforo.fechadesde,
                                                     fechahasta=importaforo.fechahasta,
                                                     tiporecurso_id=9)
                            foro.save(request)
                            importar = importaforo
                            # ForoSilaboSemanal.objects.filter(pk=foro.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in importaforo.historialaprobacionforo_set.filter(status=True, estado_id__lte=2):
                                historialaprobacionforo = HistorialaprobacionForo(foro=foro, estado=historial.estado, observacion=historial.observacion)
                                historialaprobacionforo.save(request)
                                # HistorialaprobacionForo.objects.filter(pk=historialaprobacionforo.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importatest in semanaant.testsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            testsilabo = TestSilaboSemanal(detallemodelo=importatest.detallemodelo,
                                                           silabosemanal_id=semanaactual.id,
                                                           estado_id=2,
                                                           calificar=importatest.calificar,
                                                           instruccion=importatest.instruccion,
                                                           recomendacion=importatest.recomendacion,
                                                           fechadesde=importatest.fechadesde,
                                                           fechahasta=importatest.fechahasta,
                                                           vecesintento=importatest.vecesintento,
                                                           archivorubrica=importatest.archivorubrica,
                                                           tiempoduracion=importatest.tiempoduracion,
                                                           tiporecurso_id=11)
                            testsilabo.save(request)
                            importar = importatest
                            # TestSilaboSemanal.objects.filter(pk=testsilabo.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in testsilabo.historialaprobaciontest_set.filter(status=True, estado_id__lte=2):
                                historialaprobaciontest = HistorialaprobacionTest(test=testsilabo,
                                                                                  estado=historial.estado,
                                                                                  observacion=historial.observacion)
                                historialaprobaciontest.save(request)
                                # HistorialaprobacionTest.objects.filter(pk=historialaprobaciontest.id).update(usuario_creacion=historial.usuario_creacion, fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importaguiaes in semanaant.guiaestudiantesilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            guiaestudiante = GuiaEstudianteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                         estado_id=2,
                                                                         observacion=importaguiaes.observacion,
                                                                         archivoguiaestudiante=importaguiaes.archivoguiaestudiante,
                                                                         archivo_logo=importaguiaes.archivo_logo,
                                                                         archivo_sin_logo=importaguiaes.archivo_sin_logo,
                                                                         tiporecurso_id=2)
                            guiaestudiante.save(request)
                            importar = importaguiaes
                            # GuiaEstudianteSilaboSemanal.objects.filter(pk=guiaestudiante.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in guiaestudiante.historialaprobacionguiaestudiante_set.filter(status=True, estado_id__lte=2):
                                historialaprobacionguiaestudiante = HistorialaprobacionGuiaEstudiante(guiaestudiante=guiaestudiante,
                                                                                                      estado=historial.estado,
                                                                                                      observacion=historial.observacion)
                                historialaprobacionguiaestudiante.save(request)
                                # HistorialaprobacionGuiaEstudiante.objects.filter(pk=historialaprobacionguiaestudiante.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        # for importaguiado in semanaant.guiadocentesilabosemanal_set.filter(status=True,estado_id__in=[2,4]):
                        #     guiadocente = GuiaDocenteSilaboSemanal(silabosemanal_id=semanaactual.id,
                        #                                            estado_id=2,
                        #                                            observacion=importaguiado.observacion,
                        #                                            archivoguiadocente=importaguiado.archivoguiadocente)
                        #     guiadocente.save(request)
                        #     importar = importaguiado
                        #     # GuiaDocenteSilaboSemanal.objects.filter(pk=guiadocente.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                        #     # historial
                        #     for historial in guiadocente.historialaprobacionguiadocente_set.filter(status=True,estado_id__lte=2):
                        #         historialaprobacionguiadocente = HistorialaprobacionGuiaDocente(guiadocente=guiadocente,
                        #                                                                         estado=historial.estado,
                        #                                                                         observacion=historial.observacion)
                        #         historialaprobacionguiadocente.save(request)
                        # HistorialaprobacionGuiaDocente.objects.filter(pk=historialaprobacionguiadocente.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importadiapositiva in semanaant.diapositivasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            diapositiva = DiapositivaSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                   estado_id=2,
                                                                   nombre=importadiapositiva.nombre,
                                                                   descripcion=importadiapositiva.descripcion,
                                                                   url=importadiapositiva.url,
                                                                   tipomaterial=importadiapositiva.tipomaterial,
                                                                   archivodiapositiva=importadiapositiva.archivodiapositiva,
                                                                   tiporecurso_id=1)
                            diapositiva.save(request)
                            importar = importadiapositiva
                            # DiapositivaSilaboSemanal.objects.filter(pk=diapositiva.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in diapositiva.historialaprobaciondiapositiva_set.filter(status=True, estado_id__lte=2):
                                historialaprobaciondiapositiva = HistorialaprobacionDiapositiva(diapositiva=diapositiva,
                                                                                                estado=historial.estado,
                                                                                                observacion=historial.observacion)
                                historialaprobaciondiapositiva.save(request)
                                # HistorialaprobacionDiapositiva.objects.filter(pk=historialaprobaciondiapositiva.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importacompendio in semanaant.compendiosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            compendio = CompendioSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                               estado_id=2,
                                                               descripcion=importacompendio.descripcion,
                                                               archivocompendio=importacompendio.archivocompendio,
                                                               archivo_logo=importacompendio.archivo_logo,
                                                               archivo_sin_logo=importacompendio.archivo_sin_logo,
                                                               tiporecurso_id=3)
                            compendio.save(request)
                            importar = importacompendio
                            # CompendioSilaboSemanal.objects.filter(pk=compendio.id).update(
                            #     usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,
                            #     usuario_modificacion=importar.usuario_modificacion,
                            #     fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in compendio.historialaprobacioncompendio_set.filter(status=True, estado_id__lte=2):
                                historialaprobacioncompendio = HistorialaprobacionCompendio(compendio=compendio,
                                                                                            estado=historial.estado,
                                                                                            observacion=historial.observacion)
                                historialaprobacioncompendio.save(request)
                                # HistorialaprobacionCompendio.objects.filter(pk=historialaprobacioncompendio.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                            material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                      estado_id=2,
                                                                      tipomaterial=importamaterial.tipomaterial,
                                                                      nombre=importamaterial.nombre,
                                                                      descripcion=importamaterial.descripcion,
                                                                      testourl=importamaterial.testourl,
                                                                      tiporecurso=importamaterial.tiporecurso,
                                                                      archivomaterial=importamaterial.archivomaterial,
                                                                      tiporecursos_id=4)
                            material.save(request)
                            importar = importamaterial
                            # MaterialAdicionalSilaboSemanal.objects.filter(pk=material.id).update(usuario_creacion=importar.usuario_creacion, fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                            # historial
                            for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                          estado=historial.estado,
                                                                                          observacion=historial.observacion)
                                historialaprobacionmaterial.save(request)
                                # HistorialaprobacionMaterial.objects.filter(pk=historialaprobacionmaterial.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                        log(u'Importó el recurso de la semana: %s del profesor: %s al recurso de la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")
                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_recursosemana_planificada_todo':
                try:
                    if 'idsact' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['idsant']))
                        id_periodo_ant = silaboant.materia.nivel.periodo.id
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        id_periodo_actual = silaboactual.materia.nivel.periodo.id
                        estado = 1
                        if id_periodo_ant == id_periodo_actual:
                            estado = 2
                        for semanaant in silaboant.silabosemanal_set.filter(status=True).order_by('numsemana'):
                            semanaactual_aux = silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana)
                            if semanaactual_aux:
                                semanaactual = semanaactual_aux[0]
                                if not semanaactual.tareasilabosemanal_set.filter(status=True).exists():
                                    for importatarea in semanaant.tareasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        tarea = TareaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                                   silabosemanal_id=semanaactual.id,
                                                                   estado_id=estado,
                                                                   calificar=importatarea.calificar,
                                                                   nombre=importatarea.nombre,
                                                                   objetivo=importatarea.objetivo,
                                                                   instruccion=importatarea.instruccion,
                                                                   recomendacion=importatarea.recomendacion,
                                                                   rubrica=importatarea.rubrica,
                                                                   rubricamoodle=importatarea.rubricamoodle,
                                                                   archivorubrica=importatarea.archivorubrica,
                                                                   archivotareasilabo=importatarea.archivotareasilabo,
                                                                   fechadesde=importatarea.fechadesde,
                                                                   fechahasta=importatarea.fechahasta,
                                                                   word=importatarea.word,
                                                                   pdf=importatarea.pdf,
                                                                   excel=importatarea.excel,
                                                                   todos=importatarea.todos,
                                                                   migrado=True,
                                                                   actividad_id=5,
                                                                   powerpoint=importatarea.powerpoint,
                                                                   tiporecurso_id=5)
                                        tarea.save(request)
                                        importar = importatarea
                                        # if estado == 2:
                                        #     TareaSilaboSemanal.objects.filter(pk=tarea.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in importatarea.historialaprobaciontarea_set.filter(status=True, estado_id__lte=2):  # estado_id__lte=2
                                                historialaprobaciontarea = HistorialaprobacionTarea(tarea=tarea,
                                                                                                    estado=historial.estado,
                                                                                                    observacion=historial.observacion)
                                                historialaprobaciontarea.save(request)
                                                # HistorialaprobacionTarea.objects.filter(pk=historialaprobaciontarea.id).update(usuario_creacion=historial.usuario_creacion, fecha_creacion=historial.fecha_creacion, usuario_modificacion=historial.usuario_modificacion, fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.forosilabosemanal_set.filter(status=True).exists():
                                    for importaforo in semanaant.forosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        foro = ForoSilaboSemanal(detallemodelo=importaforo.detallemodelo,
                                                                 silabosemanal_id=semanaactual.id,
                                                                 calificar=importaforo.calificar,
                                                                 tipoforo=importaforo.tipoforo,
                                                                 tipoconsolidacion=importaforo.tipoconsolidacion,
                                                                 estado_id=estado,
                                                                 nombre=importaforo.nombre,
                                                                 objetivo=importaforo.objetivo,
                                                                 instruccion=importaforo.instruccion,
                                                                 recomendacion=importaforo.recomendacion,
                                                                 rubrica=importaforo.rubrica,
                                                                 archivorubrica=importaforo.archivorubrica,
                                                                 archivoforo=importaforo.archivoforo,
                                                                 fechadesde=importaforo.fechadesde,
                                                                 migrado=True,
                                                                 fechahasta=importaforo.fechahasta,
                                                                 tiporecurso_id=9)
                                        foro.save(request)
                                        importar = importaforo
                                        # if estado == 2:
                                        #     ForoSilaboSemanal.objects.filter(pk=foro.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in importaforo.historialaprobacionforo_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionforo = HistorialaprobacionForo(foro=foro,
                                                                                                  estado=historial.estado,
                                                                                                  observacion=historial.observacion)
                                                historialaprobacionforo.save(request)
                                                # HistorialaprobacionForo.objects.filter(pk=historialaprobacionforo.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.testsilabosemanal_set.filter(status=True).exists():
                                    for importatest in semanaant.testsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        testsilabo = TestSilaboSemanal(detallemodelo=importatest.detallemodelo,
                                                                       silabosemanal_id=semanaactual.id,
                                                                       estado_id=estado,
                                                                       calificar=importatest.calificar,
                                                                       instruccion=importatest.instruccion,
                                                                       recomendacion=importatest.recomendacion,
                                                                       fechadesde=importatest.fechadesde,
                                                                       fechahasta=importatest.fechahasta,
                                                                       vecesintento=importatest.vecesintento,
                                                                       archivorubrica=importatest.archivorubrica,
                                                                       tiempoduracion=importatest.tiempoduracion,
                                                                       migrado=True,
                                                                       nombretest=importatest.nombretest,
                                                                       tiporecurso_id=11)
                                        testsilabo.save(request)
                                        importar = importatest
                                        # if estado == 2:
                                        #     TestSilaboSemanal.objects.filter(pk=testsilabo.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in testsilabo.historialaprobaciontest_set.filter(status=True, estado_id__lte=2):
                                                historialaprobaciontest = HistorialaprobacionTest(test=testsilabo,
                                                                                                  estado=historial.estado,
                                                                                                  observacion=historial.observacion)
                                                historialaprobaciontest.save(request)
                                                # HistorialaprobacionTest.objects.filter(pk=historialaprobaciontest.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.guiaestudiantesilabosemanal_set.filter(status=True).exists():
                                    for importaguiaes in semanaant.guiaestudiantesilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        guiaestudiante = GuiaEstudianteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                     estado_id=estado,
                                                                                     migrado=True,
                                                                                     observacion=importaguiaes.observacion,
                                                                                     archivoguiaestudiante=importaguiaes.archivoguiaestudiante,
                                                                                     tiporecurso_id=2)
                                        guiaestudiante.save(request)
                                        importar = importaguiaes
                                        # if estado == 2:
                                        #     GuiaEstudianteSilaboSemanal.objects.filter(pk=guiaestudiante.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in guiaestudiante.historialaprobacionguiaestudiante_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionguiaestudiante = HistorialaprobacionGuiaEstudiante(guiaestudiante=guiaestudiante,
                                                                                                                      estado=historial.estado,
                                                                                                                      observacion=historial.observacion)
                                                historialaprobacionguiaestudiante.save(request)
                                                # HistorialaprobacionGuiaEstudiante.objects.filter(pk=historialaprobacionguiaestudiante.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                # if not semanaactual.guiadocentesilabosemanal_set.filter(status=True).exists():
                                #     for importaguiado in semanaant.guiadocentesilabosemanal_set.filter(status=True, estado_id__in=[2,4]):
                                #         guiadocente = GuiaDocenteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                #                                                estado_id=estado,
                                #                                                migrado=True,
                                #                                                observacion=importaguiado.observacion,
                                #                                                archivoguiadocente=importaguiado.archivoguiadocente)
                                #         guiadocente.save(request)
                                #         importar = importaguiado
                                #         # if estado == 2:
                                #         #     GuiaDocenteSilaboSemanal.objects.filter(pk=guiadocente.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                #         if estado == 2:
                                #             # historial
                                #             for historial in guiadocente.historialaprobacionguiadocente_set.filter(status=True, estado_id__lte=2):
                                #                 historialaprobacionguiadocente = HistorialaprobacionGuiaDocente(guiadocente=guiadocente,
                                #                                                                                 estado=historial.estado,
                                #                                                                                 observacion=historial.observacion)
                                #                 historialaprobacionguiadocente.save(request)
                                # HistorialaprobacionGuiaDocente.objects.filter(pk=historialaprobacionguiadocente.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.diapositivasilabosemanal_set.filter(status=True).exists():
                                    for importadiapositiva in semanaant.diapositivasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        diapositiva = DiapositivaSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                               estado_id=estado,
                                                                               migrado=True,
                                                                               nombre=importadiapositiva.nombre,
                                                                               descripcion=importadiapositiva.descripcion,
                                                                               url=importadiapositiva.url,
                                                                               tipomaterial=importadiapositiva.tipomaterial,
                                                                               archivodiapositiva=importadiapositiva.archivodiapositiva,
                                                                               tiporecurso_id=1)
                                        diapositiva.save(request)
                                        importar = importadiapositiva
                                        # if estado == 2:
                                        #     DiapositivaSilaboSemanal.objects.filter(pk=diapositiva.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in diapositiva.historialaprobaciondiapositiva_set.filter(status=True, estado_id__lte=2):
                                                historialaprobaciondiapositiva = HistorialaprobacionDiapositiva(diapositiva=diapositiva,
                                                                                                                estado=historial.estado,
                                                                                                                observacion=historial.observacion)
                                                historialaprobaciondiapositiva.save(request)
                                                # HistorialaprobacionDiapositiva.objects.filter(pk=historialaprobaciondiapositiva.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.compendiosilabosemanal_set.filter(status=True).exists():
                                    for importacompendio in semanaant.compendiosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        compendio = CompendioSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                           estado_id=estado,
                                                                           migrado=True,
                                                                           descripcion=importacompendio.descripcion,
                                                                           archivocompendio=importacompendio.archivocompendio,
                                                                           archivo_logo=importacompendio.archivo_logo,
                                                                           archivo_sin_logo=importacompendio.archivo_sin_logo,
                                                                           tiporecurso_id=3)
                                        compendio.save(request)
                                        importar = importacompendio
                                        # if estado == 2:
                                        #     CompendioSilaboSemanal.objects.filter(pk=compendio.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in compendio.historialaprobacioncompendio_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacioncompendio = HistorialaprobacionCompendio(compendio=compendio,
                                                                                                            estado=historial.estado,
                                                                                                            observacion=historial.observacion)
                                                historialaprobacioncompendio.save(request)
                                                # HistorialaprobacionCompendio.objects.filter(pk=historialaprobacioncompendio.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                    for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                  estado_id=estado,
                                                                                  migrado=True,
                                                                                  tipomaterial=importamaterial.tipomaterial,
                                                                                  nombre=importamaterial.nombre,
                                                                                  descripcion=importamaterial.descripcion,
                                                                                  testourl=importamaterial.testourl,
                                                                                  tiporecurso=importamaterial.tiporecurso,
                                                                                  archivomaterial=importamaterial.archivomaterial,
                                                                                  tiporecursos_id=4)
                                        material.save(request)
                                        importar = importamaterial
                                        # if estado == 2:
                                        #     MaterialAdicionalSilaboSemanal.objects.filter(pk=material.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                                          estado=historial.estado,
                                                                                                          observacion=historial.observacion)
                                                historialaprobacionmaterial.save(request)
                                                # HistorialaprobacionMaterial.objects.filter(pk=historialaprobacionmaterial.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if silaboactual.materia.nivel.modalidad_id == 3:
                                    if not semanaactual.videomagistralsilabosemanal_set.filter(status=True).exists():
                                        for importavideo in semanaant.videomagistralsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                            videomagistral = VideoMagistralSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                         estado_id=2,
                                                                                         tipomaterial=importavideo.tipomaterial,
                                                                                         nombre=importavideo.nombre,
                                                                                         descripcion=importavideo.descripcion,
                                                                                         archivovideomagistral=importavideo.archivovideomagistral,
                                                                                         url=importavideo.url,
                                                                                         migrado=True,
                                                                                         tipograbacion=importavideo.tipograbacion,
                                                                                         tiporecurso=importavideo.tiporecurso,
                                                                                         urlcrai=importavideo.urlcrai,
                                                                                         tiporecursos_id=7)
                                            videomagistral.save(request)
                                            importar = importavideo
                                            # if estado == 2:
                                            #     VideoMagistralSilaboSemanal.objects.filter(pk=videomagistral.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                            if estado == 2:
                                                for historial in videomagistral.historialaprobacionvideomagistral_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobacionvideo = HistorialaprobacionVideoMagistral(material=videomagistral,
                                                                                                                 estado=historial.estado,
                                                                                                                 observacion=historial.observacion)
                                                    historialaprobacionvideo.save(request)
                                                    # HistorialaprobacionVideoMagistral.objects.filter(pk=historialaprobacionvideo.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                    for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                  estado_id=estado,
                                                                                  migrado=True,
                                                                                  tipomaterial=importamaterial.tipomaterial,
                                                                                  nombre=importamaterial.nombre,
                                                                                  descripcion=importamaterial.descripcion,
                                                                                  testourl=importamaterial.testourl,
                                                                                  tiporecurso=importamaterial.tiporecurso,
                                                                                  archivomaterial=importamaterial.archivomaterial,
                                                                                  tiporecursos_id=4)
                                        material.save(request)
                                        importar = importamaterial
                                        # if estado == 2:
                                        #     MaterialAdicionalSilaboSemanal.objects.filter(pk=material.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            # historial
                                            for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                                          estado=historial.estado,
                                                                                                          observacion=historial.observacion)
                                                historialaprobacionmaterial.save(request)
                                                # HistorialaprobacionMaterial.objects.filter(pk=historialaprobacionmaterial.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                if not semanaactual.tareapracticasilabosemanal_set.filter(status=True).exists():
                                    for importatarea in semanaant.tareapracticasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        tareapracticasilabosemanal = TareaPracticaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                                                                silabosemanal_id=semanaactual.id,
                                                                                                estado_id=estado,
                                                                                                calificar=importatarea.calificar,
                                                                                                nombre=importatarea.nombre,
                                                                                                # objetivo=importatarea.objetivo,
                                                                                                # instruccion=importatarea.instruccion,
                                                                                                # recomendacion=importatarea.recomendacion,
                                                                                                rubrica=importatarea.rubrica,
                                                                                                rubricamoodle=importatarea.rubricamoodle,
                                                                                                # archivorubrica=importatarea.archivorubrica,
                                                                                                archivotareapracticasilabo=importatarea.archivotareapracticasilabo,
                                                                                                fechadesde=importatarea.fechadesde,
                                                                                                fechahasta=importatarea.fechahasta,
                                                                                                word=importatarea.word,
                                                                                                pdf=importatarea.pdf,
                                                                                                excel=importatarea.excel,
                                                                                                todos=importatarea.todos,
                                                                                                detalle=importatarea.detalle,
                                                                                                # migrado=True,
                                                                                                powerpoint=importatarea.powerpoint,
                                                                                                tiporecurso_id=10)
                                        tareapracticasilabosemanal.save(request)
                                        # importar = importavideo
                                        # if estado == 2:
                                        #     VideoMagistralSilaboSemanal.objects.filter(pk=videomagistral.id).update(usuario_creacion=importar.usuario_creacion,fecha_creacion=importar.fecha_creacion,usuario_modificacion=importar.usuario_modificacion,fecha_modificacion=importar.fecha_modificacion)
                                        if estado == 2:
                                            for historial in tareapracticasilabosemanal.historialaprobaciontareapractica_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionvideo = HistorialaprobacionTareaPractica(tareapractica=tareapracticasilabosemanal,
                                                                                                            estado=historial.estado,
                                                                                                            observacion=historial.observacion)
                                                historialaprobacionvideo.save(request)
                                                # HistorialaprobacionTareaPractica.objects.filter(pk=historialaprobacionvideo.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)
                                log(u'Importó el tarea practica de la semana: %s del profesor: %s al recurso de la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")

                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_recursosemana_planificada_todovdosvidm':
                try:
                    if 'idsact' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['idsant']))
                        id_periodo_ant = silaboant.materia.nivel.periodo.id
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        idcoordinacion = silaboactual.materia.asignaturamalla.malla.carrera.mi_coordinacion2()
                        id_periodo_actual = silaboactual.materia.nivel.periodo.id
                        for semanaant in silaboant.silabosemanal_set.filter(status=True).order_by('numsemana'):
                            semanaactual_aux = silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana)
                            if semanaactual_aux:
                                semanaactual = semanaactual_aux[0]
                                if not semanaactual.videomagistralsilabosemanal_set.filter(status=True).exists():
                                    for importavideo in semanaant.videomagistralsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        videomagistral = VideoMagistralSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                     estado_id=2,
                                                                                     tipomaterial=importavideo.tipomaterial,
                                                                                     nombre=importavideo.nombre,
                                                                                     descripcion=importavideo.descripcion,
                                                                                     archivovideomagistral=importavideo.archivovideomagistral,
                                                                                     url=importavideo.url,
                                                                                     migrado=True,
                                                                                     tipograbacion=importavideo.tipograbacion,
                                                                                     tiporecurso=importavideo.tiporecurso,
                                                                                     urlcrai=importavideo.urlcrai,
                                                                                     tiporecursos_id=7)
                                        videomagistral.save(request)
                                        importar = importavideo
                                        for historial in videomagistral.historialaprobacionvideomagistral_set.filter(status=True, estado_id__lte=2):
                                            historialaprobacionvideo = HistorialaprobacionVideoMagistral(material=videomagistral,
                                                                                                         estado=historial.estado,
                                                                                                         observacion=historial.observacion)
                                            historialaprobacionvideo.save(request)
                                log(u'Importó el tarea practica de la semana: %s del profesor: %s al recurso de la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")

                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_recursosemana_planificada_todovdos':
                try:
                    if 'idsact' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['idsant']))
                        id_periodo_ant = silaboant.materia.nivel.periodo.id
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        idcoordinacion = silaboactual.materia.asignaturamalla.malla.carrera.mi_coordinacion2()
                        id_periodo_actual = silaboactual.materia.nivel.periodo.id
                        estado = 1
                        # if id_periodo_ant == id_periodo_actual:
                        #     estado = 2
                        for semanaant in silaboant.silabosemanal_set.filter(status=True).order_by('numsemana'):
                            semanaactual_aux = silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana)
                            if semanaactual_aux:
                                semanaactual = semanaactual_aux[0]
                                if not semanaactual.tareasilabosemanal_set.filter(status=True).exists():
                                    for importatarea in semanaant.tareasilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                        tarea = TareaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                                   silabosemanal_id=semanaactual.id,
                                                                   estado_id=estado,
                                                                   calificar=importatarea.calificar,
                                                                   nombre=importatarea.nombre,
                                                                   objetivo=importatarea.objetivo,
                                                                   instruccion=importatarea.instruccion,
                                                                   recomendacion=importatarea.recomendacion,
                                                                   rubrica=importatarea.rubrica,
                                                                   rubricamoodle=importatarea.rubricamoodle,
                                                                   archivorubrica=importatarea.archivorubrica,
                                                                   archivotareasilabo=importatarea.archivotareasilabo,
                                                                   fechadesde=importatarea.fechadesde,
                                                                   fechahasta=importatarea.fechahasta,
                                                                   word=importatarea.word,
                                                                   pdf=importatarea.pdf,
                                                                   excel=importatarea.excel,
                                                                   todos=importatarea.todos,
                                                                   actividad=importatarea.actividad,
                                                                   migrado=True,
                                                                   powerpoint=importatarea.powerpoint,
                                                                   tiporecurso_id=5)
                                        tarea.save(request)
                                        importar = importatarea
                                        if estado == 2:
                                            for historial in importatarea.historialaprobaciontarea_set.filter(status=True, estado_id__lte=2):  # estado_id__lte=2
                                                historialaprobaciontarea = HistorialaprobacionTarea(tarea=tarea,
                                                                                                    estado=historial.estado,
                                                                                                    observacion=historial.observacion)
                                                historialaprobaciontarea.save(request)

                                if not semanaactual.forosilabosemanal_set.filter(status=True).exists():
                                    for importaforo in semanaant.forosilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                        foro = ForoSilaboSemanal(detallemodelo=importaforo.detallemodelo,
                                                                 silabosemanal_id=semanaactual.id,
                                                                 calificar=importaforo.calificar,
                                                                 tipoforo=importaforo.tipoforo,
                                                                 tipoconsolidacion=importaforo.tipoconsolidacion,
                                                                 estado_id=estado,
                                                                 nombre=importaforo.nombre,
                                                                 objetivo=importaforo.objetivo,
                                                                 instruccion=importaforo.instruccion,
                                                                 recomendacion=importaforo.recomendacion,
                                                                 rubrica=importaforo.rubrica,
                                                                 archivorubrica=importaforo.archivorubrica,
                                                                 archivoforo=importaforo.archivoforo,
                                                                 fechadesde=importaforo.fechadesde,
                                                                 migrado=True,
                                                                 fechahasta=importaforo.fechahasta,
                                                                 tiporecurso_id=9)
                                        foro.save(request)
                                        importar = importaforo
                                        if estado == 2:
                                            for historial in importaforo.historialaprobacionforo_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionforo = HistorialaprobacionForo(foro=foro,
                                                                                                  estado=historial.estado,
                                                                                                  observacion=historial.observacion)
                                                historialaprobacionforo.save(request)

                                if idcoordinacion != 9:
                                    if not semanaactual.testsilabosemanal_set.filter(status=True).exists():
                                        for importatest in semanaant.testsilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                            testsilabo = TestSilaboSemanal(detallemodelo=importatest.detallemodelo,
                                                                           silabosemanal_id=semanaactual.id,
                                                                           estado_id=estado,
                                                                           calificar=importatest.calificar,
                                                                           instruccion=importatest.instruccion,
                                                                           recomendacion=importatest.recomendacion,
                                                                           fechadesde=importatest.fechadesde,
                                                                           fechahasta=importatest.fechahasta,
                                                                           vecesintento=importatest.vecesintento,
                                                                           archivorubrica=importatest.archivorubrica,
                                                                           tiempoduracion=importatest.tiempoduracion,
                                                                           migrado=True,
                                                                           nombretest=importatest.nombretest,
                                                                           tiporecurso_id=11)
                                            testsilabo.save(request)
                                            importar = importatest
                                            if estado == 2:
                                                for historial in testsilabo.historialaprobaciontest_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobaciontest = HistorialaprobacionTest(test=testsilabo,
                                                                                                      estado=historial.estado,
                                                                                                      observacion=historial.observacion)
                                                    historialaprobaciontest.save(request)
                                                    # HistorialaprobacionTest.objects.filter(pk=historialaprobaciontest.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)
                                else:
                                    if not semanaactual.testsilabosemanaladmision_set.filter(status=True).exists():
                                        for importatest in semanaant.testsilabosemanaladmision_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                            testsilabo = TestSilaboSemanalAdmision(silabosemanal_id=semanaactual.id,
                                                                                   estado_id=estado,
                                                                                   titulo=importatest.titulo,
                                                                                   descripcion=importatest.descripcion,
                                                                                   url1=importatest.url1,
                                                                                   url2=importatest.url2)
                                            testsilabo.save(request)
                                            importar = importatest
                                            if estado == 2:
                                                for historial in testsilabo.historialaprobaciontestadmision_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobaciontest = HistorialaprobacionTestAdmision(test=testsilabo,
                                                                                                              estado=historial.estado,
                                                                                                              observacion=historial.observacion)
                                                    historialaprobaciontest.save(request)

                                if silaboactual.materia.nivel.modalidad_id == 3:
                                    if not semanaactual.videomagistralsilabosemanal_set.filter(status=True).exists():
                                        for importavideo in semanaant.videomagistralsilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                            videomagistral = VideoMagistralSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                         estado_id=2,
                                                                                         tipomaterial=importavideo.tipomaterial,
                                                                                         nombre=importavideo.nombre,
                                                                                         descripcion=importavideo.descripcion,
                                                                                         archivovideomagistral=importavideo.archivovideomagistral,
                                                                                         url=importavideo.url,
                                                                                         migrado=True,
                                                                                         tipograbacion=importavideo.tipograbacion,
                                                                                         tiporecurso=importavideo.tiporecurso,
                                                                                         urlcrai=importavideo.urlcrai,
                                                                                         tiporecursos_id=7)
                                            videomagistral.save(request)
                                            importar = importavideo
                                            for historial in videomagistral.historialaprobacionvideomagistral_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionvideo = HistorialaprobacionVideoMagistral(material=videomagistral,
                                                                                                             estado=historial.estado,
                                                                                                             observacion=historial.observacion)
                                                historialaprobacionvideo.save(request)

                                    if not semanaactual.guiaestudiantesilabosemanal_set.filter(status=True).exists():
                                        for importaguiaes in semanaant.guiaestudiantesilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                            guiaestudiante = GuiaEstudianteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                         estado_id=estado,
                                                                                         migrado=True,
                                                                                         observacion=importaguiaes.observacion,
                                                                                         archivoguiaestudiante=importaguiaes.archivoguiaestudiante,
                                                                                         archivo_logo=importaguiaes.archivo_logo,
                                                                                         archivo_sin_logo=importaguiaes.archivo_sin_logo,
                                                                                         tiporecurso_id=2)
                                            guiaestudiante.save(request)
                                            importar = importaguiaes
                                            if estado == 2:
                                                for historial in guiaestudiante.historialaprobacionguiaestudiante_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobacionguiaestudiante = HistorialaprobacionGuiaEstudiante(guiaestudiante=guiaestudiante,
                                                                                                                          estado=historial.estado,
                                                                                                                          observacion=historial.observacion)
                                                    historialaprobacionguiaestudiante.save(request)
                                                    # HistorialaprobacionGuiaEstudiante.objects.filter(pk=historialaprobacionguiaestudiante.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                # if not semanaactual.guiadocentesilabosemanal_set.filter(status=True).exists():
                                #     for importaguiado in semanaant.guiadocentesilabosemanal_set.filter(status=True, estado_id__in=[2,4]):
                                #         guiadocente = GuiaDocenteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                #                                                estado_id=estado,
                                #                                                migrado=True,
                                #                                                observacion=importaguiado.observacion,
                                #                                                archivoguiadocente=importaguiado.archivoguiadocente,
                                #                                                tiporecurso_id=8)
                                #         guiadocente.save(request)
                                #         importar = importaguiado
                                #         if estado == 2:
                                #             for historial in guiadocente.historialaprobacionguiadocente_set.filter(status=True, estado_id__lte=2):
                                #                 historialaprobacionguiadocente = HistorialaprobacionGuiaDocente(guiadocente=guiadocente,
                                #                                                                                 estado=historial.estado,
                                #                                                                                 observacion=historial.observacion)
                                #                 historialaprobacionguiadocente.save(request)

                                if not semanaactual.diapositivasilabosemanal_set.filter(status=True).exists():
                                    for importadiapositiva in semanaant.diapositivasilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                        diapositiva = DiapositivaSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                               estado_id=estado,
                                                                               migrado=True,
                                                                               nombre=importadiapositiva.nombre,
                                                                               descripcion=importadiapositiva.descripcion,
                                                                               url=importadiapositiva.url,
                                                                               tipomaterial=importadiapositiva.tipomaterial,
                                                                               archivodiapositiva=importadiapositiva.archivodiapositiva,
                                                                               tiporecurso_id=1)
                                        diapositiva.save(request)
                                        importar = importadiapositiva
                                        if estado == 2:
                                            for historial in diapositiva.historialaprobaciondiapositiva_set.filter(status=True, estado_id__lte=2):
                                                historialaprobaciondiapositiva = HistorialaprobacionDiapositiva(diapositiva=diapositiva,
                                                                                                                estado=historial.estado,
                                                                                                                observacion=historial.observacion)
                                                historialaprobaciondiapositiva.save(request)

                                if not semanaactual.compendiosilabosemanal_set.filter(status=True).exists():
                                    for importacompendio in semanaant.compendiosilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                        compendio = CompendioSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                           estado_id=estado,
                                                                           migrado=True,
                                                                           descripcion=importacompendio.descripcion,
                                                                           archivocompendio=importacompendio.archivocompendio,
                                                                           archivo_logo=importacompendio.archivo_logo,
                                                                           archivo_sin_logo=importacompendio.archivo_sin_logo,
                                                                           archivoplagio=importacompendio.archivoplagio,
                                                                           tiporecurso_id=3)
                                        compendio.save(request)
                                        importar = importacompendio
                                        if estado == 2:
                                            for historial in compendio.historialaprobacioncompendio_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacioncompendio = HistorialaprobacionCompendio(compendio=compendio,
                                                                                                            estado=historial.estado,
                                                                                                            observacion=historial.observacion)
                                                historialaprobacioncompendio.save(request)

                                if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                    for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                        material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                  estado_id=estado,
                                                                                  migrado=True,
                                                                                  tipomaterial=importamaterial.tipomaterial,
                                                                                  nombre=importamaterial.nombre,
                                                                                  descripcion=importamaterial.descripcion,
                                                                                  testourl=importamaterial.testourl,
                                                                                  tiporecurso=importamaterial.tiporecurso,
                                                                                  archivomaterial=importamaterial.archivomaterial,
                                                                                  tiporecursos_id=4)
                                        material.save(request)
                                        importar = importamaterial
                                        if estado == 2:
                                            for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                                          estado=historial.estado,
                                                                                                          observacion=historial.observacion)
                                                historialaprobacionmaterial.save(request)

                                if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                    for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[1, 5, 2, 4]):
                                        material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                  estado_id=estado,
                                                                                  migrado=True,
                                                                                  tipomaterial=importamaterial.tipomaterial,
                                                                                  nombre=importamaterial.nombre,
                                                                                  descripcion=importamaterial.descripcion,
                                                                                  testourl=importamaterial.testourl,
                                                                                  tiporecurso=importamaterial.tiporecurso,
                                                                                  archivomaterial=importamaterial.archivomaterial,
                                                                                  tiporecursos_id=4)
                                        material.save(request)
                                        importar = importamaterial
                                        if estado == 2:
                                            for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                                          estado=historial.estado,
                                                                                                          observacion=historial.observacion)
                                                historialaprobacionmaterial.save(request)

                                if not semanaactual.tareapracticasilabosemanal_set.filter(status=True).exists():
                                    if not semanaactual.gpguiapracticasemanal_set.filter(status=True).exists():
                                        for importaguia in semanaant.gpguiapracticasemanal_set.filter(status=True):
                                            guiapracticasilabosemanal = GPGuiaPracticaSemanal(silabosemanal_id=semanaactual.id,
                                                                                              numeropractica=importaguia.numeropractica,
                                                                                              tiempoactividad=importaguia.tiempoactividad,
                                                                                              fechaelaboracion=importaguia.fechaelaboracion,
                                                                                              individual=importaguia.individual,
                                                                                              grupo=importaguia.grupo,
                                                                                              cantidadalumnogrupo=importaguia.cantidadalumnogrupo,
                                                                                              objetvopactica=importaguia.objetvopactica,
                                                                                              actividaddesarrollar=importaguia.actividaddesarrollar,
                                                                                              rubica=importaguia.rubica,
                                                                                              calificar=importaguia.calificar,
                                                                                              calificarmax=importaguia.calificarmax,
                                                                                              calificarmin=importaguia.calificarmin,
                                                                                              cerrada=importaguia.cerrada,
                                                                                              registrado=importaguia.registrado,
                                                                                              laboratorio=importaguia.laboratorio,
                                                                                              nombrepractica=importaguia.nombrepractica,
                                                                                              asistida=importaguia.asistida,
                                                                                              noasistida=importaguia.noasistida,
                                                                                              tipoambiente=importaguia.tipoambiente,
                                                                                              nombreambiente=importaguia.nombreambiente,
                                                                                              ubicacionambiente=importaguia.ubicacionambiente,
                                                                                              unidad=importaguia.unidad)
                                            guiapracticasilabosemanal.save(request)
                                            if GPObjetivo.objects.filter(guiasemanal=importaguia, status=True):
                                                listadoobjetivo = GPObjetivo.objects.filter(guiasemanal=importaguia, status=True)
                                                for objetivo in listadoobjetivo:
                                                    objetivoguia = GPObjetivo(guiasemanal=guiapracticasilabosemanal,
                                                                              nombre=objetivo.nombre)
                                                    objetivoguia.save(request)
                                            if GPInstruccion.objects.filter(guiasemanal=importaguia, status=True):
                                                instruccion = GPInstruccion.objects.get(pk=GPInstruccion.objects.filter(guiasemanal=importaguia, status=True)[0].id, status=True)
                                                instruccionimporta = GPInstruccion(guiasemanal=guiapracticasilabosemanal,
                                                                                   observacion=instruccion.observacion)
                                                instruccionimporta.save(request)

                                log(u'Importó el tarea practica de la semana: %s del profesor: %s al recurso de la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")

                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_recursos_planificada_todo':
                try:
                    if 'idsact' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['idsant']))
                        id_periodo_ant = silaboant.materia.nivel.periodo.id
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        id_periodo_actual = silaboactual.materia.nivel.periodo.id
                        estado = 1
                        if id_periodo_ant == id_periodo_actual:
                            estado = 2
                        for semanaant in silaboant.silabosemanal_set.filter(status=True).order_by('numsemana'):
                            semanaactual_aux = silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana)
                            if semanaactual_aux:
                                semanaactual = semanaactual_aux[0]
                                if not semanaactual.guiaestudiantesilabosemanal_set.filter(status=True).exists():
                                    for importaguiaes in semanaant.guiaestudiantesilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        guiaestudiante = GuiaEstudianteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                     estado_id=estado,
                                                                                     migrado=True,
                                                                                     observacion=importaguiaes.observacion,
                                                                                     archivoguiaestudiante=importaguiaes.archivoguiaestudiante,
                                                                                     archivo_logo=importaguiaes.archivo_logo,
                                                                                     archivo_sin_logo=importaguiaes.archivo_sin_logo,
                                                                                     tiporecurso_id=2)
                                        if estado == 2:
                                            for historial in guiaestudiante.historialaprobacionguiaestudiante_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionguiaestudiante = HistorialaprobacionGuiaEstudiante(guiaestudiante=guiaestudiante,
                                                                                                                      estado=historial.estado,
                                                                                                                      observacion=historial.observacion)
                                                historialaprobacionguiaestudiante.save(request)
                                                # HistorialaprobacionGuiaEstudiante.objects.filter(pk=historialaprobacionguiaestudiante.id).update(usuario_creacion=historial.usuario_creacion,fecha_creacion=historial.fecha_creacion,usuario_modificacion=historial.usuario_modificacion,fecha_modificacion=historial.fecha_modificacion)

                                # if not semanaactual.guiadocentesilabosemanal_set.filter(status=True).exists():
                                #     for importaguiado in semanaant.guiadocentesilabosemanal_set.filter(status=True, estado_id__in=[2,4]):
                                #         guiadocente = GuiaDocenteSilaboSemanal(silabosemanal_id=semanaactual.id,
                                #                                                estado_id=estado,
                                #                                                migrado=True,
                                #                                                observacion=importaguiado.observacion,
                                #                                                archivoguiadocente=importaguiado.archivoguiadocente,
                                #                                                tiporecurso_id=8)
                                #         guiadocente.save(request)
                                #         importar = importaguiado
                                #         if estado == 2:
                                #             for historial in guiadocente.historialaprobacionguiadocente_set.filter(status=True, estado_id__lte=2):
                                #                 historialaprobacionguiadocente = HistorialaprobacionGuiaDocente(guiadocente=guiadocente,
                                #                                                                                 estado=historial.estado,
                                #                                                                                 observacion=historial.observacion)
                                #                 historialaprobacionguiadocente.save(request)

                                if not semanaactual.diapositivasilabosemanal_set.filter(status=True).exists():
                                    for importadiapositiva in semanaant.diapositivasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        diapositiva = DiapositivaSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                               estado_id=estado,
                                                                               migrado=True,
                                                                               nombre=importadiapositiva.nombre,
                                                                               descripcion=importadiapositiva.descripcion,
                                                                               url=importadiapositiva.url,
                                                                               tipomaterial=importadiapositiva.tipomaterial,
                                                                               archivodiapositiva=importadiapositiva.archivodiapositiva,
                                                                               tiporecurso_id=1)
                                        diapositiva.save(request)
                                        importar = importadiapositiva
                                        if estado == 2:
                                            for historial in diapositiva.historialaprobaciondiapositiva_set.filter(status=True, estado_id__lte=2):
                                                historialaprobaciondiapositiva = HistorialaprobacionDiapositiva(diapositiva=diapositiva,
                                                                                                                estado=historial.estado,
                                                                                                                observacion=historial.observacion)
                                                historialaprobaciondiapositiva.save(request)

                                if not semanaactual.compendiosilabosemanal_set.filter(status=True).exists():
                                    for importacompendio in semanaant.compendiosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        compendio = CompendioSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                           estado_id=2,
                                                                           migrado=True,
                                                                           descripcion=importacompendio.descripcion,
                                                                           archivocompendio=importacompendio.archivocompendio,
                                                                           archivo_logo=importacompendio.archivo_logo,
                                                                           archivo_sin_logo=importacompendio.archivo_sin_logo,
                                                                           archivoplagio=importacompendio.archivoplagio,
                                                                           tiporecurso_id=3)
                                        compendio.save(request)
                                        importar = importacompendio
                                        if estado == 2:
                                            for historial in compendio.historialaprobacioncompendio_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacioncompendio = HistorialaprobacionCompendio(compendio=compendio,
                                                                                                            estado=historial.estado,
                                                                                                            observacion=historial.observacion)
                                                historialaprobacioncompendio.save(request)

                                if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                    for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                  estado_id=estado,
                                                                                  migrado=True,
                                                                                  tipomaterial=importamaterial.tipomaterial,
                                                                                  nombre=importamaterial.nombre,
                                                                                  descripcion=importamaterial.descripcion,
                                                                                  testourl=importamaterial.testourl,
                                                                                  tiporecurso=importamaterial.tiporecurso,
                                                                                  archivomaterial=importamaterial.archivomaterial,
                                                                                  tiporecursos_id=4)
                                        material.save(request)
                                        importar = importamaterial
                                        if estado == 2:
                                            for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                                                                                          estado=historial.estado,
                                                                                                          observacion=historial.observacion)
                                                historialaprobacionmaterial.save(request)

                                if silaboactual.materia.nivel.modalidad_id == 3:
                                    if not semanaactual.videomagistralsilabosemanal_set.filter(status=True).exists():
                                        for importavideo in semanaant.videomagistralsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                            videomagistral = VideoMagistralSilaboSemanal(silabosemanal_id=semanaactual.id,
                                                                                         estado_id=2,
                                                                                         tipomaterial=importavideo.tipomaterial,
                                                                                         nombre=importavideo.nombre,
                                                                                         descripcion=importavideo.descripcion,
                                                                                         archivovideomagistral=importavideo.archivovideomagistral,
                                                                                         url=importavideo.url,
                                                                                         migrado=True,
                                                                                         tipograbacion=importavideo.tipograbacion,
                                                                                         tiporecurso=importavideo.tiporecurso,
                                                                                         urlcrai=importavideo.urlcrai,
                                                                                         tiporecursos_id=7)
                                            videomagistral.save(request)
                                            importar = importavideo
                                            if estado == 2:
                                                for historial in videomagistral.historialaprobacionvideomagistral_set.filter(status=True, estado_id__lte=2):
                                                    historialaprobacionvideo = HistorialaprobacionVideoMagistral(material=videomagistral,
                                                                                                                 estado=historial.estado,
                                                                                                                 observacion=historial.observacion)
                                                    historialaprobacionvideo.save(request)

                                # if not semanaactual.materialadicionalsilabosemanal_set.filter(status=True).exists():
                                #     for importamaterial in semanaant.materialadicionalsilabosemanal_set.filter(status=True, estado_id__in=[2,4]):
                                #         material = MaterialAdicionalSilaboSemanal(silabosemanal_id=semanaactual.id,
                                #                                                   estado_id=estado,
                                #                                                   migrado=True,
                                #                                                   tipomaterial=importamaterial.tipomaterial,
                                #                                                   nombre=importamaterial.nombre,
                                #                                                   descripcion=importamaterial.descripcion,
                                #                                                   testourl=importamaterial.testourl,
                                #                                                   tiporecurso=importamaterial.tiporecurso,
                                #                                                   archivomaterial=importamaterial.archivomaterial,
                                #                                                   tiporecursos_id=4)
                                #         material.save(request)
                                #         importar = importamaterial
                                #         if estado == 2:
                                #             for historial in material.historialaprobacionmaterial_set.filter(status=True, estado_id__lte=2):
                                #                 historialaprobacionmaterial = HistorialaprobacionMaterial(material=material,
                                #                                                                           estado=historial.estado,
                                #                                                                           observacion=historial.observacion)
                                #                 historialaprobacionmaterial.save(request)

                                log(u'Importó recursos  de la semana: %s del profesor: %s al la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")

                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'importar_actividadsemana_planificada_todovdos':
                try:
                    if 'idsact' in request.POST:
                        silaboant = Silabo.objects.get(pk=int(request.POST['idsant']))
                        id_periodo_ant = silaboant.materia.nivel.periodo.id
                        silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['idsact']))
                        id_periodo_actual = silaboactual.materia.nivel.periodo.id
                        estado = 1
                        if id_periodo_ant == id_periodo_actual:
                            estado = 2
                        for semanaant in silaboant.silabosemanal_set.filter(status=True).order_by('numsemana'):
                            semanaactual_aux = silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana)
                            if semanaactual_aux:
                                semanaactual = semanaactual_aux[0]
                                for importatarea in semanaant.tareasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                    if not semanaactual.tareasilabosemanal_set.filter(status=True, actividad=importatarea.actividad).exists():
                                        tarea = TareaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                                   silabosemanal_id=semanaactual.id,
                                                                   estado_id=estado,
                                                                   calificar=importatarea.calificar,
                                                                   nombre=importatarea.nombre,
                                                                   objetivo=importatarea.objetivo,
                                                                   instruccion=importatarea.instruccion,
                                                                   recomendacion=importatarea.recomendacion,
                                                                   rubrica=importatarea.rubrica,
                                                                   rubricamoodle=importatarea.rubricamoodle,
                                                                   archivorubrica=importatarea.archivorubrica,
                                                                   archivotareasilabo=importatarea.archivotareasilabo,
                                                                   fechadesde=importatarea.fechadesde,
                                                                   fechahasta=importatarea.fechahasta,
                                                                   word=importatarea.word,
                                                                   pdf=importatarea.pdf,
                                                                   excel=importatarea.excel,
                                                                   todos=importatarea.todos,
                                                                   actividad=importatarea.actividad,
                                                                   migrado=True,
                                                                   powerpoint=importatarea.powerpoint,
                                                                   tiporecurso_id=5)
                                        tarea.save(request)
                                        importar = importatarea
                                        if estado == 2:
                                            for historial in importatarea.historialaprobaciontarea_set.filter(status=True, estado_id__lte=2):  # estado_id__lte=2
                                                historialaprobaciontarea = HistorialaprobacionTarea(tarea=tarea,
                                                                                                    estado=historial.estado,
                                                                                                    observacion=historial.observacion)
                                                historialaprobaciontarea.save(request)

                                if not semanaactual.forosilabosemanal_set.filter(status=True).exists():
                                    for importaforo in semanaant.forosilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        foro = ForoSilaboSemanal(detallemodelo=importaforo.detallemodelo,
                                                                 silabosemanal_id=semanaactual.id,
                                                                 calificar=importaforo.calificar,
                                                                 tipoforo=importaforo.tipoforo,
                                                                 tipoconsolidacion=importaforo.tipoconsolidacion,
                                                                 estado_id=estado,
                                                                 nombre=importaforo.nombre,
                                                                 objetivo=importaforo.objetivo,
                                                                 instruccion=importaforo.instruccion,
                                                                 recomendacion=importaforo.recomendacion,
                                                                 rubrica=importaforo.rubrica,
                                                                 archivorubrica=importaforo.archivorubrica,
                                                                 archivoforo=importaforo.archivoforo,
                                                                 fechadesde=importaforo.fechadesde,
                                                                 migrado=True,
                                                                 fechahasta=importaforo.fechahasta,
                                                                 tiporecurso_id=9)
                                        foro.save(request)
                                        importar = importaforo
                                        if estado == 2:
                                            for historial in importaforo.historialaprobacionforo_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionforo = HistorialaprobacionForo(foro=foro,
                                                                                                  estado=historial.estado,
                                                                                                  observacion=historial.observacion)
                                                historialaprobacionforo.save(request)

                                if not semanaactual.testsilabosemanal_set.filter(status=True).exists():
                                    for importatest in semanaant.testsilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        testsilabo = TestSilaboSemanal(detallemodelo=importatest.detallemodelo,
                                                                       silabosemanal_id=semanaactual.id,
                                                                       estado_id=estado,
                                                                       calificar=importatest.calificar,
                                                                       instruccion=importatest.instruccion,
                                                                       recomendacion=importatest.recomendacion,
                                                                       fechadesde=importatest.fechadesde,
                                                                       fechahasta=importatest.fechahasta,
                                                                       vecesintento=importatest.vecesintento,
                                                                       archivorubrica=importatest.archivorubrica,
                                                                       tiempoduracion=importatest.tiempoduracion,
                                                                       migrado=True,
                                                                       nombretest=importatest.nombretest,
                                                                       tiporecurso_id=11)
                                        testsilabo.save(request)
                                        importar = importatest
                                        if estado == 2:
                                            for historial in testsilabo.historialaprobaciontest_set.filter(status=True, estado_id__lte=2):
                                                historialaprobaciontest = HistorialaprobacionTest(test=testsilabo,
                                                                                                  estado=historial.estado,
                                                                                                  observacion=historial.observacion)
                                                historialaprobaciontest.save(request)

                                if not semanaactual.tareapracticasilabosemanal_set.filter(status=True).exists():
                                    for importatarea in semanaant.tareapracticasilabosemanal_set.filter(status=True, estado_id__in=[2, 4]):
                                        tareapracticasilabosemanal = TareaPracticaSilaboSemanal(detallemodelo=importatarea.detallemodelo,
                                                                                                silabosemanal_id=semanaactual.id,
                                                                                                estado_id=estado,
                                                                                                calificar=importatarea.calificar,
                                                                                                nombre=importatarea.nombre,
                                                                                                # objetivo=importatarea.objetivo,
                                                                                                # instruccion=importatarea.instruccion,
                                                                                                # recomendacion=importatarea.recomendacion,
                                                                                                rubrica=importatarea.rubrica,
                                                                                                rubricamoodle=importatarea.rubricamoodle,
                                                                                                # archivorubrica=importatarea.archivorubrica,
                                                                                                archivotareapracticasilabo=importatarea.archivotareapracticasilabo,
                                                                                                fechadesde=importatarea.fechadesde,
                                                                                                fechahasta=importatarea.fechahasta,
                                                                                                word=importatarea.word,
                                                                                                pdf=importatarea.pdf,
                                                                                                excel=importatarea.excel,
                                                                                                todos=importatarea.todos,
                                                                                                detalle=importatarea.detalle,
                                                                                                # migrado=True,
                                                                                                powerpoint=importatarea.powerpoint,
                                                                                                tiporecurso_id=10)
                                        tareapracticasilabosemanal.save(request)
                                        if estado == 2:
                                            for historial in tareapracticasilabosemanal.historialaprobaciontareapractica_set.filter(status=True, estado_id__lte=2):
                                                historialaprobacionvideo = HistorialaprobacionTareaPractica(tareapractica=tareapracticasilabosemanal,
                                                                                                            estado=historial.estado,
                                                                                                            observacion=historial.observacion)
                                                historialaprobacionvideo.save(request)
                                log(u'Importó actividades de la semana: %s del profesor: %s a la semana semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semanaactual, semanaactual.silabo.profesor.persona.nombre_completo_inverso()), request, "add")

                        reordenaforos = 0
                        for listareorden in TestSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'TEST_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in ForoSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'FORO_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in TareaSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True, actividad_id=2).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'EXPOSICIÓN_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in TareaSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True, actividad_id=3).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'TALLER_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in TareaSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True, actividad_id=5).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'TAREA_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in TareaSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True, actividad_id=7).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'TRABAJO DE INVESTIGACIÓN_' + str(reordenaforos)
                            listareorden.save(request)
                        reordenaforos = 0
                        for listareorden in TareaSilaboSemanal.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True, actividad_id=8).order_by('silabosemanal__numsemana'):
                            reordenaforos = reordenaforos + 1
                            listareorden.nombre = 'ANÁLISIS DE CASOS_' + str(reordenaforos)
                            listareorden.save(request)
                        return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'planificacion_recursosemanal_importar':
                lista = []
                try:
                    if 'idsant' in request.POST:
                        data['idsact'] = request.POST['idsact']
                        data['idsemanal'] = request.POST['idsemanal']
                        data['semana'] = request.POST['semana']
                        data['numsemana'] = request.POST['numsemana']
                        data['fini'] = request.POST['fini']
                        data['ffin'] = request.POST['ffin']
                        silabo = Silabo.objects.get(status=True, pk=int(request.POST['idsant']))
                        for semana in silabo.silabosemanal_set.filter(status=True).order_by('numsemana', 'fechainiciosemana'):
                            listabibliografiacomplementaria = []
                            for biblic in semana.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                                listabibliografiacomplementaria.append([str(biblic.librokohaprogramaanaliticoasignatura)])
                            listabibliografiabasica = []
                            for biblib in semana.detallesilabosemanalbibliografia_set.filter(status=True):
                                listabibliografiabasica.append([str(biblib)])
                            lista.append([semana.silabo.id, semana.id, str(semana.fechainiciosemana.strftime("%Y/%m/%d")), str(semana.fechafinciosemana.strftime("%Y/%m/%d")), semana, listabibliografiabasica, listabibliografiacomplementaria, str(semana.objetivoaprendizaje), str(semana.enfoque), str(semana.recursos), str(semana.evaluacion), str(semana.numsemana)])
                    data['semanas'] = lista
                    template = get_template("pro_planificacion/planificacion_recursosemanal.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'duplicar_recursossilabo_otro_periodo':
                try:
                    data['title'] = u'Recursos de sílabos que puede importar de otros periodos'
                    listaperiodo = []
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.POST['ids'])))
                    # data['periodos'] = Periodo.objects.filter(status=True, pk__in=silabo.lista_periodos_silabos()).exclude(tipo_id=3).order_by('-inicio')
                    data['periodos'] = Periodo.objects.filter(pk__gte=110, status=True).exclude(tipo_id__in=[3, 4]).order_by('-inicio')
                    data['semana'] = request.POST['semana']
                    data['idsemanal'] = request.POST['idsemanal']
                    data['numsemana'] = request.POST['numsemana']
                    data['fini'] = str(request.POST['fini'])
                    data['ffin'] = str(request.POST['ffin'])
                    data['idsact'] = silabo.id
                    template = get_template("pro_planificacion/importarrecursossilaboperiodo.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'duplicar_recursossilabo_otro_periodo_todo':
                try:
                    data['title'] = u'Recursos de sílabos que puede importar de otros periodos'
                    listaperiodo = []
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.POST['ids'])))
                    # data['periodos'] = Periodo.objects.filter(status=True, pk__in=silabo.lista_periodos_silabos()).exclude(tipo_id=3).order_by('-inicio')
                    data['periodos'] = Periodo.objects.filter(pk__gte=95, status=True).exclude(tipo_id__in=[3, 4]).order_by('-inicio')
                    data['idsact'] = silabo.id
                    template = get_template("pro_planificacion/importarrecursossilaboperiodotodo.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'duplicar_recursossilabovdos_otro_periodo_todo':
                try:
                    data['title'] = u'Recursos de sílabos que puede importar de otros periodos'
                    listaperiodo = []
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.POST['ids'])))
                    # data['periodos'] = Periodo.objects.filter(status=True, pk__in=silabo.lista_periodos_silabos()).exclude(tipo_id=3).order_by('-inicio')
                    data['idsact'] = silabo.id
                    tipo = int(request.POST['tipo'])
                    if tipo == 1:
                        data['periodos'] = Periodo.objects.filter(Q(pk=silabo.materia.nivel.periodo.id) | Q(id=131)).exclude(tipo_id__in=[3, 4]).order_by('-inicio')
                    else:
                        data['periodos'] = Periodo.objects.filter(Q(pk__gte=95) | Q(id=131), status=True).exclude(tipo_id__in=[3, 4]).order_by('-inicio')
                    if tipo == 1:
                        template = get_template("pro_planificacion/importarrecursossilaboperiodotodovdos.html")
                    if tipo == 2:
                        template = get_template("pro_planificacion/importarsolorecursos.html")
                    if tipo == 3:
                        template = get_template("pro_planificacion/importarsoloactividades.html")
                    if tipo == 4:
                        data['periodos'] = Periodo.objects.filter(pk__gte=95, pk__lte=silabo.materia.nivel.periodo.id, tipo=silabo.materia.nivel.periodo.tipo, status=True).exclude(tipo_id__in=[3, 4]).order_by('-inicio')
                        template = get_template("pro_planificacion/importarsolovideomagistral.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'listar_periodos':
                try:
                    lista = []
                    listaperiodos1 = Periodo.objects.filter(pk__gte=95, tipo_id=periodo.tipo.id, status=True).exclude(pk__gte=periodo.id).order_by('-inicio')
                    listaperiodos2 = Periodo.objects.filter(id=131)
                    listaperiodos = listaperiodos1 | listaperiodos2
                    for lis in listaperiodos:
                        lista.append([lis.id, lis.nombre])
                    return JsonResponse({"result": "ok", 'lista': lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'listarsilabos_periodos':
                try:
                    lista = []
                    silaboact = Silabo.objects.get(status=True, pk=int(request.POST['idsilabo']))
                    silabos = Silabo.objects.filter(status=True, programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id, materia__asignaturamalla__id=silaboact.materia.asignaturamalla.id, materia__nivel__periodo__id=int(request.POST['idperiodosilabo'])).exclude(pk=silaboact.id)
                    # silabos = Silabo.objects.filter(status=True, materia__asignaturamalla__asignatura__id=silaboact.materia.asignaturamalla.asignatura.id, materia__nivel__periodo__id=int(request.POST['idperiodosilabo'])).exclude(pk=silaboact.id)
                    for silabo in silabos:
                        if silabo.estado_planificacion_clases() >= 100:
                            lista.append([silabo.id, str(silabo.materia), str(silabo.fecha_creacion.strftime("%Y/%m/%d")), str(silabo.profesor), str(silabo.estado_planificacion_clases()), str(silabo.materia.asignaturamalla.nivelmalla.nombre)])
                    return JsonResponse({"result": "ok", "lista": lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'copiaractividad':
                try:
                    listatareas = [2, 3, 5, 7, 8]
                    idtipoactividad = int(request.POST['idtipoactividad'])
                    codmodelo = request.POST['codmodelo']
                    califica = request.POST['califica']
                    if idtipoactividad == 1:
                        actividad = TestSilaboSemanal.objects.get(pk=int(request.POST['id']))
                        replicatest = actividad
                        replicatest.pk = None
                        replicatest.idtestmoodle = 0
                        replicatest.tiporecurso_id = 11
                        replicatest.silabosemanal_id = int(encrypt(request.POST['idsilabosemanal']))
                        replicatest.estado_id = 1
                        if califica:
                            replicatest.calificar = True
                            replicatest.detallemodelo_id = codmodelo
                        replicatest.save(request)
                        replicatest.silabosemanal.silabo.update_ordenaactividad(idtipoactividad)
                    if idtipoactividad in listatareas:
                        actividad = TareaSilaboSemanal.objects.get(pk=int(request.POST['id']))
                        replicatest = actividad
                        replicatest.pk = None
                        replicatest.idtareamoodle = 0
                        replicatest.tiporecurso_id = 5
                        replicatest.silabosemanal_id = int(encrypt(request.POST['idsilabosemanal']))
                        replicatest.estado_id = 1
                        if califica:
                            replicatest.calificar = True
                            replicatest.detallemodelo_id = codmodelo
                        replicatest.save(request)
                        replicatest.silabosemanal.silabo.update_ordenaactividad(idtipoactividad)
                    if idtipoactividad == 6:
                        actividad = ForoSilaboSemanal.objects.get(pk=int(request.POST['id']))
                        replicatest = actividad
                        replicatest.pk = None
                        replicatest.idforomoodle = 0
                        replicatest.tiporecurso_id = 9
                        replicatest.silabosemanal_id = int(encrypt(request.POST['idsilabosemanal']))
                        replicatest.estado_id = 1
                        if califica:
                            replicatest.calificar = True
                            replicatest.detallemodelo_id = codmodelo
                        replicatest.save(request)
                        replicatest.silabosemanal.silabo.update_ordenaactividad(idtipoactividad)
                    if idtipoactividad == 4:
                        actividad = GPGuiaPracticaSemanal.objects.get(pk=int(request.POST['id']))
                        replicatest = actividad
                        replicatest.pk = None
                        replicatest.temapractica_id = None
                        replicatest.subtemapractica_id = None
                        replicatest.unidad_id = None
                        replicatest.codigoqr = False
                        replicatest.silabosemanal_id = int(encrypt(request.POST['idsilabosemanal']))
                        replicatest.save(request)
                        if GPObjetivo.objects.filter(guiasemanal_id=int(request.POST['id']), status=True):
                            listadoobjetivo = GPObjetivo.objects.filter(guiasemanal_id=int(request.POST['id']), status=True)
                            for objetivo in listadoobjetivo:
                                objetivoguia = GPObjetivo(guiasemanal=replicatest, nombre=objetivo.nombre)
                                objetivoguia.save(request)
                        if GPInstruccion.objects.filter(guiasemanal_id=int(request.POST['id']), status=True):
                            instruccion = GPInstruccion.objects.get(pk=GPInstruccion.objects.filter(guiasemanal_id=int(request.POST['id']), status=True)[0].id, status=True)
                            instruccionreplica = GPInstruccion(guiasemanal=replicatest, observacion=instruccion.observacion)
                            instruccionreplica.save(request)
                    # else:
                    #     replicatest = actividad
                    #     replicatest.pk = None
                    #     replicatest.silabosemanal_id = int(encrypt(request.POST['idsilabosemanal']))
                    #     replicatest.estado_id=1
                    #     replicatest.save(request)
                    #     replicatest.silabosemanal.silabo.update_ordenaactividad(idtipoactividad)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'listar_actividadsilabo':
                try:
                    lista = []
                    listatareas = [2, 3, 5, 7, 8]
                    data['idtipoactividad'] = idtipoactividad = int(request.POST['idtipoactividad'])
                    silabo = Silabo.objects.get(pk=request.POST['idsilaboperiodo'])
                    silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id_codsemanal'])))
                    if idtipoactividad == 1:
                        listadotest = TestSilaboSemanal.objects.filter(silabosemanal__silabo_id=request.POST['idsilaboperiodo'], status=True, estado_id__in=[2, 4]).order_by('silabosemanal__numsemana')
                        for lis in listadotest:
                            lista.append([lis.id, lis.silabosemanal.numsemana, lis.nombretest, lis.instruccion, 3, lis.estado.id, 'TEST', lis.calificar])
                    if idtipoactividad in listatareas:
                        listadotest = TareaSilaboSemanal.objects.filter(silabosemanal__silabo_id=request.POST['idsilaboperiodo'], actividad_id=idtipoactividad, status=True, estado_id__in=[2, 4]).order_by('silabosemanal__numsemana')
                        for lis in listadotest:
                            lista.append([lis.id, lis.silabosemanal.numsemana, lis.nombre, lis.objetivo, 1, lis.estado.id, lis.actividad.descripcion, lis.calificar])
                    if idtipoactividad == 4:
                        listadotest = GPGuiaPracticaSemanal.objects.filter(silabosemanal__silabo_id=request.POST['idsilaboperiodo'], status=True).order_by('silabosemanal__numsemana')
                        for lis in listadotest:
                            # if lis.id_estado_guiapractica() in [2,3]:
                            lista.append([lis.id, lis.silabosemanal.numsemana, lis.nombrepractica, lis.nombrepractica, 10, 2, 'GUÍA PRÁCTICA', lis.calificar])
                    if idtipoactividad == 6:
                        listadotest = ForoSilaboSemanal.objects.filter(silabosemanal__silabo_id=request.POST['idsilaboperiodo'], status=True, estado_id__in=[2, 4]).order_by('silabosemanal__numsemana')
                        for lis in listadotest:
                            lista.append([lis.id, lis.silabosemanal.numsemana, lis.nombre, lis.objetivo, 2, lis.estado.id, 'FORO', lis.calificar])
                    data['lista'] = lista
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    data['modeloevaluativo'] = DetalleModeloEvaluativo.objects.filter(modelo=silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, test=True, migrarmoodle=True, recurso=True, status=True)
                    template = get_template("pro_planificacion/itemsrecursos.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'lista_recursossilabos_periodo':
                lista = []
                try:
                    if 'ida' in request.POST and 'id' in request.POST:
                        silaboact = Silabo.objects.get(status=True, pk=int(request.POST['ida']))
                        silabos = Silabo.objects.filter(status=True, programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id, materia__asignaturamalla__id=silaboact.materia.asignaturamalla.id, materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)
                        for silabo in silabos:
                            if silabo.estado_planificacion_clases() >= 100:
                                lista.append([silabo.id, str(silabo.materia), str(silabo.fecha_creacion.strftime("%Y/%m/%d")), str(silabo.profesor), str(silabo.estado_planificacion_clases())])
                        return JsonResponse({"result": "ok", "lista": lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'lista_recursossilabos_periodo_todo':
                lista = []
                try:
                    if 'ida' in request.POST and 'id' in request.POST:
                        silaboact = Silabo.objects.get(status=True, pk=int(request.POST['ida']))
                        nombasignatura = silaboact.materia.asignaturamalla.asignatura.nombre
                        silabos = Silabo.objects.filter(status=True, materia__asignaturamalla__asignatura__nombre__icontains=nombasignatura[0:10], materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)  # programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id , materia__asignaturamalla__asignatura__nombre=nombasignatura, materia__profesormateria__profesor=profesor
                        for silabo in silabos:
                            if silabo.estado_planificacion_clases() >= 100:
                                # lista.append([silabo.id, silabo.materia.asignaturamalla.asignatura.nombre+" "+ str(silabo.materia.asignaturamalla.nivelmalla)+" "+ str(silabo.materia.paralelo)+" "+ str(silabo.materia.asignaturamalla.malla.carrera.nombre), str(silabo.fecha_creacion.strftime("%Y/%m/%d")), str(silabo.profesor), str(silabo.estado_planificacion_clases())])
                                lista.append([silabo.id, str(silabo.materia) + " " + str(silabo.materia.asignaturamalla.nivelmalla.nombre), str(silabo.fecha_creacion.strftime("%Y/%m/%d")), str(silabo.profesor), str(silabo.estado_planificacion_clases())])
                        return JsonResponse({"result": "ok", "lista": lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'lista_recursossilabos_periodo_todovidm':
                lista = []
                try:
                    if 'ida' in request.POST and 'id' in request.POST:
                        silaboact = Silabo.objects.get(status=True, pk=int(request.POST['ida']))
                        nombasignatura = silaboact.materia.asignaturamalla.asignatura.nombre
                        silabos = Silabo.objects.filter(status=True, materia__asignaturamalla__asignatura__nombre__icontains=nombasignatura[0:10], materia__nivel__periodo__id=int(request.POST['id'])).exclude(pk=silaboact.id)  # programaanaliticoasignatura_id=silaboact.programaanaliticoasignatura.id , materia__asignaturamalla__asignatura__nombre=nombasignatura, materia__profesormateria__profesor=profesor
                        for silabo in silabos:
                            hay_video = 0
                            if silabo.estado_planificacion_clases() >= 100:
                                if VideoMagistralSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo).exists():
                                    hay_video = 1
                                lista.append([silabo.id, str(silabo.materia) + " " + str(silabo.materia.asignaturamalla.nivelmalla.nombre), str(silabo.fecha_creacion.strftime("%Y/%m/%d")), str(silabo.profesor), str(silabo.estado_planificacion_clases()), hay_video])
                        return JsonResponse({"result": "ok", "lista": lista})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delrecursolink':
                try:
                    link = RecursosDidacticosSemanal.objects.get(status=True, pk=int(encrypt(request.POST['id'])))
                    log(u'Eliminó salida de clase: %s la persona: %s' % (link, link.silabosemanal), request, "del")
                    link.status = False
                    link.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editobjetivoact':
                try:
                    if 'id' in request.POST and 'obj' in request.POST:
                        semana = SilaboSemanal.objects.get(status=True, pk=int(encrypt(request.POST['id'])))
                        semana.objetivoaprendizaje = request.POST['obj']
                        semana.save(request)
                        semana.modifico_silabo(persona, request)
                        log(u'Editó objetivo de aprendizaje de la semana de: %s' % semana, request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editobjetivoacttema':
                try:
                    if 'id' in request.POST and 'obj' in request.POST:
                        detalletam = DetalleSilaboSemanalTema.objects.get(status=True, pk=int(encrypt(request.POST['id'])))
                        detalletam.objetivoaprendizaje = request.POST['obj']
                        detalletam.save(request)
                        # detalletam.modifico_silabo(persona,request)
                        # log(u'Editó objetivo de aprendizaje de la semana del tema de: %s' % detalletam, request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editenfoqueact':
                try:
                    if 'id' in request.POST and 'enf' in request.POST:
                        semana = SilaboSemanal.objects.get(status=True, pk=int(encrypt(request.POST['id'])))
                        semana.enfoque = request.POST['enf']
                        semana.save(request)
                        semana.modifico_silabo(persona, request)
                        log(u'Editó enfoque de evaluasion de la semana de: %s' % semana, request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editenfoqueactdos':
                try:
                    if 'id' in request.POST and 'enf' in request.POST:
                        semana = SilaboSemanal.objects.get(status=True, pk=int(encrypt(request.POST['id'])))
                        semana.enfoquedos = request.POST['enf']
                        semana.save(request)
                        semana.modifico_silabo(persona, request)
                        log(u'Editó enfoque de evaluasion de la semana de: %s' % semana, request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editenfoqueacttres':
                try:
                    if 'id' in request.POST and 'enf' in request.POST:
                        semana = SilaboSemanal.objects.get(status=True, pk=int(encrypt(request.POST['id'])))
                        semana.enfoquetres = request.POST['enf']
                        semana.save(request)
                        semana.modifico_silabo(persona, request)
                        log(u'Editó enfoque de evaluasion de la semana de: %s' % semana, request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editrecursoact':
                try:
                    if 'id' in request.POST and 'rec' in request.POST:
                        semana = SilaboSemanal.objects.get(status=True, pk=int(encrypt(request.POST['id'])))
                        semana.recursos = request.POST['rec']
                        semana.save(request)
                        semana.modifico_silabo(persona, request)
                        log(u'Editó recurso de la semana de: %s' % semana, request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editevaluacionact':
                try:
                    if 'id' in request.POST and 'eval' in request.POST:
                        semana = SilaboSemanal.objects.get(status=True, pk=int(encrypt(request.POST['id'])))
                        semana.evaluacion = request.POST['eval']
                        semana.save(request)
                        semana.modifico_silabo(persona, request)
                        log(u'Editó evaluacion de la semana de: %s' % semana, request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'listarecursolink':
                try:
                    if 'id' in request.POST:
                        data['title'] = u'Imprortar sílabos de otros periodos'
                        data['semana'] = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        template = get_template("pro_planificacion/listalinks.html")
                        json_content = template.render(data)
                        return JsonResponse({"result": "ok", 'data': json_content})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'listarrecursolink':
                try:
                    if 'id' in request.POST:
                        listalink = []
                        silabosemana = SilaboSemanal.objects.get(pk=request.POST['id'])
                        for link in silabosemana.recursosdidacticossemanal_set.filter(status=True):
                            listalink.append([link.id, str(link), str(link.link)])
                        data = {"result": "ok", 'listalink': listalink}
                        return JsonResponse(data)
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'editrecursolink':
                if 'id' in request.POST:
                    semana = SilaboSemanal.objects.get(status=True, pk=int(request.POST['id']))
                    if 'lista_items1' in request.POST:
                        for link in json.loads(request.POST['lista_items1']):
                            if not RecursosDidacticosSemanal.objects.filter(status=True, silabosemanal=semana, descripcion=link['descripcion'].strip(), link=link['link'].strip()).exists():
                                rlink = RecursosDidacticosSemanal(silabosemanal=semana, descripcion=str(link['descripcion'].strip()), link=str(link['link'].strip()))
                                rlink.save(request)
                                log(u'Adicionó recurso didactico link: %s al sílabo de la materia %s:' % (link, rlink.silabosemanal.silabo.materia), request, "add")
                        listalink = []
                        for link in json.loads(request.POST['lista_items1']):
                            if semana.recursosdidacticossemanal_set.filter(status=True, descripcion=link['descripcion'].strip(), link=link['link'].strip()).exists():
                                listalink.append(semana.recursosdidacticossemanal_set.filter(status=True, descripcion=link['descripcion'].strip(), link=link['link'].strip())[0].id)
                        if semana.recursosdidacticossemanal_set.all().exclude(id__in=listalink):
                            for link in semana.recursosdidacticossemanal_set.all().exclude(id__in=listalink):
                                log(u'Eliminó recurso didactico link: %s del  sílabo de la materia %s:' % (link.descripcion, semana.silabo.materia), request, "del")
                                semana.recursosdidacticossemanal_set.all().exclude(id__in=listalink).update(status=False)
                        return JsonResponse({"result": "ok"})
                else:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al procesar los datos."})

            elif action == 'mis_subtemas_semanales':
                try:
                    if 'ids' in request.POST and 'idt' in request.POST:
                        lista = []
                        silabosemana = SilaboSemanal.objects.get(pk=request.POST['ids'])
                        tema = silabosemana.detallesilabosemanaltema_set.get(pk=request.POST['idt'])
                        for subtema in silabosemana.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__temaunidadresultadoprogramaanalitico__id=tema.temaunidadresultadoprogramaanalitico.id):
                            lista.append([subtema.id, str(subtema)])
                        data = {"result": "ok", 'lista': lista}
                        return JsonResponse(data)
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'actualizar_estudiantes_moodle':
                try:
                    materia = Materia.objects.get(pk=request.POST['id'], status=True)
                    if materia.coordinacion().id == 9:
                        tipourl = 2
                    else:
                        tipourl = 1
                    materia.crear_actualizar_estudiantes_curso(moodle, tipourl)
                    log(u'Utiliza el boton Actualizar todos los estudiantes moodle %s' % (materia), request, "add")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al actualizar los datos."})

            elif action == 'actualizar_silabos_moodle':
                try:
                    materia = Materia.objects.get(pk=request.POST['id'], status=True)
                    materia.crear_actualizar_silabo_curso()
                    log(u'Utiliza el boton Actualizar silabo en moodle %s' % (materia), request, "add")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al actualizar los datos."})

            elif action == 'extraernotasmoodle':
                try:
                    materia = Materia.objects.get(pk=request.POST['id'], status=True)
                    for alumno in materia.asignados_a_esta_materia_moodle().filter(retiramateria=False):
                        # Si alumno no tiene matricula bloqueada
                        if alumno.matricula.bloqueomatricula is False:
                            # Extraer datos de moodle
                            for notasmooc in materia.notas_de_moodle(alumno.matricula.inscripcion.persona):
                                campo = alumno.campo(notasmooc[1].upper().strip())
                                # if not alumno.matricula.bloqueomatricula:
                                if type(notasmooc[0]) is Decimal:
                                    if null_to_decimal(campo.valor) != float(notasmooc[0]) or (alumno.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                        actualizar_nota_planificacion(alumno.id, notasmooc[1].upper().strip(), notasmooc[0])
                                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=notasmooc[0])
                                        auditorianotas.save(request)
                                else:
                                    if null_to_decimal(campo.valor) != float(0) or (alumno.asistenciafinal < campo.detallemodeloevaluativo.modelo.asistenciaaprobar):
                                        actualizar_nota_planificacion(alumno.id, notasmooc[1].upper().strip(), notasmooc[0])
                                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                        auditorianotas.save(request)

                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al actualizar los datos. %s" % ex})

            elif action == 'importarguiapractica':
                try:
                    data['title'] = u'Imprortar guías de prácticas'
                    data['silabosemanal'] = silabosemanal = SilaboSemanal.objects.get(pk=int(request.POST['id']))
                    if silabosemanal.silabo.lista_periodos_guiaspracticas():
                        data['periodos'] = Periodo.objects.filter(pk__in=silabosemanal.silabo.lista_periodos_guiaspracticas())
                        template = get_template("pro_planificacion/importarguiaspracticas.html")
                        json_content = template.render(data)
                        return JsonResponse({"result": "ok", 'data': json_content})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"La signatura no tiene guías de prácticas."})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al actualizar los datos."})

            elif action == 'listaguiaspracticas':
                lista = []
                try:
                    if 'ids' in request.POST and 'idp' in request.POST:
                        silabosemanal = SilaboSemanal.objects.get(status=True, pk=int(request.POST['ids']))
                        guiaspracticas = GPGuiaPracticaSemanal.objects.filter(status=True, silabosemanal__silabo__materia__nivel__periodo__id=int(request.POST['idp']), silabosemanal__silabo__materia__asignaturamalla__id=silabosemanal.silabo.materia.asignaturamalla.id).exclude(silabosemanal__silabo__id=silabosemanal.silabo.id).order_by('silabosemanal__silabo__id')
                        for guia in guiaspracticas:
                            tiene_archivo = 0
                            archivo = ''
                            if guia.gpinstruccion_set.filter(status=True).exists():
                                if guia.gpinstruccion_set.filter(status=True)[0].archivo:
                                    tiene_archivo = 1
                                    archivo = guia.gpinstruccion_set.filter(status=True)[0].archivo.url
                            lista.append([guia.silabosemanal.silabo.id, guia.silabosemanal.id, guia.id, str(guia.silabosemanal.silabo.materia), str(guia.temapractica), guia.numeropractica, tiene_archivo, archivo])
                        return JsonResponse({"result": "ok", "lista": lista, "ids": silabosemanal.id})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al actualizar los datos."})

            elif action == 'practica_indpdf':
                try:
                    practica = GPGuiaPracticaSemanal.objects.get(status=True, pk=int(request.POST['id']))
                    data['listadoobjetivo'] = practica.gpobjetivo_set.filter(status=True).order_by('id')
                    data['listadobasica'] = practica.gpbibliografiabasica_set.filter(status=True).order_by('id')
                    data['listadocomplementaria'] = practica.gpbibliografiacomplementaria_set.filter(status=True).order_by('id')
                    data['listadovirtual'] = practica.gpbibliografiavirtual_set.filter(status=True).order_by('id')
                    data['listadetemas'] = practica.gptemas_set.filter(status=True).order_by('tema__orden')
                    data['listadearticulos'] = practica.gparticulo_set.filter(status=True).order_by('id')
                    data['practicas'] = GPGuiaPracticaSemanal.objects.filter(status=True, id=practica.id)
                    data['director'] = practica.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinador(practica.silabosemanal.silabo.materia.nivel.periodo, practica.silabosemanal.silabo.profesor.coordinacion.sede).persona.nombre_completo_inverso() if practica.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinador(practica.silabosemanal.silabo.materia.nivel.periodo, practica.silabosemanal.silabo.profesor.coordinacion.sede) else None
                    return conviert_html_to_pdf(
                        'pro_planificacion/practica_pdf.html',
                        {
                            'pagesize': 'A4',
                            'data': data,
                        }
                    )
                except Exception as ex:
                    pass

            elif action == 'practicaqr_pdf':
                try:
                    practica = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.POST['idpractica'])))

                    val, msj = generar_archivo_guia_practica(practica)

                    if not val:
                        raise NameError(msj)

                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s" % ex})

            elif action == 'ejecutarimportarguiapractica':
                try:
                    npractica = 1
                    silabosemanal = SilaboSemanal.objects.get(pk=request.POST['idsa'])
                    g = GPGuiaPracticaSemanal.objects.get(id=request.POST['id'])
                    if GPGuiaPracticaSemanal.objects.filter(silabosemanal__silabo_id=silabosemanal.silabo.id).exists():
                        listanumero = GPGuiaPracticaSemanal.objects.values_list('numeropractica', flat=False).filter(silabosemanal__silabo_id=silabosemanal.silabo.id).order_by('numeropractica')
                        n = 0
                        for lista in listanumero:
                            n = n + 1
                            if not n == lista[0]:
                                npractica = n
                                break
                            else:
                                npractica = n + 1
                    g = GPGuiaPracticaSemanal.objects.get(id=request.POST['id'])
                    guiap = GPGuiaPracticaSemanal(silabosemanal=silabosemanal,
                                                  numeropractica=npractica,
                                                  tiempoactividad=g.tiempoactividad,
                                                  fechaelaboracion=datetime.now().date(),
                                                  individual=g.individual,
                                                  grupo=g.grupo,
                                                  cantidadalumnogrupo=g.cantidadalumnogrupo,
                                                  objetvopactica=g.objetvopactica,
                                                  actividaddesarrollar=g.actividaddesarrollar.strip(),
                                                  rubica=g.rubica,
                                                  calificar=g.calificar,
                                                  calificarmax=g.calificarmax,
                                                  calificarmin=g.calificarmin,
                                                  cerrada=g.cerrada,
                                                  registrado=g.registrado,
                                                  laboratorio=g.laboratorio)
                    guiap.save(request)
                    if g.mi_instruccion():
                        for inst in g.gpinstruccion_set.filter(status=True):
                            inst = GPInstruccion(guiasemanal=guiap, observacion='<p>' + inst.observacion + '</p>', archivo=inst.archivo)
                            inst.save(request)
                    if g.gplugarpracticadetalle_set.filter(status=True).exists():
                        for l in g.gplugarpracticadetalle_set.filter(status=True):
                            lugar = GPLugarPracticaDetalle(guiapractica=guiap, detalle=l.detalle, cantidad=l.cantidad)
                            lugar.save(request)

                    log(u'Importó el guía práctica: %s a la semana: %s el profesor: %s' % (guiap, silabosemanal.numsemana, profesor.persona.nombre_completo_inverso()), request, "import")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'actualizar_horas':
                try:
                    if 'id' in request.POST:
                        silabo = Silabo.objects.get(pk=int(request.POST['id']))
                        if silabo.silabosemanal_set.filter(status=True).exists():
                            for s in silabo.silabosemanal_set.filter(status=True):
                                s.horaspresencial = silabo.materia.asignaturamalla.horaspresencialessemanales
                                s.horaautonoma = silabo.materia.asignaturamalla.horasautonomassemanales
                                s.save(request)
                            log(u'Actualizo las horas presenciales y autonomas del silabo de la materia: %s' % (silabo.materia), request, "act")
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error al actualizar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'crearpregunta':
                try:
                    materia = Materia.objects.get(pk=encrypt(request.POST['id']))
                    form = AvPreguntaDocenteIniForm(request.POST, request.FILES)
                    if form.is_valid():
                        materiaasignada = MateriaAsignada.objects.get(materia=materia, matricula__inscripcion=form.cleaned_data['inscripcion'])
                        profersormateria = ProfesorMateria.objects.filter(materia=materia, profesor=profesor, principal=True, activo=True)[0]
                        avpreguntadocente = AvPreguntaDocente(materiaasignada=materiaasignada,
                                                              profersormateria=profersormateria,
                                                              tema=form.cleaned_data['tema'],
                                                              pregunta=form.cleaned_data['pregunta'],
                                                              estadolectura=False,
                                                              estadolecturaalumno=True)
                        if 'archivo' in request.FILES:
                            newfile = request.FILES['archivo']
                            if newfile:
                                newfile._name = generar_nombre("pregunta", newfile._name)
                                avpreguntadocente.archivo = newfile
                        avpreguntadocente.save(request)
                        log(u'Profesor ingreso pregunta:%s' % avpreguntadocente, request, "add")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'silabopdf':
                try:
                    silabo = Silabo.objects.get(pk=int(encrypt(request.POST['id'])), status=True)
                    if silabo.materia.asignaturamalla.malla.carrera.modalidad == 3:
                        return conviert_html_to_pdf(
                            'pro_planificacion/silabo_virtual3_pdf.html' if periodo.id >= 112 else 'pro_planificacion/silabo_virtual2_pdf.html' if periodo.id >= 95 else 'pro_planificacion/silabo_virtual_pdf.html',
                            {
                                'pagesize': 'A4',
                                'data': silabo.silabo_virtual2_pdf() if periodo.id >= 95 else silabo.silabo_virtual_pdf(),
                            }
                        )
                    else:
                        return conviert_html_to_pdf(
                            'pro_planificacion/silabo_2_pdf.html' if periodo.id >= 112 else 'pro_planificacion/silabo_pdf.html',
                            {
                                'pagesize': 'A4',
                                'data': silabo.silabo_pdf(),
                            }
                        )
                except Exception as ex:
                    pass

            elif action == 'silaboverdos_pdf':
                try:
                    data['silabo'] = silabo = Silabo.objects.get(pk=int(encrypt(request.POST['id'])), status=True)
                    return conviert_html_to_pdf(
                        'pro_planificacion/silabovs2_pdf.html',
                        {
                            'pagesize': 'A4',
                            'datos': silabo.silabodetalletemas_pdf(),
                            'data': silabo.silabovdos_pdf(),
                        }
                    )
                except Exception as ex:
                    pass

            elif action == 'silaboposgradopdf':
                try:
                    silabo = Silabo.objects.get(pk=int(encrypt(request.POST['id'])), status=True)
                    return conviert_html_to_pdf(
                        'pro_planificacion/silabo_virtual_posgrado_pdf.html',
                        {
                            'pagesize': 'A4',
                            'data': silabo.silabo_virtual_posgrado_pdf(),
                        }
                    )
                except Exception as ex:
                    pass

            elif action == 'addrecursostutor':
                try:
                    form = RecursosTutorSemanalForm(request.POST)
                    if form.is_valid():
                        silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['silabosemanal'])))
                        tema = None
                        fechasubeclase = None
                        clasevirtualtutor = None
                        fechaclase = None
                        fechafinclase = None
                        if TemaUnidadResultadoProgramaAnalitico.objects.values('id').filter(pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico', flat=True).filter(silabosemanal=silabosemanal)).exists():
                            tema = TemaUnidadResultadoProgramaAnalitico.objects.filter(pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico', flat=True).filter(silabosemanal=silabosemanal))[0]
                        if form.cleaned_data['clasevirtualtutor']:
                            clasevirtualtutor = form.cleaned_data['clasevirtualtutor']
                            fechasubeclase = datetime.now()
                        if form.cleaned_data['fechaclase']:
                            fechaclase = form.cleaned_data['fechaclase']
                            hora = form.cleaned_data['hora']
                            fechaclase = str(fechaclase) + " " + str(hora)
                            fechaclase = convertir_fecha_hora_invertida(fechaclase)
                            if form.cleaned_data['horafin']:
                                fechafinclase = str(form.cleaned_data['fechaclase']) + " " + str(form.cleaned_data['horafin'])
                        recurso = DetalleRecursoTutorSemanal(silabosemanal=silabosemanal,
                                                             clasevirtualtutor=clasevirtualtutor,
                                                             zoomurltutor=form.cleaned_data['zoomurltutor'] if form.cleaned_data['zoomurltutor'] else None,
                                                             fecharecursotutor=datetime.now().date(),
                                                             tema=tema,
                                                             fechaclase=fechaclase,
                                                             fechasubeclase=fechasubeclase,
                                                             fechafinclase=fechafinclase)
                        recurso.save(request)
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editrecursostutor':
                try:
                    form = RecursosTutorSemanalForm(request.POST)
                    if form.is_valid():
                        tema = None
                        recurso = DetalleRecursoTutorSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        if TemaUnidadResultadoProgramaAnalitico.objects.values('id').filter(
                                pk__in=DetalleSilaboSemanalTema.objects.values_list(
                                    'temaunidadresultadoprogramaanalitico', flat=True).filter(
                                    silabosemanal=recurso.silabosemanal)).exists():
                            tema = TemaUnidadResultadoProgramaAnalitico.objects.filter(
                                pk__in=DetalleSilaboSemanalTema.objects.values_list(
                                    'temaunidadresultadoprogramaanalitico', flat=True).filter(
                                    silabosemanal=recurso.silabosemanal))[0]
                        if form.cleaned_data['clasevirtualtutor'] and recurso.clasevirtualtutor == None:
                            recurso.clasevirtualtutor = form.cleaned_data['clasevirtualtutor']
                            recurso.fechasubeclase = datetime.now()
                        if form.cleaned_data['zoomurltutor']:
                            recurso.zoomurltutor = form.cleaned_data['zoomurltutor']
                        if form.cleaned_data['fechaclase']:
                            fechaclase = form.cleaned_data['fechaclase']
                            hora = form.cleaned_data['hora']
                            fechaclase = str(fechaclase) + " " + str(hora)
                            fechaclase = convertir_fecha_hora_invertida(fechaclase)
                            recurso.fechaclase = fechaclase
                            if form.cleaned_data['horafin']:
                                horafin = form.cleaned_data['horafin']
                                fechafinclase = str(form.cleaned_data['fechaclase']) + " " + str(horafin)
                                fechafinclase = convertir_fecha_hora_invertida(fechafinclase)
                                recurso.fechafinclase = fechafinclase
                        if tema:
                            recurso.tema = tema
                        recurso.save(request)
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delrecursostutor':
                try:
                    recurso = DetalleRecursoTutorSemanal.objects.get(status=True, pk=int(encrypt(request.POST['id'])))
                    log(u'Eliminó recurso tutor: %s la persona: %s' % (recurso, persona), request, "del")
                    recurso.status = False
                    recurso.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'verdetalletutor':
                try:
                    data['silabosemanal'] = SilaboSemanal.objects.get(pk=request.POST['id'])
                    template = get_template("pro_planificacion/verdetalletutor.html")
                    json_content = template.render(data)
                    return HttpResponse(json.dumps({"result": "ok", 'data': json_content}), content_type="application/json")
                except Exception as ex:
                    pass

            elif action == 'actualizar_docentes_moodle':
                try:
                    materia = Materia.objects.get(pk=request.POST['id'], status=True)
                    tipourl = 1
                    if materia.coordinacion().id == 9:
                        tipourl = 2
                        materia.crear_actualizar_docente_curso_admision(moodle, tipourl)
                    else:
                        tipourl = 1
                        materia.crear_actualizar_docente_curso(moodle, tipourl)
                    log(u'Utiliza el boton Actualizar docente en moodle %s' % (materia), request, "add")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al actualizar los datos."})


            elif action == 'actualizar_silabo_moodle':
                try:
                    materia = Materia.objects.get(pk=request.POST['id'], status=True)
                    materia.actualizar_htmlsilabo_moodle()
                    log(u'Utiliza el boton Actualizar silabo moodle %s' % (materia), request, "add")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al actualizar los datos."})


            elif action == 'actualizar_modevaluativo_moodle':
                try:
                    materia = Materia.objects.get(pk=request.POST['id'], status=True)
                    materia.crear_actualizar_categoria_notas_curso()
                    log(u'Utiliza el boton Actualizar modelo moodle %s' % (materia), request, "add")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al actualizar los datos."})


            elif action == 'addsemanaplanificacionvirtualposgrado':
                try:
                    subtema = ''
                    tema = ''
                    cronograma = ''
                    if 'lista_items1' in request.POST:
                        subtema = json.loads(request.POST['lista_items1'])
                    if 'lista_items4' in request.POST:
                        tema = json.loads(request.POST['lista_items4'])
                    if 'lista_items6' in request.POST:
                        cronograma = json.loads(request.POST['lista_items6'])
                    cadena = request.POST['id'].split("_")
                    silabo = Silabo.objects.get(pk=int(encrypt(cadena[0])))
                    form = SilaboSemanalForm(request.POST)
                    # if form.is_valid():
                    silabosemana = SilaboSemanal(silabo=silabo,
                                                 numsemana=int(encrypt(cadena[4])),
                                                 semana=int(encrypt(cadena[1])),
                                                 fechainiciosemana=cadena[2],
                                                 fechafinciosemana=cadena[3]
                                                 )
                    silabosemana.save(request)
                    if subtema:
                        for subt in subtema:
                            ingresosubt = DetalleSilaboSemanalSubtema(silabosemanal_id=silabosemana.id,
                                                                      subtemaunidadresultadoprogramaanalitico_id=subt)
                            ingresosubt.save(request)
                    if tema:
                        for tem in tema:
                            ingresostemas = DetalleSilaboSemanalTema(silabosemanal_id=silabosemana.id,
                                                                     temaunidadresultadoprogramaanalitico_id=tem)
                            ingresostemas.save(request)

                    if 'lista_items7' in request.POST:
                        bibliapa = [x['bibliografiaexterna'] for x in json.loads(request.POST['lista_items7'])]
                        for apa in bibliapa:
                            if not BibliograbiaAPASilabo.objects.filter(silabosemanal_id=silabosemana.id,
                                                                        bibliografia=apa).exists():
                                bapa = BibliograbiaAPASilabo(silabosemanal_id=silabosemana.id, bibliografia=apa)
                                bapa.save(request)
                                log(u'Adicionó Bibliografia Apa: %s al sílabo de la materia %s:' % (
                                    bapa, bapa.silabosemanal.silabo.materia), request, "add")

                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s" % ex})

            elif action == 'eliminaractividad':
                try:
                    idcodigoopcion = request.POST['idcodigoopcion']
                    # if idcodigoopcion == '1':
                    #     actividad = VirtualActividadesSilabo.objects.get(
                    #         pk=int(encrypt(request.POST['iddelactividad'])))
                    #     actividad.update(status=False)
                    # if idcodigoopcion == '2':
                    #     caso = VirtualCasosPracticosSilabo.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                    #     caso.update(status=False)
                    # if idcodigoopcion == '3':
                    #     lectura = VirtualLecturasSilabo.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                    #     lectura.update(status=False)
                    # if idcodigoopcion == '4':
                    #     masrecurso = VirtualMasRecursoSilabo.objects.get(
                    #         pk=int(encrypt(request.POST['iddelactividad'])))
                    #     masrecurso.update(status=False)
                    # if idcodigoopcion == '5':
                    #     presencial = VirtualPresencialSilabo.objects.get(
                    #         pk=int(encrypt(request.POST['iddelactividad'])))
                    #     presencial.update(status=False)
                    # if idcodigoopcion == '6':
                    #     test = VirtualTestSilabo.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                    #     test.update(status=False)
                    if idcodigoopcion == '7':
                        silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        # silabosemanal.status=False
                        # silabosemanal.save(request)
                        log(u'Eliminó actividad : %s' % (silabosemanal), request, "del")
                        silabosemanal.delete()
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos.%s" % ex})

            elif action == 'eliminarrecurso':
                try:

                    idcodigoopcion = request.POST['idcodigoopcion']
                    if idcodigoopcion == '1':
                        tarea = TareaSilaboSemanal.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        tarea.status = False
                        tarea.save(request)
                        lista_items1 = ''
                        aprendizajestemas(request, lista_items1, tarea.actividad.id, tarea.silabosemanal.id)
                        tarea.silabosemanal.silabo.update_ordenaactividad(tarea.actividad.id)
                        materia = tarea.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        log(u'Eliminó tarea semanal %s' % (tarea), request, "del")
                    if idcodigoopcion == '2':
                        foro = ForoSilaboSemanal.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        foro.status = False
                        foro.save(request)
                        lista_items1 = ''
                        aprendizajestemas(request, lista_items1, 6, foro.silabosemanal.id)
                        foro.silabosemanal.silabo.update_ordenaactividad(6)
                        materia = foro.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        log(u'Eliminó foro semanal %s' % (foro), request, "del")
                    if idcodigoopcion == '3':
                        test = TestSilaboSemanal.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        test.status = False
                        test.save(request)
                        lista_items1 = ''
                        silabosemanal = test.silabosemanal
                        if silabosemanal.examen:
                            silabosemanal.status = False
                            silabosemanal.save(request)
                        if test.detallemodelo:
                            if test.detallemodelo.nombre != "EX1" and test.detallemodelo.nombre != "EX2":
                                aprendizajestemas(request, lista_items1, 1, test.silabosemanal.id)
                                test.silabosemanal.silabo.update_ordenaactividad(1)
                        materia = test.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        log(u'Eliminó test silabo semanal %s' % (test), request, "del")
                    if idcodigoopcion == '4':
                        guiaestudiante = GuiaEstudianteSilaboSemanal.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        guiaestudiante.status = False
                        guiaestudiante.save(request)
                        materia = guiaestudiante.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        log(u'Eliminó guía de estudiante %s' % (guiaestudiante), request, "del")
                    if idcodigoopcion == '5':
                        guiadocente = GuiaDocenteSilaboSemanal.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        guiadocente.status = False
                        guiadocente.save(request)
                        materia = guiadocente.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        log(u'Eliminó guía de docente%s' % (guiadocente), request, "del")
                    if idcodigoopcion == '6':
                        presentacion = DiapositivaSilaboSemanal.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        presentacion.status = False
                        presentacion.save(request)
                        materia = presentacion.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        log(u'Eliminó diapositiva semanal %s' % (presentacion), request, "del")
                    if idcodigoopcion == '7':
                        compendio = CompendioSilaboSemanal.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        compendio.status = False
                        compendio.save(request)
                        materia = compendio.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        log(u'Eliminó compendio semanal %s' % (compendio), request, "del")
                    if idcodigoopcion == '8':
                        materialadicional = MaterialAdicionalSilaboSemanal.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        materialadicional.status = False
                        materialadicional.save(request)
                        materia = materialadicional.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        log(u'Eliminó material adicional semanal %s' % (materialadicional), request, "del")
                    if idcodigoopcion == '9':
                        vidmagistrales = VideoMagistralSilaboSemanal.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        vidmagistrales.status = False
                        vidmagistrales.save(request)
                        materia = vidmagistrales.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        log(u'Eliminó video magistral %s' % (vidmagistrales), request, "del")
                    if idcodigoopcion == '10':
                        tareapractica = TareaPracticaSilaboSemanal.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        tareapractica.status = False
                        tareapractica.save(request)
                        lista_items1 = ''
                        aprendizajestemas(request, lista_items1, 4, tareapractica.silabosemanal.id)
                        tareapractica.silabosemanal.silabo.update_ordenaactividad(4)
                        materia = tareapractica.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        log(u'Eliminó tarea de práctica %s' % (tareapractica), request, "del")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos.%s" % ex})

            elif action == 'eliminarrecursoadmision':
                try:
                    idcodigoopcion = request.POST['idcodigoopcion']
                    if idcodigoopcion == '3':
                        test = TestSilaboSemanalAdmision.objects.get(pk=int(encrypt(request.POST['iddelactividad'])))
                        test.status = False
                        test.save(request)
                        silabosemananal = test.silabosemanal
                        if silabosemananal.examen:
                            silabosemananal.status = False
                            silabosemananal.save(request)
                        log(u'Eliminó test semanal admisión %s' % (test), request, "del")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos.%s" % ex})

            elif action == 'addbibliografiadocenteposgrado':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(request.POST['id']))
                    if 'lista_items4' in request.POST:
                        bibliapa = [x['bibliografiaexterna'] for x in json.loads(request.POST['lista_items4'])]
                        for apa in bibliapa:
                            if not BibliograbiaAPASilabo.objects.filter(silabosemanal_id=silabosemana.id,
                                                                        bibliografia=apa).exists():
                                bapa = BibliograbiaAPASilabo(silabosemanal_id=silabosemana.id, bibliografia=apa)
                                bapa.save(request)
                                log(u'Adicionó Bibliografia Apa: %s al sílabo de la materia %s:' % (
                                    bapa, bapa.silabosemanal.silabo.materia), request, "add")
                    return JsonResponse({"result": "ok"}, )
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addsemanaplanificacionvirtual':
                try:
                    subtema = ''
                    tema = ''
                    if 'lista_items1' in request.POST:
                        subtema = json.loads(request.POST['lista_items1'])
                    if 'lista_items4' in request.POST:
                        tema = json.loads(request.POST['lista_items4'])
                    listadobibliografiacomplementaria = LibroKohaProgramaAnaliticoAsignatura.objects.filter(id__in=[int(datos['idbibliografia']) for datos in json.loads(request.POST['lista_items2'])]) if request.POST['lista_items2'] else []
                    cadena = request.POST['id'].split("_")
                    silabo = Silabo.objects.get(pk=int(encrypt(cadena[0])))
                    form = SilaboSemanalForm(request.POST)
                    silabosemana = SilaboSemanal(silabo=silabo,
                                                 numsemana=int(encrypt(cadena[4])),
                                                 semana=int(encrypt(cadena[1])),
                                                 fechainiciosemana=cadena[2],
                                                 fechafinciosemana=cadena[3]
                                                 )
                    silabosemana.save(request)
                    for lista in listadobibliografiacomplementaria:
                        deta = DetalleSilaboSemanalBibliografiaDocente(silabosemanal_id=silabosemana.id,
                                                                       librokohaprogramaanaliticoasignatura_id=lista.id)
                        deta.save(request)
                        log(u'Adicionó nueva Bibliografia complentaria: %s' % deta.librokohaprogramaanaliticoasignatura, request, "add")
                    if 'lista_items3' in request.POST:
                        for basica in json.loads(request.POST['lista_items3']):
                            if not DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal_id=silabosemana.id, bibliografiaprogramaanaliticoasignatura_id=basica).exists():
                                detab = DetalleSilaboSemanalBibliografia(silabosemanal_id=silabosemana.id, bibliografiaprogramaanaliticoasignatura_id=basica)
                                detab.save(request)
                                log(u'Adicionó nueva Bibliografia Basica: %s' % detab.bibliografiaprogramaanaliticoasignatura.librokohaprogramaanaliticoasignatura, request, "add")
                    if subtema:
                        for subt in subtema:
                            ingresosubt = DetalleSilaboSemanalSubtema(silabosemanal_id=silabosemana.id,
                                                                      subtemaunidadresultadoprogramaanalitico_id=subt)
                            ingresosubt.save(request)
                    if tema:
                        for tem in tema:
                            ingresostemas = DetalleSilaboSemanalTema(silabosemanal_id=silabosemana.id,
                                                                     temaunidadresultadoprogramaanalitico_id=tem)
                            ingresostemas.save(request)
                    if 'lista_items7' in request.POST:
                        bibliapa = [x['bibliografiaexterna'] for x in json.loads(request.POST['lista_items7'])]
                        for apa in bibliapa:
                            if not BibliograbiaAPASilabo.objects.filter(silabosemanal_id=silabosemana.id, bibliografia=apa).exists():
                                bapa = BibliograbiaAPASilabo(silabosemanal_id=silabosemana.id, bibliografia=apa)
                                bapa.save(request)
                                log(u'Adicionó Bibliografia Apa: %s al sílabo de la materia %s:' % (bapa, bapa.silabosemanal.silabo.materia), request, "add")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addbibliografiavirtual':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(request.POST['id']))
                    if 'lista_items4' in request.POST:
                        bibliapa = [x['bibliografiaexterna'] for x in json.loads(request.POST['lista_items4'])]
                        for apa in bibliapa:
                            if not BibliograbiaAPASilabo.objects.filter(silabosemanal_id=silabosemana.id,
                                                                        bibliografia=apa).exists():
                                bapa = BibliograbiaAPASilabo(silabosemanal_id=silabosemana.id, bibliografia=apa)
                                bapa.save(request)
                                log(u'Adicionó Bibliografia Apa: %s al sílabo de la materia %s:' % (
                                    bapa, bapa.silabosemanal.silabo.materia), request, "add")
                    return JsonResponse({"result": "ok"}, )
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editbibliografiavirtual':
                try:
                    listadobibliografiacomplementaria = LibroKohaProgramaAnaliticoAsignatura.objects.filter(id__in=[int(datos['idbibliografia']) for datos in json.loads(request.POST['lista_items2'])]) if request.POST['lista_items2'] else []
                    silabosemana = SilaboSemanal.objects.get(pk=int(request.POST['id']))
                    for lista in listadobibliografiacomplementaria:
                        if not DetalleSilaboSemanalBibliografiaDocente.objects.filter(silabosemanal_id=silabosemana.id, status=True, librokohaprogramaanaliticoasignatura_id=lista.id).exists():
                            deta = DetalleSilaboSemanalBibliografiaDocente(silabosemanal_id=silabosemana.id,
                                                                           librokohaprogramaanaliticoasignatura_id=lista.id)
                            deta.save(request)
                            log(u'Adicionó nueva Bibliografia complentaria: %s al sílabo de la materia %s:' % (deta.librokohaprogramaanaliticoasignatura, deta.silabosemanal.silabo.materia), request, "add")
                    if silabosemana.detallesilabosemanalbibliografiadocente_set.all().exclude(librokohaprogramaanaliticoasignatura_id__in=listadobibliografiacomplementaria):
                        for bibli in silabosemana.detallesilabosemanalbibliografiadocente_set.all().exclude(librokohaprogramaanaliticoasignatura_id__in=listadobibliografiacomplementaria):
                            log(u'Eliminó Bibliografia complentaria: %s al sílabo de la materia %s:' % (bibli.librokohaprogramaanaliticoasignatura, bibli.silabosemanal.silabo.materia), request, "del")
                        silabosemana.detallesilabosemanalbibliografiadocente_set.all().exclude(librokohaprogramaanaliticoasignatura_id__in=listadobibliografiacomplementaria).update(status=False)
                    if 'lista_items3' in request.POST:
                        bibliografia = json.loads(request.POST['lista_items3'])
                        for basica in json.loads(request.POST['lista_items3']):
                            if not DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal_id=silabosemana.id, bibliografiaprogramaanaliticoasignatura_id=basica, status=True).exists():
                                detab = DetalleSilaboSemanalBibliografia(silabosemanal_id=silabosemana.id,
                                                                         bibliografiaprogramaanaliticoasignatura_id=basica)
                                detab.save(request)
                                log(u'Adicionó nueva Bibliografia Basica: %s al sílabo de la materia %s:' % (detab.bibliografiaprogramaanaliticoasignatura.librokohaprogramaanaliticoasignatura, detab.silabosemanal.silabo.materia), request, "add")
                        if silabosemana.detallesilabosemanalbibliografia_set.filter(status=True).exclude(bibliografiaprogramaanaliticoasignatura_id__in=bibliografia):
                            for bibli in silabosemana.detallesilabosemanalbibliografia_set.filter(status=True).exclude(bibliografiaprogramaanaliticoasignatura_id__in=bibliografia):
                                log(u'Eliminó Bibliografia Basica: %s al sílabo de la materia %s:' % (bibli.bibliografiaprogramaanaliticoasignatura.librokohaprogramaanaliticoasignatura, bibli.silabosemanal.silabo.materia), request, "del")
                            silabosemana.detallesilabosemanalbibliografia_set.filter(status=True).exclude(bibliografiaprogramaanaliticoasignatura_id__in=bibliografia).update(status=False)
                    if 'lista_items4' in request.POST:
                        bibliapa = [x['bibliografiaexterna'] for x in json.loads(request.POST['lista_items4'])]
                        for apa in bibliapa:
                            if not BibliograbiaAPASilabo.objects.filter(silabosemanal_id=silabosemana.id, bibliografia=apa).exists():
                                bapa = BibliograbiaAPASilabo(silabosemanal_id=silabosemana.id, bibliografia=apa)
                                bapa.save(request)
                                log(u'Adicionó Bibliografia Apa: %s al sílabo de la materia %s:' % (bapa, bapa.silabosemanal.silabo.materia), request, "add")
                        if silabosemana.bibliograbiaapasilabo_set.all().exclude(bibliografia__in=bibliapa):
                            for apa in silabosemana.bibliograbiaapasilabo_set.all().exclude(bibliografia__in=bibliapa):
                                log(u'Eliminó Bibliografia Apa: %s del  sílabo de la materia %s:' % (apa, apa.silabosemanal.silabo.materia), request, "del")
                            silabosemana.bibliograbiaapasilabo_set.all().exclude(bibliografia__in=bibliapa).update(status=False)
                    return JsonResponse({"result": "ok"}, )
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})
            # desde aqui con respecto aa recursos
            elif action == 'addtareavirtual':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfilerub = request.FILES['archivorubrica']
                            newfilesrubd = newfilerub._name
                            ext = newfilesrubd[newfilesrubd.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfilerub._name = generar_nombre("archivorubrica_", newfilerub._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    if 'archivotareasilabo' in request.FILES:
                        da = request.FILES['archivotareasilabo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivotareasilabo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileotro._name = generar_nombre("archivotareasilabo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, pdf"})
                    silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    bandera = 1
                    f = TareaSilaboSemanalForm(request.POST, request.FILES)
                    if silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id != 7:
                        if silabosemanal.silabo.materia.nivel.periodo.id >= 112:
                            f = TareaSilaboSemanalRubricaForm(request.POST, request.FILES)
                            bandera = 2

                    if f.is_valid():
                        modeloevaluativo = None
                        rubrica = None
                        if f.cleaned_data['calificar']:
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                            rubrica = f.cleaned_data['rubrica']
                        if bandera == 1:
                            tarea = TareaSilaboSemanal(detallemodelo=modeloevaluativo,
                                                       silabosemanal_id=int(encrypt(request.POST['id'])),
                                                       estado_id=1,
                                                       calificar=f.cleaned_data['calificar'],
                                                       nombre=f.cleaned_data['nombre'],
                                                       objetivo=f.cleaned_data['objetivo'],
                                                       instruccion=f.cleaned_data['instruccion'],
                                                       recomendacion=f.cleaned_data['recomendacion'],
                                                       rubricamoodle=rubrica,
                                                       fechadesde=f.cleaned_data['fechadesde'],
                                                       fechahasta=f.cleaned_data['fechahasta'],
                                                       actividad_id=int(encrypt(request.POST['codigoactividad'])),
                                                       word=f.cleaned_data['word'],
                                                       pdf=f.cleaned_data['pdf'],
                                                       excel=f.cleaned_data['excel'],
                                                       powerpoint=f.cleaned_data['powerpoint'],
                                                       todos=f.cleaned_data['todos'],
                                                       tiporecurso_id=5)
                            tarea.save(request)
                        else:
                            tarea = TareaSilaboSemanal(detallemodelo=modeloevaluativo,
                                                       silabosemanal_id=int(encrypt(request.POST['id'])),
                                                       estado_id=1,
                                                       calificar=f.cleaned_data['calificar'],
                                                       nombre=f.cleaned_data['nombre'],
                                                       objetivo=f.cleaned_data['objetivo'],
                                                       instruccion=f.cleaned_data['instruccion'],
                                                       recomendacion=f.cleaned_data['recomendacion'],
                                                       rubricamoodle=f.cleaned_data['rubrica'],
                                                       fechadesde=f.cleaned_data['fechadesde'],
                                                       fechahasta=f.cleaned_data['fechahasta'],
                                                       actividad_id=int(encrypt(request.POST['codigoactividad'])),
                                                       word=f.cleaned_data['word'],
                                                       pdf=f.cleaned_data['pdf'],
                                                       excel=f.cleaned_data['excel'],
                                                       powerpoint=f.cleaned_data['powerpoint'],
                                                       todos=f.cleaned_data['todos'],
                                                       tiporecurso_id=5)
                            tarea.save(request)
                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubrica_", newfile._name)
                            tarea.archivorubrica = newfile
                            tarea.save(request)
                        if 'archivotareasilabo' in request.FILES:
                            newfile = request.FILES['archivotareasilabo']
                            newfile._name = generar_nombre("archivotareasilabo_", newfile._name)
                            tarea.archivotareasilabo = newfile
                            tarea.save(request)
                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, tarea.actividad.id, tarea.silabosemanal.id)
                        return JsonResponse({'result': 'ok'})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'addtareavirtualvdos':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfilerub = request.FILES['archivorubrica']
                            newfilesrubd = newfilerub._name
                            ext = newfilesrubd[newfilesrubd.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfilerub._name = generar_nombre("archivorubrica_", newfilerub._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    if 'archivotareasilabo' in request.FILES:
                        da = request.FILES['archivotareasilabo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivotareasilabo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileotro._name = generar_nombre("archivotareasilabo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, pdf"})
                    silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    bandera = 1
                    f = TareaSilaboSemanalForm(request.POST, request.FILES)
                    if silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id != 7:
                        if silabosemanal.silabo.materia.nivel.periodo.id >= 112:
                            f = TareaSilaboSemanalRubricaForm(request.POST, request.FILES)
                            bandera = 2
                    if periodo.tipo.id == 3:
                        f = TareaSilaboSemanalRubricaForm(request.POST, request.FILES)
                        bandera = 2

                    if f.is_valid():
                        modeloevaluativo = None
                        rubrica = None
                        calificar = False
                        if silabosemanal.test_plansemanal(int(encrypt(request.POST['codigoactividad']))):
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                            rubrica = f.cleaned_data['rubrica']
                            if modeloevaluativo:
                                calificar = True
                        if f.cleaned_data['calificar']:
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                            rubrica = f.cleaned_data['rubrica']
                            calificar = True
                        if bandera == 1:
                            tarea = TareaSilaboSemanal(detallemodelo=modeloevaluativo,
                                                       silabosemanal_id=int(encrypt(request.POST['id'])),
                                                       estado_id=1,
                                                       calificar=calificar,
                                                       nombre=f.cleaned_data['nombre'],
                                                       objetivo=f.cleaned_data['objetivo'],
                                                       instruccion=f.cleaned_data['instruccion'],
                                                       recomendacion=f.cleaned_data['recomendacion'],
                                                       rubricamoodle=rubrica,
                                                       fechadesde=f.cleaned_data['fechadesde'],
                                                       fechahasta=f.cleaned_data['fechahasta'],
                                                       actividad_id=int(encrypt(request.POST['codigoactividad'])),
                                                       word=f.cleaned_data['word'],
                                                       pdf=f.cleaned_data['pdf'],
                                                       excel=f.cleaned_data['excel'],
                                                       powerpoint=f.cleaned_data['powerpoint'],
                                                       todos=f.cleaned_data['todos'],
                                                       tiporecurso_id=5
                                                       )
                            tarea.save(request)
                        else:
                            tarea = TareaSilaboSemanal(detallemodelo=modeloevaluativo,
                                                       silabosemanal_id=int(encrypt(request.POST['id'])),
                                                       estado_id=1,
                                                       calificar=calificar,
                                                       nombre=f.cleaned_data['nombre'],
                                                       objetivo=f.cleaned_data['objetivo'],
                                                       instruccion=f.cleaned_data['instruccion'],
                                                       recomendacion=f.cleaned_data['recomendacion'],
                                                       rubricamoodle=f.cleaned_data['rubrica'],
                                                       fechadesde=f.cleaned_data['fechadesde'],
                                                       fechahasta=f.cleaned_data['fechahasta'],
                                                       actividad_id=int(encrypt(request.POST['codigoactividad'])),
                                                       word=f.cleaned_data['word'],
                                                       pdf=f.cleaned_data['pdf'],
                                                       excel=f.cleaned_data['excel'],
                                                       powerpoint=f.cleaned_data['powerpoint'],
                                                       todos=f.cleaned_data['todos'],
                                                       tiporecurso_id=5)
                            tarea.save(request)
                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubrica_", newfile._name)
                            tarea.archivorubrica = newfile
                            tarea.save(request)
                        if 'archivotareasilabo' in request.FILES:
                            newfile = request.FILES['archivotareasilabo']
                            newfile._name = generar_nombre("archivotareasilabo_", newfile._name)
                            tarea.archivotareasilabo = newfile
                            tarea.save(request)
                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, tarea.actividad.id, tarea.silabosemanal.id)
                        # ORDENA LA ACTIVIDAD
                        tarea.silabosemanal.silabo.update_ordenaactividad(tarea.actividad.id)
                        # return JsonResponse({'result': 'ok'})

                    if CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio_2()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]

                        send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                                       {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                                        't': miinstitucion()}, correo, [], cuenta=cuenta)
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'edittareavirtual':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfilerub = request.FILES['archivorubrica']
                            newfilesrubd = newfilerub._name
                            ext = newfilesrubd[newfilesrubd.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfilerub._name = generar_nombre("archivorubrica_", newfilerub._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    if 'archivotareasilabo' in request.FILES:
                        da = request.FILES['archivotareasilabo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivotareasilabo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileotro._name = generar_nombre("archivotareasilabo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    tarea = TareaSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    form = TareaSilaboSemanalForm(request.POST, request.FILES)
                    bandera = 1
                    if tarea.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id != 7:
                        if tarea.silabosemanal.silabo.materia.nivel.periodo.id >= 112:
                            form = TareaSilaboSemanalRubricaForm(request.POST, request.FILES)
                            bandera = 2
                    if form.is_valid():
                        if 'calificar' in form.cleaned_data:
                            if form.cleaned_data['calificar']:
                                if form.cleaned_data['modeloevaluativo']:
                                    tarea.detallemodelo = form.cleaned_data['modeloevaluativo']
                            else:
                                tarea.detallemodelo = None
                        tarea.calificar = form.cleaned_data['calificar']
                        if form.cleaned_data['nombre']:
                            tarea.nombre = form.cleaned_data['nombre']
                        tarea.objetivo = form.cleaned_data['objetivo']
                        tarea.instruccion = form.cleaned_data['instruccion']
                        tarea.recomendacion = form.cleaned_data['recomendacion']
                        if bandera == 1:
                            if form.cleaned_data['rubrica']:
                                tarea.rubrica = form.cleaned_data['rubrica']
                        else:
                            if form.cleaned_data['calificar']:
                                if form.cleaned_data['rubrica']:
                                    tarea.rubricamoodle = form.cleaned_data['rubrica']
                                tarea.rubrica = ''
                            else:
                                tarea.rubricamoodle = None
                                tarea.rubrica = ''
                        tarea.fechadesde = form.cleaned_data['fechadesde']
                        tarea.fechahasta = form.cleaned_data['fechahasta']
                        tarea.word = form.cleaned_data['word']
                        tarea.pdf = form.cleaned_data['pdf']
                        tarea.excel = form.cleaned_data['excel']
                        tarea.powerpoint = form.cleaned_data['powerpoint']
                        tarea.todos = form.cleaned_data['todos']
                        if tarea.estado_id == 0:
                            tarea.estado_id = 1
                        tarea.save(request)
                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubrica_", newfile._name)
                            tarea.archivorubrica = newfile
                            tarea.save(request)
                        if 'archivotareasilabo' in request.FILES:
                            newfile = request.FILES['archivotareasilabo']
                            newfile._name = generar_nombre("archivotareasilabo_", newfile._name)
                            tarea.archivotareasilabo = newfile
                            tarea.save(request)
                        if tarea.estado_id == 4:
                            from Moodle_Funciones import CrearTareasMoodle
                            value, msg = CrearTareasMoodle(tarea.id, persona)
                            if not value:
                                raise NameError(msg)
                            materia = tarea.silabosemanal.silabo.materia
                            materia.actualizarhtml = True
                            materia.save()
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s " % ex})

            elif action == 'edittareavirtualvdos':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfilerub = request.FILES['archivorubrica']
                            newfilesrubd = newfilerub._name
                            ext = newfilesrubd[newfilesrubd.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfilerub._name = generar_nombre("archivorubrica_", newfilerub._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    if 'archivotareasilabo' in request.FILES:
                        da = request.FILES['archivotareasilabo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivotareasilabo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileotro._name = generar_nombre("archivotareasilabo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    tarea = TareaSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = tarea.silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    form = TareaSilaboSemanalForm(request.POST, request.FILES)
                    bandera = 1
                    if tarea.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id != 7:
                        if tarea.silabosemanal.silabo.materia.nivel.periodo.id >= 112:
                            form = TareaSilaboSemanalRubricaForm(request.POST, request.FILES)
                            bandera = 2
                    if form.is_valid():
                        modeloevaluativo = None
                        calificar = False
                        if tarea.silabosemanal.test_plansemanal(tarea.actividad.id):
                            tarea.detallemodelo = form.cleaned_data['modeloevaluativo']
                            calificar = True
                        else:
                            if 'calificar' in form.cleaned_data:
                                if form.cleaned_data['calificar']:
                                    if form.cleaned_data['modeloevaluativo']:
                                        calificar = True
                                        tarea.detallemodelo = form.cleaned_data['modeloevaluativo']
                                else:
                                    tarea.detallemodelo = None
                        tarea.calificar = calificar
                        if form.cleaned_data['nombre']:
                            tarea.nombre = form.cleaned_data['nombre']
                        tarea.objetivo = form.cleaned_data['objetivo']
                        tarea.instruccion = form.cleaned_data['instruccion']
                        tarea.recomendacion = form.cleaned_data['recomendacion']
                        if bandera == 1:
                            if form.cleaned_data['rubrica']:
                                tarea.rubrica = form.cleaned_data['rubrica']
                        else:
                            if tarea.silabosemanal.test_plansemanal(tarea.actividad.id):
                                tarea.rubricamoodle = form.cleaned_data['rubrica']
                            else:
                                if form.cleaned_data['calificar']:
                                    if form.cleaned_data['rubrica']:
                                        tarea.rubricamoodle = form.cleaned_data['rubrica']
                                    tarea.rubrica = ''
                                else:
                                    tarea.rubricamoodle = None
                                    tarea.rubrica = ''
                        tarea.fechadesde = form.cleaned_data['fechadesde']
                        tarea.fechahasta = form.cleaned_data['fechahasta']
                        tarea.word = form.cleaned_data['word']
                        tarea.pdf = form.cleaned_data['pdf']
                        tarea.excel = form.cleaned_data['excel']
                        tarea.powerpoint = form.cleaned_data['powerpoint']
                        tarea.todos = form.cleaned_data['todos']
                        if tarea.estado_id == 0:
                            tarea.estado_id = 1
                        tarea.save(request)
                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubrica_", newfile._name)
                            tarea.archivorubrica = newfile
                            tarea.save(request)
                        if 'archivotareasilabo' in request.FILES:
                            newfile = request.FILES['archivotareasilabo']
                            newfile._name = generar_nombre("archivotareasilabo_", newfile._name)
                            tarea.archivotareasilabo = newfile
                            tarea.save(request)
                        if tarea.estado_id == 4:
                            from Moodle_Funciones import CrearTareasMoodle, CrearTareasTEMoodle
                            if tarea.actividad.categoriamoodle == 3:
                                value, msg = CrearTareasMoodle(tarea.id, persona)
                                if not value:
                                    raise NameError(msg)
                            if tarea.actividad.categoriamoodle == 4:
                                value, msg = CrearTareasTEMoodle(tarea.id, persona)
                                if not value:
                                    raise NameError(msg)
                            materia = tarea.silabosemanal.silabo.materia
                            materia.actualizarhtml = True
                            materia.save()
                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, tarea.actividad.id, tarea.silabosemanal.id)

                        # return JsonResponse({"result": "ok"})

                    if CoordinadorCarrera.objects.filter(status=True, carrera=tarea.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=tarea.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s " % ex})

            elif action == 'addtareapracticavirtual':
                try:
                    if 'archivotareapracticasilabo' in request.FILES:
                        da = request.FILES['archivotareapracticasilabo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivotareapracticasilabo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext.lower() == '.pdf':
                                newfileotro._name = generar_nombre("archivotareapracticasilabo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de tarea práctica solo en .pdf."})
                    f = TareaPracticaSilaboSemanalForm(request.POST, request.FILES)
                    if f.is_valid():
                        modeloevaluativo = None
                        if f.cleaned_data['calificar']:
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                        tarea = TareaPracticaSilaboSemanal(detallemodelo=modeloevaluativo,
                                                           silabosemanal_id=int(encrypt(request.POST['id'])),
                                                           estado_id=1,
                                                           rubricamoodle=f.cleaned_data['rubricamoodle'],
                                                           calificar=f.cleaned_data['calificar'],
                                                           nombre=f.cleaned_data['nombre'],
                                                           fechadesde=f.cleaned_data['fechadesde'],
                                                           fechahasta=f.cleaned_data['fechahasta'],
                                                           word=f.cleaned_data['word'],
                                                           pdf=f.cleaned_data['pdf'],
                                                           excel=f.cleaned_data['excel'],
                                                           todos=f.cleaned_data['todos'],
                                                           detalle=f.cleaned_data['detalle'],
                                                           powerpoint=f.cleaned_data['powerpoint'],
                                                           tiporecurso_id=10
                                                           )
                        tarea.save(request)
                        if 'archivotareapracticasilabo' in request.FILES:
                            newfile = request.FILES['archivotareapracticasilabo']
                            newfile._name = generar_nombre("archivotareapracticasilabo_", newfile._name)
                            tarea.archivotareapracticasilabo = newfile
                            tarea.save(request)

                        return JsonResponse({'result': 'ok'})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'edittareapracticavirtual':
                try:
                    if 'archivotareapracticasilabo' in request.FILES:
                        da = request.FILES['archivotareapracticasilabo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivotareapracticasilabo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext.lower() == '.pdf':
                                newfileotro._name = generar_nombre("archivotareapracticasilabo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de tarea práctica solo en .pdf."})
                    tarea = TareaPracticaSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    form = TareaPracticaSilaboSemanalForm(request.POST, request.FILES)
                    if form.is_valid():
                        if form.cleaned_data['calificar']:
                            if form.cleaned_data['modeloevaluativo']:
                                tarea.detallemodelo = form.cleaned_data['modeloevaluativo']
                        else:
                            tarea.detallemodelo = None

                        if form.cleaned_data['calificar']:
                            if form.cleaned_data['rubricamoodle']:
                                tarea.rubricamoodle = form.cleaned_data['rubricamoodle']
                            tarea.rubrica = ''
                            # tarea.archivorubrica = None
                        else:
                            tarea.rubricamoodle = None
                            tarea.rubrica = ''
                            # tarea.archivorubrica = None
                        tarea.calificar = form.cleaned_data['calificar']
                        if form.cleaned_data['nombre']:
                            tarea.nombre = form.cleaned_data['nombre']
                        tarea.fechadesde = form.cleaned_data['fechadesde']
                        tarea.fechahasta = form.cleaned_data['fechahasta']
                        tarea.word = form.cleaned_data['word']
                        tarea.pdf = form.cleaned_data['pdf']
                        tarea.excel = form.cleaned_data['excel']
                        tarea.todos = form.cleaned_data['todos']
                        tarea.detalle = form.cleaned_data['detalle']
                        tarea.powerpoint = form.cleaned_data['powerpoint']
                        # tarea.rubricamoodle = form.cleaned_data['rubricamoodle']
                        if tarea.estado_id == 0:
                            tarea.estado_id = 1
                        tarea.save(request)
                        if 'archivotareapracticasilabo' in request.FILES:
                            newfile = request.FILES['archivotareapracticasilabo']
                            newfile._name = generar_nombre("archivotareapracticasilabo_", newfile._name)
                            tarea.archivotareapracticasilabo = newfile
                            tarea.save(request)
                        if tarea.estado_id == 4:
                            from Moodle_Funciones import CrearPracticasTareasMoodle
                            value, msg = CrearPracticasTareasMoodle(tarea.id, persona)
                            if not value:
                                raise NameError(msg)
                            materia = tarea.silabosemanal.silabo.materia
                            materia.actualizarhtml = True
                            materia.save()
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s" % ex})

            elif action == 'edittareapracticavirtualvdos':
                try:
                    if 'archivotareapracticasilabo' in request.FILES:
                        da = request.FILES['archivotareapracticasilabo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivotareapracticasilabo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext.lower() == '.pdf':
                                newfileotro._name = generar_nombre("archivotareapracticasilabo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de tarea práctica solo en .pdf."})
                    tarea = TareaPracticaSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = tarea.silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    form = TareaPracticaSilaboSemanalForm(request.POST, request.FILES)
                    if form.is_valid():
                        if not (form.cleaned_data['fechadesde'] and form.cleaned_data['fechahasta']):
                            raise NameError(f"Por favor ingrese la fecha de inicio y fecha fin de la actividad")

                        modeloevaluativo, calificar = None, False
                        if tarea.silabosemanal.test_plansemanal(4):
                            tarea.detallemodelo = form.cleaned_data['modeloevaluativo']
                            tarea.rubricamoodle = form.cleaned_data['rubricamoodle']
                            calificar = True
                        else:
                            if form.cleaned_data['calificar']:
                                if form.cleaned_data['modeloevaluativo']:
                                    tarea.detallemodelo = form.cleaned_data['modeloevaluativo']
                                if form.cleaned_data['rubricamoodle']:
                                    tarea.rubricamoodle = form.cleaned_data['rubricamoodle']
                                calificar = True
                            else:
                                tarea.rubricamoodle = None
                                tarea.detallemodelo = None

                        # if form.cleaned_data['calificar']:
                        #     if form.cleaned_data['rubricamoodle']:
                        #         tarea.rubricamoodle = form.cleaned_data['rubricamoodle']
                        #     tarea.rubrica = ''
                        #     # tarea.archivorubrica = None
                        # else:
                        #     tarea.rubricamoodle = None
                        #     tarea.rubrica = ''
                        # tarea.archivorubrica = None
                        tarea.calificar = calificar
                        if form.cleaned_data['nombre']:
                            tarea.nombre = form.cleaned_data['nombre']
                        tarea.fechadesde = form.cleaned_data['fechadesde']
                        tarea.fechahasta = form.cleaned_data['fechahasta']
                        tarea.word = form.cleaned_data['word']
                        tarea.pdf = form.cleaned_data['pdf']
                        tarea.excel = form.cleaned_data['excel']
                        tarea.todos = form.cleaned_data['todos']
                        tarea.detalle = form.cleaned_data['detalle']
                        tarea.powerpoint = form.cleaned_data['powerpoint']
                        # tarea.rubricamoodle = form.cleaned_data['rubricamoodle']
                        if tarea.estado_id == 0:
                            tarea.estado_id = 1
                        # if tarea.fechadesde and tarea.fechahasta:
                        #     tarea.estado_id = 2

                        tarea.save(request)
                        if 'archivotareapracticasilabo' in request.FILES:
                            newfile = request.FILES['archivotareapracticasilabo']
                            newfile._name = generar_nombre("archivotareapracticasilabo_", newfile._name)
                            tarea.archivotareapracticasilabo = newfile
                            tarea.save(request)
                        if tarea.estado_id == 4:
                            from Moodle_Funciones import CrearPracticasTareasMoodle
                            value, msg = CrearPracticasTareasMoodle(tarea.id, persona)
                            if not value:
                                raise NameError(msg)
                            materia = tarea.silabosemanal.silabo.materia
                            materia.actualizarhtml = True
                            materia.save()
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, 4, tarea.silabosemanal.id)
                        # return JsonResponse({"result": "ok"})
                        if CoordinadorCarrera.objects.filter(status=True, carrera=tarea.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                            coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=tarea.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                            correo = coordinadordecarrera.persona.lista_emails_envio()
                            # nombredocente = coordinadordecarrera.persona
                            # estado = 'APROBADO'
                            cuenta = CUENTAS_CORREOS[3][1]
                            # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                            #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                            #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        # else:
                        #     raise NameError('No tiene configurado un director de carrera en el periodo actual')
                    else:
                        raise NameError('Error')
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s " % ex})


            elif action == 'addtareapracticavirtualvdos':
                try:
                    silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    if 'archivotareapracticasilabo' in request.FILES:
                        da = request.FILES['archivotareapracticasilabo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivotareapracticasilabo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext.lower() == '.pdf':
                                newfileotro._name = generar_nombre("archivotareapracticasilabo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de tarea práctica solo en .pdf."})
                    f = TareaPracticaSilaboSemanalForm(request.POST, request.FILES)
                    if f.is_valid():
                        if not (f.cleaned_data['fechadesde'] and f.cleaned_data['fechahasta']):
                            raise NameError(f"Por favor ingrese la fecha de inicio y fecha fin de la actividad")
                        modeloevaluativo = None
                        rubricamoodle = None
                        calificar = False
                        silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        if silabosemanal.test_plansemanal(4):
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                            rubricamoodle = f.cleaned_data['rubricamoodle']
                            calificar = True
                        if f.cleaned_data['calificar']:
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                            rubricamoodle = f.cleaned_data['rubricamoodle']
                            calificar = True
                        tarea = TareaPracticaSilaboSemanal(detallemodelo=modeloevaluativo,
                                                           silabosemanal_id=int(encrypt(request.POST['id'])),
                                                           estado_id=1,
                                                           rubricamoodle=rubricamoodle,
                                                           calificar=calificar,
                                                           nombre=f.cleaned_data['nombre'],
                                                           fechadesde=f.cleaned_data['fechadesde'],
                                                           fechahasta=f.cleaned_data['fechahasta'],
                                                           word=f.cleaned_data['word'],
                                                           pdf=f.cleaned_data['pdf'],
                                                           excel=f.cleaned_data['excel'],
                                                           todos=f.cleaned_data['todos'],
                                                           detalle=f.cleaned_data['detalle'],
                                                           powerpoint=f.cleaned_data['powerpoint'],
                                                           tiporecurso_id=10)
                        tarea.save(request)
                        if 'archivotareapracticasilabo' in request.FILES:
                            newfile = request.FILES['archivotareapracticasilabo']
                            newfile._name = generar_nombre("archivotareapracticasilabo_", newfile._name)
                            tarea.archivotareapracticasilabo = newfile
                            tarea.save(request)
                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, 4, tarea.silabosemanal.id)
                        # ORDENA LA ACTIVIDAD
                        tarea.silabosemanal.silabo.update_ordenaactividad(4)
                        # return JsonResponse({'result': 'ok'})

                    if CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'addforovirtual':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfilerub = request.FILES['archivorubrica']
                            newfilesrubd = newfilerub._name
                            ext = newfilesrubd[newfilesrubd.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfilerub._name = generar_nombre("archivorubrica_", newfilerub._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    if 'archivoforo' in request.FILES:
                        da = request.FILES['archivoforo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivoforo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileotro._name = generar_nombre("archivoforo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo foro solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    f = ForoSilaboSemanalForm(request.POST, request.FILES)
                    if f.is_valid():
                        modeloevaluativo = None
                        tipoconsolidacion = 3
                        if f.cleaned_data['calificar']:
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                            tipoconsolidacion = f.cleaned_data['tipoconsolidacion']
                        tarea = ForoSilaboSemanal(detallemodelo=modeloevaluativo,
                                                  silabosemanal_id=int(encrypt(request.POST['id'])),
                                                  calificar=f.cleaned_data['calificar'],
                                                  tipoforo=2,
                                                  tipoconsolidacion=tipoconsolidacion,
                                                  estado_id=1,
                                                  nombre=f.cleaned_data['nombre'],
                                                  objetivo=f.cleaned_data['objetivo'],
                                                  instruccion=f.cleaned_data['instruccion'],
                                                  recomendacion=f.cleaned_data['recomendacion'],
                                                  rubrica=f.cleaned_data['rubrica'],
                                                  fechadesde=f.cleaned_data['fechadesde'],
                                                  fechahasta=f.cleaned_data['fechahasta'],
                                                  tiporecurso_id=9)
                        tarea.save(request)
                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubrica_", newfile._name)
                            tarea.archivorubrica = newfile
                            tarea.save(request)
                        if 'archivoforo' in request.FILES:
                            newfile = request.FILES['archivoforo']
                            newfile._name = generar_nombre("archivoforo_", newfile._name)
                            tarea.archivoforo = newfile
                            tarea.save(request)
                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, 6, tarea.silabosemanal.id)
                        return JsonResponse({'result': 'ok'})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'addforovirtualvdos':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfilerub = request.FILES['archivorubrica']
                            newfilesrubd = newfilerub._name
                            ext = newfilesrubd[newfilesrubd.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfilerub._name = generar_nombre("archivorubrica_", newfilerub._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    if 'archivoforo' in request.FILES:
                        da = request.FILES['archivoforo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivoforo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileotro._name = generar_nombre("archivoforo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo foro solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    f = ForoSilaboSemanalForm(request.POST, request.FILES)
                    if f.is_valid():
                        silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        materia = silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                        modeloevaluativo = None
                        tipoconsolidacion = 3
                        calificar = False
                        if f.cleaned_data['calificar']:
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                            tipoconsolidacion = f.cleaned_data['tipoconsolidacion']
                            calificar = True
                        if silabosemanal.test_plansemanal(6):
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                            tipoconsolidacion = f.cleaned_data['tipoconsolidacion']
                            calificar = True
                        tarea = ForoSilaboSemanal(detallemodelo=modeloevaluativo,
                                                  silabosemanal_id=int(encrypt(request.POST['id'])),
                                                  calificar=calificar,
                                                  tipoforo=2,
                                                  tipoconsolidacion=tipoconsolidacion,
                                                  estado_id=1,
                                                  nombre=f.cleaned_data['nombre'],
                                                  objetivo=f.cleaned_data['objetivo'],
                                                  instruccion=f.cleaned_data['instruccion'],
                                                  recomendacion=f.cleaned_data['recomendacion'],
                                                  rubrica=f.cleaned_data['rubrica'],
                                                  fechadesde=f.cleaned_data['fechadesde'],
                                                  fechahasta=f.cleaned_data['fechahasta'],
                                                  tiporecurso_id=9)
                        tarea.save(request)

                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubrica_", newfile._name)
                            tarea.archivorubrica = newfile
                            tarea.save(request)
                        if 'archivoforo' in request.FILES:
                            newfile = request.FILES['archivoforo']
                            newfile._name = generar_nombre("archivoforo_", newfile._name)
                            tarea.archivoforo = newfile
                            tarea.save(request)
                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, 6, tarea.silabosemanal.id)
                        # ORDENA LA ACTIVIDAD
                        tarea.silabosemanal.silabo.update_ordenaactividad(6)
                        # return JsonResponse({'result': 'ok'})
                    if CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        return JsonResponse({"result": "ok"})

                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'editforovirtual':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfilerub = request.FILES['archivorubrica']
                            newfilesrubd = newfilerub._name
                            ext = newfilesrubd[newfilesrubd.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfilerub._name = generar_nombre("archivorubrica_", newfilerub._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    if 'archivoforo' in request.FILES:
                        da = request.FILES['archivoforo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivoforo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileotro._name = generar_nombre("archivoforo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    foro = ForoSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    form = ForoSilaboSemanalForm(request.POST, request.FILES)
                    if form.is_valid():
                        if form.cleaned_data['calificar']:
                            if form.cleaned_data['modeloevaluativo']:
                                foro.detallemodelo = form.cleaned_data['modeloevaluativo']
                            if form.cleaned_data['tipoconsolidacion']:
                                foro.tipoconsolidacion = form.cleaned_data['tipoconsolidacion']
                        else:
                            foro.detallemodelo = None
                            foro.tipoconsolidacion = 3
                        foro.calificar = form.cleaned_data['calificar']
                        # foro.tipoforo = form.cleaned_data['tipoforo']
                        if form.cleaned_data['nombre']:
                            foro.nombre = form.cleaned_data['nombre']
                        foro.objetivo = form.cleaned_data['objetivo']
                        foro.instruccion = form.cleaned_data['instruccion']
                        foro.recomendacion = form.cleaned_data['recomendacion']
                        foro.rubrica = form.cleaned_data['rubrica']
                        foro.fechadesde = form.cleaned_data['fechadesde']
                        foro.fechahasta = form.cleaned_data['fechahasta']
                        if foro.idforomoodle == 0:
                            foro.estado_id = 1
                        foro.save(request)
                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubrica_", newfile._name)
                            foro.archivorubrica = newfile
                            foro.save(request)
                        if 'archivoforo' in request.FILES:
                            newfile = request.FILES['archivoforo']
                            newfile._name = generar_nombre("archivoforo_", newfile._name)
                            foro.archivoforo = newfile
                            foro.save(request)
                        if foro.estado_id == 4:
                            from Moodle_Funciones import CrearForosMoodle
                            value, msg = CrearForosMoodle(foro.id, persona)
                            if not value:
                                raise NameError(msg)
                            materia = foro.silabosemanal.silabo.materia
                            materia.actualizarhtml = True
                            materia.save()
                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, 6, foro.silabosemanal.id)
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s " % ex})

            elif action == 'editforovirtualvdos':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfilerub = request.FILES['archivorubrica']
                            newfilesrubd = newfilerub._name
                            ext = newfilesrubd[newfilesrubd.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfilerub._name = generar_nombre("archivorubrica_", newfilerub._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    if 'archivoforo' in request.FILES:
                        da = request.FILES['archivoforo']
                        if da.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileotro = request.FILES['archivoforo']
                            newfilesotrod = newfileotro._name
                            ext = newfilesotrod[newfilesotrod.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileotro._name = generar_nombre("archivoforo_", newfileotro._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de archivo rubrica solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    foro = ForoSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia_nombre = foro.silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    form = ForoSilaboSemanalForm(request.POST, request.FILES)
                    if form.is_valid():
                        calificar = False
                        detallemodelo = None
                        tipoconsolidacion = 3
                        if form.cleaned_data['calificar']:
                            if form.cleaned_data['modeloevaluativo']:
                                detallemodelo = form.cleaned_data['modeloevaluativo']
                            if form.cleaned_data['tipoconsolidacion']:
                                tipoconsolidacion = form.cleaned_data['tipoconsolidacion']
                            calificar = True
                        else:
                            if foro.silabosemanal.test_plansemanal(6):
                                detallemodelo = form.cleaned_data['modeloevaluativo']
                                tipoconsolidacion = form.cleaned_data['tipoconsolidacion']
                                calificar = True
                        foro.detallemodelo = detallemodelo
                        foro.tipoconsolidacion = tipoconsolidacion
                        foro.calificar = calificar
                        # foro.tipoforo = form.cleaned_data['tipoforo']
                        if form.cleaned_data['nombre']:
                            foro.nombre = form.cleaned_data['nombre']
                        foro.objetivo = form.cleaned_data['objetivo']
                        foro.instruccion = form.cleaned_data['instruccion']
                        foro.recomendacion = form.cleaned_data['recomendacion']
                        foro.rubrica = form.cleaned_data['rubrica']
                        foro.fechadesde = form.cleaned_data['fechadesde']
                        foro.fechahasta = form.cleaned_data['fechahasta']
                        if foro.idforomoodle == 0:
                            foro.estado_id = 1
                        foro.save(request)
                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubrica_", newfile._name)
                            foro.archivorubrica = newfile
                            foro.save(request)
                        if 'archivoforo' in request.FILES:
                            newfile = request.FILES['archivoforo']
                            newfile._name = generar_nombre("archivoforo_", newfile._name)
                            foro.archivoforo = newfile
                            foro.save(request)
                        if foro.estado_id == 4:
                            from Moodle_Funciones import CrearForosMoodle
                            value, msg = CrearForosMoodle(foro.id, persona)
                            if not value:
                                raise NameError(msg)
                            materia = foro.silabosemanal.silabo.materia
                            materia.actualizarhtml = True
                            materia.save()
                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, 6, foro.silabosemanal.id)
                        # return JsonResponse({"result": "ok"})
                    if CoordinadorCarrera.objects.filter(status=True, carrera=foro.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=foro.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia_nombre,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        return JsonResponse({"result": "ok"})

                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s" % ex})

            elif action == 'addtestvirtual':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileguia = request.FILES['archivorubrica']
                            newfilesguiad = newfileguia._name
                            ext = newfilesguiad[newfilesguiad.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileguia._name = generar_nombre("archivorubricatest_", newfileguia._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de guía del estudiante solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    f = TestSilaboSemanalForm(request.POST)
                    if f.is_valid():
                        modeloevaluativo = None
                        if f.cleaned_data['calificar']:
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                        testsilabo = TestSilaboSemanal(detallemodelo=modeloevaluativo,
                                                       silabosemanal_id=int(encrypt(request.POST['id'])),
                                                       estado_id=1,
                                                       calificar=f.cleaned_data['calificar'],
                                                       nombretest=f.cleaned_data['nombretest'],
                                                       instruccion=f.cleaned_data['instruccion'],
                                                       recomendacion=f.cleaned_data['recomendacion'],
                                                       fechadesde=f.cleaned_data['fechadesde'],
                                                       horadesde=f.cleaned_data['horadesde'],
                                                       fechahasta=f.cleaned_data['fechahasta'],
                                                       horahasta=f.cleaned_data['horahasta'],
                                                       vecesintento=f.cleaned_data['vecesintento'],
                                                       navegacion=f.cleaned_data['navegacion'],
                                                       tiempoduracion=f.cleaned_data['tiempoduracion'],
                                                       tiporecurso_id=11)
                        testsilabo.save(request)
                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubricatest_", newfile._name)
                            testsilabo.archivorubrica = newfile
                            testsilabo.save(request)
                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, 1, testsilabo.silabosemanal.id)
                        return JsonResponse({'result': 'ok'})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'addtestvirtualvdos':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileguia = request.FILES['archivorubrica']
                            newfilesguiad = newfileguia._name
                            ext = newfilesguiad[newfilesguiad.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileguia._name = generar_nombre("archivorubricatest_", newfileguia._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de guía del estudiante solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    f = TestSilaboSemanalForm(request.POST)
                    if f.is_valid():
                        modeloevaluativo = None
                        calificar = False
                        silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                        materia = silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                        if silabosemanal.test_plansemanal(1):
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                            calificar = True
                        if f.cleaned_data['calificar']:
                            modeloevaluativo = f.cleaned_data['modeloevaluativo']
                            calificar = True
                        testsilabo = TestSilaboSemanal(detallemodelo=modeloevaluativo,
                                                       silabosemanal_id=int(encrypt(request.POST['id'])),
                                                       estado_id=1,
                                                       calificar=calificar,
                                                       nombretest=f.cleaned_data['nombretest'],
                                                       instruccion=f.cleaned_data['instruccion'],
                                                       recomendacion=f.cleaned_data['recomendacion'],
                                                       fechadesde=f.cleaned_data['fechadesde'],
                                                       horadesde=f.cleaned_data['horadesde'],
                                                       fechahasta=f.cleaned_data['fechahasta'],
                                                       horahasta=f.cleaned_data['horahasta'],
                                                       vecesintento=1,
                                                       navegacion=f.cleaned_data['navegacion'],
                                                       tiempoduracion=f.cleaned_data['tiempoduracion'],
                                                       tiporecurso_id=11)
                        testsilabo.save(request)
                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubricatest_", newfile._name)
                            testsilabo.archivorubrica = newfile
                            testsilabo.save(request)

                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, 1, testsilabo.silabosemanal.id)
                        # ORDENA LA ACTIVIDAD
                        testsilabo.silabosemanal.silabo.update_ordenaactividad(1)
                        # return JsonResponse({'result': 'ok'})
                    if CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        return JsonResponse({"result": "ok"})

                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'addtestvirtualadmision':
                try:
                    f = TestSilaboSemanalAdmForm(request.POST)
                    if f.is_valid():
                        calificar = True
                        if f.cleaned_data['modeloevaluativo'].password and not f.cleaned_data['password']:
                            raise NameError(u"Debe ingresar una clave")
                        testsilabo = TestSilaboSemanalAdmision(silabosemanal_id=int(encrypt(request.POST['id'])),
                                                               detallemodelo=f.cleaned_data['modeloevaluativo'],
                                                               estado_id=2,
                                                               horainicio=f.cleaned_data['horadesde'],
                                                               fechahasta=f.cleaned_data['fechahasta'],
                                                               horafin=f.cleaned_data['horahasta'],
                                                               vecesintento=f.cleaned_data['vecesintento'],
                                                               navegacion=f.cleaned_data['navegacion'],
                                                               esquemapregunta=f.cleaned_data['esquemapregunta'],
                                                               tiempoduracion=f.cleaned_data['tiempoduracion'],
                                                               calificar=calificar,
                                                               titulo=f.cleaned_data['titulo'],
                                                               descripcion=f.cleaned_data['descripcion'],
                                                               # url1=f.cleaned_data['url1'],
                                                               # url2=f.cleaned_data['url2'],
                                                               fecha=f.cleaned_data['fechadesde'],
                                                               password=f.cleaned_data['password']
                                                               )
                        testsilabo.save(request)
                        materia = testsilabo.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        return JsonResponse({'result': 'ok'})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    import sys
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error %s - %s' % (ex, sys.exc_info()[-1].tb_lineno)})

            elif action == 'edittestvirtual':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileguia = request.FILES['archivorubrica']
                            newfilesguiad = newfileguia._name
                            ext = newfilesguiad[newfilesguiad.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileguia._name = generar_nombre("archivorubricatest_", newfileguia._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de guía del estudiante solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    testsilabo = TestSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    form = TestSilaboSemanalForm(request.POST)
                    if form.is_valid():
                        if form.cleaned_data['calificar']:
                            if form.cleaned_data['modeloevaluativo']:
                                testsilabo.detallemodelo = form.cleaned_data['modeloevaluativo']
                        else:
                            testsilabo.detallemodelo = None
                        testsilabo.calificar = form.cleaned_data['calificar']
                        if form.cleaned_data['nombretest']:
                            testsilabo.nombretest = form.cleaned_data['nombretest']
                        testsilabo.instruccion = form.cleaned_data['instruccion']
                        testsilabo.recomendacion = form.cleaned_data['recomendacion']
                        testsilabo.fechadesde = form.cleaned_data['fechadesde']
                        testsilabo.horadesde = form.cleaned_data['horadesde']
                        testsilabo.fechahasta = form.cleaned_data['fechahasta']
                        testsilabo.horahasta = form.cleaned_data['horahasta']
                        testsilabo.vecesintento = form.cleaned_data['vecesintento']
                        testsilabo.tiempoduracion = form.cleaned_data['tiempoduracion']
                        testsilabo.navegacion = form.cleaned_data['navegacion']
                        # testsilabo.estado_id = 1
                        testsilabo.save(request)
                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubricatest_", newfile._name)
                            testsilabo.archivorubrica = newfile
                            testsilabo.save(request)
                        if testsilabo.estado_id == 4:
                            from Moodle_Funciones import CrearTestMoodle
                            value, msg = CrearTestMoodle(testsilabo.id, persona)
                            if not value:
                                raise NameError(msg)
                            materia = testsilabo.silabosemanal.silabo.materia
                            materia.actualizarhtml = True
                            materia.save()
                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, 1, testsilabo.silabosemanal.id)
                        return JsonResponse({'result': 'ok'})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'edittestvirtualvdos':
                try:
                    if 'archivorubrica' in request.FILES:
                        d = request.FILES['archivorubrica']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileguia = request.FILES['archivorubrica']
                            newfilesguiad = newfileguia._name
                            ext = newfilesguiad[newfilesguiad.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileguia._name = generar_nombre("archivorubricatest_", newfileguia._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de guía del estudiante solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    testsilabo = TestSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = testsilabo.silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    form = TestSilaboSemanalForm(request.POST)
                    if form.is_valid():
                        calificar = False
                        detallemodelo = None
                        if form.cleaned_data['calificar']:
                            if form.cleaned_data['modeloevaluativo']:
                                calificar = True
                                detallemodelo = form.cleaned_data['modeloevaluativo']
                        if testsilabo.silabosemanal.test_plansemanal(1):
                            detallemodelo = form.cleaned_data['modeloevaluativo']
                            calificar = True
                        testsilabo.detallemodelo = detallemodelo
                        testsilabo.calificar = calificar
                        if form.cleaned_data['nombretest']:
                            testsilabo.nombretest = form.cleaned_data['nombretest']
                        testsilabo.instruccion = form.cleaned_data['instruccion']
                        testsilabo.recomendacion = form.cleaned_data['recomendacion']
                        testsilabo.fechadesde = form.cleaned_data['fechadesde']
                        testsilabo.horadesde = form.cleaned_data['horadesde']
                        testsilabo.fechahasta = form.cleaned_data['fechahasta']
                        testsilabo.horahasta = form.cleaned_data['horahasta']
                        testsilabo.vecesintento = 1
                        testsilabo.tiempoduracion = form.cleaned_data['tiempoduracion']
                        testsilabo.navegacion = form.cleaned_data['navegacion']
                        # testsilabo.estado_id = 1

                        testsilabo.save(request)
                        if 'archivorubrica' in request.FILES:
                            newfile = request.FILES['archivorubrica']
                            newfile._name = generar_nombre("archivorubricatest_", newfile._name)
                            testsilabo.archivorubrica = newfile
                            testsilabo.save(request)
                        if testsilabo.estado_id == 4:
                            from Moodle_Funciones import CrearTestMoodle
                            value, msg = CrearTestMoodle(testsilabo.id, persona)
                            if not value:
                                raise NameError(msg)
                            materia = testsilabo.silabosemanal.silabo.materia
                            materia.actualizarhtml = True
                            materia.save()
                        # Para planificacion de los temas de los silabos en cada actividad
                        lista_items1 = json.loads(request.POST['lista_items1'])
                        aprendizajestemas(request, lista_items1, 1, testsilabo.silabosemanal.id)
                        # return JsonResponse({'result': 'ok'})
                    if CoordinadorCarrera.objects.filter(status=True, carrera=testsilabo.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=testsilabo.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        return JsonResponse({"result": "ok"})

                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s" % ex})

            elif action == 'edittestvirtualadmision':
                try:
                    testsilabo = TestSilaboSemanalAdmision.objects.get(pk=int(encrypt(request.POST['id'])))
                    form = TestSilaboSemanalAdmForm(request.POST)
                    if form.is_valid():
                        if not form.cleaned_data['password'] and form.cleaned_data['modeloevaluativo'].password:
                            raise NameError(u"Debe ingresar una clave")
                        testsilabo.titulo = form.cleaned_data['titulo']
                        testsilabo.detallemodelo = form.cleaned_data['modeloevaluativo']
                        testsilabo.descripcion = form.cleaned_data['descripcion']
                        # testsilabo.url1 = form.cleaned_data['url1']
                        # testsilabo.url2 = form.cleaned_data['url2']
                        testsilabo.navegacion = form.cleaned_data['navegacion']
                        testsilabo.esquemapregunta = form.cleaned_data['esquemapregunta']
                        testsilabo.tiempoduracion = form.cleaned_data['tiempoduracion']
                        testsilabo.vecesintento = form.cleaned_data['vecesintento']
                        testsilabo.fecha = form.cleaned_data['fechadesde']
                        testsilabo.fechahasta = form.cleaned_data['fechahasta']
                        testsilabo.horainicio = form.cleaned_data['horadesde']
                        testsilabo.horafin = form.cleaned_data['horahasta']
                        testsilabo.password = form.cleaned_data['password']
                        testsilabo.save(request)
                        materia = testsilabo.silabosemanal.silabo.materia
                        materia.actualizarhtml = True
                        materia.save(request)
                        if testsilabo.estado_id == 4:
                            from Moodle_Funciones import CrearTestMoodleAdmision
                            personacrea = Persona.objects.get(usuario_id=testsilabo.usuario_creacion_id, status=True)
                            value, msg = CrearTestMoodleAdmision(testsilabo.id, personacrea)
                            if not value:
                                raise NameError(msg)
                        log(u'Edita test de admision %s - %s' % (testsilabo, testsilabo.silabosemanal), request, "edit")
                        return JsonResponse({'result': 'ok'})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"%s" % ex})

            elif action == 'addpreguntastestvirtual':
                try:
                    listaalternativas = request.POST['listaalternativas']
                    preguntatest = PreguntaTestSilaboSemanal(testsilabo_id=request.POST['id_test'],
                                                             nombre=request.POST['id_pregunta'])
                    preguntatest.save(request)
                    for alter in listaalternativas.split(','):
                        alternativa = alter.split('_')
                        alternativacorrecta = False
                        nombre = alternativa[1]
                        if alternativa[0] == '1':
                            alternativacorrecta = True
                        alternativaspreguntas = AlternativaPreguntaTestSilaboSemanal(preguntatestsilabo=preguntatest,
                                                                                     nombre=nombre,
                                                                                     alternativacorrecta=alternativacorrecta)
                        alternativaspreguntas.save(request)

                    return JsonResponse({'result': 'ok'})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addalternativapregunta':
                try:
                    alternativatest = AlternativaPreguntaTestSilaboSemanal(preguntatestsilabo_id=request.POST['cod_pregunta'],
                                                                           nombre=request.POST['id_alternativa'])
                    alternativatest.save(request)
                    return JsonResponse({'result': 'ok'})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editalternativapregunta':
                try:
                    alternativatest = AlternativaPreguntaTestSilaboSemanal.objects.get(pk=request.POST['codigoeditalternativaa'])
                    alternativatest.nombre = request.POST['id_editalternativa']
                    alternativatest.save(request)
                    return JsonResponse({'result': 'ok'})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delalternativapregunta':
                try:
                    alternativatest = AlternativaPreguntaTestSilaboSemanal.objects.get(pk=request.POST['codigodelalternativaa'])
                    alternativatest.status = False
                    alternativatest.save(request)
                    log(u'Eliminó alternativa de pregunta %s' % (alternativatest), request, "del")
                    return JsonResponse({'result': 'ok'})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addguiaestudiantevirtual':
                try:
                    # if 'archivoguiaestudiante' in request.FILES:
                    #     d = request.FILES['archivoguiaestudiante']
                    #     if d.size > 20971520:
                    #         return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 20 Mb."})
                    #     else:
                    #         newfileguia = request.FILES['archivoguiaestudiante']
                    #         newfilesguiad = newfileguia._name
                    #         ext = newfilesguiad[newfilesguiad.rfind("."):]
                    #         if ext == ".pdf" or ext == ".PDF":
                    #             newfileguia._name = generar_nombre("archivoguiaestudiante_", newfileguia._name)
                    #         else:
                    #             return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de guía del estudiante solo en .pdf"})
                    silabosemanal = SilaboSemanal.objects.get(id=int(encrypt(request.POST['id'])))
                    materia = silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    lista_formato = []
                    lista_extension = []
                    if ConfiguracionRecurso.objects.filter(status=True, tiporecurso=2,
                                                           carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera,
                                                           periodo=periodo).exists():
                        configuracion = ConfiguracionRecurso.objects.filter(status=True, tiporecurso=2,
                                                                            carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera,
                                                                            periodo=periodo)[0]
                        for format in configuracion.formato.all():
                            lista_formato.append(format.nombre)
                            for extension in format.extension.all():
                                lista_extension.append(extension.nombre)
                    f = GuiaEstudianteSilaboSemanalForm(request.POST, request.FILES)
                    if f.is_valid():
                        newfileguia = None
                        if 'archivoguiaestudiante' in request.FILES:
                            newfileguia = request.FILES['archivoguiaestudiante']
                            if newfileguia.size > 30000000:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                            else:
                                newfilesguiad = newfileguia._name
                                ext = newfilesguiad[newfilesguiad.rfind("."):]
                                ext = ext.lower()
                                if lista_extension:
                                    if ext in lista_extension:
                                        newfileguia._name = generar_nombre("archivoguiaestudiante_", newfileguia._name)
                                    else:
                                        return JsonResponse({"result": "bad",
                                                             "mensaje": u"Error, archivo de compendio solo en %s" % (lista_extension)})
                                elif ext == ".pdf" or ext == ".PDF":
                                    newfileguia._name = generar_nombre("archivoguiaestudiante_", newfileguia._name)
                                else:
                                    return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de guía del estudiante solo en .pdf"})
                        guiaestudiante = GuiaEstudianteSilaboSemanal(silabosemanal=silabosemanal,
                                                                     observacion=f.cleaned_data['observacion'],
                                                                     archivoguiaestudiante=newfileguia,
                                                                     tiporecurso_id=2)
                        guiaestudiante.save(request)
                        return JsonResponse({'result': 'ok'})

                    # if CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                    #     coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                    #     correo = coordinadordecarrera.persona.lista_emails_envio()
                    #     # nombredocente = coordinadordecarrera.persona
                    #     # estado = 'APROBADO'
                    #     cuenta = CUENTAS_CORREOS[3][1]
                    #     # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                    #     #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                    #     #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                    #     return JsonResponse({"result": "ok"})
                    # else:
                    #     return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'editguiaestudiantevirtual':
                try:
                    # if 'archivoguiaestudiante' in request.FILES:
                    #     d = request.FILES['archivoguiaestudiante']
                    #     if d.size > 20971520:
                    #         return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 20 Mb."})
                    #     else:
                    #         newfileguia = request.FILES['archivoguiaestudiante']
                    #         newfilesguiad = newfileguia._name
                    #         ext = newfilesguiad[newfilesguiad.rfind("."):]
                    #         # if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                    #         if ext == ".pdf" or ext == ".PDF":
                    #             newfileguia._name = generar_nombre("archivoguiaestudiante_", newfileguia._name)
                    #         else:
                    #             return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de guía del estudiante solo en .pdf"})
                    guiaestudiante = GuiaEstudianteSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = guiaestudiante.silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    lista_formato = []
                    lista_extension = []
                    if guiaestudiante.mis_formatos(periodo):
                        for format in guiaestudiante.mis_formatos(periodo):
                            lista_formato.append(format.nombre)
                            for extension in format.extension.all():
                                lista_extension.append(extension.nombre)
                    form = GuiaDocenteSilaboSemanalForm(request.POST, request.FILES)
                    if form.is_valid():
                        guiaestudiante.observacion = form.cleaned_data['observacion']
                        guiaestudiante.estado_id = 1
                        if 'archivoguiaestudiante' in request.FILES:
                            newfileguia = request.FILES['archivoguiaestudiante']
                            if newfileguia.size > 30000000:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                            else:
                                newfilesguiad = newfileguia._name
                                ext = newfilesguiad[newfilesguiad.rfind("."):]
                                ext = ext.lower()
                                if lista_extension:
                                    if ext in lista_extension:
                                        newfileguia._name = generar_nombre("archivoguiaestudiante_", newfileguia._name)
                                        guiaestudiante.archivoguiaestudiante = newfileguia
                                    else:
                                        return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de compendio solo en %s" % (lista_extension)})
                                elif ext == ".pdf" or ext == ".PDF":
                                    newfileguia._name = generar_nombre("archivoguiaestudiante_", newfileguia._name)
                                    guiaestudiante.archivoguiaestudiante = newfileguia
                                else:
                                    return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de guía del estudiante solo en .pdf"})
                        guiaestudiante.save(request)
                        # return JsonResponse({"result": "ok"})

                    if CoordinadorCarrera.objects.filter(status=True, carrera=guiaestudiante.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=guiaestudiante.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        return JsonResponse({"result": "ok"})

                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addguiadocentevirtual':
                try:
                    silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    if 'archivoguiadocente' in request.FILES:
                        d = request.FILES['archivoguiadocente']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileguia = request.FILES['archivoguiadocente']
                            newfilesguiad = newfileguia._name
                            ext = newfilesguiad[newfilesguiad.rfind("."):]
                            # if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                            if ext == ".pdf" or ext == ".PDF":
                                newfileguia._name = generar_nombre("archivoguiadocente_", newfileguia._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de guía del docente solo en .pdf"})
                    f = GuiaDocenteSilaboSemanalForm(request.POST, request.FILES)
                    if f.is_valid():
                        guiadocente = GuiaDocenteSilaboSemanal(silabosemanal_id=int(encrypt(request.POST['id'])),
                                                               estado_id=1,
                                                               observacion=f.cleaned_data['observacion'],
                                                               tiporecurso_id=8)
                        guiadocente.save(request)
                        if 'archivoguiadocente' in request.FILES:
                            newfile = request.FILES['archivoguiadocente']
                            newfile._name = generar_nombre("archivoguiadocente_", newfile._name)
                            guiadocente.archivoguiadocente = newfile
                            guiadocente.save(request)
                        # return JsonResponse({'result': 'ok'})
                    if CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        return JsonResponse({"result": "ok"})

                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'editguiadocentevirtual':
                try:
                    if 'archivoguiadocente' in request.FILES:
                        d = request.FILES['archivoguiadocente']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileguia = request.FILES['archivoguiadocente']
                            newfilesguiad = newfileguia._name
                            ext = newfilesguiad[newfilesguiad.rfind("."):]
                            # if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                            if ext == ".pdf" or ext == ".PDF":
                                newfileguia._name = generar_nombre("archivoguiadocente_", newfileguia._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de guía del docente solo en .pdf"})
                    guiadocente = GuiaDocenteSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = guiadocente.silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    form = GuiaDocenteSilaboSemanalForm(request.POST, request.FILES)
                    if form.is_valid():
                        guiadocente.observacion = form.cleaned_data['observacion']
                        guiadocente.estado_id = 1
                        guiadocente.save(request)
                        if 'archivoguiadocente' in request.FILES:
                            newfile = request.FILES['archivoguiadocente']
                            newfile._name = generar_nombre("archivoguiadocente_", newfile._name)
                            guiadocente.archivoguiadocente = newfile
                            guiadocente.save(request)

                        # return JsonResponse({"result": "ok"})

                    if CoordinadorCarrera.objects.filter(status=True, carrera=guiadocente.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=guiadocente.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'adddiapositivavirtual':
                try:
                    # if 'archivodiapositiva' in request.FILES:
                    #     d = request.FILES['archivodiapositiva']
                    #     if d.size > 20971520:
                    #         return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 20 Mb."})
                    #     else:
                    #         newfileguia = request.FILES['archivodiapositiva']
                    #         newfilesguiad = newfileguia._name
                    #         ext = newfilesguiad[newfilesguiad.rfind("."):]
                    #         if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".pdf" or ext == ".PDF" or ext == ".ppt" or ext == ".pptx" or ext == ".PPT" or ext == ".PPTX" or ext == ".zip" or ext == ".rar":
                    #             newfileguia._name = generar_nombre("archivodiapositiva_", newfileguia._name)
                    #         else:
                    #             return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de diapositiva solo en .doc, docx, xls, xlsx, zip, pdf, rar"})
                    silabosemanal = SilaboSemanal.objects.get(id=int(encrypt(request.POST['id'])))
                    # materia = silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    lista_formato = []
                    lista_extension = []
                    if configuracion := ConfiguracionRecurso.objects.filter(status=True, tiporecurso=1,
                                                                            carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera,
                                                                            periodo=periodo).first():
                        for format in configuracion.formato.all():
                            lista_formato.append(format.nombre)
                            for extension in format.extension.all():
                                lista_extension.append(extension.nombre)

                    f = DiapositivaSilaboSemanalForm(request.POST, request.FILES)
                    if 'archivodiapositiva' in request.FILES:
                        newfilediapositiva = request.FILES['archivodiapositiva']
                        if newfilediapositiva.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                    if f.is_valid():
                        url = ''
                        newfilediapositiva = None
                        # se deahibilita el tipo de material para solo permitir subir url --- TIPO MATERIAL 2 URL
                        tipomaterial = 2
                        if tipomaterial == 2:
                            url = f.cleaned_data['url']
                        if tipomaterial == 1:
                            if 'archivodiapositiva' in request.FILES:
                                newfilediapositiva = request.FILES['archivodiapositiva']
                                if newfilediapositiva.size > 30000000:
                                    return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                                else:
                                    newfilesguiad = newfilediapositiva._name
                                    ext = newfilesguiad[newfilesguiad.rfind("."):]
                                    ext = ext.lower()
                                    if lista_extension:
                                        if ext in lista_extension:
                                            newfilediapositiva._name = generar_nombre("archivodiapositiva_", newfilediapositiva._name)
                                        else:
                                            return JsonResponse({"result": "bad",
                                                                 "mensaje": u"Error, archivo de diapositiva solo en %s" % (
                                                                     lista_extension)})
                                    elif ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".pdf" or ext == ".PDF" or ext == ".ppt" or ext == ".pptx" or ext == ".PPT" or ext == ".PPTX" or ext == ".zip" or ext == ".rar":
                                        newfilediapositiva._name = generar_nombre("archivodiapositiva_", newfilediapositiva._name)
                                    else:
                                        return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de diapositiva solo en .doc, docx, xls, xlsx, zip, pdf, rar"})
                        diapositiva = DiapositivaSilaboSemanal(silabosemanal=silabosemanal,
                                                               estado_id=1,
                                                               tipomaterial=tipomaterial,
                                                               nombre=f.cleaned_data['nombre'],
                                                               url=url,
                                                               archivodiapositiva=newfilediapositiva,
                                                               descripcion=f.cleaned_data['descripcion'],
                                                               tiporecurso_id=1)
                        diapositiva.save(request)
                        return JsonResponse({'result': 'ok'})

                    # if CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                    #     coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                    #     correo = coordinadordecarrera.persona.lista_emails_envio()
                    #     # nombredocente = coordinadordecarrera.persona
                    #     # estado = 'APROBADO'
                    #     cuenta = CUENTAS_CORREOS[3][1]
                    #     # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                    #     #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                    #     #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                    #
                    #     return JsonResponse({"result": "ok"})
                    #
                    # else:
                    #     return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'editdiapositivavirtual':
                try:
                    # if 'archivodiapositiva' in request.FILES:
                    #     d = request.FILES['archivodiapositiva']
                    #     if d.size > 20971520:
                    #         return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 20 Mb."})
                    #     else:
                    #         newfileguia = request.FILES['archivodiapositiva']
                    #         newfilesguiad = newfileguia._name
                    #         ext = newfilesguiad[newfilesguiad.rfind("."):]
                    #         if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".pdf" or ext == ".PDF" or ext == ".ppt" or ext == ".pptx" or ext == ".PPT" or ext == ".PPTX" or ext == ".zip" or ext == ".rar":
                    #             newfileguia._name = generar_nombre("archivodiapositiva_", newfileguia._name)
                    #         else:
                    #             return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de diapositiva solo en .doc, docx, xls, xlsx, zip, pdf, rar"})
                    diapositiva = DiapositivaSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = diapositiva.silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    lista_formato = []
                    lista_extension = []
                    if diapositiva.mis_formatos(periodo):
                        for format in diapositiva.mis_formatos(periodo):
                            lista_formato.append(format.nombre)
                            for extension in format.extension.all():
                                lista_extension.append(extension.nombre)
                    form = DiapositivaSilaboSemanalForm(request.POST, request.FILES)
                    if form.is_valid():
                        if form.cleaned_data['tipomaterial'] == '':
                            form.cleaned_data['tipomaterial'] = str(diapositiva.tipomaterial)
                        if form.cleaned_data['tipomaterial'] == '1':
                            if 'archivodiapositiva' in request.FILES:
                                d = request.FILES['archivodiapositiva']
                                if d.size > 30000000:
                                    return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                                else:
                                    newfileguia = request.FILES['archivodiapositiva']
                                    newfilesguiad = newfileguia._name
                                    ext = newfilesguiad[newfilesguiad.rfind("."):]
                                    ext = ext.lower()
                                    if lista_extension:
                                        if ext in lista_extension:
                                            newfileguia._name = generar_nombre("archivodiapositiva_", newfileguia._name)
                                            diapositiva.archivodiapositiva = newfileguia
                                            diapositiva.url = ''
                                        else:
                                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de diapositiva solo en %s" % (lista_extension)})
                                    elif ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".pdf" or ext == ".PDF" or ext == ".ppt" or ext == ".pptx" or ext == ".PPT" or ext == ".PPTX" or ext == ".zip" or ext == ".rar":
                                        newfileguia._name = generar_nombre("archivodiapositiva_", newfileguia._name)
                                        diapositiva.archivodiapositiva = newfileguia
                                        diapositiva.url = ''
                                    else:
                                        return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de diapositiva solo en .doc, docx, xls, xlsx, zip, pdf, rar"})

                        if form.cleaned_data['tipomaterial'] == '2':
                            diapositiva.url = form.cleaned_data['url']
                            diapositiva.archivodiapositiva = ''
                        diapositiva.tipomaterial = 2
                        diapositiva.nombre = form.cleaned_data['nombre']
                        diapositiva.descripcion = form.cleaned_data['descripcion']
                        if diapositiva.iddiapositivamoodle == 0:
                            diapositiva.estado_id = 1
                        diapositiva.save(request)
                        if diapositiva.estado_id == 4:
                            if form.cleaned_data['tipomaterial'] == '2':
                                from Moodle_Funciones import CrearRecursoMoodle
                                value, msg = CrearRecursoMoodle(diapositiva.id, persona)
                                if not value:
                                    raise NameError(msg)
                                materia = diapositiva.silabosemanal.silabo.materia
                                materia.actualizarhtml = True
                                materia.save()
                            elif form.cleaned_data['tipomaterial'] == '1':
                                if lista_extension:
                                    if 'word' not in lista_formato:
                                        from Moodle_Funciones import CrearRecursoMoodle
                                        value, msg = CrearRecursoMoodle(diapositiva.id, persona)
                                        if not value:
                                            raise NameError(msg)
                                        materia = diapositiva.silabosemanal.silabo.materia
                                        materia.actualizarhtml = True
                                        materia.save()
                                else:
                                    from Moodle_Funciones import CrearRecursoMoodle
                                    value, msg = CrearRecursoMoodle(diapositiva.id, persona)
                                    if not value:
                                        raise NameError(msg)
                                    materia = diapositiva.silabosemanal.silabo.materia
                                    materia.actualizarhtml = True
                                    materia.save()
                        # return JsonResponse({"result": "ok"})
                        #
                        # if CoordinadorCarrera.objects.filter(status=True, carrera=diapositiva.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        #     coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=diapositiva.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        #     correo = coordinadordecarrera.persona.lista_emails_envio()
                        #     # nombredocente = coordinadordecarrera.persona
                        #     # estado = 'APROBADO'
                        #     cuenta = CUENTAS_CORREOS[3][1]
                        #     # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #     #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                        #     #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        data['nombrediv'] = nombrediv = request.POST['nombrediv']
                        data['diapositiva'] = diapositiva
                        data['opciondiv'] = 1
                        template = get_template("pro_planificacion/listarecursosdiv.html")
                        json_content = template.render(data)
                        return JsonResponse({'result': 'ok'})
                        # return JsonResponse({"result": True, "nombrediv": nombrediv, 'html': json_content}, safe=False)
                        # return render(request, "pro_planificacion/listarecursosdiv.html", data )

                    else:
                        raise NameError('No esta configurado un director de carrera en la carrera de su materia en este periodo académico..')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s " % ex})

            elif action == 'addvidmagistralvirtual':
                try:
                    f = VideoMagistralSilaboSemanalForm(request.POST)
                    silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    idcoordinacion = silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id

                    if f.is_valid():
                        url = ''
                        if f.cleaned_data['tipograbacion'] == '1':
                            url = f.cleaned_data['testourl']
                        presentacion_video = None
                        validado = True
                        if 'presentacion_video' in request.FILES:
                            presentacion_video = request.FILES['presentacion_video']
                            if presentacion_video.size > 30000000:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                            else:
                                newfilesd = presentacion_video._name
                                ext = newfilesd[newfilesd.rfind("."):]
                                ext = ext.lower()
                                if idcoordinacion != 7:
                                    whitelist = f.fields['presentacion_video'].ext_whitelist
                                    if ext in whitelist:
                                        presentacion_video._name = generar_nombre("archivopresentacionvideomagistral", presentacion_video._name)
                                        validado = False
                                    else:
                                        return JsonResponse({"result": "bad",
                                                             "mensaje": f"Error, archivo de presentación del video debe subir solo en {whitelist}"})
                                else:
                                    if ext == ".mp4":
                                        presentacion_video._name = generar_nombre("archivopresentacionvideomagistral", presentacion_video._name)
                                        validado = False
                                    else:
                                        return JsonResponse({"result": "bad",
                                                             "mensaje": u"Error, archivo de presentación del video debe subir solo en .mp4"})


                        vidmagistral = VideoMagistralSilaboSemanal(silabosemanal_id=int(encrypt(request.POST['id'])),
                                                                   estado_id=1,
                                                                   tipomaterial=2,
                                                                   tiporecurso=1,
                                                                   tiporecursos_id=7,
                                                                   tipograbacion=f.cleaned_data['tipograbacion'],
                                                                   descripcion=f.cleaned_data['descripcion'],
                                                                   url=url,
                                                                   presentacion_video=presentacion_video,
                                                                   presentacion_validado=validado
                                                                   )
                        vidmagistral.save(request)
                        vidmagistral.nombre = 'VIDEOMAGISTRAL_S' + str(vidmagistral.silabosemanal.numsemana)
                        vidmagistral.save(request)
                        semana = vidmagistral.silabosemanal.numsemana
                        nombrerecurso = 'VIDEO MAGISTRAL'
                        nombre_carrera = vidmagistral.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.nombre_completo()
                        # if presentacion_video:
                        #     if CoordinadorCarrera.objects.filter(status=True, carrera=vidmagistral.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        #         coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=vidmagistral.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        #         correo = coordinadordecarrera.persona.lista_emails_envio()
                        #         cuenta = CUENTAS_CORREOS[0][1]
                        #         # send_html_mail("SGA - REVISIÓN DE VIDEOS - %s" % nombre_carrera, "emails/ingresovideomagistral.html",
                        #         #                {'sistema': request.session['nombresistema'], 'nombredocente': persona,
                        #         #                 'nombrerecurso': nombrerecurso, 'semana': semana, 'nombrecarrera': nombre_carrera,
                        #         #                 'vidmagistral': vidmagistral, 't': miinstitucion()}, correo, [], cuenta=cuenta)
                        # else:
                        correo = persona.lista_emails_envio()
                        correo.append('sop_docencia_crai@unemi.edu.ec')
                        cuenta = CUENTAS_CORREOS[0][1]
                        send_html_mail("SGA - REVISIÓN DE VIDEOS - %s" % nombre_carrera, "emails/ingresovideomagistral.html",
                                       {'sistema': request.session['nombresistema'], 'nombredocente': persona,
                                        'nombrerecurso': nombrerecurso, 'semana': semana, 'nombrecarrera': nombre_carrera,
                                        'vidmagistral': vidmagistral, 't': miinstitucion()}, correo, [], cuenta=cuenta)

                        return JsonResponse({'result': 'ok'})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'editvidmagistralvirtual':
                try:
                    vidmagistral = VideoMagistralSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    form = VideoMagistralSilaboSemanalForm(request.POST)
                    if form.is_valid():
                        if vidmagistral.tipograbacion == 1:
                            vidmagistral.url = form.cleaned_data['testourl']
                        else:
                            vidmagistral.url = ''
                        if 'presentacion_video' in request.FILES:
                            presentacion_video = request.FILES['presentacion_video']
                            if presentacion_video.size > 30000000:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                            else:
                                newfilesd = presentacion_video._name
                                ext = newfilesd[newfilesd.rfind("."):]
                                ext = ext.lower()
                                if ext == ".ppt" or ext == ".pptx":
                                    presentacion_video._name = generar_nombre("archivopresentacionvideomagistral", presentacion_video._name)
                                    vidmagistral.presentacion_video = presentacion_video
                                    vidmagistral.presentacion_validado = False
                                    vidmagistral.estado_id = 1
                                else:
                                    return JsonResponse({"result": "bad",
                                                         "mensaje": u"Error, archivo de presentación del video debe subir solo en .ppt o .pptx"})
                        elif vidmagistral.presentacion_video:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de presentación del video es obligatorio."})

                        vidmagistral.tipomaterial = 2
                        # vidmagistral.nombre = form.cleaned_data['nombre']
                        vidmagistral.tiporecurso = 1
                        # vidmagistral.tipograbacion = form.cleaned_data['tipograbacion']
                        vidmagistral.descripcion = form.cleaned_data['descripcion']
                        vidmagistral.save(request)
                        # return JsonResponse({"result": "ok"})
                        semana = vidmagistral.silabosemanal.numsemana
                        nombre_carrera = vidmagistral.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.nombre_completo()
                        nombrerecurso = 'VIDEO MAGISTRAL'
                        if vidmagistral.tipograbacion == 2:
                            if CoordinadorCarrera.objects.filter(status=True,
                                                                 carrera=vidmagistral.silabosemanal.silabo.materia.asignaturamalla.malla.carrera,
                                                                 periodo=periodo, sede=1, tipo=3):
                                coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True,
                                                                                         carrera=vidmagistral.silabosemanal.silabo.materia.asignaturamalla.malla.carrera,
                                                                                         periodo=periodo, sede=1,
                                                                                         tipo=3)[0]
                                correo = coordinadordecarrera.persona.lista_emails_envio()
                                cuenta = CUENTAS_CORREOS[0][1]
                                # send_html_mail("SGA - REVISIÓN DE VIDEOS - %s" % nombre_carrera, "emails/ingresovideomagistral.html",
                                #                {'sistema': request.session['nombresistema'], 'nombredocente': persona,
                                #                 'nombrerecurso': nombrerecurso, 'semana': semana, 'nombrecarrera': nombre_carrera,
                                #                 'vidmagistral': vidmagistral, 't': miinstitucion()}, correo, [],
                                #                cuenta=cuenta)
                        else:
                            correo = persona.lista_emails_envio()
                            correo.append('sop_docencia_crai@unemi.edu.ec')
                            cuenta = CUENTAS_CORREOS[0][1]
                            # send_html_mail("SGA - REVISIÓN DE VIDEOS - %s" % nombre_carrera, "emails/ingresovideomagistral.html",
                            #                {'sistema': request.session['nombresistema'], 'nombredocente': persona,
                            #                 'nombrerecurso': nombrerecurso, 'semana': semana, 'nombrecarrera': nombre_carrera,
                            #                 'vidmagistral': vidmagistral, 't': miinstitucion()}, correo, [],
                            #                cuenta=cuenta)
                        return JsonResponse({'result': 'ok'})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addcompendiovirtual':
                try:
                    silabosemanal = SilaboSemanal.objects.get(id=int(encrypt(request.POST['id'])))
                    materia = silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    lista_formato = []
                    lista_extension = []
                    if ConfiguracionRecurso.objects.filter(status=True, tiporecurso=3,
                                                           carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera,
                                                           periodo=periodo).exists():
                        configuracion = ConfiguracionRecurso.objects.filter(status=True, tiporecurso=3,
                                                                            carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera,
                                                                            periodo=periodo)[0]
                        for format in configuracion.formato.all():
                            lista_formato.append(format.nombre)
                            # PARA QUE NO CONSULTE LA CONFIGURACIÓN D RECURSOS Y GUARDE SOLO PDF
                            if not variable_valor('MIGRAR_COMPENDIO_INGRESADO'):
                                for extension in format.extension.all():
                                    lista_extension.append(extension.nombre)
                    f = CompendioSilaboSemanalForm(request.POST, request.FILES)
                    newfilecompendio = None
                    if 'archivocompendio' in request.FILES:
                        newfilecompendio = request.FILES['archivocompendio']
                        if newfilecompendio.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfilescompendiod = newfilecompendio._name
                            ext = newfilescompendiod[newfilescompendiod.rfind("."):]
                            # if ext == ".doc" or ext == ".docx" or ext == ".pdf" or ext == ".DOC" or ext == ".DOCX" or ext == ".PDF" or ext == ".zip" or ext == ".rar":
                            ext = ext.lower()
                            if lista_extension:
                                if ext in lista_extension:
                                    newfilecompendio._name = generar_nombre("archivocompendio_", newfilecompendio._name)
                                else:
                                    return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de compendio solo en %s" % (lista_extension)})
                            elif ext == ".pdf" or ext == ".PDF":
                                newfilecompendio._name = generar_nombre("archivocompendio_", newfilecompendio._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de compendio solo en .doc, docx, pdf, zip, rar"})

                            if ext == ".doc" or ext == ".docx":
                                crai = True
                            else:
                                crai = False

                    newfilwcompendio_plagio = None
                    if 'archivoplagio' in request.FILES:
                        newfilwcompendio_plagio = request.FILES['archivoplagio']
                        if newfilwcompendio_plagio.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfilesrubd = newfilwcompendio_plagio._name
                            ext = newfilesrubd[newfilesrubd.rfind("."):]
                            ext = ext.lower()
                            # if lista_extension:
                            #     if ext in lista_extension:
                            #         newfilwcompendio_plagio._name = generar_nombre("archivoplagio_", newfilwcompendio_plagio._name)
                            #     else:
                            #         return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de compendio solo en %s" % (lista_extension)})
                            if ext == ".pdf" or ext == ".PDF" or ext == ".doc" or ext == ".docx" or ext == ".zip" or ext == ".rar":
                                newfilwcompendio_plagio._name = generar_nombre("archivoplagio_", newfilwcompendio_plagio._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de compendio solo en .doc, docx, pdf, zip, rar"})

                    if f.is_valid():
                        if crai:
                            compendio = CompendioSilaboSemanal(silabosemanal=silabosemanal,
                                                               estado_id=5,
                                                               descripcion=f.cleaned_data['descripcion'],
                                                               archivocompendio=newfilecompendio,
                                                               porcentaje=f.cleaned_data['porcentaje'],
                                                               archivoplagio=newfilwcompendio_plagio,
                                                               tiporecurso_id=3)
                            compendio.save(request)
                            nombre_carrera = compendio.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.nombre_completo()
                            lista_cor = []
                            lista_cor.append('sop_docencia_crai@unemi.edu.ec')
                            send_html_mail("SGA - REVISIÓN DE RECURSOS - %s" % nombre_carrera,
                                           "emails/sop_doc_crai_recursos.html",
                                           {'sistema': u'SGA - UNEMI',
                                            'fecha': datetime.now().date(),
                                            'hora': datetime.now().time(),
                                            'recurso': compendio,
                                            'nombrecarrera': nombre_carrera,
                                            'tipo': 1,
                                            't': miinstitucion()
                                            },
                                           lista_cor,
                                           [],
                                           cuenta=variable_valor('CUENTAS_CORREOS')[0]
                                           )
                        else:
                            compendio = CompendioSilaboSemanal(silabosemanal=silabosemanal,
                                                               estado_id=1,
                                                               descripcion=f.cleaned_data['descripcion'],
                                                               archivocompendio=newfilecompendio,
                                                               porcentaje=f.cleaned_data['porcentaje'],
                                                               archivoplagio=newfilwcompendio_plagio,
                                                               tiporecurso_id=3)
                            compendio.save(request)

                        return JsonResponse({'result': 'ok'})
                    # if CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                    #     coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                    #     correo = coordinadordecarrera.persona.lista_emails_envio()
                    #     # nombredocente = coordinadordecarrera.persona
                    #     # estado = 'APROBADO'
                    #     cuenta = CUENTAS_CORREOS[3][1]
                    #     # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                    #     #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                    #     #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                    #     return JsonResponse({"result": "ok"})
                    else:
                        transaction.set_rollback(True)
                        return JsonResponse({'result': "bad", "form": [{k: v[0]} for k, v in f.errors.items()],
                                             "mensaje": "Error en el formulario"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos %s' % ex})

            elif action == 'editcompendiovirtual':
                try:
                    compendio = CompendioSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = compendio.silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    lista_formato = []
                    lista_extension = []
                    crai = False
                    if compendio.mis_formatos(periodo):
                        for format in compendio.mis_formatos(periodo):
                            lista_formato.append(format.nombre)
                            for extension in format.extension.all():
                                lista_extension.append(extension.nombre)
                    newfilecompendio = None
                    form = CompendioSilaboSemanalForm(request.POST, request.FILES)
                    if form.is_valid():
                        compendio.descripcion = form.cleaned_data['descripcion']
                        compendio.porcentaje = form.cleaned_data['porcentaje']
                        if compendio.estado_id == 4 or compendio.estado_id == 2:
                            compendio.estado_id = 2
                        else:
                            compendio.estado_id = 1
                        # if compendio.estado_id != 2 and compendio.estado_id != 4:
                        # compendio.estado_id = 1
                        if 'archivocompendio' in request.FILES:
                            newfilecompendio = request.FILES['archivocompendio']
                            if newfilecompendio.size > 30000000:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                            else:
                                newfilesguiad = newfilecompendio._name
                                ext = newfilesguiad[newfilesguiad.rfind("."):]
                                # if ext == ".doc" or ext == ".docx" or ext == ".pdf" or ext == ".DOC" or ext == ".DOCX" or ext == ".PDF" or ext == ".zip" or ext == ".rar":
                                ext = ext.lower()
                                if lista_extension:
                                    if ext in lista_extension:
                                        newfilecompendio._name = generar_nombre("archivocompendio_", newfilecompendio._name)
                                        compendio.archivocompendio = newfilecompendio
                                    else:
                                        return JsonResponse({"result": "bad",
                                                             "mensaje": u"Error, archivo de compendio solo en %s" % (
                                                                 lista_extension)})
                                elif ext == ".pdf" or ext == ".PDF":
                                    newfilecompendio._name = generar_nombre("archivocompendio_", newfilecompendio._name)
                                    compendio.archivocompendio = newfilecompendio
                                else:
                                    return JsonResponse({"result": "bad",
                                                         "mensaje": u"Error, archivo de compendio solo en .doc, docx, pdf, zip, rar"})

                                if ext == ".doc" or ext == ".docx":
                                    crai = True

                        newfilwcompendio_plagio = None
                        if 'archivoplagio' in request.FILES:
                            newfilwcompendio_plagio = request.FILES['archivoplagio']
                            if newfilwcompendio_plagio.size > 30000000:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                            else:
                                newfilesrubd = newfilwcompendio_plagio._name
                                ext = newfilesrubd[newfilesrubd.rfind("."):]
                                ext = ext.lower()
                                # if lista_extension:
                                #     if ext in lista_extension:
                                #         newfilwcompendio_plagio._name = generar_nombre("archivoplagio_", newfilwcompendio_plagio._name)
                                #         compendio.archivoplagio = newfilwcompendio_plagio
                                #     else:
                                #         return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de compendio solo en %s" % (lista_extension)})
                                if ext == ".pdf" or ext == ".PDF" or ext == ".doc" or ext == ".docx" or ext == ".zip" or ext == ".rar":
                                    newfilwcompendio_plagio._name = generar_nombre("archivoplagio_", newfilwcompendio_plagio._name)
                                    compendio.archivoplagio = newfilwcompendio_plagio
                                else:
                                    return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de compendio solo en .doc, docx, pdf, zip, rar"})

                        # if 'archivocompendio' in request.FILES:
                        #     newfile = request.FILES['archivocompendio']
                        #     newfile._name = generar_nombre("archivocompendio_", newfile._name)
                        #     compendio.archivocompendio = newfile
                        compendio.save(request)
                        # return JsonResponse({"result": "ok"})
                    if CoordinadorCarrera.objects.filter(status=True, carrera=compendio.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=compendio.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                    if crai:
                        nombre_carrera = compendio.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.nombre_completo()
                        lista_cor = []
                        lista_cor.append('sop_docencia_crai@unemi.edu.ec')
                        send_html_mail("SGA - REVISIÓN DE RECURSOS - %s" % nombre_carrera,
                                       "emails/sop_doc_crai_edicion_recursos.html",
                                       {'sistema': u'SGA - UNEMI',
                                        'fecha': datetime.now().date(),
                                        'hora': datetime.now().time(),
                                        'recurso': compendio,
                                        'nombrecarrera': nombre_carrera,
                                        'tipo': 1,
                                        't': miinstitucion()
                                        },
                                       lista_cor,
                                       [],
                                       cuenta=variable_valor('CUENTAS_CORREOS')[0]
                                       )

                    return JsonResponse({"result": "ok"})
                    # else:
                    #     raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addmaterialadicionalvirtual':
                try:
                    from api.odilo.odilo_service import OdiloAPI
                    silabosemanal = SilaboSemanal.objects.get(id=int(encrypt(request.POST['id'])))
                    materia = silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    if 'archivomaterial' in request.FILES:
                        d = request.FILES['archivomaterial']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileguia = request.FILES['archivomaterial']
                            newfilesguiad = newfileguia._name
                            ext = newfilesguiad[newfilesguiad.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileguia._name = generar_nombre("archivomaterial_", newfileguia._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de material adicional solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    f = MaterialAdicionalSemanalForm(request.POST, request.FILES)
                    if f.is_valid():
                        # Se deshabilita el tipo material para solo permitir URL --- TIPO MATERIAL 2 ES URL
                        tipomaterial = 2
                        textourl = ''
                        if tipomaterial == 1:
                            if 'archivomaterial' in request.FILES:
                                d = request.FILES['archivomaterial']
                                if d.size > 30000000:
                                    return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                                else:
                                    newfileguia = request.FILES['archivomaterial']
                                    newfilesguiad = newfileguia._name
                                    ext = newfilesguiad[newfilesguiad.rfind("."):]
                                    if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                        newfileguia._name = generar_nombre("archivomaterial_", newfileguia._name)
                                    else:
                                        return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de material adicional solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                        if tipomaterial in [2, 3]:
                            if int(f.cleaned_data['tiporecurso']) != 4:
                                textourl = f.cleaned_data['testourl']
                        odiloisbn = ""
                        tipomaterialopc = f.cleaned_data['tipomaterial']
                        if int(f.cleaned_data['tiporecurso']) == 4:
                            odiloisbn = f.cleaned_data['isbnodilo']
                            tipomaterialopc = 2
                            odilo = OdiloAPI()
                            odilo.get_access_token()
                            search_results = odilo.search_catalog(odiloisbn)
                            textourl='https://uteca.unemi.edu.ec/info/' + str(search_results[0]['id'])
                        material = MaterialAdicionalSilaboSemanal(silabosemanal_id=int(encrypt(request.POST['id'])),
                                                                  estado_id=1,
                                                                  tipomaterialcomplementario=f.cleaned_data['tipomaterialcomplementario'],
                                                                  tipomaterial=tipomaterial,
                                                                  nombre=f.cleaned_data['nombre'],
                                                                  tiporecurso=f.cleaned_data['tiporecurso'],
                                                                  isbnodilo=odiloisbn,
                                                                  descripcion=f.cleaned_data['descripcion'],
                                                                  testourl=textourl,
                                                                  tiporecursos_id=4
                                                                  )
                        material.save(request)
                        if tipomaterial == 1:
                            if 'archivomaterial' in request.FILES:
                                newfile = request.FILES['archivomaterial']
                                newfile._name = generar_nombre("archivomaterial_", newfile._name)
                                material.archivomaterial = newfile
                                material.save(request)
                        return JsonResponse({'result': 'ok'})

                    else:
                        transaction.set_rollback(True)
                        return JsonResponse({'result': 'bad', "form": [{k: v[0]} for k, v in f.errors.items()],
                                             "mensaje": "Error en el formulario"})

                        # if CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        #     coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        #     correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        # cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.",
                        #                "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona,
                        #                 'materia': materia,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                    # return JsonResponse({"result": "ok"})
                    #
                    # else:
                    #     return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'editmaterialadicionalvirtual':
                try:
                    from api.odilo.odilo_service import OdiloAPI
                    if 'archivomaterial' in request.FILES:
                        d = request.FILES['archivomaterial']
                        if d.size > 30000000:
                            return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                        else:
                            newfileguia = request.FILES['archivomaterial']
                            newfilesguiad = newfileguia._name
                            ext = newfilesguiad[newfilesguiad.rfind("."):]
                            if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                newfileguia._name = generar_nombre("archivomaterial_", newfileguia._name)
                            else:
                                return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de compendio solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                    material = MaterialAdicionalSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    materia = material.silabosemanal.silabo.materia.nombre_mostrar_sin_profesor()
                    form = MaterialAdicionalSemanalForm(request.POST, request.FILES)
                    if form.is_valid():
                        if form.cleaned_data['tipomaterial'] == '1':
                            if 'archivomaterial' in request.FILES:
                                d = request.FILES['archivomaterial']
                                if d.size > 30000000:
                                    return JsonResponse({"result": "bad", "mensaje": u"Error, archivo mayor a 30 Mb."})
                                else:
                                    newfileguia = request.FILES['archivomaterial']
                                    newfilesguiad = newfileguia._name
                                    ext = newfilesguiad[newfilesguiad.rfind("."):]
                                    if ext == ".doc" or ext == ".docx" or ext == ".xls" or ext == ".xlsx" or ext == ".DOC" or ext == ".DOCX" or ext == ".XLS" or ext == ".XLSX" or ext == ".zip" or ext == ".rar" or ext == ".pdf" or ext == ".PDF":
                                        newfileguia._name = generar_nombre("archivomaterial_", newfileguia._name)
                                    else:
                                        return JsonResponse({"result": "bad", "mensaje": u"Error, archivo de compendio solo en .doc, docx, xls, xlsx, zip, rar, pdf"})
                        textourl = ''
                        # if form.cleaned_data['tipomaterial'] in ['2' ,'3']:
                        # Eliminado debido a que al hacer el post no envia el valor del campo, dado que por defecto esta
                        # deshabilitado en el formulario y no deja actualizar el campo URL.
                        if material.tipomaterial == 2:
                            textourl = form.cleaned_data['testourl']
                            material.archivomaterial = ''

                        material.nombre = form.cleaned_data['nombre']
                        material.tiporecurso = form.cleaned_data['tiporecurso']
                        material.tipomaterialcomplementario = form.cleaned_data['tipomaterialcomplementario']
                        material.descripcion = form.cleaned_data['descripcion']
                        odiloisbn = ""
                        tipomaterialopc = form.cleaned_data['tipomaterial']
                        if int(form.cleaned_data['tiporecurso']) == 4:
                            odiloisbn = form.cleaned_data['isbnodilo']
                            tipomaterialopc = 2
                            odilo = OdiloAPI()
                            odilo.get_access_token()
                            search_results = odilo.search_catalog(odiloisbn)
                            textourl = 'https://uteca.unemi.edu.ec/info/' + str(search_results[0]['id'])

                        if material.idmaterialesmoodle == 0:
                            material.estado_id = 1
                        material.testourl = textourl
                        material.isbnodilo = str(odiloisbn)
                        material.tipomaterial=2
                        material.save(request)
                        if form.cleaned_data['tipomaterial'] == '1':
                            if 'archivomaterial' in request.FILES:
                                newfile = request.FILES['archivomaterial']
                                newfile._name = generar_nombre("archivomaterial_", newfile._name)
                                material.archivomaterial = newfile
                                material.testourl = ''
                                material.save(request)

                        if material.estado_id == 4:
                            from Moodle_Funciones import CrearMaterialesMoodle
                            value, msg = CrearMaterialesMoodle(material.id, persona)
                            if not value:
                                raise NameError(msg)
                            materia = material.silabosemanal.silabo.materia
                            materia.actualizarhtml = True
                            materia.save()
                        return JsonResponse({"result": "ok"})

                    # if CoordinadorCarrera.objects.filter(status=True, carrera=material.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                    #     coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=material.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                    #     correo = coordinadordecarrera.persona.lista_emails_envio()
                    #     # nombredocente = coordinadordecarrera.persona
                    #     # estado = 'APROBADO'
                    #     cuenta = CUENTAS_CORREOS[3][1]
                    #     # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                    #     #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                    #     #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                    #     return JsonResponse({"result": "ok"})

                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s" % ex})

            elif action == 'estadocorrectoalternativa':
                try:
                    periodolec = Periodo.objects.get(pk=request.POST['periodoid'])
                    if periodolec.visiblehorario:
                        periodolec.visiblehorario = False
                    else:
                        periodolec.visiblehorario = True
                    log(u'Edit estado visible horario (%s) periodo lectivo: %s' % (
                        periodolec.visiblehorario, periodolec), request, "edit")
                    periodolec.save(request)
                    return JsonResponse({'result': 'ok', 'valor': periodolec.visiblehorario})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addsubtemaposgrado':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(request.POST['id']))
                    tema = TemaUnidadResultadoProgramaAnalitico.objects.get(pk=int(request.POST['idtemaanalitico']))
                    i = 0
                    if 'lista_items4' in request.POST:
                        SubtemaUnidadResultadoProgramaAnaliticoPosgrado.objects.filter(status=True, temaunidadresultadoprogramaanalitico=tema, silabosemanal=silabosemana).update(status=False)
                        subtemas = [x['bibliografiaexterna'] for x in json.loads(request.POST['lista_items4'])]
                        for x in subtemas:
                            i = i + 1
                            subtemas = SubtemaUnidadResultadoProgramaAnaliticoPosgrado(temaunidadresultadoprogramaanalitico=tema,
                                                                                       descripcion=x,
                                                                                       silabosemanal=silabosemana,
                                                                                       orden=i)
                            subtemas.save(request)
                            log(u'Adicinó sub tema de unidad de resultado de programa analitico: %s %s' % (subtemas.temaunidadresultadoprogramaanalitico.unidadresultadoprogramaanalitico.contenidoresultadoprogramaanalitico.programaanaliticoasignatura.asignaturamalla.asignatura.nombre, subtemas), request, "add")

                            ingresosubt = DetalleSilaboSemanalSubtemaPosgrado(silabosemanal=silabosemana,
                                                                              subtemaunidadresultadoprogramaanaliticoposgrado=subtemas)
                            ingresosubt.save(request)
                            log(u'Adicionó Nuevo Sub Tema: %s de la Planificación ha la Semanal: %s' % (ingresosubt, silabosemana.semana), request, "add")
                    silabosemana.modifico_silabo(persona, request)
                    # if 'lista_items4' in request.POST:
                    #     subtemas = [x['bibliografiaexterna'] for x in json.loads(request.POST['lista_items4'])]
                    #     for subtema in subtemas:
                    #         # if not BibliograbiaAPASilabo.objects.filter(silabosemanal_id=silabosemana.id, bibliografia=apa).exists():
                    #         #     bapa = BibliograbiaAPASilabo(silabosemanal_id=silabosemana.id, bibliografia=apa)
                    #         #     bapa.save(request)
                    #         #     log(u'Adicionó Bibliografia Apa: %s al sílabo de la materia %s:' % (bapa, bapa.silabosemanal.silabo.materia), request, "add")
                    return JsonResponse({"result": "ok"}, )
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editactividades':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(request.POST['id']))
                    if 'lista_items3' in request.POST:
                        actividades = json.loads(request.POST['lista_items3'])
                        for actividad in json.loads(request.POST['lista_items3']):
                            if not DetalleSilaboSemanalActividadesMoodle.objects.filter(silabosemanal_id=silabosemana.id, actividadesmoodle_id=actividad,status=True).exists():
                                detab = DetalleSilaboSemanalActividadesMoodle(silabosemanal_id=silabosemana.id,
                                                                              actividadesmoodle_id=actividad)
                                detab.save(request)
                                log(u'Adicionó nueva Actividad: %s al sílabo de la materia %s:' % (detab.actividadesmoodle.descripcion, detab.silabosemanal.silabo.materia), request, "add")
                        if silabosemana.detallesilabosemanalactividadesmoodle_set.all().exclude(actividadesmoodle_id__in=actividades):
                            for actividad in silabosemana.detallesilabosemanalactividadesmoodle_set.all().exclude(actividadesmoodle_id__in=actividades):
                                log(u'Eliminó Actividad Moodle: %s al sílabo de la materia %s:' % (actividad.actividadesmoodle.descripcion, actividad.silabosemanal.silabo.materia), request, "del")
                            silabosemana.detallesilabosemanalactividadesmoodle_set.all().exclude(actividadesmoodle_id__in=actividades).update(status=False)
                    return JsonResponse({"result": "ok"}, )
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'detallehistorialtarea':
                try:
                    data['historialaprobacion'] = historialaprobacion = HistorialaprobacionTarea.objects.get(pk=int(request.POST['id']))
                    data['historialdettarea'] = HistorialDetalleListaVerificacionTarea.objects.filter(status=True, historialaprobaciontarea=historialaprobacion.id)

                    template = get_template("pro_planificacion/detallehistorialtarea.html")

                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'html': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'detallehistorialforo':
                try:
                    data['historialaprobacion'] = historialaprobacion = HistorialaprobacionForo.objects.get(
                        pk=int(request.POST['id']))
                    data['historialdetforo'] = HistorialDetalleListaVerificacionForo.objects.filter(status=True,
                                                                                                    historialaprobacionforo=historialaprobacion.id)

                    template = get_template("pro_planificacion/detallehistorialforo.html")

                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'html': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'detallehistorialtest':
                try:
                    data['historialaprobacion'] = historialaprobacion = HistorialaprobacionTest.objects.get(pk=int(request.POST['id']))
                    data['historialdettest'] = HistorialDetalleListaVerificacionTest.objects.filter(status=True, historialaprobaciontest=historialaprobacion.id)

                    template = get_template("pro_planificacion/detallehistorialtest.html")

                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'html': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'detallehistorialguiaestudiante':
                try:
                    data['historialaprobacion'] = historialaprobacion = HistorialaprobacionGuiaEstudiante.objects.get(pk=int(request.POST['id']))
                    data['historialdetguiaest'] = HistorialDetalleListaVerificacionGuiaEstudiante.objects.filter(status=True, historialaprobacionguiaestudiante=historialaprobacion.id)

                    template = get_template("pro_planificacion/detallehistorialguiaestudiante.html")

                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'html': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'detallehistorialguiadocente':
                try:
                    data['historialaprobacion'] = historialaprobacion = HistorialaprobacionGuiaDocente.objects.get(pk=int(request.POST['id']))
                    data['historialdetguiadoc'] = HistorialDetalleListaVerificacionGuiaDocente.objects.filter(status=True, historialaprobacionguiadocente=historialaprobacion.id)

                    template = get_template("pro_planificacion/detallehistorialguiadocente.html")

                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'html': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'detallehistorialdiapositiva':
                try:
                    data['historialaprobacion'] = historialaprobacion = HistorialaprobacionDiapositiva.objects.get(pk=int(request.POST['id']))
                    data['historialdetdiap'] = HistorialDetalleListaVerificacionDiapositiva.objects.filter(status=True, historialaprobaciondiapositiva=historialaprobacion.id)

                    template = get_template("pro_planificacion/detallehistorialdiapositiva.html")

                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'html': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'detallehistorialcompendio':
                try:
                    data['historialaprobacion'] = historialaprobacion = HistorialaprobacionCompendio.objects.get(pk=int(request.POST['id']))
                    data['historialdetcompendio'] = HistorialDetalleListaVerificacionCompendio.objects.filter(status=True, historialaprobacioncompendio=historialaprobacion.id)

                    template = get_template("pro_planificacion/detallehistorialcompendio.html")

                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'html': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'detallehistorialmaterial':
                try:
                    data['historialaprobacion'] = historialaprobacion = HistorialaprobacionMaterial.objects.get(pk=int(request.POST['id']))
                    data['historialdetmaterial'] = HistorialDetalleListaVerificacionMaterialAdicional.objects.filter(status=True, historialaprobacionmaterial=historialaprobacion.id)

                    template = get_template("pro_planificacion/detallehistorialmaterial.html")

                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'html': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'detallehistorialtareapractica':
                try:
                    data['historialaprobacion'] = historialaprobacion = HistorialaprobacionTareaPractica.objects.get(pk=int(request.POST['id']))
                    data['historialdettareap'] = HistorialDetalleListaVerificacionTareaPractica.objects.filter(status=True, historialaprobaciontareapractica=historialaprobacion.id)

                    template = get_template("pro_planificacion/detallehistorialtareapractica.html")

                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'html': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'detalletarea':
                try:
                    tipo = int(request.POST['codtipo'])
                    if tipo == 1:
                        data['tarea'] = tarea = TareaSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = tarea.historialaprobaciontarea_set.filter(status=True).order_by('id')
                        data['listadoactividades'] = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje=tarea.actividad, evaluacion__silabosemanal=tarea.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                        data['tiene_rubrica'] = False
                        if tarea.rubricamoodle:
                            data['tiene_rubrica'] = True
                            arreglo = []
                            arreglosumatoria = []
                            arreglo_aux = []
                            data['rubrica'] = r = tarea.rubricamoodle
                            data['criterios'] = criterios = r.itemrubricamoodle_set.filter(status=True).order_by('orden')
                            detalles = DetalleItemRubricaMoodle.objects.filter(status=True, item__rubrica=r)
                            ordenmaximo = detalles.order_by('-orden')[0].orden
                            i = 1
                            while i <= ordenmaximo:
                                sumatoria = int(null_to_decimal(detalles.filter(orden=i).aggregate(sumatoria=Sum('valor'))['sumatoria'], 0))
                                arreglosumatoria.append(sumatoria)
                                i += 1

                            for c in criterios:
                                arreglo_aux.append([c.item, ''])
                                for d in c.detalleitemrubricamoodle_set.filter(status=True).order_by('orden'):
                                    arreglo_aux.append([d.descripcion, d.valor])
                                arreglo.append(arreglo_aux)
                                arreglo_aux = []
                            data['arreglo'] = arreglo
                            data['arreglosumatoria'] = arreglosumatoria

                        template = get_template("pro_planificacion/detalletarea.html")
                    if tipo == 2:
                        data['foro'] = foro = ForoSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['listadoactividades'] = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje_id=6, evaluacion__silabosemanal=foro.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                        data['historialaprobacion'] = foro.historialaprobacionforo_set.filter(status=True).order_by('id')
                        template = get_template("pro_planificacion/detalleforo.html")
                    if tipo == 3:
                        data['test'] = test = TestSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['listadoactividades'] = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje_id=1, evaluacion__silabosemanal=test.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                        data['historialaprobacion'] = test.historialaprobaciontest_set.filter(status=True).order_by('id')
                        template = get_template("pro_planificacion/detalletest.html")
                    if tipo == 4:
                        data['guiaestudiante'] = guiaestudiante = GuiaEstudianteSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = guiaestudiante.historialaprobacionguiaestudiante_set.filter(status=True).order_by('id')
                        data['formatos'] = guiaestudiante.mis_formatos(periodo)
                        template = get_template("pro_planificacion/detalleguiaestudiante.html")
                    if tipo == 5:
                        data['guiadocente'] = guiadocente = GuiaDocenteSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = guiadocente.historialaprobacionguiadocente_set.filter(status=True).order_by('id')
                        template = get_template("pro_planificacion/detalleguiadocente.html")
                    if tipo == 6:
                        data['diapositiva'] = diapositiva = DiapositivaSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = diapositiva.historialaprobaciondiapositiva_set.filter(status=True).order_by('id')
                        data['formatos'] = diapositiva.mis_formatos(periodo)
                        template = get_template("pro_planificacion/detallediapositiva.html")
                    if tipo == 7:
                        data['compendio'] = compendio = CompendioSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = compendio.historialaprobacioncompendio_set.filter(status=True).order_by('id')
                        data['formatos'] = compendio.mis_formatos(periodo)
                        template = get_template("pro_planificacion/detallecompendio.html")
                    if tipo == 8:
                        data['material'] = material = MaterialAdicionalSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = material.historialaprobacionmaterial_set.filter(status=True).order_by('id')
                        template = get_template("pro_planificacion/detallematerial.html")
                    if tipo == 9:
                        data['videomagistral'] = videomagistral = VideoMagistralSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = videomagistral.historialaprobacionvideomagistral_set.filter(status=True).order_by('id')
                        template = get_template("pro_planificacion/detallevideomagistral.html")
                    if tipo == 10:
                        data['practica'] = practica = TareaPracticaSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['listadoactividades'] = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje_id=4, evaluacion__silabosemanal=practica.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                        data['historialaprobacion'] = practica.historialaprobaciontareapractica_set.filter(status=True).order_by('id')
                        data['tiene_rubrica'] = False
                        if practica.rubricamoodle:
                            data['tiene_rubrica'] = True
                            arreglo = []
                            arreglosumatoria = []
                            arreglo_aux = []
                            data['rubrica'] = r = practica.rubricamoodle
                            data['criterios'] = criterios = r.itemrubricamoodle_set.filter(status=True).order_by('orden')
                            detalles = DetalleItemRubricaMoodle.objects.filter(status=True, item__rubrica=r)
                            ordenmaximo = detalles.order_by('-orden')[0].orden
                            i = 1
                            while i <= ordenmaximo:
                                sumatoria = int(null_to_decimal(detalles.filter(orden=i).aggregate(sumatoria=Sum('valor'))['sumatoria'], 0))
                                arreglosumatoria.append(sumatoria)
                                i += 1

                            for c in criterios:
                                arreglo_aux.append([c.item, ''])
                                for d in c.detalleitemrubricamoodle_set.filter(status=True).order_by('orden'):
                                    arreglo_aux.append([d.descripcion, d.valor])
                                arreglo.append(arreglo_aux)
                                arreglo_aux = []
                            data['arreglo'] = arreglo
                            data['arreglosumatoria'] = arreglosumatoria
                        template = get_template("pro_planificacion/detalletareapractica.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'detalletarea_pregrado':
                try:
                    tipo = int(request.POST['codtipo'])
                    if tipo == 1:
                        data['tarea'] = tarea = TareaSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = tarea.historialaprobaciontarea_set.filter(status=True).order_by('id')
                        data['listadoactividades'] = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje=tarea.actividad, evaluacion__silabosemanal=tarea.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                        data['tiene_rubrica'] = False
                        if tarea.rubricamoodle:
                            data['tiene_rubrica'] = True
                            arreglo = []
                            arreglosumatoria = []
                            arreglo_aux = []
                            data['rubrica'] = r = tarea.rubricamoodle
                            data['criterios'] = criterios = r.itemrubricamoodle_set.filter(status=True).order_by('orden')
                            detalles = DetalleItemRubricaMoodle.objects.filter(status=True, item__rubrica=r)
                            ordenmaximo = detalles.order_by('-orden')[0].orden
                            i = 1
                            while i <= ordenmaximo:
                                sumatoria = int(null_to_decimal(detalles.filter(orden=i).aggregate(sumatoria=Sum('valor'))['sumatoria'], 0))
                                arreglosumatoria.append(sumatoria)
                                i += 1

                            for c in criterios:
                                arreglo_aux.append([c.item, ''])
                                for d in c.detalleitemrubricamoodle_set.filter(status=True).order_by('orden'):
                                    arreglo_aux.append([d.descripcion, d.valor])
                                arreglo.append(arreglo_aux)
                                arreglo_aux = []
                            data['arreglo'] = arreglo
                            data['arreglosumatoria'] = arreglosumatoria

                        template = get_template("pro_planificacion/detalletareavdos.html")
                    if tipo == 2:
                        data['foro'] = foro = ForoSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['listadoactividades'] = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje_id=6, evaluacion__silabosemanal=foro.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                        data['historialaprobacion'] = foro.historialaprobacionforo_set.filter(status=True).order_by('id')
                        template = get_template("pro_planificacion/detalleforovdos.html")
                    if tipo == 3:
                        data['test'] = test = TestSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['listadoactividades'] = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje_id=1, evaluacion__silabosemanal=test.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                        data['historialaprobacion'] = test.historialaprobaciontest_set.filter(status=True).order_by('id')
                        template = get_template("pro_planificacion/detalletestvdos.html")
                    if tipo == 4:
                        data['guiaestudiante'] = guiaestudiante = GuiaEstudianteSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = guiaestudiante.historialaprobacionguiaestudiante_set.filter(status=True).order_by('id')
                        data['formatos'] = guiaestudiante.mis_formatos(periodo)
                        template = get_template("pro_planificacion/detalleguiaestudiantevdos.html")
                    if tipo == 5:
                        data['guiadocente'] = guiadocente = GuiaDocenteSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = guiadocente.historialaprobacionguiadocente_set.filter(status=True).order_by('id')
                        template = get_template("pro_planificacion/detalleguiadocentevdos.html")
                    if tipo == 6:
                        data['diapositiva'] = diapositiva = DiapositivaSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = diapositiva.historialaprobaciondiapositiva_set.filter(status=True).order_by('id')
                        data['formatos'] = diapositiva.mis_formatos(periodo)
                        template = get_template("pro_planificacion/detallediapositivavdos.html")
                    if tipo == 7:
                        data['compendio'] = compendio = CompendioSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = compendio.historialaprobacioncompendio_set.filter(status=True).order_by('id')
                        data['formatos'] = compendio.mis_formatos(periodo)
                        template = get_template("pro_planificacion/detallecompendiovdos.html")
                    if tipo == 8:
                        data['material'] = material = MaterialAdicionalSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = material.historialaprobacionmaterial_set.filter(status=True).order_by('id')
                        template = get_template("pro_planificacion/detallematerialvdos.html")
                    if tipo == 9:
                        data['videomagistral'] = videomagistral = VideoMagistralSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = videomagistral.historialaprobacionvideomagistral_set.filter(status=True).order_by('id')
                        template = get_template("pro_planificacion/detallevideomagistral.html")
                    if tipo == 10:
                        data['practica'] = practica = TareaPracticaSilaboSemanal.objects.get(pk=int(request.POST['idtar']))
                        data['listadoactividades'] = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje_id=4, evaluacion__silabosemanal=practica.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                        data['historialaprobacion'] = practica.historialaprobaciontareapractica_set.filter(status=True).order_by('id')
                        data['tiene_rubrica'] = False
                        if practica.rubricamoodle:
                            data['tiene_rubrica'] = True
                            arreglo = []
                            arreglosumatoria = []
                            arreglo_aux = []
                            data['rubrica'] = r = practica.rubricamoodle
                            data['criterios'] = criterios = r.itemrubricamoodle_set.filter(status=True).order_by('orden')
                            detalles = DetalleItemRubricaMoodle.objects.filter(status=True, item__rubrica=r)
                            ordenmaximo = detalles.order_by('-orden')[0].orden
                            i = 1
                            while i <= ordenmaximo:
                                sumatoria = int(null_to_decimal(detalles.filter(orden=i).aggregate(sumatoria=Sum('valor'))['sumatoria'], 0))
                                arreglosumatoria.append(sumatoria)
                                i += 1

                            for c in criterios:
                                arreglo_aux.append([c.item, ''])
                                for d in c.detalleitemrubricamoodle_set.filter(status=True).order_by('orden'):
                                    arreglo_aux.append([d.descripcion, d.valor])
                                arreglo.append(arreglo_aux)
                                arreglo_aux = []
                            data['arreglo'] = arreglo
                            data['arreglosumatoria'] = arreglosumatoria
                        template = get_template("pro_planificacion/detalletareapracticavdos.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'detalletareaadmision':
                try:
                    tipo = int(request.POST['codtipo'])
                    if tipo == 3:
                        data['test'] = test = TestSilaboSemanalAdmision.objects.get(pk=int(request.POST['idtar']))
                        data['historialaprobacion'] = test.historialaprobaciontestadmision_set.filter(status=True).order_by('id')
                        template = get_template("pro_planificacion/detalletestadmision.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'actualizarlink':
                try:
                    test = TestSilaboSemanal.objects.get(pk=int(int(request.POST['idtest'])))
                    test.url = request.POST['id_link']
                    test.save(request)
                    materia = test.silabosemanal.silabo.materia
                    materia.actualizarhtml = True
                    materia.save()
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'actualizarlinkadmision':
                try:
                    tipo = int(request.POST['tipo'])
                    test = TestSilaboSemanalAdmision.objects.get(pk=int(int(request.POST['idtest'])))
                    if tipo == 1:
                        test.url1 = request.POST['id_link']
                    if tipo == 2:
                        test.url2 = request.POST['id_linkdos']
                    test.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'notificacionmasiva':
                try:
                    materia = Materia.objects.get(pk=request.POST['materia'])
                    if CoordinadorCarrera.objects.filter(status=True, carrera=materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3):
                        coordinadordecarrera = CoordinadorCarrera.objects.filter(status=True, carrera=materia.asignaturamalla.malla.carrera, periodo=periodo, sede=1, tipo=3)[0]
                        correo = coordinadordecarrera.persona.lista_emails_envio()
                        # nombredocente = coordinadordecarrera.persona
                        # estado = 'APROBADO'
                        cuenta = CUENTAS_CORREOS[3][1]
                        # send_html_mail("SGA - PLANIFICACIÓN DE RECURSOS.", "emails/recursonotificacionpararevision.html",
                        #                {'sistema': request.session['nombresistema'], 'persona': persona, 'materia': materia,
                        #                 't': miinstitucion()}, correo, [], cuenta=cuenta)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'actualizarsilabomoodle':
                try:
                    if periodo.clasificacion == 3:
                        from Moodle_Funciones import crearhtmlphpmoodleadmision
                    else:
                        from Moodle_Funciones import crearhtmlphpmoodle
                    materia = Materia.objects.get(pk=request.POST['materia'])
                    if not materia.actualizarhtml:
                        materia.actualizarhtml = True
                        materia.save(request)
                    # crearhtmlphpmoodle(request.POST['materia'])
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'detalle_rubrica':
                try:
                    if 'id' in request.POST:
                        arreglo = []
                        arreglosumatoria = []
                        arreglo_aux = []
                        data['rubrica'] = r = RubricaMoodle.objects.get(id=int(request.POST['id']))
                        data['criterios'] = criterios = r.itemrubricamoodle_set.filter(status=True).order_by('orden')
                        detalles = DetalleItemRubricaMoodle.objects.filter(status=True, item__rubrica=r)
                        ordenmaximo = detalles.order_by('-orden')[0].orden
                        i = 1
                        while i <= ordenmaximo:
                            sumatoria = int(null_to_decimal(detalles.filter(orden=i).aggregate(sumatoria=Sum('valor'))['sumatoria'], 0))
                            arreglosumatoria.append(sumatoria)
                            i += 1

                        for c in criterios:
                            arreglo_aux.append([c.item, ''])
                            for d in c.detalleitemrubricamoodle_set.filter(status=True).order_by('orden'):
                                arreglo_aux.append([d.descripcion, d.valor])
                            arreglo.append(arreglo_aux)
                            arreglo_aux = []
                        data['arreglo'] = arreglo
                        data['arreglosumatoria'] = arreglosumatoria
                        template = get_template("pro_planificacion/detalle_rubrica.html")
                        json_content = template.render(data)
                        return JsonResponse({"result": "ok", 'data': json_content, 'title': u'Nombre: %s' % r.nombre})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addrubrica':
                try:
                    f = RubricaProfesorForm(request.POST)
                    if f.is_valid():
                        rubrica = RubricaMoodle(nombre=f.cleaned_data['nombre'],
                                                tipotarea=f.cleaned_data['tipotarea'],
                                                estado=f.cleaned_data['estado'],
                                                profesor=profesor)
                        rubrica.save(request)
                        log(u'Adiciono rubrica moodle (profesor): %s' % rubrica, request, "add")
                        return JsonResponse({"result": "ok", "id": encrypt(rubrica.id)})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'additemrubrica':
                try:
                    f = CriterioRubricaForm(request.POST)
                    if f.is_valid():
                        rubrica = RubricaMoodle.objects.get(pk=request.POST['id'])
                        item = ItemRubricaMoodle(rubrica=rubrica,
                                                 item=f.cleaned_data['item'],
                                                 orden=f.cleaned_data['orden'])
                        item.save(request)
                        log(u'Adiciono criterio rubrica moodle (profesor): %s' % item, request, "add")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'adddetallerubrica':
                try:
                    f = DetalleCriterioRubricaForm(request.POST)
                    if f.is_valid():
                        item = ItemRubricaMoodle.objects.get(pk=request.POST['id'])
                        detalle = DetalleItemRubricaMoodle(item=item,
                                                           descripcion=f.cleaned_data['descripcion'],
                                                           valor=f.cleaned_data['valor'],
                                                           orden=f.cleaned_data['orden'])
                        detalle.save(request)
                        log(u'Adiciono detalle criterio rubrica moodle (profesor): %s' % item, request, "add")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editrubrica':
                try:
                    rubrica = RubricaMoodle.objects.get(pk=request.POST['id'])
                    f = RubricaProfesorForm(request.POST)
                    if f.is_valid():
                        rubrica.nombre = f.cleaned_data['nombre']
                        rubrica.tipotarea = f.cleaned_data['tipotarea']
                        rubrica.estado = f.cleaned_data['estado']
                        rubrica.save(request)
                        log(u'Modifico rubrica moodle (profesor): %s' % rubrica, request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'edititemrubrica':
                try:
                    item = ItemRubricaMoodle.objects.get(pk=request.POST['id'])
                    f = CriterioRubricaForm(request.POST)
                    if f.is_valid():
                        item.item = f.cleaned_data['item']
                        item.orden = f.cleaned_data['orden']
                        item.save(request)
                        log(u'Modifico criterio rubrica moodle (profesor): %s' % item, request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'editdetallerubrica':
                try:
                    detalle = DetalleItemRubricaMoodle.objects.get(pk=request.POST['id'])
                    f = DetalleCriterioRubricaForm(request.POST)
                    if f.is_valid():
                        detalle.descripcion = f.cleaned_data['descripcion']
                        detalle.orden = f.cleaned_data['orden']
                        detalle.valor = f.cleaned_data['valor']
                        detalle.save(request)
                        log(u'Modifico detalle criterio rubrica moodle (profesor): %s' % detalle, request, "edit")
                        return JsonResponse({"result": "ok"})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delrubrica':
                try:
                    r = RubricaMoodle.objects.get(pk=int(request.POST['id']), status=True)
                    if not r.en_uso():
                        log(u'Eliminó la rubrica moodle (profesor): %s' % r, request, "del")
                        r.status = False
                        r.save(request)
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse(
                            {"result": "bad", "mensaje": u"No se puede eliminar ya se encuentra en uso."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delitemrubrica':
                try:
                    r = ItemRubricaMoodle.objects.get(pk=int(request.POST['id']), status=True)
                    if not r.en_uso():
                        log(u'Eliminó el criterio rubrica moodle (profesor): %s' % r, request, "del")
                        r.status = False
                        r.save(request)
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse(
                            {"result": "bad", "mensaje": u"No se puede eliminar ya se encuentra en uso."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'deldetallerubrica':
                try:
                    r = DetalleItemRubricaMoodle.objects.get(pk=int(request.POST['id']), status=True)
                    if not r.en_uso():
                        log(u'Eliminó el detalle criterio rubrica moodle (profesor): %s' % r, request, "del")
                        r.status = False
                        r.save(request)
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse(
                            {"result": "bad", "mensaje": u"No se puede eliminar ya se encuentra en uso."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'addlinkvideo':
                try:
                    linkvideo = HorarioExamenDetalle.objects.get(pk=request.POST['codhorarioexamen'])
                    linkvideo.enlaceuno = request.POST['observacion']
                    linkvideo.enlacedos = request.POST['enlace2']
                    linkvideo.enlacetres = request.POST['enlace3']
                    linkvideo.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'addurlexamen':
                try:
                    with transaction.atomic():
                        if LinkMateriaExamen.objects.filter(status=True, materia_id=int(request.POST['id'])).exists():
                            transaction.set_rollback(True)
                            return JsonResponse({"result": True, "mensaje": "Ya tiene un LINK de examen registrado."}, safe=False)
                        form = LinkMateriaExamenForm(request.POST)
                        if form.is_valid():
                            materia = Materia.objects.get(pk=int(request.POST['id']))
                            materia.actualizarhtml = True
                            materia.save(request)
                            filtro = LinkMateriaExamen(nombre=form.cleaned_data['nombre'],
                                                       fecha=form.cleaned_data['fecha'],
                                                       horainicio=form.cleaned_data['horainicio'],
                                                       horafin=form.cleaned_data['horafin'],
                                                       materia_id=int(request.POST['id']),
                                                       linkexamen=form.cleaned_data['linkexamen'])
                            filtro.save(request)
                            log(u'Adiciono Link Examen Materia: %s' % filtro, request, "add")
                            return JsonResponse({"result": False}, safe=False)
                        else:
                            transaction.set_rollback(True)
                            return JsonResponse({"result": True, "mensaje": "Complete los datos requeridos."},
                                                safe=False)
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": True, "mensaje": "Intentelo más tarde."}, safe=False)

            elif action == 'editurlexamen':
                try:
                    with transaction.atomic():
                        filtro = LinkMateriaExamen.objects.get(pk=request.POST['id'])
                        f = LinkMateriaExamenForm(request.POST)
                        if f.is_valid():
                            filtro.nombre = f.cleaned_data['nombre']
                            filtro.linkexamen = f.cleaned_data['linkexamen']
                            filtro.fecha = f.cleaned_data['fecha']
                            filtro.horainicio = f.cleaned_data['horainicio']
                            filtro.horafin = f.cleaned_data['horafin']
                            filtro.save(request)
                            materia = Materia.objects.get(pk=filtro.materia.pk)
                            materia.actualizarhtml = True
                            materia.save(request)
                            log(u'Modificó Link Examen Materia: %s' % filtro, request, "edit")
                            return JsonResponse({"result": False}, safe=False)
                        else:
                            transaction.set_rollback(True)
                            return JsonResponse({"result": True, "mensaje": "Complete los datos requeridos."},
                                                safe=False)
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": True, "mensaje": "Intentelo más tarde."}, safe=False)

            elif action == 'delurlexamen':
                try:
                    filtro = LinkMateriaExamen.objects.get(pk=request.POST['id'])
                    log(u'Elimino Link Examen Materia: %s - [%s]' % (filtro, filtro.id), request, "del")
                    filtro.status = False
                    filtro.save()
                    materia = Materia.objects.get(pk=filtro.materia.pk)
                    materia.actualizarhtml = True
                    materia.save(request)
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al eliminar los datos."})

            elif action == 'addexamen':
                try:
                    f = ExamenSilaboSemanalForm(request.POST)
                    if f.is_valid():
                        silabo = Silabo.objects.get(pk=int(encrypt(request.POST['silabo'])))
                        numerosemana = int(encrypt(request.POST['numerosemana']))
                        clase = PlanificacionClaseSilabo.objects.get(id=int(encrypt(request.POST['clase'])))
                        if f.cleaned_data['modeloevaluativo'].password and not f.cleaned_data['password']:
                            return JsonResponse({"result": "bad", "mensaje": u"Debe ingresar una clave"})
                        if SilaboSemanal.objects.filter(status=True, silabo=silabo, numsemana=numerosemana).exists():
                            silabosemanal = SilaboSemanal.objects.filter(status=True, silabo=silabo, numsemana=numerosemana)[0]
                            if not silabosemanal.examen:
                                silabosemanal.examen = True
                                silabosemanal.save(request)
                        else:
                            silabosemanal = SilaboSemanal(silabo=silabo, numsemana=numerosemana,
                                                          fechainiciosemana=clase.fechainicio,
                                                          fechafinciosemana=clase.fechafin, examen=True,
                                                          semana=clase.fechainicio.isocalendar()[1])
                            silabosemanal.save(request)
                        testsilabo = TestSilaboSemanal(detallemodelo=f.cleaned_data['modeloevaluativo'],
                                                       silabosemanal=silabosemanal,
                                                       estado_id=2,
                                                       calificar=True,
                                                       nombretest=f.cleaned_data['nombretest'],
                                                       instruccion=f.cleaned_data['instruccion'],
                                                       recomendacion=f.cleaned_data['recomendacion'],
                                                       fechadesde=f.cleaned_data['fechadesde'],
                                                       horadesde=f.cleaned_data['horadesde'],
                                                       fechahasta=f.cleaned_data['fechahasta'],
                                                       horahasta=f.cleaned_data['horahasta'],
                                                       vecesintento=f.cleaned_data['vecesintento'],
                                                       navegacion=f.cleaned_data['navegacion'],
                                                       tiempoduracion=f.cleaned_data['tiempoduracion'],
                                                       tiporecurso_id=11,
                                                       password=f.cleaned_data['password'])
                        testsilabo.save(request)
                        return JsonResponse({'result': 'ok'})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'addexamenadmision':
                try:
                    f = TestSilaboSemanalAdmForm(request.POST)
                    if f.is_valid():
                        silabo = Silabo.objects.get(pk=int(encrypt(request.POST['silabo'])))
                        numerosemana = int(encrypt(request.POST['numerosemana']))
                        clase = PlanificacionClaseSilabo.objects.get(id=int(encrypt(request.POST['clase'])))
                        if f.cleaned_data['modeloevaluativo'].password and not f.cleaned_data['password']:
                            return JsonResponse({"result": "bad", "mensaje": u"Debe ingresar una clave"})
                        if SilaboSemanal.objects.filter(status=True, silabo=silabo, numsemana=numerosemana).exists():
                            silabosemanal = SilaboSemanal.objects.filter(status=True, silabo=silabo, numsemana=numerosemana)[0]
                            if not silabosemanal.examen:
                                silabosemanal.examen = True
                                silabosemanal.save(request)
                        else:
                            silabosemanal = SilaboSemanal(silabo=silabo, numsemana=numerosemana,
                                                          fechainiciosemana=clase.fechainicio,
                                                          fechafinciosemana=clase.fechafin, examen=True,
                                                          semana=clase.fechainicio.isocalendar()[1])
                            silabosemanal.save(request)
                        testsilabo = TestSilaboSemanalAdmision(silabosemanal=silabosemanal,
                                                               detallemodelo=f.cleaned_data['modeloevaluativo'],
                                                               estado_id=2,
                                                               horainicio=f.cleaned_data['horadesde'],
                                                               fechahasta=f.cleaned_data['fechahasta'],
                                                               horafin=f.cleaned_data['horahasta'],
                                                               vecesintento=f.cleaned_data['vecesintento'],
                                                               navegacion=f.cleaned_data['navegacion'],
                                                               esquemapregunta=f.cleaned_data['esquemapregunta'],
                                                               tiempoduracion=f.cleaned_data['tiempoduracion'],
                                                               calificar=True,
                                                               titulo=f.cleaned_data['titulo'],
                                                               descripcion=f.cleaned_data['descripcion'],
                                                               fecha=f.cleaned_data['fechadesde'],
                                                               password=f.cleaned_data['password']
                                                               )
                        testsilabo.save(request)
                        return JsonResponse({'result': 'ok'})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"Error, al guardar los datos."})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({'result': 'bad', 'mensaje': u'Error al guardar los datos'})

            elif action == 'editexamen':
                try:
                    testsilabo = TestSilaboSemanal.objects.get(pk=int(encrypt(request.POST['id'])))
                    form = ExamenSilaboSemanalForm(request.POST)
                    if form.is_valid():
                        testsilabo.instruccion = form.cleaned_data['instruccion']
                        testsilabo.recomendacion = form.cleaned_data['recomendacion']
                        testsilabo.fechadesde = form.cleaned_data['fechadesde']
                        testsilabo.horadesde = form.cleaned_data['horadesde']
                        testsilabo.fechahasta = form.cleaned_data['fechahasta']
                        testsilabo.horahasta = form.cleaned_data['horahasta']
                        testsilabo.vecesintento = form.cleaned_data['vecesintento']
                        testsilabo.tiempoduracion = form.cleaned_data['tiempoduracion']
                        testsilabo.navegacion = form.cleaned_data['navegacion']
                        testsilabo.password = form.cleaned_data['password']
                        testsilabo.save(request)
                        if testsilabo.estado_id == 4:
                            from Moodle_Funciones import CrearExamenMoodle
                            value, msg = CrearExamenMoodle(testsilabo.id, persona)
                            if not value:
                                raise NameError(msg)
                            materia = testsilabo.silabosemanal.silabo.materia
                            materia.actualizarhtml = True
                            materia.save()
                        return JsonResponse({'result': 'ok'})
                    else:
                        raise NameError('Error')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos. %s" % ex})

            elif action == 'generarmasivo':
                try:
                    silabo = Silabo.objects.get(pk=int(encrypt(request.POST['id'])))
                    url = '/media/recursos_zip/silabo_%s.zip' % (encrypt(silabo.id))

                    # directory_principal = os.path.join(SITE_STORAGE, 'media', 'recursos_zip')
                    # try:
                    #     os.stat(directory_principal)
                    # except:
                    #     os.mkdir(directory_principal)

                    fantasy_zip = zipfile.ZipFile(SITE_STORAGE + url, 'w')
                    # fantasy_zip = zipfile.ZipFile(directory_principal+"silabo_%s.zip"%(encrypt(silabo.id)), 'w')
                    for diapositiva in DiapositivaSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo):
                        if diapositiva.archivodiapositiva:
                            ext = diapositiva.archivodiapositiva.__str__()[diapositiva.archivodiapositiva.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + diapositiva.archivodiapositiva.url, '%s%s' % (diapositiva.nombre.replace(' ', '_'), ext.lower()))
                    for compendio in CompendioSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo):
                        if compendio.archivocompendio:
                            ext = compendio.archivocompendio.__str__()[compendio.archivocompendio.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + compendio.archivocompendio.url, '%s%s' % (compendio.descripcion.replace(' ', '_'), ext.lower()))
                        if compendio.archivoplagio:
                            ext = compendio.archivoplagio.__str__()[compendio.archivoplagio.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + compendio.archivoplagio.url, 'archivoplagio%s%s' % (compendio.id, ext.lower()))
                        if compendio.archivo_logo:
                            ext = compendio.archivo_logo.__str__()[compendio.archivo_logo.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + compendio.archivo_logo.url, 'compendio_archivologo%s%s' % (compendio.id, ext.lower()))
                        if compendio.archivo_sin_logo:
                            ext = compendio.archivo_sin_logo.__str__()[compendio.archivo_sin_logo.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + compendio.archivo_sin_logo.url, 'compendio_archivosinlogo%s%s' % (compendio.id, ext.lower()))
                    for guia in GuiaEstudianteSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo):
                        if guia.archivoguiaestudiante:
                            ext = guia.archivoguiaestudiante.__str__()[guia.archivoguiaestudiante.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + guia.archivoguiaestudiante.url, '%s%s' % (guia.observacion.replace(' ', '_'), ext.lower()))
                        if guia.archivo_logo:
                            ext = guia.archivo_logo.__str__()[guia.archivo_logo.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + guia.archivo_logo.url, 'guiaestudiante_archivologo%s%s' % (guia.id, ext.lower()))
                        if guia.archivo_sin_logo:
                            ext = guia.archivo_sin_logo.__str__()[guia.archivo_sin_logo.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + guia.archivo_sin_logo.url, 'guiaestudiante_archivosinlogo%s%s' % (guia.id, ext.lower()))

                    for tarea in TareaSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo):
                        nombredocumento_tarea = u"%s_%s" % (remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((tarea.nombre.__str__()).replace(' ', '_'))), random.randint(1, 100000).__str__())
                        ruta2_tarea = remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((tarea.silabosemanal.silabo.materia.asignatura.__str__()).replace(' ', '_')))

                        directory = os.path.join(SITE_STORAGE, 'media', 'reportetareasilabo', ruta2_tarea)
                        try:
                            os.stat(directory)
                        except:
                            os.mkdir(directory)

                        valida_tarea = conviert_html_to_pdf_parametros_save('pro_planificacion/reporte_tarea_pdf.html', {'pagesize': 'A4', 'data': data, },
                                                                            nombredocumento_tarea, 'reportetareasilabo', ruta2_tarea)
                        if valida_tarea:
                            tarea.reportetareasilabo = u"reportetareasilabo/%s/%s.pdf" % (ruta2_tarea, nombredocumento_tarea)
                            tarea.save(request)

                        if tarea.reportetareasilabo:
                            ext = tarea.reportetareasilabo.__str__()[tarea.reportetareasilabo.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + tarea.reportetareasilabo.url, '%s%s' % (tarea.nombre.replace(' ', '_'), ext.lower()))

                    for practica in TareaPracticaSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo):
                        nombredocumento_pract = u"%s_%s" % (remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((practica.nombre.__str__()).replace(' ', '_'))), random.randint(1, 100000).__str__())
                        ruta2_pract = remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((practica.silabosemanal.silabo.materia.asignatura.__str__()).replace(' ', '_')))
                        directory = os.path.join(SITE_STORAGE, 'media', 'reportetareapractica', ruta2_pract)
                        try:
                            os.stat(directory)
                        except:
                            os.mkdir(directory)
                        valida_pract = conviert_html_to_pdf_parametros_save('pro_planificacion/reporte_trabajopractico_pdf.html',
                                                                            {'pagesize': 'A4', 'data': data, },
                                                                            nombredocumento_pract, 'reportetareapractica', ruta2_pract)
                        if valida_pract:
                            practica.reportetareapracticasilabo = u"reportetareapractica/%s/%s.pdf" % (ruta2_pract, nombredocumento_pract)
                            practica.save(request)

                        if practica.reportetareapracticasilabo:
                            ext = practica.reportetareapracticasilabo.__str__()[practica.reportetareapracticasilabo.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + practica.reportetareapracticasilabo.url, '%s%s' % (practica.nombre.replace(' ', '_'), ext.lower()))

                    for test in TestSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo):
                        nombredocumento_test = u"%s_%s" % (remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((test.nombretest.__str__()).replace(' ', '_'))), random.randint(1, 100000).__str__())
                        ruta2_test = remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((test.silabosemanal.silabo.materia.asignatura.__str__()).replace(' ', '_')))
                        directory = os.path.join(SITE_STORAGE, 'media', 'reportetestsilabo', ruta2_test)
                        try:
                            os.stat(directory)
                        except:
                            os.mkdir(directory)
                        valida_test = conviert_html_to_pdf_parametros_save('pro_planificacion/reporte_test_pdf.html',
                                                                           {'pagesize': 'A4', 'data': data, },
                                                                           nombredocumento_test, 'reportetestsilabo', ruta2_test)
                        if valida_test:
                            test.reportetestsilabo = u"reportetestsilabo/%s/%s.pdf" % (ruta2_test, nombredocumento_test)
                            test.save(request)
                        if test.reportetestsilabo:
                            ext = test.reportetestsilabo.__str__()[test.reportetestsilabo.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + test.reportetestsilabo.url, '%s%s' % (test.nombretest.replace(' ', '_'), ext.lower()))

                    for foro in ForoSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo):
                        nombredocumento_foro = u"%s_%s" % (remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((foro.nombre.__str__()).replace(' ', '_'))), random.randint(1, 100000).__str__())
                        ruta2_foro = remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((foro.silabosemanal.silabo.materia.asignatura.__str__()).replace(' ', '_')))
                        directory = os.path.join(SITE_STORAGE, 'media', 'reporteforosilabo', ruta2_foro)
                        try:
                            os.stat(directory)
                        except:
                            os.mkdir(directory)
                        valida_foro = conviert_html_to_pdf_parametros_save('pro_planificacion/reporte_foro_pdf.html',
                                                                           {'pagesize': 'A4', 'data': data, },
                                                                           nombredocumento_foro, 'reporteforosilabo', ruta2_foro)
                        if valida_foro:
                            foro.reporteforosilabo = u"reporteforosilabo/%s/%s.pdf" % (ruta2_foro, nombredocumento_foro)
                            foro.save(request)

                        if foro.reporteforosilabo:
                            ext = foro.reporteforosilabo.__str__()[foro.reporteforosilabo.__str__().rfind("."):]
                            fantasy_zip.write(SITE_STORAGE + foro.reporteforosilabo.url, '%s%s' % (foro.nombre.replace(' ', '_'), ext.lower()))

                    fantasy_zip.close()
                    return JsonResponse({"result": "ok", "url": url})
                except Exception as ex:
                    print('Error %s' % (ex))

            elif action == 'verdetalleppl':
                try:
                    matricula = Matricula.objects.get(pk=int(encrypt(request.POST['idmatricula'])))
                    data['historialppl'] = HistorialPersonaPPL.objects.filter(persona=matricula.inscripcion.persona, status=True).order_by('fechaingreso')
                    template = get_template("pro_planificacion/verdetalleppl.html")
                    json_content = template.render(data)
                    return HttpResponse(json.dumps({"result": "ok", 'data': json_content}), content_type="application/json")
                except Exception as ex:
                    pass

            elif action == 'actualizarCalificacion':
                try:
                    if not 'idmap' in request.POST:
                        raise NameError(u"Parametro de materia asignada planificada no se encontro")
                    if not 'iddmev' in request.POST:
                        raise NameError(u"Parametro de detalle de modelo evaluativo no se encontro")
                    if not 'valor' in request.POST:
                        raise NameError(u"Parametro de calificación no se encontro")
                    if not MateriaAsignadaPlanificacionSedeVirtualExamen.objects.values("id").filter(pk=request.POST['idmap']):
                        raise NameError(u"Materia asignada planificada no se encontro")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.get(pk=request.POST['idmap'])
                    eDetalleModeloEvaluativos = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia.modeloevaluativo.campos()
                    if not eDetalleModeloEvaluativos.values("id").filter(pk=request.POST['iddmev']).exists():
                        raise NameError(u"Detalle modelo evaluativo no se encontro")
                    eDetalleModeloEvaluativo = eDetalleModeloEvaluativos.filter(pk=request.POST['iddmev']).first()
                    valor = null_to_decimal(float(request.POST['valor']), eDetalleModeloEvaluativo.decimales)
                    try:
                        if not valor:
                            valor = null_to_decimal(float(request.POST['valor']), eDetalleModeloEvaluativo.decimales)
                        if valor >= eDetalleModeloEvaluativo.notamaxima:
                            valor = eDetalleModeloEvaluativo.notamaxima
                        elif valor <= eDetalleModeloEvaluativo.notaminima:
                            valor = eDetalleModeloEvaluativo.notaminima
                    except:
                        valor = eDetalleModeloEvaluativo.notaminima
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.calificacion = valor
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save(request)
                    eAuditoriaMateriaAsignadaPlanificacionSedeVirtualExamen = AuditoriaMateriaAsignadaPlanificacionSedeVirtualExamen(materiaasignadaplanificacion=eMateriaAsignadaPlanificacionSedeVirtualExamen,
                                                                                                                                     manual=False,
                                                                                                                                     calificacion=valor)
                    eAuditoriaMateriaAsignadaPlanificacionSedeVirtualExamen.save(request)
                    isResult, message = eMateriaAsignadaPlanificacionSedeVirtualExamen.update_grade_grades()
                    if not isResult:
                        raise NameError(message)
                    log(u'Registro de calificación (%s): %s de la Materia: %s de la Matricula: %s' % (eMateriaAsignadaPlanificacionSedeVirtualExamen.detallemodeloevaluativo.nombre, valor, eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia, eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.matricula), request, "add")
                    return JsonResponse({"result": "ok", "mensaje": u"Se guardo correctamente los datos", "valor": valor})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": f"Error al guardar los datos. {ex.__str__()}"})

            elif action == 'actualizarObservacion':
                try:
                    if not 'idmap' in request.POST:
                        raise NameError(u"Parametro de materia asignada planificada no se encontro")
                    if not 'iddmev' in request.POST:
                        raise NameError(u"Parametro de detalle de modelo evaluativo no se encontro")
                    if not 'observacion' in request.POST:
                        raise NameError(u"Parametro de observación no se encontro")
                    if not MateriaAsignadaPlanificacionSedeVirtualExamen.objects.values("id").filter(pk=request.POST['idmap']):
                        raise NameError(u"Materia asignada planificada no se encontro")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.get(pk=request.POST['idmap'])
                    eDetalleModeloEvaluativos = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia.modeloevaluativo.campos()
                    if not eDetalleModeloEvaluativos.values("id").filter(pk=request.POST['iddmev']).exists():
                        raise NameError(u"Detalle modelo evaluativo no se encontro")
                    eDetalleModeloEvaluativo = eDetalleModeloEvaluativos.filter(pk=request.POST['iddmev']).first()
                    observacion = request.POST['observacion']
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.observacion = observacion
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save(request)
                    eAuditoriaMateriaAsignadaPlanificacionSedeVirtualExamen = AuditoriaMateriaAsignadaPlanificacionSedeVirtualExamen(materiaasignadaplanificacion=eMateriaAsignadaPlanificacionSedeVirtualExamen,
                                                                                                                                     manual=False,
                                                                                                                                     observacion=observacion)
                    eAuditoriaMateriaAsignadaPlanificacionSedeVirtualExamen.save(request)
                    isResult, message = eMateriaAsignadaPlanificacionSedeVirtualExamen.update_grade_grades()
                    if not isResult:
                        raise NameError(message)
                    log(u'Registro de observación:%s del examen %s de la Materia: %s de la Matricula: %s' % (observacion, eMateriaAsignadaPlanificacionSedeVirtualExamen.detallemodeloevaluativo.nombre, eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia, eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.matricula), request, "add")
                    return JsonResponse({"result": "ok", "mensaje": u"Se guardo correctamente los datos"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": f"Error al guardar los datos. {ex.__str__()}"})

            elif action == 'saveRegistroAsistencia':
                try:
                    if not 'id' in request.POST:
                        raise NameError(u"No se encontro el parametro de alumno")
                    if not MateriaAsignadaPlanificacionSedeVirtualExamen.objects.values("id").filter(pk=request.POST['id']):
                        raise NameError(u"No se encontro el alumno")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.get(pk=request.POST['id'])
                    if eMateriaAsignadaPlanificacionSedeVirtualExamen.asistencia:
                        raise NameError(u"Asistencia ya fue registrada previamente")
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.asistencia = True
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.fecha_asistencia = datetime.now()
                    examenplanificado = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia.examenplanificadosilabo(eMateriaAsignadaPlanificacionSedeVirtualExamen.detallemodeloevaluativo)
                    if examenplanificado:
                        eMateriaAsignadaPlanificacionSedeVirtualExamen.idtestmoodle = int(examenplanificado.get('idtestmoodle'))
                        eMateriaAsignadaPlanificacionSedeVirtualExamen.aviability = u"%s" % eMateriaAsignadaPlanificacionSedeVirtualExamen.generaraviability()
                    eMateriaAsignadaPlanificacionSedeVirtualExamen.save(request)
                    log(u'Registra asistencia examen por parte del docente: %s' % eMateriaAsignadaPlanificacionSedeVirtualExamen, request, 'edit')
                    data['eMateriaAsignadaPlanificacionSedeVirtualExamen'] = eMateriaAsignadaPlanificacionSedeVirtualExamen
                    data['eMateria'] = eMateria = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.materia
                    data['DEBUG'] = DEBUG
                    data['orden'] = int(request.POST['orden'])
                    template = get_template("pro_planificacion/loaddataregistroasistencia.html")
                    aData = {
                        'html': template.render(data)
                    }
                    return JsonResponse({"result": True, 'aData': aData})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": False, 'message': str(ex)})

            elif action == 'firmaractaindividual':
                try:
                    titulacionmateria = MateriaTitulacion.objects.get(pk=request.POST['idmattitulacion'])
                    if not titulacionmateria.archivotitulaciongenerada:
                        actatribunal = actatitulacioncomplexivo(titulacionmateria.id)
                    titulacionmateria.archivotitulaciongenerada = 'qrcode/actatitulacion/qr_actatitulacion_' + str(titulacionmateria.id) + '.pdf'
                    titulacionmateria.save(request)
                    pdf = titulacionmateria.archivotitulaciongenerada
                    # obtener la posicion xy de la firma del doctor en el pdf
                    pdfname = SITE_STORAGE + '/media/qrcode/actatitulacion/qr_actatitulacion_' + str(titulacionmateria.id) + '.pdf'
                    palabras = 'firmadocente'
                    documento = fitz.open(pdfname)
                    numpaginafirma = int(documento.page_count) - 1
                    with fitz.open(pdfname) as document:
                        words_dict = {}
                        for page_number, page in enumerate(document):
                            if page_number == numpaginafirma:
                                words = page.get_text("blocks")
                                words_dict[0] = words
                    valor = None
                    for cadena in words_dict[0]:
                        if palabras in cadena[4]:
                            valor = cadena
                    if valor:
                        y = 5000 - int(valor[3]) - 4160
                    else:
                        messages.warning(request, "Alerta: El nombre en la firma no es el correcto. Se ha rechazado y enviado a comercialización.")
                        return JsonResponse({"result": "errornombre"})
                    # fin obtener posicion
                    firma = request.FILES["firma"]
                    passfirma = request.POST['palabraclave']
                    txtFirmas = json.loads(request.POST['txtFirmas'])
                    if not txtFirmas:
                        return JsonResponse({"result": "bad", "mensaje": u"No se ha podido seleccionar la ubicación de la firma"})
                    generar_archivo_firmado = io.BytesIO()
                    x = txtFirmas[-1]
                    # datau, datas = firmar(request, passfirma, firma, pdf, numpaginafirma, x["x"], y, x["width"], x["height"])
                    datau, datas = firmar(request, passfirma, firma, pdf, numpaginafirma, 30, y, x["width"], x["height"])
                    if not datau:
                        return JsonResponse({"result": "bad", "mensaje": f"{datas}"})
                    generar_archivo_firmado.write(datau)
                    generar_archivo_firmado.write(datas)
                    generar_archivo_firmado.seek(0)
                    extension = pdf.name.split('.')
                    tam = len(extension)
                    exte = extension[tam - 1]
                    nombrefile_ = remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode(pdf.name)).replace('-', '_').replace('.pdf', '')
                    _name = 'qr_actatitulacion_' + str(titulacionmateria.id) + '_firmado'
                    file_obj = DjangoFile(generar_archivo_firmado, name=f"{_name}.pdf")
                    # para eliminar el archivo no firmado
                    qrname = 'qr_actatitulacion_' + str(titulacionmateria.id)
                    folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'actatitulacion', '')
                    rutapdf = folder + qrname + '_firmado.pdf'
                    if os.path.isfile(rutapdf):
                        os.remove(rutapdf)
                    # final archivo elimiando
                    titulacionmateria.archivotitulacionfirmada = file_obj
                    titulacionmateria.actatitulacionfirmada = True
                    titulacionmateria.fechatitulacionfirmada = datetime.now()
                    titulacionmateria.save(request)
                    log(u'Firmo acta de titulacion: {}'.format(nombrefile_), request, "add")
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error: %s" % ex})

            elif action == 'firmaractamasivo':
                try:
                    materiastitulacionselect = request.POST['ids'].split(',')
                    bandera = False
                    p12 = None
                    listainscripcion = []
                    nombresmae = ''
                    conterrornombre = 0
                    conteoerror = 0

                    firma = request.FILES["firma"]
                    passfirma = request.POST['palabraclave']
                    txtFirmas = json.loads(request.POST['txtFirmas'])
                    razon = request.POST['razon'] if 'razon' in request.POST else ''
                    bytes_certificado = firma.read()
                    for idtitulacion in materiastitulacionselect:
                        titulacionmateria = MateriaTitulacion.objects.get(pk=idtitulacion)
                        if not titulacionmateria.archivotitulaciongenerada:
                            actatribunal = actatitulacioncomplexivo(titulacionmateria.id)
                            sleep(2)
                        titulacionmateria.archivotitulaciongenerada = 'qrcode/actatitulacion/qr_actatitulacion_' + str(titulacionmateria.id) + '.pdf'
                        titulacionmateria.save(request)
                        listadofirmasdocente = profesor.firmagrupotitulacion_set.filter(grupofirma=titulacionmateria.grupofirma.id, status=True).order_by('orden')
                        for lfirma in listadofirmasdocente:
                            if not titulacionmateria.materiatitulacionfirma_set.values('id').filter(firmadocente_id=lfirma.id, status=True).exists():
                                if not titulacionmateria.materiatitulacionfirma_set.values('id').filter(status=True).exists():
                                    pdf = titulacionmateria.archivotitulaciongenerada
                                    # obtener la posicion xy de la firma del doctor en el pdf
                                    pdfname = SITE_STORAGE + '/media/qrcode/actatitulacion/qr_actatitulacion_' + str(titulacionmateria.id) + '.pdf'
                                else:
                                    registrofirmado = titulacionmateria.materiatitulacionfirma_set.filter(status=True).order_by('-orden')[0]
                                    pdfname = SITE_STORAGE + '/media/qrcode/actatitulacion/qr_actatitulacion_' + str(titulacionmateria.id) + '_firmadocente' + str(registrofirmado.orden) +'.pdf'
                                    pdf = registrofirmado.archivofirmado
                                palabras = 'firmadocente' + str(lfirma.orden)
                                documento = fitz.open(pdfname)
                                numpaginafirma = int(documento.page_count) - 1
                                with fitz.open(pdfname) as document:
                                    words_dict = {}
                                    for page_number, page in enumerate(document):
                                        if page_number == numpaginafirma:
                                            words = page.get_text("blocks")
                                            words_dict[0] = words
                                valor = None
                                for cadena in words_dict[0]:
                                    if palabras in cadena[4]:
                                        valor = cadena

                                if valor:
                                    posicinony = 5000 - int(valor[3]) - 4125
                                else:
                                    messages.warning(request, "Alerta: El nombre en la firma no es el correcto. Se ha rechazado y enviado a comercialización.")
                                    return JsonResponse({"result": "errornombre"})
                                # fin obtener posicion
                                x, y, numpaginafirma = obtener_posicion_x_y_saltolinea(pdf.url, palabras)
                                if x and y:
                                    x = x - 30
                                    y = posicinony
                                    extension_certificado = os.path.splitext(firma.name)[1][1:]

                                    datau = JavaFirmaEc(
                                        archivo_a_firmar=pdf, archivo_certificado=bytes_certificado, extension_certificado=extension_certificado,
                                        password_certificado=passfirma,
                                        page=int(numpaginafirma), reason=razon, lx=x, ly=y
                                    ).sign_and_get_content_bytes()
                                    if datau:
                                        generar_archivo_firmado = io.BytesIO()
                                        generar_archivo_firmado.write(datau)
                                        generar_archivo_firmado.seek(0)
                                        extension = pdf.name.split('.')
                                        tam = len(extension)
                                        exte = extension[tam - 1]
                                        _name = 'qr_actatitulacion_' + str(titulacionmateria.id) + '_firmadocente' + str(lfirma.orden)
                                        file_obj = DjangoFile(generar_archivo_firmado, name=f"{remover_caracteres_especiales_unicode(_name)}.pdf")

                                        archivoexiste = SITE_STORAGE + '/media/qrcode/actatitulacion/' + _name + '.pdf'
                                        if os.path.isfile(archivoexiste):
                                            os.remove(archivoexiste)

                                        titulacionmateria.archivotitulacionfirmada = file_obj
                                        titulacionmateria.fechatitulacionfirmada = datetime.now()
                                        titulacionmateria.save(request)
                                        registrofirmadocente = MateriaTitulacionFirma(materiatitulacion_id=titulacionmateria.id,
                                                                                      firmadocente_id=lfirma.id,
                                                                                      orden=lfirma.orden,
                                                                                      archivofirmado='qrcode/actatitulacion/' + _name + '.pdf')
                                        registrofirmadocente.save(request)
                                        if titulacionmateria.grupofirma.totalprofesoresgrupo_firman() == titulacionmateria.materiatitulacionfirma_set.filter(status=True).count():
                                            titulacionmateria.actatitulacionfirmada = True
                                            titulacionmateria.save(request)
                                            if TipoActa.objects.filter(tipo=10, graduado__inscripcion=titulacionmateria.materiaasignada.matricula.inscripcion):
                                                tipoactatitulacion = TipoActa.objects.filter(tipo=10, graduado__inscripcion=titulacionmateria.materiaasignada.matricula.inscripcion)[0]
                                                tipoactatitulacion.archivo = titulacionmateria.archivotitulacionfirmada
                                                tipoactatitulacion.actafirmada = True
                                                tipoactatitulacion.save(request)

                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error: %s" % ex})

            elif action == 'duplicar_silabo_periodo':
                try:
                    lista_nueva = []
                    lista_semanas = []
                    silaboant = Silabo.objects.get(pk=int(request.POST['ids']))
                    semanas_ant = silaboant.silabosemanal_set.filter(status=True)
                    silaboactual = Silabo.objects.get(status=True, pk=int(request.POST['ids_a']))
                    if silaboactual.silabosemanal_set.filter(status=True).exists():
                        raise NameError('Sílabo ya existe')
                    aux = 0
                    for dia in daterange(silaboactual.materia.inicio, silaboactual.materia.fin):
                        if (dia.isocalendar()[1]) not in lista_nueva:
                            aux = aux + 1
                            lista_nueva.append(dia.isocalendar()[1])
                            obj = ''
                            enf = ''
                            enf2 = ''
                            enf3 = ''
                            rec = ''
                            eva = ''
                            idcodigo = 0
                            horap = 0
                            horapraexperimental = 0
                            modelosilabo = 0
                            horaa = 0
                            esexa = False
                            idsilsem = 0
                            for sila in silaboactual.silabosemanal_set.filter(status=True).select_related(
                                    'silabo__materia__asignaturamalla'):
                                if sila.semana == dia.isocalendar()[1] and sila.examen == False:
                                    # if sila.semana == dia.isocalendar()[1]:
                                    obj = sila.objetivoaprendizaje
                                    enf = sila.enfoque
                                    enf2 = sila.enfoquedos
                                    enf3 = sila.enfoquetres
                                    rec = sila.recursos
                                    eva = sila.evaluacion
                                    horap = sila.horaspresencial  # silabo.materia.asignaturamalla.horaspresenciales
                                    horaa = sila.horaautonoma  # silabo.materia.asignaturamalla.horasautonomas
                                    horapraexperimental = sila.silabo.materia.asignaturamalla.horaspracticassemanales
                                    idcodigo = sila.id
                                    modelosilabo = sila
                                    # esexa = sila.examen
                                    esexa = False
                                    idsilsem = sila.id
                            d = dia_semana_ennumero_fecha(dia)
                            hasta = dia + timedelta(days=6)
                            if aux == 1:
                                if d == 1:
                                    hasta = dia
                                elif d == 2:
                                    hasta = dia + timedelta(days=6)
                                elif d == 3:
                                    hasta = dia + timedelta(days=5)
                                elif d == 4:
                                    hasta = dia + timedelta(days=4)
                                elif d == 5:
                                    hasta = dia + timedelta(days=3)
                                elif d == 6:
                                    hasta = dia + timedelta(days=2)
                                elif d == 7:
                                    hasta = dia + timedelta(days=1)
                            lista_semanas.append([dia.isocalendar()[1], dia, hasta, obj, enf, rec, eva, horap, horaa, idcodigo,
                                                  modelosilabo, enf2, enf3, horapraexperimental, esexa, idsilsem])
                    for semanaant in semanas_ant:
                        cronograma = silaboactual.cronograma_silabo_s(semanaant.numsemana)
                        semana_list = lista_semanas[semanaant.numsemana - 1]
                        if cronograma and semana_list and not silaboactual.silabosemanal_set.filter(status=True, numsemana=semanaant.numsemana).exists():
                            cronograma = cronograma.first()
                            if not cronograma.examen:
                                if cronograma.semana > 0:
                                    semana = SilaboSemanal(silabo=silaboactual,
                                                           numsemana=cronograma.semana,
                                                           semana=semana_list[0],
                                                           fechainiciosemana=cronograma.fechainicio,
                                                           fechafinciosemana=cronograma.fechafin,
                                                           objetivoaprendizaje=semanaant.objetivoaprendizaje,
                                                           enfoque=semanaant.enfoque,
                                                           enfoquedos=semanaant.enfoquedos,
                                                           enfoquetres=semanaant.enfoquetres,
                                                           recursos=semanaant.recursos,
                                                           evaluacion=semanaant.evaluacion,
                                                           horaspresencial=semanaant.horaspresencial,
                                                           horaautonoma=semanaant.horaautonoma)
                                    semana.save(request)
                                    lista_temas_migrar = []
                                    lista_temas_id = []
                                    if silaboactual.materia.nivel.modalidad_id == 3:
                                        for tema in semanaant.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True):
                                            temaanterior = tema
                                            temasilaboactual = TemaUnidadResultadoProgramaAnalitico.objects.filter(unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura=silaboactual.programaanaliticoasignatura, descripcion=tema.temaunidadresultadoprogramaanalitico.descripcion, status=True).first()
                                            if temasilaboactual:
                                                if tema.objetivoaprendizaje:
                                                    tema_nuevo = DetalleSilaboSemanalTema(silabosemanal=semana, temaunidadresultadoprogramaanalitico=temasilaboactual, objetivoaprendizaje=tema.objetivoaprendizaje)
                                                else:
                                                    tema_nuevo = DetalleSilaboSemanalTema(silabosemanal=semana, temaunidadresultadoprogramaanalitico=temasilaboactual, objetivoaprendizaje=semana.objetivoaprendizaje)
                                                tema_nuevo.save(request)
                                                lista_temas_migrar.append([temaanterior.id, tema_nuevo.id])
                                                lista_temas_id.append(temaanterior.id)

                                                if semanaant.subtemaadicionalessilabo_set.filter(status=True, tema=tema).exists():
                                                    for subtemaadicional in semanaant.subtemaadicionalessilabo_set.filter(status=True, tema=tema):
                                                        sub = SubTemaAdicionalesSilabo(silabosemanal=semana, tema=tema, subtema=subtemaadicional.subtema)
                                                        sub.save(request)

                                                for subtema in semanaant.detallesilabosemanalsubtema_set.filter(status=True):
                                                    listasubtemasactuales = temasilaboactual.subtemaunidadresultadoprogramaanalitico_set.filter(descripcion=subtema.subtemaunidadresultadoprogramaanalitico.descripcion, status=True).first()
                                                    if listasubtemasactuales:
                                                        subtema = DetalleSilaboSemanalSubtema(silabosemanal=semana, subtemaunidadresultadoprogramaanalitico=listasubtemasactuales)
                                                        subtema.save(request)

                                    else:
                                        for tema in semanaant.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True):
                                            temaanterior = tema
                                            if tema.objetivoaprendizaje:
                                                tema_nuevo = DetalleSilaboSemanalTema(silabosemanal=semana, temaunidadresultadoprogramaanalitico=tema.temaunidadresultadoprogramaanalitico, objetivoaprendizaje=tema.objetivoaprendizaje)
                                            else:
                                                tema_nuevo = DetalleSilaboSemanalTema(silabosemanal=semana, temaunidadresultadoprogramaanalitico=tema.temaunidadresultadoprogramaanalitico, objetivoaprendizaje=semana.objetivoaprendizaje)
                                            tema_nuevo.save(request)
                                            lista_temas_migrar.append([temaanterior.id, tema_nuevo.id])
                                            lista_temas_id.append(temaanterior.id)

                                            if semanaant.subtemaadicionalessilabo_set.filter(status=True, tema=tema).exists():
                                                for subtemaadicional in semanaant.subtemaadicionalessilabo_set.filter(status=True, tema=tema):
                                                    sub = SubTemaAdicionalesSilabo(silabosemanal=semana, tema=tema, subtema=subtemaadicional.subtema)
                                                    sub.save(request)
                                        for subtema in semanaant.detallesilabosemanalsubtema_set.filter(status=True):
                                            subtema = DetalleSilaboSemanalSubtema(silabosemanal=semana, subtemaunidadresultadoprogramaanalitico=subtema.subtemaunidadresultadoprogramaanalitico)
                                            subtema.save(request)
                                    for biblio in semanaant.detallesilabosemanalbibliografia_set.filter(status=True):
                                        bibliografia = DetalleSilaboSemanalBibliografia(silabosemanal=semana, bibliografiaprogramaanaliticoasignatura_id=biblio.bibliografiaprogramaanaliticoasignatura.id)
                                        bibliografia.save(request)
                                    for biblic in semanaant.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                                        bibliografiac = DetalleSilaboSemanalBibliografiaDocente(silabosemanal=semana, librokohaprogramaanaliticoasignatura=biblic.librokohaprogramaanaliticoasignatura)
                                        bibliografiac.save(request)
                                    if semanaant.bibliograbiaapasilabo_set.filter(status=True).exists():
                                        for bibliv in semanaant.bibliograbiaapasilabo_set.filter(status=True):
                                            bibliografiav = BibliograbiaAPASilabo(silabosemanal=semana, bibliografia=bibliv.bibliografia)
                                            bibliografiav.save(request)
                                    if semanaant.recursosdidacticossemanal_set.filter(status=True).exists():
                                        for recurso in semanaant.recursosdidacticossemanal_set.filter(status=True):
                                            rec = RecursosDidacticosSemanal(silabosemanal=semana, descripcion=recurso.descripcion, link=recurso.link)
                                            rec.save(request)
                                    if semanaant.articulosilabosemanal_set.filter(status=True).exists():
                                        for articulo in semanaant.articulosilabosemanal_set.filter(status=True):
                                            a = ArticuloSilaboSemanal(silabosemanal=semana, articulo=articulo.articulo)
                                            a.save(request)

                                    if silaboant.versionsilabo == 2 and silaboant.materia.nivel.periodo_id >= 113:
                                        if silaboactual.materia.nivel.modalidad_id == 3:
                                            temasactuales = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, status=True)
                                            listadoaprendizaje = EvaluacionAprendizajeTema.objects.filter(evaluacion__silabosemanal=semanaant, evaluacion__silabosemanal__status=True, evaluacion__tipoactividadsemanal=1, temasemanal__silabosemanal__status=True, temasemanal__silabosemanal__silabo__status=True, temasemanal__status=True, status=True).distinct()
                                            if lista_temas_migrar:
                                                for lisaprendizaje in listadoaprendizaje:
                                                    for temaactual in temasactuales:
                                                        codaprendizaje = EvaluacionAprendizajeTema.objects.get(pk=lisaprendizaje.id)
                                                        semanacod = codaprendizaje.temasemanal.silabosemanal.numsemana
                                                        if temaactual.temaunidadresultadoprogramaanalitico.descripcion == lisaprendizaje.temasemanal.temaunidadresultadoprogramaanalitico.descripcion and temaactual.silabosemanal.numsemana == semanacod:
                                                            aprendizajestemassilabo(request, temaactual.id, lisaprendizaje.evaluacion.evaluacionaprendizaje.id, semana.id, lisaprendizaje.evaluacion.numactividad)

                                        else:
                                            temasactuales = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silaboactual, silabosemanal__status=True, status=True)
                                            listadoaprendizaje = EvaluacionAprendizajeTema.objects.filter(evaluacion__silabosemanal=semanaant, evaluacion__silabosemanal__status=True, evaluacion__tipoactividadsemanal=1, temasemanal__silabosemanal__status=True, temasemanal__silabosemanal__silabo__status=True, temasemanal__status=True, status=True).distinct()
                                            if lista_temas_migrar:
                                                for lisaprendizaje in listadoaprendizaje:
                                                    for temaactual in temasactuales:
                                                        codaprendizaje = EvaluacionAprendizajeTema.objects.get(pk=lisaprendizaje.id)
                                                        semanacod = codaprendizaje.temasemanal.silabosemanal.numsemana
                                                        if temaactual.temaunidadresultadoprogramaanalitico == lisaprendizaje.temasemanal.temaunidadresultadoprogramaanalitico and temaactual.silabosemanal.numsemana == semanacod:
                                                            aprendizajestemassilabo(request, temaactual.id, lisaprendizaje.evaluacion.evaluacionaprendizaje.id, semana.id, lisaprendizaje.evaluacion.numactividad)
                    log(u'Importó el semana: %s del profesor: %s a la semana: %s el profesor: %s' % (semanaant, semanaant.silabo.profesor.persona.nombre_completo_inverso(), semana, semana.silabo.profesor.persona.nombre_completo_inverso()), request, "add")
                    return JsonResponse({"result": "ok", 'id': encrypt(silaboactual.id)})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'verfaltantesfirmar':
                try:
                    asignada = MateriaTitulacion.objects.get(pk=request.POST['idasignada'])
                    htmlrequisitos = listadofaltantefirmaracta(asignada)
                    return htmlrequisitos
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'deleteitemrecurso':
                try:
                    idopc = request.POST['idopc']
                    if int(idopc) == 1:
                        eliminarecurso = LibrosOdiloSilaboSemanal.objects.get(pk=request.POST['id'])
                        log(u'Elimino libro odilo: %s' % eliminarecurso.titulo, request, "del")
                        eliminarecurso.delete()
                    if int(idopc) == 2:
                        eliminaarticulo = ArticuloSilaboSemanal.objects.get(pk=request.POST['id'])
                        log(u'Elimino articulo: %s' % eliminaarticulo.articulo, request, "del")
                        eliminaarticulo.delete()
                    if int(idopc) == 3:
                        eliminabibliografiaapa = BibliograbiaAPASilabo.objects.get(pk=request.POST['id'])
                        log(u'Elimino bibliografia apa: %s' % eliminabibliografiaapa, request, "del")
                        eliminabibliografiaapa.delete()
                    if int(idopc) == 4:
                        eliminabibliografia = DetalleSilaboSemanalBibliografiaDocente.objects.get(pk=request.POST['id'])
                        log(u'Elimino repositorio institucional: %s' % eliminabibliografia, request, "del")
                        eliminabibliografia.delete()
                    return JsonResponse({"results": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al eliminar los datos."})

            elif action == 'eliminardetallefirmasactatitulacion':
                try:
                    titulacionmateria = MateriaTitulacion.objects.get(pk=int(request.POST['id']))
                    firma = MateriaTitulacionFirma.objects.get(materiatitulacion_id=int(request.POST['id']))
                    titulacionmateria.archivotitulacionfirmada = None
                    titulacionmateria.archivotitulaciongenerada = None
                    titulacionmateria.actatitulacionfirmada = False
                    titulacionmateria.fechatitulacionfirmada = None
                    titulacionmateria.save(request)
                    firma.delete()
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al eliminar los datos."})

        return JsonResponse({"result": "bad", "mensaje": u"Solicitud Incorrecta."})
    else:
        if 'action' in request.GET:
            data['action'] = action = request.GET['action']

            if action == 'add':
                try:
                    # from datetime import date, datetime
                    opcion = 1
                    data['title'] = u'Adicionar Tarea'
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    form = PlanificacionForm(initial={'desde': datetime.now().date(),
                                                      'hasta': datetime.now().date()})
                    form.segun_modelo_evaluativo(materia, opcion)
                    data['form'] = form
                    return render(request, "pro_planificacion/add.html", data)
                except Exception as ex:
                    pass

            elif action == 'edit':
                try:
                    opcion = 2
                    data['title'] = u'Editar Tarea '

                    data['planificacionmateria'] = planificacionmateria = PlanificacionMateria.objects.get(pk=int(encrypt(request.GET['id'])))
                    form = PlanificacionForm(initial={'descripcion': planificacionmateria.descripcion,
                                                      'tipoevaluacion': planificacionmateria.tipoevaluacion,
                                                      # 'tipoplanificacion': planificacionmateria.tipoplanificacion,
                                                      'enlinea': planificacionmateria.enlinea,
                                                      'paraevaluacion': planificacionmateria.paraevaluacion,
                                                      'desde': planificacionmateria.desde,
                                                      'hasta': planificacionmateria.hasta,
                                                      'horadesde': str(planificacionmateria.horadesde),
                                                      'horahasta': str(planificacionmateria.horahasta)})
                    form.segun_modelo_evaluativo(planificacionmateria.materia, opcion)
                    data['form'] = form
                    return render(request, "pro_planificacion/edit.html", data)
                except Exception as ex:
                    pass

            elif action == 'consultacomponentes':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['idsem'])))
                    listaseleccionados = silabosemana.evaluacionaprendizajesilabosemanal_set.values_list('evaluacionaprendizaje_id').filter(tipoactividadsemanal=1, status=True)
                    listadocomponentes = EvaluacionAprendizajeComponente.objects.filter(status=True).exclude(id__in=listaseleccionados)
                    # Se agregó filtro para que muestre unicamente componente TEST para materias de nivelación
                    if silabosemana.silabo.materia.asignaturamalla.malla.carrera.mi_coordinacion2() == 9:
                        listadocomponentes = EvaluacionAprendizajeComponente.objects.filter(status=True, id=1)
                    listacomp = []
                    for lis in listadocomponentes:
                        listacomp.append([lis.id, lis.descripcion, lis.componente.descripcion])
                    log(u'Adicionó componente silabo semanal: %s' % silabosemana, request, "add")
                    return JsonResponse({"result": "ok", "listadocomponentes": listacomp})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'consultacomponentesactividadestemas':
                try:
                    silabosemana = SilaboSemanal.objects.get(id=int(encrypt(request.GET['idsilabosemanal'])))
                    parcial = silabosemana.parcial_semana()
                    rango = silabosemana.rango_semana_parcial(parcial)
                    temasilabosemanal = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo_id=request.GET['codsilabo'], silabosemanal__silabo__status=True, silabosemanal__status=True, status=True, temaunidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True).order_by('silabosemanal__numsemana')
                    listadocomponentes = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje_id=request.GET['idactividad'], evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__silabo_id=request.GET['codsilabo'], temasemanal__silabosemanal__silabo_id=request.GET['codsilabo'], temasemanal__silabosemanal__status=True, evaluacion__silabosemanal__status=True, temasemanal__status=True, evaluacion__status=True, status=True)
                    listacomp = []
                    listatemas = []
                    for lis in listadocomponentes:
                        listacomp.append(lis.temasemanal.id)
                    for tem in temasilabosemanal:
                        if tem.silabosemanal.numsemana >= rango['inicio'] and tem.silabosemanal.numsemana <= rango['fin']:
                            nomtema = "UNIDAD " + str(tem.temaunidadresultadoprogramaanalitico.unidadresultadoprogramaanalitico.orden) + "- TEMA " + str(tem.temaunidadresultadoprogramaanalitico.orden) + ".-" + str(tem.temaunidadresultadoprogramaanalitico.descripcion)
                            listatemas.append([tem.silabosemanal.numsemana, tem.id, nomtema])
                    return JsonResponse({"result": "ok", "listadocomponentestemas": listacomp, "listadotemassemanales": listatemas})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": f"Error al guardar los datos. {ex}"})

            elif action == 'consultacomponentestemas':
                try:
                    listadocomponentes = EvaluacionAprendizajeSilaboSemanal.objects.get(pk=request.GET['codcomp'])
                    listatemas = []
                    listadocomponentestemas = listadocomponentes.evaluacionaprendizajetema_set.filter(evaluacion__status=True, temasemanal__status=True, status=True)
                    for tema in listadocomponentestemas:
                        listatemas.append([tema.temasemanal.id, tema.temasemanal.temaunidadresultadoprogramaanalitico.descripcion, tema.temasemanal.temaunidadresultadoprogramaanalitico.orden, tema.temasemanal.silabosemanal.numsemana, tema.temasemanal.temaunidadresultadoprogramaanalitico.unidadresultadoprogramaanalitico.orden])
                    return JsonResponse({"result": "ok", "listadocomponentestemas": listatemas})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'delete':
                try:
                    data['title'] = u'Eliminar planificación'
                    data['planificacion'] = PlanificacionMateria.objects.get(pk=int(encrypt(request.GET['id'])))
                    return render(request, "pro_planificacion/delete.html", data)
                except Exception as ex:
                    pass

            elif action == 'subirrubrica':
                try:
                    data['title'] = u'Adicionar rubrica de evaluación'
                    data['planificacion'] = PlanificacionMateria.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['form'] = ArchivoPlanificacionForm()
                    return render(request, "pro_planificacion/subirrubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'eliminarrubrica':
                try:
                    data['title'] = u'Eliminar rubrica de evaluación de planificación'
                    data['planificacion'] = PlanificacionMateria.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['form'] = ArchivoPlanificacionForm()
                    return render(request, "pro_planificacion/eliminarrubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'eliminarevaluacion':
                try:
                    data['title'] = u'Eliminar evaluación de planificación'
                    data['planificacion'] = PlanificacionMateria.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['form'] = ArchivoPlanificacionForm()
                    return render(request, "pro_planificacion/eliminarevaluacion.html", data)
                except Exception as ex:
                    pass

            elif action == 'viewauditoria':
                try:
                    data['title'] = u'Vista de Auditoría'
                    data['planificacion'] = materiaasignadaplanificacion = MateriaAsignadaPlanificacion.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['auditoria'] = materiaasignadaplanificacion.auditoriatareas_set.all().order_by("-fecha_creacion")
                    return render(request, "pro_planificacion/viewauditoria.html", data)
                except Exception as ex:
                    pass

            elif action == 'subirevaluacion':
                try:
                    data['title'] = u'Adicionar evaluación'
                    data['planificacion'] = PlanificacionMateria.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['form'] = ArchivoPlanificacionForm()
                    return render(request, "pro_planificacion/subirevaluacion.html", data)
                except Exception as ex:
                    pass

            elif action == 'planificaciones':
                try:
                    id = int(encrypt(request.GET['id']))
                    verificar_si_pertenece_materia_docente(id, periodo, profesor, request)
                    data['title'] = u'Control de Tareas'
                    data['materia'] = materia = Materia.objects.get(pk=id)
                    contar_llenos = 0
                    if materia.asignaturamalla.malla.perfilegreso:
                        contar_llenos += 1
                    if materia.asignaturamalla.malla.perfilprofesional:
                        contar_llenos += 1
                    if materia.asignaturamalla.malla.objetivocarrera:
                        contar_llenos += 1
                    if materia.asignaturamalla.malla.misioncarrera:
                        contar_llenos += 1
                    data['contar_llenos'] = contar_llenos
                    return render(request, "pro_planificacion/planificaciones.html", data)
                except Exception as ex:
                    pass

            elif action == 'controlacademico':
                try:
                    data['title'] = u'Orientación y Acompañamiento Académico'
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['preguntas'] = AvPreguntaDocente.objects.filter(materiaasignada__materia=materia, status=True).order_by("-estadolectura", "-fecha_creacion")
                    return render(request, "pro_planificacion/acompanamiento.html", data)
                except Exception as ex:
                    pass

            elif action == 'iniciaracompanamiento':
                try:
                    data['title'] = u'Orientación y Acompañamiento Académico'
                    form = AvPreguntaDocenteIniForm()
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    form.combo(materia)
                    data['form'] = form
                    return render(request, "pro_planificacion/inicompa.html", data)
                except Exception as ex:
                    pass

            elif action == 'respuesta':
                try:
                    data['title'] = u'Orientación y Acompañamiento Académico'
                    data['preguntas'] = avpreguntarespuesta = AvPreguntaRespuesta.objects.filter(avpreguntadocente__id=int(encrypt(request.GET['id'])), status=True)
                    data['avpreguntadocente'] = avpreguntadocente = AvPreguntaDocente.objects.get(pk=int(encrypt(request.GET['id'])))
                    avpreguntadocente.estadolectura = False
                    avpreguntadocente.save(request)
                    return render(request, "pro_planificacion/respuestas.html", data)
                except Exception as ex:
                    pass

            elif action == 'calificar':
                try:
                    # hoy = datetime.now().date()
                    data['title'] = u'Calificación de planificación'
                    data['planificacion'] = planificacion = PlanificacionMateria.objects.get(pk=int(encrypt(request.GET['id'])))
                    verificar_si_pertenece_materia_docente(planificacion.materia_id, periodo, profesor, request)
                    if not planificacion.materia.cerrado:
                        for materiaasignada in planificacion.materia.asignados_a_esta_materia():
                            materiaasignada.mi_planificacion(planificacion)
                        data['materiasasignadas'] = planificacion.materiaasignadaplanificacion_set.filter(materiaasignada__matricula__estado_matricula__in=[2, 3]).order_by('materiaasignada__matricula__inscripcion__persona')
                        data['cronograma'] = planificacion.materia.cronogramacalificaciones()
                        data['sel'] = request.GET['sel']
                        data['utiliza_validacion_calificaciones'] = variable_valor('UTILIZA_VALIDACION_CALIFICACIONES_IPEC')
                        data['habilitado_ingreso_calificaciones'] = profesor.habilitado_ingreso_calificaciones_ipec()
                        return render(request, "pro_planificacion/calificar.html", data)
                    else:
                        pass
                except Exception as ex:
                    pass

            elif action == 'ver':
                try:
                    # hoy = datetime.now().date()
                    data['title'] = u'Ver archivos'
                    data['planificacion'] = planificacion = PlanificacionMateria.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['materiasasignadas'] = planificacion.materiaasignadaplanificacion_set.filter(materiaasignada__matricula__estado_matricula__in=[2, 3], status=True).order_by('materiaasignada__matricula__inscripcion__persona')
                    data['cronograma'] = planificacion.materia.cronogramacalificaciones()
                    data['sel'] = request.GET['sel']
                    return render(request, "pro_planificacion/ver.html", data)
                except Exception as ex:
                    pass

            elif action == 'importarplanificacion':
                try:
                    data['title'] = u'Importacion de Planificación de materia'
                    materia = Materia.objects.get(pk=request.GET['id'])
                    data['materia'] = materia
                    form = ImportarPlanificacionForm()
                    form.solo_misma_asignatura(materia.asignatura)
                    data['form'] = form
                    return render(request, "pro_planificacion/importarplanificacion.html", data)
                except Exception as ex:
                    pass

            elif action == 'syllabusmalla':
                try:
                    materia = Materia.objects.get(pk=request.GET['id'])
                    asignaturamallas = materia.syllabus_malla()
                    listado = []
                    for asignaturamalla in asignaturamallas:
                        if asignaturamalla.syllabus_actual():
                            listado.append([unicode(asignaturamalla.malla), unicode(asignaturamalla.syllabus_actual().download_link())])
                    return JsonResponse({"result": "ok", "materias": listado})
                except Exception as ex:
                    pass
                    return JsonResponse({"result": "bad", "mensaje": u"Error al generar los datos.%s" % ex})

            elif action == 'syllabusmateria':
                try:
                    materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    profesor = persona.profesor()
                    archivo = Archivo.objects.filter(status=True, materia=materia, tipo_id=ARCHIVO_TIPO_SYLLABUS, profesor=profesor, archivo__contains='.pdf')
                    archivopdf = None
                    if Archivo.objects.filter(status=True, materia=materia, tipo_id=ARCHIVO_TIPO_SYLLABUS, profesor=profesor, archivo__contains='.pdf').exists():
                        archivopdf = Archivo.objects.filter(status=True, materia=materia, tipo_id=ARCHIVO_TIPO_SYLLABUS, profesor=profesor, archivo__contains='.pdf').order_by('-id')[0]
                    archivoword = None
                    if Archivo.objects.filter(status=True, materia=materia, tipo_id=ARCHIVO_TIPO_SYLLABUS, profesor=profesor, archivo__contains='.doc').exists():
                        archivoword = Archivo.objects.filter(status=True, materia=materia, tipo_id=ARCHIVO_TIPO_SYLLABUS, profesor=profesor, archivo__contains='.doc').order_by('-id')[0]
                    listado = [[unicode(materia), unicode(archivoword.download_link()), unicode(archivopdf.download_link())]]
                    return JsonResponse({"result": "ok", "materias": listado})
                except Exception as ex:
                    pass
                    return JsonResponse({"result": "bad", "mensaje": u"Error al generar los datos.%s" % ex})

            elif action == 'syllabusprogramamalla':
                try:
                    materia = Materia.objects.get(pk=request.GET['id'])
                    malla = materia.asignaturamalla.malla
                    programaanaliticomalla = ProgramaAnaliticoMalla.objects.filter(status=True, malla=malla, aprobado=True)
                    listado = []
                    for programa in programaanaliticomalla:
                        listado.append([unicode(programa.malla), unicode(programa.download_archivopdf()), unicode(programa.download_archivoword())])
                    return JsonResponse({"result": "ok", "materias": listado})
                except Exception as ex:
                    pass
                    return JsonResponse({"result": "bad", "mensaje": u"Error al generar los datos.%s" % ex})

            elif action == 'syllabusprogramamateria':
                try:
                    materia = Materia.objects.get(pk=request.GET['id'])
                    asignaturamalla = materia.asignaturamalla
                    programaanaliticoasignaturamalla = ProgramaAnaliticoAsignaturaMalla.objects.filter(status=True, asignaturamalla=asignaturamalla, aprobado=True)
                    listado = []
                    for programa in programaanaliticoasignaturamalla:
                        listado.append([unicode(programa.asignaturamalla), unicode(programa.download_archivopdf()), unicode(programa.download_archivoword())])
                    return JsonResponse({"result": "ok", "materias": listado})
                except Exception as ex:
                    pass
                    return JsonResponse({"result": "bad", "mensaje": u"Error al generar los datos.%s" % ex})

            elif action == 'adddocumento':
                try:
                    data['title'] = u'Adicionar documento'
                    data['materia'] = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['form'] = DocumentoMateriaForm()
                    return render(request, "pro_planificacion/adddocumento.html", data)
                except Exception as ex:
                    pass

            elif action == 'comunicacionmasiva':
                try:
                    data['title'] = u'Comunicación Masiva'
                    data['materia'] = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['form'] = AvComunicacionForm()
                    return render(request, "pro_planificacion/comunicacionmasiva.html", data)
                except Exception as ex:
                    pass

            elif action == 'visi_comunicado':
                try:
                    comunicado = AvComunicacion.objects.get(pk=int(encrypt(request.GET['id'])))
                    comunicado.visible = not comunicado.visible
                    comunicado.save(request)
                    return HttpResponseRedirect('/pro_planificacion?action=comunicacionmasivaview&materia=' + encrypt(comunicado.materia_id))
                except Exception as ex:
                    transaction.set_rollback(True)
                    pass

            elif action == 'comunicacionmasivaview':
                try:
                    data['title'] = u'Comunicación Masiva'
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['materia'])))
                    data['comunicados'] = materia.avcomunicacion_set.all().order_by("-fecha_creacion")
                    return render(request, "pro_planificacion/comunicacionmasivaview.html", data)
                except Exception as ex:
                    pass

            elif action == 'edit_comunicado':
                try:
                    data['title'] = u'Comunicación Masiva'
                    data['avcomunicacion'] = avcomunicacion = AvComunicacion.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['form'] = AvComunicacionForm(initial={'comunicado': avcomunicacion.comunicado, 'titulo': avcomunicacion.titulo})
                    return render(request, "pro_planificacion/comunicacionmasivaedit.html", data)
                except Exception as ex:
                    pass

            elif action == 'del_comunicado':
                try:
                    data['title'] = u'Eliminar comunicado'
                    data['comunicados'] = AvComunicacion.objects.get(pk=int(request.GET['id']))
                    return render(request, "pro_planificacion/deletecominicado.html", data)
                except Exception as ex:
                    pass

            elif action == 'matriznotas':
                try:
                    data['title'] = u'Matriz de Calificaciones'
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['deberes'] = PlanificacionMateria.objects.filter(materia=materia, status=True, paraevaluacion=True).order_by("tipoevaluacion")
                    data['materiasasignadas'] = materia.asignados_a_esta_materia()
                    return render(request, "pro_planificacion/matriznotas.html", data)
                except Exception as ex:
                    pass

            elif action == 'reportematriznota':
                try:
                    materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    deberes = PlanificacionMateria.objects.filter(materia=materia, status=True, paraevaluacion=True).order_by("tipoevaluacion")
                    materiasasignadas = materia.asignados_a_esta_materia()
                    borders = Borders()
                    borders.left = 1
                    borders.right = 1
                    borders.top = 1
                    borders.bottom = 1
                    title = easyxf('font: name Times New Roman, color-index black, bold on , height 350; alignment: horiz centre')
                    title2 = easyxf('font: name Times New Roman, color-index black, bold on , height 275; alignment: horiz centre')
                    subtitulo = easyxf('font: name Times New Roman, bold on, height 200; align:wrap on, horiz centre, vert centre')
                    normal = easyxf('font: name Times New Roman, height 200; alignment: horiz left')
                    nnormalred = easyxf('font: name Times New Roman, color-index red, height 200; alignment: horiz centre')
                    nnormal = easyxf('font: name Times New Roman, height 200; alignment: horiz centre')
                    subtitulo.borders = borders
                    normal.borders = borders
                    nnormal.borders = borders
                    nnormalred.borders = borders
                    wb = Workbook(encoding='utf-8')
                    response = HttpResponse(content_type="application/ms-excel")
                    response['Content-Disposition'] = 'attachment; filename=MATRIZ_NOTA_' + materia.asignatura.nombre + "_" + materia.asignaturamalla.nivelmalla.__str__() + "_" + materia.paralelo + "_" + datetime.now().date().strftime("%d.%m.%Y") + "_" + random.randint(1, 10000).__str__() + '.xls'
                    ws = wb.add_sheet('Notas_docentes')
                    ws.col(0).width = 11000
                    row_num = 3
                    if materiasasignadas:
                        ws.write_merge(row_num, row_num, 0, 0, u'ESTUDIANTE', subtitulo)
                        contador_fila = 1
                        cambia = 0
                        for t in deberes:
                            if not t.tipoevaluacion.id == cambia:
                                ws.write_merge(row_num, row_num, contador_fila, contador_fila, u'%s' % t.tipoevaluacion.nombre, subtitulo)
                                ws.col(contador_fila).width = 4000
                                cambia = t.tipoevaluacion.id
                                contador_fila += 1
                            ws.col(contador_fila).width = 4000
                            ws.write_merge(row_num, row_num, contador_fila, contador_fila, u'%s %s' % (t.tipoevaluacion.nombre, t.descripcion), subtitulo)
                            contador_fila += 1
                        ws.write_merge(0, 0, 0, contador_fila - 1, 'UNIVERSIDAD ESTATAL DE MILAGRO', title)
                        ws.write_merge(1, 1, 0, contador_fila - 1, u'%s - %s  %s' % ("MATRIZ DE CALIFICACIONES", "FECHA: " + datetime.now().strftime("%d/%m/%Y"), "HORA: " + datetime.now().strftime("%H:%M")), title2)
                        ws.write_merge(2, 2, 0, contador_fila - 1, u'%s' % materia.nombre_mostrar(), title2)
                        row_num = 4
                        for alumno in materiasasignadas:
                            campo1 = alumno.matricula.inscripcion.persona.nombre_completo_inverso()
                            ws.write(row_num, 0, campo1.__str__(), normal)
                            cambia1 = 0
                            contador_fila1 = 1
                            for t in deberes:
                                p = alumno.mi_planificacion(t.id)
                                if not t.tipoevaluacion.id == cambia1:
                                    campo2 = null_to_decimal(p.promedio_calificacion(), 2)
                                    if campo2 == 0:
                                        ws.write(row_num, contador_fila1, campo2.__str__(), nnormalred)
                                    else:
                                        ws.write(row_num, contador_fila1, campo2.__str__(), nnormal)
                                    cambia1 = t.tipoevaluacion.id
                                    contador_fila1 += 1
                                campo3 = null_to_decimal(p.calificacion, 2)
                                if campo3 == 0:
                                    ws.write(row_num, contador_fila1, campo3.__str__(), nnormalred)
                                else:
                                    ws.write(row_num, contador_fila1, campo3.__str__(), nnormal)
                                contador_fila1 += 1
                            row_num += 1
                    wb.save(response)
                    return response
                except Exception as ex:
                    pass

            elif action == 'deldocumento':
                try:
                    data['title'] = u'Eliminar documento'
                    data['documento'] = DocumentosMateria.objects.get(pk=encrypt(request.GET['id']))
                    return render(request, "pro_planificacion/deldocumento.html", data)
                except Exception as ex:
                    pass

            elif action == 'crearmoodle':
                try:
                    data['title'] = u'Crear tarea en Moodle'
                    data['documento'] = TareaSilaboSemanal.objects.get(pk=encrypt(request.GET['idt']))
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodle.html", data)
                except Exception as ex:
                    pass

            elif action == 'creartareapracticamoodle':
                try:
                    data['title'] = u'Crear tarea práctica en Moodle'
                    data['documento'] = TareaPracticaSilaboSemanal.objects.get(pk=encrypt(request.GET['idt']))
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/creartareapracticamoodle.html", data)
                except Exception as ex:
                    pass

            elif action == 'creartestmoodle':
                try:
                    data['title'] = u'Crear test en Moodle'
                    data['confirmacion'] = u'test'
                    data['accion_1'] = u'creartestmoodle'
                    data['documento'] = TestSilaboSemanal.objects.get(pk=encrypt(request.GET['idt']))
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/creartestmoodle.html", data)
                except Exception as ex:
                    pass

            elif action == 'creartestmoodleadmision':
                try:
                    data['title'] = u'Crear test en Moodle Admisión'
                    data['confirmacion'] = u'test'
                    data['accion_1'] = u'creartestmoodleadmision'
                    data['documento'] = TestSilaboSemanalAdmision.objects.get(pk=encrypt(request.GET['idt']))
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/creartestmoodle.html", data)
                except Exception as ex:
                    pass

            elif action == 'crearexamenmoodle':
                try:
                    data['title'] = u'Crear test en Moodle'
                    data['confirmacion'] = u'examen'
                    data['accion_1'] = u'crearexamenmoodle'
                    data['documento'] = TestSilaboSemanal.objects.get(pk=encrypt(request.GET['idt']))
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/creartestmoodle.html", data)
                except Exception as ex:
                    pass

            elif action == 'crearmoodleforo':
                try:
                    data['title'] = u'Crear Foro en Moodle'
                    data['documento'] = ForoSilaboSemanal.objects.get(pk=encrypt(request.GET['idf']))
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodleforo.html", data)
                except Exception as ex:
                    pass

            elif action == 'crearmoodlerecurso':
                try:
                    data['title'] = u'Crear Diapositiva en Moodle'

                    data['documento'] = DiapositivaSilaboSemanal.objects.get(pk=encrypt(request.GET['id']))
                    data['nombrediv'] = request.GET['nombrediv']
                    template = get_template('pro_planificacion/crearmoodlerecurso.html')
                    return JsonResponse({"result": True, 'data': template.render(data)})
                    # return render(request, "pro_planificacion/crearmoodlerecurso.html", data)
                except Exception as ex:
                    pass

            elif action == 'crearmoodlevidmagistral':
                try:
                    data['title'] = u'Crear Video Magistral en Moodle'
                    data['documento'] = VideoMagistralSilaboSemanal.objects.get(pk=encrypt(request.GET['idvid']))
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodlevidmagistral.html", data)
                    # template = get_template('pro_planificacion/crearmoodlevidmagistral.html')
                    # return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'crearmoodlematerial':
                try:
                    data['title'] = u'Crear Material complementario en Moodle'
                    data['documento'] = MaterialAdicionalSilaboSemanal.objects.get(pk=encrypt(request.GET['idf']))
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodlematerial.html", data)
                    # template = get_template('pro_planificacion/crearmoodlematerial.html')
                    # return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'crearmoodlecompendio':
                try:
                    data['title'] = u'Crear Compendio en Moodle'
                    data['documento'] = CompendioSilaboSemanal.objects.get(pk=encrypt(request.GET['idf']))
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodlecompendio.html", data)
                    # template = get_template('pro_planificacion/crearmoodlecompendio.html')
                    # return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'crearmoodlepresentacionmasivo':
                try:
                    data['title'] = u'Crear Presentaciones en Moodle'
                    data['documento'] = DiapositivaSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.GET['ids']), estado_id=2, status=True)
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodlepresentacionmasivo.html", data)
                    # template = get_template('pro_planificacion/crearmoodlepresentacionmasivo.html')
                    # return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'crearmoodlecompendiomasivo':
                try:
                    data['title'] = u'Crear compendios en moodle'
                    data['documento'] = CompendioSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.GET['ids']), estado_id=2, status=True)
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodlecompendiomasivo.html", data)
                    # template = get_template("pro_planificacion/crearmoodlecompendiomasivo.html")
                    # json_content = template.render(data)
                    # return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    pass

            elif action == 'crearmoodletestmasivo':
                try:
                    data['title'] = u'Crear tests en Moodle'
                    data['documento'] = TestSilaboSemanalAdmision.objects.filter(silabosemanal__silabo_id=encrypt(request.GET['ids']), estado_id__in=[1, 2], status=True)
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodletestmasivo.html", data)
                    # template = get_template('pro_planificacion/crearmoodletestmasivo.html')
                    # return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'crearmoodlematerialmasivo':
                try:
                    data['title'] = u'Crear Materiales Complementarios en Moodle'
                    data['documento'] = MaterialAdicionalSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.GET['ids']), estado_id=2, status=True)
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodlematerialmasivo.html", data)
                    # template = get_template('pro_planificacion/crearmoodlematerialmasivo.html')
                    # return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'crearmoodlevideomasivo':
                try:
                    data['title'] = u'Crear Videos en Moodle'
                    data['documento'] = VideoMagistralSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.GET['ids']), estado_id=2, status=True)
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodlevideomasivo.html", data)
                    # template = get_template('pro_planificacion/crearmoodlevideomasivo.html')
                    # return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'crearmoodleguiaestudiante':
                try:
                    data['title'] = u'Crear Guia estudiante en Moodle'
                    data['documento'] = GuiaEstudianteSilaboSemanal.objects.get(pk=encrypt(request.GET['idf']))
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodleguiaestudiante.html", data)
                    # template = get_template('pro_planificacion/crearmoodleguiaestudiante.html')
                    # return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'crearmoodleguiadocente':
                try:
                    data['title'] = u'Crear Guia docente en Moodle'
                    data['documento'] = GuiaDocenteSilaboSemanal.objects.get(pk=encrypt(request.GET['idf']))
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodleguiadocente.html", data)
                    # template = get_template('pro_planificacion/crearmoodleguiadocente.html')
                    # return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'crearmoodleguiasmasivo':
                try:
                    data['title'] = u'Crear Guias en Moodle'
                    data['documento'] = GuiaEstudianteSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.GET['ids']), estado_id=2, status=True)
                    data['documento2'] = GuiaDocenteSilaboSemanal.objects.filter(silabosemanal__silabo_id=encrypt(request.GET['ids']), estado_id=2, status=True)
                    data['silabo'] = request.GET['ids']
                    return render(request, "pro_planificacion/crearmoodleguiasmasivo.html", data)
                    # template = get_template('pro_planificacion/crearmoodleguiasmasivo.html')
                    # return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'del':
                try:
                    archivo = Archivo.objects.get(pk=request.GET['id'])
                    log(u'Elimino archivo: %s' % archivo, request, "del")
                    archivo.status = False
                    archivo.save(request)
                    return HttpResponseRedirect(request.path)
                except Exception as ex:
                    pass

            elif action == 'addsyllabus':
                try:
                    data['title'] = u'Adicionar silabo'
                    data['ext'] = 'word'
                    materia = Materia.objects.get(pk=request.GET['id'])
                    data['materia'] = materia
                    data['form'] = ArchivoSyllabusForm(initial={'nombre': unicode(materia.asignatura)})
                    return render(request, "pro_planificacion/addsyllabus.html", data)
                except Exception as ex:
                    pass

            elif action == 'addsyllabusword':
                try:
                    data['title'] = u'Adicionar silabo Word'
                    data['ext'] = 'word'
                    materia = Materia.objects.get(pk=request.GET['id'])
                    data['materia'] = materia
                    data['form'] = ArchivoSyllabusWordForm(initial={'nombre': unicode(materia.asignatura)})
                    return render(request, "pro_planificacion/addsyllabus.html", data)
                except Exception as ex:
                    pass

            elif action == 'addsyllabuspdf':
                try:
                    data['title'] = u'Adicionar silabo Pdf'
                    data['ext'] = 'pdf'
                    materia = Materia.objects.get(pk=request.GET['id'])
                    data['materia'] = materia
                    data['form'] = ArchivoSyllabusPdfForm(initial={'nombre': unicode(materia.asignatura)})

                    return render(request, "pro_planificacion/addsyllabus.html", data)
                except Exception as ex:
                    pass
            # Silabo
            elif action == 'silabo':
                try:
                    data['title'] = u'Sílabos'
                    materia_id = int(encrypt(request.GET['materia']))
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['materia'])))
                    data['facultad'] = materia.asignaturamalla.malla.carrera.coordinaciones().first()
                    data['silabos'] = materia.silabo_set.filter(status=True).select_related('materia')
                    data['tienecronograma'] = materia.tiene_cronograma()
                    data['creasilabo'] = variable_valor('PUEDE_CREAR_SILABO')
                    data['aprobar'] = variable_valor('APROBAR_SILABO')
                    data['rechazar'] = variable_valor('RECHAZAR_SILABO')
                    data['pendiente'] = variable_valor('PENDIENTE_SILABO')
                    data['puede_planificar_recursos'] = variable_valor('PUEDE_PLANIFICAR_RECURSOS')
                    data['puede_planificar_silabo'] = variable_valor('PUEDE_PLANIFICAR_SILABO')
                    if 'fecha_sel' in request.session:
                        del request.session['fecha_sel']
                    return render(request, "pro_planificacion/silabodocente.html", data)
                except Exception as ex:
                    pass

            elif action == 'silaboposgrado':
                try:
                    data['title'] = u'Sílabos'
                    materia_id = int(encrypt(request.GET['materia']))
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['materia'])))
                    data['facultad'] = materia.asignaturamalla.malla.carrera.coordinaciones()[0]
                    # data['silabos'] = Silabo.objects.filter(materia_id=materia_id, profesor=profesor)
                    # data['silabos'] = Silabo.objects.filter(materia_id=materia_id)
                    data['silabos'] = materia.silabo_set.all()
                    data['aprobar'] = variable_valor('APROBAR_SILABO')
                    data['rechazar'] = variable_valor('RECHAZAR_SILABO')
                    data['pendiente'] = variable_valor('PENDIENTE_SILABO')
                    return render(request, "pro_planificacion/silabodocenteposgrado.html", data)
                except Exception as ex:
                    pass

            elif action == 'listadopendientes':
                try:
                    data['silabo'] = silabo = Silabo.objects.select_related('materia').get(pk=int(encrypt(request.GET['id'])), status=True)
                    data['contenido'] = silabo.programaanaliticoasignatura.contenido_program_analitico()
                    data['listadotemas'] = DetalleSilaboSemanalTema.objects.select_related('temaunidadresultadoprogramaanalitico').filter(silabosemanal__silabo=silabo, silabosemanal__status=True, silabosemanal__silabo__status=True, status=True).distinct().order_by('silabosemanal__numsemana')
                    data['contenidotemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal_id__in=silabo.silabosemanal_set.values_list('id').filter(status=True), status=True, temaunidadresultadoprogramaanalitico__status=True)
                    data['contenidosubtemas'] = DetalleSilaboSemanalSubtema.objects.filter(silabosemanal_id__in=silabo.silabosemanal_set.values_list('id').filter(status=True), status=True, subtemaunidadresultadoprogramaanalitico__status=True)
                    data['totaltemascreados'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal__id', flat=True).filter(temasemanal__silabosemanal__silabo=silabo, evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__silabo=silabo, evaluacion__silabosemanal__status=True, evaluacion__silabosemanal__silabo__status=True, status=True).distinct()
                    data['componentesperiodo'] = periodo.evaluacioncomponenteperiodo_set.filter(status=True).order_by('parcial', 'componente__id') if not silabo.materia.asignaturamalla.malla.carrera.mi_coordinacion2() == 9 else []
                    librosuteca = silabo.materia.nivel.periodo.lineamientorecursoperiodo_set.filter(tiporecurso=13, tipoprofesor_id=1, status=True).first()
                    validalibrouteca = False
                    cumplerequisitouteca = True
                    if librosuteca:
                        data['librosuteca_cantidad'] = librosuteca.cantidad
                        validalibrouteca = True
                        libroodiloplanidicado = LibrosOdiloSilaboSemanal.objects.filter(silabosemanal__silabo=silabo, silabosemanal__status=True, status=True).count()
                        if libroodiloplanidicado < librosuteca.cantidad:
                            cumplerequisitouteca = False
                    data['validalibrouteca'] = validalibrouteca
                    data['cumplerequisitouteca'] = cumplerequisitouteca
                    template = get_template("pro_planificacion/listadopendientes.html")
                    return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'planclase':
                try:
                    data['title'] = u'Planificación semanal de sílabo'
                    lista_nueva = []
                    lista_semanas = []
                    panalitico = 0
                    data['periodo'] = periodo
                    data['silabocab'] = silabocab = Silabo.objects.select_related('materia').get(pk=int(encrypt(request.GET['silaboid'])), status=True)
                    porcentajecumplimiento = 100
                    if not silabocab.codigoqr:
                        porcentajecumplimiento = silabocab.estado_planificacion_clases()
                    data['tienesemanas'] = tienesemanas = silabocab.silabosemanal_set.filter(status=True).first()
                    if tienesemanas:
                        panalitico = 1
                    aux = 0
                    materiacerrada = False
                    if silabocab.materia.cerrado:
                        materiacerrada = True

                    data['listadocronogramaclase'] = listadocronogramaclase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, status=True).\
                        annotate(tienesemanaplanificada=Exists(SilaboSemanal.objects.filter(status=True, silabo_id=silabocab.id, numsemana=OuterRef('semana'))),
                                 tieneactividadplanificada=Exists(EvaluacionAprendizajeSilaboSemanal.objects.filter(silabosemanal__silabo_id=silabocab.id, tipoactividadsemanal=1, silabosemanal__numsemana=OuterRef('semana'), status=True,silabosemanal__status=True))).\
                        order_by('fechainicio')

                    numsemanaselec = int(request.GET['numsemana']) if 'numsemana' in request.GET else int(request.session['fecha_sel']) if 'fecha_sel' in request.session else 1
                    # for lplani in PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, semana=numsemanaselec,status=True).order_by('fechainicio'):
                    for lplani in listadocronogramaclase.filter(semana=numsemanaselec):
                        dia=lplani.fechainicio
                        if (dia.isocalendar()[1]) not in lista_nueva:
                            if not materiacerrada:
                                semana = silabocab.silabosemanal_set.filter(fechainiciosemana=lplani.fechainicio, status=True).order_by('-id').first()
                                if semana:
                                    semana.numsemana = lplani.semana
                                    semana.fechainiciosemana = lplani.fechainicio
                                    semana.fechafinciosemana = lplani.fechafin
                                    semana.save()
                            aux = aux + 1
                            lista_nueva.append(dia.isocalendar()[1])
                            obj = ''
                            enf = ''
                            enf2 = ''
                            enf3 = ''
                            rec = ''
                            eva = ''
                            idcodigo = 0
                            horap = 0
                            horapraexperimental = 0
                            modelosilabo = 0
                            horaa = 0
                            esexa = False
                            idsilsem = 0
                            if silabocab.silabosemanal_set.values('id').filter(fechainiciosemana=dia, examen = False, status=True).exists():
                                sila = silabocab.silabosemanal_set.filter(fechainiciosemana=dia, examen = False, status=True)[0]
                                obj = sila.objetivoaprendizaje
                                enf = sila.enfoque
                                enf2 = sila.enfoquedos
                                enf3 = sila.enfoquetres
                                rec = sila.recursos
                                eva = sila.evaluacion
                                horap = sila.horaspresencial  # silabo.materia.asignaturamalla.horaspresenciales
                                horaa = sila.horaautonoma  # silabo.materia.asignaturamalla.horasautonomas
                                horapraexperimental = sila.silabo.materia.asignaturamalla.horaspracticassemanales
                                idcodigo = sila.id
                                modelosilabo = sila
                                esexa = False
                                idsilsem = sila.id
                            d = dia_semana_ennumero_fecha(dia)
                            hasta = dia + timedelta(days=6)
                            if aux == 1:
                                if d == 1:
                                    hasta = dia
                                elif d == 2:
                                    hasta = dia + timedelta(days=6)
                                elif d == 3:
                                    hasta = dia + timedelta(days=5)
                                elif d == 4:
                                    hasta = dia + timedelta(days=4)
                                elif d == 5:
                                    hasta = dia + timedelta(days=3)
                                elif d == 6:
                                    hasta = dia + timedelta(days=2)
                                elif d == 7:
                                    hasta = dia + timedelta(days=1)
                            lista_semanas.append([dia.isocalendar()[1], dia, hasta, obj, enf, rec, eva, horap, horaa, idcodigo, modelosilabo, enf2, enf3, horapraexperimental, esexa, idsilsem])

                    data['panalitico'] = panalitico
                    data['fechas'] = lista_semanas
                    # SELECCION EN MENU
                    request.session['fecha_sel'] = numsemana = int(request.GET['numsemana']) if 'numsemana' in request.GET else int(request.session['fecha_sel']) if 'fecha_sel' in request.session else 1
                    request.session['listado_fechas_silabo'] = lista_semanas
                    request.session['fecha_sel'] = numsemana
                    # data['fecha'] = lista_semanas[numsemana - 1]
                    data['fecha'] = lista_semanas[0]
                    # SELECCION EN MENU
                    # data['porcentaje_semanas_registradas'] = silabocab.estado_semanas_llenas(lista_semanas.__len__())
                    data['tiene_practica'] = silabocab.materia.asignaturamalla.practicas
                    data['aprobar'] = variable_valor('APROBAR_SILABO')
                    data['rechazar'] = variable_valor('RECHAZAR_SILABO')
                    data['pendiente'] = variable_valor('PENDIENTE_SILABO')
                    data['urlmodle'] = variable_valor('URL_MOODLE')
                    data['no_permite_duplicar'] = silabocab.materia.modeloevaluativo_id == variable_valor('NO_PERMITE_DUPLICAR_MODELO_EVALUATIVO')
                    data['estado_aprobacion'] = silabocab.estado_aprobacion() if silabocab.tiene_aprobaciones() else None
                    pruede_modificar = False
                    hora_principal_0 = False
                    ban = 0
                    if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA) | Q(tipoprofesor_id=9) | Q(tipoprofesor_id=16) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO'))), profesor=profesor).exists():
                        pruede_modificar = True
                    else:
                        if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor_id=16) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO')) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA))).exists():
                            if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor_id=16) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO')) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))[0].hora == 0:
                                hora_principal_0 = True
                            for pro in silabocab.materia.profesormateria_set.filter(status=True, profesor=profesor, activo=True).exclude(tipoprofesor_id=4).exclude(
                                    pk__in=silabocab.materia.profesormateria_set.values_list('id', flat=False).filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor_id=16) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO')) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))):
                                if pro.hora > 0:
                                    ban = 1
                                    pruede_modificar = True
                                    break
                    if ban == 1:
                        if hora_principal_0 and pruede_modificar:
                            pruede_modificar = True
                        else:
                            pruede_modificar = False
                    if silabocab.versionsilabo == 1:
                        data['pruede_modificar'] = pruede_modificar
                        data['totalporcentajecumplimiento'] = porcentajecumplimiento
                        return render(request, "pro_planificacion/listado_plancase.html", data)
                    if silabocab.versionsilabo == 2:
                        pruede_modificar = True
                        if silabocab.codigoqr:
                            pruede_modificar = False
                        else:
                            if not silabocab.materia.nivel.periodo.evaluacioncomponenteperiodo_set.filter(status=True) and not periodo.clasificacion == 3:
                                porcentajecumplimiento = 90
                        data['totalporcentajecumplimiento'] = porcentajecumplimiento
                        data['pruede_modificar'] = pruede_modificar
                        return render(request, "pro_planificacion/plansemanal.html", data)
                except Exception as ex:
                    import sys

                    return HttpResponseRedirect("/pro_planificacion?info=Error en linea: {} - {} .".format(sys.exc_info()[-1].tb_lineno, ex))

                pass

            elif action == 'cambiar_semana_plan':
                try:
                    numsemana, idsilabocab = int(request.GET['numsemana']), int(request.GET['silabocab'])
                    if numsemana <= 0:
                        return JsonResponse({"result": False, 'mensaje': 'Número de semana no valido'})
                    request.session['fecha_sel'] = numsemana
                    if 'listado_fechas_silabo' in request.session:
                        lista_semanas = request.session['listado_fechas_silabo']
                        data['fecha'] = request.session['listado_fechas_silabo'][numsemana - 1]
                        data['silabocab'] = silabocab = Silabo.objects.select_related('materia').get(pk=idsilabocab, status=True)
                        data['porcentaje_semanas_registradas'] = silabocab.estado_semanas_llenas(lista_semanas.__len__())
                        data['tiene_practica'] = silabocab.materia.asignaturamalla.practicas
                        data['aprobar'] = variable_valor('APROBAR_SILABO')
                        data['rechazar'] = variable_valor('RECHAZAR_SILABO')
                        data['pendiente'] = variable_valor('PENDIENTE_SILABO')
                        pruede_modificar = False
                        hora_principal_0 = False
                        ban = 0
                        if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA) | Q(tipoprofesor_id=9) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO'))), profesor=profesor).exists():
                            pruede_modificar = True
                        else:
                            if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor_id=16) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO')) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA))).exists():
                                if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO')) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))[0].hora == 0:
                                    hora_principal_0 = True
                                for pro in silabocab.materia.profesormateria_set.filter(status=True, profesor=profesor, activo=True).exclude(tipoprofesor_id=4).exclude(
                                        pk__in=silabocab.materia.profesormateria_set.values_list('id', flat=False).filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO')) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))):
                                    if pro.hora > 0:
                                        ban = 1
                                        pruede_modificar = True
                                        break
                        if ban == 1:
                            if hora_principal_0 and pruede_modificar:
                                pruede_modificar = True
                            else:
                                pruede_modificar = False
                        data['pruede_modificar'] = pruede_modificar
                        template = get_template("pro_planificacion/plansemanaldetalle.html")
                        return JsonResponse({"result": True, 'data': template.render(data)})
                    else:
                        return JsonResponse({"result": False, 'mensaje': 'No se encontro semana sílabo'})
                except Exception as ex:
                    return JsonResponse({"result": False, 'mensaje': str(ex)})

            elif action == 'plansemanal':
                try:
                    data['title'] = u'Planificación semanal de sílabo'
                    lista_nueva = []
                    lista_semanas = []
                    panalitico = 0
                    data['silabocab'] = silabocab = Silabo.objects.get(pk=int(encrypt(request.GET['silaboid'])), status=True)

                    cab = Silabo.objects.get(pk=int(encrypt(request.GET['silaboid'])), status=True)

                    det = SilaboSemanal.objects.filter(silabo=cab, status=True)

                    if silabocab.silabosemanal_set.filter(status=True).exists():
                        # panalitico = 1
                        # materia = Materia.objects.get(pk=request.GET['m.exists(ateria'])
                        # silabo = SilaboSemanal.objects.filter(silabo=silabocab, status=True)
                        # if DetalleSilaboSemanalTema.objects.filter(silabosemanal_id__in=silabo).exists():
                        panalitico = 1
                    aux = 0
                    for dia in daterange(silabocab.materia.inicio, silabocab.materia.fin):
                        if (dia.isocalendar()[1]) not in lista_nueva:
                            aux = aux + 1
                            lista_nueva.append(dia.isocalendar()[1])
                            obj = ''
                            enf = ''
                            enf2 = ''
                            enf3 = ''
                            rec = ''
                            eva = ''
                            idcodigo = 0
                            horap = 0
                            modelosilabo = 0
                            horaa = 0
                            horapraexperimental = 0
                            for sila in silabocab.silabosemanal_set.filter(status=True):
                                if sila.semana == dia.isocalendar()[1]:
                                    obj = sila.objetivoaprendizaje
                                    enf = sila.enfoque
                                    enf2 = sila.enfoquedos
                                    enf3 = sila.enfoquetres
                                    rec = sila.recursos
                                    eva = sila.evaluacion
                                    horap = sila.horaspresencial  # silabo.materia.asignaturamalla.horaspresenciales
                                    horaa = sila.horaautonoma  # silabo.materia.asignaturamalla.horasautonomas
                                    horapraexperimental = sila.silabo.materia.asignaturamalla.horaspracticassemanales
                                    idcodigo = sila.id
                                    modelosilabo = sila
                            d = dia_semana_ennumero_fecha(dia)
                            hasta = dia + timedelta(days=6)
                            if aux == 1:
                                if d == 1:
                                    hasta = dia
                                elif d == 2:
                                    hasta = dia + timedelta(days=6)
                                elif d == 3:
                                    hasta = dia + timedelta(days=5)
                                elif d == 4:
                                    hasta = dia + timedelta(days=4)
                                elif d == 5:
                                    hasta = dia + timedelta(days=3)
                                elif d == 6:
                                    hasta = dia + timedelta(days=2)
                                elif d == 7:
                                    hasta = dia + timedelta(days=1)
                            lista_semanas.append([dia.isocalendar()[1], dia, hasta, obj, enf, rec, eva, horap, horaa, idcodigo, modelosilabo, enf2, enf3, horapraexperimental])
                            # lista_semanas.append([dia.isocalendar()[1], dia, (dia + timedelta(days=6)), obj, enf, rec, eva, horap, horaa, idcodigo, modelosilabo])
                    if not silabocab.materia.cerrado and silabocab.silabosemanal_set.filter(status=True).exists():
                        planificacionsilaboact = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, status=True).exclude(semana=0).order_by('orden')
                        for p in planificacionsilaboact:
                            if silabocab.silabosemanal_set.filter(fechainiciosemana=p.fechainicio, status=True).exists():
                                semana = silabocab.silabosemanal_set.get(fechainiciosemana=p.fechainicio, status=True)
                                if semana:
                                    semana.numsemana = p.semana
                                    semana.fechainiciosemana = p.fechainicio
                                    semana.fechafinciosemana = p.fechafin
                                    semana.save()
                    data['panalitico'] = panalitico
                    data['fechas'] = lista_semanas
                    data['porcentaje_semanas_registradas'] = silabocab.estado_semanas_llenas(lista_semanas.__len__())
                    data['tiene_practica'] = silabocab.materia.asignaturamalla.practicas
                    data['aprobar'] = variable_valor('APROBAR_SILABO')
                    data['rechazar'] = variable_valor('RECHAZAR_SILABO')
                    data['pendiente'] = variable_valor('PENDIENTE_SILABO')
                    pruede_modificar = False
                    hora_principal_0 = False
                    ban = 0
                    if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor_id=16) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA) | Q(tipoprofesor_id=9) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO'))), profesor=profesor).exists():
                        pruede_modificar = True
                    else:
                        if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor_id=16) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO')) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA))).exists():
                            if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor_id=16) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO')) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))[0].hora == 0:
                                hora_principal_0 = True
                            for pro in silabocab.materia.profesormateria_set.filter(status=True, profesor=profesor, activo=True).exclude(tipoprofesor_id=4).exclude(
                                    pk__in=silabocab.materia.profesormateria_set.values_list('id', flat=False).filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=11) | Q(tipoprofesor_id=12) | Q(tipoprofesor_id=10) | Q(tipoprofesor_id=7) | Q(tipoprofesor_id=16) | Q(tipoprofesor__id=variable_valor('ID_DOCENTE_REEMPLAZO')) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))):
                                if pro.hora > 0:
                                    ban = 1
                                    pruede_modificar = True
                                    break
                    if ban == 1:
                        if hora_principal_0 and pruede_modificar:
                            pruede_modificar = True
                        else:
                            pruede_modificar = False
                    data['pruede_modificar'] = pruede_modificar
                    return render(request, "pro_planificacion/plansemanal.html", data)
                except Exception as ex:
                    pass

            elif action == 'trazabilidad':
                try:
                    data['title'] = u'TRAZABILIDAD'
                    data['rutapage'] = request.GET['rutapage']
                    lista = []
                    listado = []
                    listacomponentes = []
                    listadodatos = []
                    listadocomponentes = EvaluacionComponente.objects.filter(status=True).order_by('id')
                    evaluacionaprendizajetotal = 0
                    listadoevaluacioncomponente = EvaluacionAprendizajeComponente.objects.filter(status=True).order_by('componente_id', 'id')
                    for componente in listadocomponentes:
                        total = componente.evaluacionaprendizajecomponente_set.filter(status=True).count()
                        if total == 0:
                            total = 1
                        evaluacionaprendizajetotal = evaluacionaprendizajetotal + total
                        listacomponentes.append([componente.id, componente.alias, componente.descripcion, total])
                    data['silabo'] = silabo = Silabo.objects.get(pk=int(encrypt(request.GET['id'])), status=True)
                    # listadotemas = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabo,silabosemanal__status=True, silabosemanal__silabo__status=True, status=True).order_by('silabosemanal__numsemana','temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden')
                    cursor = connections['sga_select'].cursor()
                    sql = """ 
                    select semanal.id as idsilabosemanal,semanatema.id,semanatema.id,semanal.numsemana,
                        tema.descripcion,uni.descripcion,uni.id,semanatema.objetivoaprendizaje,
                        uni.orden as uniorden,conte.orden  as conteorden,conte.descripcion,tema.orden as temaorden,sila.materia_id
                        from sga_detallesilabosemanaltema semanatema,
                        sga_silabosemanal semanal,sga_silabo sila,
                        sga_temaunidadresultadoprogramaanalitico tema,
                        sga_unidadresultadoprogramaanalitico uni,
                        sga_contenidoresultadoprogramaanalitico conte
                        where semanatema.silabosemanal_id=semanal.id
                        and semanal.silabo_id=sila.id
                        and semanatema.temaunidadresultadoprogramaanalitico_id=tema.id
                        and tema.unidadresultadoprogramaanalitico_id=uni.id
                        and uni.contenidoresultadoprogramaanalitico_id=conte.id
                        and sila.id=%s
                        and semanatema.status=True
                        and semanal.status=True
                        and sila.status=True
                        union all
                        select 0,0,0,plan.semana as numsemana,'','',0,'',0 as uniorden,0,'',0 as temaoorden,0
                        from sga_planificacionclasesilabo plan,sga_tipoplanificacionclasesilabo tiplan,
                        sga_planificacionclasesilabo_materia plamat
                        where plan.tipoplanificacion_id=tiplan.id
                        and plamat.tipoplanificacion_id=tiplan.id
                        and plamat.materia_id=%s
                        and plan.examen=True
                        order by numsemana,uniorden,temaorden
                    """ % (silabo.id, silabo.materia.id)
                    cursor.execute(sql)
                    listadotemas = cursor.fetchall()
                    for listema in listadotemas:
                        listado.append([listema[0], listema[1], listema[2], listema[3], listema[4],
                                        listema[5], listema[6], listema[7], listema[8], listema[9],
                                        listema[10], listema[11], listema[12]])
                    for lis in listado:
                        numerosemanas = numeroactividadesdinamico(lis[0], listado, 0, 0, 0, 0)
                        numerounidades = numeroactividadesdinamico(lis[6], listado, 6, 1, lis[0], 0)
                        codigoactividadobjetivo = ultimocodigoactividaddinamico(lis[0], listado, 0, 1, 0, 0, 0)
                        ultimocodigotema = ultimocodigoactividaddinamico(lis[6], listado, 6, 1, 1, lis[0], 0)
                        idmateria = lis[12]
                        nomunidad = lis[5]
                        codigounidad = lis[6]
                        objetivoaprendizaje = lis[7]
                        unidadorden = lis[8]
                        resultadoorden = lis[9]
                        resultadodescripcion = lis[10]
                        temaorden = lis[11]
                        existetest = 0
                        totaltest = 1
                        primertematest = 0
                        existeexp = 0
                        totalexp = 1
                        primertemaexp = 0
                        existetall = 0
                        totaltall = 1
                        primertematall = 0
                        existepex = 0
                        totalpex = 1
                        primertemapex = 0
                        existetar = 0
                        totaltar = 1
                        primertematar = 0
                        existefor = 0
                        totalfor = 1
                        primertemafor = 0
                        existetin = 0
                        totaltin = 1
                        primertematin = 0
                        existeadc = 0
                        totaladc = 1
                        primertemaadc = 0
                        colortest = ''
                        colorexp = ''
                        colortall = ''
                        colorpex = ''
                        colortar = ''
                        colorfor = ''
                        colortin = ''
                        coloradc = ''
                        idcodigotest = ''
                        idcodigotall = ''
                        idcodigoexp = ''
                        idcodigopex = ''
                        idcodigotar = ''
                        idcodigofor = ''
                        idcodigotin = ''
                        idcodigoadc = ''
                        if EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=1, temasemanal__status=True, temasemanal__silabosemanal__status=True, status=True):
                            selecteval = EvaluacionAprendizajeTema.objects.get(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=1, temasemanal__status=True, temasemanal__silabosemanal__status=True, status=True)
                            existetest = selecteval.evaluacion.id
                            colortest = selecteval.evaluacion.evaluacionaprendizaje.color
                            idcodigotest = COLORES_ACTIVIDADES[int(selecteval.evaluacion.numactividad) - 1][1]
                            primertematest = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existetest, temasemanal__status=True, temasemanal__silabosemanal__status=True, status=True).order_by('temasemanal__temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temasemanal__temaunidadresultadoprogramaanalitico__orden')[0].temasemanal.id
                            totaltest = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existetest, temasemanal__status=True, temasemanal__silabosemanal__status=True, status=True).count()
                        if EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=2, temasemanal__silabosemanal__status=True, status=True):
                            selecteval = EvaluacionAprendizajeTema.objects.get(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=2, temasemanal__silabosemanal__status=True, status=True)
                            existeexp = selecteval.evaluacion.id
                            colorexp = selecteval.evaluacion.evaluacionaprendizaje.color
                            idcodigoexp = COLORES_ACTIVIDADES[int(selecteval.evaluacion.numactividad) - 1][1]
                            primertemaexp = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existeexp, temasemanal__silabosemanal__status=True, status=True).order_by('temasemanal__temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temasemanal__temaunidadresultadoprogramaanalitico__orden')[0].temasemanal.id
                            totalexp = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existeexp, temasemanal__silabosemanal__status=True, status=True).count()
                        if EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=3, temasemanal__silabosemanal__status=True, status=True):
                            selecteval = EvaluacionAprendizajeTema.objects.get(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=3, temasemanal__silabosemanal__status=True, status=True)
                            existetall = selecteval.evaluacion.id
                            colortall = selecteval.evaluacion.evaluacionaprendizaje.color
                            idcodigotall = COLORES_ACTIVIDADES[int(selecteval.evaluacion.numactividad) - 1][1]
                            primertematall = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existetall, temasemanal__silabosemanal__status=True, status=True).order_by('temasemanal__temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temasemanal__temaunidadresultadoprogramaanalitico__orden')[0].temasemanal.id
                            totaltall = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existetall, temasemanal__silabosemanal__status=True, status=True).count()
                        if EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=4, temasemanal__silabosemanal__status=True, status=True):
                            selecteval = EvaluacionAprendizajeTema.objects.get(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=4, temasemanal__silabosemanal__status=True, status=True)
                            existepex = selecteval.evaluacion.id
                            colorpex = selecteval.evaluacion.evaluacionaprendizaje.color
                            idcodigopex = COLORES_ACTIVIDADES[int(selecteval.evaluacion.numactividad) - 1][1]
                            primertemapex = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existepex, temasemanal__silabosemanal__status=True, status=True).order_by('temasemanal__temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temasemanal__temaunidadresultadoprogramaanalitico__orden')[0].temasemanal.id
                            totalpex = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existepex, temasemanal__silabosemanal__status=True, status=True).count()
                        if EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=5, temasemanal__silabosemanal__status=True, status=True):
                            selecteval = EvaluacionAprendizajeTema.objects.get(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=5, temasemanal__silabosemanal__status=True, status=True)
                            existetar = selecteval.evaluacion.id
                            colortar = selecteval.evaluacion.evaluacionaprendizaje.color
                            idcodigotar = COLORES_ACTIVIDADES[int(selecteval.evaluacion.numactividad) - 1][1]
                            primertematar = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existetar, temasemanal__silabosemanal__status=True, status=True).order_by('temasemanal__temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temasemanal__temaunidadresultadoprogramaanalitico__orden')[0].temasemanal.id
                            totaltar = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existetar, temasemanal__silabosemanal__status=True, status=True).count()
                        if EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=6, temasemanal__silabosemanal__status=True, status=True):
                            selecteval = EvaluacionAprendizajeTema.objects.get(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=6, temasemanal__silabosemanal__status=True, status=True)
                            existefor = selecteval.evaluacion.id
                            colorfor = selecteval.evaluacion.evaluacionaprendizaje.color
                            idcodigofor = COLORES_ACTIVIDADES[int(selecteval.evaluacion.numactividad) - 1][1]
                            primertemafor = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existefor, temasemanal__silabosemanal__status=True, status=True).order_by('temasemanal__temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temasemanal__temaunidadresultadoprogramaanalitico__orden')[0].temasemanal.id
                            totalfor = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existefor, temasemanal__silabosemanal__status=True, status=True).count()
                        if EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=7, temasemanal__silabosemanal__status=True, status=True):
                            selecteval = EvaluacionAprendizajeTema.objects.get(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=7, temasemanal__silabosemanal__status=True, status=True)
                            existetin = selecteval.evaluacion.id
                            colortin = selecteval.evaluacion.evaluacionaprendizaje.color
                            idcodigotin = COLORES_ACTIVIDADES[int(selecteval.evaluacion.numactividad) - 1][1]
                            primertematin = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existetin, temasemanal__silabosemanal__status=True, status=True).order_by('temasemanal__temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temasemanal__temaunidadresultadoprogramaanalitico__orden')[0].temasemanal.id
                            totaltin = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existetin, temasemanal__silabosemanal__status=True, status=True).count()
                        if EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=8, temasemanal__silabosemanal__status=True, status=True):
                            selecteval = EvaluacionAprendizajeTema.objects.get(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, temasemanal_id=lis[1], evaluacion__silabosemanal__silabo=silabo, evaluacion__evaluacionaprendizaje_id=8, temasemanal__silabosemanal__status=True, status=True)
                            existeadc = selecteval.evaluacion.id
                            coloradc = selecteval.evaluacion.evaluacionaprendizaje.color
                            idcodigoadc = COLORES_ACTIVIDADES[int(selecteval.evaluacion.numactividad) - 1][1]
                            primertemaadc = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existeadc, temasemanal__silabosemanal__status=True, status=True).order_by('temasemanal__temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temasemanal__temaunidadresultadoprogramaanalitico__orden')[0].temasemanal.id
                            totaladc = EvaluacionAprendizajeTema.objects.filter(evaluacion__tipoactividadsemanal=1, evaluacion__silabosemanal__status=True, evaluacion_id=existeadc, temasemanal__silabosemanal__status=True, status=True).count()
                        lista.append([lis[0], numerosemanas, codigoactividadobjetivo, lis[1], lis[3], lis[4], nomunidad,
                                      codigounidad, numerounidades, ultimocodigotema, objetivoaprendizaje,
                                      existetest, totaltest, primertematest, colortest,
                                      existeexp, totalexp, primertemaexp, colorexp,
                                      existetall, totaltall, primertematall, colortall,
                                      existepex, totalpex, primertemapex, colorpex,
                                      existetar, totaltar, primertematar, colortar,
                                      existefor, totalfor, primertemafor, colorfor,
                                      unidadorden, resultadoorden, resultadodescripcion, temaorden,
                                      existetin, totaltin, primertematin, colortin,
                                      existeadc, totaladc, primertemaadc, coloradc,
                                      idcodigotest, idcodigoexp, idcodigotall, idcodigopex,
                                      idcodigotar, idcodigofor, idcodigotin, idcodigoadc, idmateria, int(selecteval.evaluacion.numactividad) - 1])
                    for lisdatos in lista:
                        listadodatos.append([lisdatos[0], lisdatos[1], lisdatos[2], lisdatos[3],
                                             lisdatos[4], lisdatos[5], lisdatos[6], lisdatos[7],
                                             lisdatos[8], lisdatos[9], lisdatos[10],
                                             lisdatos[11], lisdatos[12], lisdatos[13], lisdatos[14],
                                             lisdatos[15], lisdatos[16], lisdatos[17], lisdatos[18],
                                             lisdatos[19], lisdatos[20], lisdatos[21], lisdatos[22],
                                             lisdatos[23], lisdatos[24], lisdatos[25], lisdatos[26],
                                             lisdatos[27], lisdatos[28], lisdatos[29], lisdatos[30],
                                             lisdatos[31], lisdatos[32], lisdatos[33], lisdatos[34],
                                             lisdatos[35], lisdatos[36], lisdatos[37], lisdatos[38],
                                             lisdatos[39], lisdatos[40], lisdatos[41], lisdatos[42],
                                             lisdatos[43], lisdatos[44], lisdatos[45], lisdatos[46],
                                             lisdatos[47], lisdatos[48], lisdatos[49], lisdatos[50],
                                             lisdatos[51], lisdatos[52], lisdatos[53], lisdatos[54], lisdatos[55], lisdatos[56]])
                    data['listadoevaluacioncomponente'] = listadoevaluacioncomponente,
                    data['listacomponentes'] = listacomponentes,
                    data['totalcomponentes'] = evaluacionaprendizajetotal,
                    data['listadotemas'] = listadodatos
                    return render(request, "pro_planificacion/trazabilidad.html", data)

                except Exception as ex:
                    pass

            elif action == 'recursopractica':
                try:
                    if 'id' in request.GET:
                        listaactivo = []
                        listaproducto = []
                        activos = InventarioLaboratorioAcademia.objects.filter(laboratorio_id=int(request.GET['id']), status=True, activo__isnull=False)
                        for equipo in activos:
                            listaactivo.append([equipo.id, str(equipo.activo)])
                        productos = InventarioLaboratorioAcademia.objects.filter(laboratorio_id=int(request.GET['id']), status=True, producto__isnull=False)
                        for pro in productos:
                            listaproducto.append([pro.id, str(pro.producto)])
                        if 'idp' in request.GET:
                            practica = GPGuiaPracticaSemanal.objects.get(pk=int(request.GET['idp']))
                            activos = []
                            for eq in practica.mi_laboratorio().gplugarpracticadetalle_set.filter(status=True, detalle__activo__isnull=False):
                                activos.append([eq.detalle.id, str(eq.detalle.activo)])
                            productos = []
                            for pro in practica.mi_laboratorio().gplugarpracticadetalle_set.filter(status=True, detalle__producto__isnull=False):
                                productos.append([pro.detalle.id, pro.cantidad, str(pro.detalle.producto.unidadmedida.nombre), str(pro.detalle.producto)])
                            data = {"results": "ok", 'listaactivo': listaactivo, 'listaproducto': listaproducto, 'activos': activos, 'productos': productos}
                        else:
                            data = {"results": "ok", 'listaactivo': listaactivo, 'listaproducto': listaproducto}
                        return JsonResponse(data)
                except Exception as ex:
                    pass

            elif action == 'cantidadrecurso':
                try:
                    if 'id' in request.GET:
                        lista = []
                        recurso = InventarioLaboratorioAcademia.objects.get(pk=int(request.GET['id']))
                        for can in range(recurso.cantidad):
                            lista.append([can + 1])
                        data = {"results": "ok", 'lista': lista}
                        return JsonResponse(data)
                except Exception as ex:
                    pass

            elif action == 'consultaractivo':
                try:
                    if 'id' in request.GET:
                        recurso = InventarioLaboratorioAcademia.objects.get(pk=int(request.GET['id']))
                        data = {"results": "ok", "recurso": str(recurso.activo)}
                        return JsonResponse(data)
                except Exception as ex:
                    pass

            elif action == 'consultarproducto':
                try:
                    if 'id' in request.GET:
                        recurso = InventarioLaboratorioAcademia.objects.get(pk=int(request.GET['id']))
                        data = {"results": "ok", "producto": str(recurso.producto), "unidad": str(recurso.producto.unidadmedida)}
                        return JsonResponse(data)
                except Exception as ex:
                    pass

            elif action == 'practicas':
                try:
                    data['title'] = u'Guía de Prácticas'
                    data['silabosemana'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['silabo'] = silabosemana.silabo
                    data['practicas'] = GPGuiaPracticaSemanal.objects.filter(status=True, silabosemanal_id=silabosemana.id).order_by('numeropractica')
                    return render(request, "pro_planificacion/viewguiapratica.html", data)
                except Exception as ex:
                    pass

            elif action == 'practicasrecursos':
                try:
                    data['title'] = u'Guía de Prácticas'
                    data['silabosemana'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['silabo'] = silabosemana.silabo
                    data['practicas'] = GPGuiaPracticaSemanal.objects.filter(status=True, silabosemanal_id=silabosemana.id).order_by('numeropractica')
                    data['HOST'] = 'http://localhost:8000' if DEBUG else 'https://sga.unemi.edu.ec'
                    return render(request, "pro_planificacion/viewguiapraticarec.html", data)
                except Exception as ex:
                    pass

            elif action == 'addpractica':
                try:
                    data['title'] = u'Adicionar Nueva Guía de Prácticas'
                    data['silabosemana'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['silabo'] = silabosemana
                    npractica = 1
                    if GPGuiaPracticaSemanal.objects.filter(silabosemanal__silabo_id=silabosemana.silabo.id).exists():
                        listanumero = GPGuiaPracticaSemanal.objects.values_list('numeropractica', flat=False).filter(silabosemanal__silabo_id=silabosemana.silabo.id).order_by('numeropractica')
                        n = 0
                        for lista in listanumero:
                            n = n + 1
                            if not n == lista[0]:
                                npractica = n
                                break
                            else:
                                npractica = n + 1
                    data['npractica'] = npractica
                    form = GPPracticaFrom(initial={'numeropractica': npractica, 'laboratorio': silabosemana.silabo.materia.laboratorio if silabosemana.silabo.materia.laboratorio else None})  # initial={'laboratorio':silabosemana.silabo.materia.laboratorio if silabosemana.silabo.materia.laboratorio else None })
                    form.fields['temapractica'].queryset = silabosemana.detallesilabosemanaltema_set.filter(status=True)
                    form.fields['subtemapractica'].queryset = DetalleSilaboSemanalSubtema.objects.filter(id=None)
                    data['activos'] = silabosemana.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, activo__isnull=False) if silabosemana.silabo.materia.laboratorio else []
                    data['productos'] = silabosemana.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, producto__isnull=False) if silabosemana.silabo.materia.laboratorio else []
                    data['form'] = form
                    return render(request, "pro_planificacion/addpractica.html", data)
                except Exception as ex:
                    pass

            elif action == 'addpracticarecurso':
                try:
                    data['title'] = u'Adicionar Nueva Guía de Prácticas'
                    data['silabosemana'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['silabo'] = silabosemana
                    npractica = 1
                    if GPGuiaPracticaSemanal.objects.filter(silabosemanal__silabo_id=silabosemana.silabo.id).exists():
                        listanumero = GPGuiaPracticaSemanal.objects.values_list('numeropractica', flat=False).filter(silabosemanal__silabo_id=silabosemana.silabo.id).order_by('numeropractica')
                        n = 0
                        for lista in listanumero:
                            n = n + 1
                            if not n == lista[0]:
                                npractica = n
                                break
                            else:
                                npractica = n + 1
                    data['npractica'] = npractica
                    data['tipoambiente'] = AMBIENTE_APRENDIZAJE
                    data['ubicacion'] = UBICACION_APRENDIZAJE
                    # form = GPPracticaRecursoFrom(initial={'numeropractica':npractica, 'laboratorio': silabosemana.silabo.materia.laboratorio if silabosemana.silabo.materia.laboratorio else None})
                    # form.fields['temapractica'].queryset = silabosemana.detallesilabosemanaltema_set.filter(status=True)
                    # form.fields['subtemapractica'].queryset = DetalleSilaboSemanalSubtema.objects.filter(id=None)
                    data['activos'] = silabosemana.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, activo__isnull=False) if silabosemana.silabo.materia.laboratorio else []
                    data['productos'] = silabosemana.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, producto__isnull=False) if silabosemana.silabo.materia.laboratorio else []
                    # data['form']=form
                    data['formobjetivo'] = ObjetivoProgramaAnaliticoAsignaturaForm()
                    return render(request, "pro_planificacion/addpracticarecurso.html", data)
                except Exception as ex:
                    pass

            elif action == 'addpracticarecursovdos':
                try:
                    data['title'] = u'Adicionar Nueva Guía de Prácticas'
                    data['silabosemana'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['silabo'] = silabosemana
                    npractica = 1
                    if GPGuiaPracticaSemanal.objects.filter(silabosemanal__silabo_id=silabosemana.silabo.id).exists():
                        practicas = GPGuiaPracticaSemanal.objects.values_list('numeropractica', flat=True).filter(silabosemanal__silabo_id=silabosemana.silabo.id).order_by('numeropractica')
                        for n, numero in enumerate(practicas, start=1):
                            if not n == numero:
                                npractica = n
                                break
                            else:
                                npractica = len(practicas) + 1

                    NUM_ESTUDIANTES_GRUPO = variable_valor('NUM_ESTUDIANTES_GRUPO')
                    if coordinacion := silabosemana.silabo.materia.coordinacion():
                        if coordinacion.pk == 1:
                            NUM_ESTUDIANTES_GRUPO = variable_valor('NUM_ESTUDIANTES_GRUPO_SALUD')
                    data['npractica'] = npractica
                    data['tipoambiente'] = AMBIENTE_APRENDIZAJE
                    data['ubicacion'] = UBICACION_APRENDIZAJE
                    data['activos'] = silabosemana.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, activo__isnull=False) if silabosemana.silabo.materia.laboratorio else []
                    data['productos'] = silabosemana.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, producto__isnull=False) if silabosemana.silabo.materia.laboratorio else []
                    hape = int(silabosemana.silabo.materia.asignaturamalla.horasapesemanal) if silabosemana.silabo.materia.asignaturamalla.horasapesemanal else 0
                    data['formobjetivo'] = ObjetivoProgramaAnaliticoAsignaturaForm()

                    nombrepractica = f'G{npractica:03}_S{silabosemana.numsemana:02}_'
                    tiempoactividad = "0:0"
                    try:
                        carrera = silabosemana.silabo.materia.carrera()
                        inicarrera = ''.join([r[0] if not f"{r[0]}".isdigit() else r for r in carrera.nombre.split(' ') if len(r) > 3])
                        nombrepractica += f"{inicarrera}_{carrera.get_modalidad_display().replace(' ', '')}"
                        filtrosemana = Q(silabo=silabosemana.silabo, status=True)
                        stotal = silabosemana.silabo.silabosemanal_set.filter(examen=False, status=True).order_by('-numsemana').first()
                        smedia = int(stotal.numsemana/2)
                        if silabosemana.parcial:
                            filtrosemana &= Q(parcial=silabosemana.parcial)
                        else:
                            if silabosemana.numsemana <= smedia:
                                silabosemana.parcial = 1
                                filtrosemana &= Q(numsemana__lte=smedia)
                            else:
                                silabosemana.parcial = 2
                                filtrosemana &= Q(numsemana__gte=smedia+1, numsemana__lte=stotal.numsemana)
                        min, max = (0, smedia) if silabosemana.parcial == 1 else (smedia+1, stotal.numsemana)
                        semanasplanificadas = [ss.numsemana for ss in SilaboSemanal.objects.filter(filtrosemana).order_by('numsemana') if ss.test_plansemanal(4)]
                        tiempoactividad = time(math.ceil(((max - min) * hape) / len(semanasplanificadas)), 0) if len(semanasplanificadas) else time(hape, 0)
                    except Exception as ex:
                        pass

                    # Semanas seleccionadas
                    semanasplanificadas = [silabosemana.pk]
                    if semanas := EvaluacionAprendizajeTema.objects.values_list('temasemanal__silabosemanal', flat=True).filter(evaluacion__evaluacionaprendizaje_id=4, evaluacion__silabosemanal=silabosemana, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True):
                        semanasplanificadas = semanas

                    # Bibliografía básica
                    bibliografiaseleccionada = DetalleSilaboSemanalBibliografia.objects.values_list('bibliografiaprogramaanaliticoasignatura_id').filter(silabosemanal__in=semanasplanificadas, status=True)
                    listadobibiografiabasica = BibliografiaProgramaAnaliticoAsignatura.objects.filter(pk__in=bibliografiaseleccionada)

                    articulos = ArticuloSilaboSemanal.objects.values_list('articulo_id').filter(silabosemanal__in=semanasplanificadas, silabosemanal__status=True, status=True)
                    bibliografiacomplementaria = DetalleSilaboSemanalBibliografiaDocente.objects.values_list('librokohaprogramaanaliticoasignatura', flat=True).filter(silabosemanal__in=semanasplanificadas, status=True).distinct()

                    # Bibliografía complementaria
                    bibliografiacomplementaria = LibroKohaProgramaAnaliticoAsignatura.objects.filter(id__in=bibliografiacomplementaria, status=True).order_by('id').distinct('id')
                    listadoguiaarticulos = ArticuloInvestigacion.objects.filter(pk__in=articulos, status=True).order_by('id').distinct('id')
                    bbliogriapa = BibliograbiaAPASilabo.objects.filter(silabosemanal__in=semanasplanificadas, status=True).order_by('id').distinct('id')
                    librosuteca = LibrosOdiloSilaboSemanal.objects.filter(silabosemanal__in=semanasplanificadas, status=True).order_by('id').distinct('id')

                    data['secciones'] = [(1, 'Datos generales'), (2, 'Requerimientos internos para la practica'), (3, 'Procedimientos / instrucciones / actividades a desarrollar'), (4, 'Referencias bibliográficas')]
                    data['cantidad'] = list(range(1, 21))
                    data['nombrepractica'] = nombrepractica
                    data['tiempoactividad'] = tiempoactividad
                    data['cantidadgrupo'] = list(range(1, 12))
                    data['listaestudiantes'] = list(range(2, NUM_ESTUDIANTES_GRUPO + 1))

                    data['bbliogriapa'] = bbliogriapa
                    data['librosuteca'] = librosuteca
                    data['listadoguiaarticulos'] = listadoguiaarticulos
                    data['listadobibiografiabasica'] = listadobibiografiabasica
                    data['bibliografiacomplementaria'] = bibliografiacomplementaria
                    data['laboratorios'] = LaboratorioAcademia.objects.filter(status=True)
                    data['insumosequipo'] = RequerimientoInternoPractica.objects.filter(tipo=1, status=True).distinct()
                    data['insumosmaterial'] = RequerimientoInternoPractica.objects.filter(tipo=2, status=True).distinct()
                    return render(request, "pro_planificacion/addpracticarecursovdos.html", data)
                except Exception as ex:
                    pass

            elif action == 'editpracticarecursovdos':
                try:
                    data['title'] = u'Editar guía de prácticas'
                    NUM_ESTUDIANTES_GRUPO = variable_valor('NUM_ESTUDIANTES_GRUPO')
                    data['practicasemana'] = practica = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['silabo'] = practica.silabosemanal
                    if coordinacion := practica.silabosemanal.silabo.materia.coordinacion():
                        if coordinacion.pk == 1:
                            NUM_ESTUDIANTES_GRUPO = variable_valor('NUM_ESTUDIANTES_GRUPO_SALUD')
                    data['listadoobjetivo'] = practica.gpobjetivo_set.filter(status=True)
                    data['listadobibiografiabasica'] = BibliografiaProgramaAnaliticoAsignatura.objects.filter(pk__in=DetalleSilaboSemanalBibliografia.objects.values_list('bibliografiaprogramaanaliticoasignatura_id').filter(silabosemanal__silabo=practica.silabosemanal.silabo, silabosemanal__status=True, status=True))
                    data['listadobasica'] = practica.gpbibliografiabasica_set.values_list('bibliografiaprogramaanaliticoasignatura_id', flat=True).filter(status=True)
                    data['listadetemas'] = practica.gptemas_set.values_list('tema_id', flat=True).filter(status=True)
                    data['listadobibiografiacomplementaria'] = LibroKohaProgramaAnaliticoAsignatura.objects.filter(pk__in=DetalleSilaboSemanalBibliografiaDocente.objects.values_list('librokohaprogramaanaliticoasignatura_id').filter(silabosemanal__silabo=practica.silabosemanal.silabo, silabosemanal__status=True, status=True))
                    data['listadocomplementaria'] = practica.gpbibliografiacomplementaria_set.values_list('librokohaprogramaanaliticoasignatura_id', flat=True).filter(status=True)
                    data['listadovirtual'] = practica.gpbibliografiavirtual_set.values_list('virtual_id', flat=True).filter(status=True)
                    #data['listadoguiaarticulos'] = ArticuloInvestigacion.objects.filter(pk__in=ArticuloSilaboSemanal.objects.values_list('articulo_id').filter(silabosemanal__silabo=practica.silabosemanal.silabo, silabosemanal__status=True, status=True))
                    data['listadoarticuloselec'] = practica.gparticulo_set.values_list('articuloinvestigacion_id', flat=True).filter(status=True)
                    instruccion = ''
                    if gpinstruccion := practica.gpinstruccion_set.filter(status=True).first():
                        instruccion = gpinstruccion.observacion
                    data['instruccion'] = instruccion
                    data['tipoambiente'] = AMBIENTE_APRENDIZAJE
                    data['ubicacion'] = UBICACION_APRENDIZAJE
                    data['activos_select'] = practica.silabosemanal.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, activo__isnull=False) if practica.silabosemanal.silabo.materia.laboratorio else []
                    data['productos_select'] = practica.silabosemanal.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, producto__isnull=False) if practica.silabosemanal.silabo.materia.laboratorio else []
                    data['activos'] = practica.gplugarpracticadetalle_set.filter(status=True, detalle__activo__isnull=False)
                    data['productos'] = practica.gplugarpracticadetalle_set.filter(status=True, detalle__producto__isnull=False)
                    data['formobjetivo'] = ObjetivoProgramaAnaliticoAsignaturaForm()

                    # Semanas seleccionadas
                    semanasplanificadas = [practica.silabosemanal.pk]
                    if semanas := EvaluacionAprendizajeTema.objects.values_list('temasemanal__silabosemanal', flat=True).filter(evaluacion__evaluacionaprendizaje_id=4, evaluacion__silabosemanal=practica.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True):
                        semanasplanificadas = semanas

                    # Bibliografía básica
                    bibliografiaseleccionada = DetalleSilaboSemanalBibliografia.objects.values_list('bibliografiaprogramaanaliticoasignatura_id').filter(silabosemanal__in=semanasplanificadas,status=True)
                    listadobibiografiabasica = BibliografiaProgramaAnaliticoAsignatura.objects.filter(pk__in=bibliografiaseleccionada)
                    for b in listadobibiografiabasica:
                        b.__setattr__('seleccionadoguiapractica', practica.gpbibliografiabasica_set.filter(bibliografiaprogramaanaliticoasignatura=b, status=True).exists())

                    # Bibliografía complementaria
                    bibliografiacomplementaria = DetalleSilaboSemanalBibliografiaDocente.objects.values_list('librokohaprogramaanaliticoasignatura', flat=True).filter(silabosemanal__in=semanasplanificadas,status=True).distinct()
                    liarticulos = ArticuloSilaboSemanal.objects.values_list('articulo', flat=True).filter(silabosemanal__in=semanasplanificadas, silabosemanal__status=True, status=True).order_by('id').distinct('id')

                    bibliografiacomplementaria = LibroKohaProgramaAnaliticoAsignatura.objects.filter(id__in=bibliografiacomplementaria, status=True).order_by('id').distinct('id')
                    for b in bibliografiacomplementaria:
                        b.__setattr__('seleccionadoguiapractica', practica.gpbibliografiacomplementaria_set.filter(librokohaprogramaanaliticoasignatura=b, status=True).exists())

                    listadoguiaarticulos = ArticuloInvestigacion.objects.filter(pk__in=liarticulos, status=True).order_by('id').distinct('id')
                    for b in listadoguiaarticulos:
                        b.__setattr__('seleccionadoguiapractica', practica.gparticulo_set.filter(articuloinvestigacion=b, status=True).exists())

                    bbliogriapa = BibliograbiaAPASilabo.objects.filter(silabosemanal__in=semanasplanificadas,status=True).order_by('id').distinct('id')
                    for b in bbliogriapa:
                        b.__setattr__('seleccionadoguiapractica', practica.gpbibliografiavirtual_set.filter(virtual=b, status=True).exists())

                    librosuteca = LibrosOdiloSilaboSemanal.objects.filter(silabosemanal__in=semanasplanificadas, status=True).order_by('id').distinct('id')
                    for b in librosuteca:
                        b.__setattr__('seleccionadoguiapractica', practica.gplibrosodilo_set.filter(libroodilo_id=b, status=True).exists())

                    materia = practica.silabosemanal.silabo.materia
                    data['secciones'] = [(1, 'Datos generales'), (2, 'Requerimientos internos para la practica'), (3, 'Procedimientos / instrucciones / actividades a desarrollar'), (4, 'Referencias bibliográficas')]
                    data['bbliogriapa'] = bbliogriapa
                    data['librosuteca'] = librosuteca
                    data['cantidad'] = list(range(1, 21))
                    data['cantidadgrupo'] = list(range(1, 12))
                    data['nombrepractica'] = practica.nombrepractica
                    data['listadoguiaarticulos'] = listadoguiaarticulos
                    data['listadobibiografiabasica'] = listadobibiografiabasica
                    data['bibliografiacomplementaria'] = bibliografiacomplementaria
                    data['listaestudiantes'] = list(range(2, NUM_ESTUDIANTES_GRUPO + 1))
                    data['listaobjetivos'] = practica.gpobjetivo_set.filter(status=True)
                    data['laboratorios'] = LaboratorioAcademia.objects.filter(status=True)
                    data['insumosequipo'] = RequerimientoInternoPractica.objects.filter(tipo=1, status=True).distinct()
                    data['insumosmaterial'] = RequerimientoInternoPractica.objects.filter(tipo=2, status=True).distinct()
                    data['listadoequipos'] = practica.gprequerimientopractica_set.filter(requerimiento__tipo=1, status=True)
                    data['listadoinsumos'] = practica.gprequerimientopractica_set.filter(requerimiento__tipo=2, status=True)
                    return render(request, "pro_planificacion/addpracticarecursovdos.html", data)
                except Exception as ex:
                    return HttpResponseRedirect(f"/pro_planificacion?action=practicasrecursos&ids={encrypt(practica.silabosemanal.pk)}")

            elif action == 'cargarequerimientos':
                try:
                    materia = Materia.objects.get(id=request.GET['c'])
                    dataset = RequerimientoInternoPractica.objects.filter(Q(ubicacion=request.GET['u'], status=True) & Q(Q(carrera=materia.asignaturamalla.malla.carrera) | Q(carrera=None))).distinct()
                    return JsonResponse({'data': [{'id': r.pk, 't': r.tipo, 'value': f"{r.detalle}"} for r in dataset]})
                except Exception as ex:
                    pass

            elif action == 'delpractica':
                try:
                    data['title'] = u'Eliminar la Práctica'
                    data['practica'] = practica = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['silabo'] = practica.silabosemanal
                    return render(request, "pro_planificacion/delpractica.html", data)
                except Exception as ex:
                    pass

            elif action == 'delpracticarecurso':
                try:
                    data['title'] = u'Eliminar la Práctica'
                    data['practica'] = practica = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['silabo'] = practica.silabosemanal
                    return render(request, "pro_planificacion/delpracticarecurso.html", data)
                except Exception as ex:
                    pass

            elif action == 'editpractica':
                try:
                    data['title'] = u'Editar Guía de Prácticas'
                    data['practicasemana'] = practica = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['silabo'] = practica.silabosemanal
                    form = GPPracticaFrom(initial={
                        'temapractica': practica.temapractica,
                        'subtemapractica': practica.subtemapractica,
                        'numeropractica': practica.numeropractica,
                        'tiempoactividad': practica.tiempoactividad.strftime("%H:%M"),
                        'fechaelaboracion': practica.fechaelaboracion.strftime("%d-%m-%Y"),
                        'individual': practica.individual,
                        'grupo': practica.grupo,
                        'cantidadalumnogrupo': practica.cantidadalumnogrupo if practica.cantidadalumnogrupo else None,
                        'objetvopactica': practica.objetvopactica,
                        'instruccionobservacion': practica.gpinstruccion_set.filter(status=True)[0].observacion,
                        'actividaddesarrollar': practica.actividaddesarrollar,
                        'rubica': practica.rubica,
                        'laboratorio': practica.silabosemanal.silabo.materia.laboratorio if practica.silabosemanal.silabo.materia.laboratorio else None})
                    form.fields['temapractica'].queryset = practica.silabosemanal.detallesilabosemanaltema_set.filter(status=True)
                    st = True
                    if practica.temapractica:
                        if practica.silabosemanal.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__temaunidadresultadoprogramaanalitico__id=practica.temapractica.temaunidadresultadoprogramaanalitico.id):
                            form.fields['subtemapractica'].queryset = practica.silabosemanal.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__temaunidadresultadoprogramaanalitico__id=practica.temapractica.temaunidadresultadoprogramaanalitico.id)
                        else:
                            form.fields['subtemapractica'].queryset = DetalleSilaboSemanalSubtema.objects.filter(id=None)
                            st = False
                    else:
                        st = False
                    data['tema_tiene_subtemas'] = st
                    data['activos_select'] = practica.silabosemanal.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, activo__isnull=False) if practica.silabosemanal.silabo.materia.laboratorio else []
                    data['productos_select'] = practica.silabosemanal.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, producto__isnull=False) if practica.silabosemanal.silabo.materia.laboratorio else []
                    data['activos'] = practica.gplugarpracticadetalle_set.filter(status=True, detalle__activo__isnull=False)
                    data['productos'] = practica.gplugarpracticadetalle_set.filter(status=True, detalle__producto__isnull=False)
                    data['form'] = form
                    return render(request, "pro_planificacion/editpractica.html", data)
                except Exception as ex:
                    pass

            elif action == 'editpracticarecurso':
                try:
                    data['title'] = u'Editar Guía de Prácticas'
                    data['practicasemana'] = practica = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['silabo'] = practica.silabosemanal
                    data['listadoobjetivo'] = practica.gpobjetivo_set.filter(status=True)
                    data['listadobasica'] = practica.gpbibliografiabasica_set.values_list('basica_id', flat=True).filter(status=True)
                    data['listadetemas'] = practica.gptemas_set.values_list('tema_id', flat=True).filter(status=True)
                    data['listadocomplementaria'] = practica.gpbibliografiacomplementaria_set.values_list('complementaria_id', flat=True).filter(status=True)
                    data['listadovirtual'] = practica.gpbibliografiavirtual_set.values_list('virtual_id', flat=True).filter(status=True)
                    data['listadoarticuloselec'] = practica.gparticulo_set.values_list('articulo_id', flat=True).filter(status=True)
                    # form = GPPracticaRecursoFrom(initial={
                    #     # 'temapractica':practica.temapractica,
                    #     # 'subtemapractica':practica.subtemapractica,
                    #     'numeropractica':practica.numeropractica,
                    #     'tiempoactividad':practica.tiempoactividad.strftime("%H:%M"),
                    #     'fechaelaboracion':practica.fechaelaboracion.strftime("%d-%m-%Y"),
                    #     'individual':practica.individual,
                    #     'grupo':practica.grupo,
                    #     'nombrepractica':practica.nombrepractica,
                    #     'asistida':practica.asistida,
                    #     'noasistida':practica.noasistida,
                    #     'tipoambiente':practica.tipoambiente,
                    #     'nombreambiente':practica.nombreambiente,
                    #     'ubicacionambiente':practica.ubicacionambiente,
                    #     'cantidadalumnogrupo':practica.cantidadalumnogrupo if practica.cantidadalumnogrupo else None,
                    #     # 'objetvopactica':practica.objetvopactica,
                    #     'instruccionobservacion':practica.gpinstruccion_set.filter(status=True)[0].observacion,
                    #     # 'actividaddesarrollar':practica.actividaddesarrollar,
                    #     'rubrica':practica.rubica,
                    #     'laboratorio': practica.silabosemanal.silabo.materia.laboratorio if practica.silabosemanal.silabo.materia.laboratorio else None})
                    # form.fields['temapractica'].queryset = practica.silabosemanal.detallesilabosemanaltema_set.filter(status=True)
                    # st = True
                    # if practica.temapractica:
                    #     if practica.silabosemanal.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__temaunidadresultadoprogramaanalitico__id=practica.temapractica.temaunidadresultadoprogramaanalitico.id):
                    #         form.fields['subtemapractica'].queryset = practica.silabosemanal.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__temaunidadresultadoprogramaanalitico__id=practica.temapractica.temaunidadresultadoprogramaanalitico.id)
                    #     else:
                    #         form.fields['subtemapractica'].queryset = DetalleSilaboSemanalSubtema.objects.filter(id=None)
                    #         st = False
                    # else:
                    #     st = False
                    # data['tema_tiene_subtemas'] = st
                    instruccion = ''
                    if practica.gpinstruccion_set.filter(status=True):
                        instruccion = practica.gpinstruccion_set.filter(status=True)[0].observacion
                    data['instruccion'] = instruccion
                    data['tipoambiente'] = AMBIENTE_APRENDIZAJE
                    data['ubicacion'] = UBICACION_APRENDIZAJE
                    data['activos_select'] = practica.silabosemanal.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, activo__isnull=False) if practica.silabosemanal.silabo.materia.laboratorio else []
                    data['productos_select'] = practica.silabosemanal.silabo.materia.laboratorio.inventariolaboratorioacademia_set.filter(status=True, producto__isnull=False) if practica.silabosemanal.silabo.materia.laboratorio else []
                    data['activos'] = practica.gplugarpracticadetalle_set.filter(status=True, detalle__activo__isnull=False)
                    data['productos'] = practica.gplugarpracticadetalle_set.filter(status=True, detalle__producto__isnull=False)
                    # data['form']=form
                    data['formobjetivo'] = ObjetivoProgramaAnaliticoAsignaturaForm()
                    return render(request, "pro_planificacion/editpracticarecurso.html", data)
                except Exception as ex:
                    pass

            # elif action == 'detalleequipo':
            #     try:
            #         if 'id' in request.GET:
            #             laboratorio = GPLugarPractica.objects.get(pk=int(request.GET['id']), status=True)
            #             data['equipos'] = laboratorio.gplugarpracticadetalle_set.filter(status=True,detalle__activo__isnull=False)
            #             template = get_template("pro_planificacion/detalleequipos.html")
            #             json_content = template.render(data)
            #             return JsonResponse({"result": "ok", 'data': json_content})
            #     except Exception as ex:
            #         return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'detallepractica':
                try:
                    if 'id' in request.GET:
                        data['title'] = u'Detalle de la práctica'
                        data['practica'] = practica = GPGuiaPracticaSemanal.objects.get(pk=int(encrypt(request.GET['id'])), status=True)
                        template = get_template("pro_planificacion/detallepractica.html")
                        json_content = template.render(data)
                        return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'silabodigitalfirmado':
                try:
                    data['title'] = u'Subir Silabo Firmado'
                    data['silabo'] = silabo = Silabo.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['form'] = SilaboDigitalFirmadoForm()
                    if silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id == 7:
                        return render(request, "pro_planificacion/subirsilabofirmadoposgrado.html", data)
                    else:
                        return render(request, "pro_planificacion/subirsilabofirmado.html", data)
                except Exception as ex:
                    pass

            elif action == 'tiene_silabo':
                try:
                    if Silabo.objects.filter(materia_id=int(request.GET['id']), status=True).exists():
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"No Tiene Silabo."})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'tiene_programaanalitico':
                try:
                    materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    filters = Q(status=True)
                    if prueba_modelo_evaluativo: filters &= Q(procedimientoeva_id=6)
                    else: filters &= Q(activo=True)
                    if not materia.asignaturamalla.programaanaliticoasignatura_set.filter(filters).exists():
                        return JsonResponse({"result": "bad", "mensaje": u"No Tiene Programa Analitico."})
                    return JsonResponse({"result": "ok"})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'tiene_laboratorio':
                try:
                    if SilaboSemanal.objects.get(pk=int(request.GET['id'])).silabo.materia.laboratorio:
                        return JsonResponse({"result": "ok"})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"No Tiene Laboratorio asignado."})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'addsemana':
                try:
                    data['title'] = u'Adicionar Plan de Clase'
                    materia = Materia.objects.get(pk=request.GET['id'])
                    filters = Q(status=True)
                    if prueba_modelo_evaluativo: filters &= Q(programaanaliticoasignatura__procedimientoeva_id=6)
                    else: filters &= Q(programaanaliticoasignatura__activo=True)
                    data['bibliografia'] = BibliografiaProgramaAnaliticoAsignatura.objects.filter(status=True, programaanaliticoasignatura__asignaturamalla=materia.asignaturamalla).filter(filters)
                    data['contenido'] = ContenidoResultadoProgramaAnalitico.objects.filter(status=True, programaanaliticoasignatura__asignaturamalla=materia.asignaturamalla).filter(filters)
                    data['numsemana'] = request.GET['numsemana']
                    data['semana'] = request.GET['semana']
                    data['fini'] = request.GET['fini']
                    data['ffin'] = request.GET['ffin']
                    data['form'] = SilaboForm()
                    data['materia'] = materia
                    return render(request, "pro_planificacion/addsemanasilabo.html", data)
                except Exception as ex:
                    pass

            elif action == 'addsemanasilabotemas':
                try:
                    data['title'] = u'Adicionar Resultado de Aprendizaje'
                    data['silabo'] = silabo = Silabo.objects.get(pk=request.GET['idsilabo'])
                    data['bibliografia'] = BibliografiaProgramaAnaliticoAsignatura.objects.filter(status=True, programaanaliticoasignatura=silabo.programaanaliticoasignatura)
                    data['contenido'] = ContenidoResultadoProgramaAnalitico.objects.filter(status=True, programaanaliticoasignatura=silabo.programaanaliticoasignatura).order_by('orden')
                    data['numsemana'] = request.GET['numsemana']
                    data['semana'] = request.GET['semana']
                    data['fini'] = request.GET['fini']
                    data['ffin'] = request.GET['ffin']
                    return render(request, "pro_planificacion/addsemanasilaboresultado.html", data)
                except Exception as ex:
                    pass

            elif action == 'addbibliografiadocente':
                try:
                    data['title'] = u'Adicionar Bibliografía'
                    data['silabo'] = silabo = SilaboSemanal.objects.get(pk=request.GET['codsilabosemana'])
                    data['bibliografia'] = DetalleSilaboSemanalBibliografiaDocente.objects.filter(status=True, silabosemanal=silabo)
                    return render(request, "pro_planificacion/listadobibliografiadocente.html", data)
                except Exception as ex:
                    pass

            elif action == 'addbibliografiadocenteposgrado':
                try:
                    data['title'] = u'Adicionar Bibliografia'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['idmallavirtual'] = encrypt(request.GET['idmallavirtual'])
                    return render(request, "pro_planificacion/addbibliografiadocenteposgrado.html", data)
                except Exception as ex:
                    pass

            # elif action == 'editsemanasilabo':
            #     try:
            #         data['title'] = u'Editar Semana Silabo'
            #
            #         data['silabo'] = silabo = SilaboSemanal.objects.get(pk=request.GET['codigosilabo'])
            #         data['subtemasilabos'] = DetalleSilaboSemanalSubtema.objects.filter(silabosemanal_id=silabo.id)
            #         data['temasilabos'] = temasilabos = DetalleSilaboSemanalTema.objects.filter(silabosemanal_id=silabo.id)
            #         tem = temasilabos[0]
            #         data['bibliografiasilabos'] = DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal_id=silabo.id)
            #         data['librosilabos'] = BibliografiaProgramaAnaliticoAsignatura.objects.filter(programaanaliticoasignatura_id=tem.temaunidadresultadoprogramaanalitico.unidadresultadoprogramaanalitico.contenidoresultadoprogramaanalitico.programaanaliticoasignatura_id)
            #         data['contenido'] = ContenidoResultadoProgramaAnalitico.objects.filter(programaanaliticoasignatura_id=tem.temaunidadresultadoprogramaanalitico.unidadresultadoprogramaanalitico.contenidoresultadoprogramaanalitico.programaanaliticoasignatura_id)
            #         form = SilaboForm(initial={'objetivoaprendizaje': silabo.objetivoaprendizaje,
            #                                    'enfoque': silabo.enfoque,
            #                                    'recursos': silabo.recursos,
            #                                    'evaluacion': silabo.evaluacion,
            #                                    'horaspresencial': silabo.horaspresencial,
            #                                    'horaautonoma': silabo.horaautonoma})
            #         form.editar()
            #         data['form'] = form
            #         return render(request, "pro_planificacion/editsemanasilabo.html", data)
            #     except Exception as ex:
            #         pass

            # elif action == 'adicionarbibliografia':
            #     try:
            #         data['title'] = u'Adicionar Bibliografía'
            #         data['silabo'] = SilaboSemanal.objects.get(pk=int(request.GET['id']))
            #         form = BibliografiaProgramaAnaliticoAsignaturaForm()
            #         data['form'] = form
            #         return render(request, "pro_planificacion/addbibliografia.html", data)
            #     except Exception as ex:
            #         pass

            elif action == 'editsemanasilabotemas':
                try:
                    data['title'] = u'Editar Resultado de Aprendizaje'
                    data['fini'] = request.GET['fini']
                    data['ffin'] = request.GET['ffin']
                    data['silabo'] = silabo = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['codigosilabo'])), status=True)
                    data['subtemasilabos'] = DetalleSilaboSemanalSubtema.objects.filter(status=True, silabosemanal_id=silabo.id)
                    data['temasilabos'] = temasilabos = DetalleSilaboSemanalTema.objects.filter(status=True, silabosemanal_id=silabo.id)
                    tem = temasilabos[0]
                    data['bibliografiasilabos'] = DetalleSilaboSemanalBibliografia.objects.filter(status=True, silabosemanal_id=silabo.id)
                    data['librosilabos'] = BibliografiaProgramaAnaliticoAsignatura.objects.filter(status=True, programaanaliticoasignatura_id=tem.temaunidadresultadoprogramaanalitico.unidadresultadoprogramaanalitico.contenidoresultadoprogramaanalitico.programaanaliticoasignatura_id)
                    # data['contenido'] = ContenidoResultadoProgramaAnalitico.objects.filter(programaanaliticoasignatura_id=tem.temaunidadresultadoprogramaanalitico.unidadresultadoprogramaanalitico.contenidoresultadoprogramaanalitico.programaanaliticoasignatura_id, status=True).order_by('orden')
                    data['contenido'] = silabo.silabo.programaanaliticoasignatura.contenido_program_analitico()
                    data['permite_modificar'] = False
                    return render(request, "pro_planificacion/editsemanasilabotemas.html", data)
                except Exception as ex:
                    pass

            elif action == 'editsemanasilabotemasvirtual':
                try:
                    data['title'] = u'Editar Resultado de Aprendizaje'
                    data['fini'] = request.GET['fini']
                    data['ffin'] = request.GET['ffin']
                    data['idmallavirtual'] = int(encrypt(request.GET['idmallavirtual']))
                    data['silabovirtual'] = silabovirtual = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['codigosilabo'])), status=True)
                    data['subtemasilabos'] = DetalleSilaboSemanalSubtema.objects.filter(status=True, silabosemanal_id=silabovirtual.id)
                    data['temasilabos'] = temasilabos = DetalleSilaboSemanalTema.objects.filter(status=True, silabosemanal_id=silabovirtual.id)
                    data['contenido'] = silabovirtual.silabo.programaanaliticoasignatura.contenido_program_analitico()
                    data['permite_modificar'] = False
                    return render(request, "pro_planificacion/editsemanasilabotemasvirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'editsemanasilabotemasvirtualposgrado':
                try:
                    data['title'] = u'Editar Resultado de Aprendizaje'
                    data['fini'] = request.GET['fini']
                    data['ffin'] = request.GET['ffin']
                    data['idmallavirtual'] = int(encrypt(request.GET['idmallavirtual']))
                    data['silabovirtual'] = silabovirtual = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['codigosilabo'])), status=True)
                    data['subtemasilabos'] = DetalleSilaboSemanalSubtema.objects.filter(status=True, silabosemanal_id=silabovirtual.id)
                    data['temasilabos'] = temasilabos = DetalleSilaboSemanalTema.objects.filter(status=True, silabosemanal_id=silabovirtual.id)
                    data['contenido'] = silabovirtual.silabo.programaanaliticoasignatura.contenido_program_analitico()
                    data['permite_modificar'] = False
                    return render(request, "pro_planificacion/editsemanasilabotemasvirtualposgrado.html", data)
                except Exception as ex:
                    pass

            elif action == 'editsemanasilabotemasposgrado':
                try:
                    data['title'] = u'Editar Resultado de Aprendizaje'
                    data['fini'] = request.GET['fini']
                    data['ffin'] = request.GET['ffin']
                    data['silabo'] = silabo = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['codigosilabo'])), status=True)
                    data['subtemasilabos'] = DetalleSilaboSemanalSubtema.objects.filter(status=True, silabosemanal_id=silabo.id)
                    data['temasilabos'] = temasilabos = DetalleSilaboSemanalTema.objects.filter(status=True, silabosemanal_id=silabo.id)
                    # tem = temasilabos[0]
                    # data['bibliografiasilabos'] = DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal_id=silabo.id)
                    # data['librosilabos'] = BibliografiaProgramaAnaliticoAsignatura.objects.filter(programaanaliticoasignatura_id=tem.temaunidadresultadoprogramaanalitico.unidadresultadoprogramaanalitico.contenidoresultadoprogramaanalitico.programaanaliticoasignatura_id)
                    # data['contenido'] = ContenidoResultadoProgramaAnalitico.objects.filter(programaanaliticoasignatura_id=tem.temaunidadresultadoprogramaanalitico.unidadresultadoprogramaanalitico.contenidoresultadoprogramaanalitico.programaanaliticoasignatura_id, status=True).order_by('orden')
                    data['contenido'] = silabo.silabo.programaanaliticoasignatura.contenido_program_analitico()
                    data['permite_modificar'] = False
                    return render(request, "pro_planificacion/editsemanasilabotemasposgrado.html", data)
                except Exception as ex:
                    pass

            elif action == 'viewsilabo':
                try:
                    data['title'] = u'Silabos de Materias del Profesor'
                    periodo = request.session['periodo']
                    data['materias'] = Materia.objects.filter(status=True, profesormateria__profesor=profesor, profesormateria__principal=True, nivel__periodo=periodo, profesormateria__status=True, profesormateria__activo=True).distinct().order_by('inicio')
                    return render(request, "pro_planificacion/viewsilabo.html", data)
                except Exception as ex:
                    pass

            if action == 'buscarpersona':
                try:
                    q = request.GET['q'].upper().strip()
                    s = q.split(" ")
                    filtro = Q(usuario__isnull=False, status=True)
                    if len(s) == 1:
                        filtro &= ((Q(nombres__icontains=q) | Q(apellido1__icontains=q) | Q(cedula__icontains=q) | Q(
                            apellido2__icontains=q) | Q(cedula__contains=q)))
                    elif len(s) == 2:
                        filtro &= ((Q(apellido1__contains=s[0]) & Q(apellido2__contains=s[1])) |
                                   (Q(nombres__icontains=s[0]) & Q(nombres__icontains=s[1])) |
                                   (Q(nombres__icontains=s[0]) & Q(apellido1__contains=s[1])))
                    else:
                        filtro &= ((Q(nombres__contains=s[0]) & Q(apellido1__contains=s[1]) & Q(
                            apellido2__contains=s[2])) |
                                   (Q(nombres__contains=s[0]) & Q(nombres__contains=s[1]) & Q(
                                       apellido1__contains=s[2])))
                    per = Persona.objects.filter(filtro).exclude(cedula='').order_by('apellido1', 'apellido2', 'nombres').distinct()[:20]
                    return JsonResponse({"result": "ok", "results": [{"id": x.id, "name": "%s %s" % (
                        f"<img src='{x.get_foto()}' width='25' height='25' style='border-radius: 20%;' alt='...'>",
                        x.nombre_completo_inverso())} for x in per]})
                except Exception as ex:
                    pass
            # editar blibiografia
            elif action == 'editbibliografia':
                try:
                    data['title'] = u'Editar Bibliografia'
                    data['silabo'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    # tem = DetalleSilaboSemanalTema.objects.filter(silabosemanal_id=silabosemana.id)[0]
                    data['bibliografiasilabos'] = DetalleSilaboSemanalBibliografia.objects.values_list("bibliografiaprogramaanaliticoasignatura_id", flat=True).filter(status=True, silabosemanal_id=silabosemana.id)
                    data['librosilabos'] = BibliografiaProgramaAnaliticoAsignatura.objects.filter(status=True, programaanaliticoasignatura_id=silabosemana.silabo.programaanaliticoasignatura.id)
                    data['bibliografiacomplementaria'] = silabosemana.detallesilabosemanalbibliografiadocente_set.filter(status=True)
                    data['librosuteca'] = silabosemana.librosodilosilabosemanal_set.filter(status=True)
                    data['bibliografiaapa'] = silabosemana.bibliograbiaapasilabo_set.filter(status=True)
                    data['listadoarticulos'] = silabosemana.articulosilabosemanal_set.filter(status=True)
                    # form = BibliografiaComplementariaForm()
                    # data['form'] = form
                    data['ODILO_API'] = ODILO_API = variable_valor('ODILO_API')
                    return render(request, "pro_planificacion/editarbibliografia.html", data)
                except Exception as ex:
                    pass

            elif action == 'editbibliografiavirtual':
                try:
                    data['title'] = u'Editar Bibliografia'
                    data['idmallavirtual'] = int(encrypt(request.GET['idmallavirtual']))
                    data['silabosemana'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['bibliografiasilabos'] = DetalleSilaboSemanalBibliografia.objects.filter(status=True, silabosemanal_id=silabosemana.id)
                    data['librosilabos'] = BibliografiaProgramaAnaliticoAsignatura.objects.filter(status=True, programaanaliticoasignatura_id=silabosemana.silabo.programaanaliticoasignatura.id)
                    data['bibliografiacomplementaria'] = silabosemana.detallesilabosemanalbibliografiadocente_set.all()
                    data['bibliografiaapa'] = silabosemana.bibliograbiaapasilabo_set.filter(status=True)
                    form = BibliografiaComplementariaForm()
                    data['form'] = form
                    return render(request, "pro_planificacion/editbibliografiavirtual.html", data)
                except Exception as ex:
                    pass
            # consultar bibliografia complementaria

            elif action == 'editbibliografiavirtualposgrado':
                try:
                    data['title'] = u'Editar Bibliografia'
                    data['idmallavirtual'] = int(encrypt(request.GET['idmallavirtual']))
                    data['silabosemana'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['bibliografiasilabos'] = DetalleSilaboSemanalBibliografia.objects.filter(status=True, silabosemanal_id=silabosemana.id)
                    data['librosilabos'] = BibliografiaProgramaAnaliticoAsignatura.objects.filter(status=True, programaanaliticoasignatura_id=silabosemana.silabo.programaanaliticoasignatura.id)
                    data['bibliografiacomplementaria'] = silabosemana.detallesilabosemanalbibliografiadocente_set.all()
                    data['bibliografiaapa'] = silabosemana.bibliograbiaapasilabo_set.filter(status=True)
                    form = BibliografiaComplementariaForm()
                    data['form'] = form
                    return render(request, "pro_planificacion/editbibliografiavirtualposgrado.html", data)
                except Exception as ex:
                    pass
            # consultar bibliografia complementaria
            elif action == 'consultarbibliografia_complementaria':
                try:
                    if 'id' in request.GET:
                        bibliografia = LibroKohaProgramaAnaliticoAsignatura.objects.get(pk=request.GET['id'])
                        data = {"results": "ok", "bibliografia": str(bibliografia)}
                    else:
                        data = {"results": "bad", "mensaje": u'Error al cargar los datos'}
                    return JsonResponse(data)
                except Exception as ex:
                    pass

            elif action == 'consultararticulo_complementario':
                try:
                    if 'id' in request.GET:
                        bibliografia = ArticuloInvestigacion.objects.get(pk=request.GET['id'])
                        data = {"results": "ok", "bibliografia": str(bibliografia)}
                    else:
                        data = {"results": "bad", "mensaje": u'Error al cargar los datos'}
                    return JsonResponse(data)
                except Exception as ex:
                    pass

            elif action == 'adicionarrecurso':
                try:
                    from api.odilo.odilo_service import OdiloAPI
                    idcodigosemanal = request.GET['idsilasemanal']
                    if int(request.GET['idcategoria']) == 1:
                        if not LibrosOdiloSilaboSemanal.objects.filter(silabosemanal_id=idcodigosemanal, isbm=request.GET['id'], silabosemanal__status=True, status=True).exists():
                            odilo = OdiloAPI()
                            odilo.get_access_token()
                            search_results = odilo.search_catalog(request.GET['id'])
                            libroodil = LibrosOdiloSilaboSemanal(silabosemanal_id=idcodigosemanal,
                                                                 codigo=search_results[0]['id'],
                                                                 titulo=search_results[0]['title'],
                                                                 isbm=search_results[0]['isbn'],
                                                                 fpublicacion=search_results[0]['publicationDate'],
                                                                 small=search_results[0]['coverUrls']['small'],
                                                                 autor=search_results[0]['author'])
                            libroodil.save(request)
                    if int(request.GET['idcategoria']) == 2:
                        if not ArticuloSilaboSemanal.objects.filter(silabosemanal_id=idcodigosemanal, silabosemanal__status=True, status=True, articulo_id=request.GET['id']).exists():
                            addarticulo = ArticuloSilaboSemanal(silabosemanal_id=idcodigosemanal, articulo_id=request.GET['id'])
                            addarticulo.save(request)
                    if int(request.GET['idcategoria']) == 3:
                        if not BibliograbiaAPASilabo.objects.filter(silabosemanal_id=idcodigosemanal, bibliografia=request.GET['textoapa']).exists():
                            addbiblioapa = BibliograbiaAPASilabo(silabosemanal_id=idcodigosemanal, bibliografia=request.GET['textoapa'])
                            addbiblioapa.save(request)
                    if int(request.GET['idcategoria']) == 4:
                        if not DetalleSilaboSemanalBibliografiaDocente.objects.filter(silabosemanal_id=idcodigosemanal, silabosemanal__status=True, status=True, librokohaprogramaanaliticoasignatura_id=request.GET['id']).exists():
                            addbiblio = DetalleSilaboSemanalBibliografiaDocente(silabosemanal_id=idcodigosemanal, librokohaprogramaanaliticoasignatura_id=request.GET['id'])
                            addbiblio.save(request)
                    return JsonResponse({"results": "ok"})
                except Exception as ex:
                    pass

            elif action == 'adicionarrecursobibliobasica':
                try:
                    idcodigosemanal = request.GET['idsilasemanal']
                    codbasica = request.GET['codbasica']
                    tipo = int(request.GET['tipo'])
                    if tipo == 1:
                        detabibasica = DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal_id=idcodigosemanal, bibliografiaprogramaanaliticoasignatura_id=codbasica, silabosemanal__status=True, status=True)
                        for dasica in detabibasica:
                            dasica.delete()
                    if tipo == 2:
                        if not DetalleSilaboSemanalBibliografia.objects.filter(silabosemanal_id=idcodigosemanal, bibliografiaprogramaanaliticoasignatura_id=codbasica, silabosemanal__status=True, status=True).exists():
                            detabibasica = DetalleSilaboSemanalBibliografia(silabosemanal_id=idcodigosemanal, bibliografiaprogramaanaliticoasignatura_id=codbasica)
                            detabibasica.save(request)
                    return JsonResponse({"results": "ok"})
                except Exception as ex:
                    pass

            # listar las bibliografia complenetaria
            elif action == 'bibliografiascomplementarias':
                try:
                    if 'id' in request.GET:
                        listabibliografia = []
                        listaapa = []
                        listalink = []
                        listaarticulos = []
                        silabosemana = SilaboSemanal.objects.get(pk=request.GET['id'])
                        for bli in silabosemana.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                            listabibliografia.append([bli.librokohaprogramaanaliticoasignatura.id, str(bli.librokohaprogramaanaliticoasignatura)])
                        for apa in silabosemana.bibliograbiaapasilabo_set.filter(status=True):
                            listaapa.append([apa.id, apa.bibliografia])
                        for link in silabosemana.recursosdidacticossemanal_set.filter(status=True):
                            listalink.append([link.id, str(link), str(link.link)])
                        for arti in silabosemana.articulosilabosemanal_set.filter(status=True):
                            listaarticulos.append([arti.articulo.id, arti.articulo.nombre.upper()])
                        data = {"results": "ok", 'listabibliografia': listabibliografia, 'listapa': listaapa, 'listalink': listalink, 'listaarticulos': listaarticulos}
                        return JsonResponse(data)
                except Exception as ex:
                    pass

            elif action == 'subtemastemas':
                try:
                    silabosemanal = SilaboSemanal.objects.get(pk=int(request.GET['nsemana']))
                    if 'id' in request.GET:
                        listasubtemas = []
                        # silabosemana = SilaboSemanal.objects.get(pk=request.GET['id'])
                        temaanalitico = TemaUnidadResultadoProgramaAnalitico.objects.get(pk=int(request.GET['id']))

                        for bli in temaanalitico.subtemaunidadresultadoprogramaanaliticoposgrado_set.filter(status=True, detallesilabosemanalsubtemaposgrado__silabosemanal=silabosemanal):
                            listasubtemas.append([bli.id, str(bli.descripcion)])
                        data = {"results": "ok", 'listasubtemas': listasubtemas}
                        return JsonResponse(data)
                except Exception as ex:
                    pass
            # Editar semana de planificación
            elif action == 'addsemanaplanificacion':
                try:
                    planificacionsemana = None
                    data['title'] = u'Adicionar la Semana # ' + str(int(encrypt(request.GET['numsemana']))) + ' Planificación'
                    filters = Q(status=True)
                    if prueba_modelo_evaluativo: filters &= Q(programaanaliticoasignatura__procedimientoeva_id=6)
                    else: filters &= Q(programaanaliticoasignatura__activo=True)
                    data['silabo'] = silabo = Silabo.objects.filter(pk=int(encrypt(request.GET['idsilabo']))).filter(filters)[0]
                    data['contenido'] = silabo.programaanaliticoasignatura.contenido_program_analitico()
                    # data['contenido'] = ContenidoResultadoProgramaAnalitico.objects.filter(programaanaliticoasignatura=silabo.programaanaliticoasignatura, status=True).order_by('orden')
                    data['contenidotemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal_id__in=silabo.silabosemanal_set.values_list('id').filter(status=True), status=True, temaunidadresultadoprogramaanalitico__status=True)
                    data['contenidosubtemas'] = DetalleSilaboSemanalSubtema.objects.filter(silabosemanal_id__in=silabo.silabosemanal_set.values_list('id').filter(status=True), status=True, subtemaunidadresultadoprogramaanalitico__status=True)
                    data['numsemana'] = encrypt(request.GET['numsemana'])
                    data['nsemana'] = int(encrypt(request.GET['numsemana']))
                    data['semana'] = encrypt(request.GET['semana'])
                    data['fini'] = request.GET['fini']
                    data['ffin'] = request.GET['ffin']
                    data['librosilabos'] = silabo.programaanaliticoasignatura.bibliografiaprogramaanaliticoasignatura_set.all()
                    if PlanificacionClaseSilabo_Materia.objects.filter(status=True, materia=silabo.materia, tipoplanificacion__periodo=silabo.materia.nivel.periodo).exists():
                        if PlanificacionClaseSilabo_Materia.objects.values('id').filter(status=True, materia=silabo.materia, tipoplanificacion__periodo=silabo.materia.nivel.periodo).count() > 1:
                            return JsonResponse({"results": "bad", "mensaje": u'Error al cargar los datos'})
                        planificacion = PlanificacionClaseSilabo_Materia.objects.get(status=True, materia=silabo.materia, tipoplanificacion__periodo=silabo.materia.nivel.periodo) if PlanificacionClaseSilabo_Materia.objects.get(status=True, materia=silabo.materia, tipoplanificacion__periodo=silabo.materia.nivel.periodo) else None
                        planificacionsemana = planificacion.tipoplanificacion.planificacionclasesilabo_set.filter(status=True).order_by('semana')
                    data['planificacionsemana'] = planificacionsemana
                    form = SilaboSemanalForm(initial={'horaspresencial': silabo.materia.asignaturamalla.horaspresencialessemanales if silabo.materia.asignaturamalla.horaspresencialessemanales else 0,
                                                      'horaautonoma': silabo.materia.asignaturamalla.horasautonomassemanales if silabo.materia.asignaturamalla.horasautonomassemanales else 0})
                    form.deshabilitar_horas()
                    data['form'] = form
                    data['idcoordinacion'] = silabo.materia.asignaturamalla.malla.carrera.mi_coordinacion2()
                    data['valida_selecion_temas'] = not str(silabo.materia.modeloevaluativo.id) in variable_valor('MODELOS_EVALUATIVOS_EXCLUIR_SELECCION') if silabo.materia.modeloevaluativo and variable_valor('MODELOS_EVALUATIVOS_EXCLUIR_SELECCION') else True
                    return render(request, "pro_planificacion/addsemanaplanificacion.html", data)
                except Exception as ex:
                    pass

            elif action == 'adicionararticulo':
                try:
                    data['title'] = u'Adicionar articulo'
                    data['silabosemanal'] = SilaboSemanal.objects.filter(pk=int(encrypt(request.GET['ids'])), status=True)[0]
                    form = ArticuloSilaboSemanalForm()
                    data['form'] = form
                    return render(request, "pro_planificacion/adicionararticulo.html", data)
                except Exception as ex:
                    pass

            elif action == 'adicionararticulovirtual':
                try:
                    data['title'] = u'Adicionar articulo'
                    data['silabosemanal'] = SilaboSemanal.objects.filter(pk=int(encrypt(request.GET['ids'])), status=True)[0]
                    form = ArticuloSilaboSemanalForm()
                    data['form'] = form
                    return render(request, "pro_planificacion/adicionararticulovirtual.html", data)
                except Exception as ex:
                    pass
            # adicionar semana de planificación
            elif action == 'editsemanaplanificacion':
                try:
                    planificacionsemana = None
                    data['fini'] = request.GET['fini']
                    data['ffin'] = request.GET['ffin']
                    data['silabo'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['ids']))
                    data['title'] = u'Editar la Semana # ' + str(silabosemanal.numsemana) + ' de la Planificación de'
                    data['subtemasilabos'] = DetalleSilaboSemanalSubtema.objects.filter(status=True, silabosemanal_id=silabosemanal.id)
                    data['temasilabos'] = temasilabos = DetalleSilaboSemanalTema.objects.filter(status=True, silabosemanal_id=silabosemanal.id)
                    data['librosilabos'] = silabosemanal.silabo.programaanaliticoasignatura.bibliografiaprogramaanaliticoasignatura_set.all()
                    data['bibliografiasilabos'] = DetalleSilaboSemanalBibliografia.objects.filter(status=True, silabosemanal_id=silabosemanal.id)
                    data['contenido'] = silabosemanal.silabo.programaanaliticoasignatura.contenido_program_analitico()
                    # data['contenido'] = ContenidoResultadoProgramaAnalitico.objects.filter(programaanaliticoasignatura=silabosemanal.silabo.programaanaliticoasignatura, programaanaliticoasignatura__activo=True, status=True).order_by('orden')
                    data['nsemana'] = int(encrypt(request.GET['numsemana']))
                    data['contenidosubtemas'] = silabosemanal.detallesilabosemanalsubtema_set.filter(status=True, subtemaunidadresultadoprogramaanalitico__status=True)
                    data['contenidotemas'] = silabosemanal.detallesilabosemanaltema_set.filter(status=True, temaunidadresultadoprogramaanalitico__status=True)
                    data['contenidotemas_all'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal_id__in=silabosemanal.silabo.silabosemanal_set.values_list('id').filter(status=True), status=True, temaunidadresultadoprogramaanalitico__status=True).exclude(silabosemanal_id=silabosemanal)
                    data['contenidosubtemas_all'] = DetalleSilaboSemanalSubtema.objects.filter(silabosemanal_id__in=silabosemanal.silabo.silabosemanal_set.values_list('id').filter(status=True), status=True, subtemaunidadresultadoprogramaanalitico__status=True).exclude(silabosemanal_id=silabosemanal)
                    data['bibliografiacomplementaria'] = silabosemanal.detallesilabosemanalbibliografiadocente_set.filter(status=True)
                    if PlanificacionClaseSilabo_Materia.objects.filter(status=True, materia=silabosemanal.silabo.materia, tipoplanificacion__periodo=silabosemanal.silabo.materia.nivel.periodo).exists():
                        planificacion = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, tipoplanificacion__periodo=silabosemanal.silabo.materia.nivel.periodo)
                        planificacionsemana = planificacion.tipoplanificacion.planificacionclasesilabo_set.filter(status=True).order_by('semana')
                    data['planificacionsemana'] = planificacionsemana
                    data['cronogramasemana'] = silabosemanal.cronogramasilabo_set.filter(status=True)
                    form = SilaboSemanalForm(initial={'enfoque': silabosemanal.enfoque if silabosemanal.enfoque else None,
                                                      # 'objetivoaprendizaje': silabosemanal.objetivoaprendizaje,
                                                      'enfoquedos': silabosemanal.enfoquedos if silabosemanal.enfoquedos else None,
                                                      'enfoquetres': silabosemanal.enfoquetres if silabosemanal.enfoquetres else None,
                                                      'recursos': silabosemanal.recursos if silabosemanal.recursos else None,
                                                      # 'evaluacion': silabosemanal.evaluacion if silabosemanal.evaluacion else None,
                                                      'horaspresencial': silabosemanal.silabo.materia.asignaturamalla.horaspresencialessemanales if silabosemanal.silabo.materia.asignaturamalla.horaspresencialessemanales else 0,
                                                      'horaautonoma': silabosemanal.silabo.materia.asignaturamalla.horasautonomassemanales if silabosemanal.silabo.materia.asignaturamalla.horasautonomassemanales else 0})
                    form.deshabilitar_horas()
                    data['form'] = form
                    data['puede_editar'] = silabosemanal.puede_eliminar()
                    data['idcoordinacion'] = silabosemanal.silabo.materia.asignaturamalla.malla.carrera.mi_coordinacion2()
                    data['valida_selecion_temas'] = not str(silabosemanal.silabo.materia.modeloevaluativo.id) in variable_valor('MODELOS_EVALUATIVOS_EXCLUIR_SELECCION') if silabosemanal.silabo.materia.modeloevaluativo and variable_valor('MODELOS_EVALUATIVOS_EXCLUIR_SELECCION') else True
                    return render(request, "pro_planificacion/editsemanaplanificacion.html", data)
                except Exception as ex:
                    pass
            # eliminar semana de planificación
            elif action == 'delsemanasilabo':
                try:
                    data['title'] = u'Eliminar Planificacion de la semana '
                    data['silabosemanal'] = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    return render(request, "pro_planificacion/delsemanasilabo.html", data)
                except Exception as ex:
                    pass
            # Editar objetivo apendizaje
            elif action == 'editarobjetivoaprendizaje':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    return JsonResponse({"result": "ok", 'objetivo': silabosemana.objetivoaprendizaje, "ids": encrypt(silabosemana.id)})
                except Exception as ex:
                    pass
            # Editar enfoque metodologico semana silabo
            elif action == 'editenfoquemetodologico':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    return JsonResponse({"result": "ok", 'enfoque': silabosemana.enfoque, 'enfoquedos': silabosemana.enfoquedos, 'enfoquetres': silabosemana.enfoquetres, "ids": encrypt(silabosemana.id)})
                except Exception as ex:
                    pass

            elif action == 'editenfoquemetodologicoposgrado':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    return JsonResponse({"result": "ok", 'enfoque': silabosemana.enfoque, "ids": encrypt(silabosemana.id)})
                except Exception as ex:
                    pass
            # Editar Recursos didactico semana silabo
            elif action == 'editrecursodidactico':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    return JsonResponse({"result": "ok", 'recurso': silabosemana.recursos, "ids": encrypt(silabosemana.id)})
                except Exception as ex:
                    pass
            # Editar Evaluacion semana silabo
            # Editar Actividades semana silabo
            elif action == 'editactividades':
                try:
                    data['title'] = u'Editar Actividades'
                    data['idmallavirtual'] = int(encrypt(request.GET['idmallavirtual']))
                    data['silabosemana'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['actividadessilabos'] = DetalleSilaboSemanalActividadesMoodle.objects.filter(status=True, silabosemanal_id=silabosemana.id)
                    data['actividadesmoodle'] = ActividadesMoodle.objects.filter(status=True)
                    # form = BibliografiaComplementariaForm()
                    # data['form'] = form
                    return render(request, "pro_planificacion/editactividades.html", data)
                except Exception as ex:
                    pass
            # Editar Evaluacion semana silabo
            elif action == 'editevaluacion':
                try:
                    silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    return JsonResponse({"result": "ok", 'evaluacion': silabosemana.evaluacion, "ids": encrypt(silabosemana.id)})
                except Exception as ex:
                    pass
            # Eliminar bibliografia complementaria semana silabo
            elif action == 'delbibliografiacomplementaria':
                try:
                    data['title'] = u'Eliminar Bibliografía Complementaria '
                    data['silabosemanal'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['bibliografiaconpl'] = silabosemana.detallesilabosemanalbibliografiadocente_set.get(pk=int(encrypt(request.GET['idc'])))
                    return render(request, "pro_planificacion/delbibliografiacomplementaria.html", data)
                except Exception as ex:
                    pass

            elif action == 'dellibrosodilo':
                try:
                    data['title'] = u'Eliminar Libro Uteca'
                    data['silabosemanal'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['libroodilo'] = silabosemana.librosodilosilabosemanal_set.get(pk=int(encrypt(request.GET['idc'])))
                    return render(request, "pro_planificacion/dellibrosodilo.html", data)
                except Exception as ex:
                    pass

            elif action == 'delbibliografiacomplementariaposgrado':
                try:
                    data['title'] = u'Eliminar Bibliografía Complementaria '
                    data['silabosemanal'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['bibliografiaconpl'] = silabosemana.detallesilabosemanalbibliografiadocente_set.get(pk=int(encrypt(request.GET['idc'])))
                    return render(request, "pro_planificacion/delbibliografiacomplementariaposgrado.html", data)
                except Exception as ex:
                    pass
            # Eliminar bliografia basica semana silabo
            elif action == 'delbibliografiabasica':
                try:
                    data['title'] = u'Eliminar Bibliografía Básica '
                    data['silabosemanal'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['bibliografiabasica'] = silabosemana.detallesilabosemanalbibliografia_set.get(pk=int(encrypt(request.GET['idb'])))
                    return render(request, "pro_planificacion/delbibliografiabasica.html", data)
                except Exception as ex:
                    pass
            # Duplicar Silabo para el mismo profesor y la misma carrera
            elif action == 'delbibliografiabasicaposgrado':
                try:
                    data['title'] = u'Eliminar Bibliografía Básica '
                    data['silabosemanal'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['bibliografiabasica'] = silabosemana.detallesilabosemanalbibliografia_set.get(pk=int(encrypt(request.GET['idb'])))
                    return render(request, "pro_planificacion/delbibliografiabasicaposgrado.html", data)
                except Exception as ex:
                    pass
            elif action == 'delactividadposgrado':
                try:
                    data['title'] = u'Eliminar Bibliografía Básica '
                    data['silabosemanal'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['actividad'] = silabosemana.detallesilabosemanalactividadesmoodle_set.get(pk=int(encrypt(request.GET['idb'])))
                    return render(request, "pro_planificacion/delactividadposgrado.html", data)
                except Exception as ex:
                    pass
            # Duplicar Silabo para el mismo profesor y la misma carrera
            elif action == 'duplicar_silabo':
                try:
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.GET['ids'])))
                    lista = []
                    if silabo.tiene_materia_duplicadas() and silabo.tiene_materia_fecha_igual():

                        # xm = silabo.materia_duplicadar().distinct()
                        # for w in xm:
                        #     ax = w.id
                        #     bx = w.asignatura
                        #     cx = w.paralelo

                        for materia in silabo.materia_duplicadar():
                            if materia.silabo_set.all().exists():
                                filters = Q(status=True)
                                if prueba_modelo_evaluativo: filters &= Q(programaanaliticoasignatura__procedimientoeva_id=6)
                                else: filters &= Q(programaanaliticoasignatura__activo=True)
                                for sil in materia.silabo_set.filter(filters):
                                    if sil.silabo_lledo():
                                        lista.append([sil.id, sil.materia.id, sil.materia.nombre_completo(), 'V. del P.A ' + str(sil.programaanaliticoasignatura.fecha_creacion.strftime("%d/%m/%Y")), 'V. del sílabo ' + str(sil.fecha_creacion.strftime("%d/%m/%Y"))])
                    data['lista_silabos'] = lista
                    data['modalidadcarrera'] = silabo.materia.asignaturamalla.malla.carrera.modalidad
                    template = get_template("pro_planificacion/duplicarsilabo.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'duplicar_silabovdos':
                try:
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.GET['ids'])))
                    lista = []
                    if silabo.tiene_materia_duplicadas() and silabo.tiene_materia_fecha_igual():

                        # xm = silabo.materia_duplicadar().distinct()
                        # for w in xm:
                        #     ax = w.id
                        #     bx = w.asignatura
                        #     cx = w.paralelo

                        for materia in silabo.materia_duplicadar():
                            if materia.silabo_set.all().exists():
                                filters = Q(status=True)
                                if prueba_modelo_evaluativo: filters &= Q(programaanaliticoasignatura__procedimientoeva_id=6)
                                else: filters &= Q(programaanaliticoasignatura__activo=True)
                                for sil in materia.silabo_set.filter(filters):
                                    if sil.silabo_lledo():
                                        lista.append([sil.id, sil.materia.id, sil.materia.nombre_completo(), 'V. del P.A ' + str(sil.programaanaliticoasignatura.fecha_creacion.strftime("%d/%m/%Y")), 'V. del sílabo ' + str(sil.fecha_creacion.strftime("%d/%m/%Y")), sil.versionsilabo])
                    data['lista_silabos'] = lista
                    data['modalidadcarrera'] = silabo.materia.asignaturamalla.malla.carrera.modalidad
                    template = get_template("pro_planificacion/duplicarsilabovdos.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'duplicar_silabo_carrera':
                try:
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.GET['ids'])))
                    lista = []

                    if silabo.tiene_silabo_otra_carrera:
                        xm = silabo.materia_duplicada_otracarrera().distinct()
                        for w in xm:
                            ax = w.id
                            bx = w.asignatura
                            cx = w.paralelo
                            dx = w.asignaturamalla.malla.carrera
                            ex = w.nombre_completo()

                        me = silabo.programaanaliticoasignatura.procedimientoeva
                        for materia in silabo.materia_duplicada_otracarrera().distinct():
                            if materia.silabo_set.all().exists():
                                filters = Q(status=True)
                                if prueba_modelo_evaluativo: filters &= Q(programaanaliticoasignatura__procedimientoeva_id=6)
                                else: filters &= Q(programaanaliticoasignatura__activo=True, programaanaliticoasignatura__procedimientoeva=me)
                                for sil in materia.silabo_set.filter(filters):
                                    if sil.silabo_lledo():
                                        lista.append([sil.id, sil.materia.id, sil.materia.nombre_completo(), 'V. del P.A ' + str(sil.programaanaliticoasignatura.fecha_creacion.strftime("%d/%m/%Y")), 'V. del sílabo ' + str(sil.fecha_creacion.strftime("%d/%m/%Y")), str(sil.profesor.persona.nombre_completo_inverso())])

                    data['lista_silabos'] = lista
                    data['modalidadcarrera'] = silabo.materia.asignaturamalla.malla.carrera.modalidad
                    template = get_template("pro_planificacion/duplicarsilabocarrera.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                pass

            elif action == 'duplicar_silabo_carreravdos':
                try:
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.GET['ids'])))
                    lista = []

                    if silabo.tiene_silabo_otra_carrera:
                        xm = silabo.materia_duplicada_otracarrera().distinct()
                        for w in xm:
                            ax = w.id
                            bx = w.asignatura
                            cx = w.paralelo
                            dx = w.asignaturamalla.malla.carrera
                            ex = w.nombre_completo()

                        for materia in silabo.materia_duplicada_otracarrera().distinct():
                            if materia.silabo_set.all().exists():
                                filters = Q(status=True)
                                if prueba_modelo_evaluativo: filters &= Q(programaanaliticoasignatura__procedimientoeva_id=6)
                                else: filters &= Q(programaanaliticoasignatura__activo=True)
                                for sil in materia.silabo_set.filter(filters):
                                    if sil.silabo_lledo():
                                        lista.append([sil.id, sil.materia.id, sil.materia.nombre_completo(), 'V. del P.A ' + str(sil.programaanaliticoasignatura.fecha_creacion.strftime("%d/%m/%Y")), 'V. del sílabo ' + str(sil.fecha_creacion.strftime("%d/%m/%Y"))])

                    data['lista_silabos'] = lista
                    data['modalidadcarrera'] = silabo.materia.asignaturamalla.malla.carrera.modalidad
                    template = get_template("pro_planificacion/duplicarsilabocarreravdos.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                pass

            # adicionar Silabo
            elif action == 'adicionar_silabo':
                try:
                    data['materia'] = materia = Materia.objects.get(pk=request.GET['id'])  # int(encrypt(request.GET['id'])))
                    lista = []
                    filters = Q(status=True)
                    if prueba_modelo_evaluativo: filters &= Q(procedimientoeva_id=6)
                    else: filters &= Q(activo=True)
                    if materia.asignaturamalla.programaanaliticoasignatura_set.filter(filters).exists():
                        for prog in materia.asignaturamalla.programaanaliticoasignatura_set.filter(filters):
                            lista.append([prog.id, prog])
                        data['lista_programaanalitico'] = lista
                        template = get_template("pro_planificacion/adicionarsilabo.html")
                        json_content = template.render(data)
                        return JsonResponse({"result": "ok", 'data': json_content})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"No Tiene Programa Analítico activo."})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass
            elif action == 'adicionar_silabo_posgrado':
                try:
                    data['materia'] = materia = Materia.objects.get(pk=request.GET['id'])  # int(encrypt(request.GET['id'])))
                    lista = []
                    if materia.asignaturamalla.programaanaliticoasignatura_set.filter(activo=True, status=True).exists():
                        for prog in materia.asignaturamalla.programaanaliticoasignatura_set.filter(activo=True, status=True):
                            lista.append([prog.id, prog])
                        data['lista_programaanalitico'] = lista
                        template = get_template("pro_planificacion/adicionarsilaboposgrado.html")
                        json_content = template.render(data)
                        return JsonResponse({"result": "ok", 'data': json_content})
                    else:
                        return JsonResponse({"result": "bad", "mensaje": u"No Tiene Programa Analítico activo."})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass
            # eliminar Silabo cabecera si que no cuenta con planificacion
            elif action == 'delsilabo':
                try:
                    data['title'] = u'Eliminar Cabecera de Silabo'
                    data['silabo'] = silabo = Silabo.objects.get(pk=int(encrypt(request.GET['ids'])))
                    return render(request, "pro_planificacion/delsilabo.html", data)
                except Exception as ex:
                    pass
            # detalle de temas por planificar
            elif action == 'delsilaboposgrado':
                try:
                    data['title'] = u'Eliminar Cabecera de Silabo'
                    data['silabo'] = silabo = Silabo.objects.get(pk=int(encrypt(request.GET['ids'])))
                    return render(request, "pro_planificacion/delsilaboposgrado.html", data)
                except Exception as ex:
                    pass
            # detalle de temas por planificar
            elif action == 'detalle_temasxplanificar':
                try:
                    silabo = Silabo.objects.get(pk=int(encrypt(request.GET['ids'])))
                    stemas = DetalleSilaboSemanalTema.objects.values("temaunidadresultadoprogramaanalitico_id").filter(silabosemanal__silabo=silabo, status=True)
                    ssubtemas = DetalleSilaboSemanalSubtema.objects.values("subtemaunidadresultadoprogramaanalitico_id").filter(silabosemanal__silabo=silabo, status=True)
                    tem = TemaUnidadResultadoProgramaAnalitico.objects.values_list("id", flat=True).filter(status=True, unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura_id=silabo.programaanaliticoasignatura.id).exclude(pk__in=stemas)
                    data['subtemas'] = subtemas = SubtemaUnidadResultadoProgramaAnalitico.objects.filter(status=True, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__contenidoresultadoprogramaanalitico__programaanaliticoasignatura_id=silabo.programaanaliticoasignatura.id).exclude(pk__in=ssubtemas)
                    st = subtemas.values_list("temaunidadresultadoprogramaanalitico_id", flat=True).all().distinct('temaunidadresultadoprogramaanalitico_id')
                    data['temas'] = TemaUnidadResultadoProgramaAnalitico.objects.filter(Q(pk__in=st) | Q(pk__in=tem), status=True).order_by("unidadresultadoprogramaanalitico__orden")
                    template = get_template("pro_planificacion/detalle_temasxplanificar.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass
            # eliminar detalle de laboratorio
            elif action == 'deldetallelaboratorio':
                try:
                    data['title'] = u'Eliminar la Equipo'
                    data['practica'] = practica = GPGuiaPracticaSemanal.objects.get(pk=int(request.GET['id']))
                    data['detalle'] = GPLugarPracticaDetalle.objects.get(id=int(request.GET['idd']), guiapractica_id=int(request.GET['id']))
                    data['silabo'] = practica.silabosemanal
                    return render(request, "pro_planificacion/deldetallelaboratorio.html", data)
                except Exception as ex:
                    pass
            # esditar salida de clase
            elif action == 'editplanificacion_salida':
                try:
                    salida = PlanificacionSemanalSalida.objects.get(pk=int(encrypt(request.GET['ids'])))
                    return JsonResponse({"result": "ok", 'descripcion': salida.descripcion})
                except Exception as ex:
                    pass
            # eliminar salida de clase
            elif action == 'delplanificacion_salida':
                try:
                    data['title'] = u'Eliminar salida de clase'
                    data['salida'] = PlanificacionSemanalSalida.objects.get(pk=int(encrypt(request.GET['ids'])))
                    return render(request, "pro_planificacion/delplanificacion_salida.html", data)
                except Exception as ex:
                    pass
            # eliminar bibliografia virtual
            elif action == 'delbibliografiavirtual':
                try:
                    data['title'] = u'Eliminar Bibliografía Virtual'
                    data['silabosemanal'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['bibliografiavirtual'] = silabosemana.bibliograbiaapasilabo_set.get(pk=int(encrypt(request.GET['idv'])))
                    return render(request, "pro_planificacion/delbibliografiavirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'delarticulosilabo':
                try:
                    data['title'] = u'Eliminar Articulo'
                    data['silabosemanal'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['articulos'] = silabosemana.articulosilabosemanal_set.get(pk=int(encrypt(request.GET['idart'])))
                    return render(request, "pro_planificacion/delarticulosilabo.html", data)
                except Exception as ex:
                    pass

            elif action == 'delarticulosilabovirtual':
                try:
                    data['title'] = u'Eliminar Articulo'
                    data['silabosemanal'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['articulos'] = silabosemana.articulosilabosemanal_set.get(pk=int(encrypt(request.GET['idart'])))
                    return render(request, "pro_planificacion/delarticulosilabovirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'delbibliografiavirtualposgrado':
                try:
                    data['title'] = u'Eliminar Bibliografía Virtual'
                    data['silabosemanal'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                    data['bibliografiavirtual'] = silabosemana.bibliograbiaapasilabo_set.get(pk=int(encrypt(request.GET['idv'])))
                    return render(request, "pro_planificacion/delbibliografiavirtualposgrado.html", data)
                except Exception as ex:
                    pass
            # Adionar suttemas por semanas
            elif action == 'adicionar_subtemas':
                try:
                    if 'ids' in request.GET:
                        listatema = []
                        lista = []
                        silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['ids'])))
                        for tema in silabosemanal.detallesilabosemanaltema_set.filter(status=True):
                            listatema.append([tema.id, str(tema)])
                        for subtema in silabosemanal.subtemaadicionalessilabo_set.filter(status=True):
                            lista.append([subtema.tema.id, str(subtema.tema), subtema.subtema])
                        data = {"results": "ok", 'listatema': listatema, 'lista': lista}
                        return JsonResponse(data)
                except Exception as ex:
                    pass
            # importar silabos de otros docentes que tengan la misma asignatura en el mismo periodo
            elif action == 'duplicar_silabo_otro_docente':
                try:
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.GET['ids'])))
                    lista = []
                    silabos = Silabo.objects.filter(status=True, materia__asignaturamalla=silabo.materia.asignaturamalla, materia__nivel__periodo=periodo, silabosemanal__isnull=False, materia__asignaturamalla__malla__carrera=silabo.materia.asignaturamalla.malla.carrera).exclude(profesor=silabo.profesor).distinct()
                    data['silabos'] = silabo.silabos_para_duplicar()
                    template = get_template("pro_planificacion/duplicarsilabootrodocente.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'duplicar_silabo_otro_docentevdos':
                try:
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.GET['ids'])))
                    lista = []
                    silabos = Silabo.objects.filter(status=True, materia__asignaturamalla=silabo.materia.asignaturamalla, materia__nivel__periodo=periodo, silabosemanal__isnull=False, materia__asignaturamalla__malla__carrera=silabo.materia.asignaturamalla.malla.carrera).exclude(profesor=silabo.profesor).distinct()
                    me = silabo.programaanaliticoasignatura.procedimientoeva
                    listado_s = silabo.silabos_para_duplicar()
                    data['silabos'] = listado_s.filter(programaanaliticoasignatura__procedimientoeva=me)
                    template = get_template("pro_planificacion/duplicarsilabootrodocentevdos.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'delrecursolink':
                try:
                    data['title'] = u'Eliminar el enlace'
                    data['link'] = RecursosDidacticosSemanal.objects.get(status=True, silabosemanal_id=int(encrypt(request.GET['ids'])), pk=int(encrypt(request.GET['id'])))
                    return render(request, "pro_planificacion/delrecursolink.html", data)
                except Exception as ex:
                    pass

            elif action == 'delrecursolinkposgrado':
                try:
                    data['title'] = u'Eliminar el enlace'
                    data['link'] = RecursosDidacticosSemanal.objects.get(status=True, silabosemanal_id=int(encrypt(request.GET['ids'])), pk=int(encrypt(request.GET['id'])))
                    return render(request, "pro_planificacion/delrecursolinkposgrado.html", data)
                except Exception as ex:
                    pass

            elif action == 'tomandom':
                try:
                    data['title'] = u'Matriculados en la asignatura'
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['materia'])))
                    # data['materiasasignadas'] = materia.asignados_a_esta_materia_moodle().filter(retiramateria=False)
                    data['materiasasignadas'] = materia.materiaasignada_set.filter(matricula__status=True,status=True).order_by('matricula__inscripcion__persona')

                    return render(request, "pro_planificacion/tomandom.html", data)
                except Exception as ex:
                    pass

            elif action == 'notasmoodle':
                try:
                    data['title'] = u'Notas de moodle'
                    lista = []
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['inscritos'] = inscritos = materia.asignados_a_esta_materia_moodle()
                    eCoordinacion = materia.coordinacion()
                    puede_importar_notas_moodle = False
                    puede_importar_notas_moodle = []
                    mostrar_boton_importar_notas = False
                    if eCoordinacion:
                        if eCoordinacion.id == 9:
                            try:
                                puede_importar_notas_moodle = variable_valor('PUEDE_IMPORTAR_NOTAS_MOODLE_ADMISION')
                                mostrar_boton_importar_notas = variable_valor('MOSTRAR_BOTON_IMPORTAR_NOTAS_ADMISION')
                            except:
                                pass
                        elif eCoordinacion.id in [1,2,3,4,5,12,8]:
                            try:
                                puede_importar_notas_moodle = variable_valor('PUEDE_IMPORTAR_NOTAS_MOODLE_GRADO')
                                mostrar_boton_importar_notas = variable_valor('MOSTRAR_BOTON_IMPORTAR_NOTAS_GRADO')
                            except:
                                pass
                        elif eCoordinacion.id in [7,13]:
                            try:
                                puede_importar_notas_moodle = variable_valor('PUEDE_IMPORTAR_NOTAS_MOODLE_POS')
                                mostrar_boton_importar_notas = variable_valor('MOSTRAR_BOTON_IMPORTAR_NOTAS_POSGRADO')
                            except:
                                pass
                    data['utiliza_validacion_calificaciones'] = variable_valor('UTILIZA_VALIDACION_CALIFICACIONES')
                    data['habilitado_ingreso_calificaciones'] = profesor.habilitado_ingreso_calificaciones()
                    data['puede_importar_notas_moodle'] = puede_importar_notas_moodle
                    data['mostrar_boton_importar_notas'] = mostrar_boton_importar_notas
                    data['idprofesor'] = profesor.id.__str__()

                    return render(request, "pro_planificacion/notasmoodle.html", data)
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'extraernotasmoodle':
                try:
                    data['title'] = u'Importar calificaciones de moodle'
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    return render(request, "pro_planificacion/extraernotasmoodle.html", data)
                except Exception as ex:
                    pass

            elif action == 'confirmar_actualizacion_estudiantes':
                try:
                    data['title'] = u'Confirmar acualización de estudiantes'
                    data['materia'] = Materia.objects.get(pk=request.GET['id'])
                    return render(request, "pro_planificacion/confirmar_actualizacion_estudiantes.html", data)
                except Exception as ex:
                    pass

            elif action == 'confirmar_actualizacion_silabos':
                try:
                    data['title'] = u'Confirmar acualización de sílabo'
                    data['materia'] = Materia.objects.get(pk=request.GET['id'])
                    return render(request, "pro_planificacion/confirmar_actualizacion_silabo.html", data)
                except Exception as ex:
                    pass

            elif action == 'bibliografia':
                data['title'] = u'Bibliografía básica y complementaria'
                data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                silabo = []
                bibliografiabasicas = []
                complementarias = []
                if materia.silabo_actual():
                    silabo = materia.silabo_actual()
                    bibliografiabasicas = materia.silabo_actual().programaanaliticoasignatura.bibliografiaprogramaanaliticoasignatura_set.values_list('librokohaprogramaanaliticoasignatura_id', flat=False).filter(status=True).distinct()
                    complementarias = DetalleSilaboSemanalBibliografiaDocente.objects.values_list('librokohaprogramaanaliticoasignatura_id', flat=False).filter(status=True, silabosemanal__silabo=materia.silabo_actual()).distinct()
                librosinvestigacion = LibroKohaProgramaAnaliticoAsignatura.objects.filter(Q(status=True), (Q(pk__in=complementarias) | Q(pk__in=bibliografiabasicas))).distinct().order_by('nombre')
                search = None
                ids = None
                if 's' in request.GET:
                    search = request.GET['s']
                    ss = search.split(' ')
                    if len(ss) == 1:
                        librosinvestigacion = librosinvestigacion.filter(Q(nombre__icontains=search) | Q(autor__icontains=search) | Q(editorial__icontains=search), status=True)
                    else:
                        librosinvestigacion = librosinvestigacion.filter((Q(nombre__icontains=ss[0]) & Q(nombre__icontains=ss[1])) | (Q(autor__icontains=ss[0]) & Q(autor__icontains=ss[1])) | (Q(editorial__icontains=ss[0]) & Q(editorial__icontains=ss[0])), Q(status=True))
                paging = MiPaginador(librosinvestigacion, 20)
                p = 1
                try:
                    paginasesion = 1
                    if 'paginador' in request.session:
                        paginasesion = int(request.session['paginador'])
                    if 'page' in request.GET:
                        p = int(request.GET['page'])
                    else:
                        p = paginasesion
                    try:
                        page = paging.page(p)
                    except:
                        p = 1
                    page = paging.page(p)
                except:
                    page = paging.page(p)
                request.session['paginador'] = p
                data['paging'] = paging
                data['page'] = page
                data['rangospaging'] = paging.rangos_paginado(p)
                data['librosbiblioteca'] = page.object_list
                data['search'] = search if search else ""
                data['ids'] = ids if ids else ""
                return render(request, "pro_planificacion/bibliografia.html", data)

            elif action == 'planclasevirtual':
                try:
                    data['title'] = u'PLANIFICACIÓN SEMANAL DE SÍLABO'
                    lista_nueva = []
                    lista_semanas = []
                    panalitico = 0
                    data['silabocab'] = silabocab = Silabo.objects.get(pk=int(encrypt(request.GET['silaboid'])), status=True)
                    data['tiporecurso'] = TIPO_RECURSOS
                    data['tipolink'] = TIPO_LINK
                    data['tipoactividad'] = TIPO_ACTIVIDAD
                    if not PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, status=True).exists():
                        return JsonResponse({"result": "bad", "mensaje": u"Noo tiene cronograma académico."})
                    # data['planificacion'] = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, status=True).exclude(semana=0).order_by('orden')
                    data['planificacion'] = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, status=True).exclude(semana=0).order_by('fechainicio')
                    lista = []
                    # for p in PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, status=True).exclude(semana=0).order_by('orden'):
                    for p in PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, status=True).exclude(semana=0).order_by('fechainicio'):
                        semana = None
                        idcodigo = 0
                        rec = ''
                        eva = ''

                        horav = silabocab.materia.asignaturamalla.horasvirtualsemanal
                        horaa = silabocab.materia.asignaturamalla.horasautonomassemanales

                        if silabocab.silabosemanal_set.filter(fechainiciosemana__gte=p.fechainicio, fechafinciosemana__lte=p.fechafin, status=True).exists():
                            lissemana = silabocab.silabosemanal_set.filter(fechainiciosemana__gte=p.fechainicio, fechafinciosemana__lte=p.fechafin, status=True)[0]
                            idcodigo = lissemana.id
                            semana = lissemana
                            eva = lissemana.evaluacion
                            rec = lissemana.recursos

                        idcodigo = idcodigo
                        modelosilabo = semana
                        lista.append([p.fechainicio.isocalendar()[1], p.fechainicio, p.fechafin, idcodigo, modelosilabo, rec, eva, horav, horaa])
                    if silabocab.silabosemanal_set.filter(status=True).exists():
                        panalitico = 1
                    aux = 0
                    data['panalitico'] = panalitico
                    data['fechas'] = lista
                    data['porcentaje_semanas_registradas'] = silabocab.estado_semanas_llenas(lista.__len__())
                    data['tiene_practica'] = silabocab.materia.asignaturamalla.practicas
                    data['aprobar'] = variable_valor('APROBAR_SILABO')
                    data['rechazar'] = variable_valor('RECHAZAR_SILABO')
                    data['pendiente'] = variable_valor('PENDIENTE_SILABO')
                    pruede_modificar = False
                    hora_principal_0 = False
                    ban = 0

                    # if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA)|Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA)| Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)), profesor=silabocab.profesor).exists():
                    #     pruede_modificar = True
                    # else:
                    #     if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA)| Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA))).exists():
                    #         if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA)| Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))[0].hora == 0:
                    #             hora_principal_0 = True
                    #         for pro in silabocab.materia.profesormateria_set.filter(status=True, profesor=silabocab.profesor, activo=True).exclude(tipoprofesor_id=4).exclude(pk__in=silabocab.materia.profesormateria_set.values_list('id', flat=False).filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA)| Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))):
                    #             if pro.hora >0:
                    #                 ban = 1
                    #                 pruede_modificar = True
                    #                 break

                    if silabocab.materia.profesormateria_set.filter(status=True, activo=True, tipoprofesor_id__in=[1, 11, 12, 10, 7, 14], profesor=silabocab.profesor).exists():
                        pruede_modificar = True
                    else:
                        if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA))).exists():
                            if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))[0].hora == 0:
                                hora_principal_0 = True
                            for pro in silabocab.materia.profesormateria_set.filter(status=True, profesor=silabocab.profesor, activo=True).exclude(tipoprofesor_id=4).exclude(pk__in=silabocab.materia.profesormateria_set.values_list('id', flat=False).filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))):
                                if pro.hora > 0:
                                    ban = 1
                                    pruede_modificar = True
                                    break

                    if ban == 1:
                        if hora_principal_0 and pruede_modificar:
                            pruede_modificar = True
                        else:
                            pruede_modificar = False
                    data['pruede_modificar'] = pruede_modificar
                    return render(request, "pro_planificacion/listado_plancasevirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'changebannermateria':
                try:
                    data['id'] = id = request.GET['id']
                    filtro = Materia.objects.get(pk=id)
                    form = BannerMateriaForm(initial=model_to_dict(filtro))
                    data['form'] = form
                    template = get_template("pro_planificacion/modal/changebannermateria.html")
                    return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'planrecursoclasevirtual':
                try:
                    data['examenfinal'] = None
                    data['title'] = u'Planificación recursos de sílabo'
                    data['fechahoy'] = datetime.now().date()
                    materiacerrada = False
                    titulacion = False
                    data['periodoseleccionado'] = periodo
                    data['silabocab'] = silabocab = Silabo.objects.select_related('materia').get(pk=int(encrypt(request.GET['silaboid'])), status=True)
                    PUEDE_CREAR_EXAMEN = variable_valor('PUEDE_CREAR_EXAMEN')
                    PUEDE_EDITAR_EXAMEN = variable_valor('PUEDE_EDITAR_EXAMEN')
                    PUEDE_ELIMINAR_EXAMEN = variable_valor('PUEDE_ELIMINAR_EXAMEN')

                    data['no_permite_duplicar'] = silabocab.materia.modeloevaluativo_id == variable_valor('NO_PERMITE_DUPLICAR_MODELO_EVALUATIVO')
                    if silabocab.materia.asignaturamalla.malla.modalidad_id == 3 and not PUEDE_CREAR_EXAMEN:
                        PUEDE_CREAR_EXAMEN = False
                    else:
                        if silabocab.materia.asignaturamalla.transversal == True:
                            PUEDE_CREAR_EXAMEN = False
                        else:
                            PUEDE_CREAR_EXAMEN = True

                    if silabocab.materia.asignaturamalla.malla.carrera_id == 223 :
                        PUEDE_EDITAR_EXAMEN = True
                        PUEDE_ELIMINAR_EXAMEN = True

                    data['PUEDE_CREAR_EXAMEN'] = PUEDE_CREAR_EXAMEN
                    data['PUEDE_EDITAR_EXAMEN'] = PUEDE_EDITAR_EXAMEN
                    data['PUEDE_ELIMINAR_EXAMEN'] = PUEDE_ELIMINAR_EXAMEN

                    if silabocab.materia.cerrado:
                        materiacerrada = True
                    data['materiacerrada'] = materiacerrada
                    if silabocab.materia.modeloevaluativo_id == 25:
                        titulacion = True
                    data['titulacion'] = titulacion
                    data['idcoordinacion'] = silabocab.materia.asignaturamalla.malla.carrera.mi_coordinacion2()
                    data['silabosemanal'] = silabosemanal = silabocab.silabosemanal_set.filter(status=True).\
                        annotate(tieneactividadplanificada=Exists(EvaluacionAprendizajeSilaboSemanal.objects.filter(silabosemanal__silabo_id=silabocab.id, tipoactividadsemanal=1, silabosemanal_id=OuterRef('id'), status=True,silabosemanal__status=True)))
                    data['listadounidades'] = DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico_id').filter(silabosemanal_id__in=silabosemanal.values_list('id'), temaunidadresultadoprogramaanalitico__status=True).distinct()
                    # data['puede_videomagistral'] = silabocab.puede_videomagistral()
                    data['puede_videomagistral'] = silabocab.videomagistral
                    data['idcoordinacion'] = idcoordinacion = silabocab.materia.asignaturamalla.malla.carrera.mi_coordinacion2()

                    # SELECCION EN MENU
                    request.session['fecha_sel'] = numsemana = int(request.GET['numsemana']) if 'numsemana' in request.GET else int(request.session['fecha_sel']) if 'fecha_sel' in request.session else 1
                    request.session['fecha_sel'] = numsemana = numsemana if len(silabosemanal) >= numsemana else 1
                    try:
                        data['semana'] = silabosemanal[numsemana - 1]
                    except Exception as ex:
                        if silabosemanal.count() > 0:
                            data['semana'] = silabosemanal[0]

                    if 'examen' in request.GET:
                        data['numsemana'] = int(request.GET['examen'])
                        data['essemanaexamen'] = True
                    # SELECCION EN MENU

                    if silabocab.versionrecurso == 1:
                        return render(request, "pro_planificacion/planrecursoclasevirtual.html", data)
                    if silabocab.versionrecurso == 2 and idcoordinacion == 7 or idcoordinacion == 10:
                        puede_videomagistral = False
                        if silabocab.materia.nivel.modalidad.id == 3:
                            puede_videomagistral = True
                        data['puede_videomagistral'] = puede_videomagistral
                        data['semanaexamenes'] = PlanificacionClaseSilabo.objects.values_list('semana', flat=True).filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, examen=True, status=True).exclude(semana=0)
                        carrera = silabocab.materia.asignaturamalla.malla.carrera.id
                        # id carrera adm medicina
                        if carrera == 223:
                            return render(request, "pro_planificacion/plansemanalrecursovdos.html", data)
                        else:
                            return render(request, "pro_planificacion/plansemanalrecursovtres.html", data)
                    else:
                        puede_videomagistral = False
                        if silabocab.materia.nivel.modalidad.id == 3:
                            data['examenfinal'] = PlanificacionClaseSilabo.objects.values_list('semana',flat=True).filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia,examen=True, status=True, parcial=2).exclude(semana=0)
                            puede_videomagistral = True
                        data['puede_videomagistral'] = puede_videomagistral
                        data['MIGRAR_VIDEO_INGRESADO'] = variable_valor('MIGRAR_VIDEO_INGRESADO')
                        data['MIGRAR_COMPENDIO_INGRESADO'] = variable_valor('MIGRAR_COMPENDIO_INGRESADO')
                        data['semanaexamenes'] = PlanificacionClaseSilabo.objects.values_list('semana', flat=True).filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, examen=True, status=True).exclude(semana=0)
                        if variable_valor('SILABO_BS5'):
                            return render(request, "pro_planificacion/plansemanalrecursovtres.html", data)
                        return render(request, "pro_planificacion/plansemanalrecursovdos.html", data)
                except Exception as ex:
                    import sys
                    return HttpResponseRedirect("/pro_planificacion?info=Error en linea: {} - {} .".format(sys.exc_info()[-1].tb_lineno, ex))

            elif action == 'migrarmasivomodal':
                try:
                    data['title'] = u'Migrar Masivo Moodle'
                    data['fechahoy'] = datetime.now().date()
                    materiacerrada = False
                    titulacion = False
                    data['examenfinal'] = None
                    data['periodoseleccionado'] = periodo
                    data['silabocab'] = silabocab = Silabo.objects.select_related('materia').get(pk=int(encrypt(request.GET['id'])), status=True)
                    if silabocab.materia.cerrado:
                        materiacerrada = True
                    data['materiacerrada'] = materiacerrada
                    if silabocab.materia.modeloevaluativo_id == 25:
                        titulacion = True
                    data['titulacion'] = titulacion
                    data['idcoordinacion'] = silabocab.materia.asignaturamalla.malla.carrera.mi_coordinacion2()
                    data['silabosemanal'] = silabosemanal = silabocab.silabosemanal_set.filter(status=True)
                    data['listadounidades'] = DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico_id').filter(silabosemanal_id__in=silabosemanal.values_list('id'), temaunidadresultadoprogramaanalitico__status=True).distinct()
                    data['puede_videomagistral'] = silabocab.videomagistral
                    idcoordinacion = silabocab.materia.asignaturamalla.malla.carrera.mi_coordinacion2()
                    puede_videomagistral = False
                    if silabocab.materia.nivel.modalidad.id == 3:
                        data['examenfinal'] = PlanificacionClaseSilabo.objects.values_list('semana', flat=True).filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, examen=True,
                                                                                                                       status=True, parcial=2).exclude(semana=0)
                        puede_videomagistral = True
                    data['puede_videomagistral'] = puede_videomagistral
                    data['MIGRAR_VIDEO_INGRESADO'] = variable_valor('MIGRAR_VIDEO_INGRESADO')
                    data['semanaexamenes'] = PlanificacionClaseSilabo.objects.values_list('semana', flat=True).filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, examen=True, status=True).exclude(semana=0)
                    template = get_template('pro_planificacion/modal/migrarmasivomoodle.html')
                    return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'addtareavirtual':
                try:
                    data['title'] = u'Adicionar Tarea'
                    data['actividad'] = actividad = EvaluacionAprendizajeComponente.objects.get(pk=encrypt(request.GET['codigoactividad']))
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    data['totalactividad'] = TareaSilaboSemanal.objects.filter(silabosemanal__silabo_id=silabosemanal.silabo.id, actividad=actividad, status=True).count() + 1
                    carrera = silabosemanal.silabo.materia.asignaturamalla.malla.carrera
                    form = TareaSilaboSemanalForm()
                    if silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id != 7:
                        if silabosemanal.silabo.materia.nivel.periodo.id >= 112:
                            form = TareaSilaboSemanalRubricaForm()
                            form.add(1, carrera, profesor)
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    # clase = planificacionmateria.tipoplanificacion.planificacionclasesilabo_set.get(semana=silabosemanal.semana, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    # if clase.parcial:
                    # form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, tarea=True,  migrarmoodle=True, recurso=True, status=True)
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, nombre__in=['N1', 'N2', 'N3', 'N4'], migrarmoodle=True, recurso=True, status=True)
                    # else:
                    #     form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo,tarea=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/addtareavirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'addtareavirtualvdos':
                try:
                    data['title'] = u'Adicionar Tarea'
                    data['actividad'] = actividad = EvaluacionAprendizajeComponente.objects.get(pk=encrypt(request.GET['codigoactividad']))
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    data['totalactividad'] = TareaSilaboSemanal.objects.filter(silabosemanal__silabo_id=silabosemanal.silabo.id, actividad=actividad, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).count() + 1
                    data['tareasplanificadosilabo'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal__silabo=silabosemanal.silabo, evaluacion__evaluacionaprendizaje=actividad, evaluacion__silabosemanal__status=True, evaluacion__silabosemanal__silabo__status=True, status=True)
                    carrera = silabosemanal.silabo.materia.asignaturamalla.malla.carrera
                    form = TareaSilaboSemanalForm()
                    if silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id != 7:
                        if silabosemanal.silabo.materia.nivel.periodo.id >= 112:
                            form = TareaSilaboSemanalRubricaForm()
                            form.add(1, carrera, profesor)
                    if periodo.tipo.id == 3:
                        form = TareaSilaboSemanalRubricaForm()
                        form.add(1, carrera, profesor)
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True).first()
                    if periodo.tipo.id == 3:
                        form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(
                            modelo=silabosemanal.silabo.materia.modeloevaluativo, migrarmoodle=True, recurso=True,status=True)
                    else:
                        if clase:
                            if actividad.id == 7:
                                form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, nombre__in=['N1', 'N2', 'N3', 'N4'], migrarmoodle=True, recurso=True, status=True)
                            else:
                                form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, tarea=True, migrarmoodle=True, recurso=True, status=True)
                        else:
                            form.fields['modeloevaluativo'].widget.attrs['mensage'] = 'No tiene configurado el cronograma academico de la materia'
                    return render(request, "pro_planificacion/addtareavirtualvdos.html", data)
                except Exception as ex:
                    pass

            elif action == 'addtareapracticavirtual':
                try:
                    data['title'] = u'Adicionar trabajo práctico'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    carrera = silabosemanal.silabo.materia.asignaturamalla.malla.carrera
                    itempractica = silabosemanal.tieneguiapractica_semanales()[0]
                    form = TareaPracticaSilaboSemanalForm(initial={'nombre': itempractica.nombrepractica})
                    form.add(2, carrera, profesor)
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, alternativa_id=14, tarea=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/addtareapracticavirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'addtareapracticavirtualvdos':
                try:
                    data['title'] = u'Adicionar trabajo práctico'
                    data['actividad'] = actividad = EvaluacionAprendizajeComponente.objects.get(pk=encrypt(request.GET['codigoactividad']))
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['totalactividad'] = TareaPracticaSilaboSemanal.objects.filter(silabosemanal__silabo_id=silabosemanal.silabo.id, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).count() + 1
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    data['tareasplanificadosilabo'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal__silabo=silabosemanal.silabo, evaluacion__evaluacionaprendizaje=actividad, evaluacion__silabosemanal__status=True, evaluacion__silabosemanal__silabo__status=True, status=True)
                    carrera = silabosemanal.silabo.materia.asignaturamalla.malla.carrera
                    itempractica = silabosemanal.tieneguiapractica_semanales()[0]
                    form = TareaPracticaSilaboSemanalForm(initial={'nombre': itempractica.nombrepractica})
                    form.add(2, carrera, profesor)
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    if periodo.tipo.id in [3, 4]:
                        form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(
                            modelo=silabosemanal.silabo.materia.modeloevaluativo, migrarmoodle=True, recurso=True,
                            status=True)
                    else:
                        form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, nombre__in=['N2', 'N4'], migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/addtareapracticavirtualvdos.html", data)
                except Exception as ex:
                    pass

            elif action == 'edittareavirtual':
                try:
                    data['title'] = u'Editar Tarea'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    carrera = silabosemanal.silabo.materia.asignaturamalla.malla.carrera
                    data['codigotareavirtual'] = tareavirtual = silabosemanal.tareasilabosemanal_set.get(pk=encrypt(request.GET['codigotareavirtual']))
                    data['consultaaprendizaje'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal=tareavirtual.silabosemanal, evaluacion__evaluacionaprendizaje=tareavirtual.actividad, evaluacion__tipoactividadsemanal=2, status=True)
                    form = TareaSilaboSemanalForm(initial={'modeloevaluativo': tareavirtual.detallemodelo,
                                                           'nombre': tareavirtual.nombre,
                                                           'objetivo': tareavirtual.objetivo,
                                                           'instruccion': tareavirtual.instruccion,
                                                           'recomendacion': tareavirtual.recomendacion,
                                                           'rubrica': tareavirtual.rubrica,
                                                           'fechadesde': tareavirtual.fechadesde,
                                                           'fechahasta': tareavirtual.fechahasta,
                                                           'word': tareavirtual.word,
                                                           'pdf': tareavirtual.pdf,
                                                           'excel': tareavirtual.excel,
                                                           'powerpoint': tareavirtual.powerpoint,
                                                           'todos': tareavirtual.todos,
                                                           'calificar': tareavirtual.calificar
                                                           })
                    form.validar(tareavirtual)
                    if silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id != 7:
                        if silabosemanal.silabo.materia.nivel.periodo.id >= 112:
                            form = TareaSilaboSemanalRubricaForm(initial={'modeloevaluativo': tareavirtual.detallemodelo,
                                                                          'nombre': tareavirtual.nombre,
                                                                          'objetivo': tareavirtual.objetivo,
                                                                          'instruccion': tareavirtual.instruccion,
                                                                          'recomendacion': tareavirtual.recomendacion,
                                                                          'rubrica': tareavirtual.rubricamoodle,
                                                                          'fechadesde': tareavirtual.fechadesde,
                                                                          'fechahasta': tareavirtual.fechahasta,
                                                                          'word': tareavirtual.word,
                                                                          'pdf': tareavirtual.pdf,
                                                                          'excel': tareavirtual.excel,
                                                                          'powerpoint': tareavirtual.powerpoint,
                                                                          'todos': tareavirtual.todos,
                                                                          'calificar': tareavirtual.calificar
                                                                          })
                            if tareavirtual.estado_id == 4:
                                form.add(1, carrera, profesor, tareavirtual)
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    # if clase.parcial:
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, nombre__in=['N1', 'N2', 'N3', 'N4'], migrarmoodle=True, recurso=True, status=True)
                    # else:
                    #     form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo,tarea=True, migrarmoodle=True, recurso=True, status=True)

                    return render(request, "pro_planificacion/edittareavirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'edittareavirtualvdos':
                try:
                    data['title'] = u'Editar Tarea'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    carrera = silabosemanal.silabo.materia.asignaturamalla.malla.carrera
                    data['codigotareavirtual'] = tareavirtual = silabosemanal.tareasilabosemanal_set.get(pk=encrypt(request.GET['codigotareavirtual']))
                    data['consultaaprendizaje'] = consultaaprendizaje = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal=tareavirtual.silabosemanal, evaluacion__evaluacionaprendizaje=tareavirtual.actividad, evaluacion__tipoactividadsemanal=2, evaluacion__silabosemanal__status=True, status=True)
                    data['testplanificadosilabo'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal__silabo=tareavirtual.silabosemanal.silabo, evaluacion__evaluacionaprendizaje=tareavirtual.actividad, evaluacion__silabosemanal__status=True, status=True).exclude(temasemanal_id__in=consultaaprendizaje)
                    form = TareaSilaboSemanalForm(initial={'modeloevaluativo': tareavirtual.detallemodelo,
                                                           'nombre': tareavirtual.nombre,
                                                           'objetivo': tareavirtual.objetivo,
                                                           'instruccion': tareavirtual.instruccion,
                                                           'recomendacion': tareavirtual.recomendacion,
                                                           'rubrica': tareavirtual.rubrica,
                                                           'fechadesde': tareavirtual.fechadesde,
                                                           'fechahasta': tareavirtual.fechahasta,
                                                           'word': tareavirtual.word,
                                                           'pdf': tareavirtual.pdf,
                                                           'excel': tareavirtual.excel,
                                                           'powerpoint': tareavirtual.powerpoint,
                                                           'todos': tareavirtual.todos,
                                                           'calificar': tareavirtual.calificar
                                                           })
                    if tareavirtual.idtareamoodle > 0:
                        form.validar(tareavirtual)
                    if silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id != 7:
                        if silabosemanal.silabo.materia.nivel.periodo.id >= 112:
                            form = TareaSilaboSemanalRubricaForm(initial={'modeloevaluativo': tareavirtual.detallemodelo,
                                                                          'nombre': tareavirtual.nombre,
                                                                          'objetivo': tareavirtual.objetivo,
                                                                          'instruccion': tareavirtual.instruccion,
                                                                          'recomendacion': tareavirtual.recomendacion,
                                                                          'rubrica': tareavirtual.rubricamoodle,
                                                                          'fechadesde': tareavirtual.fechadesde,
                                                                          'fechahasta': tareavirtual.fechahasta,
                                                                          'word': tareavirtual.word,
                                                                          'pdf': tareavirtual.pdf,
                                                                          'excel': tareavirtual.excel,
                                                                          'powerpoint': tareavirtual.powerpoint,
                                                                          'todos': tareavirtual.todos,
                                                                          'calificar': tareavirtual.calificar
                                                                          })
                            # if tareavirtual.estado_id ==4:
                            form.add(1, carrera, profesor, tareavirtual)
                    if periodo.tipo.id == 3:
                        form = TareaSilaboSemanalRubricaForm(initial={'modeloevaluativo': tareavirtual.detallemodelo,
                                                                      'nombre': tareavirtual.nombre,
                                                                      'objetivo': tareavirtual.objetivo,
                                                                      'instruccion': tareavirtual.instruccion,
                                                                      'recomendacion': tareavirtual.recomendacion,
                                                                      'rubrica': tareavirtual.rubricamoodle,
                                                                      'fechadesde': tareavirtual.fechadesde,
                                                                      'fechahasta': tareavirtual.fechahasta,
                                                                      'word': tareavirtual.word,
                                                                      'pdf': tareavirtual.pdf,
                                                                      'excel': tareavirtual.excel,
                                                                      'powerpoint': tareavirtual.powerpoint,
                                                                      'todos': tareavirtual.todos,
                                                                      'calificar': tareavirtual.calificar
                                                                      })
                        form.add(1, carrera, profesor)
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    if periodo.tipo.id == 3:
                        form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(
                            modelo=silabosemanal.silabo.materia.modeloevaluativo, migrarmoodle=True, recurso=True,
                            status=True)
                    else:
                        if tareavirtual.actividad.id == 7:
                            form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, nombre__in=['N1', 'N2', 'N3', 'N4'], migrarmoodle=True, recurso=True, status=True)
                        else:
                            form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, tarea=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/edittareavirtualvdos.html", data)
                except Exception as ex:
                    pass

            elif action == 'edittareapracticavirtual':
                try:
                    data['title'] = u'Editar trabajo práctico'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['codigotareavirtual'] = tareavirtual = silabosemanal.tareapracticasilabosemanal_set.get(pk=encrypt(request.GET['codigotareavirtual']))
                    carrera = silabosemanal.silabo.materia.asignaturamalla.malla.carrera
                    form = TareaPracticaSilaboSemanalForm(initial={'modeloevaluativo': tareavirtual.detallemodelo,
                                                                   'nombre': tareavirtual.nombre,
                                                                   'archivotareapracticasilabo': tareavirtual.archivotareapracticasilabo,
                                                                   'fechadesde': tareavirtual.fechadesde,
                                                                   'fechahasta': tareavirtual.fechahasta,
                                                                   'word': tareavirtual.word,
                                                                   'pdf': tareavirtual.pdf,
                                                                   'excel': tareavirtual.excel,
                                                                   'todos': tareavirtual.todos,
                                                                   'rubricamoodle': tareavirtual.rubricamoodle,
                                                                   'powerpoint': tareavirtual.powerpoint,
                                                                   'calificar': tareavirtual.calificar,
                                                                   'detalle': tareavirtual.detalle
                                                                   })
                    if tareavirtual.estado_id == 4:
                        form.add(2, carrera, profesor, tareavirtual)
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, alternativa_id=14, tarea=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/edittareapracticavirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'edittareapracticavirtualvdos':
                try:
                    data['title'] = u'Editar trabajo práctico'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['codigotareavirtual'] = tareavirtual = silabosemanal.tareapracticasilabosemanal_set.get(pk=encrypt(request.GET['codigotareavirtual']))

                    semanas = EvaluacionAprendizajeTema.objects.values_list('temasemanal__silabosemanal', flat=True).filter(evaluacion__evaluacionaprendizaje_id=4, evaluacion__silabosemanal=silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                    filtrotemassemana = Q(temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True)
                    filtrotemassemana &= Q(silabosemanal__silabo=silabosemanal.silabo) if not silabosemanal.test_plansemanal(4) else Q(silabosemanal__in=semanas)

                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(filtrotemassemana).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    data['consultaaprendizaje'] = consultaaprendizaje = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal=tareavirtual.silabosemanal, evaluacion__evaluacionaprendizaje_id=4, evaluacion__tipoactividadsemanal=2, evaluacion__silabosemanal__status=True, status=True)
                    data['testplanificadosilabo'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal__silabo=tareavirtual.silabosemanal.silabo, evaluacion__evaluacionaprendizaje_id=4, evaluacion__silabosemanal__status=True, status=True).exclude(temasemanal_id__in=consultaaprendizaje)
                    carrera = silabosemanal.silabo.materia.asignaturamalla.malla.carrera
                    form = TareaPracticaSilaboSemanalForm(initial={'modeloevaluativo': tareavirtual.detallemodelo,
                                                                   'nombre': tareavirtual.nombre,
                                                                   'archivotareapracticasilabo': tareavirtual.archivotareapracticasilabo,
                                                                   'fechadesde': tareavirtual.fechadesde,
                                                                   'fechahasta': tareavirtual.fechahasta,
                                                                   'word': tareavirtual.word,
                                                                   'pdf': tareavirtual.pdf,
                                                                   'excel': tareavirtual.excel,
                                                                   'todos': tareavirtual.todos,
                                                                   'rubricamoodle': tareavirtual.rubricamoodle,
                                                                   'powerpoint': tareavirtual.powerpoint,
                                                                   'calificar': tareavirtual.calificar,
                                                                   'detalle': tareavirtual.detalle
                                                                   })
                    if tareavirtual.estado_id == 4:
                        form.add(2, carrera, profesor, tareavirtual)
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    if periodo.tipo.id in [3,4]:
                        form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, migrarmoodle=True, recurso=True, status=True)
                    else:
                        form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, nombre__in=['N2', 'N4'], migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/edittareapracticavirtualvdos.html", data)
                except Exception as ex:
                    pass

            elif action == 'addforovirtual':
                try:
                    data['title'] = u'Adicionar Foro'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['totalactividad'] = ForoSilaboSemanal.objects.filter(silabosemanal__silabo_id=silabosemanal.silabo.id, status=True).count() + 1
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    form = ForoSilaboSemanalForm()
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, foro=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/addforovirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'addforovirtualvdos':
                try:
                    data['title'] = u'Adicionar Foro'
                    data['actividad'] = actividad = EvaluacionAprendizajeComponente.objects.get(pk=encrypt(request.GET['codigoactividad']))
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['totalactividad'] = ForoSilaboSemanal.objects.filter(silabosemanal__silabo_id=silabosemanal.silabo.id, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).count() + 1
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    data['tareasplanificadosilabo'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal__silabo=silabosemanal.silabo, evaluacion__evaluacionaprendizaje=actividad, evaluacion__silabosemanal__status=True, evaluacion__silabosemanal__silabo__status=True, status=True)
                    form = ForoSilaboSemanalForm()
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, foro=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/addforovirtualvdos.html", data)
                except Exception as ex:
                    pass

            elif action == 'editforovirtual':
                try:
                    data['title'] = u'Editar Foro'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['codigoforovirtual'] = forovirtual = silabosemanal.forosilabosemanal_set.get(pk=encrypt(request.GET['codigoforovirtual']))
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    data['consultaaprendizaje'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal=forovirtual.silabosemanal, evaluacion__evaluacionaprendizaje_id=6, evaluacion__tipoactividadsemanal=2, status=True)
                    form = ForoSilaboSemanalForm(initial={'modeloevaluativo': forovirtual.detallemodelo,
                                                          # 'tipoforo': forovirtual.tipoforo,
                                                          'tipoconsolidacion': forovirtual.tipoconsolidacion,
                                                          'nombre': forovirtual.nombre,
                                                          'objetivo': forovirtual.objetivo,
                                                          'instruccion': forovirtual.instruccion,
                                                          'recomendacion': forovirtual.recomendacion,
                                                          'rubrica': forovirtual.rubrica,
                                                          'fechadesde': forovirtual.fechadesde,
                                                          'fechahasta': forovirtual.fechahasta,
                                                          'calificar': forovirtual.calificar
                                                          })
                    form.validar(forovirtual)
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    # if clase.parcial:
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, foro=True, migrarmoodle=True, recurso=True, status=True)
                    # else:
                    #     form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, foro=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/editforovirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'editforovirtualvdos':
                try:
                    data['title'] = u'Editar Foro'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['codigoforovirtual'] = forovirtual = silabosemanal.forosilabosemanal_set.get(pk=encrypt(request.GET['codigoforovirtual']))
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    data['consultaaprendizaje'] = consultaaprendizaje = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal=forovirtual.silabosemanal, evaluacion__evaluacionaprendizaje_id=6, evaluacion__tipoactividadsemanal=2, evaluacion__silabosemanal__status=True, status=True)
                    data['testplanificadosilabo'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal__silabo=forovirtual.silabosemanal.silabo, evaluacion__evaluacionaprendizaje_id=6, evaluacion__silabosemanal__status=True, status=True).exclude(temasemanal_id__in=consultaaprendizaje)
                    form = ForoSilaboSemanalForm(initial={'modeloevaluativo': forovirtual.detallemodelo,
                                                          # 'tipoforo': forovirtual.tipoforo,
                                                          'tipoconsolidacion': forovirtual.tipoconsolidacion,
                                                          'nombre': forovirtual.nombre,
                                                          'objetivo': forovirtual.objetivo,
                                                          'instruccion': forovirtual.instruccion,
                                                          'recomendacion': forovirtual.recomendacion,
                                                          'rubrica': forovirtual.rubrica,
                                                          'fechadesde': forovirtual.fechadesde,
                                                          'fechahasta': forovirtual.fechahasta,
                                                          'calificar': forovirtual.calificar
                                                          })

                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    if periodo.tipo.id in [3, 4]:
                        form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(
                            modelo=silabosemanal.silabo.materia.modeloevaluativo, migrarmoodle=True, recurso=True,
                            status=True)
                    else:
                        form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, foro=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/editforovirtualvdos.html", data)
                except Exception as ex:
                    pass

            elif action == 'addtestvirtual':
                try:
                    data['title'] = u'Adicionar test'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['testplanificadosilabo'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal__silabo=silabosemanal.silabo, evaluacion__evaluacionaprendizaje_id=1, evaluacion__silabosemanal__status=True, evaluacion__silabosemanal__silabo__status=True, status=True)
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    form = TestSilaboSemanalForm(initial={'horadesde': "00:00", 'horahasta': "23:59"})
                    data['form'] = form
                    data['totalactividad'] = TestSilaboSemanal.objects.filter(silabosemanal__silabo_id=silabosemanal.silabo.id, status=True).count() + 1
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    # if clase.parcial:
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, test=True, migrarmoodle=True, recurso=True, status=True)
                    # else:
                    #     form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, test=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/addtestvirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'addtestvirtualvdos':
                try:
                    data['title'] = u'Adicionar test'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['testplanificadosilabo'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal__silabo=silabosemanal.silabo, evaluacion__evaluacionaprendizaje_id=1, evaluacion__silabosemanal__status=True, evaluacion__silabosemanal__silabo__status=True, status=True)
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    form = TestSilaboSemanalForm(initial={'horadesde': "00:00", 'horahasta': "23:59"})
                    data['form'] = form
                    data['totalactividad'] = TestSilaboSemanal.objects.filter(silabosemanal__silabo_id=silabosemanal.silabo.id, status=True).count() + 1
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True).first()
                    materia = silabosemanal.silabo.materia
                    if clase:
                        if materia.modeloevaluativo_id in [27, 64]:
                            form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, test=True, migrarmoodle=True, recurso=True, status=True)
                        else:
                            form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, test=True, codigoparcial=clase.parcial, migrarmoodle=True, recurso=True, status=True)
                    else:
                        if materia.modeloevaluativo_id in [27, 64]:
                            form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, test=True, migrarmoodle=True, recurso=True, status=True)
                        else:
                            form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.none()
                            form.fields['modeloevaluativo'].widget.attrs['mensage'] = 'No tiene configurado el cronograma academico de la materia'
                    return render(request, "pro_planificacion/addtestvirtualvdos.html", data)
                except Exception as ex:
                    pass

            elif action == 'addtestvirtualadmision':
                try:
                    data['title'] = u'Adicionar test'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    form = TestSilaboSemanalAdmForm(initial={'horadesde': "00:00", 'horahasta': "23:59"})
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, test=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/addtestvirtualadmision.html", data)
                except Exception as ex:
                    pass

            elif action == 'edittestvirtual':
                try:
                    data['title'] = u'Editar test'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    data['codigotestvirtual'] = testvirtual = silabosemanal.testsilabosemanal_set.get(pk=encrypt(request.GET['codigotestvirtual']))
                    data['testplanificadosilabo'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal__silabo=testvirtual.silabosemanal.silabo, evaluacion__evaluacionaprendizaje_id=1, evaluacion__silabosemanal__status=True, status=True)
                    data['consultaaprendizaje'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal=testvirtual.silabosemanal, evaluacion__evaluacionaprendizaje_id=1, evaluacion__tipoactividadsemanal=2, status=True)
                    form = TestSilaboSemanalForm(initial={'modeloevaluativo': testvirtual.detallemodelo,
                                                          'instruccion': testvirtual.instruccion,
                                                          'nombretest': testvirtual.nombretest,
                                                          'recomendacion': testvirtual.recomendacion,
                                                          'fechadesde': testvirtual.fechadesde,
                                                          'horadesde': testvirtual.horadesde,
                                                          'fechahasta': testvirtual.fechahasta,
                                                          'horahasta': testvirtual.horahasta,
                                                          'vecesintento': testvirtual.vecesintento,
                                                          'navegacion': testvirtual.navegacion,
                                                          'tiempoduracion': testvirtual.tiempoduracion,
                                                          'horadesde': (str(testvirtual.horadesde.hour) + ":" + str(testvirtual.horadesde.minute)) if testvirtual.horadesde else '00:00',
                                                          'horahasta': (str(testvirtual.horahasta.hour) + ":" + str(testvirtual.horahasta.minute)) if testvirtual.horahasta else '00:00',
                                                          'calificar': testvirtual.calificar})
                    form.validar(testvirtual)
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    # if clase.parcial:
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, codigoparcial=clase.parcial, test=True, migrarmoodle=True, recurso=True, status=True)
                    # else:
                    #     form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, test=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/edittestvirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'edittestvirtualvdos':
                try:
                    data['title'] = u'Editar test'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['semanatemas'] = DetalleSilaboSemanalTema.objects.filter(silabosemanal__silabo=silabosemanal.silabo, temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__status=True, temaunidadresultadoprogramaanalitico__status=True, silabosemanal__silabo__status=True, silabosemanal__status=True, status=True).order_by('temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico__orden', 'temaunidadresultadoprogramaanalitico__orden', 'silabosemanal_id')
                    data['codigotestvirtual'] = testvirtual = silabosemanal.testsilabosemanal_set.get(pk=encrypt(request.GET['codigotestvirtual']))
                    data['consultaaprendizaje'] = consultaaprendizaje = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal=testvirtual.silabosemanal, evaluacion__evaluacionaprendizaje_id=1, evaluacion__tipoactividadsemanal=2, evaluacion__silabosemanal__status=True, status=True)
                    data['testplanificadosilabo'] = EvaluacionAprendizajeTema.objects.values_list('temasemanal_id', flat=True).filter(evaluacion__silabosemanal__silabo=testvirtual.silabosemanal.silabo, evaluacion__evaluacionaprendizaje_id=1, evaluacion__silabosemanal__status=True, status=True).exclude(temasemanal_id__in=consultaaprendizaje)
                    form = TestSilaboSemanalForm(initial={'modeloevaluativo': testvirtual.detallemodelo,
                                                          'instruccion': testvirtual.instruccion,
                                                          'nombretest': testvirtual.nombretest,
                                                          'recomendacion': testvirtual.recomendacion,
                                                          'fechadesde': testvirtual.fechadesde,
                                                          'horadesde': testvirtual.horadesde,
                                                          'fechahasta': testvirtual.fechahasta,
                                                          'horahasta': testvirtual.horahasta,
                                                          'vecesintento': testvirtual.vecesintento,
                                                          'navegacion': testvirtual.navegacion,
                                                          'tiempoduracion': testvirtual.tiempoduracion,
                                                          'horadesde': (str(testvirtual.horadesde.hour) + ":" + str(testvirtual.horadesde.minute)) if testvirtual.horadesde else '00:00',
                                                          'horahasta': (str(testvirtual.horahasta.hour) + ":" + str(testvirtual.horahasta.minute)) if testvirtual.horahasta else '00:00',
                                                          'calificar': testvirtual.calificar})

                    if testvirtual.idtestmoodle:
                        form.validar(testvirtual)
                    data['form'] = form
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, test=True, migrarmoodle=True, recurso=True, status=True)
                    return render(request, "pro_planificacion/edittestvirtualvdos.html", data)
                except Exception as ex:
                    pass

            elif action == 'edittestvirtualadmision':
                try:
                    data['title'] = u'Editar test'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['codigotestvirtual'] = testvirtual = silabosemanal.testsilabosemanaladmision_set.get(pk=encrypt(request.GET['codigotestvirtual']))
                    password = testvirtual.password
                    if testvirtual.detallemodelo.password and not testvirtual.password:
                        password = generar_clave_aleatoria(10)
                    form = TestSilaboSemanalAdmForm(initial={'titulo': testvirtual.titulo,
                                                             'modeloevaluativo': testvirtual.detallemodelo,
                                                             'descripcion': testvirtual.descripcion,
                                                             'navegacion': testvirtual.navegacion,
                                                             'tiempoduracion': testvirtual.tiempoduracion,
                                                             'esquemapregunta': testvirtual.esquemapregunta,
                                                             'vecesintento': testvirtual.vecesintento,
                                                             'fechadesde': datetime.now().strftime('%d-%m-%Y') if testvirtual.fecha is None else testvirtual.fecha,
                                                             'fechahasta': datetime.now().strftime('%d-%m-%Y') if testvirtual.fechahasta is None else testvirtual.fechahasta,
                                                             'horadesde': (str(testvirtual.horainicio.hour) + ":" + str(testvirtual.horainicio.minute)) if testvirtual.horainicio else '00:00',
                                                             'horahasta': (str(testvirtual.horafin.hour) + ":" + str(testvirtual.horafin.minute)) if testvirtual.horafin else '00:00',
                                                             'password': password
                                                             })
                    if testvirtual.idtestmoodle:
                        form.validar(testvirtual)
                    data['form'] = form

                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabosemanal.silabo.materia.modeloevaluativo, test=True, migrarmoodle=True, recurso=True, status=True)

                    return render(request, "pro_planificacion/edittestvirtualadmision.html", data)
                except Exception as ex:
                    pass

            elif action == 'addpreguntastestvirtual':
                try:
                    data['title'] = u'Adicionar preguntas test'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['codigotestvirtual'] = testvirtual = TestSilaboSemanal.objects.get(pk=encrypt(request.GET['codigotestvirtual']))
                    data['preguntatestsilabo'] = testvirtual.preguntatestsilabosemanal_set.filter(status=True)
                    data['cantidadalternativa'] = [1, 2, 3, 4]
                    return render(request, "pro_planificacion/addpreguntastestvirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'addguiaestudiantevirtual':
                try:
                    data['title'] = u'Adicionar guía del estudiante'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    formato = None
                    if ConfiguracionRecurso.objects.filter(status=True, tiporecurso=3,
                                                           carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera,
                                                           periodo=periodo).exists():
                        configuracion = ConfiguracionRecurso.objects.filter(status=True, tiporecurso=3,
                                                                            carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera,
                                                                            periodo=periodo)[0]
                        formato = configuracion.formato.all()
                    form = GuiaEstudianteSilaboSemanalForm()
                    form.cambiar_hep_text(formato)
                    data['form'] = form
                    return render(request, "pro_planificacion/addguiaestudiantevirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'editguiaestudiantevirtual':
                try:
                    data['title'] = u'Editar guía del estudiante'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    formato = None
                    data['codigoguiaestudiantevirtual'] = guiaestudiantevirtual = silabosemanal.guiaestudiantesilabosemanal_set.get(pk=encrypt(request.GET['codigoguiaestudiantevirtual']))
                    formato = guiaestudiantevirtual.mis_formatos(periodo)
                    form = GuiaEstudianteSilaboSemanalForm(initial={'observacion': guiaestudiantevirtual.observacion})
                    form.cambiar_hep_text(formato)
                    data['form'] = form
                    return render(request, "pro_planificacion/editguiaestudiantevirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'addguiadocentevirtual':
                try:
                    data['title'] = u'Adicionar guía del docente'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    form = GuiaDocenteSilaboSemanalForm()
                    data['form'] = form
                    return render(request, "pro_planificacion/addguiadocentevirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'editguiadocentevirtual':
                try:
                    data['title'] = u'Editar guía del docente'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['codigoguiadocentevirtual'] = guiadocentevirtual = silabosemanal.guiadocentesilabosemanal_set.get(pk=encrypt(request.GET['codigoguiadocentevirtual']))
                    form = GuiaDocenteSilaboSemanalForm(initial={'observacion': guiadocentevirtual.observacion})
                    data['form'] = form
                    return render(request, "pro_planificacion/editguiadocentevirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'adddiapositivavirtual':
                try:
                    data['title'] = u'Adicionar presentación'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['idcoordinacion'] = idc = silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id
                    formato = None
                    if ConfiguracionRecurso.objects.filter(status=True, tiporecurso=1,
                                                           carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera,
                                                           periodo=periodo).exists():
                        configuracion = ConfiguracionRecurso.objects.filter(status=True, tiporecurso=1,
                                                                            carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera,
                                                                            periodo=periodo)[0]
                        formato = configuracion.formato.all()
                    form = DiapositivaSilaboSemanalForm()
                    form.cambiar_hep_text(formato)

                    if idc == 7:
                        form.sin_tipo()

                    data['form'] = form
                    return render(request, "pro_planificacion/adddiapositivavirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'editdiapositivavirtual':
                try:
                    data['title'] = u'Editar presentación'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['codigodiapositivavirtual'] = diapositivavirtual = DiapositivaSilaboSemanal.objects.get(pk=encrypt(request.GET['id']))
                    data['idc'] = silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id
                    formato = None
                    formato = diapositivavirtual.mis_formatos(periodo)
                    form = DiapositivaSilaboSemanalForm(initial={'nombre': diapositivavirtual.nombre,
                                                                 'url': diapositivavirtual.url,
                                                                 'tipomaterial':2,
                                                                 'descripcion': diapositivavirtual.descripcion})
                    form.cambiar_hep_text(formato)
                    if silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id == 7:
                        form.sin_tipo()

                    data['form'] = form
                    #data['nombrediv'] = request.GET['nombrediv']
                    # template = get_template('pro_planificacion/editdiapositivavirtual.html')
                    #return JsonResponse({"result": True, 'data': template.render(data)})
                    return render(request, "pro_planificacion/editdiapositivavirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'addvidmagistralvirtual':
                try:
                    data['title'] = u'Adicionar video magistral'
                    data['codigosemana'] = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    form = VideoMagistralSilaboSemanalForm()
                    data['form'] = form
                    return render(request, "pro_planificacion/addvidmagistralvirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'editvidmagistralvirtual':
                try:
                    data['title'] = u'Editar video magistral'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['codigovidmagistralvirtual'] = vidmagistral = silabosemanal.videomagistralsilabosemanal_set.get(pk=encrypt(request.GET['codigovidmagistralvirtual']))
                    form = VideoMagistralSilaboSemanalForm(initial={'nombre': vidmagistral.nombre,
                                                                    # 'tipomaterial': vidmagistral.tipomaterial,
                                                                    # 'tiporecurso': vidmagistral.tiporecurso,
                                                                    'testourl': vidmagistral.url,
                                                                    'tipograbacion': vidmagistral.tipograbacion,
                                                                    'descripcion': vidmagistral.descripcion})
                    form.edit()
                    data['form'] = form
                    return render(request, "pro_planificacion/editvidmagistralvirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'addcompendiovirtual':
                try:
                    data['title'] = u'Adicionar compendio'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    formato = None
                    if ConfiguracionRecurso.objects.filter(status=True, tiporecurso=3, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo).exists():
                        configuracion = ConfiguracionRecurso.objects.filter(status=True, tiporecurso=3, carrera=silabosemanal.silabo.materia.asignaturamalla.malla.carrera, periodo=periodo)[0]
                        formato = configuracion.formato.all()
                    form = CompendioSilaboSemanalForm()
                    if not variable_valor('MIGRAR_COMPENDIO_INGRESADO'):
                        form.cambiar_hep_text(formato)
                    data['form'] = form
                    return render(request, "pro_planificacion/addcompendiovirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'editcompendiovirtual':
                try:
                    data['title'] = u'Editar compendio'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    formato = None
                    data['codigocompendiovirtual'] = compendiovirtual = silabosemanal.compendiosilabosemanal_set.get(pk=encrypt(request.GET['codigocompendiovirtual']))
                    formato = compendiovirtual.mis_formatos(periodo)
                    form = CompendioSilaboSemanalForm(initial={'descripcion': compendiovirtual.descripcion,
                                                               'porcentaje': compendiovirtual.porcentaje})
                    form.cambiar_hep_text(formato)
                    data['form'] = form
                    return render(request, "pro_planificacion/editcompendiovirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'addmaterialadicionalvirtual':
                try:
                    data['title'] = u'Adicionar material complementario'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    idc = silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id
                    form = MaterialAdicionalSemanalForm()
                    if idc == 7:
                        form.con_tipomaterial()
                    data['form'] = form
                    return render(request, "pro_planificacion/addmaterialadicionalvirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'editmaterialadicionalvirtual':
                try:
                    data['title'] = u'Editar material complementario'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['codigomaterialvirtual'] = materialvirtual = silabosemanal.materialadicionalsilabosemanal_set.get(pk=encrypt(request.GET['codigomaterialvirtual']))
                    form = MaterialAdicionalSemanalForm(initial=model_to_dict(materialvirtual))

                    data['idc'] = idc = silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id
                    if idc == 7:
                        form.con_tipomaterial()

                    data['form'] = form
                    return render(request, "pro_planificacion/editmaterialadicionalvirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'addsemanaplanificacionvirtual':
                try:
                    planificacionsemana = None
                    data['title'] = u'Adicionar la Semana # ' + str(int(encrypt(request.GET['numsemana']))) + ' Planificación'
                    filters = Q(status=True)
                    if prueba_modelo_evaluativo: filters &= Q(programaanaliticoasignatura__procedimientoeva_id=6)
                    else: filters &= Q(programaanaliticoasignatura__activo=True)
                    data['silabo'] = silabo = Silabo.objects.filter(pk=int(encrypt(request.GET['idsilabo']))).filter(filters)[0]
                    data['idmallavirtual'] = int(encrypt(request.GET['idmallavirtual']))
                    data['contenido'] = silabo.programaanaliticoasignatura.contenido_program_analitico()
                    # data['contenido'] = ContenidoResultadoProgramaAnalitico.objects.filter(programaanaliticoasignatura=silabo.programaanaliticoasignatura, status=True).order_by('orden')
                    data['numsemana'] = encrypt(request.GET['numsemana'])
                    data['nsemana'] = int(encrypt(request.GET['numsemana']))
                    data['semana'] = encrypt(request.GET['semana'])
                    data['fini'] = request.GET['fini']
                    data['ffin'] = request.GET['ffin']
                    data['librosilabos'] = silabo.programaanaliticoasignatura.bibliografiaprogramaanaliticoasignatura_set.all()
                    if PlanificacionClaseSilabo_Materia.objects.filter(materia=silabo.materia, tipoplanificacion__periodo=silabo.materia.nivel.periodo).exists():
                        planificacion = PlanificacionClaseSilabo_Materia.objects.get(materia=silabo.materia, tipoplanificacion__periodo=silabo.materia.nivel.periodo) if PlanificacionClaseSilabo_Materia.objects.get(materia=silabo.materia, tipoplanificacion__periodo=silabo.materia.nivel.periodo) else None
                        planificacionsemana = planificacion.tipoplanificacion.planificacionclasesilabo_set.filter(status=True).order_by('semana')
                    data['planificacionsemana'] = planificacionsemana
                    return render(request, "pro_planificacion/addsemanaplanificacionvirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'addbibliografiavirtual':
                try:
                    data['title'] = u'Adicionar Bibliografia'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(pk=encrypt(request.GET['codigosemana']))
                    data['idmallavirtual'] = encrypt(request.GET['idmallavirtual'])
                    return render(request, "pro_planificacion/addbibliografiavirtual.html", data)
                except Exception as ex:
                    pass

            elif action == 'planclasevirtualposgrado':
                try:
                    data['title'] = u'PLANIFICACIÓN SEMANAL DE SÍLABO'
                    lista_nueva = []
                    lista_semanas = []
                    panalitico = 0
                    data['silabocab'] = silabocab = Silabo.objects.get(pk=int(encrypt(request.GET['silaboid'])), status=True)
                    data['tiporecurso'] = TIPO_RECURSOS
                    data['tipolink'] = TIPO_LINK
                    data['tipoactividad'] = TIPO_ACTIVIDAD
                    if not PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, status=True).exists():
                        return JsonResponse({"result": "bad", "mensaje": u"Noo tiene cronograma académico."})
                    data['planificacion'] = PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, status=True).exclude(semana=0).order_by('orden')
                    lista = []
                    for p in PlanificacionClaseSilabo.objects.filter(tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, status=True).exclude(semana=0).order_by('orden'):
                        semana = None
                        idcodigo = 0
                        eva = ''
                        rec = ''
                        if silabocab.silabosemanal_set.filter(fechainiciosemana__gte=p.fechainicio, fechafinciosemana__lte=p.fechafin, status=True).exists():
                            lissemana = silabocab.silabosemanal_set.filter(fechainiciosemana__gte=p.fechainicio, fechafinciosemana__lte=p.fechafin, status=True)[0]
                            idcodigo = lissemana.id
                            semana = lissemana
                            eva = lissemana.evaluacion
                            rec = lissemana.recursos
                        idcodigo = idcodigo
                        modelosilabo = semana
                        lista.append([p.fechainicio.isocalendar()[1], p.fechainicio, p.fechafin, idcodigo, modelosilabo, rec, eva])
                    if silabocab.silabosemanal_set.filter(status=True).exists():
                        panalitico = 1
                    aux = 0
                    data['panalitico'] = panalitico
                    data['fechas'] = lista
                    data['porcentaje_semanas_registradas'] = silabocab.estado_semanas_llenas(lista.__len__())
                    data['tiene_practica'] = silabocab.materia.asignaturamalla.practicas
                    data['aprobar'] = variable_valor('APROBAR_SILABO')
                    data['rechazar'] = variable_valor('RECHAZAR_SILABO')
                    data['pendiente'] = variable_valor('PENDIENTE_SILABO')
                    pruede_modificar = False
                    hora_principal_0 = False
                    ban = 0
                    if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)), profesor=silabocab.profesor).exists():
                        pruede_modificar = True
                    else:
                        if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA))).exists():
                            if silabocab.materia.profesormateria_set.filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))[0].hora == 0:
                                hora_principal_0 = True
                            for pro in silabocab.materia.profesormateria_set.filter(status=True, profesor=silabocab.profesor, activo=True).exclude(tipoprofesor_id=4).exclude(pk__in=silabocab.materia.profesormateria_set.values_list('id', flat=False).filter(Q(status=True), Q(activo=True), (Q(tipoprofesor_id=TIPO_DOCENTE_TEORIA) | Q(tipoprofesor_id=TIPO_DOCENTE_FIRMA) | Q(tipoprofesor_id=TIPO_DOCENTE_AYUDANTIA)))):
                                if pro.hora > 0:
                                    ban = 1
                                    pruede_modificar = True
                                    break
                    if ban == 1:
                        if hora_principal_0 and pruede_modificar:
                            pruede_modificar = True
                        else:
                            pruede_modificar = False
                    data['pruede_modificar'] = pruede_modificar
                    data['periodosimportar'] = Periodo.objects.filter(tipo_id__in=[3, 4]).order_by('-inicio')
                    return render(request, "pro_planificacion/listado_plancasevirtualposgrado.html", data)
                except Exception as ex:
                    pass

            elif action == 'addrecursostutor':
                try:
                    data['title'] = u'Adicionar Recursos'
                    data['silabosemanal'] = silabosemanal = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['idsemana'])))
                    form = RecursosTutorSemanalForm()
                    data['form'] = form
                    return render(request, "pro_planificacion/addrecursostutor.html", data)
                except Exception as ex:
                    pass

            elif action == 'editrecursostutor':
                try:
                    data['title'] = u'Editar Recurso'
                    data['recurso'] = recurso = DetalleRecursoTutorSemanal.objects.get(pk=int(encrypt(request.GET['id'])))
                    initial = model_to_dict(recurso)
                    form = RecursosTutorSemanalForm(initial={'zoomurltutor': recurso.zoomurltutor,
                                                             'clasevirtualtutor': recurso.clasevirtualtutor,
                                                             'fechaclase': recurso.fechaclase,
                                                             'hora': (str(recurso.fechaclase.hour) + ":" + str(recurso.fechaclase.minute)) if recurso.fechaclase else '19:00',
                                                             'horafin': (str(recurso.fechafinclase.hour) + ":" + str(recurso.fechafinclase.minute)) if recurso.fechafinclase else '20:00',
                                                             })
                    data['form'] = form
                    return render(request, "pro_planificacion/editrecursostutor.html", data)
                except Exception as ex:
                    pass

            elif action == 'delrecursostutor':
                try:
                    data['title'] = u'Eliminar recurso'
                    data['recurso'] = DetalleRecursoTutorSemanal.objects.get(pk=int(encrypt(request.GET['id'])))
                    return render(request, "pro_planificacion/delrecursostutor.html", data)
                except Exception as ex:
                    pass

            elif action == 'detalles_recurso_tutor_semanal':
                try:
                    data['title'] = u'Detalle recurso tutor semanal'
                    data['semana'] = semana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['recursos'] = semana.detallerecursotutorsemanal_set.filter(status=True)
                    return render(request, "pro_planificacion/detalles_recurso_tutor_semanal.html", data)
                except Exception as ex:
                    pass

            elif action == 'confirmar_actualizacion_docentes':
                try:
                    data['title'] = u'Confirmar acualización de docentes'
                    data['materia'] = Materia.objects.get(pk=request.GET['id'])
                    return render(request, "pro_planificacion/confirmar_actualizacion_docentes.html", data)
                except Exception as ex:
                    pass

            elif action == 'confirmar_actualizacion_silabomoodle':
                try:
                    data['title'] = u'Confirmar acualización de sílabo en moodle'
                    data['materia'] = Materia.objects.get(pk=request.GET['id'])
                    return render(request, "pro_planificacion/confirmar_actualizacion_silabomoodle.html", data)
                except Exception as ex:
                    pass

            elif action == 'confirmar_actualizacion_modevaluativo_moodle':
                try:
                    data['title'] = u'Confirmar acualización de modelo evaluativo en moodle'
                    data['materia'] = Materia.objects.get(pk=request.GET['id'])
                    return render(request, "pro_planificacion/confirmar_actualizacion_modevaluativo_moodle.html", data)
                except Exception as ex:
                    pass

            elif action == 'addsemanaplanificacionvirtualposgrado':
                try:
                    planificacionsemana = None
                    data['title'] = u'Adicionar la Semana # ' + str(int(encrypt(request.GET['numsemana']))) + ' Planificación'
                    data['silabo'] = silabo = Silabo.objects.filter(pk=int(encrypt(request.GET['idsilabo'])), status=True, programaanaliticoasignatura__activo=True)[0]
                    data['idmallavirtual'] = int(encrypt(request.GET['idmallavirtual']))
                    data['contenido'] = silabo.programaanaliticoasignatura.contenido_program_analitico()
                    # data['contenido'] = ContenidoResultadoProgramaAnalitico.objects.filter(programaanaliticoasignatura=silabo.programaanaliticoasignatura, status=True).order_by('orden')
                    data['numsemana'] = encrypt(request.GET['numsemana'])
                    data['nsemana'] = int(encrypt(request.GET['numsemana']))
                    data['semana'] = encrypt(request.GET['semana'])
                    data['fini'] = request.GET['fini']
                    data['ffin'] = request.GET['ffin']
                    data['librosilabos'] = silabo.programaanaliticoasignatura.bibliografiaprogramaanaliticoasignatura_set.all()
                    if PlanificacionClaseSilabo_Materia.objects.filter(materia=silabo.materia, tipoplanificacion__periodo=silabo.materia.nivel.periodo, status=True).exists():
                        planificacion = PlanificacionClaseSilabo_Materia.objects.filter(materia=silabo.materia, tipoplanificacion__periodo=silabo.materia.nivel.periodo, status=True).order_by('-id').first()
                        planificacionsemana = planificacion.tipoplanificacion.planificacionclasesilabo_set.filter(status=True).order_by('semana')
                    data['planificacionsemana'] = planificacionsemana
                    return render(request, "pro_planificacion/addsemanaplanificacionvirtualposgrado.html", data)
                except Exception as ex:
                    pass

            elif action == 'addsubtemaposgrado':
                try:
                    data['tema'] = tema = DetalleSilaboSemanalTema.objects.get(pk=int(encrypt(request.GET['idtema'])))
                    data['temaanalitico'] = temaanalitico = TemaUnidadResultadoProgramaAnalitico.objects.get(pk=int(encrypt(request.GET['idtemaanalitico'])))
                    data['subtemas'] = temaanalitico.subtemaunidadresultadoprogramaanalitico_set.filter(status=True)
                    data['title'] = u'Adicionar Subtema al Tema: ' + tema.temaunidadresultadoprogramaanalitico.descripcion
                    data['idmallavirtual'] = int(encrypt(request.GET['idmallavirtual']))
                    data['silabosemana'] = silabosemana = SilaboSemanal.objects.get(pk=int(encrypt(request.GET['idsilabo'])))
                    data['numsemana'] = encrypt(request.GET['numsemana'])
                    data['nsemana'] = int(encrypt(request.GET['numsemana']))
                    data['semana'] = encrypt(request.GET['semana'])
                    data['fini'] = request.GET['fini']
                    data['ffin'] = request.GET['ffin']
                    # if PlanificacionClaseSilabo_Materia.objects.filter(materia=silabo.materia,tipoplanificacion__periodo=silabo.materia.nivel.periodo).exists():
                    #     planificacion = PlanificacionClaseSilabo_Materia.objects.get(materia=silabo.materia, tipoplanificacion__periodo=silabo.materia.nivel.periodo) if PlanificacionClaseSilabo_Materia.objects.get(materia=silabo.materia, tipoplanificacion__periodo=silabo.materia.nivel.periodo) else None
                    #     planificacionsemana = planificacion.tipoplanificacion.planificacionclasesilabo_set.filter(status=True).order_by('semana')
                    # data['planificacionsemana'] = planificacionsemana
                    return render(request, "pro_planificacion/addsubtemaposgrado.html", data)
                except Exception as ex:
                    pass

            elif action == 'mantenimientorubrica':
                try:
                    search = None
                    ids = None
                    if 'id' in request.GET:
                        ids = request.GET['id']
                        rubricas = RubricaMoodle.objects.filter(id=int(encrypt(ids)))
                    elif 's' in request.GET:
                        search = request.GET['s']
                        rubricas = RubricaMoodle.objects.filter(nombre__icontains=search, status=True, profesor=profesor).order_by('-id')
                    else:
                        rubricas = RubricaMoodle.objects.filter(status=True, profesor=profesor).order_by('-id')
                    paging = MiPaginador(rubricas, 25)
                    p = 1
                    try:
                        paginasesion = 1
                        if 'paginador' in request.session:
                            paginasesion = int(request.session['paginador'])
                        if 'page' in request.GET:
                            p = int(request.GET['page'])
                        else:
                            p = paginasesion
                        try:
                            page = paging.page(p)
                        except:
                            p = 1
                        page = paging.page(p)
                    except:
                        page = paging.page(p)
                    request.session['paginador'] = p
                    data['paging'] = paging
                    data['rangospaging'] = paging.rangos_paginado(p)
                    data['page'] = page
                    data['search'] = search if search else ""
                    data['ids'] = ids if ids else ""
                    data['rubricas'] = page.object_list
                    return render(request, "pro_planificacion/view_rubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'addrubrica':
                try:
                    data['title'] = u'Nueva Rubrica'
                    form = RubricaProfesorForm()
                    data['form'] = form
                    return render(request, "pro_planificacion/addrubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'additemrubrica':
                try:
                    data['title'] = u'Nuevo Criterio'
                    data['rubrica'] = rubrica = RubricaMoodle.objects.get(pk=int(encrypt(request.GET['id'])))
                    form = CriterioRubricaForm()
                    data['form'] = form
                    return render(request, "pro_planificacion/additemrubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'adddetallerubrica':
                try:
                    data['title'] = u'Nuevo Detalle'
                    data['item'] = item = ItemRubricaMoodle.objects.get(pk=int(encrypt(request.GET['id'])))
                    form = DetalleCriterioRubricaForm()
                    data['form'] = form
                    return render(request, "pro_planificacion/adddetallerubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'editrubrica':
                try:
                    data['title'] = u'Editar Rubrica'
                    r = RubricaMoodle.objects.get(pk=int(encrypt(request.GET['id'])))
                    form = RubricaProfesorForm(initial={'nombre': r.nombre,
                                                        'tipotarea': r.tipotarea,
                                                        'estado': r.estado})
                    data['form'] = form
                    data['rubrica'] = r
                    return render(request, "pro_planificacion/editrubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'edititemrubrica':
                try:
                    data['title'] = u'Editar Criterio'
                    r = ItemRubricaMoodle.objects.get(pk=int(encrypt(request.GET['id'])))
                    form = CriterioRubricaForm(initial={'item': r.item,
                                                        'orden': r.orden})
                    data['criterio'] = r
                    data['form'] = form
                    return render(request, "pro_planificacion/edititemrubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'editdetallerubrica':
                try:
                    data['title'] = u'Editar Detalle'
                    r = DetalleItemRubricaMoodle.objects.get(pk=int(encrypt(request.GET['id'])))
                    form = DetalleCriterioRubricaForm(initial={'descripcion': r.descripcion,
                                                               'valor': r.valor,
                                                               'orden': r.orden})
                    data['detalle'] = r
                    data['form'] = form
                    return render(request, "pro_planificacion/editdetallerubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'delrubrica':
                try:
                    data['title'] = u'Eliminar Rubrica'
                    data['rubrica'] = RubricaMoodle.objects.get(pk=int(encrypt(request.GET['id'])), status=True)
                    return render(request, "pro_planificacion/delrubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'delitemrubrica':
                try:
                    data['title'] = u'Eliminar Criterio'
                    data['item'] = ItemRubricaMoodle.objects.get(pk=int(encrypt(request.GET['id'])), status=True)
                    return render(request, "pro_planificacion/delitemrubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'deldetallerubrica':
                try:
                    data['title'] = u'Eliminar Detalle'
                    data['detalle'] = DetalleItemRubricaMoodle.objects.get(pk=int(encrypt(request.GET['id'])), status=True)
                    return render(request, "pro_planificacion/deldetallerubrica.html", data)
                except Exception as ex:
                    pass

            elif action == 'itemsrubrica':
                try:
                    search = None
                    ids = None
                    data['title'] = u'Criterios'
                    data['rubrica'] = rubrica = RubricaMoodle.objects.get(pk=int(encrypt(request.GET['id'])))
                    items = rubrica.itemrubricamoodle_set.filter(status=True).order_by('orden')
                    if 's' in request.GET:
                        search = request.GET['s']
                        items = items.filter(item__icontains=search).distinct()
                    data['items'] = items
                    return render(request, "pro_planificacion/itemsrubrica.html", data)
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error. %s" % ex})
                    pass

            elif action == 'detallerubrica':
                try:
                    search = None
                    ids = None
                    data['title'] = u'Detalle Criterios'
                    data['item'] = item = ItemRubricaMoodle.objects.get(pk=int(encrypt(request.GET['id'])))
                    detalles = item.detalleitemrubricamoodle_set.filter(status=True).order_by('orden')
                    if 's' in request.GET:
                        search = request.GET['s']
                        detalles = detalles.filter(descripcion__icontains=search).distinct()
                    data['detalles'] = detalles
                    return render(request, "pro_planificacion/detallerubrica.html", data)
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error. %s" % ex})
                    pass

            elif action == 'urlexamen':
                try:
                    data['title'] = u'Url Examen'
                    materia_id = int(encrypt(request.GET['id']))
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    data['listado'] = listado = LinkMateriaExamen.objects.filter(status=True, materia=materia)
                    data['listcount'] = listado.count()
                    return render(request, "pro_planificacion/viewlinkmateriaexamen.html", data)
                except Exception as ex:
                    pass

            elif action == 'addurlexamen':
                try:
                    data['action'] = action
                    data['id'] = int(encrypt(request.GET['id']))
                    data['filtro'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['id'])))
                    form = LinkMateriaExamenForm()
                    data['form2'] = form
                    template = get_template("pro_planificacion/formlinkmateria.html")
                    return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'editurlexamen':
                try:
                    data['action'] = action
                    data['id'] = request.GET['id']
                    filtro = LinkMateriaExamen.objects.get(pk=request.GET['id'])
                    filtro.fecha = datetime.now().strftime('%d-%m-%Y') if filtro.fecha is None else filtro.fecha
                    filtro.horainicio = datetime.now().time() if filtro.horainicio is None else filtro.horainicio
                    filtro.horafin = datetime.now().time() if filtro.horafin is None else filtro.horafin
                    data['filtro'] = filtro
                    data['form2'] = LinkMateriaExamenForm(initial=model_to_dict(filtro))
                    template = get_template("pro_planificacion/formlinkmateria.html")
                    return JsonResponse({"result": True, 'data': template.render(data)})
                except Exception as ex:
                    pass

            elif action == 'delurlexamen':
                try:
                    data['title'] = u'Eliminar Link Materia'
                    data['filtro'] = LinkMateriaExamen.objects.get(pk=int(request.GET['id']))
                    return render(request, "pro_planificacion/dellinkmateria.html", data)
                except Exception as ex:
                    pass

            elif action == 'comprobacionaacesoexamen_2':
                try:
                    data['title'] = u'Listado de comprobación de acceso a examen'
                    data['horario'] = horario = HorarioExamen.objects.get(id=int(encrypt(request.GET['id'])))
                    data['materia'] = Materia.objects.get(pk=horario.materia.id)
                    data['fechaactual'] = datetime.now().date()
                    return render(request, "pro_planificacion/comprobacionaacesoexamen.html", data)
                except Exception as ex:
                    pass

            elif action == 'comprobacionaacesoexamen':
                try:
                    data['title'] = u'Listado de comprobación de acceso a examen'
                    data['horariodetalle'] = HorarioExamenDetalleAlumno.objects.filter(horarioexamendetalle__horarioexamen_id=int(encrypt(request.GET['idexamen'])))
                    data['detalle'] = detalle = HorarioExamenDetalle.objects.get(horarioexamen_id=int(encrypt(request.GET['idexamen'])))
                    data['horario'] = detalle.horarioexamen
                    data['fechaactual'] = datetime.now().date()
                    return render(request, "pro_planificacion/comprobacionaacesoexamen_nuevo.html", data)
                except Exception as ex:
                    pass

            elif action == 'listadoalumnosexamen':
                try:
                    data['title'] = u'Listado de alumnos para el examen'
                    data['horariodetalle'] = horariodetalle = HorarioExamenDetalleAlumno.objects.filter(horarioexamendetalle_id=int(encrypt(request.GET['iddetalle'])))
                    data['detalle'] = detalle = HorarioExamenDetalle.objects.get(pk=int(encrypt(request.GET['iddetalle'])))
                    data['horario'] = detalle.horarioexamen
                    for h in horariodetalle:
                        data['materia'] = h.materiaasignada.materia
                        break
                    data['fechaactual'] = datetime.now().date()
                    return render(request, "pro_planificacion/listadoalumnos_examen.html", data)
                except Exception as ex:
                    pass

            elif action == 'detalle_ip':
                try:
                    data = {}
                    data['materiaasignada'] = materiaasignada = MateriaAsignada.objects.get(pk=int(request.GET['maid']))
                    if periodo.id < 119:
                        data['registroszoom'] = SesionZoom.objects.filter(status=True, materiaasignada=materiaasignada)
                        template = get_template("pro_planificacion/detalle_ip.html")
                        json_content = template.render(data)
                    else:
                        data['registroszoom'] = SesionZoom.objects.filter(status=True, materiaasignada=materiaasignada)
                        data['registros'] = LogIngresoAsistenciaLeccion.objects.filter(status=True, asistencia__materiaasignada=materiaasignada)
                        template = get_template("pro_planificacion/detalle_ip_v2.html")
                        json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'addexamen':
                try:
                    data['title'] = u'Adicionar Examen'
                    # data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get( pk=encrypt(request.GET['codigosemana']))
                    data['silabo'] = silabo = Silabo.objects.get(pk=encrypt(request.GET['silabo']))
                    data['numerosemana'] = numerosemana = request.GET['numerosemana']
                    form = ExamenSilaboSemanalForm()
                    # data['semanaexamenes'] =semanaexamenes= PlanificacionClaseSilabo.objects.values_list('semana', flat=True).filter(
                    #     tipoplanificacion__planificacionclasesilabo_materia__materia=silabocab.materia, examen=True,
                    #     status=True).exclude(semana=0)

                    # cont=0
                    # for sem in semanaexamenes:
                    #     cont+=1
                    #     if sem.semana == silabosemanal.semana:
                    #         break
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo=silabo.materia.modeloevaluativo, status=True, migrarmoodle=True)
                    clase = None
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabo.materia, status=True)
                    if PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, examen=True, status=True, semana=numerosemana).exists():
                        clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, examen=True, status=True, semana=numerosemana)[0]
                        # clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, fechainicio=silabosemanal.fechainiciosemana, status=True)[0]
                        detallemodelo = None
                        if clase.parcial == 1:
                            data['nombre_examen'] = "EXAMEN_1"
                            detallemodelo = DetalleModeloEvaluativo.objects.filter(modelo=silabo.materia.modeloevaluativo, status=True)[0]
                            modelo_ev = detallemodelo.modelo_id
                            if modelo_ev in [25, 26, 27, 57, 64, 63, 66, 71]:
                                form.fields['modeloevaluativo'].queryset = detallemodelo = DetalleModeloEvaluativo.objects.filter(nombre="N1", modelo=silabo.materia.modeloevaluativo, status=True)
                            elif modelo_ev in [8]:
                                data['nombre_examen'] = "EXAMEN"
                                form.fields['modeloevaluativo'].queryset = detallemodelo = DetalleModeloEvaluativo.objects.filter(nombre="EX", modelo=silabo.materia.modeloevaluativo, status=True)
                            else:
                                form.fields['modeloevaluativo'].queryset = detallemodelo = DetalleModeloEvaluativo.objects.filter(nombre="EX1", modelo=silabo.materia.modeloevaluativo, status=True)
                        elif clase.parcial == 2:
                            data['nombre_examen'] = "EXAMEN_2"
                            detallemodelo = DetalleModeloEvaluativo.objects.filter(modelo=silabo.materia.modeloevaluativo, status=True).first()
                            if detallemodelo and detallemodelo.modelo_id in [27, 26, 57, 64, 63, 66, 71]:
                                form.fields['modeloevaluativo'].queryset = detallemodelo = DetalleModeloEvaluativo.objects.filter(nombre="N2", modelo=silabo.materia.modeloevaluativo, status=True)
                            else:
                                detallemodelo = DetalleModeloEvaluativo.objects.filter(nombre="EX2", modelo=silabo.materia.modeloevaluativo, status=True)
                                if not detallemodelo: detallemodelo = DetalleModeloEvaluativo.objects.filter(alternativa_id=105, modelo=silabo.materia.modeloevaluativo, status=True)
                                form.fields['modeloevaluativo'].queryset = detallemodelo
                        else:
                            data['nombre_examen'] = "EXAMEN"
                        if detallemodelo:
                            if HorarioExamen.objects.filter(status=True, materia=silabo.materia, detallemodelo=detallemodelo[0]).exists():
                                horario = HorarioExamen.objects.filter(status=True, materia=silabo.materia, detallemodelo=detallemodelo[0])[0]
                                form.add(horario)
                    else:
                        data['numerosemana'] = numerosemana = int(numerosemana) - 1
                        planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabo.materia, status=True)
                        if PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, examen=True, status=True, semana=numerosemana).exists():
                            clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, examen=True, status=True, semana=numerosemana)[0]
                            detallemodelo = None
                            modelo_ev = silabo.materia.modeloevaluativo_id
                            if clase.parcial == 1:
                                if modelo_ev in [8]:
                                    testcreado = TestSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo)
                                    detallemodelof = DetalleModeloEvaluativo.objects.filter(modelo=silabo.materia.modeloevaluativo, status=True, migrarmoodle=True)
                                    if detallemodelof.filter(nombre="EX").exists() and not testcreado.filter(detallemodelo__nombre='EX').exists():
                                        data['nombre_examen'] = "EXAMEN"
                                        form.fields['modeloevaluativo'].queryset = detallemodelof.filter(nombre="EX")
                                    elif detallemodelof.filter(nombre__in=["RE", "SUSP"]).exists() and not testcreado.filter(detallemodelo__nombre__in=['RE', 'SUSP']).exists():
                                        data['nombre_examen'] = "EXAMEN_RE"
                                        form.fields['modeloevaluativo'].queryset = detallemodelof.filter(nombre__in=["RE", "SUSP"])
                            if clase.parcial == 2:
                                if not TestSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo, detallemodelo__nombre='RE').exists():
                                    data['nombre_examen'] = "EXAMEN_RE"
                                    form.fields['modeloevaluativo'].queryset = detallemodelo = DetalleModeloEvaluativo.objects.filter(nombre="RE", modelo=silabo.materia.modeloevaluativo, status=True, migrarmoodle=True)
                                elif not TestSilaboSemanal.objects.filter(status=True, silabosemanal__silabo=silabo, detallemodelo__nombre='EX2').exists():
                                    data['nombre_examen'] = "EXAMEN_2"
                                    detallemodelo = DetalleModeloEvaluativo.objects.filter(nombre="EX2", modelo=silabo.materia.modeloevaluativo, status=True)
                                    if not detallemodelo: detallemodelo = DetalleModeloEvaluativo.objects.filter(alternativa_id=105, modelo=silabo.materia.modeloevaluativo, status=True)
                                    form.fields['modeloevaluativo'].queryset = detallemodelo
                    data['form'] = form
                    data['clase'] = clase
                    return render(request, "pro_planificacion/addexamen.html", data)
                except Exception as ex:
                    pass

            elif action == 'addexamenadmision':
                try:
                    data['title'] = u'Adicionar Examen Nivelación'
                    data['silabo'] = silabo = Silabo.objects.get(pk=encrypt(request.GET['silabo']))
                    data['numerosemana'] = numerosemana = request.GET['numerosemana']
                    form = TestSilaboSemanalAdmForm(initial={'horadesde': "00:00", 'horahasta': "23:59"})

                    clase = None
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabo.materia, status=True)
                    if PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, examen=True, status=True, semana=numerosemana).exists():
                        data['clase'] = clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, examen=True, status=True, semana=numerosemana)[0]
                    form.fields['modeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(nombre="EX", modelo=silabo.materia.modeloevaluativo, test=True, migrarmoodle=True, recurso=True, status=True)
                    data['form'] = form
                    data['clase'] = clase
                    return render(request, "pro_planificacion/addexamenadmision.html", data)
                except Exception as ex:
                    pass

            elif action == 'reporte_tarea':
                try:
                    data['tareasilabo'] = tarea = TareaSilaboSemanal.objects.get(pk=int(encrypt(request.GET['id'])))
                    if tarea.rubricamoodle:
                        data['tiene_rubrica'] = True
                        arreglo = []
                        arreglosumatoria = []
                        arreglo_aux = []
                        data['rubrica'] = r = tarea.rubricamoodle
                        data['criterios'] = criterios = r.itemrubricamoodle_set.filter(status=True).order_by('orden')
                        detalles = DetalleItemRubricaMoodle.objects.filter(status=True, item__rubrica=r)
                        ordenmaximo = detalles.order_by('-orden')[0].orden
                        i = 1
                        while i <= ordenmaximo:
                            sumatoria = int(
                                null_to_decimal(detalles.filter(orden=i).aggregate(sumatoria=Sum('valor'))['sumatoria'], 0))
                            arreglosumatoria.append(sumatoria)
                            i += 1

                        for c in criterios:
                            arreglo_aux.append([c.item, ''])
                            for d in c.detalleitemrubricamoodle_set.filter(status=True).order_by('orden'):
                                arreglo_aux.append([d.descripcion, d.valor])
                            arreglo.append(arreglo_aux)
                            arreglo_aux = []
                        data['arreglo'] = arreglo
                        data['arreglosumatoria'] = arreglosumatoria

                    template_pdf = 'pro_planificacion/reporte_tarea_pdf.html'
                    nombredocumento = u"%s_%s" % (remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((tarea.nombre.__str__()).replace(' ', '_'))), random.randint(1, 100000).__str__())
                    ruta2 = remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((tarea.silabosemanal.silabo.materia.asignatura.__str__()).replace(' ', '_')))

                    directory_principal = os.path.join(SITE_STORAGE, 'media', 'reportetareasilabo')
                    try:
                        os.stat(directory_principal)
                    except:
                        os.mkdir(directory_principal)

                    directory = os.path.join(SITE_STORAGE, 'media', 'reportetareasilabo', ruta2)
                    try:
                        os.stat(directory)
                    except:
                        os.mkdir(directory)
                    valida = conviert_html_to_pdf_parametros_save(template_pdf, {'pagesize': 'A4', 'data': data, }, nombredocumento, 'reportetareasilabo', ruta2)
                    if valida:
                        tarea.reportetareasilabo = u"reportetareasilabo/%s/%s.pdf" % (ruta2, nombredocumento)
                        tarea.save(request)
                    return conviert_html_to_pdf_name(
                        template_pdf,
                        {
                            'pagesize': 'a4 landscape',
                            'data': data
                        },
                        nombredocumento
                    )
                except Exception as ex:
                    pass

            elif action == 'reporte_trabajo_practico':
                try:
                    pk = encrypt(request.GET['id'])
                    data['practica'] = practica = TareaPracticaSilaboSemanal.objects.get(pk=pk)
                    data['listadoactividades'] = EvaluacionAprendizajeTema.objects.filter(
                        evaluacion__evaluacionaprendizaje_id=4, evaluacion__silabosemanal=practica.silabosemanal,
                        evaluacion__status=True, evaluacion__silabosemanal__status=True,
                        evaluacion__evaluacionaprendizaje__status=True, status=True)
                    data['historialaprobacion'] = practica.historialaprobaciontareapractica_set.filter(
                        status=True).order_by('id')
                    data['tiene_rubrica'] = False
                    if practica.rubricamoodle:
                        data['tiene_rubrica'] = True
                        arreglo = []
                        arreglosumatoria = []
                        arreglo_aux = []
                        data['rubrica'] = r = practica.rubricamoodle
                        data['criterios'] = criterios = r.itemrubricamoodle_set.filter(status=True).order_by('orden')
                        detalles = DetalleItemRubricaMoodle.objects.filter(status=True, item__rubrica=r)
                        ordenmaximo = detalles.order_by('-orden')[0].orden
                        i = 1
                        while i <= ordenmaximo:
                            sumatoria = int(
                                null_to_decimal(detalles.filter(orden=i).aggregate(sumatoria=Sum('valor'))['sumatoria'],
                                                0))
                            arreglosumatoria.append(sumatoria)
                            i += 1

                        for c in criterios:
                            arreglo_aux.append([c.item, ''])
                            for d in c.detalleitemrubricamoodle_set.filter(status=True).order_by('orden'):
                                arreglo_aux.append([d.descripcion, d.valor])
                            arreglo.append(arreglo_aux)
                            arreglo_aux = []
                        data['arreglo'] = arreglo
                        data['arreglosumatoria'] = arreglosumatoria
                    template_pdf = 'pro_planificacion/reporte_trabajopractico_pdf.html'
                    nombredocumento = u"%s_%s" % (remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((practica.nombre.__str__()).replace(' ', '_'))), random.randint(1, 100000).__str__())
                    ruta2 = remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((practica.silabosemanal.silabo.materia.asignatura.__str__()).replace(' ', '_')))

                    directory_principal = os.path.join(SITE_STORAGE, 'media', 'reportetareapractica')
                    try:
                        os.stat(directory_principal)
                    except:
                        os.mkdir(directory_principal)

                    directory = os.path.join(SITE_STORAGE, 'media', 'reportetareapractica', ruta2)
                    try:
                        os.stat(directory)
                    except:
                        os.mkdir(directory)
                    valida = conviert_html_to_pdf_parametros_save(template_pdf, {'pagesize': 'A4', 'data': data, }, nombredocumento, 'reportetareapractica', ruta2)
                    if valida:
                        practica.reportetareapracticasilabo = u"reportetareapractica/%s/%s.pdf" % (ruta2, nombredocumento)
                        practica.save(request)
                    return conviert_html_to_pdf_name(
                        template_pdf,
                        {
                            'pagesize': 'a4 landscape',
                            'data': data
                        },
                        nombredocumento
                    )
                except Exception as ex:
                    pass

            elif action == 'reporte_test':
                try:
                    pk = encrypt(request.GET['id'])
                    data['test'] = test = TestSilaboSemanal.objects.get(pk=pk)
                    data['listadoactividades'] = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje_id=1, evaluacion__silabosemanal=test.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                    data['historialaprobacion'] = test.historialaprobaciontest_set.filter(status=True).order_by('id')

                    template_pdf = 'pro_planificacion/reporte_test_pdf.html'
                    nombredocumento = u"%s_%s" % (remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((test.nombretest.__str__()).replace(' ', '_'))), random.randint(1, 100000).__str__())
                    ruta2 = remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode((test.silabosemanal.silabo.materia.asignatura.__str__()).replace(' ', '_')))

                    directory_principal = os.path.join(SITE_STORAGE, 'media', 'reportetestsilabo')
                    try:
                        os.stat(directory_principal)
                    except:
                        os.mkdir(directory_principal)

                    directory = os.path.join(SITE_STORAGE, 'media', 'reportetestsilabo', ruta2)
                    try:
                        os.stat(directory)
                    except:
                        os.mkdir(directory)
                    valida = conviert_html_to_pdf_parametros_save(template_pdf, {'pagesize': 'A4', 'data': data, },
                                                                  nombredocumento, 'reportetestsilabo', ruta2)
                    if valida:
                        test.reportetestsilabo = u"reportetestsilabo/%s/%s.pdf" % (ruta2, nombredocumento)
                        test.save(request)
                    return conviert_html_to_pdf_name(
                        template_pdf,
                        {
                            'pagesize': 'a4 landscape',
                            'data': data
                        },
                        nombredocumento
                    )
                except Exception as ex:
                    pass

            elif action == 'reporte_foro':
                try:
                    pk = encrypt(request.GET['id'])
                    data['foro'] = foro = ForoSilaboSemanal.objects.get(pk=pk)
                    data['listadoactividades'] = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje_id=6, evaluacion__silabosemanal=foro.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True)
                    data['historialaprobacion'] = foro.historialaprobacionforo_set.filter(status=True).order_by('id')

                    template_pdf = 'pro_planificacion/reporte_foro_pdf.html'
                    nombredocumento = u"%s_%s" % (foro.nombre, random.randint(1, 100000).__str__())
                    ruta2 = remover_caracteres_tildes_unicode(remover_caracteres_especiales_unicode(
                        (foro.silabosemanal.silabo.materia.asignatura.__str__()).replace(' ', '_')))

                    directory_principal = os.path.join(SITE_STORAGE, 'media', 'reporteforosilabo')
                    try:
                        os.stat(directory_principal)
                    except:
                        os.mkdir(directory_principal)

                    directory = os.path.join(SITE_STORAGE, 'media', 'reporteforosilabo', ruta2)
                    try:
                        os.stat(directory)
                    except:
                        os.mkdir(directory)
                    valida = conviert_html_to_pdf_parametros_save(template_pdf, {'pagesize': 'A4', 'data': data, },
                                                                  nombredocumento, 'reporteforosilabo', ruta2)
                    if valida:
                        foro.reporteforosilabo = u"reporteforosilabo/%s/%s.pdf" % (ruta2, nombredocumento)
                        foro.save(request)

                    return conviert_html_to_pdf_name(
                        template_pdf,
                        {
                            'pagesize': 'a4 landscape',
                            'data': data
                        },
                        nombredocumento
                    )
                except Exception as ex:
                    pass

            elif action == 'editexamen':
                try:
                    data['title'] = u'Editar test'
                    data['codigosemana'] = silabosemanal = SilaboSemanal.objects.get(
                        pk=encrypt(request.GET['codigosemana']))
                    data['codigotestvirtual'] = testvirtual = silabosemanal.testsilabosemanal_set.get(
                        pk=encrypt(request.GET['codigotestvirtual']))
                    password = testvirtual.password
                    if testvirtual.detallemodelo.password and not testvirtual.password:
                        password = generar_clave_aleatoria(10)
                    form = ExamenSilaboSemanalForm(initial={'modeloevaluativo': testvirtual.detallemodelo,
                                                            'instruccion': testvirtual.instruccion,
                                                            'nombretest': testvirtual.nombretest,
                                                            'recomendacion': testvirtual.recomendacion,
                                                            'fechadesde': testvirtual.fechadesde,
                                                            'fechahasta': testvirtual.fechahasta,
                                                            'vecesintento': testvirtual.vecesintento,
                                                            'navegacion': testvirtual.navegacion,
                                                            'tiempoduracion': testvirtual.tiempoduracion,
                                                            'horadesde': (str(testvirtual.horadesde.hour) + ":" + str(testvirtual.horadesde.minute)) if testvirtual.horadesde else '00:00',
                                                            'horahasta': (str(testvirtual.horahasta.hour) + ":" + str(testvirtual.horahasta.minute)) if testvirtual.horahasta else '00:00',
                                                            'password': password})

                    clase = None
                    planificacionmateria = PlanificacionClaseSilabo_Materia.objects.get(materia=silabosemanal.silabo.materia, status=True)
                    if PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, examen=True, status=True, semana=silabosemanal.numsemana).exists():

                        clase = PlanificacionClaseSilabo.objects.filter(tipoplanificacion=planificacionmateria.tipoplanificacion, examen=True, status=True, semana=silabosemanal.numsemana)[0]
                        detallemodelo = None
                        if clase.parcial == 1:
                            form.fields['modeloevaluativo'].queryset = detallemodelo = DetalleModeloEvaluativo.objects.filter(
                                nombre="EX1", modelo=silabosemanal.silabo.materia.modeloevaluativo, status=True)
                        elif clase.parcial == 2:
                            form.fields['modeloevaluativo'].queryset = detallemodelo = DetalleModeloEvaluativo.objects.filter(
                                nombre="EX2", modelo=silabosemanal.silabo.materia.modeloevaluativo, status=True)
                        if detallemodelo:
                            if HorarioExamen.objects.filter(status=True, materia=silabosemanal.silabo.materia,
                                                            detallemodelo=detallemodelo[0]).exists():
                                horario = HorarioExamen.objects.filter(status=True, materia=silabosemanal.silabo.materia,
                                                                       detallemodelo=detallemodelo[0])[0]
                                form.add(horario)
                    form.editar_examen()
                    data['form'] = form
                    return render(request, "pro_planificacion/editexamen.html", data)
                except Exception as ex:
                    pass

            elif action == 'loadPlanificacionExamenesSedes':
                try:
                    data['title'] = u'Planificación de examenes en sedes'
                    if not 'idm' in request.GET:
                        raise NameError(u"No existe parametro de materia")
                    if not Materia.objects.values("id").filter(status=True, pk=encrypt(request.GET['idm'])).exists():
                        raise NameError(u"No existe la materia")
                    data['eMateria'] = eMateria = Materia.objects.get(pk=encrypt(request.GET['idm']))
                    eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(materiaasignada__materia=eMateria,
                                                                                                                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo=periodo)
                    eSedes = SedeVirtual.objects.filter(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list('aulaplanificacion__turnoplanificacion__fechaplanificacion__sede__id', flat=True))
                    data['eSedes'] = eSedes
                    data['title'] = u"Planificación de examenes en sedes"
                    # subquery = eMateriaAsignadaPlanificacionSedeVirtualExamenes.filter(aulaplanificacion__aula__tipo__id__in=OuterRef('pk'))
                    eTipoAulas = TipoAula.objects.filter(pk__in=eMateriaAsignadaPlanificacionSedeVirtualExamenes.values_list('aulaplanificacion__aula__tipo__id', flat=True))
                    # eTipoAulas = eTipoAulas.annotate(total=Count("id", filter=Q(pk__in=Subquery(subquery.values("aulaplanificacion__aula__tipo__id")))))
                    aTipoAulas = []
                    for eTipoAula in eTipoAulas:
                        total = len(eMateriaAsignadaPlanificacionSedeVirtualExamenes.values("id").filter(aulaplanificacion__aula__tipo=eTipoAula))
                        aTipoAulas.append({'nombre': eTipoAula.nombre, 'total': total})
                    data['eTipoAulas'] = aTipoAulas
                    return render(request, "pro_planificacion/detalleplanificacionexamen.html", data)
                except Exception as ex:
                    return HttpResponseRedirect(f"{request.path}?info={ex.__str__()}")

            elif action == 'listAlumnosPlanificacionExamenesSedes':
                try:
                    if not 'ids' in request.GET:
                        raise NameError(u"No existe parametro de sede")
                    if not 'idm' in request.GET:
                        raise NameError(u"No existe parametro de materia")
                    if not 'ids' in request.GET:
                        raise NameError(u"No existe parametro de tipo de aula")
                    if not Materia.objects.values("id").filter(status=True, pk=encrypt(request.GET['idm'])).exists():
                        raise NameError(u"No existe la materia")
                    if not SedeVirtual.objects.values("id").filter(pk=encrypt(request.GET['ids'])).exists():
                        raise NameError(u"No existe la sede")
                    if not TipoAula.objects.values("id").filter(pk=encrypt(request.GET['idt'])).exists():
                        raise NameError(u"No existe el tipo de aula")
                    data['eMateria'] = eMateria = Materia.objects.get(pk=encrypt(request.GET['idm']))
                    data['eSede'] = eSede = SedeVirtual.objects.get(pk=encrypt(request.GET['ids']))
                    data['eTipoAula'] = eTipoAula = TipoAula.objects.get(pk=encrypt(request.GET['idt']))
                    eDetalleModeloEvaluativos = eMateria.modeloevaluativo.campos_editarcalificacionmoodle()
                    eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(materiaasignada__materia=eMateria,
                                                                                                                                    detallemodeloevaluativo_id__in=eDetalleModeloEvaluativos.values_list('id', flat=True),
                                                                                                                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo=periodo,
                                                                                                                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__sede=eSede,
                                                                                                                                    aulaplanificacion__aula__tipo=eTipoAula
                                                                                                                                    )
                    data['eMateriaAsignadaPlanificacionSedeVirtualExamenes'] = eMateriaAsignadaPlanificacionSedeVirtualExamenes = eMateriaAsignadaPlanificacionSedeVirtualExamenes.order_by('materiaasignada__matricula__inscripcion__persona__apellido1', 'materiaasignada__matricula__inscripcion__persona__apellido2', 'materiaasignada__matricula__inscripcion__persona__nombres')
                    data['title'] = f'Listado de alumnos de la planificación'
                    data['DEBUG'] = DEBUG
                    return render(request, "pro_planificacion/listadoalumnosplanificacionexamen.html", data)
                except Exception as ex:
                    return HttpResponseRedirect(f"{request.path}?info={ex.__str__()}")

            elif action == 'rptCuadroCalificacionesSede':
                try:
                    if not 'ids' in request.GET:
                        raise NameError(u"No existe parametro de sede")
                    if not 'idm' in request.GET:
                        raise NameError(u"No existe parametro de materia")
                    if not 'ids' in request.GET:
                        raise NameError(u"No existe parametro de tipo de aula")
                    if not Materia.objects.values("id").filter(status=True, pk=encrypt(request.GET['idm'])).exists():
                        raise NameError(u"No existe la materia")
                    if not SedeVirtual.objects.values("id").filter(pk=encrypt(request.GET['ids'])).exists():
                        raise NameError(u"No existe la sede")
                    if not TipoAula.objects.values("id").filter(pk=encrypt(request.GET['idt'])).exists():
                        raise NameError(u"No existe el tipo de aula")
                    eMateria = Materia.objects.get(pk=encrypt(request.GET['idm']))
                    eProfesor = eMateria.profesor_principal_virtual()
                    eSede = SedeVirtual.objects.get(pk=encrypt(request.GET['ids']))
                    eTipoAula = TipoAula.objects.get(pk=encrypt(request.GET['idt']))
                    eDetalleModeloEvaluativos = eMateria.modeloevaluativo.campos_editarcalificacionmoodle()
                    eMateriaAsignadaPlanificacionSedeVirtualExamenes = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(materiaasignada__materia=eMateria,
                                                                                                                                    detallemodeloevaluativo_id__in=eDetalleModeloEvaluativos.values_list('id', flat=True),
                                                                                                                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo=periodo,
                                                                                                                                    aulaplanificacion__turnoplanificacion__fechaplanificacion__sede=eSede,
                                                                                                                                    aulaplanificacion__aula__tipo=eTipoAula
                                                                                                                                    )
                    borders = Borders()
                    borders.left = 1
                    borders.right = 1
                    borders.top = 1
                    borders.bottom = 1
                    titulo = easyxf('font: name Times New Roman, color-index black, bold on , height 350; alignment: horiz centre')
                    titulo2 = easyxf('font: name Times New Roman, color-index black, bold on , height 250; alignment: horiz centre')
                    fuentecabecera = easyxf('font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
                    fuentenormal = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
                    fuentemoneda = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right', num_format_str=' "$" #,##0.00')
                    fuentefecha = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz center', num_format_str='yyyy-mm-dd')
                    fuentenumerodecimal = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right', num_format_str='#,##0.00')
                    fuentenumeroentero = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right')

                    font_style = XFStyle()
                    font_style.font.bold = True
                    font_style2 = XFStyle()
                    font_style2.font.bold = False
                    wb = Workbook(encoding='utf-8')
                    response = HttpResponse(content_type="application/ms-excel")
                    response['Content-Disposition'] = 'attachment; filename=CUADRO_NOTA_' + (eSede.alias if eSede.alias else eSede.nombre) + "_" + eTipoAula.nombre + "_" + eMateria.asignaturamalla.nivelmalla.__str__() + "_" + eMateria.asignatura.nombre + "_" + "_" + eMateria.paralelo + "_" + datetime.now().date().strftime("%d.%m.%Y") + "_" + random.randint(1, 10000).__str__() + '.xls'
                    ws = wb.add_sheet('cuadro_calificaciones')
                    ws.write_merge(0, 0, 0, 8, 'UNIVERSIDAD ESTATAL DE MILAGRO', titulo)
                    ws.write_merge(1, 1, 0, 8, eMateria.asignaturamalla.malla.nombre_corto(), titulo2)
                    ws.write_merge(2, 2, 0, 8, eMateria.nombre_mostrar_sin_profesor(), titulo2)
                    ws.write_merge(3, 3, 0, 8, eProfesor.persona.nombre_completo_inverso() if eProfesor else 'SIN PROFESOR', titulo2)
                    ws.write_merge(4, 4, 0, 8, eSede.__str__(), titulo2)
                    ws.write_merge(5, 5, 0, 8, f'CUADRO DE CALIFICACIONES DE REACTIVOS {eTipoAula.nombre}', titulo2)
                    row_num = 7
                    columns = [
                        (u"#", 1000),
                        (u"ID", 6000),
                        (u"TIPO DOC.", 4000),
                        (u"DOCUMENTO", 3500),
                        (u"ALUMNO", 12000),
                        (u"ESTADO", 4000),
                        (u"ASISTENCIA", 6000),
                    ]
                    for eDetalleModeloEvaluativo in eDetalleModeloEvaluativos:
                        columns.append((u"%s" % eDetalleModeloEvaluativo.nombre, 3000))
                        columns.append((u"Retroalimentación", 20000))
                    for col_num in range(len(columns)):
                        ws.write(row_num, col_num, columns[col_num][0], fuentecabecera)
                        ws.col(col_num).width = columns[col_num][1]
                    row_num = 7
                    fila = 0
                    eMateriaAsignadaPlanificacionSedeVirtualExamenes = eMateriaAsignadaPlanificacionSedeVirtualExamenes.order_by('materiaasignada__matricula__inscripcion__persona__apellido1', 'materiaasignada__matricula__inscripcion__persona__apellido2', 'materiaasignada__matricula__inscripcion__persona__nombres')
                    for eMateriaAsignadaPlanificacionSedeVirtualExamen in eMateriaAsignadaPlanificacionSedeVirtualExamenes:
                        row_num += 1
                        fila += 1
                        ePersona = eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.matricula.inscripcion.persona
                        ws.write(row_num, 0, fila, fuentenormal)
                        ws.write(row_num, 1, encrypt(eMateriaAsignadaPlanificacionSedeVirtualExamen.pk), fuentenormal)
                        ws.write(row_num, 2, ePersona.tipo_documento(), fuentenormal)
                        ws.write(row_num, 3, ePersona.documento(), fuentenormal)
                        ws.write(row_num, 4, ePersona.nombre_completo_inverso(), fuentenormal)
                        ws.write(row_num, 5, eMateriaAsignadaPlanificacionSedeVirtualExamen.materiaasignada.estado.nombre, fuentenormal)
                        if eMateriaAsignadaPlanificacionSedeVirtualExamen.asistencia:
                            ws.write(row_num, 6, eMateriaAsignadaPlanificacionSedeVirtualExamen.fecha_asistencia, fuentefecha)
                        else:
                            ws.write(row_num, 6, "No se ha registrado asistencia", fuentenormal)
                        col_num = 6
                        for eDetalleModeloEvaluativo in eDetalleModeloEvaluativos:
                            col_num += 1
                            ws.write(row_num, col_num, "", fuentenormal)
                            col_num += 1
                            ws.write(row_num, col_num, "", fuentenormal)
                    wb.save(response)
                    return response
                except Exception as ex:
                    return HttpResponseRedirect(f"{request.path}?action=listAlumnosPlanificacionExamenesSedes&idm={encrypt(eMateria.id)}&ids={encrypt(eSede.id)}&idt={encrypt(eTipoAula.id)}")

            elif action == 'actastitulacion':
                try:
                    data['title'] = 'Listado de alumnos para titulación'
                    search, url_vars = request.GET.get('s', ''), ''
                    puede_eliminar_actas_firmadas = variable_valor('PUEDE_ELIMINAR_ACTAS_FIRMADAS')
                    data['puede_eliminar_actas_firmadas'] = puede_eliminar_actas_firmadas
                    data['materia'] = materia = Materia.objects.get(pk=int(encrypt(request.GET['idm'])))
                    materiatitulacion = MateriaTitulacion.objects.filter(materiaasignada__materia=materia, grupofirma_id=int(encrypt(request.GET['idgrupo'])), materiaasignada__materia__nivel__periodo=periodo, materiaasignada__status=True, status=True, materiaasignada__estado_id=1, materiaasignada__retiramateria=False)
                    # data['listadocoordinacion'] = materiatitulacion.values_list('materiaasignada__materia__asignaturamalla__malla__carrera__coordinacion__id', 'materiaasignada__materia__asignaturamalla__malla__carrera__coordinacion__nombre').distinct()
                    if 's' in request.GET:
                        search = request.GET['s'].strip()
                        ss = search.split(' ')
                        if len(ss) == 1:
                            materiatitulacion = materiatitulacion.filter(Q(materiaasignada__matricula__inscripcion__persona__nombres__icontains=search) |
                                                                         Q(materiaasignada__matricula__inscripcion__persona__apellido1__icontains=search) |
                                                                         Q(materiaasignada__matricula__inscripcion__persona__apellido2__icontains=search) |
                                                                         Q(materiaasignada__matricula__inscripcion__persona__cedula__icontains=search) |
                                                                         Q(materiaasignada__matricula__inscripcion__persona__pasaporte__icontains=search) |
                                                                         Q(materiaasignada__matricula__inscripcion__persona__usuario__username__icontains=search),
                                                                         materiaasignada__materia__nivel__periodo=periodo, materiaasignada__status=True, status=True, materiaasignada__estado_id=1, materiaasignada__retiramateria=False)

                        else:
                            materiatitulacion = materiatitulacion.filter(Q(materiaasignada__matricula__inscripcion__persona__apellido1__icontains=ss[0]) &
                                                                         Q(materiaasignada__matricula__inscripcion__persona__apellido2__icontains=ss[1]), materiaasignada__materia__nivel__periodo=periodo, materiaasignada__estado_id=1, materiaasignada__status=True, status=True, materiaasignada__retiramateria=False)
                    url_vars += "&action=actastitulacion&idm=" + request.GET['idm'] + "&idgrupo=" + request.GET['idgrupo']
                    numerofilas = 25
                    materiatitulacion = materiatitulacion.order_by('materiaasignada__materia__asignaturamalla__malla__carrera__coordinacion__id', 'materiaasignada__materia__asignaturamalla__malla__carrera__id', 'materiaasignada__materia__asignaturamalla__asignatura__nombre', 'materiaasignada__materia__paralelo', 'materiaasignada__matricula__inscripcion__persona__apellido1', 'materiaasignada__matricula__inscripcion__persona__apellido2', 'materiaasignada__matricula__inscripcion__persona__nombres')
                    paging = MiPaginador(materiatitulacion, numerofilas)
                    p = 1

                    try:
                        paginasesion = 1
                        if 'paginador' in request.session:
                            paginasesion = int(request.session['paginador'])
                        if 'page' in request.GET:
                            p = int(request.GET['page'])
                            if p == 1:
                                numerofilasguiente = numerofilas
                            else:
                                numerofilasguiente = numerofilas * (p - 1)
                        else:
                            p = paginasesion
                            if p == 1:
                                numerofilasguiente = numerofilas
                            else:
                                numerofilasguiente = numerofilas * (p - 1)
                        try:
                            page = paging.page(p)
                        except:
                            p = 1
                        page = paging.page(p)
                    except:
                        page = paging.page(p)
                    request.session['paginador'] = p
                    data['paging'] = paging
                    data['numerofilasguiente'] = numerofilasguiente
                    data['numeropagina'] = p
                    data['rangospaging'] = paging.rangos_paginado(p)
                    data['page'] = page
                    hoy = datetime.now()
                    data['versioninfo'] = hoy.strftime('%Y%m%d_%H%M%S')
                    data['search'] = search if search else ""
                    data["url_vars"] = url_vars
                    data['listado'] = page.object_list
                    return render(request, "pro_planificacion/actastitulacion.html", data)
                except Exception as ex:
                    pass

            elif action == 'firmaractatitulacionindividual':
                try:
                    data = {}
                    data['titulacion'] = titulacion = MateriaTitulacion.objects.get(pk=request.GET['id'])
                    template = get_template("pro_planificacion/modal/firmaractatitulacionindividual.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'html': json_content})
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'firmaractatitulacionmasivo':
                try:
                    ids = None
                    if 'ids' in request.GET:
                        ids = request.GET['ids']

                    leadsselect = ids
                    data['listadoseleccion'] = leadsselect

                    template = get_template("pro_planificacion/modal/firmaractatitulacionmasivo.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": True, 'html': json_content})
                except Exception as ex:
                    mensaje = 'Intentelo más tarde'
                    return JsonResponse({"result": False, "mensaje": mensaje})

            elif action == 'detalleexamen':
                try:
                    data['materia'] = materia = Materia.objects.get(id=int(request.GET['materia']))
                    persona = Persona.objects.get(id=int(request.GET['profesor']))
                    data['examendetalles'] = detalle = materia.horarioexamendetalleprofesor(persona)
                    # data['tiene_examen_virtual'] = materia.tiene_examen_virtual(profesor)
                    # data['horariodetalle'] = horariodetalle = HorarioExamenDetalleAlumno.objects.filter(horarioexamendetalle_id=int(encrypt(request.GET['iddetalle'])))
                    # data['detalle'] = detalle = HorarioExamenDetalle.objects.get(pk=int(encrypt(request.GET['iddetalle'])))
                    # data['horario'] = detalle.horarioexamen
                    # for h in horariodetalle:
                    #     data['materia'] = h.materiaasignada.materia
                    #     break
                    data['fechaactual'] = datetime.now().date()
                    template = get_template("pro_planificacion/modal/examendetalle.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": True, 'html': json_content})
                except Exception as ex:
                    mensaje = 'Intentelo más tarde'
                    return JsonResponse({"result": False, "mensaje": mensaje})

            elif action == 'duplicar_silabo_periodo':
                try:
                    data['silaboactual'] = silabo = Silabo.objects.get(pk=int(encrypt(request.GET['id'])))

                    if silabo.materia.nivel.modalidad.id == 3:
                        periodos1 = Silabo.objects.filter(status=True,
                                                          programaanaliticoasignatura=silabo.programaanaliticoasignatura,
                                                          materia__asignaturamalla__id=silabo.materia.asignaturamalla.id,
                                                          materia__nivel__periodo__status=True).exclude(id=silabo.id, materia__nivel__periodo__tipo_id=3).order_by('-materia__nivel__periodo__inicio').values_list('materia__nivel__periodo_id',
                                                                                                                                                                                                                   'materia__nivel__periodo__nombre',
                                                                                                                                                                                                                   'materia__nivel__periodo__tipo__nombre',
                                                                                                                                                                                                                   'materia__nivel__periodo__inicio',
                                                                                                                                                                                                                   'materia__nivel__periodo__fin').distinct()
                        periodos2 = Silabo.objects.filter(status=True, materia__asignaturamalla__id__in=TablaEquivalenciaAsignaturas.objects.values_list('asignaturamalla_id').filter(asignaturamallasalto_id=silabo.materia.asignaturamalla.id, status=True)).exclude(pk=silabo.id).order_by('-materia__nivel__periodo__inicio').values_list('materia__nivel__periodo_id',
                                                                                                                                                                                                                                                                                                                                              'materia__nivel__periodo__nombre',
                                                                                                                                                                                                                                                                                                                                              'materia__nivel__periodo__tipo__nombre',
                                                                                                                                                                                                                                                                                                                                              'materia__nivel__periodo__inicio',
                                                                                                                                                                                                                                                                                                                                              'materia__nivel__periodo__fin').distinct()
                        periodos = periodos1 | periodos2
                    else:
                        periodos = Silabo.objects.filter(status=True,
                                                         programaanaliticoasignatura=silabo.programaanaliticoasignatura,
                                                         materia__asignaturamalla__id=silabo.materia.asignaturamalla.id,
                                                         materia__nivel__periodo__status=True).exclude(id=silabo.id, materia__nivel__periodo__tipo_id=3).order_by('-materia__nivel__periodo__inicio').values_list('materia__nivel__periodo_id',
                                                                                                                                                                                                                  'materia__nivel__periodo__nombre',
                                                                                                                                                                                                                  'materia__nivel__periodo__tipo__nombre',
                                                                                                                                                                                                                  'materia__nivel__periodo__inicio',
                                                                                                                                                                                                                  'materia__nivel__periodo__fin').distinct()
                    data['periodos'] = periodos
                    data['idsact'] = silabo.id
                    template = get_template("pro_planificacion/modal/importarsilaboperiodoall.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": True, 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})
                    pass

            elif action == 'planificacion_periodo_importar':
                lista = []
                try:
                    idsant = request.GET['idsant']
                    data['idsact'] = request.GET['idsact']
                    data['silabo_a'] = silabo = Silabo.objects.get(status=True, pk=idsant)
                    for semana in silabo.silabosemanal_set.filter(status=True).order_by('numsemana', 'fechainiciosemana'):
                        listabibliografiacomplementaria = []
                        for biblic in semana.detallesilabosemanalbibliografiadocente_set.filter(status=True):
                            listabibliografiacomplementaria.append([str(biblic.librokohaprogramaanaliticoasignatura)])
                        listabibliografiabasica = []
                        for biblib in semana.detallesilabosemanalbibliografia_set.filter(status=True):
                            listabibliografiabasica.append([str(biblib)])
                        lista.append([semana.silabo.id,
                                      semana.id,
                                      str(semana.fechainiciosemana.strftime("%Y/%m/%d")),
                                      str(semana.fechafinciosemana.strftime("%Y/%m/%d")),
                                      semana,
                                      listabibliografiabasica,
                                      listabibliografiacomplementaria,
                                      str(semana.objetivoaprendizaje),
                                      str(semana.enfoque),
                                      str(semana.recursos),
                                      str(semana.evaluacion),
                                      str(semana.numsemana)])
                    data['semanas'] = lista
                    template = get_template("pro_planificacion/modal/planificacion_silabo.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al guardar los datos."})

            elif action == 'listadogrupotitulacion':
                try:
                    data['title'] = 'Listado de grupo de actas de titulación'
                    search, url_vars = request.GET.get('s', ''), ''
                    materiatitulacion = GrupoFirma.objects.filter(firmagrupotitulacion__profesor=profesor, grupo__materia__nivel__periodo=periodo, status=True).distinct().order_by('grupo__materia__asignatura')
                    url_vars += "&action=listadogrupotitulacion&idm="
                    numerofilas = 25
                    paging = MiPaginador(materiatitulacion, numerofilas)
                    p = 1
                    try:
                        paginasesion = 1
                        if 'paginador' in request.session:
                            paginasesion = int(request.session['paginador'])
                        if 'page' in request.GET:
                            p = int(request.GET['page'])
                            if p == 1:
                                numerofilasguiente = numerofilas
                            else:
                                numerofilasguiente = numerofilas * (p - 1)
                        else:
                            p = paginasesion
                            if p == 1:
                                numerofilasguiente = numerofilas
                            else:
                                numerofilasguiente = numerofilas * (p - 1)
                        try:
                            page = paging.page(p)
                        except:
                            p = 1
                        page = paging.page(p)
                    except:
                        page = paging.page(p)
                    request.session['paginador'] = p
                    data['paging'] = paging
                    data['numerofilasguiente'] = numerofilasguiente
                    data['numeropagina'] = p
                    data['rangospaging'] = paging.rangos_paginado(p)
                    data['page'] = page
                    data['search'] = search if search else ""
                    data["url_vars"] = url_vars
                    data['listado'] = page.object_list
                    return render(request, "pro_planificacion/listadogrupotitulacion.html", data)
                except Exception as ex:
                    pass

            elif action == 'listadodisertacion':
                try:
                    data['title'] = 'Disertaciones de titulación'
                    filtro = Q(responsable=persona) & Q(status=True) & \
                             Q(grupoplanificacion__aulaplanificacion__turnoplanificacion__fechaplanificacion__periodo=periodo)
                    eDisertacionTribunales = DisertacionTribunalPlanificacion.objects.filter(filtro).distinct()
                    data['eDisertacionGrupos'] = eDisertacionGrupos = DisertacionGrupoPlanificacion.objects.filter(pk__in=eDisertacionTribunales.values_list('grupoplanificacion__id', flat=True)).distinct().order_by('aulaplanificacion__turnoplanificacion__fechaplanificacion__fecha', 'aulaplanificacion__turnoplanificacion__horainicio')
                    return render(request, "pro_planificacion/disertaciones/listado.html", data)
                except Exception as ex:
                    pass

            elif action == 'listadoppl':
                try:
                    if periodo.ocultarmateria:
                        materia = False
                    else:
                        materia = Materia.objects.filter(Q(status=True, nivel__visibledistributivomateria=True, profesormateria__profesor=profesor, profesormateria__activo=True, profesormateria__status=True), Q(Q(profesormateria__principal=True) | Q(modeloevaluativo_id__in=[27, 64])), Q(nivel__periodo=periodo, nivel__periodo__visible=True)).distinct().order_by('asignatura')
                    data['listadoalumnos'] = MateriaAsignada.objects.filter(materia__id__in=materia.values_list('id'), matricula__inscripcion__persona__ppl=True, status=True).order_by('materia__asignaturamalla__asignatura__nombre','materia__paralelo','matricula__inscripcion__persona__apellido1','matricula__inscripcion__persona__apellido2')
                    template = get_template("pro_planificacion/detalleppl.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": "ok", 'data': json_content})
                except Exception as ex:
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'verMiembroDisertacion':
                try:
                    data['eDisertacionGrupoPlanificacion'] = DisertacionGrupoPlanificacion.objects.get(id=int(request.GET['id']))
                    data['fechaactual'] = datetime.now().date()
                    template = get_template("pro_planificacion/modal/miembrodisertacion.html")
                    json_content = template.render(data)
                    return JsonResponse({"result": True, 'html': json_content})
                except Exception as ex:
                    mensaje = 'Intentelo más tarde'
                    return JsonResponse({"result": False, "message": mensaje})

            elif action == 'view_formato':
                try:
                    if 'id' in request.GET:
                        data['id'] = modalidad_id = int(encrypt(request.GET['id']))
                        data['listado'] = listado = FormatoPlanificacionRecurso.objects.filter(status=True, activo=True, modalidad__id__in=[modalidad_id]).order_by('descripcion').distinct()
                        data['cantidad'] = listado.count()
                        template = get_template("pro_planificacion/modal/viewformatos.html")
                        return JsonResponse({"result": True, 'data': template.render(data)})
                    else: raise NameError('Error al obtener los datos.')
                except Exception as ex:
                    transaction.set_rollback(True)
                    return JsonResponse({"result": "bad", "mensaje": u"Error al obtener los datos."})

            elif action == 'reportematriculados':
                try:
                    materia = Materia.objects.get(pk=int(encrypt(request.GET['materia'])))
                    notifi = Notificacion(cuerpo=f'Generación de reporte de matriculados',
                                          titulo='Reporte de matriculados en proceso',
                                          destinatario=persona,
                                          url='',
                                          prioridad=1, app_label='SGA',
                                          fecha_hora_visible=datetime.now() + timedelta(days=1), tipo=2,
                                          en_proceso=True)
                    notifi.save(request)
                    reportematriculadosenmateria(request=request, notiid=notifi.id,materiaid=materia.id).start()
                    return JsonResponse({"result": True,"mensaje": u"El reporte de matriculados se está realizando. Verifique su apartado de notificaciones después de unos minutos.",
                                         "btn_notificaciones": traerNotificaciones(request, data, persona)})
                except Exception as ex:
                    pass
            return HttpResponseRedirect(request.path)
        else:
            try:
                data['title'] = u'Planificación de tareas y actividades del profesor'
                # if PermisoPeriodo.objects.filter(periodo=periodo).exists():
                data['permiso'] = True
                data['periodo'] = periodo
                # else:
                #     data['permiso'] = False
                data['urlmodle'] = variable_valor('URL_MOODLE')
                if periodo.ocultarmateria:
                    materia = False
                else:
                    materia = Materia.objects.filter(Q(status=True, nivel__visibledistributivomateria=True, profesormateria__profesor=profesor, profesormateria__activo=True, profesormateria__status=True), Q(Q(profesormateria__principal=True) | Q(modeloevaluativo_id__in= [27, 64])), Q(nivel__periodo=periodo, nivel__periodo__visible=True)).distinct().order_by('asignatura')
                data['materias'] = materia
                # data['materias_r'] = materia = ProfesorMateria.objects.filter(tipoprofesor_id=6, profesor=profesor, materia__nivel__periodo=periodo, materia__nivel__periodo__visible=True).distinct().order_by('materia__asignatura')
                data['profesor'] = profesor
                data['persona'] = persona
                data['matriculacion_libre'] = MATRICULACION_LIBRE
                data['ver_silabo_malla'] = VER_SILABO_MALLA
                data['ver_plan_estudio'] = VER_PLAN_ESTUDIO
                # data['tiene_archivos'] = Materia.objects.filter(profesormateria__profesor=profesor, profesormateria__principal=True, nivel__periodo=periodo, nivel__periodo__visible=True, archivo__isnull=False).distinct()
                data['activarrecursos'] = True if periodo.id < 76 else False
                data['OCULTAR_EXAMEN_DOCENTE'] = variable_valor('OCULTAR_EXAMEN_DOCENTE')
                if periodo.clasificacion == 3:
                    return render(request, "pro_planificacion/viewadmision.html", data)
                else:
                    return render(request, "pro_planificacion/view.html", data)
            except Exception as ex:
                return HttpResponseRedirect(f"/?info=No puede acceder al módulo")


def aprendizajestemassilabo(request, lista_items1, idevaluacionaprendizaje, idsilabosemanal, ordenado):
    if lista_items1:
        if EvaluacionAprendizajeSilaboSemanal.objects.filter(evaluacionaprendizaje_id=idevaluacionaprendizaje, silabosemanal_id=idsilabosemanal, tipoactividadsemanal=1, status=True):
            evaluaciontema = EvaluacionAprendizajeSilaboSemanal.objects.get(evaluacionaprendizaje_id=idevaluacionaprendizaje, silabosemanal_id=idsilabosemanal, tipoactividadsemanal=1, status=True)
        else:
            evaluaciontema = EvaluacionAprendizajeSilaboSemanal(evaluacionaprendizaje_id=idevaluacionaprendizaje, silabosemanal_id=idsilabosemanal, tipoactividadsemanal=1, numactividad=ordenado)
            evaluaciontema.save(request)
        # for lista in lista_items1:
        if not EvaluacionAprendizajeTema.objects.filter(evaluacion=evaluaciontema, temasemanal_id=lista_items1, status=True):
            ingresoaprendizaje = EvaluacionAprendizajeTema(evaluacion=evaluaciontema, temasemanal_id=lista_items1)
            ingresoaprendizaje.save(request)


def aprendizajestemas(request, lista_items1, idevaluacionaprendizaje, idsilabosemanal):
    # Para planificacion de los temas de los silabos en cada actividad
    # lista_items1 = json.loads(request.POST['lista_items1'])
    if lista_items1:
        if EvaluacionAprendizajeSilaboSemanal.objects.filter(evaluacionaprendizaje_id=idevaluacionaprendizaje, silabosemanal_id=idsilabosemanal, tipoactividadsemanal=2, status=True):
            evaluaciontema = EvaluacionAprendizajeSilaboSemanal.objects.get(evaluacionaprendizaje_id=idevaluacionaprendizaje, silabosemanal_id=idsilabosemanal, tipoactividadsemanal=2, status=True)
        else:
            evaluaciontema = EvaluacionAprendizajeSilaboSemanal(evaluacionaprendizaje_id=idevaluacionaprendizaje, silabosemanal_id=idsilabosemanal, tipoactividadsemanal=2)
            evaluaciontema.save(request)

        consultaaprendizaje = EvaluacionAprendizajeTema.objects.filter(evaluacion__silabosemanal_id=idsilabosemanal, evaluacion=evaluaciontema, evaluacion__tipoactividadsemanal=2, status=True).exclude(temasemanal_id__in=lista_items1)
        consultaaprendizaje.delete()

        for lista in lista_items1:
            if not EvaluacionAprendizajeTema.objects.filter(evaluacion=evaluaciontema, temasemanal_id=lista, status=True):
                ingresoaprendizaje = EvaluacionAprendizajeTema(evaluacion=evaluaciontema, temasemanal_id=lista)
                ingresoaprendizaje.save(request)
    else:
        if EvaluacionAprendizajeSilaboSemanal.objects.filter(evaluacionaprendizaje_id=idevaluacionaprendizaje, silabosemanal_id=idsilabosemanal, tipoactividadsemanal=2, status=True):
            evaluaciontema = EvaluacionAprendizajeSilaboSemanal.objects.get(evaluacionaprendizaje_id=idevaluacionaprendizaje, silabosemanal_id=idsilabosemanal, tipoactividadsemanal=2, status=True)
            evaluaciontema.delete()


def generar_archivo_guia_practica(practica):
    try:
        data = {}

        if not practica.gpinstruccion_set.filter(status=True):
            raise NameError('FALTA INGRESAR PROCEDIMIENTOS / INSTRUCCIONES / ACTIVIDADES A DESARROLLAR.')

        carrera, periodo = practica.silabosemanal.silabo.materia.asignaturamalla.malla.carrera, practica.silabosemanal.silabo.materia.nivel.periodo
        data['listadoobjetivo'] = practica.gpobjetivo_set.filter(status=True).order_by('id')
        data['listadobasica'] = practica.gpbibliografiabasica_set.filter(status=True).order_by('id')
        data['listadocomplementaria'] = practica.gpbibliografiacomplementaria_set.filter(status=True).order_by('id')
        data['listadovirtual'] = practica.gpbibliografiavirtual_set.filter(status=True).order_by('id')
        data['listadetemas'] = practica.gptemas_set.filter(status=True).order_by('tema__orden')
        data['listadearticulos'] = practica.gparticulo_set.filter(status=True).order_by('id')
        data['librosodilo'] = practica.gplibrosodilo_set.filter(status=True)
        data['practicas'] = GPGuiaPracticaSemanal.objects.filter(status=True, id=practica.id)
        data['instrucciones'] = practica.gpinstruccion_set.filter(status=True)
        if director := carrera.coordinador(periodo, practica.silabosemanal.silabo.profesor.coordinacion.sede):
            director = director.persona.nombre_completo_inverso()
        data['director'] = director
        qrname = 'qr_practica_' + str(encrypt(practica.id))
        output_folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'guiapractica', 'qr')
        os.makedirs(output_folder, exist_ok=True)
        rutapdf = os.path.join(os.path.join(SITE_STORAGE, 'media', 'qrcode', 'guiapractica', '')) + qrname + '.pdf'
        rutaimg = output_folder + os.sep + qrname + '.png'
        # rutaimg = folder + qrname + '.png'

        try:
            os.path.isfile(rutapdf) and os.remove(rutapdf)
        except Exception as ex:
            pass

        HOST = 'http://127.0.0.1:8000' if DEBUG else 'https://sga.unemi.edu.ec'
        url = pyqrcode.create(f'{HOST}//media/qrcode/guiapractica/' + qrname + '.pdf')
        imageqr = url.png(output_folder + os.sep + qrname + '.png', 16, '#000000')
        imagenqr = f'{HOST}{MEDIA_URL}qrcode/guiapractica/qr/{qrname}.png'

        profesorteoria = practica.silabosemanal.silabo.materia.profesor_principal()
        data['profesorteoria'] = profesorteoria
        if practica.usuario_creacion:
            data['profesor'] = practica.usuario_creacion.persona_set.first()
        data['profesorespractica'] = practica.silabosemanal.silabo.materia.profesormateria_set.filter(activo=True, status=True).exclude(tipoprofesor__in=[1, 3, 9, 11, 12, 10, 7, 14, 22])
        data['listadoactividades'] = listadoactividades = EvaluacionAprendizajeTema.objects.filter(evaluacion__evaluacionaprendizaje_id=4, evaluacion__silabosemanal=practica.silabosemanal, evaluacion__status=True, evaluacion__silabosemanal__status=True, evaluacion__evaluacionaprendizaje__status=True, status=True).order_by('temasemanal').distinct('temasemanal')
        data['resultadosaprendiz'] = ContenidoResultadoProgramaAnalitico.objects.filter(unidadresultadoprogramaanalitico__in=listadoactividades.values_list('temasemanal__temaunidadresultadoprogramaanalitico__unidadresultadoprogramaanalitico', flat=True)).distinct().order_by('orden')
        if conviert_html_to_pdfsaveqrguiapractica('../templates/pro_planificacion/practicaqr_pdf_v2.html', {'pagesize': 'A4', 'data': data, 'qrname': imagenqr}, qrname + '.pdf'):
            os.remove(rutaimg)
            practica.codigoqr = True
            practica.save()

        return True, f'qrcode/guiapractica/' + qrname + '.pdf'
    except Exception as ex:
        return False, ex.__str__()