# coding=utf-8
import os
import sys
import zipfile
from datetime import *
from decimal import Decimal, ROUND_HALF_UP
from itertools import chain
import time
from datetime import datetime
from ckeditor_uploader.fields import RichTextUploadingField
from dateutil.relativedelta import relativedelta
from django.contrib.contenttypes.models import ContentType
from django.db import models, connection, connections
from django.db.models import Q, Sum, F, FloatField
from django.contrib.auth.models import User, Group
from django.db.models.functions import Coalesce
from django.core.cache import cache
from settings import DIAS_MODIFICAR_ACTIVOS, COMISION_BANCO_PACIFICO, \
    PUESTO_ACTIVO_ID, COBRA_COMISION_BANCO, SITE_STORAGE, IVA, RUBRO_ARANCEL, RUBRO_MATRICULA, DEBUG, \
    JR_JAVA_COMMAND, JR_RUN, DATABASES
from sga.funciones import variable_valor, ModeloBase, null_to_decimal, null_to_numeric, restar_hora, sumar_hora, \
    convertir_fecha_invertida_hora, dia_semana_ennumero_fecha, convertir_fecha_hora_invertida, \
    remover_caracteres_especiales_unicode, generar_nombre, resetear_clave_edcon
from sga.models import Persona, ArticuloInvestigacion, InstitucionEducacionSuperior, \
    AreaConocimientoTitulacion, SubAreaConocimientoTitulacion, SubAreaEspecificaConocimientoTitulacion, Pais, Matricula, \
    RecordAcademico, RevistaInvestigacion, LineaInvestigacion, SubLineaInvestigacion, ProyectosInvestigacion, \
    ProyectoInvestigacionExterno, Profesor, Administrativo, Inscripcion, Modulo, NivelTitulacion, AreaConocimiento, \
    MESES_CHOICES, Externo
from core.choices.models.general import MY_TIPOS_IDENTIFICACION, MY_TIPO_PARTICIPANTE, MY_CUENTAS_CORREOS, \
    MY_TIPO_PARTICIPANTE_INSTITUCION, MY_ESTADO_REVISION_ARCHIVO, MY_ESTADO_PUBLICACION_PON, MY_TIPO_MUNDO_CRAI
from core.choices.models.sagest import (MY_ESTADO_ACTIVO, MY_ESTADO_PARTES, MY_TIPO_ZONA, MY_TIPO_MOVIMIENTO_ACTIVO, \
    MY_ESTADOS_COMPROBANTES, MY_TIPO_REGISTRO_COMPROBANTE, MY_TIPO_COMPROBANTE, MY_ESTADO_ACTA, MY_TIPO_FIRMA, \
    MY_TIPO_INDICADOR, MY_TIPO_META, MY_TIPO_MANTENIMIENTO, MY_SEMAFORO_VIDAUTIL, MY_ORIGEN_REGISTRO, MY_SINO, \
    MY_AFECTATOTAL, MY_ESTRUCTURA_ACTIVO, MY_CLASE_BIEN, MY_ESTADO_CONSTATACION, MY_ESTADO_PROCESO, MY_VIDA_UTIL, \
    MY_TIPO_SOLICITUD_TRASPASO_BAJA, MY_TIPO_RUBRO, MY_SUB_TIPO_RUBRO, MY_TIPO_TRASPASO, MY_TIPO_REGISTRO_TRASLADO, \
    MY_ESTADO_ROL, MY_TIPO_RUBRO_ROL, MY_TIPO_CAMPO, MY_ESTADO_IMPORTACION, MY_EXCEPCIONES_GASTOS_PERSONALES, \
    MY_ESTADO_COMPROBANTE, MY_TIPO_ACTIVIDAD_PRESUPUESTO, MY_TIPO_ANEXOS_RECURSOS, MY_TIPO_PANILLA, \
    MY_ESTADO_TRAMITE_PAGO, MY_TIPO_MARCADAS_JORNADA, MY_ESTADO_COMPROMISO, MY_ESTADO_CERTIFICACION, MY_ESTADO_ITEM, \
    MY_TIPO_CATALOGO, MY_ESTADO_REFORMA, MY_TIPO_PAC, MY_ESTADO_PAC, MY_TIPO_REFORMA, MY_TIPO_SISTEMA, \
    MY_TIPO_ACTIVIDAD_BITACORA, MY_TIPO_CAPACITACION, MY_ESTADO_CAPACITACION, MY_TIPO_GRADO, MY_TIPO_PARTIDA, \
    MY_TIPO_SOLICITUD_PUBLICACION, MY_TIPO_REGISTRO_PERSONA, MY_TIPO_SOLICITUD_PUBLICACION_TH, \
    MY_TIPO_PROYECTO_ARTICULO, MY_TIPO_COMPROMISO_PAGO, MY_TIPO_GARANTE, MY_GARANTE_RELACION_DEPENDENCIA, \
    MY_GARANTE_PERSONA_JURIDICA, MY_TIPO_PRODUCTO_PAC, MY_TIPO_PRODUCTO_PAC_INGRESO, MY_TIPO_ANEXO_INFORME, \
    MY_TIPO_ARCHIVO, MY_TIPO_MARCADA, MY_ESTADO_TRASPASO, MY_ESTADO_CIERRE, MY_ESTADO_INVENTARIO, \
    MY_ESTADO_CONSTATACION_AT, MY_ESTADO_MOVIMIENTO, MY_ESTADO_UBICACION, MY_ESTADO_FUNCIONAMIENTO, MY_ESTADO_USO_AT, \
    MY_ACCION_MODULO, MY_APLICA_GRATUIDAD_INSCRITO, MY_PRESTAMO_ACTIVOS_OPERACIONES, \
    MY_AUDITORIA_PRESTAMO_ACTIVOS_OPERACIONES, MY_ESTADO_SOLICITUD_TRASPASO, MY_QUIEN_SOLICITA_TRASPASO, \
    MY_TIPO_REGISTRO_ACTIVOSTECNOLOGICOS, MY_TIPO_RELACION_LABORAL, MY_ESTADO_PAZ_SALVO, MY_MOTIVO_SALIDA, \
    MY_ESTADO_HISTORIAL_PS, MY_ESTADO_TRAMITE_PAGO_PAZ_SALVO, MY_TIPO_PERMISO, ESTADO_REVISION_EVIDENCIA, \
    ESTADO_SEGUIMIENTO_POA, MY_ESTADO_BODEGA_VIRTUAL,TIPO_MARCAJE, \
    MY_ESTADO_SOLICITUD_EQUIPO_COMPUTO, MY_ESTADO_EQUIPO_COMPUTO, MY_TIPO_DOCUMENTO_EQUIPO_COMPUTO, \
    ACCION_HISTORIAL_EVIDENCIA, MY_TIPO_REGISTRO_ACTIVO_FIJO, MY_ESTADO_FIRMA_INFORME_BAJA, \
    MY_ESTADO_FIRMA_INFORME_BAJA_HISTORIAL, ESTADO_JUSTIFICACION_PROCESO, NIVEL_GESTION)
from sga.tasks import conectar_cuenta
import math
from sga.funciones import notificacion4, notificacion2
from sga.tasks import send_html_mail
from bd.models import IncidenciaSCRUM
import warnings
warnings.filterwarnings('ignore', message='Unverified HTTPS request')

unicode =str
def sagest_list_classes():
    listclass = []
    current_module = sys.modules[__name__]
    for key in dir(current_module):
        if isinstance(getattr(current_module, key), type):
            try:
                a = eval(key + '.objects')
                listclass.append(key)
            except:
                pass
    return listclass


def secuencia_codigo(opcion):
    anio = datetime.now().year
    if not CodigoTabla.objects.filter(opcion=opcion, anio=anio).exists():
        codigotabla = CodigoTabla(opcion=opcion,
                                  anio=anio)
        codigotabla.save()
        codigo = codigotabla.codigo
        codigotabla.codigo += 1
        codigotabla.save()

    else:
        codigotabla = CodigoTabla.objects.get(opcion=opcion, anio=anio)
        codigo = codigotabla.codigo
        codigotabla.codigo += 1
        codigotabla.save()
    return codigo


class Perms(models.Model):
    class Meta:
        permissions = (
            ("puede_ingresar_compras", "Ingresar compras de inventario"),
            ("puede_ingresar_sumistro", "Ingresar Suministro"),
            ("puede_dar_salida_inventario", "Modificar salidas de inventario"),
            ("puede_dar_salida_suministro", "Modificar salidas de Suministro"),
            ("puede_modificar_proveedor", "Modificar proveedor de insumos"),
            ("puede_modificar_productos", "Modificar productos"),
            ("puede_modificar_periodo", "Modifica periodo"),
            ("puede_modificar_evaluacionriesgo", "Modificar evaluaciones de riesgo"),
            ("puede_modificar_planificacionriesgo", "Modificar planificaciones de riesgo"),
            ("puede_modificar_activos", "Gestionar activos"),
            ("puede_modificar_traspasos", "Modificar traspasos de activos"),
            ("puede_modificar_traslados", "Modificar traslados de activos a mantenimiento"),
            ("puede_modificar_bajas", "Modificar bajas de activos"),
            ("puede_modificar_constataciones", "Modificar constataciones de activos"),
            ("puede_modificar_depreciacion", "Modificar activos"),
            ("puede_modificar_actaentrega", "Modificar actas de entrega de activos"),
            ("puede_modificar_importacion", "Modificar importacion de activos"),
            ("puede_modificar_catalogo", "Modificar catalogo de activos"),
            ("puede_modificar_taller", "Modificar taller de mantenimiento de activos"),
            ("puede_modificar_tarjeta", "Modificar tarjeta de control de mantenimiento de activos"),
            ("puede_modificar_ubicacion", "Modificar ubicacion de activos"),
            ("puede_anular_documentos_bodega", "Anular documentos de bodega"),
            ("puede_anular_facturas", "Anular Facturas"),
            ("puede_modificar_facturas", "Modificar Facturas"),
            ("puede_adicionar_rubro", "Adicionar rubros"),
            ("puede_modificar_rubro", "Modificar rubros"),
            ("puede_modificar_presupuesto", "Puede Modificar presupuesto"),
            ("puede_modificar_comprobante_recaudacion", "Puede Modificar Comprobante Recaudacion"),
            ("puede_subir_archivos_presupuesto", "Subir Archivo presupuesto"),
            ("puede_modificar_planilla_presupuesto", "Puede Modificar planilla presupuesto"),
            ("puede_modificar_cliente_externo", "Puede Modificar clientes externos"),
            ("puede_iniciar_tramite_pago", "Puede Iniciar tramite de pago"),
            ("puede_adjuntar_certificacion_tramite_pago", "Puede adjuntar certificacion a tramite de pago"),
            ("puede_crear_retenciones_tramite_pago", "Puede crear retenciones a tramite de pago"),
            ("puede_adjuntar_retenciones_tramite_pago", "Puede adjuntar retenciones a tramite de pago"),
            ("puede_aprobar_tramite_pago_financiero", "Puede aprobar tramite pago - financiero"),
            ("puede_aprobar_tramite_pago_rectorado", "Puede aprobar tramite pago - rectorado"),
            ("puede_marcar_devengado_tramite_pago", "Puede marcar devengado tramite de pago"),
            ("puede_marcar_pagado_tramite_pago", "Puede marcar pagado tramite de pago"),
            ("puede_marcar_acreditado_tramite_pago", "Puede marcar acreditado tramite de pago"),
            ("puede_revisar_experto_presupuesto", "Puede revisar experto presupuesto"),
            ("puede_revisar_experto_liquidacion", "Puede revisar experto liquidacion"),
            ("puede_revisar_experto_tesoreria", "Puede revisar experto tesoreria"),
            ("puede_revisar_experto_contabilidad", "Puede revisar experto contabilidad"),
            ("puede_revisar presupuesto", "Puede revisar preupuesto"),
            ("puede_revisar_liquidacion", "Puede revisar liquidacion"),
            ("puede_revisar_tesoreria", "Puede revisar tesoreria"),
            ("puede_revisar_contabilidad", "Puede revisar contabilidad"),
            ("puede_modificar_cierre_caja", "Puede modificar cierre de caja"),
            ("puede_modificar_fecha_comprobante_recaudacion", "Puede modificar fecha comprobante recaudaci√≥n"),
            ("puede_devengar", "Puede devengar"),
            ("puede_modificar_pac_administrativo", "Puede modificar pac administrativo"),
            ("puede_modificar_pac_tesoreria", "Puede modificar pac tesoreria"),
            ("puede_adicionar_comprobante_pago", "Adicionar comprobante"),
            ("puede_modificar_hoja_vida", "Puede modificar hoja de vida"),
            ("puede_modificar_accion_personal", "Puede modificar hoja de vida Accion Personal"),
            ("puede_modificar_contrato", "Puede modificar hoja de vida Contrato"),
            ("puede_modificar_capacitacion", "Puede modificar hoja de vida Capacitacion"),
            ("puede_verificar_horasextra", "Puede verificar horas extra"),
            ("puede_aprobar_horasextra", "Puede aprobar horas extra"),
            ("ver_permisos_auth", "Puede ver permisos AUTH"),
            ("ver_permisos_salud_ocupa", "Puede ver permisos Salud Ocupacional"),
            ("solicitud_vehiculo_administrativo", "Solicitud Vehiculo Administrativo"),
            ("solicitud_vehiculo_academico", "Solicitud Vehiculo Academico"),
            ("solicitud_vehiculo_rectorado", "Solicitud Vehiculo Rectorado"),
            ("puede_ingresar_configurar_helpdesk", "Configuracion Help Desk"),
            ("puede_logistica_ingresar_incidente", "Adicionar incidente Help Desk"),
            ("puede_adicionar_incidente", "Adicionar incidente los de logistica"),
            ("puede_ver_kardex", "Visualizacion Kardex"),
            ("puede_modificar_marcadas", "Puede modificar marcadas"),
            ("puede_modificar_resoluciones", "Puede modificar resoluciones"),
            ("puede_modificar_mantenimientos", "Puede modificar mantenimientos"),
            ("puede_consulta_activos", "Puede consultar activos"),
            ("puede_agregar_marcada_log", "Puede agregar marcada del log de marcada"),
            ("es_biblioteca", "Es biblioteca CRAI"),
            ("es_docencia", "Es docencia CRAI"),
            ("es_investigacion", "Es investigacion CRAI"),
            ("es_cultural", "Es Cultural CRAI"),
            ("consultaactivo", "Consultar Activos"),
            ("puede_administrar_solicitudes", "Puede Administrar las Solicitudes"),
            ("puede_administrar_solicitudes_servicios", "Puede Administrar las Solicitudes Servicios Informaticos"),
            ("puede_cargar_universidades_excel", "Puede Cargar Excel Universidades"),
            ("puede_crear_marcada", "Puede Crear Marcada"),
            ("puede_gestionar_plantilla", "Puede Gestionar Plantilla"),
            ("puede_reverso_rubro", "Puede reverso rubro"),
            ("puede_gestionar_participacion_congresos", "Puede Gestionar Participacion Congresos"),
            ("puede_gestionar_informeactivo_tecnologico", "Puede Editar Informe Activo Tecnol√≥gico"),
            ("puede_gestionar_informeactivo_fijo", "Puede Editar Informe Activo Fijo"),
            ("puede_administrar_solicitud_productos", "Puede Administrar Solicitud de Productos"),
            ("puede_aprobar_solicitud_productos", "Puede Aprobar Solicitud de Productos"),
            ("puede_importar_marcada_mi_personal", "Puede importar marcada desde mi personal"),
            ("puede_aprobar_justificacion_marcada_director", "Puede aprobar justificacion marcada director"),
            ("puede_cerrar_justificacion_marcada_analista", "Puede cerrar justificacion marcada analista"),
            ("puede_gestionar_comprobantes_pago", "Puede gestionar comprobantes de pagos"),
            ("puede_validar_comprobante_pago","Puede validar los comprobantes de pagos"),
            ("puede_recaudar_comprobante_pago","Puede recaudar los comprobantes de pagos"),
            ("puede_reverso_liquidacion","Puede revertir liquidacion de rubro"),
            ("puede_gestionar_check_baja","Puede gestionar proceso de baja"),
            ("puede_gestionar_constataciones","Puede gestionar constataciones"),
            ("puede_aplazar_bitacora","Puede aplazar bitacora"),
            ("puede_gestionar_paz_salvo","Puede gestionar paz y salvo"),
            ("puede_gestionar_servicio","Puede gestionar servicio"),
            ("puede_gestionar_marcadas_uath","Puede gestionar marcadas uath"),
            ("puede_subirinformebaja_firmado","Puede subir informe de baja firmado"),
            ("puede_eliminar_informebaja","Puede eliminar informe de baja"),
            ("puede_editar_rubro_posgrado","Puede editar rubros de posgrado"),
            ("puede_gestionar_autoridad_informe_baja","Puede gestionar autoridad informe baja"),
            ("puede_gestionar_site_web", "Puede gestionar sitio web"),
            ("puede_gestionar_sanciones_th", "Puede gestionar sanciones"),
            ("puede_gestionar_audiencia", "Puede gestionar audiencia"),
            ("puede_generar_informes_sanciones", "Puede generar informes de sanciones"),
        )

ESTADO_ACTIVO = MY_ESTADO_ACTIVO
ESTADO_PARTES = MY_ESTADO_PARTES
TIPO_ZONA = MY_TIPO_ZONA
TIPO_MOVIMIENTO_ACTIVO = MY_TIPO_MOVIMIENTO_ACTIVO
ESTADOS_COMPROBANTES = MY_ESTADOS_COMPROBANTES
TIPO_REGISTRO_COMPROBANTE = MY_TIPO_REGISTRO_COMPROBANTE
TIPO_COMPROBANTE = MY_TIPO_COMPROBANTE
ESTADO_ACTA = MY_ESTADO_ACTA
TIPO_FIRMA = MY_TIPO_FIRMA
TIPO_INDICADOR = MY_TIPO_INDICADOR
TIPO_META = MY_TIPO_META
TIPO_MANTENIMIENTO = MY_TIPO_MANTENIMIENTO
SEMAFORO_VIDAUTIL = MY_SEMAFORO_VIDAUTIL
ORIGEN_REGISTRO = MY_ORIGEN_REGISTRO
SINO = MY_SINO
AFECTATOTAL = MY_AFECTATOTAL
ESTRUCTURA_ACTIVO = MY_ESTRUCTURA_ACTIVO
CLASE_BIEN = MY_CLASE_BIEN
ESTADO_CONSTATACION = MY_ESTADO_CONSTATACION
ESTADO_PROCESO = MY_ESTADO_PROCESO
VIDA_UTIL = MY_VIDA_UTIL
TIPO_SOLICITUD_TRASPASO_BAJA = MY_TIPO_SOLICITUD_TRASPASO_BAJA
TIPO_RUBRO = MY_TIPO_RUBRO
SUB_TIPO_RUBRO = MY_SUB_TIPO_RUBRO
TIPO_TRASPASO = MY_TIPO_TRASPASO
TIPO_REGISTRO_TRASLADO = MY_TIPO_REGISTRO_TRASLADO
ESTADO_ROL = MY_ESTADO_ROL
TIPO_RUBRO_ROL = MY_TIPO_RUBRO_ROL
TIPO_CAMPO = MY_TIPO_CAMPO
ESTADO_IMPORTACION = MY_ESTADO_IMPORTACION
EXCEPCIONES_GASTOS_PERSONALES = MY_EXCEPCIONES_GASTOS_PERSONALES
ESTADO_COMPROBANTE = MY_ESTADO_COMPROBANTE
TIPO_ACTIVIDAD_PRESUPUESTO = MY_TIPO_ACTIVIDAD_PRESUPUESTO
TIPO_ANEXOS_RECURSOS = MY_TIPO_ANEXOS_RECURSOS
TIPO_PANILLA = MY_TIPO_PANILLA
ESTADO_TRAMITE_PAGO = MY_ESTADO_TRAMITE_PAGO
TIPO_MARCADAS_JORNADA = MY_TIPO_MARCADAS_JORNADA
ESTADO_COMPROMISO = MY_ESTADO_COMPROMISO
ESTADO_CERTIFICACION = MY_ESTADO_CERTIFICACION
ESTADO_ITEM = MY_ESTADO_ITEM
TIPO_CATALOGO = MY_TIPO_CATALOGO
ESTADO_REFORMA = MY_ESTADO_REFORMA
TIPO_PAC = MY_TIPO_PAC
ESTADO_PAC = MY_ESTADO_PAC
TIPO_REFORMA = MY_TIPO_REFORMA
TIPO_SISTEMA = MY_TIPO_SISTEMA
TIPO_ACTIVIDAD_BITACORA = MY_TIPO_ACTIVIDAD_BITACORA
TIPO_CAPACITACION = MY_TIPO_CAPACITACION
ESTADO_CAPACITACION = MY_ESTADO_CAPACITACION
TIPO_GRADO = MY_TIPO_GRADO
TIPO_PARTIDA = MY_TIPO_PARTIDA
TIPO_SOLICITUD_PUBLICACION = MY_TIPO_SOLICITUD_PUBLICACION
TIPO_REGISTRO_PERSONA = MY_TIPO_REGISTRO_PERSONA
TIPO_SOLICITUD_PUBLICACION_TH = MY_TIPO_SOLICITUD_PUBLICACION_TH
TIPO_PROYECTO_ARTICULO = MY_TIPO_PROYECTO_ARTICULO
TIPO_COMPROMISO_PAGO = MY_TIPO_COMPROMISO_PAGO
TIPO_GARANTE = MY_TIPO_GARANTE
GARANTE_RELACION_DEPENDENCIA = MY_GARANTE_RELACION_DEPENDENCIA
GARANTE_PERSONA_JURIDICA = MY_GARANTE_PERSONA_JURIDICA
TIPO_PRODUCTO_PAC = MY_TIPO_PRODUCTO_PAC
TIPO_PRODUCTO_PAC_INGRESO = MY_TIPO_PRODUCTO_PAC_INGRESO
TIPO_ANEXO_INFORME = MY_TIPO_ANEXO_INFORME
TIPO_ARCHIVO = MY_TIPO_ARCHIVO
TIPO_MARCADA = MY_TIPO_MARCADA
ESTADO_TRASPASO = MY_ESTADO_TRASPASO
ESTADO_CIERRE = MY_ESTADO_CIERRE
ESTADO_INVENTARIO = MY_ESTADO_INVENTARIO
ESTADO_CONSTATACION_AT = MY_ESTADO_CONSTATACION_AT
ESTADO_MOVIMIENTO = MY_ESTADO_MOVIMIENTO
ESTADO_UBICACION = MY_ESTADO_UBICACION
ESTADO_FUNCIONAMIENTO = MY_ESTADO_FUNCIONAMIENTO
ESTADO_USO_AT = MY_ESTADO_USO_AT
ACCION_MODULO = MY_ACCION_MODULO
APLICA_GRATUIDAD_INSCRITO = MY_APLICA_GRATUIDAD_INSCRITO
PRESTAMO_ACTIVOS_OPERACIONES = MY_PRESTAMO_ACTIVOS_OPERACIONES
AUDITORIA_PRESTAMO_ACTIVOS_OPERACIONES = MY_AUDITORIA_PRESTAMO_ACTIVOS_OPERACIONES
ESTADO_SOLICITUD_TRASPASO = MY_ESTADO_SOLICITUD_TRASPASO
QUIEN_SOLICITA_TRASPASO = MY_QUIEN_SOLICITA_TRASPASO
TIPO_REGISTRO_ACTIVOSTECNOLOGICOS = MY_TIPO_REGISTRO_ACTIVOSTECNOLOGICOS
TIPO_RELACION_LABORAL = MY_TIPO_RELACION_LABORAL
ESTADO_PAZ_SALVO = MY_ESTADO_PAZ_SALVO
ESTADO_TRAMITE_PAGO_PAZ_SALVO = MY_ESTADO_TRAMITE_PAGO_PAZ_SALVO
MOTIVO_SALIDA = MY_MOTIVO_SALIDA
ESTADO_HISTORIAL_PS = MY_ESTADO_HISTORIAL_PS

TIPO_PROCESO_TH = (
    (1, u"GOBERNANTE"),
    (2, u"SUSTANTIVO"),
    (3, u"ADJETIVO"),
)

class Proveedor(ModeloBase):
    nombre = models.CharField(default='', max_length=300)
    alias = models.CharField(default='', max_length=100, blank=True, null=True)
    identificacion = models.CharField(default='', max_length=200, blank=True, null=True)
    direccion = models.CharField(default='', max_length=300, blank=True, null=True)
    pais = models.ForeignKey('sga.Pais', max_length=100, blank=True, null=True, on_delete=models.CASCADE)
    telefono = models.CharField(default='', max_length=100, blank=True, null=True)
    celular = models.CharField(default='', max_length=100, blank=True, null=True)
    email = models.CharField(default='', max_length=200, blank=True, null=True)
    fax = models.CharField(default='', max_length=100, blank=True, null=True)
    autorizacion = models.CharField(max_length=250, blank=True, null=True)
    fechacaducidad = models.DateField(default=None, blank=True, null=True)
    tipoidentificacion = models.IntegerField(default=0, choices=MY_TIPOS_IDENTIFICACION, verbose_name=u'Tipo de Identificaci√≥n')

    def __str__(self):
        return self.nombre

    def emailpersonal(self):
        lista = []
        if self.email:
            lista.append(self.email)
        return lista

    class Meta:
        verbose_name = u'Proveedor'
        verbose_name_plural = u'Proveedores'
        ordering = ('nombre',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return Proveedor.objects.filter(
            Q(nombre__icontains=q) | Q(alias__icontains=q) | Q(identificacion__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return self.nombre_simple() + ' - ' + self.identificacion

    def flexbox_alias(self):
        return [self.id, self.nombre_simple()]

    def nombre_simple(self):
        return "%s" % self.nombre

    def nombre_identificacion(self):
        return "%s - %s" % (self.identificacion, self.nombre)

    def valor_compras(self):
        valor = 0
        for compra in self.ingresoproducto_set.all():
            valor += compra.valor_compra()
        return valor

    def en_uso(self):
        return self.ingresoproducto_set.exists()

    def lista_telefonos(self):
        lista = []
        if self.telefono:
            lista.append(self.telefono)
        if self.celular:
            lista.append(self.celular)
        if self.fax:
            lista.append(self.fax)
        return lista

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.alias = self.alias.upper()
        self.identificacion = self.identificacion.upper()
        self.direccion = self.direccion.upper()
        self.telefono = self.telefono.upper()
        self.celular = self.celular.upper()
        self.fax = self.fax.upper()
        super(Proveedor, self).save(*args, **kwargs)


class TipoProducto(ModeloBase):
    nombre = models.CharField(default='', max_length=300)

    def __str__(self):
        return self.nombre

    def nombre_completo(self):
        return self.nombre

    class Meta:
        verbose_name = u'Tipo de Producto'
        verbose_name_plural = u'Tipos de Productos'
        ordering = ('nombre',)

    def tiene_productos_asociados(self):
        return self.producto_set.exists()

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return TipoProducto.objects.filter(nombre__icontains=q).distinct()[:limit]

    def flexbox_repr(self):
        return "%s" % self.nombre

    def flexbox_alias(self):
        return [self.nombre]

    def valor_ventas(self):
        return null_to_decimal(Producto.objects.filter(tipoproducto=self, detallefactura__isnull=False,
                                                       detallefactura__factura__valida=True).distinct().aggregate(
            suma=Sum('detallefactura__valor'))['suma'], 2)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(TipoProducto, self).save(*args, **kwargs)


class UnidadMedida(ModeloBase):
    nombre = models.CharField(default='', max_length=20)

    class Meta:
        verbose_name = u"Unidad de Medida"
        verbose_name_plural = u"Unidades de Medida"
        ordering = ('nombre',)

    def __str__(self):
        return self.nombre

    def campos(self):
        return self.nombre

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(UnidadMedida, self).save(*args, **kwargs)


NATURALEZA_CUENTA = (
    (1, 'DEUDORA'),
    (2, 'ACREEDORA')
)


class TipoCuentaContable(ModeloBase):
    nombre = models.CharField(max_length=200, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = 'Tipo de Cuenta Contable'
        verbose_name_plural = 'Tipo de Cuentas Contables'

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(TipoCuentaContable, self).save(*args, **kwargs)


class Partida(ModeloBase):
    codigo = models.CharField(max_length=30, verbose_name=u"Codigo")
    nombre = models.CharField(max_length=300, verbose_name=u"Partida")
    tipo = models.IntegerField(choices=TIPO_PARTIDA, verbose_name=u'Tipo Partida', default=1)

    def __str__(self):
        return u"%s - %s" % (self.codigo, self.nombre)

    class Meta:
        verbose_name = u'Partida'
        verbose_name_plural = u'Partidas'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def mi_cuenta(self):
        if self.cuentacontable_set.exists():
            return self.cuentacontable_set.all()[0]
        return None

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(Partida, self).save(*args, **kwargs)


class CuentaContable(ModeloBase):
    cuenta = models.CharField(max_length=20, verbose_name=u'Codigo')
    descripcion = models.CharField(max_length=200, verbose_name=u'Descripcion')
    naturaleza = models.IntegerField(default=1, choices=NATURALEZA_CUENTA, verbose_name=u'Naturaleza')
    tipo = models.ForeignKey(TipoCuentaContable, blank=True, null=True, on_delete=models.CASCADE)
    asociaccosto = models.BooleanField(default=False)
    bodega = models.BooleanField(default=False)
    activosfijos = models.BooleanField(default=False)
    partida = models.ForeignKey(Partida, blank=True, null=True, verbose_name=u'Partida', on_delete=models.CASCADE)

    def __str__(self):
        return u"%10s - %20s" % (self.cuenta.strip(), self.descripcion.strip())

    class Meta:
        verbose_name = 'Cuenta Contable'
        verbose_name_plural = 'Cuentas Contables'
        ordering = ['cuenta']

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return CuentaContable.objects.filter(Q(cuenta__icontains=q) | Q(descripcion__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return "%s - %s" % (self.cuenta, self.descripcion)

    def flexbox_alias(self):
        return "%s - %s" % (self.cuenta, self.descripcion)

    def total_registrado(self, fecha):
        return null_to_decimal(
            ActivoFijo.objects.filter(cuentacontable=self, fechaingreso__lte=fecha).aggregate(total=Sum('costo'))[
                'total'], 2)

    def total_anual(self, fecha):
        return null_to_decimal(ActivoFijo.objects.filter(cuentacontable=self, fechaingreso__lte=fecha).aggregate(
            total=Sum('valordepreciacionanual'))['total'], 2)

    def total_acumulada(self, fecha):
        return null_to_decimal(ActivoFijo.objects.filter(cuentacontable=self, fechaingreso__lte=fecha).aggregate(
            total=Sum('valordepreciacionacumulada'))['total'], 2)

    def save(self, *args, **kwargs):
        self.cuenta = self.cuenta.upper()
        self.descripcion = self.descripcion.upper()
        super(CuentaContable, self).save(*args, **kwargs)


class Carpeta(ModeloBase):
    nombre = models.TextField(default='', blank=True, null=True)
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u"Persona", on_delete=models.CASCADE)
    carpetaref = models.ForeignKey('self', blank=True, null=True, verbose_name=u'Carpeta', on_delete=models.CASCADE)
    cantidadarchivos = models.IntegerField(default=0, verbose_name=u"Cantidad archivos")

    def porcentajearchivos(self):
        try:
            totalcargados = self.archivos()
            totalpermitido = self.cantidadarchivos
            return int((totalcargados / totalpermitido) * 100)
        except Exception as ex:
            return 0

    def __str__(self):
        return u"%s" % (self.nombre)

    class Meta:
        verbose_name = 'Carpeta'
        verbose_name_plural = 'Carpetas'
        ordering = ['nombre']

    def archivos(self):
        listaidscarpeta = [self.id]
        idscarpetashijas = Carpeta.objects.filter(status=True, carpetaref_id=self).values_list('id', flat=True)
        listaidscarpeta += idscarpetashijas
        for lis in listaidscarpeta:
            listaidscarpeta += Carpeta.objects.filter(status=True, carpetaref_id=lis).values_list('id', flat=True)
        archivoszip = ArchivoCarpeta.objects.filter(Q(carpeta__carpetaref_id__in=listaidscarpeta) | Q(carpeta_id=self),
                                                    status=True, tipoarchivo=5)
        numarchivos = 0
        for zip in archivoszip:
            archivo = str(zip.archivo)
            url = '/media/' + archivo
            archzip = zipfile.ZipFile(SITE_STORAGE + url, 'r')
            numarchivos += archzip.filelist.__len__()

        archivos = ArchivoCarpeta.objects.filter(Q(carpeta__carpetaref_id__in=listaidscarpeta) | Q(carpeta_id=self),
                                                 status=True).exclude(tipoarchivo=5).count()
        return numarchivos + archivos

    def carpetashijas(self):
        listaidscarpeta = [self.id]
        idscarpetashijas = []
        idscarpetashijas += Carpeta.objects.filter(status=True, carpetaref_id=self).values_list('id', flat=True)
        # listaidscarpeta += idscarpetashijas
        for lis in idscarpetashijas:
            idscarpetashijas += Carpeta.objects.filter(status=True, carpetaref_id=lis).values_list('id', flat=True)
        listaidscarpeta += idscarpetashijas
        return listaidscarpeta

    def compartida(self):
        listaidscarpeta = [self.id]
        idscarpetashijas = Carpeta.objects.filter(status=True, carpetaref_id=self).values_list('id', flat=True)
        listaidscarpeta += idscarpetashijas
        if Carpeta.objects.filter(status=True, pk__in=listaidscarpeta).exists():
            return True
        else:
            return False

    def en_uso(self):
        if self.archivocarpeta_set.filter(status=True).exists():
            return True
        else:
            if Carpeta.objects.filter(status=True, carpetaref_id=self).exists():
                return True
            else:
                return False

    def permisos(self):
        if self.carpetacompartida_set.filter(status=True, puedeeditar=True).exists():
            return True
        else:
            return False


class ArchivoCarpeta(ModeloBase):
    nombre = models.TextField(default='', blank=True, null=True)
    tipoarchivo = models.IntegerField(default=1, choices=TIPO_ARCHIVO, verbose_name=u'Tipo Archivo')
    archivo = models.FileField(upload_to='archivorepositorio', blank=True, null=True,
                               verbose_name=u'Archivo Repositorio')
    carpeta = models.ForeignKey(Carpeta, blank=True, null=True, verbose_name=u'Carpeta', on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % (self.nombre)

    class Meta:
        verbose_name = 'Archivo Carpeta'
        verbose_name_plural = 'Archivos Carpetas'
        ordering = ['nombre']


class CarpetaCompartida(ModeloBase):
    carpeta = models.ForeignKey(Carpeta, blank=True, null=True, verbose_name=u'Carpeta', on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u"Persona", on_delete=models.CASCADE)
    puedever = models.BooleanField(default=False, verbose_name=u'Puede Ver')
    puedeeditar = models.BooleanField(default=False, verbose_name=u'Puede Editar')

    def __str__(self):
        return u"%s" % (self.carpeta)

    class Meta:
        verbose_name = 'Carpeta Compartida'
        verbose_name_plural = 'Carpetas Compartidas'
        ordering = ['carpeta']


class ConfiguracionCarpeta(ModeloBase):
    carpeta = models.ForeignKey(Carpeta, blank=True, null=True, verbose_name=u'Carpeta', on_delete=models.CASCADE)
    cantidad = models.IntegerField(default=0)
    activo = models.BooleanField(default=False, verbose_name=u'Activo')

    def __str__(self):
        return u"%s" % (self.carpeta)

    class Meta:
        verbose_name = 'Configuracion Carpeta'
        verbose_name_plural = 'Configuracion Carpetas'
        ordering = ['carpeta']


class PeligrosidadProducto(ModeloBase):
    descripcion = models.TextField(default='', blank=True, null=True)

    def __str__(self):
        return u"%s" % (self.descripcion)

    class Meta:
        verbose_name = 'Peligrosidad'
        verbose_name_plural = 'Peligrosidades'
        ordering = ['descripcion']

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return PeligrosidadProducto.objects.filter(Q(descripcion__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return "%s" % (self.descripcion)

    def flexbox_alias(self):
        return "%s" % (self.descripcion)

    def en_uso(self):
        return self.producto_set.exists()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(PeligrosidadProducto, self).save(*args, **kwargs)


class Producto(ModeloBase):
    codigo = models.IntegerField(default=0)
    descripcion = models.TextField(default='')
    unidadmedida = models.ForeignKey(UnidadMedida, on_delete=models.CASCADE)
    tipoproducto = models.ForeignKey(TipoProducto, on_delete=models.CASCADE)
    cuenta = models.ForeignKey(CuentaContable, on_delete=models.CASCADE)
    alias = models.CharField(max_length=50, blank=True, null=True)
    codigobarra = models.CharField(max_length=20, blank=True, null=True)
    minimo = models.FloatField(default=0, blank=True, null=True)
    maximo = models.FloatField(default=0, blank=True, null=True)
    kardex_minimo = models.FloatField(default=0, blank=True, null=True)
    kardex_maximo = models.FloatField(default=0, blank=True, null=True)
    consumo_minimo_diario = models.FloatField(default=0, blank=True, null=True)
    consumo_medio_diario = models.FloatField(default=0, blank=True, null=True)
    consumo_maximo_diario = models.FloatField(default=0, blank=True, null=True)
    tiempo_reposicion_inventario = models.IntegerField(default=0, blank=True, null=True)
    peligrosidad = models.ForeignKey(PeligrosidadProducto, blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.descripcion

    class Meta:
        verbose_name = u'Producto'
        verbose_name_plural = u'Productos'
        unique_together = ('cuenta', 'codigo',)
        ordering = ('cuenta', 'codigo',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(Producto, self).save(*args, **kwargs)

    def nombre_corto(self):
        return "%s - %s" % (self.codigo, self.descripcion)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return Producto.objects.filter(Q(cuenta__cuenta__icontains=q) | Q(codigo__icontains=q) | Q(descripcion__icontains=q) | Q(alias__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return "%s.%s - %s" % (self.cuenta.cuenta, self.codigo, self.descripcion)

    def flexbox_alias(self):
        data = [self.codigo, self.descripcion, self.alias, self.unidadmedida_id, self.unidadmedida.nombre,
                self.tipoproducto_id, self.tipoproducto.nombre, self.cuenta.cuenta, str(self.valor_inventario())]
        return data

    def flexbox_repr_orden_pedido(self):
        return "%s.%s - %s" % (self.cuenta.cuenta, self.codigo, self.descripcion)

    def flexbox_alias_orden_pedido(self):
        cantidad = 0
        costo = 0.0
        if self.inventarioreal_set.filter(producto=self).exists():
            inventario = self.inventarioreal_set.filter(producto=self)[0]
            cantidad = inventario.cantidad
            costo = inventario.costo

        return [self.codigo,
                self.cuenta.cuenta,
                self.tipoproducto.nombre,
                self.descripcion,
                self.unidadmedida.nombre,
                cantidad,
                costo]

    def actualizar_inventario_ingreso(self, costo, cantidad, total, request):
        if self.inventarioreal_set.filter(producto=self).exists():
            inventario = self.inventarioreal_set.filter(producto=self)[0]
            cantidadi = inventario.cantidad + cantidad
            valori = inventario.valor + total
            costoi = valori / cantidadi
            inventario.cantidad = cantidadi
            inventario.costo = costoi
            inventario.valor = valori
            inventario.save(request)
        else:
            inventario = InventarioReal(producto=self,
                                        costo=costo,
                                        cantidad=cantidad,
                                        valor=total)
            inventario.save(request)

    def actualizar_inventario_anular_ingreso(self, costo, cantidad, total, request):
        if self.inventarioreal_set.filter(producto=self).exists():
            inventario = self.inventarioreal_set.filter(producto=self)[0]
            cantidadi = inventario.cantidad - cantidad
            valori = inventario.valor - total
            if valori>0:
                costoi = valori / cantidadi
            else:
                costoi=0
            inventario.cantidad = cantidadi
            inventario.costo = costoi
            inventario.valor = valori
            inventario.save(request)
        else:
            inventario = InventarioReal(producto=self,
                                        costo=costo,
                                        cantidad=cantidad,
                                        valor=total)
            inventario.save(request)

    def actualizar_inventario_anular_salida(self, costo, cantidad, total, request):
        if self.inventarioreal_set.filter(producto=self).exists():
            inventario = self.inventarioreal_set.filter(producto=self)[0]
            cantidadi = inventario.cantidad + cantidad
            valori = inventario.valor + total
            costoi = valori / cantidadi
            inventario.cantidad = cantidadi
            inventario.costo = costoi
            inventario.valor = valori
            inventario.save(request)
        else:
            inventario = InventarioReal(producto=self,
                                        costo=costo,
                                        cantidad=cantidad,
                                        valor=total)
            inventario.save(request)


    def actualizar_inventario_salida(self, salida, request):
        cant = salida.cantidad
        for inv in self.inventarioreal_set.filter(cantidad__gt=0).order_by('fecha_creacion'):
            if inv.cantidad < cant:
                cant -= inv.cantidad
                cant_descontar = inv.cantidad
            else:
                cant_descontar = cant
                cant = cant - cant_descontar
            # COSTO Y SALDO ANTES DEL MOVIMIENTO
            saldoinicialvalor = self.valor_inventario()
            saldoinicialcantidad = self.stock_inventario()
            inv.cantidad = Decimal(inv.cantidad - cant_descontar).quantize(Decimal('.0001'))
            inv.valor = (inv.cantidad * inv.costo).quantize(Decimal('.0000000000000001'))
            inv.save(request)
            # ACTUALIZAR KARDEX
            kardex = KardexInventario(producto=self,
                                      inventario=inv,
                                      tipomovimiento=2,
                                      fecha=salida.fecha_creacion,
                                      salida=salida,
                                      saldoinicialvalor=saldoinicialvalor,
                                      saldoinicialcantidad=saldoinicialcantidad,
                                      cantidad=cant_descontar,
                                      costo=inv.costo,
                                      valor=(inv.costo * cant_descontar).quantize(Decimal('.0000000000000001')))
            kardex.save(request)
            salida.costo = inv.costo
            salida.valor = (inv.costo * salida.cantidad).quantize(Decimal('.0000000000000001'))
            salida.save(request)
            # COSTO Y SALDO DESPUES DEL MOVIMIENTO
            saldofinalvalor = Decimal(self.valor_inventario()).quantize(Decimal('.0000000000000001'))
            saldofinalcantidad = Decimal(self.stock_inventario()).quantize(Decimal('.0001'))
            kardex.saldofinalcantidad = saldofinalcantidad
            kardex.saldofinalvalor = saldofinalvalor
            kardex.save(request)
            if cant <= 0:
                break

    def mi_inventario(self):
        return self.inventarioreal_set.all()

    def mi_inventario_general(self):
        return self.inventarioreal_set.all()[0]

    def mi_inventario_costo(self, costo):
        return self.inventarioreal_set.filter(costo=costo)[0]

    def valor_inventario(self):
        return null_to_decimal(self.inventarioreal_set.aggregate(costo=Sum('valor'))['costo'], 15)

    def stock_inventario(self):
        return null_to_decimal(self.inventarioreal_set.aggregate(cantidad=Sum('cantidad'))['cantidad'])

    def en_uso(self):
        return self.detalleingresoproducto_set.exists() or self.inventarioreal_set.exists()

    def ultimo_registro_kardex_obras(self):
        return self.ingresosalidaobras_set.filter(status=True)[0]

    def calcular_existencia_minima(self):
        #Calculo de existencia m√≠nima (inventario de seguridad)
        return null_to_decimal(self.consumo_minimo_diario * self.tiempo_reposicion_inventario, 0)

    def calcular_punto_pedido(self):
        #Calculo punto de pedido
        emn = self.calcular_existencia_minima()
        return null_to_decimal((self.consumo_medio_diario * self.tiempo_reposicion_inventario) + emn, 0)

    def calcular_existencia_maxima(self):
        emn = self.calcular_existencia_minima()
        return null_to_decimal((self.consumo_maximo_diario * self.tiempo_reposicion_inventario) + int(emn), 0)

    def calcular_cantidad_pedido(self):
        existencia = null_to_decimal(self.stock_inventario(), 0)
        emx = self.calcular_existencia_maxima()
        return null_to_decimal(emx - existencia, 0)

    def ultima_compra(self):
        return self.kardexinventario_set.filter(status=True, tipomovimiento=1, compra__isnull=False).last()

class TipoDocumento(ModeloBase):
    nombre = models.CharField(default='', max_length=200)
    codigo = models.CharField(default='', max_length=4, blank=True, null=True)

    def __str__(self):
        return u' [' + self.codigo + '] ' + self.nombre

    class Meta:
        verbose_name = u'Tipo de Documento'
        verbose_name_plural = u'Tipos de Documentos'
        ordering = ('codigo', 'nombre')

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.codigo = self.codigo.upper()
        super(TipoDocumento, self).save(*args, **kwargs)


class EstadoProducto(ModeloBase):
    nombre = models.CharField(default='', max_length=200)
    gestionbaja = models.BooleanField(default=False, verbose_name=u'Para gestionar baja')

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = u'Estado de producto'
        verbose_name_plural = u'Estados de productos'
        ordering = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(EstadoProducto, self).save(*args, **kwargs)


class InventarioReal(ModeloBase):
    producto = models.ForeignKey(Producto, on_delete=models.CASCADE)
    cantidad = models.DecimalField(max_digits=30, decimal_places=4, default=0, verbose_name=u'Cantidad')
    costo = models.DecimalField(max_digits=30, decimal_places=16, default=0, verbose_name=u'Precio')
    valor = models.DecimalField(max_digits=30, decimal_places=16, default=0, verbose_name=u'Valor')

    def __str__(self):
        return u"%s  - Cant: %s - Cu: $%s" % (self.producto, self.cantidad, self.costo)

    class Meta:
        verbose_name = u'Inventario Real'
        verbose_name_plural = u'Inventarios Reales'
        ordering = ('producto__codigo',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return InventarioReal.objects.filter(Q(producto__codigo__icontains=q) | Q(producto__descripcion__icontains=q) | Q(producto__alias__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return "%s - %s - %s" % (self.producto.codigo, self.producto.descripcion, self.costo)

    def flexbox_alias(self):
        return [self.producto.codigo, self.producto.descripcion, self.producto.unidadmedida_id,
                self.producto.tipoproducto_id, self.producto.cuenta.descripcion, self.costo]

    def esta_bajo_minimo(self):
        return self.cantidad <= self.producto.minimo

    def esta_encima_maximo(self):
        return self.cantidad > self.producto.maximo

    def tiene_existencia(self):
        return self.cantidad > 0

    def save(self, *args, **kwargs):
        super(InventarioReal, self).save(*args, **kwargs)


class DetalleIngresoProducto(ModeloBase):
    producto = models.ForeignKey(Producto, on_delete=models.CASCADE)
    cantidad = models.DecimalField(max_digits=30, decimal_places=4, default=0)
    costo = models.DecimalField(max_digits=30, decimal_places=6, default=0)
    subtotal = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    descuento = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    coniva = models.BooleanField(default=False)
    valoriva = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    total = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    copiatotal = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    estado = models.ForeignKey(EstadoProducto, blank=True, null=True, on_delete=models.CASCADE)
    fechacaducidad = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Caducidad")

    def __str__(self):
        return u"%s  - Cant:  %s  - Costo: $%s" % (self.producto, self.cantidad, self.costo)

    class Meta:
        verbose_name = u'Detalle Ingreso producto'
        verbose_name_plural = u'Detalles Ingreso de Productos'
        ordering = ('producto__codigo',)

    def calcular_valor(self):
        return Decimal(self.cantidad * self.costo).quantize(Decimal('.01'))

    def ingreso_producto(self):
        return self.ingresoproducto_set.all()[0]

    def kardex(self):
        return self.kardexinventario_set.all()[0]

    def save(self, *args, **kwargs):
        super(DetalleIngresoProducto, self).save(*args, **kwargs)


class IngresoProducto(ModeloBase):
    proveedor = models.ForeignKey(Proveedor, on_delete=models.CASCADE)
    numero = models.IntegerField(default=0)
    tipodocumento = models.ForeignKey(TipoDocumento, blank=True, null=True, on_delete=models.CASCADE)
    numerodocumento = models.CharField(max_length=20, blank=True, null=True)
    autorizacion = models.CharField(max_length=40, blank=True, null=True)
    fechadocumento = models.DateField()
    descripcion = models.CharField(default='', max_length=200)
    ordencompra = models.CharField(default='', max_length=200)
    solicitudcompra = models.CharField(default='', max_length=200)
    fechaoperacion = models.DateTimeField()
    productos = models.ManyToManyField(DetalleIngresoProducto)
    subtotal_base12 = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    subtotal_base0 = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total_descuento = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total_iva = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    transporte = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    anulado = models.BooleanField(default=False)

    def __str__(self):
        return self.proveedor.nombre + ' - ' + self.numerodocumento + ' - ' + self.fechaoperacion.strftime('%d-%m-%Y')

    class Meta:
        verbose_name = u'Ingreso de Producto '
        verbose_name_plural = u'Ingreso de Productos'
        ordering = ('-fechaoperacion',)

    def repr_id(self):
        return str(self.id).zfill(4)

    def cantidad_productos(self):
        return self.productos.all().count()

    def valor_compra(self):
        return null_to_decimal(self.productos.aggregate(suma=Sum('total'))['suma'], 2)

    def total_kardex(self):
        return null_to_decimal(
            KardexInventario.objects.filter(compra__ingresoproducto=self).aggregate(suma=Sum('valor'))['suma'])

    def persona_recibe(self):
        return self.usuario_creacion.persona_set.all()[0]

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.solicitudcompra = self.solicitudcompra.upper()
        self.ordencompra = self.ordencompra.upper()
        super(IngresoProducto, self).save(*args, **kwargs)


class PlantillaInstitucion(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre Cargo')
    activo = models.BooleanField(default=False, verbose_name=u'Activo')

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = u'Plantilla Institucion'
        verbose_name_plural = u'Plantilla Institucion'
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(PlantillaInstitucion, self).save(*args, **kwargs)


TIPO_DEPARTAMENTO = (
    (1, u'ADMINISTRATIVO'),
    (2, u'ACADEMICO'),
)

TIPO_PORTAFOLIOTH = (
    (1, u'PRODUCTO'),
    (2, u'SERVICIO'),
)

ESTADO_NOTIFICACION = (
    (1, u"PENDIENTE"),
    (2, u"ACEPTADO"),
    (3, u"RECHAZADO"),
)

class ProductoServicioTh(ModeloBase):
    nombre = models.CharField(default='', max_length=800, verbose_name=u'Departamento')
    tipo = models.IntegerField(default=1, choices=TIPO_PORTAFOLIOTH, verbose_name=u'Tipo producto o servicio')
    fechavigencia = models.DateField(blank=True, null=True, verbose_name=u'Fecha de vigencia')

    def get_tipo(self):
        return dict(TIPO_PORTAFOLIOTH)[int(self.tipo)]

    def __str__(self):
        return self.nombre

    def actividades(self):
        return self.actividadsecuencialth_set.filter(status=True).order_by('id')

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(ProductoServicioTh, self).save(*args, **kwargs)


TIPO_INDICE = (
    (1, u'01 - DE LOS √ìRGANOS GOBERNANTES'),
    (2, u'02 - DE LOS √ìRGANOS ADJETIVOS DE ASESOR√çA'),
    (3, u'03 - DE LOS √ìRGANOS ADJETIVOS DE APOYO'),
    (4, u'04 - DE LOS √ìRGANOS SUSTANTIVOS - AGREGADOR DE VALOR'),
)

PERMISOS_DEPARTAMENTO = (
    (0, u'NINGUNO'),
    (1, u'SOLICITUDES DE BODEGA'),
    (2, u'TALENTO HUMANO'),
    (3, u'VINCULACI√ìN'),
)

class GrupoDepartamento(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Departamento')
    alias = models.CharField(max_length=15, default="", verbose_name=u"Alias")
    coordinaciones = models.ManyToManyField('sga.Coordinacion',blank=True, verbose_name=u'Coordinaci√≥n')

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = u"Grupo Departamento"
        verbose_name_plural = u"Grupos Departamentos"
        ordering = ['nombre',]

class Departamento(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Departamento')
    responsable = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True, verbose_name=u'Responsable',
                                    on_delete=models.CASCADE)
    responsable_subrogante = models.ManyToManyField('sga.Persona', related_name='+',
                                                    verbose_name=u'Responsable SubRogante')
    integrantes = models.ManyToManyField('sga.Persona', verbose_name=u'Trabajadores')
    codigo = models.CharField(max_length=10, default="", verbose_name=u"C√≥digo")
    alias = models.CharField(max_length=15, default="", verbose_name=u"Alias")
    permisogeneral = models.BooleanField(default=False, verbose_name=u'Aprueba permisos generales')
    tipo = models.IntegerField(default=1, choices=TIPO_DEPARTAMENTO, verbose_name=u'Tipo Departamento')
    mision = models.TextField(default='', verbose_name=u'Misi√≥n', blank=True)
    visualizath = models.BooleanField(default=True, verbose_name=u'Visualiza en Plantilla')
    noactividades = models.BooleanField(default=False, verbose_name=u'No ingresa actividades')
    codigoindice = models.CharField(max_length=20, default="", verbose_name=u"C√≥digo Indice")
    tipoindice = models.IntegerField(choices=TIPO_INDICE, verbose_name=u"Tipo Indice", null=True, blank=True)
    permisodepartamento = models.IntegerField(default=0, choices=PERMISOS_DEPARTAMENTO,
                                              verbose_name=u'Permisos de Departamento')
    grupodepartamento = models.ForeignKey(GrupoDepartamento, blank=True, null=True, on_delete=models.CASCADE, verbose_name="Grupo departamento al que pertenece")

    def __str__(self):
        return self.nombre

    def mis_integrantes(self):
        return self.integrantes.all()

    def nombre_text(self):
        from sga.templatetags.sga_extras import articulo_palabra
        primera_palabra = str(self.nombre).split()[0]
        articulo = articulo_palabra(primera_palabra)
        return f'{articulo} {self.nombre}'
    
    def pdf_poadepartamento(self, poaperiodo):
        from sga.funcionesxhtml2pdf import conviert_html_to_pdf
        from sga.models import MONTH_CHOICES
        data = {}
        data['fechaactual'] = datetime.now()
        data['departamento'] = self
        data['meses'] = MONTH_CHOICES
        data['periodopoa'] = poaperiodo
        data['mes_actual'] = 12 if PeriodoPoa.objects.get(
            pk=poaperiodo.id).anio < datetime.now().year else datetime.now().month
        data['listaestrategico'] = self.objetivoestrategico_set.filter(status=True, periodopoa=poaperiodo).order_by(
            'orden')
        return conviert_html_to_pdf(
            'poa_subirevidatrasada/descargarpoapdf.html',
            {
                'pagesize': 'A4',
                'data': data,
            }
        )

    def cantidad_integrantes(self):
        return self.integrantes.all().count()

    def obtener_informe(self, periodo):
        informe = self.informegenerado_set.filter(periodopoa_id=periodo, status=True).order_by("-mes", "-tipo")[:1]
        return informe[0] if informe.exists() else None

    def existe_informe(self, periodo, mes):
        return self.informegenerado_set.filter(periodopoa_id=periodo, status=True, mes=mes).exists()

    def existe_informecarrera(self, periodo, mes, carrera):
        if carrera == 0:
            return self.informegenerado_set.filter(periodopoa_id=periodo, carrera__isnull=True, status=True,
                                                   mes=mes).exists()
        else:
            return self.informegenerado_set.filter(periodopoa_id=periodo, carrera__id=carrera, status=True,
                                                   mes=mes).exists()

    def esta_en_direccion_perfil_puesto(self, periodo):
        return DireccionPerfilPuesto.objects.filter(periodo=periodo, direccion=self, status=True, activo=True).exists()

    def esta_en_perfil_puesto(self, periodo):
        if self.esta_en_direccion_perfil_puesto(periodo):
            direccion = DireccionPerfilPuesto.objects.get(periodo=periodo, direccion=self, status=True, activo=True)
            return PerfilPuestoTh.objects.filter(direccion=direccion, status=True).exists()
        return False

    def traer_producto_th(self, periodo):
        if self.esta_en_direccion_perfil_puesto(periodo):
            direccion = DireccionPerfilPuesto.objects.get(periodo=periodo, direccion=self, status=True, activo=True)
            return PerfilPuestoTh.objects.filter(direccion=direccion, status=True).exists()
        return False

    def cantidad_producto_plantilla(self):
        return ProductoServicioSeccion.objects.values_list('id').filter(status=True,seccion__departamento=self).count()

    class Meta:
        verbose_name = u'Departamento'
        verbose_name_plural = u'Departamentos'
        ordering = ('nombre',)
        unique_together = ('nombre',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return Departamento.objects.filter(Q(nombre__icontains=q) | Q(codigo__icontains=q) | Q(alias__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return "%s - %s" % (self.codigo, self.nombre)

    def flexbox_alias(self):
        return [self.codigo, self.nombre, self.alias]

    def en_uso(self):
        return self.salidaproducto_set.exists() or self.integrantes.exists()

    def cantidad_prod(self, producto):
        return InventarioReal.objects.get(kardexinventario__salida__departamento=self, producto=producto).cantidad

    def objetivos_operativos(self, anio):
        objetivooperativo = None
        if ObjetivoOperativo.objects.filter(objetivotactico__objetivoestrategico__departamento=self,
                                            objetivotactico__objetivoestrategico__periodopoa__anio=anio,
                                            objetivotactico__objetivoestrategico__periodopoa__ingresar=True,
                                            status=True).exists():
            objetivooperativo = ObjetivoOperativo.objects.filter(
                objetivotactico__objetivoestrategico__departamento=self,
                objetivotactico__objetivoestrategico__periodopoa__anio=anio,
                objetivotactico__objetivoestrategico__periodopoa__ingresar=True, status=True)
        return objetivooperativo

    def objetivos_operativosxcarrera(self, anio, idc):
        objetivooperativo = None
        if ObjetivoOperativo.objects.filter(objetivotactico__objetivoestrategico__departamento=self,
                                            objetivotactico__objetivoestrategico__carrera__id=idc,
                                            objetivotactico__objetivoestrategico__periodopoa__anio=anio,
                                            objetivotactico__objetivoestrategico__periodopoa__ingresar=True,
                                            status=True).exists():
            objetivooperativo = ObjetivoOperativo.objects.filter(
                objetivotactico__objetivoestrategico__departamento=self,
                objetivotactico__objetivoestrategico__carrera__id=idc,
                objetivotactico__objetivoestrategico__periodopoa__anio=anio,
                objetivotactico__objetivoestrategico__periodopoa__ingresar=True, status=True)
        return objetivooperativo

    def objetivos_operativosgeneral(self, anio):
        objetivooperativo = None
        if ObjetivosPac.objects.filter(departamento=self, periodopoa__anio=anio, status=True).exists():
            objetivooperativo = ObjetivosPac.objects.filter(departamento=self, periodopoa__anio=anio, status=True)
        return objetivooperativo

    def gestiones(self):
        return self.secciondepartamento_set.filter(status=True)

    def qs_coordinaciones(self):
        from sga.models import Coordinacion
        cruce = {204: [5,],
                 110: [5, ],
                 205: [4,],
                 206: [2, 3],
                 121:[2, 3],
                 212: [1,]}
        coordinaciones = None
        if self.id in cruce:
            coordinaciones = Coordinacion.objects.filter(id__in=[self.id])
        return coordinaciones

    def coordinaciones_ids(self):
        from sga.models import Coordinacion
        cruce = {204: [5,],
                 110: [5, ],
                 205: [4,],
                 206: [2, 3],
                 121:[2, 3],
                 212: [1,]}
        coordinaciones = []
        if self.id in cruce:
            coordinaciones = cruce[self.id]
        return coordinaciones

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(Departamento, self).save(*args, **kwargs)


class Bloque(ModeloBase):
    descripcion = models.CharField(max_length=100, verbose_name=u"Descripci√≥n")
    observacion = models.CharField(max_length=250, verbose_name=u"Observaci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Bloque'
        verbose_name_plural = u'Bloques'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.observacion = self.observacion.upper()
        super(Bloque, self).save(*args, **kwargs)


# mantenimiento de estooo
class Ubicacion(ModeloBase):
    from core.choices.models.sagest import PisosBloqueChoice
    codigo = models.CharField(max_length=10, verbose_name=u"C√≥digo")
    nombre = models.CharField(max_length=250, verbose_name=u"Nombre")
    observacion = models.CharField(max_length=250, verbose_name=u"Observaci√≥n")
    bloque = models.ForeignKey(Bloque, blank=True, null=True, verbose_name=u'Bloque', on_delete=models.CASCADE)
    piso = models.IntegerField(blank=True, null=True, choices=PisosBloqueChoice.choices, verbose_name='Piso')
    bloquepertenece = models.ForeignKey('sga.Bloque', blank=True, null=True, verbose_name=u'Bloque al que pertenece', on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u'Responsable',
                                    on_delete=models.CASCADE)

    def __str__(self):
        return '{} - {}'.format(self.nombre, self.bloquepertenece) if self.bloquepertenece else '{}'.format(self.nombre)

    class Meta:
        verbose_name = u'Ubicaci√≥n'
        verbose_name_plural = u'Ubicaciones'
        ordering = ('nombre',)
        unique_together = ('codigo', 'nombre',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return Ubicacion.objects.filter(Q(nombre__icontains=q) | Q(codigo__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return self.nombre

    def flexbox_alias(self):
        return [self.codigo, self.nombre]

    def cantidad_activos(self):
        return self.activofijo_set.filter(statusactivo=1).count()

    def cantidad_responsables(self):
        from sga.models import Persona
        return Persona.objects.filter(responsableactivo__ubicacion=self,
                                      responsableactivo__statusactivo=1).distinct().count()

    def en_uso(self):
        return self.activofijo_set.exists()

    def ubicacionutilizada(self):
        if self.activofijo_set.filter(status=True).exists():
            return True
        else:
            return False

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.observacion = self.observacion.upper()
        super(Ubicacion, self).save(*args, **kwargs)


class DetalleSalidaProducto(ModeloBase):
    producto = models.ForeignKey(Producto, on_delete=models.CASCADE)
    cantidad = models.DecimalField(max_digits=30, decimal_places=6, default=0)
    costo = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    valor = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    copiavalor = models.DecimalField(max_digits=30, decimal_places=16, default=0)

    def __str__(self):
        return u"%s  - Cant:  %s " % (self.producto, self.cantidad)

    class Meta:
        verbose_name = u'Detalle Ingreso producto'
        verbose_name_plural = u'Detalles Ingreso de Productos'
        ordering = ('producto__codigo',)

    def salida_producto(self):
        return self.salidaproducto_set.all()[0] if self.salidaproducto_set.all() else None

    def kardex_inventario(self):
        return self.kardexinventario_set.all()[0]

    def save(self, *args, **kwargs):
        super(DetalleSalidaProducto, self).save(*args, **kwargs)


class SalidaProducto(ModeloBase):
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', verbose_name=u'Responsable', on_delete=models.CASCADE)
    solicitud = models.ForeignKey('sagest.SolicitudProductos', verbose_name=u'Solicitudes', blank=True, null=True,
                                  on_delete=models.CASCADE)
    numerodocumento = models.IntegerField(blank=True, null=True)
    descripcion = models.CharField(default='', max_length=1000)
    fechaoperacion = models.DateTimeField()
    productos = models.ManyToManyField(DetalleSalidaProducto)
    valor = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    observaciones = models.TextField(default='', verbose_name=u"Observaciones")
    anulado = models.BooleanField(default=False)

    def __str__(self):
        return u'%s %s %s' % (self.departamento.nombre, self.numerodocumento, self.fechaoperacion.strftime('%d-%m-%Y'))

    class Meta:
        verbose_name = u'Salida de Producto '
        verbose_name_plural = u'Salidas de Productos'
        ordering = ('-fechaoperacion', '-numerodocumento')
        unique_together = ('numerodocumento',)

    def repr_id(self):
        return str(self.id).zfill(4)

    def detalle_productos(self):
        return self.productos.all().order_by('id')

    def cantidad_productos(self):
        return self.productos.all().count()

    def valor_salida(self):
        return null_to_decimal(self.productos.aggregate(suma=Sum('valor'))['suma'])

    def persona_entrega(self):
        return self.usuario_creacion.persona_set.all()[0]

    def mi_anulacion(self):
        if self.anulacion_set.exists():
            return self.anulacion_set.all()[0]
        return None

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.observaciones = self.observaciones.upper()
        if self.id:
            self.valor = self.valor_salida()
        super(SalidaProducto, self).save(*args, **kwargs)


class ResponsablesSolicitudDepartamentos(ModeloBase):  # PersonaSolicitud
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', blank=True, null=True,
                                     on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', verbose_name=u'Responsable', blank=True, null=True,
                                    on_delete=models.CASCADE)
    estado = models.BooleanField(default=False, verbose_name=u'Estado de la Persona')

    def total_solicitud(self):
        return SolicitudProductos.objects.filter(status=True, responsable=self.responsable).count()

    def get_estado(self):
        return 'fa fa-check-circle text-success' if self.estado else 'fa fa-times-circle text-error'

    def __str__(self):
        return u'%s' % (self.responsable)


ESTADOS_SOLICITUD_PRODUCTOS = (
    (0, u'PENDIENTE'),
    (1, u'APROBADO'),
    (2, u'EN REVISI√ìN'),
    (3, u'FINALIZADA'),
    (4, u'RECHAZADO'),
    (5, u'ANULADO'),
)


class SolicitudProductos(ModeloBase):
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', verbose_name=u'Responsable', on_delete=models.CASCADE)
    numerodocumento = models.IntegerField(blank=True, null=True)
    codigodocumento = models.CharField(blank=True, null=True, max_length=200)
    descripcion = models.TextField(default='', verbose_name=u"Descripcion")
    fechaoperacion = models.DateTimeField()
    fechaentrega = models.DateTimeField(blank=True, null=True)
    observaciones = models.TextField(default='', verbose_name=u"Observaciones")
    denominacionpuesto = models.CharField(blank=True, null=True, max_length=500)
    director = models.ForeignKey('sga.Persona', related_name="solicitud_director_persona", verbose_name=u'Director',
                                 blank=True, null=True, on_delete=models.CASCADE)
    directordenominacionpuesto = models.CharField(blank=True, null=True, max_length=500)
    estados = models.IntegerField(default=0, choices=ESTADOS_SOLICITUD_PRODUCTOS, verbose_name=u'Estados Solicitud')

    def dict_estados(self):
        return dict(ESTADOS_SOLICITUD_PRODUCTOS)[int(self.estados)]

    def __str__(self):
        return u'%s %s %s' % (self.departamento.nombre, self.numerodocumento, self.fechaoperacion.strftime('%d-%m-%Y'))

    class Meta:
        verbose_name = u'Salida de Producto '
        verbose_name_plural = u'Salidas de Productos'
        ordering = ('-fechaoperacion', '-numerodocumento')

    def repr_id(self):
        return str(self.id).zfill(4)

    def persona_entrega(self):
        return self.usuario_creacion.persona_set.all()[0]

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.observaciones = self.observaciones.upper()
        super(SolicitudProductos, self).save(*args, **kwargs)


class SolicitudDetalleProductos(ModeloBase):
    solicitud = models.ForeignKey(SolicitudProductos, verbose_name='Solicitud', on_delete=models.CASCADE)
    producto = models.ForeignKey(Producto, blank=True, null=True, verbose_name='Productos', on_delete=models.CASCADE)
    cantidad = models.DecimalField(max_digits=30, decimal_places=4, default=0, verbose_name='Cantidad')
    cantentregar = models.DecimalField(max_digits=30, decimal_places=4, default=0, verbose_name='Cantidad')
    observacion = models.TextField(default='', blank=True, null=True, verbose_name='Observaci√≥n de Salida')
    entregado = models.BooleanField(default=False, verbose_name='¬øSe Entreg√≥?')

    def __str__(self):
        return u"%s  - Cant:  %s " % (self.producto, self.cantidad)

    class Meta:
        verbose_name = u'Detalle Solicitud Producto'
        verbose_name_plural = u'Detalles Solicitud de Productos'
        ordering = ('producto__codigo',)


class SolicitudObservacionesProductos(ModeloBase):
    solicitud = models.ForeignKey(SolicitudProductos, verbose_name='Solicitud', on_delete=models.CASCADE)
    estados = models.IntegerField(default=1, choices=ESTADOS_SOLICITUD_PRODUCTOS, verbose_name=u'Estados Solicitud')
    observacion = models.TextField(default='', blank=True, null=True, verbose_name='Observaci√≥n')

    def __str__(self):
        return u"%s  -  %s " % (self.solicitud.codigodocumento, self.observacion)

    def dict_estados(self):
        return dict(ESTADOS_SOLICITUD_PRODUCTOS)[int(self.estados)]

    class Meta:
        verbose_name = u'Observacion Solicitud Producto'
        verbose_name_plural = u'Observaciones Solicitud de Productos'
        ordering = ('solicitud',)


TIPOS_MOVIMIENTO_INVENTARIO = (
    (1, u'ENTRADA'),
    (2, u'SALIDA'),
)


class Anulacion(ModeloBase):
    salida = models.ForeignKey(SalidaProducto, blank=True, null=True, verbose_name=u'Salida', on_delete=models.CASCADE)
    fecha = models.DateTimeField(verbose_name=u'Fecha')
    ingreso = models.ForeignKey(IngresoProducto, blank=True, null=True, verbose_name=u'Ingreso',
                                on_delete=models.CASCADE)
    motivo = models.TextField(default='')
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
    tipomovimiento = models.IntegerField(default=1, choices=TIPOS_MOVIMIENTO_INVENTARIO,
                                         verbose_name=u'Tipo Movimiento')

    def __str__(self):
        return u"%s - %s" % (self.tipomovimiento, self.motivo)

    class Meta:
        verbose_name = 'Anulacion de documentos'
        verbose_name_plural = 'Anulaciones de movimientos'
        ordering = ('id',)

    def cantidad_productos(self):
        return self.detalleanulacion_set.all().count()

    def valor(self):
        return null_to_decimal(self.detalleanulacion_set.aggregate(suma=Sum('valor'))['suma'])

    def save(self, *args, **kwargs):
        self.motivo = self.motivo.upper().strip()
        super(Anulacion, self).save(*args, **kwargs)


class DetalleAnulacion(ModeloBase):
    anulacion = models.ForeignKey(Anulacion, on_delete=models.CASCADE)
    producto = models.ForeignKey(Producto, on_delete=models.CASCADE)
    cantidad = models.DecimalField(max_digits=30, decimal_places=4, default=0)
    costo = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    valor = models.DecimalField(max_digits=30, decimal_places=16, default=0)

    def __str__(self):
        return u"%s  - Cant:  %s " % (self.anulacion, self.cantidad)

    class Meta:
        verbose_name = u'Detalle Ingreso producto'
        verbose_name_plural = u'Detalles Ingreso de Productos'
        ordering = ('producto__codigo',)

    def save(self, *args, **kwargs):
        super(DetalleAnulacion, self).save(*args, **kwargs)


class KardexInventario(ModeloBase):
    producto = models.ForeignKey(Producto, verbose_name=u'Producto', on_delete=models.CASCADE)
    inventario = models.ForeignKey(InventarioReal, verbose_name=u'Inventario', on_delete=models.CASCADE)
    tipomovimiento = models.IntegerField(default=1, choices=TIPOS_MOVIMIENTO_INVENTARIO,
                                         verbose_name=u'Tipo Movimiento')
    fecha = models.DateTimeField(verbose_name=u'Fecha')
    compra = models.ForeignKey(DetalleIngresoProducto, blank=True, null=True, verbose_name=u'Compra',
                               on_delete=models.CASCADE)
    salida = models.ForeignKey(DetalleSalidaProducto, blank=True, null=True, verbose_name=u'Salida',
                               on_delete=models.CASCADE)
    anulacion = models.ForeignKey(Anulacion, blank=True, null=True, verbose_name=u'Anulacion', on_delete=models.CASCADE)
    saldoinicialvalor = models.DecimalField(max_digits=30, decimal_places=16, default=0,
                                            verbose_name=u'Saldo Inicial Valores')
    saldoinicialcantidad = models.DecimalField(max_digits=30, decimal_places=4, default=0,
                                               verbose_name=u'Saldo Inicial Cantidad')
    cantidad = models.DecimalField(max_digits=30, decimal_places=4, default=0, verbose_name=u'Cantidad')
    costo = models.DecimalField(max_digits=30, decimal_places=16, default=0, verbose_name=u'Costo')
    valor = models.DecimalField(max_digits=30, decimal_places=16, default=0, verbose_name=u'Valor')
    saldofinalvalor = models.DecimalField(max_digits=30, decimal_places=16, default=0,
                                          verbose_name=u'Saldo Final Valores')
    copiasaldofinalvalor = models.DecimalField(max_digits=30, decimal_places=16, default=0,
                                               verbose_name=u'Saldo Final Valores')
    saldofinalcantidad = models.DecimalField(max_digits=30, decimal_places=4, default=0,
                                             verbose_name=u'Saldo Final Cantidad')
    anulado = models.BooleanField(default=False)

    def __str__(self):
        return u"%s - %s (%s, %s)" % (self.inventario.producto.codigo, self.cantidad, self.tipomovimiento, self.fecha)

    class Meta:
        verbose_name = 'Kardex de inventario'
        verbose_name_plural = 'Kardexs de inventario'
        ordering = ('fecha', 'id')

    def es_compra(self):
        return True if not self.compra is None else False

    def es_salida(self):
        return True if not self.salida is None else False

    def es_anulacion(self):
        return True if not self.anulacion is None else False

    def save(self, *args, **kwargs):
        super(KardexInventario, self).save(*args, **kwargs)


# MODELOS DE TALENTO HUMANO
TIPOS_INSTITUCION = (
    (1, u'PRIVADA'),
    (2, u'PUBLICA')
)


class SecuenciaBodega(ModeloBase):
    ingreso = models.IntegerField(default=0, verbose_name=u'Secuencia Ingresos')
    salida = models.IntegerField(default=0, verbose_name=u'Secuencia Salidas')
    anulaciones = models.IntegerField(default=0, verbose_name=u'Secuencia Anulaciones')

    class Meta:
        verbose_name = u"Secuencia de documento de bodega"

    def save(self, *args, **kwargs):
        super(SecuenciaBodega, self).save(*args, **kwargs)


class OtroRegimenLaboral(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u' Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u'Otro Regimen laboral'
        verbose_name_plural = u"Otros Regimenes laborales"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(OtroRegimenLaboral, self).save(*args, **kwargs)


class MotivoSalida(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u' Nombre')
    codigo_tthh = models.IntegerField(default=0, verbose_name=u"C√≥digo tthh motivo salida")

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u'Motivo salida'
        verbose_name_plural = u"Motivos salida"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(MotivoSalida, self).save(*args, **kwargs)


class DedicacionLaboral(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u' Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u'Dedicaci√≥n laboral'
        verbose_name_plural = u"Dedicaciones laborales"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(DedicacionLaboral, self).save(*args, **kwargs)


class ActividadLaboral(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u' Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u'Actividades laboral'
        verbose_name_plural = u"Actividad laborales"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(ActividadLaboral, self).save(*args, **kwargs)


class ExperienciaLaboral(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    tipoinstitucion = models.IntegerField(choices=TIPOS_INSTITUCION, default=1, verbose_name=u'Tipo de instituci√≥n')
    institucion = models.CharField(default='', max_length=200, verbose_name=u'Instituci√≥n')
    cargo = models.CharField(default='', max_length=200, verbose_name=u'Cargo')
    departamento = models.CharField(default='', max_length=200, verbose_name=u'Departamento')
    pais = models.ForeignKey('sga.Pais', blank=True, null=True, related_name='+', verbose_name=u'Pa√≠s residencia',
                             on_delete=models.CASCADE)
    provincia = models.ForeignKey('sga.Provincia', blank=True, null=True, related_name='+',
                                  verbose_name=u"Provincia de residencia", on_delete=models.CASCADE)
    canton = models.ForeignKey('sga.Canton', blank=True, null=True, related_name='+',
                               verbose_name=u"Canton de residencia", on_delete=models.CASCADE)
    parroquia = models.ForeignKey('sga.Parroquia', blank=True, null=True, related_name='+',
                                  verbose_name=u"Parroquia de residencia", on_delete=models.CASCADE)
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u'Fecha inicio')
    fechafin = models.DateField(blank=True, null=True, verbose_name=u'Fecha fin')
    motivosalida = models.ForeignKey(MotivoSalida, blank=True, null=True, verbose_name=u'Motivo salida',
                                     on_delete=models.CASCADE)
    regimenlaboral = models.ForeignKey(OtroRegimenLaboral, blank=True, null=True, verbose_name=u'Regimen laboral',
                                       on_delete=models.CASCADE)
    horassemanales = models.IntegerField(default=40, verbose_name=u'Horas semanales')
    dedicacionlaboral = models.ForeignKey(DedicacionLaboral, blank=True, null=True, verbose_name=u'Dedicaci√≥n laboral',
                                          on_delete=models.CASCADE)
    actividadlaboral = models.ForeignKey(ActividadLaboral, blank=True, null=True, verbose_name=u'Actividad laboral',
                                         on_delete=models.CASCADE)
    observaciones = models.TextField(default='', verbose_name=u'Observaciones')
    archivo = models.FileField(upload_to='archivo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Titulo')
    verificado = models.BooleanField(default=False, verbose_name=u'Verificado')

    class Meta:
        verbose_name = u"Experiencia laboral"
        verbose_name_plural = u"Experiencias laborales"
        ordering = ['-fechainicio']

    def __str__(self):
        return u'%s %s' % (self.institucion, self.cargo)

    def rep_tipoinstitucion(self):
        return TIPOS_INSTITUCION[self.tipoinstitucion - 1][1]

    def download_link(self):
        return self.archivo.url

    def save(self, *args, **kwargs):
        self.institucion = self.institucion.strip().upper()
        self.cargo = self.cargo.strip().upper()
        self.departamento = self.departamento.strip().upper()
        self.observaciones = self.observaciones.strip().upper()
        super(ExperienciaLaboral, self).save(*args, **kwargs)


class RegimenLaboral(ModeloBase):
    codigo = models.CharField(max_length=10, verbose_name=u"C√≥digo")
    descripcion = models.CharField(max_length=300, verbose_name=u"R√©gimen")
    sigla = models.CharField(max_length=50, verbose_name=u"sigla", null=True, blank=True)

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'R√©gimen Laboral'
        verbose_name_plural = u'R√©gimen Laborales'
        ordering = ('codigo',)
        unique_together = ('codigo',)

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.descripcion = self.descripcion.upper()
        super(RegimenLaboral, self).save(*args, **kwargs)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if ' ' in q:
            s = q.split(" ")
            return RegimenLaboral.objects.filter(Q(codigo__contains=s[0]) & Q(descripcion__contains=s[1])).distinct()[:limit]
        return RegimenLaboral.objects.filter(Q(codigo__contains=q) | Q(descripcion__contains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return u"%s - %s" % (self.codigo, self.descripcion)

    def es_de_distributivo(self):
        return self.distributivopersona_set.exists()

    def en_uso(self):
        estausado = False
        if EscalaSalarial.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif DistributivoPersona.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif DistributivoPersonaHistorial.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif PersonaContratos.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif TipoPermiso.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif TipoPermisoRegimenLaboral.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif PermisoInstitucional.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif IngresoPersonal.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif PodEvaluacionDet.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif MotivoAccionPersonalDetalle.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif AccionPersonal.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif PlanificacionHorasExtrasPersona.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        elif CapEventoPeriodo.objects.filter(status=True, regimenlaboral=self).exists():
            estausado = True
        else:
            return estausado


class NivelOcupacional(ModeloBase):
    codigo = models.CharField(max_length=10, verbose_name=u"C√≥digo")
    descripcion = models.CharField(max_length=300, verbose_name=u"Nivel Ocupacional")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Nivel Ocupacional'
        verbose_name_plural = u'Niveles Ocupacionales'
        ordering = ('codigo',)
        unique_together = ('codigo',)

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.descripcion = self.descripcion.upper()
        super(NivelOcupacional, self).save(*args, **kwargs)

    def en_uso(self):
        estausado = False
        if EscalaSalarial.objects.filter(status=True, rol=self).exists():
            estausado = True
        elif DistributivoPersona.objects.filter(status=True, nivelocupacional=self).exists():
            estausado = True
        elif DistributivoPersonaHistorial.objects.filter(status=True, nivelocupacional=self).exists():
            estausado = True
        else:
            return estausado


class ModalidadLaboral(ModeloBase):
    codigo = models.CharField(max_length=10, verbose_name=u"C√≥digo")
    descripcion = models.CharField(max_length=300, verbose_name=u"Modalidad Laboral")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Modalidad Laboral'
        verbose_name_plural = u'Modalidad Laborales'
        ordering = ('codigo',)
        unique_together = ('codigo',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if ' ' in q:
            s = q.split(" ")
            return ModalidadLaboral.objects.filter(Q(codigo__contains=s[0]) & Q(descripcion__contains=s[1])).distinct()[:limit]
        return ModalidadLaboral.objects.filter(Q(codigo__contains=q) | Q(descripcion__contains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return u"%s - %s" % (self.codigo, self.descripcion)

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.descripcion = self.descripcion.upper()
        super(ModalidadLaboral, self).save(*args, **kwargs)


class EstadoPuesto(ModeloBase):
    descripcion = models.CharField(max_length=300, verbose_name=u"Estado Puesto")
    prioridad = models.IntegerField(default=0, verbose_name=u"Prioridad")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Estado Puesto'
        verbose_name_plural = u'Estado Puestos'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(EstadoPuesto, self).save(*args, **kwargs)


class EscalaOcupacional(ModeloBase):
    codigo = models.CharField(max_length=10, verbose_name=u"C√≥digo")
    descripcion = models.CharField(max_length=300, verbose_name=u"Escala Ocupacional")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Escala Ocupacional'
        verbose_name_plural = u'Escalas Ocupacionales'
        ordering = ('descripcion',)
        unique_together = ('codigo',)

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.descripcion = self.descripcion.upper()
        super(EscalaOcupacional, self).save(*args, **kwargs)

    def es_de_accionpersonal(self):
        return self.accionpersonal_set.exists()

    def en_uso(self):
        estausado = False
        if EscalaSalarial.objects.filter(status=True, grupoocupacional=self).exists():
            estausado = True
        elif DistributivoPersona.objects.filter(status=True, escalaocupacional=self).exists():
            estausado = True
        elif DistributivoPersonaHistorial.objects.filter(status=True, escalaocupacional=self).exists():
            estausado = True
        elif IndiceSeriePuesto.objects.filter(status=True, escalaocupacional=self).exists():
            estausado = True
        elif AccionPersonal.objects.filter(status=True, escalaocupacionalactual=self).exists():
            estausado = True
        elif AccionPersonal.objects.filter(status=True, escalaocupacional=self).exists():
            estausado = True
        else:
            return estausado


class DenominacionPuesto(ModeloBase):
    codigo = models.CharField(max_length=10, verbose_name=u"C√≥digo")
    descripcion = models.CharField(max_length=300, verbose_name=u"Denominaci√≥n de Puesto")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Denominaci√≥n de Puesto'
        verbose_name_plural = u'Denominaci√≥n de Puestos'
        ordering = ('descripcion',)
        # unique_together = ('codigo',)

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.descripcion = self.descripcion.upper()
        super(DenominacionPuesto, self).save(*args, **kwargs)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return DenominacionPuesto.objects.filter(descripcion__icontains=q).distinct()[:limit]

    def flexbox_repr(self):
        return self.descripcion

    def flexbox_alias(self):
        return self.descripcion

    def en_uso(self):
        return PuestoDenominacion.objects.filter(status=True, denominacionpuesto=self).exists()


class NivelEscalaSalarial(ModeloBase):
    descripcion = models.CharField(max_length=300, verbose_name=u"Nivel en letras")
    nivel = models.IntegerField(default=0, verbose_name=u"Nivel en n√∫meros")

    def __str__(self):
        return u"%s" % self.descripcion

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(NivelEscalaSalarial, self).save(*args, **kwargs)

    def en_uso(self):
        return self.escalasalarial_set.values('id').filter(status = True).exist()


class EscalaSalarial(ModeloBase):
    regimenlaboral = models.ForeignKey(RegimenLaboral, blank=True, null=True, verbose_name=u"Rol",
                                       on_delete=models.CASCADE)
    rol = models.ForeignKey(NivelOcupacional, blank=True, null=True, verbose_name=u"Rol", on_delete=models.CASCADE)
    grupoocupacional = models.ForeignKey(EscalaOcupacional, blank=True, null=True, verbose_name=u"Grupo Ocupacional",
                                         on_delete=models.CASCADE)
    nivel = models.ForeignKey(NivelEscalaSalarial, blank=True, null=True, verbose_name=u"Nivel",
                              on_delete=models.CASCADE)
    subnivel = models.IntegerField(default=0, verbose_name=u"Subnivel")
    rmu = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"RMU")

    def __str__(self):
        return f"{self.regimenlaboral}-{self.rol}"


class Puesto(ModeloBase):
    codigo = models.CharField(max_length=100, blank=True, null=True, verbose_name=u"C√≥digo")
    descripcion = models.CharField(max_length=300, verbose_name=u"Nombre o denominaci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(Puesto, self).save(*args, **kwargs)


class PuestoDenominacion(ModeloBase):
    puesto = models.ForeignKey(Puesto, blank=True, null=True, verbose_name=u"Puesto", on_delete=models.CASCADE)
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                           verbose_name=u"Denominaci√≥n de Puesto", on_delete=models.CASCADE)
    observacion = models.CharField(max_length=300, verbose_name=u"Observacion por cambio")
    anio = models.IntegerField(blank=True, null=True, default=datetime.now().year)

    def __str__(self):
        return u"%s" % (self.denominacionpuesto.descripcion if self.denominacionpuesto else 'No registra')

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(PuestoDenominacion, self).save(*args, **kwargs)

    def nivelesexperiencia(self):
        return self.denominacionperfilpuesto_set.filter(status=True)


class DenominacionPerfilPuesto(ModeloBase):
    puestodenominacion = models.ForeignKey(PuestoDenominacion, blank=True, null=True, verbose_name=u"Puesto",
                                           on_delete=models.CASCADE)
    niveltitulo = models.ForeignKey(NivelTitulacion, blank=True, null=True, verbose_name=u"Nivel de titulo",
                                    on_delete=models.CASCADE)
    mesesexperiencia = models.IntegerField(default=0, verbose_name=u"Experiencia en meses")

    def __str__(self):
        return u"%s" % (
            self.puestodenominacion.denominacionpuesto.descripcion if self.puestodenominacion.denominacionpuesto else '')

    def meses_to_anio(self):
        if self.mesesexperiencia > 11:
            if self.mesesexperiencia % 12 == 0:
                anio = self.mesesexperiencia / 12
                anio = "%s a√±os" % int(anio)
            else:
                anio = self.mesesexperiencia / 12
                parte_decimal, parte_entera = math.modf(anio)
                parte_decimal = float("{:.2f}".format(parte_decimal)) * 12
                anio = "%s a√±os %s meses" % (int(parte_entera), round(parte_decimal))
        else:
            anio = "%s meses" % self.mesesexperiencia
        return anio


class TipoCompetenciaLaboral(ModeloBase):
    nombre = models.CharField(max_length=300, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s " % (self.nombre)

    def en_uso(self):
        return self.competencialaboral_set.filter(status=True).exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(TipoCompetenciaLaboral, self).save(*args, **kwargs)


NIVEL_COMPETENCIA = (
    (1, u"ALTO"),
    (2, u"MEDIO"),
    (3, u"BAJO"),
)


class CompetenciaLaboral(ModeloBase):
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
    denominacion = models.CharField(max_length=300, verbose_name=u"Denominaci√≥n")
    definicion = models.TextField(default='', verbose_name=u'Definici√≥n', blank=True)
    tipo = models.ForeignKey(TipoCompetenciaLaboral, blank=True, null=True, verbose_name=u"Competencia laboral",
                             on_delete=models.CASCADE)

    def __str__(self):
        return u"%s - %s - %s" % (self.numero, self.denominacion, self.tipo)

    def configurado(self):
        return self.detallecompetencialaboral_set.filter(status=True).exists()

    def detallecompetencia(self):
        if self.configurado():
            return self.detallecompetencialaboral_set.filter(status=True).first()
        return None

    def en_uso(self):
        return self.competenciasperfilpuesto_set.filter(status=True).exists()

    def save(self, *args, **kwargs):
        self.denominacion = self.denominacion
        self.definicion = self.definicion
        super(CompetenciaLaboral, self).save(*args, **kwargs)


class DetalleCompetenciaLaboral(ModeloBase):
    competencia = models.ForeignKey(CompetenciaLaboral, blank=True, null=True, verbose_name=u"Competencia laboral",
                                    on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
    nivel = models.IntegerField(choices=NIVEL_COMPETENCIA, blank=True, null=True, verbose_name=u'Nivel de competencia')
    comportamiento = models.TextField(default='', verbose_name=u'Comportamiento', blank=True)

    def __str__(self):
        return u"[%s] %s - %s" % (self.numero, self.competencia, self.get_nivel_display())

    def save(self, *args, **kwargs):
        self.comportamiento = self.comportamiento
        super(DetalleCompetenciaLaboral, self).save(*args, **kwargs)

    def cnivel(self):
        return NIVEL_COMPETENCIA[self.nivel - 1][1]


class PeriodoPerfilPuesto(ModeloBase):
    anio = models.IntegerField(default=0, verbose_name=u"A√±o")
    descripcion = models.CharField(blank=True, null=True, max_length=550, verbose_name=u'Descripcion')
    activo = models.BooleanField(default=True, verbose_name=u'Activo')
    fechafin = models.DateTimeField(verbose_name=u'Fecha Fin periodo', null=True, blank=True)
    version = models.IntegerField(default=1, verbose_name=u"Version")

    def __str__(self):
        return u"%s - %s" % (self.anio, self.descripcion)

    def en_uso(self):
        return self.direccionperfilpuesto_set.filter(status=True).exists()

    def direcciones(self):
        return self.direccionperfilpuesto_set.filter(status=True)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(PeriodoPerfilPuesto, self).save(*args, **kwargs)


ESTADO_DIRECCION_PERFIL = (
    (1, u"EN PROCESO"),
    (2, u"ENVIADO A REVISI√ìN"),
    (3, u"APROBADO"),
    (4, u"RECHAZADO"),
)

NIVEL_PERFIL_PUESTO = (
    (1, u"PROFESIONAL"),
    (2, u"NO PROFESIONAL"),
)


class DireccionPerfilPuesto(ModeloBase):
    direccion = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Direccion",
                                  on_delete=models.CASCADE)
    periodo = models.ForeignKey(PeriodoPerfilPuesto, blank=True, null=True, verbose_name=u"Periodo de perfil de puesto",
                                on_delete=models.CASCADE)
    activo = models.BooleanField(default=True, verbose_name=u'Activo')

    def __str__(self):
        return u"%s" % self.direccion.nombre

    def en_uso(self):
        return PerfilPuestoTh.objects.filter(status=True, direccion=self).exists()


class EstructuraProgramatica(ModeloBase):
    codigo = models.CharField(max_length=10, verbose_name=u"C√≥digo")
    descripcion = models.CharField(max_length=300, verbose_name=u"Estructura Program√°tica")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Estructura Program√°tica'
        verbose_name_plural = u'Estructuras Program√°ticas'
        ordering = ('codigo',)
        unique_together = ('codigo',)

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.descripcion = self.descripcion.upper()
        super(EstructuraProgramatica, self).save(*args, **kwargs)


class PuestoAdicional(ModeloBase):
    codigo = models.CharField(max_length=10, verbose_name=u"C√≥digo")
    descripcion = models.CharField(max_length=300, verbose_name=u"Puesto Adicional")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Puesto Adicional'
        verbose_name_plural = u'Puestos Adicionales'
        ordering = ('codigo',)
        unique_together = ('codigo',)

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.descripcion = self.descripcion.upper()
        super(PuestoAdicional, self).save(*args, **kwargs)


class DistributivoPersona(ModeloBase):
    from sga.models import TIPOS_IDENTIFICACION
    persona = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Persona", on_delete=models.CASCADE)
    regimenlaboral = models.ForeignKey(RegimenLaboral, blank=True, null=True, verbose_name=u"R√©gimen Laboral",
                                       on_delete=models.CASCADE)
    nivelocupacional = models.ForeignKey(NivelOcupacional, blank=True, null=True, verbose_name=u"Nivel Ocupacional",
                                         on_delete=models.CASCADE)
    modalidadlaboral = models.ForeignKey(ModalidadLaboral, blank=True, null=True, verbose_name=u"Modalidad Laboral",
                                         on_delete=models.CASCADE)
    partidaindividual = models.IntegerField(default=0, verbose_name=u"Partida Individual")
    estadopuesto = models.ForeignKey(EstadoPuesto, blank=True, null=True, verbose_name=u"Estado Puesto",
                                     on_delete=models.CASCADE)
    grado = models.IntegerField(default=0, verbose_name=u"Grado")
    rmuescala = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"RMU Escala")
    rmupuesto = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"RMU Puesto")
    rmusobrevalorado = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                           verbose_name=u"RMU Sobrevalorado")
    escalaocupacional = models.ForeignKey(EscalaOcupacional, blank=True, null=True, verbose_name=u"Escala Ocupacional",
                                          on_delete=models.CASCADE)
    rucpatronal = models.CharField(max_length=20, verbose_name=u"RUC Patronal")
    codigosucursal = models.CharField(max_length=20, verbose_name=u"C√≥digo Sucursal")
    tipoidentificacion = models.IntegerField(choices=MY_TIPOS_IDENTIFICACION, default=1,
                                             verbose_name=u"Tipo Identificaci√≥n")
    provincia = models.ForeignKey('sga.Provincia', blank=True, null=True, verbose_name=u"Provincia",
                                  on_delete=models.CASCADE)
    canton = models.ForeignKey('sga.Canton', blank=True, null=True, verbose_name=u"Cant√≥n", on_delete=models.CASCADE)
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                           verbose_name=u"Denominaci√≥n Puesto", on_delete=models.CASCADE)
    puestoadicinal = models.ForeignKey(PuestoAdicional, blank=True, null=True, verbose_name=u"Puesto Adicional",
                                       on_delete=models.CASCADE)
    unidadorganica = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Unidad Org√°nica",
                                       on_delete=models.CASCADE)
    aporteindividual = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                           verbose_name=u"Aporte Individual")
    aportepatronal = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Aporte Patronal")
    estructuraprogramatica = models.ForeignKey(EstructuraProgramatica, blank=True, null=True,
                                               verbose_name=u"Estructura Programatica", on_delete=models.CASCADE)
    comisioservicios = models.CharField(max_length=300, verbose_name=u"Comisi√≥n de Servicios")
    numeroarchivo = models.BigIntegerField(default=0, verbose_name=u"N√∫mero Archivo")
    seccion = models.ForeignKey('sagest.SeccionDepartamento', blank=True, null=True, verbose_name=u"Gesti√≥n", on_delete=models.CASCADE)

    def __str__(self):
        return u"%s - %s" % (self.denominacionpuesto.descripcion, self.regimenlaboral.descripcion)

    def info(self):
        return u"%s - %s" % (self.persona, self.denominacionpuesto.descripcion)

    class Meta:
        verbose_name = u'Distributivo de Persona'
        verbose_name_plural = u'Distributivo de Personas'
        ordering = ('persona',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if ' ' in q:
            s = q.split(" ")
            return DistributivoPersona.objects.filter(Q(persona__apellido1__contains=s[0]) & Q(persona__apellido2__contains=s[1]), estadopuesto__id=PUESTO_ACTIVO_ID).distinct()[:limit]
        return DistributivoPersona.objects.filter(Q(persona__nombres__contains=q) | Q(persona__apellido1__contains=q) | Q(persona__apellido2__contains=q) | Q(persona__cedula__contains=q), estadopuesto__id=PUESTO_ACTIVO_ID).distinct()[:limit]

    def flexbox_repr(self):
        return self.persona.cedula + " - " + self.persona.nombre_completo_inverso() + " - " + self.regimenlaboral.__str__()

    def flexbox_alias(self):
        return [self.persona.cedula, self.persona.nombre_completo()]

    def lista_anios_trabajados(self):
        lista = []
        cursor = connection.cursor()
        # data = {}
        sql = "select DISTINCT anio from sagest_trabajadordiajornada where persona_id = %s and status=true order by anio"
        cursor.execute(sql, [self.persona_id])
        results = cursor.fetchall()
        for result in results:
            lista.append(result)
        return lista

    def lista_anios_trabajados_log(self):
        lista = []
        cursor = connection.cursor()
        sql = "select DISTINCT tabla.anio from(select extract(year FROM fecha) anio from sagest_logdia where persona_id = %s and status=true order by fecha)as tabla ORDER BY  tabla.anio DESC"
        cursor.execute(sql, [self.persona_id])
        results = cursor.fetchall()
        for result in results:
            lista.append(result)
        return lista

    def lista_meses_trabajados(self, anio):
        lista = []
        cursor = connection.cursor()
        # data = {}
        sql = "select mes from sagest_trabajadordiajornada where persona_id = %s and anio = %s and status=true order by mes"
        cursor.execute(sql, [self.persona_id, anio])
        results = cursor.fetchall()
        for result in results:
            lista.append(result)
        return lista

    def detalle_jornada(self, dia):
        diasemana = dia.fecha.isoweekday()
        return DetalleJornada.objects.filter(jornada=dia.jornada, dia=diasemana)

    def detalle_marcada(self, dia):
        diasemana = dia.fecha
        return RegistroMarcada.objects.filter(marcada__fecha=diasemana, marcada__persona=self.persona, status=True)

    def no_laborable(self, dia):
        from sga.models import DiasNoLaborable
        diasemana = dia.fecha
        return DiasNoLaborable.objects.filter(fecha=diasemana).exclude(periodo__isnull=False)

    def detalle_permisos(self, dia):
        diasemana = dia.fecha
        return PermisoInstitucionalDetalle.objects.filter(permisoinstitucional__solicita=self.persona,
                                                          fechainicio__lte=diasemana, fechafin__gte=diasemana)

    def lista_capacitacion_evento_periodo(self):
        lista = CapCabeceraSolicitud.objects.values_list('capeventoperiodo_id').filter(participante=self.persona_id,
                                                                                       status=True)
        return CapEventoPeriodo.objects.filter(Q(status=True) & Q(regimenlaboral=self.regimenlaboral) & Q(
            fechainicio__year=datetime.now().date().year) & Q(visualizar=True)).exclude(pk__in=lista)

    def lista_capacitacion_evento_periodo_docente(self):
        from sga.models import CapCabeceraSolicitudDocente, CapEventoPeriodoDocente
        lista = CapCabeceraSolicitudDocente.objects.values_list('capeventoperiodo_id').filter(
            participante=self.persona_id, status=True)
        return CapEventoPeriodoDocente.objects.filter(Q(status=True) & Q(regimenlaboral=self.regimenlaboral) & Q(
            fechainicio__year=datetime.now().date().year) & Q(visualizar=True)).exclude(pk__in=lista)

    def flexbox_repr_con_cargo(self):
        return u'%s - %s - %s' % (self.persona.cedula, self.persona.nombre_completo_inverso(), self.denominacionpuesto)

    def save(self, *args, **kwargs):
        super(DistributivoPersona, self).save(*args, **kwargs)


class DistributivoPersonaHistorial(ModeloBase):
    from sga.models import TIPOS_IDENTIFICACION
    fechahistorial = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Historial")
    persona = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Persona", on_delete=models.CASCADE)
    regimenlaboral = models.ForeignKey(RegimenLaboral, blank=True, null=True, verbose_name=u"R√©gimen Laboral",
                                       on_delete=models.CASCADE)
    nivelocupacional = models.ForeignKey(NivelOcupacional, blank=True, null=True, verbose_name=u"Nivel Ocupacional",
                                         on_delete=models.CASCADE)
    modalidadlaboral = models.ForeignKey(ModalidadLaboral, blank=True, null=True, verbose_name=u"Modalidad Laboral",
                                         on_delete=models.CASCADE)
    partidaindividual = models.IntegerField(default=0, verbose_name=u"Partida Individual")
    estadopuesto = models.ForeignKey(EstadoPuesto, blank=True, null=True, verbose_name=u"Estado Puesto",
                                     on_delete=models.CASCADE)
    grado = models.IntegerField(default=0, verbose_name=u"Grado")
    rmuescala = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"RMU Escala")
    rmupuesto = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"RMU Puesto")
    rmusobrevalorado = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                           verbose_name=u"RMU Sobrevalorado")
    escalaocupacional = models.ForeignKey(EscalaOcupacional, blank=True, null=True, verbose_name=u"Escala Ocupacional",
                                          on_delete=models.CASCADE)
    rucpatronal = models.CharField(max_length=20, verbose_name=u"RUC Patronal")
    codigosucursal = models.CharField(max_length=20, verbose_name=u"C√≥digo Sucursal")
    tipoidentificacion = models.IntegerField(choices=MY_TIPOS_IDENTIFICACION, default=1,
                                             verbose_name=u"Tipo Identificaci√≥n")
    provincia = models.ForeignKey('sga.Provincia', blank=True, null=True, verbose_name=u"Provincia",
                                  on_delete=models.CASCADE)
    canton = models.ForeignKey('sga.Canton', blank=True, null=True, verbose_name=u"Cant√≥n", on_delete=models.CASCADE)
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                           verbose_name=u"Denominaci√≥n Puesto", on_delete=models.CASCADE)
    puestoadicinal = models.ForeignKey(PuestoAdicional, blank=True, null=True, verbose_name=u"Puesto Adicional",
                                       on_delete=models.CASCADE)
    unidadorganica = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Unidad Org√°nica",
                                       on_delete=models.CASCADE)
    aporteindividual = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                           verbose_name=u"Aporte Individual")
    aportepatronal = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Aporte Patronal")
    estructuraprogramatica = models.ForeignKey(EstructuraProgramatica, blank=True, null=True,
                                               verbose_name=u"Estructura Programatica", on_delete=models.CASCADE)
    comisioservicios = models.CharField(max_length=300, verbose_name=u"Comisi√≥n de Servicios")
    numeroarchivo = models.BigIntegerField(default=0, verbose_name=u"N√∫mero Archivo")

    def __str__(self):
        return u"%s" % self.persona

    class Meta:
        verbose_name = u'Distributivo de Persona Historial'
        verbose_name_plural = u'Distributivo de Personas Historial'
        ordering = ('persona',)

    def save(self, *args, **kwargs):
        super(DistributivoPersonaHistorial, self).save(*args, **kwargs)


UBICACION_HOJA_RUTA = (
    (1, u'INTERNA'),
    (2, u'EXTERNA'),
)


class HojaRuta(ModeloBase):
    fecha = models.DateField(verbose_name=u'Fecha')
    ubicacion = models.IntegerField(choices=UBICACION_HOJA_RUTA, default=1, verbose_name=u"Ubicacion")
    destinointerno = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u'Destino interno',
                                       on_delete=models.CASCADE)
    destinoexterno = models.TextField(verbose_name=u"Destino externo")
    actividad = models.TextField(verbose_name=u"Actividad")
    horasalida = models.TimeField(verbose_name=u'Hora de salida')
    horaingreso = models.TimeField(blank=True, null=True, verbose_name=u'Hora de ingreso')
    observacion = models.TextField(verbose_name=u"Observacion")
    solicitante = models.ForeignKey('sga.Persona', related_name='+', verbose_name=u'Solicitante',
                                    on_delete=models.CASCADE)
    trabajador = models.ForeignKey('sga.Persona', related_name='+', verbose_name=u'Trabajador',
                                   on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % self.trabajador

    class Meta:
        verbose_name = u'Hoja de ruta'
        verbose_name_plural = u'Hojas de rutas'
        ordering = ('-fecha',)

    def save(self, *args, **kwargs):
        self.codigo = self.actividad.upper()
        self.observacion = self.observacion.upper()
        self.destinoexterno = self.destinoexterno.upper()
        self.actividad = self.actividad.upper()
        super(HojaRuta, self).save(*args, **kwargs)


# MODELOS NOMINA
class TipoRol(ModeloBase):
    descripcion = models.CharField(default='', max_length=300, verbose_name=u"Tipo N√≥mina")

    def __str__(self):
        return u"%s" % self.descripcion

    def esta_en_periodorol(self):
        return self.periodorol_set.filter(status=True).exists()

    class Meta:
        verbose_name = u'Tipo N√≥mina'
        verbose_name_plural = u'Tipo N√≥minas'
        ordering = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(TipoRol, self).save(*args, **kwargs)


class PeriodoRol(ModeloBase):
    from sga.models import MESES_CHOICES
    anio = models.IntegerField(default=0, verbose_name=u"A√±o")
    mes = models.IntegerField(choices=MESES_CHOICES, default=1, verbose_name=u"Mes")
    tiporol = models.ForeignKey(TipoRol, verbose_name=u"Tipo Rol", on_delete=models.CASCADE)
    descripcion = models.CharField(default='', max_length=300, verbose_name=u"Periodo")
    estado = models.IntegerField(choices=ESTADO_ROL, default=1, verbose_name=u"Estado Rol")

    def __str__(self):
        return u"A√±o: %s - Mes: %s - Tipo Rol: %s- N√≥mina: %s" % (self.anio, self.mes, self.tiporol, self.descripcion)

    class Meta:
        verbose_name = u'Periodo N√≥mina'
        verbose_name_plural = u'Periodo N√≥minas'
        ordering = ('descripcion',)

    def estado_letra(self):
        return ESTADO_ROL[self.estado - 1][1]

    def mes_letra(self):
        from sga.models import MESES_CHOICES
        return MESES_CHOICES[self.mes - 1][1]

    def cantidad_novedades(self):
        return self.novedadperiodorol_set.count()

    def esta_elaborado(self):
        return self.estado == 1

    def esta_novedades(self):
        return self.estado == 2

    def esta_verificado(self):
        return self.estado == 3

    def esta_procesado(self):
        return self.estado == 4

    def esta_cerrado(self):
        return self.estado == 5

    def valor_ingreso(self):
        return null_to_decimal(
            self.detalleperiodorol_set.filter(status=True, rubro__tiporubro=1).aggregate(valor=Sum('valor'))['valor'])

    def valor_egreso(self):
        return null_to_decimal(
            self.detalleperiodorol_set.filter(status=True, rubro__tiporubro=2).aggregate(valor=Sum('valor'))['valor'])

    def valor_informativo(self):
        return null_to_decimal(
            self.detalleperiodorol_set.filter(status=True, rubro__tiporubro=3).aggregate(valor=Sum('valor'))['valor'])

    def cantidad_empleado(self):
        return self.detalleperiodorol_set.values_list('persona_id').filter(status=True).distinct().count()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(PeriodoRol, self).save(*args, **kwargs)


class RubroRol(ModeloBase):
    descripcion = models.CharField(default='', max_length=300, verbose_name=u"Rubro")
    abreviatura = models.CharField(default='', max_length=50, verbose_name=u"Abreviatura")
    tiporubro = models.IntegerField(choices=TIPO_RUBRO_ROL, default=1, verbose_name=u"Tipo Rubro")
    horaextra = models.BooleanField(default=False, verbose_name=u"Aporta Hora Extra")
    aporta = models.BooleanField(default=False, verbose_name=u"Aporta Rubro")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Rubro Rol'
        verbose_name_plural = u'Rubros Roles'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.abreviatura = self.abreviatura.upper()
        super(RubroRol, self).save(*args, **kwargs)

    def detalle_subnovedad_periodo_rol(self, periodo, persona):
        from sagest.models import DetalleSubnovedadPeriodoRol
        return DetalleSubnovedadPeriodoRol.objects.filter(
            detalleperiodorol__rubro=self,
            detalleperiodorol__periodo=periodo,
            detalleperiodorol__persona=persona,
            status=True
        )


class NovedadPeriodoRol(ModeloBase):
    archivo = models.FileField(upload_to='archivosperiodorol/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')
    codigo = models.CharField(default=0, max_length=50, verbose_name=u"Codigo")
    periodo = models.ForeignKey(PeriodoRol, verbose_name=u'Periodo Rol', on_delete=models.CASCADE)


class DetallePeriodoRol(ModeloBase):
    periodo = models.ForeignKey(PeriodoRol, verbose_name=u'Periodo Rol', on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    rubro = models.ForeignKey(RubroRol, verbose_name=u'Rubro', on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor")

    class Meta:
        verbose_name = u'Detalle Periodo Rol'
        verbose_name_plural = u'Detalles Periodo Roles'
        ordering = ('periodo', 'persona', 'rubro')


# Subnovedades
class SubnovedadPeriodoRol(ModeloBase):
    archivo = models.FileField(upload_to='archivossubnovedadesperiodorol/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'Archivo')
    # codigo = models.CharField(default=0, max_length=50, verbose_name=u"Codigo")
    periodo = models.ForeignKey(PeriodoRol, verbose_name=u'Periodo Rol', on_delete=models.CASCADE)


# responsable de cargar subnovedades
class ResponsableNovedad(ModeloBase):
    rubro = models.ForeignKey(RubroRol, verbose_name=u'Novedad', on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Responsable', on_delete=models.CASCADE)
    logo = models.FileField(upload_to='archivoresponsablenovedad/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')

class DetalleSubnovedadPeriodoRol(ModeloBase):
    detalleperiodorol = models.ForeignKey(DetallePeriodoRol, verbose_name=u'Detalle Periodo Rol',
                                          on_delete=models.CASCADE)
    descripcion = models.CharField(default='', max_length=300, verbose_name=u"Descripci√≥n")
    valor = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor")

    class Meta:
        verbose_name = u'Detalle Subnovedad Periodo Rol'
        verbose_name_plural = u'Detalles Subnovedades Periodo Roles'
        ordering = ('id',)


class RolPago(ModeloBase):
    periodo = models.ForeignKey(PeriodoRol, verbose_name=u'Periodo Rol', on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    valoringreso = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor Ingreso")
    valoregreso = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor Egreso")
    valorinformativo = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                           verbose_name=u"Valor Informativo")
    valortotal = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor Total")
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, blank=True, null=True, verbose_name=u'Cargo',
                                           on_delete=models.CASCADE)
    unidadorganica = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u'Departamento',
                                       on_delete=models.CASCADE)
    grado = models.IntegerField(default=0, verbose_name=u"Grado")

    class Meta:
        verbose_name = u'Rol Pago'
        verbose_name_plural = u'Roles Pagos'
        ordering = ('-periodo__anio', '-periodo__mes', 'persona')

    def detallerolinformativo(self):
        return DetallePeriodoRol.objects.filter(periodo=self.periodo, persona=self.persona, rubro__tiporubro=3)

    def detallerolingreso(self):
        return DetallePeriodoRol.objects.filter(periodo=self.periodo, persona=self.persona, rubro__tiporubro=1)

    def detallerolegreso(self):
        return DetallePeriodoRol.objects.filter(periodo=self.periodo, persona=self.persona, rubro__tiporubro=2)

    def detallerolegreso_consolidado(self):
        return RubroRol.objects.filter(tiporubro=2,
                                       detalleperiodorol__periodo=self.periodo,
                                       detalleperiodorol__persona=self.persona).distinct().annotate(suma_valor=Sum('detalleperiodorol__valor'))


    def save(self, *args, **kwargs):
        self.valortotal = Decimal((self.valoringreso - self.valoregreso)).quantize(Decimal('.01'))
        super(RolPago, self).save(*args, **kwargs)


class ImportacionMarcada(ModeloBase):
    archivo = models.FileField(upload_to='marcadas/%Y/%m/%d', verbose_name=u'Archivo')

    def __str__(self):
        return u'%s' % self.archivo

    class Meta:
        verbose_name = u"Archivo"
        verbose_name_plural = u"Archivos"
        unique_together = ('archivo',)

    def nombre_archivo(self):
        return os.path.split(str(self.archivo))[1]

    def tipo_archivo(self):
        a = self.nombre_archivo()
        n = a[a.rindex(".") + 1:]
        if n == 'xlsx' or n == 'xls' or n == 'docx':
            return n
        return 'other'

    def download_link(self):
        return self.archivo.url

    def save(self, *args, **kwargs):
        self.archivo = self.archivo
        super(ImportacionMarcada, self).save(*args, **kwargs)


class Jornada(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u' Nombre')
    activa = models.BooleanField(default=True, verbose_name=u'Activa')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u'Jornada laboral'
        verbose_name_plural = u"Jornadas laborales"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def horas(self, dia):
        return self.detallejornada_set.filter(dia=dia)

    def en_uso(self):
        if self.historialjornadatrabajador_set.exists():
            return True
        elif self.trabajadordiajornada_set.exists():
            return True
        return False

    def detalle_jornada(self):
        if self.detallejornada_set.exists():
            return self.detallejornada_set.all().order_by('dia')
        return None

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(Jornada, self).save(*args, **kwargs)


class DetalleJornada(ModeloBase):
    jornada = models.ForeignKey(Jornada, verbose_name=u'Jornada', on_delete=models.CASCADE)
    dia = models.IntegerField(default=1, verbose_name=u'D√≠a')
    horainicio = models.TimeField(blank=True, null=True, verbose_name=u'Hora inicio')
    horafin = models.TimeField(blank=True, null=True, verbose_name=u'Hora fin')

    class Meta:
        verbose_name = u'Detalle de Jornada laboral'
        verbose_name_plural = u"Detalle de Jornadas laborales"
        ordering = ['horainicio']

    def dia_rep(self):
        from sga.models import DIAS_CHOICES
        return DIAS_CHOICES[self.dia - 1][1]

    def duracionpx(self):
        fechai = datetime.now()
        duracionjornada = (datetime(fechai.year, fechai.month, fechai.day, self.horafin.hour, self.horafin.minute,
                                    self.horafin.second) - (
                               datetime(fechai.year, fechai.month, fechai.day, self.horainicio.hour,
                                        self.horainicio.minute, self.horainicio.second))).seconds
        return int(duracionjornada * 0.005)

    def comienzopx(self):
        iniciojornada = (self.horainicio.hour * 60 * 60) + (self.horainicio.minute * 60) + self.horainicio.second
        return int(iniciojornada * 0.005)


class LogDia(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    importacion = models.ForeignKey(ImportacionMarcada, blank=True, null=True, verbose_name=u'Fichero',
                                    on_delete=models.CASCADE)
    jornada = models.ForeignKey(Jornada, blank=True, null=True, verbose_name=u'Jornada', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Entrada')
    cantidadmarcadas = models.IntegerField(default=0)
    procesado = models.BooleanField(default=False)
    diajustificado = models.BooleanField(default=False, verbose_name=u'Es un d√≠a justificado')
    observacion = models.TextField(verbose_name=u"Observaci√≥n de justificaci√≥n", default='', blank=True, null=True)
    archivo = models.FileField(upload_to='marcadas/justificaciones/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'Archivo justificaci√≥n')

    def __str__(self):
        return u"%s - %s" % (self.persona, self.fecha)

    class Meta:
        verbose_name = u'Log de Marcadas'
        verbose_name_plural = u"Log de Marcadas"
        unique_together = ('persona', 'fecha')

    def no_laborable(self):
        from sga.models import DiasNoLaborable
        if DiasNoLaborable.objects.filter(fecha=self.fecha).exclude(periodo__isnull=False).exists():
            return True
        return False

    def marcadas_log(self):
        lista = []
        for m in self.logmarcada_set.all().order_by('time'):
            lista.append(m)
        for l in range(lista.__len__(), 10):
            lista.append(None)
        return lista

    def restarhoras(self):
        logmarcada = self.logmarcada_set.filter(status=True).order_by('time')
        if logmarcada.count() >= 2:
            horas1 = logmarcada[0]
            horas2 = logmarcada[1]
            formato = "%H:%M:%S"
            # resultado = datetime.strptime(str(horas2.time.time()), formato) - datetime.strptime(str(horas1.time.time()), formato)
            # resultado = datetime.strptime((str(horas2.time).split(":")[0] + ":" +str(horas2.time).split(":")[1] + ":00"), formato) - datetime.strptime((str(horas1.time).split(":")[0] + ":" +str(horas1.time).split(":")[1] + ":00"), formato)
            resultado = convertir_fecha_hora_invertida(
                str(horas2.time).split(":")[0] + ":" + str(horas2.time).split(":")[
                    1] + ":00") - convertir_fecha_hora_invertida(
                str(horas1.time).split(":")[0] + ":" + str(horas1.time).split(":")[1] + ":00")
            if logmarcada.count() == 4:
                horas3 = logmarcada[2]
                horas4 = logmarcada[3]
                # resultado += datetime.strptime(str(horas4.time.time()), formato) - datetime.strptime(str(horas3.time.time()), formato)
                resultado = convertir_fecha_hora_invertida(
                    str(horas4.time).split(":")[0] + ":" + str(horas4.time).split(":")[
                        1] + ":00") - convertir_fecha_hora_invertida(
                    str(horas3.time).split(":")[0] + ":" + str(horas3.time).split(":")[1] + ":00")
            return resultado
        # horas1=self.logmarcada_set.filter(status=True).order_by('time')[0]
        # horas2=self.logmarcada_set.filter(status=True).order_by('time')[1]
        # formato = "%H:%M:%S"
        # resultado = datetime.strptime(str(horas2.time.time()), formato) - datetime.strptime(str(horas1.time.time()), formato)
        return 0

    def solicitud(self):
        return self.detallesolicitudjustificacionmarcada_set.filter(status=True).all()


class LogMarcada(ModeloBase):
    logdia = models.ForeignKey(LogDia, verbose_name=u'Persona', on_delete=models.CASCADE)
    time = models.DateTimeField(blank=True, null=True, verbose_name=u'Marcada en tiempo')
    secuencia = models.IntegerField()
    manual = models.BooleanField(default=False)
    tipomarcada = models.IntegerField(choices=TIPO_MARCADA, default=1, verbose_name=u'Tipo de Marcada')
    tipo = models.IntegerField(choices=TIPO_MARCAJE, blank=True, null=True, verbose_name=u'Tipo de MArcaje')
    ipmarcada = models.CharField(default='', max_length=20, verbose_name=u'Ip publica de marcada')
    direccion = models.TextField(null=True,blank=True, verbose_name=u'¬øDesde donde marc√≥?')
    similitud = models.FloatField(null=True, blank=True, verbose_name='Similitud de imagen comparada')

    def __str__(self):
        return u"%s - %s" % (self.time, self.secuencia)

    class Meta:
        verbose_name = u"Detalle de marcada del d√≠a"
        verbose_name_plural = u"Detalles de marcada del d√≠a"
        ordering = ['secuencia']


class MarcadasDia(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    logdia = models.ForeignKey(LogDia, null=True, blank=True, on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Entrada')
    segundos = models.IntegerField(default=0)

    def actualizar_marcadas(self):
        self.segundos = null_to_numeric(self.registromarcada_set.aggregate(valor=Sum('segundos'))['valor'])
        self.save()


class RegistroMarcada(ModeloBase):
    marcada = models.ForeignKey(MarcadasDia, verbose_name=u'Persona', on_delete=models.CASCADE)
    importacion = models.ForeignKey(ImportacionMarcada, blank=True, null=True, verbose_name=u'Fichero',
                                    on_delete=models.CASCADE)
    entrada = models.DateTimeField(verbose_name=u'Entrada')
    salida = models.DateTimeField(blank=True, null=True, verbose_name=u'Salida')
    segundos = models.IntegerField()
    manual = models.BooleanField(default=False)

    def duracionpx(self):
        fechai = datetime.now()
        duracionmarcada = (
                    datetime(fechai.year, fechai.month, fechai.day, self.salida.time().hour, self.salida.time().minute,
                             self.salida.time().second) - (
                        datetime(fechai.year, fechai.month, fechai.day, self.entrada.time().hour,
                                 self.entrada.time().minute, self.entrada.time().second))).seconds
        return int(duracionmarcada * 0.005)

    def comienzopx(self):
        iniciomarcada = (self.entrada.time().hour * 60 * 60) + (
                    self.entrada.time().minute * 60) + self.entrada.time().second
        return int(iniciomarcada * 0.005)


class HistorialJornadaTrabajador(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    jornada = models.ForeignKey(Jornada, blank=True, null=True, verbose_name=u'Jornada', on_delete=models.CASCADE)
    fechainicio = models.DateField(verbose_name=u'Fecha inicio')
    fechafin = models.DateField(verbose_name=u'Fecha fin', blank=True, null=True)
    archivo_autorizacion = models.FileField(upload_to='historialjornada/trabajador', blank=True, null=True,
                                            verbose_name=u'Archivo de Autorizaci√≥n')

    def __str__(self):
        return u'%s' % self.jornada.nombre

    class Meta:
        verbose_name = u'Historial jornada del trabajador'
        verbose_name_plural = u"Historial jornadas de los trabajadores"
        ordering = ['persona']

    def save(self, *args, **kwargs):
        super(HistorialJornadaTrabajador, self).save(*args, **kwargs)


class TrabajadorDiaJornada(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    jornada = models.ForeignKey(Jornada, blank=True, null=True, verbose_name=u'Jornada', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha')
    anio = models.IntegerField(verbose_name=u'A√±o')
    mes = models.IntegerField(verbose_name=u'Mes')
    totalsegundostrabajados = models.IntegerField(default=0, verbose_name=u'Total segundos trabajados')
    totalsegundospermisos = models.IntegerField(default=0, verbose_name=u'Total segundos permisos')
    totalsegundosextras = models.IntegerField(default=0, verbose_name=u'Total segundos extras')
    totalsegundosatrasos = models.IntegerField(default=0, verbose_name=u'Total segundos atrasos')
    aprobado = models.BooleanField(default=False, verbose_name=u"Aprobado")
    observacion = models.TextField(verbose_name=u"Observacion", default='')
    totalsegundostrabajadosaux = models.IntegerField(default=0, verbose_name=u'Total segundos trabajados Aux')
    totalsegundosextrasaux = models.IntegerField(default=0, verbose_name=u'Total segundos extras Aux')
    totalsegundosatrasosaux = models.IntegerField(default=0, verbose_name=u'Total segundos atrasos Aux')

    def actualizar_totales(self):
        self.totalsegundostrabajados = null_to_numeric(
            self.detalletrabajadordiajornada_set.filter(tipo=1).aggregate(valor=Sum('segundos'))['valor'])
        self.totalsegundospermisos = null_to_numeric(
            self.detalletrabajadordiajornada_set.filter(tipo=2).aggregate(valor=Sum('segundos'))['valor'])
        self.totalsegundosextras = null_to_numeric(
            self.detalletrabajadordiajornada_set.filter(tipo=3).aggregate(valor=Sum('segundos'))['valor'])
        self.totalsegundosatrasados = null_to_numeric(
            self.detalletrabajadordiajornada_set.filter(tipo=4).aggregate(valor=Sum('segundos'))['valor'])

    def rep_mes(self):
        from sga.models import MESES_CHOICES
        return MESES_CHOICES[self.mes - 1][1]

    def trabajadas_horas(self):
        return int(self.totalsegundostrabajados / 3600)

    def trabajadas_minutos(self):
        return int((self.totalsegundostrabajados - (self.trabajadas_horas() * 3600)) / 60)

    def extras_horas(self):
        return int(self.totalsegundosextras / 3600)

    def extras_minutos(self):
        return int((self.totalsegundosextras - (self.extras_horas() * 3600)) / 60)

    def validacion_horas(self):
        return int(self.totalsegundosextras / 3600) + int(
            (self.totalsegundosextras - (self.extras_horas() * 3600)) / 60)

    def validacion_fecha(self, messeleccionado):
        hoy = datetime.now().date()
        mesactual = hoy.month
        if int(messeleccionado) == mesactual:
            return True
        mesanterior = (hoy - relativedelta(months=1)).month
        if mesanterior == int(messeleccionado):
            dias = hoy.day
            if dias <= variable_valor('DIAS_VALIDACION_APROBACION_MARCADAS'):
                return True
        return False

    def atrasos_horas(self):
        from sga.models import DiasNoLaborable
        if DiasNoLaborable.objects.filter(fecha=self.fecha).exclude(periodo__isnull=False).exists():
            return 0
        return int(self.totalsegundosatrasos / 3600)

    def atrasos_minutos(self):
        from sga.models import DiasNoLaborable
        if DiasNoLaborable.objects.filter(fecha=self.fecha).exclude(periodo__isnull=False).exists():
            return 0
        return int((self.totalsegundosatrasos - (self.atrasos_horas() * 3600)) / 60)

    def no_laborable(self):
        from sga.models import DiasNoLaborable
        if DiasNoLaborable.objects.filter(fecha=self.fecha).exclude(periodo__isnull=False).exists():
            return True
        return False

    def permisos_horas(self):
        return int(self.totalsegundospermisos / 3600)

    def permisos_minutos(self):
        return int((self.totalsegundospermisos - (self.permisos_horas() * 3600)) / 60)

    def total_horas_calculadas(self):
        totalhoras = self.trabajadas_horas() + self.extras_horas()
        totalmin = self.trabajadas_minutos() + self.extras_minutos()
        return (totalhoras, totalmin)

    def total_minutos_calculadas(self, trabajadas, extras, atrasos):
        totalminutos = trabajadas + extras - atrasos
        return totalminutos

    def actividad_fecha_corresponde(self, fecha, persona):
        bitacora = BitacoraActividadDiaria.objects.filter(fecha__date__gte=fecha, fecha__date__lte=fecha, status=True,
                                                          persona=persona)
        return bitacora

    def pago_dia(self):
        from pdip.models import ContratoDip
        sueldo = self.persona.contratodip_set.last()
        costomin = round((int(sueldo.rmu) / 160) / 60, 4)
        if ((self.total_horas_calculadas()[0] * 60) + self.total_horas_calculadas()[1]) > 480:
            horas = round(480 * costomin, 2)
        else:
            horas = round(((self.total_horas_calculadas()[0] * 60) + self.total_horas_calculadas()[1]) * costomin, 2)
        return horas


class DetalleTrabajadorDiaJornada(ModeloBase):
    trabajadordiajornada = models.ForeignKey(TrabajadorDiaJornada, verbose_name=u'Trabajador dia jornada',
                                             on_delete=models.CASCADE)
    horainicio = models.TimeField(verbose_name=u'Hora inicio')
    horafin = models.TimeField(verbose_name=u'Hora fin')
    segundos = models.IntegerField(verbose_name=u'Segundos')
    tipo = models.IntegerField(choices=TIPO_MARCADAS_JORNADA, default=1, verbose_name=u'Tipo')


# CONTRATO MANUAL SOLO ESCANEO
RELACION_IES = (
    (1, u'NOMBRAMIENTO'),
    (2, u'CONTRATO CON RELACION DE DEPENDENCIA'),
    (3, u'CONTRATO SIN RELACION DE DEPENDENCIA'),
    (4, u'PROMETEO'),
)

ESTADO_CONTRATO = (
    (1, u'PENDIENTE'),
    (2, u'APROBADO'),
)


class PersonaContratos(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u"Persona", on_delete=models.CASCADE)
    numerodocumento = models.CharField(default='', max_length=40, verbose_name=u"N√∫mero de documento del contrato")
    contratacionrelacionada = models.CharField(default='', max_length=40,
                                               verbose_name=u"N√∫mero de contrato relacionado")
    relacionies = models.IntegerField(choices=RELACION_IES, default=1, verbose_name=u"Ingresar la relaci√≥n laboral")
    fechainicio = models.DateField(null=True, blank=True, verbose_name=u"Fecha Inicio")
    fechafin = models.DateField(null=True, blank=True, verbose_name=u"Fecha Fin")
    archivo = models.FileField(upload_to='contratos/manual/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')
    estado = models.BooleanField(default=False, verbose_name=u"Estado")
    cargo = models.CharField(null=True, blank=True, default='', max_length=250, verbose_name=u'Cargo')
    unidad = models.CharField(null=True, blank=True, default='', max_length=250, verbose_name=u'Unidad / Facultad')
    remuneracion = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Remuneraci√≥n')
    explicacion = models.TextField(null=True, blank=True, default='', verbose_name=u'Explicaci√≥n')
    regimenlaboral = models.ForeignKey(RegimenLaboral, blank=True, null=True, verbose_name=u'Regimen laboral',
                                       on_delete=models.CASCADE)
    dedicacionlaboral = models.ForeignKey(DedicacionLaboral, blank=True, null=True, verbose_name=u'Dedicaci√≥n laboral',
                                          on_delete=models.CASCADE)
    # partidapostulate = models.ForeignKey('postulate.PersonaAplicarPartida', blank=True, null=True, verbose_name=u'Registro ganador de post√∫late', on_delete=models.CASCADE)
    subio_archivo = models.BooleanField(default=False, verbose_name=u"Subio archivo de historial")
    manual = models.BooleanField(default=False, verbose_name=u"¬øEs contrato manual?")
    ultimo_archivo = models.IntegerField(default=0, verbose_name=u"Ultimo archivo guardado")
    unidadorganica = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Unidad Org√°nica",
                                       on_delete=models.CASCADE)
    estadocontrato = models.IntegerField(choices=ESTADO_CONTRATO, default=2, verbose_name=u"Estado de contrato")
    denominacionpuesto = models.ForeignKey('sagest.DenominacionPuesto', on_delete=models.CASCADE, blank=True, null=True,
                                           verbose_name=u'Denominaci√≥n de Puesto')
    periodopostulate = models.ForeignKey('postulate.PersonaPeriodoConvocatoria', blank=True, null=True,
                                         verbose_name=u'Registro persona a realizar la contrataci√≥n',
                                         on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % self.numerodocumento

    class Meta:
        verbose_name = u'Contrato Persona'
        verbose_name_plural = u'Contratos Personas'
        ordering = ('persona',)

    def save(self, *args, **kwargs):
        self.cargo = self.cargo.upper()
        self.explicacion = self.explicacion.upper()
        self.numerodocumento = self.numerodocumento.upper()
        self.unidad = self.unidad.upper()
        super(PersonaContratos, self).save(*args, **kwargs)

    def contrato_firmado(self):
        try:
            archivo = None
            if HistorialArchivosContratos.objects.filter(status=True, personacontrato=self, estado_archivo=2).exists():
                historial = HistorialArchivosContratos.objects.filter(status=True, personacontrato=self,
                                                                      estado_archivo=2).order_by('id')
                for h in historial:
                    if h.archivo:
                        archivo = h.archivo.url
            return archivo
        except Exception as ex:
            pass

    def contrato_firmado_director(self):
        try:
            archivo = None
            if HistorialArchivosContratos.objects.filter(status=True, personacontrato=self, estado_archivo=3).exists():
                historial = HistorialArchivosContratos.objects.filter(status=True, personacontrato=self,
                                                                      estado_archivo=3).order_by('id')
                for h in historial:
                    if h.archivo:
                        archivo = h.archivo.url
            return archivo
        except Exception as ex:
            pass

    def contrato_firmado_id_ultimo(self):
        try:
            estado = 0
            if HistorialArchivosContratos.objects.filter(status=True, personacontrato=self).exists():
                historiales = HistorialArchivosContratos.objects.filter(status=True, personacontrato=self).order_by(
                    'id')
                for h in historiales:
                    estado = h.id
            return estado
        except Exception as ex:
            pass

    def contrato_firmado_estado(self):
        try:
            estado = ''
            if HistorialArchivosContratos.objects.filter(status=True, personacontrato=self).exists():
                historiales = HistorialArchivosContratos.objects.filter(status=True, personacontrato=self).order_by(
                    'id')
                for h in historiales:
                    estado = h.get_estado_archivo_display()
            return estado
        except Exception as ex:
            pass

    def contrato_firmado_estado_label(self):
        try:
            estado = 0
            if HistorialArchivosContratos.objects.filter(status=True, personacontrato=self).exists():
                historiales = HistorialArchivosContratos.objects.filter(status=True, personacontrato=self).order_by(
                    'id')
                for h in historiales:
                    estado = h.estado_archivo
            return estado
        except Exception as ex:
            pass

    def tiene_historial_contrato(self):
        return self.historialarchivoscontratos_set.exists()

    def color_estado(self):
        color = 'warning'
        if self.estadocontrato == 2:
            color = 'success'
        return color


# Modelos de Contratos
ESTADO_CONTRATO = (
    (1, u'PENDIENTE'),
    (2, u'APROBADO')
)


class TipoContrato(ModeloBase):
    nombre = models.CharField(default='', max_length=500, verbose_name=u'Tipo de contrato')

    def __str__(self):
        return u"%s" % self.nombre

    def en_uso(self):
        return self.contratos_set.exists()


class CamposContratos(ModeloBase):
    descripcion = models.CharField(default='', max_length=300, verbose_name=u"Descripcion")
    tipo = models.IntegerField(choices=TIPO_CAMPO, default=1, verbose_name=u"Tipo Campo")
    script = models.TextField(default='', verbose_name=u"Script")
    fijo = models.BooleanField(default=False, verbose_name=u"Fijo")
    identificador = models.CharField(default='', max_length=300, verbose_name=u"Identificador")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Campo Contrato'
        verbose_name_plural = u'Campos Contratos'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def tipoletra(self):
        return TIPO_CAMPO[self.tipo - 1][1]

    def en_uso(self):
        return self.contratoscamposseleccion_set.exists()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.identificador = self.identificador.upper()
        super(CamposContratos, self).save(*args, **kwargs)


class Contratos(ModeloBase):
    anio = models.IntegerField(default=0, verbose_name=u"A√±o")
    descripcion = models.CharField(default='', max_length=300, verbose_name=u"Descripcion")
    regimenlaboral = models.ForeignKey(OtroRegimenLaboral, verbose_name=u"Regimen Laboral", on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='contratos/plantillas/%Y', verbose_name=u'Archivo')
    vigente = models.BooleanField(default=False, verbose_name=u"Vigente")
    tipo = models.ForeignKey(TipoContrato, null=True, blank=True, verbose_name=u"Tipo de Contrato",
                             on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Tipo Contrato'
        verbose_name_plural = u'Tipos Contratos'
        ordering = ('anio', 'descripcion',)

    def download_link(self):
        return self.archivo.url

    def en_uso(self):
        return self.contratopersona_set.filter(status=True).exists()

    def cantidad_campos(self):
        return self.contratoscamposseleccion_set.count()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(Contratos, self).save(*args, **kwargs)


class ArchivoContrato(ModeloBase):
    contrato = models.ForeignKey(Contratos, verbose_name=u'Contrato', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha')
    archivo = models.FileField(upload_to='activos', verbose_name=u'Archivo')
    archivoincidencias = models.FileField(upload_to='activos', blank=True, null=True,
                                          verbose_name=u'Archivo Incidencias')
    estado = models.IntegerField(choices=ESTADO_IMPORTACION)
    numimportados = models.IntegerField(default=0, verbose_name=u"Numero de registros importados")

    def __str__(self):
        return u'%s - %s' % (self.contrato, self.fecha)


class ContratosCamposSeleccion(ModeloBase):
    contrato = models.ForeignKey(Contratos, verbose_name=u"Contrato", on_delete=models.CASCADE)
    campos = models.ForeignKey(CamposContratos, verbose_name=u"Campos", on_delete=models.CASCADE)

    def __str__(self):
        return u"%s - %s" % (self.contrato, self.campos)

    def combo(self):
        return self.campos.script.split(';')

    def funcion(self):
        lista = []
        resultquery = eval(self.campos.script)
        for listacampos in resultquery:
            lista.append(listacampos)
        return lista

    def extraer_datos(self, contratopersona):
        genero = contratopersona.persona.sexo.id
        campos = ContratoPersonaDetalle.objects.filter(contratopersona=contratopersona, campos=self.campos)
        if campos:
            campo = campos[0].valor
            if campo != '':
                return campos[0].valor
        if self.campos.tipo == 5:
            datos = self.campos.script.split(";")
            if datos.__len__() == 2:
                return datos[genero - 1]
            else:
                return ''
        else:
            contrato = contratopersona.contrato
            campo = ContratoPersonaDetalle.objects.filter(contratopersona__contrato=contrato,
                                                          campos=self.campos).exclude(
                contratopersona=contratopersona).order_by('-id')
            if campo:
                return campo[0].valor
            else:
                return ''

    class Meta:
        verbose_name = u'Campo Seleccionado Contrato'
        verbose_name_plural = u'Campos Seleccionados Contratos'
        ordering = ('contrato', 'campos')
        unique_together = ('contrato', 'campos')


class ContratoPersona(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u"Persona", on_delete=models.CASCADE)
    contrato = models.ForeignKey(Contratos, verbose_name=u"Contrato", on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='contratos/contrato', max_length=150, verbose_name=u'Archivo')
    codigocontrato = models.CharField(default='', max_length=20, verbose_name=u"C√≥digo Contrato")
    numero = models.IntegerField(default=1, verbose_name=u"N√∫mero")
    fechainicio = models.DateField(null=True, blank=True, verbose_name=u"Fecha inicio")
    # fechafin = models.DateField(null=True, blank=True, verbose_name=u"Fecha fin")
    unidadorganica = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Unidad Org√°nica",
                                       on_delete=models.CASCADE)
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                           verbose_name=u"Denominaci√≥n Puesto", on_delete=models.CASCADE)
    remuneracion = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Remuneraci√≥n')
    estado = models.IntegerField(choices=ESTADO_CONTRATO, blank=True, null=True, verbose_name=u"Estado")

    def __str__(self):
        return u"%s - %s" % (self.persona, self.contrato)

    class Meta:
        verbose_name = u'Contrato de persona'
        verbose_name_plural = u'Contratos de personas'
        ordering = ('persona',)

    def download_link(self):
        return self.archivo.url

    def secuencial(self):
        valor = 0
        if ContratoPersona.objects.filter(fechainicio=self.fechainicio, contrato=self.contrato).order_by(
                'numero').exists():
            valor = ContratoPersona.objects.filter(fechainicio=self.fechainicio, contrato=self.contrato).order_by(
                'numero').last().numero
        return valor + 1


class ContratoPersonaDetalle(ModeloBase):
    contratopersona = models.ForeignKey(ContratoPersona, verbose_name=u"Contrato Persona", on_delete=models.CASCADE)
    campos = models.ForeignKey(CamposContratos, verbose_name=u"Campos", on_delete=models.CASCADE)
    valor = models.TextField(default='', verbose_name=u"Valor Campo")


QUIEN_APRUEBA = (
    (1, u"UATH"),
    (2, u"SALUD OCUPACIONAL"),
)


class TipoPermiso(ModeloBase):
    descripcion = models.CharField(default='', max_length=300, verbose_name=u"Descripcion")
    observacion = models.CharField(default='', max_length=300, verbose_name=u"Observaci√≥n")
    regimenlaboral = models.ForeignKey(RegimenLaboral, null=True, blank=True, verbose_name=u"Regimen Laboral",
                                       on_delete=models.CASCADE)
    quienaprueba = models.IntegerField(default=1, choices=QUIEN_APRUEBA, verbose_name=u"Aplicar")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Tipo Permiso'
        verbose_name_plural = u'Tipos Permisos'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def persona_creacion(self):
        if not self.usuario_creacion_id == 1:
            return Persona.objects.filter(usuario=self.usuario_creacion)[0]
        return None

    def persona_modificacion(self):
        if self.usuario_modificacion:
            if not self.usuario_modificacion_id == 1:
                return Persona.objects.filter(usuario=self.usuario_modificacion)[0]
        return None

    def utilizado(self):
        return PermisoInstitucional.objects.filter(tipopermiso=self, status=True).exists()

    def permiso_regimenlaboral(self):
        return self.tipopermisoregimenlaboral_set.filter(status=True)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(TipoPermiso, self).save(*args, **kwargs)


class TipoPermisoRegimenLaboral(ModeloBase):
    tipopermiso = models.ForeignKey(TipoPermiso, null=True, blank=True, verbose_name=u"Tipo de Permiso",
                                    on_delete=models.CASCADE)
    regimenlaboral = models.ForeignKey(RegimenLaboral, null=True, blank=True, verbose_name=u"Regimen Laboral",
                                       on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % self.regimenlaboral

    class Meta:
        verbose_name = u'Tipo de permiso en regimen laboral'
        verbose_name_plural = u'Tipos de Permisos en regimen laboral'
        ordering = ('regimenlaboral',)

    def save(self, *args, **kwargs):
        super(TipoPermisoRegimenLaboral, self).save(*args, **kwargs)


class IntegranteFamilia(ModeloBase):
    integrante = models.CharField(max_length=300, default='', verbose_name=u"Integrante de familia")
    descripcion = models.TextField(default='', verbose_name=u"Descripcion")

    def __str__(self):
        return u"%s" % (self.integrante)

    def utilizado(self):
        return self.tipopermisodetallefamilia_set.all().exists()

    class Meta:
        verbose_name = u'Familia'
        verbose_name_plural = u'Familias'
        ordering = ('integrante',)

    def save(self, *args, **kwargs):
        self.integrante = self.integrante.upper()
        self.descripcion = self.descripcion.upper()
        super(IntegranteFamilia, self).save(*args, **kwargs)


APLICAR = (
    (1, u"ANTES"),
    (2, u"DESPUES"),
)


class TipoPermisoDetalle(ModeloBase):
    tipopermiso = models.ForeignKey(TipoPermiso, verbose_name=u"Tipo Permiso", on_delete=models.CASCADE)
    descripcion = models.TextField(default='', verbose_name=u"Descripcion")
    anios = models.IntegerField(default=0, verbose_name=u"A√±os")
    meses = models.IntegerField(default=0, verbose_name=u"Meses")
    dias = models.IntegerField(default=0, verbose_name=u"Dias")
    horas = models.IntegerField(default=0, verbose_name=u"Horas")
    descuentovacaciones = models.BooleanField(default=False, verbose_name=u"Cargo a vacaciones")
    perdirarchivo = models.BooleanField(default=False, verbose_name=u"Archivo")
    pagado = models.BooleanField(default=False, verbose_name=u"Pagado")
    aplicar = models.IntegerField(default=1, choices=APLICAR, verbose_name=u"Aplicar")
    diasplazo = models.IntegerField(default=0, verbose_name=u"Plazo")
    vigente = models.BooleanField(default=False, verbose_name=u"Vigente")

    def __str__(self):
        return u"%s - %s - %s - %s" % (
        self.descripcion, self.tipopermiso, ('HASTA ' + self.dias.__str__() + ' D√çAS DE PERMISO'), (
                    'DEBER√Å SOLICITAR ' + (
                'HASTA ' if self.aplicar == 2 else '') + self.diasplazo.__str__() + ' D√çAS ' + self.get_aplicar_display().__str__()).__str__())

    class Meta:
        verbose_name = u'Tipo Permiso Detalle'
        verbose_name_plural = u'Tipos Permisos Detalle'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def persona_creacion(self):
        if not self.usuario_creacion_id == 1:
            return Persona.objects.filter(usuario=self.usuario_creacion)[0]
        return None

    def persona_modificacion(self):
        if self.usuario_modificacion:
            if not self.usuario_modificacion_id == 1:
                return Persona.objects.filter(usuario=self.usuario_modificacion)[0]
        return None

    def utilizado(self):
        return PermisoInstitucional.objects.filter(tipopermisodetalle=self, status=True).exists()

    def contar_integrante_familia(self):
        return self.tipopermisodetallefamilia_set.values("id").filter(status=True).count()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(TipoPermisoDetalle, self).save(*args, **kwargs)


class TipoPermisoDetalleFamilia(ModeloBase):
    tipopermisodetalle = models.ForeignKey(TipoPermisoDetalle, verbose_name=u"Detalle de Tipo Permiso",
                                           on_delete=models.CASCADE)
    integrantefamilia = models.ForeignKey(IntegranteFamilia, verbose_name=u"Integrante Familia",
                                          on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % (self.integrantefamilia)

    def utilizado_permiso_inst(self):
        return self.permisoinstitucional_set.all().exists()

    class Meta:
        verbose_name = u'Familia detalle tipo permiso'
        verbose_name_plural = u'Familia detalle tipo permiso'
        ordering = ('integrantefamilia__integrante',)

    def save(self, *args, **kwargs):
        super(TipoPermisoDetalleFamilia, self).save(*args, **kwargs)


class CasaSalud(ModeloBase):
    descripcion = models.CharField(default='', max_length=300, verbose_name=u"Descripcion")

    def __str__(self):
        return u"%s" % (self.descripcion)

    class Meta:
        verbose_name = u'Casa salud'
        verbose_name_plural = u'Casas de salud'
        ordering = ('descripcion',)

    def save(self, *args, **kwargs):
        super(CasaSalud, self).save(*args, **kwargs)


ESTADO_PERMISOS = (
    (1, u"SOLICITADO"),
    (2, u"PENDIENTE"),
    (5, u"VALIDADO"),
    (3, u"APROBADO"),
    (4, u"RECHAZADO"),
    (6, u"OBSERVACI√ìN"),
)

ESTADO_BAJA = (
    (1, u"INSERVIBLE"),
    (2, u"OBSOLETO"),
    (3, u"NO OBSOLETO"),
    (4, u'BUENO'),
)

ESTADO_USO = (
    (1, u"SI"),
    (2, u"NO"),
)

TIPO_SOLICITUD_PERMISO = (
    (1, u"SOLICITUD DE PERMISO"),
    (2, u"NOTIFICACI√ìN DE INASISTENCIA"),
    (3, u"VACACIONES"),
)

ESTADO_PERMISOS_APROBADOR = (
    (1, u"APROBADO"),
    (2, u"RECHAZADO"),
    (3, u"VALIDADO"),
    (4, u"OBSERVACI√ìN"),
)


class PermisoInstitucional(ModeloBase):
    secuencia = models.IntegerField(verbose_name=u"Secuencia anual", default=0)
    solicita = models.ForeignKey('sga.Persona', on_delete=models.CASCADE)
    fechasolicitud = models.DateField(verbose_name=u"Fecha Solicitud")
    tiposolicitud = models.IntegerField(default=1, choices=TIPO_SOLICITUD_PERMISO, verbose_name=u"Tipos Solicitud")
    motivo = models.TextField(default='', verbose_name=u"Motivo")
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, verbose_name=u"Denominaci√≥n Puesto",
                                           on_delete=models.CASCADE)
    regimenlaboral = models.ForeignKey(RegimenLaboral, blank=True, null=True, verbose_name=u"R√©gimen Laboral",
                                       on_delete=models.CASCADE)
    unidadorganica = models.ForeignKey(Departamento, verbose_name=u"Unidad Org√°nica", on_delete=models.CASCADE)
    tipopermiso = models.ForeignKey(TipoPermiso, blank=True, null=True, verbose_name=u"Tipo Permiso",
                                    on_delete=models.CASCADE)
    categoriatipopermiso = models.ForeignKey('sagest.CategoriaTipoPermiso', blank=True, null=True,
                                             verbose_name=u"Categoria Tipo Permiso", on_delete=models.CASCADE)
    tipopermisodetalle = models.ForeignKey(TipoPermisoDetalle, blank=True, null=True, verbose_name=u"Detalle Permiso",
                                           on_delete=models.CASCADE)
    descuentovacaciones = models.BooleanField(default=False, verbose_name=u"Cargo a vacaciones")
    estadosolicitud = models.IntegerField(default=1, choices=ESTADO_PERMISOS, verbose_name=u"Estado Solicitud")
    archivo = models.FileField(upload_to='documentos/permisos/%Y/%m/%d', verbose_name=u'Archivo')
    descripcionarchivo = models.CharField(default='', max_length=300, verbose_name=u"Descripci√≥n Archivo")
    permisofamilia = models.ForeignKey(TipoPermisoDetalleFamilia, blank=True, null=True,
                                       verbose_name=u"Detalle de permiso familia", on_delete=models.CASCADE)
    casasalud = models.ForeignKey(CasaSalud, blank=True, null=True, verbose_name=u"Casa de salud",
                                  on_delete=models.CASCADE)
    archivoinforme = models.FileField(upload_to='informepermiso/permisos/%Y/%m/%d', blank=True, null=True,
                                      verbose_name=u'Informe Permiso')

    def __str__(self):
        return u"%s[%s]" % (self.solicita, self.codificacion())

    class Meta:
        verbose_name = u'Permiso Institucional'
        verbose_name_plural = u'Permisos Institucionales'
        ordering = ('estadosolicitud', '-fechasolicitud',)

    def en_uso(self):
        if self.estadosolicitud==6:
            return False
        return self.permisoaprobacion_set.filter(status=True).exists()

    def detalle_permiso_institucional(self):
        return self.permisoinstitucionaldetalle_set.filter(status=True)

    def codificacion(self):
        return u"%s-%s-%s-%s" % (
        self.secuencia, self.solicita.permiso_codigo(), self.unidadorganica.alias, self.fechasolicitud.year)

    def codificacion2(self):
        return u"%s-%s-%s-%s-%s" % (
        self.secuencia, self.solicita.permiso_codigo(), self.tipopermiso, self.unidadorganica.alias,
        self.fechasolicitud.year)

    def contar_aprobados(self):
        return self.permisoaprobacion_set.values('id').count()

    def actulizar_estado(self, request):
        if self.estadosolicitud != 4 or self.tipopermiso.quienaprueba == 2:
            if self.permisoaprobacion_set.count() > 1:
                if self.permisoaprobacion_set.filter(estadosolicitud=1).count() > 1:
                    self.estadosolicitud = 3
                # elif self.permisoaprobacion_set.filter(estadosolicitud=3).count() > 0:
                elif self.permisoaprobacion_set.filter(estadosolicitud=3).count() >= 1:
                    self.estadosolicitud = 5
                elif self.permisoaprobacion_set.filter(estadosolicitud=4).count() >= 1:
                    self.estadosolicitud = 6
                else:
                    self.estadosolicitud = 4
            else:
                if self.permisoaprobacion_set.get().estadosolicitud == 1:
                    self.estadosolicitud = 2
                elif self.permisoaprobacion_set.get().estadosolicitud == 3:
                    self.estadosolicitud = 5
                else:
                    self.estadosolicitud = 4
            self.save(request)

    def ultima_kardex(self):
        if self.estadosolicitud == 1:
            return False
        else:
            ingresopersonal = IngresoPersonal.objects.filter(status=True, persona=self.solicita)
            if ingresopersonal:
                kardex1 = KardexVacacionesDetalle.objects.filter(status=True, kardex=ingresopersonal[0], operacion=2)
                if kardex1:
                    kardex = KardexVacacionesDetalle.objects.filter(status=True, kardex=ingresopersonal[0]).order_by(
                        '-id')
                    if kardex:
                        if kardex[0].operacion == 2:
                            if kardex[0].permiso:
                                if kardex[0].permiso_id == self.id:
                                    return True
                            else:
                                return False
                        return False
        return True

    def fecha_inicio(self):
        return self.permisoinstitucionaldetalle_set.last().fechainicio

    def anio_inicio(self):
        return self.permisoinstitucionaldetalle_set.last().fechainicio.year

    def fecha_fin(self):
        return self.permisoinstitucionaldetalle_set.last().fechafin

    def fecha_aprobacion(self):
        return self.permisoaprobacion_set.last().fechaaprobacion

    def responsable(self):
        resp = self.permisoaprobacion_set.all().order_by('pk')
        for r in resp:
            return r.aprueba.cargo_persona().info()

    def responsable2(self):
        resp = self.permisoaprobacion_set.all().order_by('pk')
        for r in resp:
            return r.aprueba

    def ultimo_aprobador(self):
        resp = self.permisoaprobacion_set.all().order_by('pk').last()
        if resp:
            return resp.aprueba
        return None


    def save(self, *args, **kwargs):
        self.motivo = self.motivo.upper()
        self.descripcionarchivo = self.descripcionarchivo.upper()
        super(PermisoInstitucional, self).save(*args, **kwargs)


class PermisoInstitucionalDetalle(ModeloBase):
    permisoinstitucional = models.ForeignKey(PermisoInstitucional, on_delete=models.CASCADE)
    fechainicio = models.DateField(verbose_name=u"Fecha Inicio")
    fechafin = models.DateField(verbose_name=u"Fecha Fin")
    horainicio = models.TimeField(verbose_name=u'Hora Inicio', blank=True, null=True)
    horafin = models.TimeField(verbose_name=u'Hora Fin', blank=True, null=True)

    def __str__(self):
        return u"%s" % self.permisoinstitucional

    class Meta:
        verbose_name = u'Permiso Institucional Detalle'
        verbose_name_plural = u'Permisos Institucionales'
        ordering = ('fechainicio', 'horainicio')

    def extraer_dias_horas(self):
        diastotales = None
        horastotales = None
        cursor = connection.cursor()
        cursor.execute(
            "select CAST((fechafin-fechainicio)AS text) as dias,CAST((horafin-horainicio)AS text) as horas from sagest_PermisoInstitucionalDetalle where id=" + str(
                self.id))
        results = cursor.fetchall()
        diastotales = 0
        for r in results:
            if r[0] == '0':
                diastotales = int(r[0])
            else:
                diastotales = int(r[0]) + 1
            horastotales = r[1]
        return [diastotales,
                datetime.strptime(str(horastotales), "%H:%M:%S").time()] if diastotales or horastotales else None

    def duracionpx(self):
        horainicio = datetime(2016, 1, 1, 0, 0, 0)
        horafin = datetime(2016, 1, 1, 23, 0, 0)
        fechai = datetime.now()
        if not self.permisoinstitucional.tiposolicitud == 3:
            duracionpermiso = (datetime(fechai.year, fechai.month, fechai.day, self.horafin.hour, self.horafin.minute,
                                        self.horafin.second) - (
                                   datetime(fechai.year, fechai.month, fechai.day, self.horainicio.hour,
                                            self.horainicio.minute, self.horainicio.second))).seconds
        else:
            duracionpermiso = (datetime(fechai.year, fechai.month, fechai.day, horafin.hour, horafin.minute,
                                        horafin.second) - (
                                   datetime(fechai.year, fechai.month, fechai.day, horainicio.hour, horainicio.minute,
                                            horainicio.second))).seconds

        return int(duracionpermiso * 0.005)

    def comienzopx(self):
        horainicio = datetime(2016, 1, 1, 0, 0, 0)
        horafin = datetime(2016, 1, 1, 23, 0, 0)
        if not self.permisoinstitucional.tiposolicitud == 3:
            iniciopermiso = (self.horainicio.hour * 60 * 60) + (self.horainicio.minute * 60) + self.horainicio.second
        else:
            iniciopermiso = (horainicio.hour * 60 * 60) + (horainicio.minute * 60) + horainicio.second
        return int(iniciopermiso * 0.005)

    def save(self, *args, **kwargs):
        super(PermisoInstitucionalDetalle, self).save(*args, **kwargs)


class PermisoAprobacion(ModeloBase):
    permisoinstitucional = models.ForeignKey(PermisoInstitucional, on_delete=models.CASCADE)
    observacion = models.TextField(default='', verbose_name=u"Observacion")
    aprueba = models.ForeignKey('sga.Persona', on_delete=models.CASCADE)
    fechaaprobacion = models.DateField(verbose_name=u"Fecha Aprobaci√≥n")
    estadosolicitud = models.IntegerField(default=1, choices=ESTADO_PERMISOS_APROBADOR,
                                          verbose_name=u"Estado Solicitud")

    def __str__(self):
        return u"Aprobador: %s, solicitante: %s, estado asignado:%s" % (
        self.aprueba, self.permisoinstitucional, self.estadosolicitud)

    def mail_notificar_jefe_departamento(self, nombresistema):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        send_html_mail("Aprobaci√≥n de permiso por jefe de departamento", "emails/permisojefedepartamento.html",
                       {'sistema': nombresistema, 'd': self, 't': miinstitucion()},
                       self.permisoinstitucional.solicita.lista_emails_interno(), [], cuenta=MY_CUENTAS_CORREOS[1][1])

    def mail_notificar_talento_humano(self, nombresistem):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        send_html_mail("Aprobaci√≥n de permiso por talento humano", "emails/permisotalentohumano.html",
                       {'sistema': nombresistem, 'd': self, 't': miinstitucion()},
                       self.permisoinstitucional.solicita.lista_emails_interno(), [], cuenta=MY_CUENTAS_CORREOS[1][1])

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(PermisoAprobacion, self).save(*args, **kwargs)


# KARDEX DE VACACIONES

ESTADO_REGIMEN = (
    (1, u"ACTIVO"),
    (2, u"PASIVO"),
)


class IngresoPersonal(ModeloBase):
    persona = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Persona", on_delete=models.CASCADE)
    regimenlaboral = models.ForeignKey(RegimenLaboral, blank=True, null=True, verbose_name=u"R√©gimen Laboral",
                                       on_delete=models.CASCADE)
    fechaingreso = models.DateField(blank=True, null=True, verbose_name=u"Fecha Ingreso")
    fechasalida = models.DateField(blank=True, null=True, verbose_name=u"Fecha Salida")
    estado = models.IntegerField(choices=ESTADO_REGIMEN, default=2, blank=True, null=True, verbose_name=u'Estado')
    nombramiento = models.BooleanField(default=False, verbose_name=u"Nombramiento")
    contratoindefinido = models.BooleanField(default=False, verbose_name=u"Contrato Indefinido")

    def __str__(self):
        return u"%s - %s" % (self.persona.nombre_completo_inverso(), self.regimenlaboral.descripcion)

    class Meta:
        verbose_name = u'Ingreso de persona a institucion'
        verbose_name_plural = u'Ingreso de personas a institucion'
        ordering = ('persona', 'regimenlaboral')

    def puederenovar(self):
        if not self.kardexvacacionesdetalle_set.filter(status=True, periodoinicio=datetime.now().year - 1,
                                                       periodofin=datetime.now().year).exists():
            if self.fechaingreso == datetime.now().date():
                return True
            else:
                return False
        else:
            return False

    def renovo(self):
        if self.kardexvacacionesdetalle_set.filter(status=True, operacion=1, concepto='Renovaci√≥n Mensual',
                                                   fecha__month=datetime.now().month).exists():
            return True
        else:
            return False

    def saldo(self):
        if self.kardexvacacionesdetalle_set.filter(status=True):
            saldo = self.kardexvacacionesdetalle_set.filter(status=True).latest("fecha")
            if saldo:
                return str(saldo.diasal) + 'd ' + str(saldo.horasal) + 'h ' + str(saldo.minsal) + 'm'
        else:
            return '0d 0h 0m'

    def puedeeliminar(self):
        if self.kardexvacacionesdetalle_set.filter(status=True):
            return False
        else:
            return True

    def recalcular(self):
        lista = []
        i = 0
        diassaldo = 0
        horasaldo = 0
        minutosaldo = 0
        if self.kardexvacacionesdetalle_set.filter(status=True).order_by('fecha').exists():
            for det in self.kardexvacacionesdetalle_set.filter(status=True).order_by('fecha'):
                saldo = None
                if i == 0:
                    saldo = timedelta(days=det.diasal, hours=det.horasal, minutes=det.minsal)
                else:
                    saldo = timedelta(days=diassaldo, hours=horasaldo, minutes=minutosaldo)
                total = None
                diassaldo = None
                horasaldo = None
                minutosaldo = None
                operacion = None
                horasdescontadas = None
                renovado = None
                adelante = None
                lista.append(det.id)
                if self.kardexvacacionesdetalle_set.filter(status=True).order_by('fecha').exclude(
                        id__in=lista).exists():
                    adelante = \
                    self.kardexvacacionesdetalle_set.filter(status=True).order_by('fecha').exclude(id__in=lista)[0]
                    renovado = timedelta(days=int(adelante.diava), hours=int(adelante.horava),
                                         minutes=int(adelante.minva))
                    operacion = adelante.operacion
                    if operacion == 2:
                        if det.diasal < 1 and det.horasal < 1 and det.minsal < 1:
                            return u"Lo sentimos ya no tiene saldo, tiene: 0d 0h 0m"
                        elif saldo < renovado:
                            return u"Lo sentimos ya no tiene saldo, tiene: " + str(det.diasal) + "d " + str(
                                det.horasal) + "h " + str(det.minsal) + "m"

                    minutosactual = (det.diasal * 480) + (det.horasal * 60) + det.minsal
                    minutosadelante = (adelante.diava * 480) + (adelante.horava * 60) + adelante.minva
                    if operacion == 1:
                        minutos = minutosactual + minutosadelante
                    else:
                        minutos = minutosactual - minutosadelante
                    adelante.diasal = minutos // 480
                    adelante.horasal = (minutos - ((minutos // 480) * 480)) // 60
                    adelante.minsal = minutos - (
                                ((minutos // 480) * 480) + (((minutos - ((minutos // 480) * 480)) // 60) * 60))
                    diassaldo = minutos // 480
                    horasaldo = (minutos - ((minutos // 480) * 480)) // 60
                    minutosaldo = minutos - (
                                ((minutos // 480) * 480) + (((minutos - ((minutos // 480) * 480)) // 60) * 60))
                    adelante.save()
                    i += 1
            return ''

    def detallekardex(self):
        if self.kardexvacacionesdetalle_set.exists():
            detalle = self.kardexvacacionesdetalle_set.filter(status=True).order_by("-fecha", "-id")
            return detalle


OPERACION = (
    (1, u"INGRESO"),
    (2, u"SALIDA"),
)


class KardexVacacionesDetalle(ModeloBase):
    kardex = models.ForeignKey(IngresoPersonal, blank=True, null=True, verbose_name=u"Kardex Vacaciones Cabecera",
                               on_delete=models.CASCADE)
    permiso = models.ForeignKey(PermisoInstitucional, blank=True, null=True, verbose_name=u"Permiso Institucional",
                                on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Salida")
    operacion = models.IntegerField(choices=OPERACION, default=1, blank=True, null=True, verbose_name=u'Operacion')
    concepto = models.TextField(default='', blank=True, null=True, verbose_name=u"Descripcion")
    diava = models.IntegerField(default=0, blank=True, null=True, verbose_name=u"Dia de Vacaciones")
    horava = models.IntegerField(default=0, blank=True, null=True, verbose_name=u"Hora de Vacaciones")
    minva = models.IntegerField(default=0, blank=True, null=True, verbose_name=u"Minutos de Vacaciones")
    diasal = models.IntegerField(default=0, blank=True, null=True, verbose_name=u"Dia de Saldo")
    horasal = models.IntegerField(default=0, blank=True, null=True, verbose_name=u"Hora de Saldo")
    minsal = models.IntegerField(default=0, blank=True, null=True, verbose_name=u"Minutos de Saldo")
    periodoinicio = models.IntegerField(blank=True, null=True, verbose_name=u"A√±o periodo inicio")
    periodofin = models.IntegerField(blank=True, null=True, verbose_name=u"A√±o periodo fin")

    def __str__(self):
        return u"%s - (%s - %s - %s)" % (self.kardex, self.diasal, self.horasal, self.minsal)

    class Meta:
        verbose_name = u'Detalle kardex vacacion'
        verbose_name_plural = u'Detalles kardex vacaciones'
        ordering = ('kardex', 'fecha')

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return KardexVacacionesDetalle.objects.filter(Q(kardex__persona__nombres__icontains=q) | Q(kardex__persona__apellido1__icontains=q) | Q(kardex__persona__apellido2__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return self.kardex.persona.nombre_completo_inverso() + " - " + self.permiso.codificacion2()

    def flexbox_alias(self):
        return self.kardex.persona.nombre_completo_inverso() + " - " + self.permiso.codificacion2()

    def save(self, *args, **kwargs):
        super(KardexVacacionesDetalle, self).save(*args, **kwargs)


class RenovacionKardex(ModeloBase):
    fecharenovacion = models.DateField(blank=True, null=True, verbose_name=u"Fecha Renovaci√≥n")
    cantdias = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'D√≠as Renovar')

    def __str__(self):
        return u"%s - %s" % (self.fecharenovacion, self.cantdias)

    class Meta:
        verbose_name = u'Renovaci√≥n Vacacion Mensual'
        verbose_name_plural = u'Renovacion Vacaciones Mensuales'
        ordering = ('fecharenovacion', 'cantdias')


# MODELOS DE EVALUACION
class PeriodoPoa(ModeloBase):
    anio = models.IntegerField(default=0, verbose_name=u"A√±o")
    descripcion = models.CharField(default='', max_length=300, verbose_name=u"Descripcion")
    archivo = models.FileField(upload_to='archivospoa/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')
    mostrar = models.BooleanField(default=True, verbose_name=u"Mostrar periodo")
    ingresar = models.BooleanField(default=True, verbose_name=u"Permite ingresar evidencia, bloquea a edicion")
    edicion = models.BooleanField(default=False,
                                  verbose_name=u"Permite eliminar y editar Indicador, Documentos, detalle y record")
    activo = models.BooleanField(default=False, verbose_name=u'Activo')
    diassubir = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'Dias Subir')
    diascorreccion = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'Dias de Correcci√≥n')
    versionpoa = models.IntegerField(default=0, verbose_name=u"Version poa")
    fechasininformeperiodo = models.DateField(verbose_name=u"Fecha cuando no existe informe generado en el periodo",
                                              blank=True, null=True)
    matrizvaloracion = models.BooleanField(default=True, verbose_name=u"Se integra matriz de valiraci√≥n?")
    matrizevaluacion = models.BooleanField(default=True, verbose_name=u"Se integra matriz de evaluaci√≥n?")


    def __str__(self):
        return u"%s - %s" % (self.anio, self.descripcion)

    class Meta:
        verbose_name = u'Periodo POA'
        verbose_name_plural = u'Periodos POA'
        ordering = ('anio', 'id')

    def solo_informe(self):
        return not self.matrizvaloracion and not self.matrizevaluacion

    def download_archivo(self):
        return self.archivo.url

    def cantidad_departamentocarrera(self, iddepartamento):
        return ObjetivoEstrategico.objects.values('periodopoa_id', 'departamento_id', 'carrera_id').filter(
            periodopoa=self, departamento_id=iddepartamento, status=True).distinct().count()

    def obtener_informecarrera(self, iddepartamento, idcarrera):
        if idcarrera:
            informe = InformeGenerado.objects.filter(periodopoa=self, departamento_id=iddepartamento,
                                                     carrera_id=idcarrera, status=True).order_by("-mes", "-tipo")[:1]
        else:
            informe = InformeGenerado.objects.filter(periodopoa=self, departamento_id=iddepartamento,
                                                     carrera__isnull=True, status=True).order_by("-mes", "-tipo")[:1]
        return informe[0] if informe.exists() else None

    def en_uso(self):
        return self.objetivoestrategico_set.exists()

    def misfechasapertura(self, iddepartamento):
        if self.informegenerado_set.filter(departamento_id=iddepartamento, status=True):
            return self.informegenerado_set.filter(departamento_id=iddepartamento, status=True).order_by('-id')[0]
        else:
            return False

    def informe_generado_objetivos(self, objetivo):
        return self.informegenerado_set.filter(departamento=objetivo.departamento,
                                               gestion=objetivo.gestion,
                                               carrera=objetivo.carrera, status=True).order_by('-id').first()

    def ids_carreras(self):
        return list(self.objetivoestrategico_set.filter(status=True, carrera__isnull=False).order_by('carrera_id').values_list('carrera_id', flat=True).distinct())

    def acciones_documentos(self, usuarioevidencia):
        if self.activo:
            hoy = datetime.now()
            hoymaxmesanterior = datetime.now().date() - timedelta(days=self.diassubir)
            orden = 'acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__orden', \
                    'acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__orden', \
                    'acciondocumento__indicadorpoa__objetivooperativo__orden', \
                    'acciondocumento__indicadorpoa__orden', 'acciondocumento__orden'
            filtro = Q(acciondocumento__status=True, mostrar=True, status=True,
                       acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa__ingresar=True,
                       acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa=self,
                       acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento=usuarioevidencia.unidadorganica)

            if usuarioevidencia.carrera:
                filtroante = filtro = filtro & Q(acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__carrera=usuarioevidencia.carrera)
                filtro = filtro & Q(inicio__lte=hoy, fin__gte=hoy)
                filtroante = filtroante & Q(inicio__lte=hoymaxmesanterior, fin__gte=hoymaxmesanterior)
            elif usuarioevidencia.gestion:
                filtroante = filtro = filtro & Q(acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__gestion=usuarioevidencia.gestion)
                filtro = filtro & Q(inicio__lte=hoy, fin__gte=hoy)
                filtroante = filtroante & Q(inicio__lte=hoymaxmesanterior, fin__gte=hoymaxmesanterior)
            else:
                filtroante = filtro = filtro & Q(acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__carrera__isnull=True,
                                                 acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__gestion__isnull=True)
                filtro = filtro & Q(inicio__lte=hoy, fin__gte=hoy)
                filtroante = filtroante & Q(inicio__lte=hoymaxmesanterior, fin__gte=hoymaxmesanterior)

            acciondocumento = AccionDocumentoDetalle.objects.filter(filtro).order_by(*orden)
            acciondocumentoante = AccionDocumentoDetalle.objects.filter(filtroante).order_by(*orden)

            if acciondocumento and acciondocumentoante:
                acciondocumento = (acciondocumento | acciondocumentoante).order_by(*orden).distinct()
            elif acciondocumentoante and not acciondocumento:
                acciondocumento = acciondocumentoante.order_by(*orden).distinct()
            return acciondocumento
        return None

    def permisos_subirevidencia(self, usuarioevidencia):
        subir_evidencia = True if self.acciones_documentos(usuarioevidencia) else False
        subir_evidenciaatrasada = self.puede_subirevidenciaatrasada(usuarioevidencia)
        return {'puede_subirevidencia':subir_evidencia, 'puede_subirevidenciaatrasada':subir_evidenciaatrasada}

    def infomes_generados(self, usuarioevidencia):
        filtro = Q(status=True, departamento=usuarioevidencia.unidadorganica,
                   gestion=usuarioevidencia.gestion,
                   carrera=usuarioevidencia.carrera)
        return self.informegenerado_set.filter(filtro).order_by('-id')

    def informe_generado(self, usuarioevidencia):
        return self.infomes_generados(usuarioevidencia).first()

    def puede_subirevidenciaatrasada(self, usuarioevidencia):
        informe = self.informe_generado(usuarioevidencia)
        prorroga = self.proroga_subirevidencia(usuarioevidencia)
        if informe or prorroga:
            if informe.fechamax:
                return (datetime.now().date() <= informe.fechamax) or prorroga
            return prorroga
        return False

    def proroga_subirevidencia(self, usuarioevidencia):
        if self.activo:
            hoy = datetime.now().date()
            filtro = Q(status=True, acciondocumentodetalle__status=True,
                       acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa=self,
                       acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa__status=True,
                       acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento=usuarioevidencia.unidadorganica,
                       acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__gestion=usuarioevidencia.gestion,
                       acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__carrera=usuarioevidencia.carrera
                       )
            orden = ('acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__orden',
                     'acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__orden',
                     'acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__orden',
                     'acciondocumentodetalle__acciondocumento__indicadorpoa__orden', 'acciondocumentodetalle__acciondocumento__orden')
            records = AccionDocumentoDetalleRecord.objects.filter(filtro).order_by(*orden).distinct()
            for r in records:
                validacion = r.get_validacion_last()
                if validacion and validacion.estadorevision == 3:
                    fechadisponible = validacion.fecha_creacion.date() + timedelta(days=self.diascorreccion)
                    if fechadisponible >= hoy:
                        return True
        return False

    def evaluaciones(self):
        return self.evaluacionperiodopoa_set.filter(status=True).order_by('fechainicio')

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(PeriodoPoa, self).save(*args, **kwargs)


class EvaluacionPeriodoPoa(ModeloBase):
    periodopoa = models.ForeignKey(PeriodoPoa, verbose_name=u"Periodo POA", on_delete=models.CASCADE)
    descripcion = models.CharField(default='', max_length=100, verbose_name=u"Descripcion")
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u'Fecha inicio')
    fechafin = models.DateField(blank=True, null=True, verbose_name=u'Fecha fin')
    informeanual = models.BooleanField(default=False, verbose_name=u"Para ejecutar un tipo de informe anual")
    porcentajedesempeno = models.FloatField(default=0, verbose_name=u'Porcentaje desempe√±o')
    porcentajemeta = models.FloatField(default=0, verbose_name=u'Porcentaje meta')

    def __str__(self):
        return u"%s" % self.descripcion

    def tiene_matrizvaloracion(self, departamento):
        return self.matrizvaloracionpoa_set.filter(departamento=departamento, status=True)

    def en_uso(self):
        return self.matrizvaloracionpoa_set.filter(status=True)

    def misarchivomatriz(self, idtipo, iddepartamento):
        return MatrizArchivosPoa.objects.filter(matrizvaloracionpoa__evaluacionperiodo=self,
                                                matrizvaloracionpoa__departamento_id=iddepartamento,
                                                tipomatrizarchivo=idtipo, status=True)

    def archivos_matriz(self, idtipo, objetivo):
        return MatrizArchivosPoa.objects.filter(matrizvaloracionpoa__evaluacionperiodo=self,
                                                matrizvaloracionpoa__departamento=objetivo.departamento,
                                                matrizvaloracionpoa__gestion=objetivo.gestion,
                                                matrizvaloracionpoa__carrera = objetivo.carrera,
                                                tipomatrizarchivo=idtipo, status=True)

    def misarchivomatrizvaloracion(self, iddepartamento):
        if MatrizValoracionPoa.objects.filter(evaluacionperiodo=self, departamento_id=iddepartamento, status=True):
            return \
            MatrizValoracionPoa.objects.filter(evaluacionperiodo=self, departamento_id=iddepartamento, status=True)[0]


class ProgramaPoa(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Programa POA'
        verbose_name_plural = u'Programas POA'
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def en_uso(self):
        return self.objetivoestrategico_set.exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(ProgramaPoa, self).save(*args, **kwargs)


class ObjetivoEstrategico(ModeloBase):
    periodopoa = models.ForeignKey(PeriodoPoa, verbose_name=u"Periodo POA", on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, verbose_name=u"Departamento", on_delete=models.CASCADE)
    gestion = models.ForeignKey('sagest.SeccionDepartamento', blank=True, null=True, verbose_name=u"Gesti√≥n", on_delete=models.CASCADE)
    programa = models.ForeignKey(ProgramaPoa, verbose_name=u"Programa", on_delete=models.CASCADE)
    descripcion = models.TextField(default='', verbose_name=u"Descripcion")
    orden = models.IntegerField(default=0, verbose_name=u"Orden")
    carrera = models.ForeignKey('sga.Carrera', blank=True, null=True, verbose_name=u"Carreras",
                                on_delete=models.CASCADE)

    def __str__(self):
        return self.descripcion

    def nombre_registro(self):
        if self.carrera:
            return str(self.carrera)
        elif self.gestion:
            return str(self.gestion)
        return str(self.departamento)

    def name_seleccion(self):
        name = f'<h6 class="texto-blue mb-0"><i class="bi bi-diagram-3 fs-4"></i> {self.departamento}</h6>'
        if self.carrera:
            name += f'<h6 class="texto-blue mb-0"><i class="bi bi-mortarboard fs-4"></i> {self.carrera}</h6>'
        elif self.gestion:
            name += f'<h6 class="texto-blue mb-0"><i class="bi bi-diagram-2 fs-4"></i> {self.gestion}</h6>'
        return name

    def en_uso(self):
        return self.objetivotactico_set.filter(status=True).exists()

    def evidenciasdocumentales(self):
        return EvidenciaDocumentalPoa.objects.filter(
            acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico=self,
            status=True, evaluacionperiodo__isnull=True).order_by(
            'acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__orden',
            'acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__orden',
            'acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__orden',
            'acciondocumentodetalle__acciondocumento__indicadorpoa__orden',
            'acciondocumentodetalle__acciondocumento__orden')

    def evidenciasdocumentalesinforme(self, evaluacionperiodopoa):
        return EvidenciaDocumentalPoa.objects.filter(
            acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico=self,
            status=True, evaluacionperiodo=evaluacionperiodopoa).order_by(
            'acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__orden',
            'acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__orden',
            'acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__orden',
            'acciondocumentodetalle__acciondocumento__indicadorpoa__orden',
            'acciondocumentodetalle__acciondocumento__orden')

    def listadosemestrevaloracion(self, evaluacionperiodo, departamento, idperiodopoa):
        from sga.funciones import numeroactividades, ultimocodigoactividad
        periodoevaluacion = EvaluacionPeriodoPoa.objects.get(pk=evaluacionperiodo)
        lista = []
        listaindi = []
        matriz = MatrizValoracionPoa.objects.get(evaluacionperiodo_id=evaluacionperiodo, departamento_id=departamento,
                                                 status=True)
        if matriz.detallematrizvaloracionpoa_set.filter(status=True):
            listindicadores = matriz.detallematrizvaloracionpoa_set.filter(
                actividad__objetivooperativo__objetivotactico__objetivoestrategico=self, status=True).order_by(
                'actividad__objetivooperativo__objetivotactico__objetivoestrategico__orden',
                'actividad__objetivooperativo__objetivotactico__orden', 'actividad__objetivooperativo__orden',
                'actividad__orden')
            # lista3 = AccionDocumentoDetalle.objects.values_list('acciondocumento__indicadorpoa__id').filter(
            #     acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento_id=departamento,
            #     acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento__status=True,
            #     acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa_id=idperiodopoa,
            #     acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico=self,
            #     acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa__status=True,
            #     acciondocumento__status=True, status=True, acciondocumentodetallerecord__procesado=True,
            #     acciondocumentodetallerecord__rubrica_aprobacion_id=3,
            #     inicio__year=periodoevaluacion.fechainicio.year).exclude(acciondocumento__indicadorpoa__id__in=listindicadores.values_list('actividad__id')).distinct()
            # listaindicador = IndicadorPoa.objects.filter(pk__in=lista3)
            # for lis in listaindicador:
            #     detallematriz = DetalleMatrizValoracionPoa(matrizvaloracion=matriz,
            #                                                actividad=lis,
            #                                                estado_rubrica_id=3)
            #     detallematriz.save()

            for lisdoc in listindicadores:
                listaindi.append([lisdoc.actividad.objetivooperativo.id, lisdoc.actividad.id,
                                  lisdoc.actividad.objetivooperativo.objetivotactico.id])
            for doc in listindicadores:
                spanindicador = numeroactividades(doc.actividad.objetivooperativo.id, listaindi, 1)
                spanobjetivo = numeroactividades(doc.actividad.objetivooperativo.objetivotactico.id, listaindi, 2)
                codigoactividad = ultimocodigoactividad(doc.actividad.objetivooperativo.id, listaindi, 1)
                codigoactividadobjetivo = ultimocodigoactividad(doc.actividad.objetivooperativo.objetivotactico.id,
                                                                listaindi, 2)
                lista.append([doc.actividad.id, doc.actividad.descripcion, doc.actividad.objetivooperativo.descripcion,
                              spanindicador, codigoactividad,
                              doc.actividad.objetivooperativo.objetivotactico.descripcion, spanobjetivo,
                              codigoactividadobjetivo, doc.estado_rubrica.id, doc.cumplimiento, doc.descripcion,
                              doc.estado_rubrica.nombre])
        else:
            if periodoevaluacion.informeanual:
                lista1 = AccionDocumentoDetalle.objects.values_list('acciondocumento__indicadorpoa__id').filter(
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento_id=departamento,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento__status=True,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa_id=idperiodopoa,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico=self,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa__status=True,
                    # acciondocumento__status=True,status=True,inicio__gte=periodoevaluacion.fechainicio, fin__lte=periodoevaluacion.fechafin).distinct()
                    acciondocumento__status=True, status=True, acciondocumentodetallerecord__procesado=False,
                    inicio__year=periodoevaluacion.fechainicio.year).distinct()
                lista2 = AccionDocumentoDetalle.objects.values_list('acciondocumento__indicadorpoa__id').filter(
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento_id=departamento,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento__status=True,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa_id=idperiodopoa,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico=self,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa__status=True,
                    acciondocumento__status=True, status=True, acciondocumentodetallerecord__isnull=True,
                    inicio__year=periodoevaluacion.fechainicio.year).distinct()
                lista3 = AccionDocumentoDetalle.objects.values_list('acciondocumento__indicadorpoa__id').filter(
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento_id=departamento,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento__status=True,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa_id=idperiodopoa,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico=self,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa__status=True,
                    acciondocumento__status=True, status=True, acciondocumentodetallerecord__procesado=True,
                    acciondocumentodetallerecord__rubrica_aprobacion_id=3,
                    inicio__year=periodoevaluacion.fechainicio.year).exclude(
                    acciondocumento__indicadorpoa__id__in=lista1).distinct()

                listindicadores = lista1 | lista2 | lista3
            else:
                lista1 = AccionDocumentoDetalle.objects.values_list('acciondocumento__indicadorpoa__id').filter(
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento_id=departamento,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento__status=True,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa_id=idperiodopoa,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico=self,
                    acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa__status=True,
                    acciondocumento__status=True, status=True, inicio__gte=periodoevaluacion.fechainicio,
                    fin__lte=periodoevaluacion.fechafin).distinct()
                listindicadores = lista1
            documento = IndicadorPoa.objects.filter(pk__in=listindicadores).order_by(
                'objetivooperativo__objetivotactico__objetivoestrategico__orden',
                'objetivooperativo__objetivotactico__orden', 'objetivooperativo__orden', 'orden')
            for lisdoc in documento:
                listaindi.append([lisdoc.objetivooperativo.id, lisdoc.id, lisdoc.objetivooperativo.objetivotactico.id])
            for doc in documento:
                spanindicador = numeroactividades(doc.objetivooperativo.id, listaindi, 1)
                spanobjetivo = numeroactividades(doc.objetivooperativo.objetivotactico.id, listaindi, 2)
                codigoactividad = ultimocodigoactividad(doc.objetivooperativo.id, listaindi, 1)
                codigoactividadobjetivo = ultimocodigoactividad(doc.objetivooperativo.objetivotactico.id, listaindi, 2)
                lista.append(
                    [doc.id, doc.descripcion, doc.objetivooperativo.descripcion, spanindicador, codigoactividad,
                     doc.objetivooperativo.objetivotactico.descripcion, spanobjetivo, codigoactividadobjetivo, 0, 0,
                     ''])
        listadodoindicadores = lista
        return listadodoindicadores

    def listadosemestrematriz(self, evaluacionperiodo, departamento):
        from sga.funciones import numeroactividades, ultimocodigoactividad
        lista = []
        listaindi = []
        matriz = MatrizValoracionPoa.objects.get(evaluacionperiodo_id=evaluacionperiodo, departamento_id=departamento,
                                                 status=True)
        listindicadores = matriz.detallematrizevaluacionpoa_set.filter(
            actividad__objetivooperativo__objetivotactico__objetivoestrategico=self, actividad__status=True,
            actividad__objetivooperativo__status=True, actividad__objetivooperativo__objetivotactico_id__status=True,
            actividad__objetivooperativo__objetivotactico__objetivoestrategico__status=True, status=True).order_by(
            'actividad__objetivooperativo__objetivotactico__objetivoestrategico__orden',
            'actividad__objetivooperativo__objetivotactico__orden', 'actividad__objetivooperativo__orden',
            'actividad__orden')
        for lisdoc in listindicadores:
            listaindi.append([lisdoc.actividad.objetivooperativo.id, lisdoc.actividad.id,
                              lisdoc.actividad.objetivooperativo.objetivotactico.id])
        for doc in listindicadores:
            spanindicador = numeroactividades(doc.actividad.objetivooperativo.id, listaindi, 1)
            spanobjetivo = numeroactividades(doc.actividad.objetivooperativo.objetivotactico.id, listaindi, 2)
            codigoactividad = ultimocodigoactividad(doc.actividad.objetivooperativo.id, listaindi, 1)
            codigoactividadobjetivo = ultimocodigoactividad(doc.actividad.objetivooperativo.objetivotactico.id,
                                                            listaindi, 2)
            metasemestral = \
            doc.actividad.objetivooperativo.metapoa_set.filter(evaluacionperiodo_id=evaluacionperiodo, status=True)[0]
            lista.append([doc.actividad.id, doc.actividad.descripcion, doc.actividad.objetivooperativo.descripcion,
                          spanindicador, codigoactividad,
                          doc.actividad.objetivooperativo.objetivotactico.descripcion, spanobjetivo,
                          codigoactividadobjetivo, doc.estado_rubrica.id, doc.cumplimiento,
                          doc.descripcion, doc.estado_rubrica.nombre, doc.actividad.objetivooperativo.id,
                          doc.actividad.objetivooperativo.objetivotactico.id, metasemestral,
                          doc.semanaplanificada, doc.id, doc.semanaejecutada, doc.cumplimientosemana,
                          doc.presupuestoreformado,
                          doc.presupuestoutilizado, doc.indicadoreficacia, doc.indicadoreficienciatiempo,
                          doc.indicadoreficienciapresupuesto, doc.indicadoreficiencia,
                          doc.indicadordesempeno, doc.metaejecutada, doc.cumplimientometa, doc.observacion,
                          doc.recomendacion,
                          doc.actividad.objetivooperativo.ponderacion, doc.cumplimientoindicador,
                          doc.cumplimientoobjoperativo, doc.aplica, doc.estado_rubrica.imagen])
        listadodoindicadores = lista
        return listadodoindicadores

    def listadosemestrematrizanual(self, evaluacionperiodo, departamento):
        from sga.funciones import numeroactividades, ultimocodigoactividad
        lista = []
        listaindi = []
        matriz = MatrizValoracionPoa.objects.get(evaluacionperiodo_id=evaluacionperiodo, departamento_id=departamento,
                                                 status=True)
        listindicadores = matriz.detallematrizevaluacionpoa_set.values_list('actividad__objetivooperativo_id',
                                                                            'actividad__objetivooperativo__descripcion',
                                                                            'actividad__objetivooperativo__objetivotactico_id',
                                                                            'actividad__objetivooperativo__objetivotactico__descripcion',
                                                                            'observacion', 'recomendacion',
                                                                            'cumplimientoobjoperativo').filter(
            actividad__objetivooperativo__objetivotactico__objetivoestrategico=self, actividad__status=True,
            actividad__objetivooperativo__status=True, actividad__objetivooperativo__objetivotactico__status=True,
            actividad__objetivooperativo__objetivotactico__objetivoestrategico__status=True,
            status=True).distinct().order_by(
            'actividad__objetivooperativo__objetivotactico__objetivoestrategico__orden',
            'actividad__objetivooperativo__objetivotactico__orden', 'actividad__objetivooperativo__orden')
        for lisdoc in listindicadores:
            listaindi.append([lisdoc[0], lisdoc[0], lisdoc[2]])
        for doc in listindicadores:
            spanobjetivo = numeroactividades(doc[2], listaindi, 2)
            codigoactividad = ultimocodigoactividad(doc[0], listaindi, 1)
            codigoactividadobjetivo = ultimocodigoactividad(doc[2], listaindi, 2)
            lista.append([doc[0], doc[1], doc[2], doc[3], doc[4], doc[5], doc[6], spanobjetivo, codigoactividadobjetivo,
                          codigoactividad])
        listadodoindicadores = lista
        return listadodoindicadores

    def objtacticos_seleccionadas(self):
        if self.objetivotactico_set.filter(status=True).exists():
            return self.objetivotactico_set.filter(status=True).order_by('orden')
        return None

    def informes_generados(self):
        informes = InformeGenerado.objects.filter(status=True,
                                                periodopoa=self.periodopoa,
                                                departamento=self.departamento,
                                                gestion=self.gestion,
                                                carrera=self.carrera).order_by('-id')
        return informes

    def informe_generado(self):
        return self.informes_generados().first()

    class Meta:
        verbose_name = u'Objetivo Estrategico'
        verbose_name_plural = u'Objetivos Estrategicos'
        ordering = ('-periodopoa__anio', 'departamento', 'orden',)
        unique_together = ('periodopoa', 'departamento', 'programa', 'descripcion', 'carrera')

    def save(self, *args, **kwargs):
        super(ObjetivoEstrategico, self).save(*args, **kwargs)


class ObjetivoTactico(ModeloBase):
    objetivoestrategico = models.ForeignKey(ObjetivoEstrategico, verbose_name=u"Objetivo Estrategico",
                                            on_delete=models.CASCADE)
    descripcion = models.TextField(default='', verbose_name=u"Descripcion")
    orden = models.IntegerField(default=0, verbose_name=u"Orden")

    def __str__(self):
        return u"%s" % self.descripcion

    def en_uso(self):
        return self.objetivooperativo_set.filter(status=True).exists()

    def en_usotactico(self):
        return AccionDocumentoDetalleRecord.objects.filter(
            acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico=self).exists()

    def objoperativo_seleccionadas(self):
        if self.objetivooperativo_set.filter(status=True).exists():
            return self.objetivooperativo_set.filter(status=True).order_by('orden')
        return None

    class Meta:
        verbose_name = u'Objetivo Tactico'
        verbose_name_plural = u'Objetivos Tacticos'
        ordering = ('-objetivoestrategico__periodopoa__anio', 'objetivoestrategico__departamento', 'orden',)

    def save(self, *args, **kwargs):
        super(ObjetivoTactico, self).save(*args, **kwargs)


class ObjetivoOperativo(ModeloBase):
    objetivotactico = models.ForeignKey(ObjetivoTactico, verbose_name=u"Objetivo Tactico", on_delete=models.CASCADE)
    descripcion = models.TextField(default='', verbose_name=u"Descripcion")
    formula = models.TextField(default='', null=True, blank=True, verbose_name=u"F√≥rmula")
    logicaformula = models.TextField(default='', null=True, blank=True, verbose_name=u"L√≥gica de f√≥rmula")
    orden = models.IntegerField(default=0, verbose_name=u"Orden")
    tipo = models.IntegerField(choices=TIPO_INDICADOR, verbose_name=u'Tipo', default=1, blank=True, null=True)
    ponderacion = models.IntegerField(default=0, verbose_name=u"Ponderacion")

    def __str__(self):
        return u"%s" % self.descripcion

    def en_uso(self):
        return self.indicadorpoa_set.filter(status=True).exists()

    def en_usooperativo(self):
        return AccionDocumentoDetalleRecord.objects.filter(
            acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo=self).exists()

    def indicadores_seleccionadas(self):
        if self.indicadorpoa_set.filter(status=True).exists():
            return self.indicadorpoa_set.filter(status=True).order_by('orden')
        return None

    def listadomestaspoa(self):
        if self.metapoa_set.filter(status=True).exists():
            return self.metapoa_set.filter(status=True).order_by('evaluacionperiodo_id')
        return None

    class Meta:
        verbose_name = u'Objetivo Operativo'
        verbose_name_plural = u'Objetivos Operativos'
        ordering = ('objetivotactico', 'orden')

    def accion_documento(self):
        return AccionDocumento.objects.filter(indicadorpoa__objetivooperativo=self)[0]

    def metas_planificadas(self):
        return self.metapoa_set.filter(status=True)

    def save(self, *args, **kwargs):
        super(ObjetivoOperativo, self).save(*args, **kwargs)


class MetaPoa(ModeloBase):
    objetivooperativo = models.ForeignKey(ObjetivoOperativo, verbose_name=u"Objetivo Tactico", on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u"Numero")
    evaluacionperiodo = models.ForeignKey(EvaluacionPeriodoPoa, verbose_name=u"Objetivo Tactico",
                                          on_delete=models.CASCADE)

    def __str__(self):
        return f'{self.evaluacionperiodo} ({self.numero})'


class IndicadorPoa(ModeloBase):
    objetivooperativo = models.ForeignKey(ObjetivoOperativo, verbose_name=u"Objetivo Operativo",
                                          on_delete=models.CASCADE)
    descripcion = models.TextField(default='', verbose_name=u"Descripcion")
    orden = models.IntegerField(default=0, verbose_name=u"Orden")

    def __str__(self):
        return u"%s" % self.descripcion

    def en_uso(self):
        if self.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.edicion:
            return False
        return self.acciondocumento_set.exists()

    def en_usoindicador(self):
        return AccionDocumentoDetalleRecord.objects.filter(
            acciondocumentodetalle__acciondocumento__indicadorpoa=self).exists()

    def mis_documentos(self):
        return self.acciondocumento_set.filter(status=True)

    def acciondocumento_seleccionadas(self):
        if self.acciondocumento_set.filter(status=True).exists():
            return self.acciondocumento_set.filter(status=True).order_by('orden')
        return None

    def cantidad_documentos(self):
        return self.acciondocumento_set.filter(status=True).count()

    class Meta:
        verbose_name = u'Indicador POA'
        verbose_name_plural = u'Indicadores POA'
        ordering = ('orden',)

    def save(self, *args, **kwargs):
        super(IndicadorPoa, self).save(*args, **kwargs)


class MedioVerificacion(ModeloBase):
    nombre = models.TextField(default='', verbose_name=u"Medio de Verificaci√≥n")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Medio Verificacion'
        verbose_name_plural = u'Medio Verificacion'
        ordering = ('nombre',)

    def en_uso(self):
        if self.acciondocumento_set.filter(medioverificacion=self, status=True).exists():
            return True
        else:
            return False

    def save(self, *args, **kwargs):
        super(MedioVerificacion, self).save(*args, **kwargs)

TIPO_ACCION = (
    (1, 'ACTIVIDAD'),
    (2, 'PROCESO'),
    (3, 'PROYECTO'),
)


class AccionDocumento(ModeloBase):
    indicadorpoa = models.ForeignKey(IndicadorPoa, verbose_name=u"Indicador", on_delete=models.CASCADE)
    descripcion = models.TextField(default='', verbose_name=u"Descripcion")
    tipo = models.IntegerField(choices=TIPO_ACCION, default=0, verbose_name=u"Tipo", blank=True, null=True)
    medioverificacion = models.ForeignKey(MedioVerificacion, verbose_name=u"Medio Verificacion", blank=True, null=True,
                                          on_delete=models.CASCADE)
    observacion = models.TextField(default='', verbose_name=u"Observaci√≥n", blank=True, null=True)
    enlace = models.CharField(default='', max_length=500, verbose_name=u"Enlace", blank=True, null=True)
    porcentaje = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Porcentaje")
    orden = models.IntegerField(default=0, verbose_name=u"Orden")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Accion Documento'
        verbose_name_plural = u'Acciones Documento'
        ordering = ('indicadorpoa__objetivooperativo', 'orden')

    def en_usoaccion(self):
        return AccionDocumentoDetalleRecord.objects.filter(acciondocumentodetalle__acciondocumento=self).exists()

    def mis_detalles(self):
        return self.acciondocumentodetalle_set.filter(status=True)

    def lista_detalles(self):
        lista = []
        cantidad_meses = 0
        edicion = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.edicion
        ingresar = not self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.ingresar
        for m in range(1, 13):
            elim = 0
            if self.acciondocumentodetalle_set.filter(inicio__month=m, status=True).exists():
                det = self.acciondocumentodetalle_set.filter(inicio__month=m, status=True)[0]
                mes_inicio = det.inicio.month
                mes_fin = det.fin.month
                cantidad_meses = mes_fin - mes_inicio
                if det.acciondocumentodetallerecord_set.all().exists():
                    elim = 1
                if edicion:
                    elim = 0
                if ingresar:
                    elim = 1
                lista.append((det.id, det.inicio, det.fin, cantidad_meses + 1, elim, det.mostrar))
            else:
                if not lista or cantidad_meses == 0:
                    lista.append((0, '-', '-', 1, 0, False))
                else:
                    cantidad_meses -= 1
        return lista

    def lista_detalles_revision(self):
        lista = []
        cantidad_meses = 0
        if self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.anio < datetime.now().year:
            mes_revision = 12
        else:
            mes_revision = datetime.now().month
        ingresar = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.ingresar
        for m in range(1, 13):
            if self.acciondocumentodetalle_set.filter(inicio__month=m, status=True).exists():
                det = self.acciondocumentodetalle_set.filter(inicio__month=m, status=True)[0]
                ok = evidencia = revisado = por_revisar = record = bloqueo = 0
                action = ""
                if mes_revision > m or mes_revision == 12:
                    detrecorok = det.acciondocumentodetallerecord_set.order_by("-id")
                    if detrecorok.exists():
                        evidencia = 1
                        record = detrecorok[0].id
                        if detrecorok[0].usuario_revisa is not None and detrecorok[0].usuario_aprobacion is None:
                            revisado = 1
                        elif detrecorok[0].usuario_revisa is None and detrecorok[0].usuario_aprobacion is None:
                            por_revisar = 1
                        elif detrecorok[0].usuario_revisa is not None and detrecorok[0].usuario_aprobacion is None:
                            bloqueo = 0
                        elif detrecorok[0].usuario_revisa is not None and detrecorok[0].usuario_aprobacion is not None:
                            bloqueo = 1
                        if not ingresar:
                            bloqueo = 1
                        if detrecorok[0].usuario_envia is None:
                            action = "sin_evidencia"
                        else:
                            action = "con_evidencia"
                    else:
                        if not ingresar:
                            bloqueo = 1
                        tipo = "addsin"
                        action = "sin_evidencia"
                    ok = 1
                if not ingresar and evidencia == 0:
                    ok = 0
                mes_inicio = det.inicio.month
                mes_fin = det.fin.month
                cantidad_meses = mes_fin - mes_inicio
                lista.append((det.id, det.inicio, det.fin, cantidad_meses + 1, ok, revisado, por_revisar, evidencia,
                              record, det.get_estado_accion_display(), action, det.estado_accion, bloqueo))
            else:
                if not lista or cantidad_meses == 0:
                    lista.append((0, '-', '-', 1, 0, 0, 0, 0, 0, "", "", 0, 0))
                else:
                    cantidad_meses -= 1
        return lista

    def lista_detalles_revisiondos(self):
        lista = []
        cantidad_meses = 0
        if self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.anio < datetime.now().year:
            mes_revision = 12
        else:
            mes_revision = datetime.now().month
        ingresar = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.ingresar
        for m in range(1, 13):
            listaevidencia = []
            if self.acciondocumentodetalle_set.filter(inicio__month=m, status=True).exists():
                det = self.acciondocumentodetalle_set.filter(inicio__month=m, status=True)[0]
                for detevidencia in det.evidenciadocumentalpoa_set.filter(status=True).order_by('id'):
                    listaevidencia.append(detevidencia)
                ok = evidencia = revisado = por_revisar = record = bloqueo = 0
                action = ""
                if mes_revision >= m or mes_revision == 12:
                    detrecorok = det.acciondocumentodetallerecord_set.filter(status=True).order_by("-id")
                    if detrecorok.exists():
                        evidencia = 1
                        record = detrecorok[0].id
                        if detrecorok[0].usuario_revisa is not None and detrecorok[0].usuario_aprobacion is None:
                            revisado = 1
                        elif detrecorok[0].usuario_revisa is None and detrecorok[0].usuario_aprobacion is None:
                            por_revisar = 1
                        elif detrecorok[0].usuario_revisa is not None and detrecorok[0].usuario_aprobacion is None:
                            bloqueo = 0
                        elif detrecorok[0].usuario_revisa is not None and detrecorok[0].usuario_aprobacion is not None:
                            bloqueo = 1
                        if not ingresar:
                            bloqueo = 1
                        if detrecorok[0].usuario_envia is None:
                            action = "sin_evidenciados"
                        else:
                            action = "con_evidenciados"
                    else:
                        if not ingresar:
                            bloqueo = 1
                        tipo = "addsin"
                        action = "sin_evidenciados"
                    ok = 1
                if not ingresar and evidencia == 0:
                    ok = 0
                mes_inicio = det.inicio.month
                mes_fin = det.fin.month
                cantidad_meses = mes_fin - mes_inicio
                # lista.append((det.id, det.inicio, det.fin, cantidad_meses + 1, ok, revisado, por_revisar, evidencia, record, det.get_estado_accion_display(), action, det.estado_accion, bloqueo))
                lista.append((det.id, det.inicio, det.fin, cantidad_meses + 1, ok, revisado, por_revisar, evidencia,
                              record, det.estado_rubrica.nombre, action, det.estado_rubrica.id, bloqueo,
                              listaevidencia))
            else:
                if not lista or cantidad_meses == 0:
                    lista.append((0, '-', '-', 1, 0, 0, 0, 0, 0, "", "", 0, 0, 0))
                else:
                    cantidad_meses -= 1
        return lista

    def lista_detalles_aprobar(self):
        lista = []
        cantidad_meses = 0
        if self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.anio < datetime.now().year:
            mes_revision = 12
        else:
            mes_revision = datetime.now().month
        ingresar = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.ingresar
        for m in range(1, 13):
            if self.acciondocumentodetalle_set.filter(inicio__month=m, status=True).exists():
                det = self.acciondocumentodetalle_set.filter(inicio__month=m, status=True)[0]
                ok = evidencia = revisado = por_revisar = record = bloqueo = virgen = 0
                action = ""
                if mes_revision > m or mes_revision == 12:
                    detrecorok = det.acciondocumentodetallerecord_set.filter(status=True).order_by("-id")
                    if detrecorok.exists():
                        evidencia = 1
                        record = detrecorok[0].id
                        if detrecorok[0].usuario_revisa is not None and detrecorok[0].usuario_aprobacion is None:
                            por_revisar = 1
                        elif detrecorok[0].usuario_revisa is not None and detrecorok[0].usuario_aprobacion is not None:
                            revisado = 1
                        elif detrecorok[0].usuario_revisa is None and detrecorok[0].usuario_aprobacion is None:
                            virgen = 1
                            bloqueo = 1
                        if detrecorok[0].informegeneradodetalle_set.filter(status=True,
                                                                           informegenerado__tipo=2).exists():
                            bloqueo = 1
                        if detrecorok[0].procesado:
                            bloqueo = 1
                        if not ingresar:
                            bloqueo = 1
                        if detrecorok[0].usuario_envia is not None:
                            action = "con_evidencia"
                        else:
                            action = "sin_evidencia"
                    else:
                        if not ingresar:
                            bloqueo = 1
                        action = "sin_evidencia"
                    ok = 1
                if not ingresar and evidencia == 0:
                    ok = 0
                mes_inicio = det.inicio.month
                mes_fin = det.fin.month
                cantidad_meses = mes_fin - mes_inicio
                lista.append((det.id, det.inicio, det.fin, cantidad_meses + 1, ok, revisado, por_revisar, evidencia,
                              record, det.get_estado_accion_display(), action, det.estado_accion, bloqueo, virgen))
            else:
                if not lista or cantidad_meses == 0:
                    lista.append((0, '-', '-', 1, 0, 0, 0, 0, 0, "", "", 0, 0, 0))
                else:
                    cantidad_meses -= 1
        return lista

    def lista_detalles_aprobardos(self):
        lista = []
        cantidad_meses = 0
        if self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.anio < datetime.now().year:
            mes_revision = 12
        else:
            mes_revision = datetime.now().month
        ingresar = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.ingresar
        for m in range(1, 13):
            if self.acciondocumentodetalle_set.filter(inicio__month=m, status=True).exists():
                det = self.acciondocumentodetalle_set.filter(inicio__month=m, status=True)[0]
                ok = evidencia = revisado = por_revisar = record = bloqueo = virgen = 0
                action = ""
                if mes_revision > m or mes_revision == 12:
                    detrecorok = det.acciondocumentodetallerecord_set.order_by("-id")
                    if detrecorok.exists():
                        evidencia = 1
                        record = detrecorok[0].id
                        if detrecorok[0].usuario_revisa is not None and detrecorok[0].usuario_aprobacion is None:
                            por_revisar = 1
                        elif detrecorok[0].usuario_revisa is not None and detrecorok[0].usuario_aprobacion is not None:
                            revisado = 1
                        elif detrecorok[0].usuario_revisa is None and detrecorok[0].usuario_aprobacion is None:
                            virgen = 1
                            bloqueo = 1
                        if detrecorok[0].informegeneradodetalle_set.filter(status=True,
                                                                           informegenerado__tipo=2).exists():
                            bloqueo = 1
                        if detrecorok[0].procesado:
                            bloqueo = 1
                        if not ingresar:
                            bloqueo = 1
                        if detrecorok[0].usuario_envia is not None:
                            action = "con_evidenciados"
                        else:
                            action = "sin_evidenciados"
                    else:
                        if not ingresar:
                            bloqueo = 1
                        action = "sin_evidenciados"
                    ok = 1
                if not ingresar and evidencia == 0:
                    ok = 0
                mes_inicio = det.inicio.month
                mes_fin = det.fin.month
                cantidad_meses = mes_fin - mes_inicio
                lista.append((det.id, det.inicio, det.fin, cantidad_meses + 1, ok, revisado, por_revisar, evidencia,
                              record, det.get_estado_accion_display(), action, det.estado_accion, bloqueo, virgen))
            else:
                if not lista or cantidad_meses == 0:
                    lista.append((0, '-', '-', 1, 0, 0, 0, 0, 0, "", "", 0, 0, 0))
                else:
                    cantidad_meses -= 1
        return lista

    def lista_detalles_subir(self):
        lista = []
        fechamax = None
        cantidad_meses = 0
        periodo = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa
        departamento = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.departamento
        if self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.anio < datetime.now().year:
            mes_revision = 12
        else:
            mes_revision = datetime.now().month

        informegenerado = InformeGenerado.objects.filter(periodopoa=periodo, departamento=departamento,
                                                         status=True).order_by("-id")
        if departamento.id in [7, 13]:
            fechamax = informegenerado[
                0].fechamax if informegenerado.exists() else datetime.now().date()  # - timedelta(days=1)
        else:
            informefechamax = InformeGenerado.objects.filter(periodopoa=periodo, departamento=departamento,
                                                             status=True).order_by("-fechamax")
            if informefechamax:
                fechamax = informefechamax[0].fechamax
            # fechamax = informegenerado[0].fechamax if informegenerado.exists() else datetime.now().date() - timedelta(days=1)
        # if informegenerado.exists():
        #     if informegenerado[0].tipo == 2 and not informegenerado[0].procesado:
        #         fechamax = datetime.now().date() - timedelta(days=1)
        if fechamax:
            habilitado = True if datetime.now().date() <= fechamax else False
        else:
            habilitado = False
        ingresar = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.ingresar
        for m in range(1, 13):
            if self.acciondocumentodetalle_set.filter(inicio__month=m, status=True, mostrar=True).exists():
                det = self.acciondocumentodetalle_set.filter(inicio__month=m, status=True)[0]
                ok = evidencia = revisado = por_revisar = record = bloqueo = 0
                action = ""
                procesado = False
                if mes_revision > m or mes_revision == 12:
                    detrecorok = det.acciondocumentodetallerecord_set.all().order_by("-id")
                    if detrecorok.exists():
                        evidencia = 1
                        record = 0
                        por_revisar = 1
                        if detrecorok[0].usuario_revisa is None and detrecorok[0].usuario_aprobacion is None and \
                                detrecorok[0].usuario_envia is not None:
                            por_revisar = 0
                            record = detrecorok[0].id
                        if not habilitado or not ingresar or det.estado_accion == 6 or det.estado_accion == 2:
                            bloqueo = 1
                            record = detrecorok[0].id
                        if detrecorok[0].usuario_envia is None:
                            action = "sin_evidencia"
                        else:
                            action = "con_evidencia"
                        procesado = detrecorok[0].procesado
                    else:
                        if not habilitado or not ingresar:
                            bloqueo = 1
                        action = "sin_evidencia"
                    ok = 1
                if not ingresar and evidencia == 0:
                    ok = 0
                mes_inicio = det.inicio.month
                mes_fin = det.fin.month
                cantidad_meses = mes_fin - mes_inicio
                lista.append((det.id, det.inicio, det.fin, cantidad_meses + 1, ok, revisado, por_revisar, evidencia,
                              record, det.get_estado_accion_display(), action, det.estado_accion, bloqueo, procesado))
            else:
                if not lista or cantidad_meses == 0:
                    lista.append((0, '-', '-', 1, 0, 0, 0, 0, 0, "", "", 0, 0, False))
                else:
                    cantidad_meses -= 1
        return lista

    def lista_detalles_subir_verdos_old(self):
        lista = []
        cantidad_meses = 0
        hoy = datetime.now()
        eObjetivo = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico
        periodopoa = eObjetivo.periodopoa
        habilitado = self.puede_subirevidenciaatrasada()
        mes_revision = 12 if periodopoa.anio < hoy.year else hoy.month
        ingresar = periodopoa.ingresar
        for m in range(1, 13):
            eAccionDetalle = self.acciondocumentodetalle_set.filter(inicio__month=m, status=True, mostrar=True).first()
            if eAccionDetalle:
                ok = evidencia = revisado = por_revisar = record = 0
                bloqueo = 0 if habilitado else 1
                action = ""
                procesado = False
                if hoy.date() > eAccionDetalle.fin or mes_revision == 12:
                    eRecord = eAccionDetalle.acciondocumentodetallerecord_set.all().order_by("-id").first()
                    if eRecord:
                        record = eRecord.id
                        revisado, por_revisar, bloqueo, action = self.validaciones_old(eRecord, revisado, por_revisar, bloqueo)
                        bloqueo = 0 if eRecord.puede_subirevidenciaatrasada() else 1
                        procesado = eRecord.procesado
                    else:
                        if not ingresar:
                            bloqueo = 1
                        action = "sin_evidenciados"
                    ok = 1
                if not ingresar and evidencia == 0:
                    ok = 0
                mes_inicio = eAccionDetalle.inicio.month
                mes_fin = eAccionDetalle.fin.month
                cantidad_meses = mes_fin - mes_inicio
                lista.append((eAccionDetalle.id, eAccionDetalle.inicio, eAccionDetalle.fin,
                              cantidad_meses + 1, ok, revisado, por_revisar, evidencia,
                              record, eAccionDetalle.estado_rubrica.nombre, action,
                              eAccionDetalle.estado_rubrica_id, bloqueo, procesado))
            else:
                if not lista or cantidad_meses == 0:
                    lista.append((0, '-', '-', 1, 0, 0, 0, 0, 0, "", "", 0, 0, False))
                else:
                    cantidad_meses -= 1
        return lista

    def lista_detalles_subir_verdos(self):
        lista = []
        cantidad_meses = 0
        hoy = datetime.now()
        eObjetivo = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico
        periodopoa = eObjetivo.periodopoa
        habilitado = self.puede_subirevidenciaatrasada()
        mes_revision = 12 if periodopoa.anio < hoy.year else hoy.month
        ingresar = periodopoa.ingresar
        for m in range(1, 13):
            eAccionDetalle = self.acciondocumentodetalle_set.filter(inicio__month=m, status=True, mostrar=True).first()
            if eAccionDetalle:
                ok = evidencia = revisado = por_revisar = record = 0
                bloqueo = 0 if habilitado else 1
                action = ""
                procesado, prevalidacion = False, {}
                if hoy.date() > eAccionDetalle.fin or mes_revision == 12:
                    eRecord = eAccionDetalle.acciondocumentodetallerecord_set.all().order_by("-id").first()
                    if eRecord:
                        prevalidacion = {'estado':eRecord.estadorevision,
                                         'get_estado':eRecord.get_estadorevision_display(),
                                         'color_estado': eRecord.color_estadorevision()}
                        evidencia = 1
                        record = eRecord.id
                        revisado, por_revisar, bloqueo, action = self.validaciones_old(eRecord, revisado, por_revisar, bloqueo)
                        bloqueo = 0 if eRecord.puede_subirevidenciaatrasada() else 1
                        procesado = eRecord.procesado
                    else:
                        if not ingresar:
                            bloqueo = 1
                        action = "sin_evidenciados"
                    ok = 1
                if not ingresar and evidencia == 0:
                    ok = 0
                mes_inicio = eAccionDetalle.inicio.month
                mes_fin = eAccionDetalle.fin.month
                cantidad_meses = mes_fin - mes_inicio
                lista.append({
                    'id': eAccionDetalle.id, 'inicio': eAccionDetalle.inicio,
                    'fin': eAccionDetalle.fin,'cantidad_meses': cantidad_meses + 1,
                    'ok': ok,'revisado': revisado,'por_revisar': por_revisar,
                    'evidencia': evidencia,'record': record, 'action': action,
                    'estado_rubrica_nombre': eAccionDetalle.estado_rubrica.nombre,
                    'estado_rubrica_id': eAccionDetalle.estado_rubrica_id,
                    'bloqueo': bloqueo, 'procesado': procesado, 'prevalidacion':prevalidacion
                })
            else:
                if not lista or cantidad_meses == 0:
                    lista.append({
                        'id': 0, 'inicio': '-', 'fin': '-','cantidad_meses': 1,
                        'ok': 0,'revisado': 0,'por_revisar': 0,'evidencia': 0,
                        'record': 0, 'estado_rubrica_nombre': "",'action': "",
                        'estado_rubrica_id': 0,'bloqueo': 0, 'procesado': False, 'prevalidacion':{}
                    })
                else:
                    cantidad_meses -= 1
        return lista
    # NUEVAS FUNCIONES
    def permisos_revision(self):
        lista = []
        hoy = datetime.now()
        periodopoa = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa
        anio = periodopoa.anio
        ingresar = periodopoa.ingresar
        bloqueo = 0 if ingresar else 1
        cantidad_meses = 0
        mes_revision = 12 if anio < hoy.year else hoy.month
        for m in range(1, 13):
            listaevidencia, prevalidacion = [], {}
            eDetalle = self.mis_detalles().filter(inicio__month=m).first()
            if eDetalle:
                for detevidencia in eDetalle.evidenciadocumentalpoa_set.filter(status=True).order_by('id'):
                    listaevidencia.append(detevidencia)
                ok = evidencia = revisado = por_revisar = record = 0
                action = ""
                if mes_revision >= m or mes_revision == 12:
                    eRecord = eDetalle.acciondocumentodetallerecord_set.filter(status=True).order_by("-id").first()
                    if eRecord:
                        evidencia, record = 1, eRecord.id
                        por_revisar = 0 if eRecord.estadorevision == 6 else 1
                        validacion = eRecord.get_historial_last()
                        if validacion:
                            estado = validacion.estadorevision
                            get_estado = validacion.get_estadorevision_display()
                            color_estado = validacion.color_estadorevision()
                        else:
                            estado, get_estado, color_estado = eRecord.estadorevision, \
                                                               eRecord.get_estadorevision_display(), \
                                                               eRecord.color_estadorevision()
                        prevalidacion = {'estado': estado,
                                         'get_estado': get_estado,
                                         'color_estado': color_estado}
                        if anio < 2024:
                            revisado, por_revisar, bloqueo, action = self.validaciones_old(eRecord, revisado, por_revisar, bloqueo)
                        else:
                            if not eRecord.usuario_envia:
                                action = "sin_evidenciados"
                            else:
                                action = "con_evidenciados"
                    else:
                        action = "sin_evidenciados"
                    ok = 1
                if not ingresar and evidencia == 0:
                    ok = 0

                mes_inicio = eDetalle.inicio.month
                mes_fin = eDetalle.fin.month
                cantidad_meses = mes_fin - mes_inicio
                lista.append({
                    'id': eDetalle.id,
                    'inicio': eDetalle.inicio,
                    'fin': eDetalle.fin,
                    'cantidad_meses': cantidad_meses + 1,
                    'ok': ok,
                    'revisado': revisado,
                    'por_revisar': por_revisar,
                    'evidencia': evidencia,
                    'record': record,
                    'estado_rubrica_nombre': eDetalle.estado_rubrica.nombre,
                    'action': action,
                    'estado_rubrica_id': eDetalle.estado_rubrica.id,
                    'bloqueo': bloqueo,
                    'prevalidacion': prevalidacion,
                    'listaevidencia': listaevidencia
                })
            else:
                if not lista or cantidad_meses == 0:
                    lista.append({
                        'id': 0,
                        'inicio': '-',
                        'fin': '-',
                        'cantidad_meses': 1,
                        'ok': 0,
                        'revisado': 0,
                        'por_revisar': 0,
                        'evidencia': 0,
                        'record': 0,
                        'estado_rubrica_nombre': "",
                        'action': "",
                        'estado_rubrica_id': 0,
                        'bloqueo': 0,
                        'prevalidacion': {},
                        'listaevidencia': []
                    })
                else:
                    cantidad_meses -= 1

        return lista

    def validaciones_old(self, eRecord, revisado, por_revisar, bloqueo):
        if eRecord.usuario_revisa and not eRecord.usuario_aprobacion:
            revisado = 1
        elif not eRecord.usuario_revisa and not eRecord.usuario_aprobacion:
            por_revisar = 1
        elif eRecord.usuario_revisa and eRecord.usuario_aprobacion:
            bloqueo = 1
        if not eRecord.usuario_envia:
            action = "sin_evidenciados"
        else:
            action = "con_evidenciados"
        return revisado, por_revisar, bloqueo, action

    def puede_subirevidenciaatrasada(self):
        eObjetivo = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico
        informe = eObjetivo.informe_generado()
        prorroga = self.prorroga_subirevidencia()
        if informe or prorroga:
            return datetime.now().date() <= informe.fechamax or prorroga
        return False

    def prorroga_subirevidencia(self):
        hoy = datetime.now().date()
        periodo = self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa
        if periodo.activo:
            filtro = Q(status=True, acciondocumentodetalle__status=True,
                       usuario_revisa__isnull=True, usuario_aprobacion__isnull=True,
                       acciondocumentodetalle__acciondocumento=self)
            records = AccionDocumentoDetalleRecord.objects.filter(filtro).order_by('id').distinct()
            for r in records:
                validacion = r.get_validacion_last()
                if validacion and validacion.estadorevision in r.estados_subirevidencia():
                    fechadisponible = validacion.fecha_creacion.date() + timedelta(days=periodo.diascorreccion)
                    return fechadisponible >= hoy or r.estadorevision == 7
        return False

    def en_uso(self):
        if self.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa.edicion:
            return False
        return self.acciondocumentodetalle_set.filter(status=True).exists()

    def save(self, *args, **kwargs):
        super(AccionDocumento, self).save(*args, **kwargs)


ESTADOS_ACCIONES = (
    (0, 'SIN EVIDENCIA'),
    (1, 'NO CUMPLE'),
    (2, 'NO APLICA'),
    (3, 'PENDIENTE'),
    (4, 'PROCESO'),
    (5, 'CUMPLIMIENTO PARCIAL'),
    (6, 'CUMPLIMIENTO TOTAL'),
    (7, 'POR REVISAR'),
    (8, 'REGULAR'),
    (9, 'CUASI SATISFACTORIO'),
)
# (7)CUANDO ES INGRESADA LA EVIDENCIA
# (4)CUANDO ES REVISADA Y APROBADA LA EVIDENCIA
TIPO_FIRMAS = (
    (1, 'ELABORADO'),
    (2, 'REVISADO'),
    (3, 'APROBADO'),
)

TIPO_MATRIZPOAARCHIVO = (
    (1, 'MATRIZ VALORACI√ìN'),
    (2, 'MATRIZ EVALUACI√ìN'),
    (3, 'INFORME'),
)

ESTADOS_ACCIONESACTIVIDADES = (
    (0, 'SIN EVIDENCIA'),
    (1, 'DEFICIENTE'),
    (2, 'NO APLICA'),
    (3, 'PENDIENTE'),
    (4, 'PROCESO'),
    (5, 'POCO SATISFACTORIO'),
    (6, 'SATISFACTORIO'),
    (7, 'POR REVISAR'),
    (8, 'REGULAR'),
    (9, 'CUASI SATISFACTORIO'),
)


class RubricaPoa(ModeloBase):
    nombre = models.CharField(max_length=100, default='', verbose_name=u"Nombre")
    porcentaje = models.IntegerField(default=0, verbose_name=u"Porcentaje Cumplimiento")
    imagen = models.CharField(max_length=100, default='', verbose_name=u"Imagen")
    muestraformulario = models.BooleanField(default=False, verbose_name=u"Iconos que se mostrar√°n en el formulario")
    orden = models.IntegerField(default=0, verbose_name=u"Orden")
    subirevidencia = models.BooleanField(default=True, verbose_name=u"Permite subir evidencias")

    def __str__(self):
        return u"%s" % self.nombre


class MatrizValoracionPoa(ModeloBase):
    departamento = models.ForeignKey(Departamento, verbose_name=u"Departamento", on_delete=models.CASCADE)
    gestion = models.ForeignKey("sagest.SeccionDepartamento", blank=True, null=True, verbose_name=u"Gesti√≥n", on_delete=models.CASCADE)
    carrera = models.ForeignKey("sga.Carrera", verbose_name=u"Carrera", blank=True, null=True, on_delete=models.CASCADE)
    evaluacionperiodo = models.ForeignKey(EvaluacionPeriodoPoa, verbose_name=u"Evaluaci√≥n", on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='matrizvaloracionpoa/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'Matriz Valoraci√≥n')
    fecha = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Informe")

    def __str__(self):
        return u"%s" % self.departamento

    def seleccion(self):
        if self.carrera:
            return f'CARRERA DE {self.carrera}'
        elif self.gestion:
            return self.gestion
        return self.departamento

    def seleccion_text(self):
        from sga.templatetags.sga_extras import es_palabra_femenina
        articulo = 'DE LA'
        if self.carrera:
            return f'{articulo} CARRERA DE {self.carrera}'
        elif self.gestion:
            return f'{articulo} {self.gestion}'
        else:
            primera_palabra = str(self.departamento).split()[0]
            if not es_palabra_femenina(primera_palabra):
                articulo = "DEL"
            return f'{articulo} {self.departamento}'

    def periodo_poa(self):
        return self.evaluacionperiodo.periodopoa

    def solo_informe(self):
        periodopoa = self.periodo_poa()
        return not periodopoa.matrizvaloracion and not periodopoa.matrizevaluacion

    def acciones_documentos_record(self, estadosrevision = [10, 6, 7]):
        orden = 'acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__orden', \
                'acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__orden', \
                'acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__orden', \
                'acciondocumentodetalle__acciondocumento__indicadorpoa__orden', \
                'acciondocumentodetalle__acciondocumento__orden'
        filtro = Q(status=True, estadorevision__in=estadosrevision, meta__evaluacionperiodo_id=self.evaluacionperiodo,
                   acciondocumentodetalle__inicio__gte=self.evaluacionperiodo.fechainicio,
                   acciondocumentodetalle__fin__lte=self.evaluacionperiodo.fechafin,
                   acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa=self.evaluacionperiodo.periodopoa,
                   acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa__status=True,
                   acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento=self.departamento,
                   acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__carrera=self.carrera,
                   acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__gestion=self.gestion,
                   acciondocumentodetalle__acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento__status=True)

        return AccionDocumentoDetalleRecord.objects.filter(filtro).order_by(*orden)

    def acciones_documentos(self):
        filtro = Q(status=True,
                   inicio__gte=self.evaluacionperiodo.fechainicio, fin__lte=self.evaluacionperiodo.fechafin,
                   acciondocumento__indicadorpoa__objetivooperativo__metapoa__evaluacionperiodo=self.evaluacionperiodo,
                   acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa=self.evaluacionperiodo.periodopoa,
                   acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__periodopoa__status=True,
                   acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento=self.departamento,
                   acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__carrera=self.carrera,
                   acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__gestion=self.gestion,
                   acciondocumento__indicadorpoa__objetivooperativo__objetivotactico__objetivoestrategico__departamento__status=True)

        return AccionDocumentoDetalle.objects.filter(filtro).order_by('id').distinct()

    def totales(self):
        context = {}
        context['total'] = len(self.acciones_documentos())
        context['t_validados'] = len(self.acciones_documentos_record([6]))
        context['t_pendientes'] = len(self.acciones_documentos_record([7]))
        context['t_remitidos'] = len(self.acciones_documentos_record([10]))
        context['t_por_revisar'] = context['total']-context['t_validados']-context['t_remitidos']-context['t_pendientes']
        return context

    def puede_generar_informe(self):
        return len(self.acciones_documentos()) == len(self.acciones_documentos_record([6, 7]))

    def download_link(self):
        return self.archivo.url

    def tieneinformefirmado(self):
        return self.matrizarchivospoa_set.filter(archivo__isnull=False, tipomatrizarchivo=3, status=True)

    def responsables_firmar_informe(self):
        filtro = Q(status=True, activo=True, firmainforme=True) & \
                 (Q(unidadorganica=self.departamento, carrera=self.carrera, gestion=self.gestion, tipopermiso=2) |
                  Q(tipopermiso=4))
        return UsuarioEvidencia.objects.filter(filtro).order_by('tipopermiso', 'tipousuario')

    def get_informe(self):
        return self.matrizarchivospoa_set.filter(tipomatrizarchivo=3, status=True).order_by('id').last()

    def tiene_informe_firmado(self):
        informe = self.get_informe()
        return informe and informe.total_firmados() > 0

    def get_objetivoestrategico(self):
        return ObjetivoEstrategico.objects.filter(departamento=self.departamento,
                                                  gestion=self.gestion,
                                                  periodopoa=self.evaluacionperiodo.periodopoa,
                                                  carrera=self.carrera, status=True).first()

    def secuencual_informe(self):
        hoy = datetime.now()
        numeroinforme = 1
        matrizarchivo_last = MatrizArchivosPoa.objects.filter(fecha__year=hoy.year, tipomatrizarchivo=3, status=True).exclude(matrizvaloracionpoa=self).order_by('numeroinforme').last()
        if matrizarchivo_last:
            numeroinforme = matrizarchivo_last.numeroinforme + 1
        return numeroinforme

class MatrizArchivosPoa(ModeloBase):
    from core.choices.models.sagest import ESTADO_LEGALIZACION_POA
    matrizvaloracionpoa = models.ForeignKey(MatrizValoracionPoa, verbose_name=u"Matriz poa", on_delete=models.CASCADE)
    numeroacta = models.IntegerField(default=0, verbose_name=u"Numero acta")
    numeroinforme = models.IntegerField(default=0, verbose_name=u"Numero informe")
    fecha = models.DateField(blank=True, null=True, verbose_name=u"Fecha Informe")
    tipomatrizarchivo = models.IntegerField(choices=TIPO_MATRIZPOAARCHIVO, default=1,
                                            verbose_name=u"Matriz poa archivo")
    archivo = models.FileField(upload_to='matrizvaloracionpoa/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'Matriz Valoraci√≥n')
    totaldesempeno = models.FloatField(default=0, verbose_name=u'Total desempe√±o')
    totalobjetivo = models.FloatField(default=0, verbose_name=u'Total objetivo')
    estado = models.IntegerField(choices=ESTADO_LEGALIZACION_POA, default=1, verbose_name=u"Estado de legalizaci√≥n del archivo")

    def __str__(self):
        return u"%s" % self.matrizvaloracionpoa

    def color_estado(self):
        if self.estado==1:
            return 'text-primary-old'
        elif self.estado == 2:
            return 'text-primary'
        return 'text-success'

    def color_estado_btn(self):
        if self.estado==1:
            return 'primary-old'
        elif self.estado == 2:
            return 'cian-opacity'
        return 'success'

    def download_link(self):
        return self.archivo.url

    def estado_archivo(self):
        anio = self.matrizvaloracionpoa.evaluacionperiodo.periodopoa.anio
        if anio < 2024:
            return 3 if self.archivo else 1
        return self.estado

    def responsables_firma(self):
        return self.matrizevaluacionfirmaspoa_set.filter(status=True).order_by('orden')

    def total_firmados(self):
        return len(self.responsables_firma().filter(firmado=True))

    def personasids_firma(self):
        self.responsable_firma().values_list('personafirma_id', flat=True)

    def get_persona_firma(self, persona):
        return self.responsables_firma().filter(personafirma=persona).last()

    def firmado_all(self):
        responsables = self.responsables_firma()
        firmados = responsables.filter(firmado=True).values_list('personafirma_id', flat=True).order_by('personafirma_id').distinct()
        return len(responsables) == len(firmados)

    def permisos(self, persona):
        responsable = self.responsables_firma().filter(firmado=False, personafirma=persona)
        puede_firmar = self.estado != 3 and responsable
        return {'puede_firmar':puede_firmar}

class HistorialFirmaArchivoPoa(ModeloBase):
    from core.choices.models.sagest import ESTADO_LEGALIZACION_POA
    matrizarchivo = models.ForeignKey(MatrizArchivosPoa, verbose_name=u"Matriz archivo poa", on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', verbose_name=u"Responsable que firma", on_delete=models.CASCADE)
    estado = models.IntegerField(choices=ESTADO_LEGALIZACION_POA, default=1, verbose_name=u"Estado de legalizaci√≥n del archivo")
    archivo = models.FileField(upload_to='historialmatrizarchivo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Informe de resultados')

    def __str__(self):
        return u"%s" % self.matrizarchivo

    def color_estado(self):
        if self.estado==1:
            return 'text-primary-old'
        elif self.estado == 2:
            return 'text-primary'
        return 'text-success'

    class Meta:
        verbose_name = u"Historial Firma Archivo Poa"
        verbose_name_plural = u"Historial Firmas Archivos POA"
        ordering = ('fecha_creacion',)


class MatrizValoracionExpertosPoa(ModeloBase):
    matriz = models.ForeignKey(MatrizValoracionPoa, verbose_name=u"Matriz valoracion", on_delete=models.CASCADE)
    personaexperto = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u"Expertos",
                                       on_delete=models.CASCADE)
    denominacion = models.ForeignKey(DenominacionPuesto, blank=True, null=True, verbose_name=u"Cargo",
                                     on_delete=models.CASCADE)
    personaexterna = models.CharField(max_length=500, blank=True, null=True, verbose_name=u"Persona externa")
    cargopersonaexterna = models.CharField(max_length=500, blank=True, null=True, verbose_name=u"Cargo persona externa")

    def __str__(self):
        return u"%s" % self.matriz


class MatrizEvaluacionFirmasPoa(ModeloBase):
    matriz = models.ForeignKey(MatrizValoracionPoa, verbose_name=u"Matriz valoraci√≥n", on_delete=models.CASCADE)
    matrizarchivo = models.ForeignKey(MatrizArchivosPoa, blank=True, null=True, verbose_name=u"Matriz valoracion archivo", on_delete=models.CASCADE)
    personafirma = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u"Persona firma", on_delete=models.CASCADE)
    cargo = models.ForeignKey(DenominacionPuesto, blank=True, null=True, verbose_name=u"Cargo del responsable a firmar", on_delete=models.CASCADE)
    cargo_text = models.CharField(max_length=500, default='', verbose_name=u"Cargo del usuario o colaborador externo a unemi")
    tipofirma = models.IntegerField(choices=TIPO_FIRMAS, default=1, verbose_name=u"Tipo firmas")
    firmado = models.BooleanField(default=False, verbose_name=u"¬øFirmo el informe?")
    orden = models.IntegerField(default=0, verbose_name=u"Orden de firma")

    def __str__(self):
        return u"%s" % self.personafirma

    def get_cargo_text(self):
        if self.cargo:
            return self.cargo.descripcion
        return self.cargo_text

    def firma_usuario(self):
        if self.firmado:
            return '<span class="text-success"><i class="fa fa-signature"></i> Firmado</span>'
        return '<span class="text-muted"><i class="fa fa-signature"></i> Pendiente</span>'

    class Meta:
        verbose_name = u"Matriz Evaluaci√≥n Firmas Poa"
        verbose_name_plural = u"Matrices Evaluaci√≥n Firmas Poa"

class DetalleMatrizValoracionPoa(ModeloBase):
    matrizvaloracion = models.ForeignKey(MatrizValoracionPoa, verbose_name=u"Matriz valoracion",
                                         on_delete=models.CASCADE)
    actividad = models.ForeignKey(IndicadorPoa, verbose_name=u"Actividad", on_delete=models.CASCADE)
    estado_rubrica = models.ForeignKey(RubricaPoa, blank=True, null=True, verbose_name=u"Rubrica Poa",
                                       on_delete=models.CASCADE)
    cumplimiento = models.IntegerField(default=0, verbose_name=u"Cumplimiento")
    descripcion = models.TextField(default='', verbose_name=u"Descripcion")
    semanaplanificada = models.FloatField(default=0, verbose_name=u'Semana planificada')
    semanaejecutada = models.FloatField(default=0, verbose_name=u'Semana ejecutada')
    cumplimientosemana = models.FloatField(default=0, verbose_name=u'Cumplimiento semana')
    presupuestoreformado = models.FloatField(default=0, verbose_name=u'Presupuesto reformado')
    presupuestoutilizado = models.FloatField(default=0, verbose_name=u'Presupuesto utilizado')
    indicadoreficacia = models.FloatField(default=0, verbose_name=u'Indicador eficacia')
    indicadoreficienciatiempo = models.FloatField(default=0, verbose_name=u'Indicador eficiencia tiempo')
    indicadoreficienciapresupuesto = models.FloatField(default=0, verbose_name=u'Indicador eficiencia presupuesto')
    indicadoreficiencia = models.FloatField(default=0, verbose_name=u'Indicador eficiencia')
    indicadordesempeno = models.FloatField(default=0, verbose_name=u'Indicador desempe√±o')
    metaejecutada = models.FloatField(default=0, verbose_name=u'Meta ejecutada')
    cumplimientometa = models.FloatField(default=0, verbose_name=u'Cumplimiento meta')
    observacion = models.TextField(default='', verbose_name=u"Observacion")
    recomendacion = models.TextField(default='', verbose_name=u"Recomendacion")

    def __str__(self):
        return u"%s" % self.matrizvaloracion

    def save(self, *args, **kwargs):
        # self.descripcion = self.descripcion.upper()
        super(DetalleMatrizValoracionPoa, self).save(*args, **kwargs)


class DetalleMatrizEvaluacionPoa(ModeloBase):
    matrizvaloracion = models.ForeignKey(MatrizValoracionPoa, verbose_name=u"Matriz valoracion",
                                         on_delete=models.CASCADE)
    actividad = models.ForeignKey(IndicadorPoa, verbose_name=u"Actividad", on_delete=models.CASCADE)
    estado_rubrica = models.ForeignKey(RubricaPoa, blank=True, null=True, verbose_name=u"Rubrica Poa",
                                       on_delete=models.CASCADE)
    cumplimiento = models.IntegerField(default=0, verbose_name=u"Cumplimiento")
    descripcion = models.TextField(default='', verbose_name=u"Descripcion")
    semanaplanificada = models.FloatField(default=0, verbose_name=u'Semana planificada')
    semanaejecutada = models.FloatField(default=0, verbose_name=u'Semana ejecutada')
    cumplimientosemana = models.FloatField(default=0, verbose_name=u'Cumplimiento semana')
    presupuestoreformado = models.FloatField(default=0, verbose_name=u'Presupuesto reformado')
    presupuestoutilizado = models.FloatField(default=0, verbose_name=u'Presupuesto utilizado')
    indicadoreficacia = models.FloatField(default=0, verbose_name=u'Indicador eficacia')
    indicadoreficienciatiempo = models.FloatField(default=0, verbose_name=u'Indicador eficiencia tiempo')
    indicadoreficienciapresupuesto = models.FloatField(default=0, verbose_name=u'Indicador eficiencia presupuesto')
    indicadoreficiencia = models.FloatField(default=0, verbose_name=u'Indicador eficiencia')
    indicadordesempeno = models.FloatField(default=0, verbose_name=u'Indicador desempe√±o')
    metaejecutada = models.FloatField(default=0, verbose_name=u'Meta ejecutada')
    cumplimientometa = models.FloatField(default=0, verbose_name=u'Cumplimiento meta')
    observacion = models.TextField(default='', verbose_name=u"Observacion")
    recomendacion = models.TextField(default='', verbose_name=u"Recomendacion")
    cumplimientoindicador = models.FloatField(default=0, verbose_name=u'Cumplimiento indicador')
    cumplimientoobjoperativo = models.FloatField(default=0, verbose_name=u'Cumplimiento objetivo operativo')
    aplica = models.BooleanField(default=True, verbose_name=u"Aplica")

    def __str__(self):
        return u"%s" % self.matrizvaloracion

    def save(self, *args, **kwargs):
        # self.descripcion = self.descripcion.upper()
        super(DetalleMatrizEvaluacionPoa, self).save(*args, **kwargs)


class AccionDocumentoDetalle(ModeloBase):
    acciondocumento = models.ForeignKey(AccionDocumento, verbose_name=u"Accion Documento", on_delete=models.CASCADE)
    inicio = models.DateField(blank=True, null=True, verbose_name=u"Inicio")
    fin = models.DateField(blank=True, null=True, verbose_name=u"Fin")
    estado_accion = models.IntegerField(choices=ESTADOS_ACCIONES, default=0, verbose_name=u"Estado Accion")
    mostrar = models.BooleanField(default=True, verbose_name=u"Mostrar")
    estado_rubrica = models.ForeignKey(RubricaPoa, default=0, verbose_name=u"Rubrica Poa", on_delete=models.CASCADE)

    def __str__(self):
        por = u"%s" % Decimal(self.acciondocumento.porcentaje).quantize(Decimal('.01'))
        por += u"%"
        return u"%s (%s - %s al %s)" % (
        por, self.acciondocumento, self.inicio.strftime('%d-%m-%Y'), self.fin.strftime('%d-%m-%Y'))

    def record(self):
        return self.acciondocumentodetallerecord_set.filter(status=True).first()

    def detrecord(self):
        return self.acciondocumentodetallerecord_set.order_by("-id")[:1]

    def pedirinforme(self, mes):
        can_mes = self.fin.month - self.inicio.month
        if can_mes == 0:
            return True
        elif self.fin.month == mes:
            return True
        else:
            return False

    def metas_planificadas(self):
        return self.acciondocumento.indicadorpoa.objetivooperativo.metas_planificadas()

    def metas_documentos(self):
        return self.metas_planificadas().filter(evaluacionperiodo__fechafin__gte=self.fin,
                                                evaluacionperiodo__fechainicio__lte=self.inicio).order_by('evaluacionperiodo__fechainicio')

    def meta_documento(self):
        return self.metas_documentos().first()

    def objetivooperativo(self):
        return self.acciondocumento.indicadorpoa.objetivooperativo

    def get_periodo(self):
        return self.objetivooperativo().objetivotactico.objetivoestrategico.periodopoa

    class Meta:
        verbose_name = u'Accion Documento Detalle'
        verbose_name_plural = u'Acciones Documento Detalles'
        ordering = ('acciondocumento', 'inicio')

    def save(self, *args, **kwargs):
        super(AccionDocumentoDetalle, self).save(*args, **kwargs)


class AccionDocumentoDetalleRecord(ModeloBase):
    from django.contrib.auth.models import User
    acciondocumentodetalle = models.ForeignKey(AccionDocumentoDetalle, verbose_name=u"Accion Documento Detalle",
                                               on_delete=models.CASCADE)
    observacion_envia = models.TextField(default='', verbose_name=u"Obs. Enviada")
    logros = models.TextField(default='', verbose_name=u"Logros alcanzados")
    nudos = models.TextField(default='', verbose_name=u"Nudos cr√≠ticos")
    meta = models.ForeignKey(MetaPoa, verbose_name=u"Meta Poa", blank=True, null=True, on_delete=models.CASCADE)
    numero = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name=u"Numero")
    cumplimiento = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name=u"Porcentaje de cumplimiento")
    estadorevision = models.IntegerField(choices=ESTADO_REVISION_EVIDENCIA, default=1, verbose_name=u"Estado de revisi√≥n de evidencia")
    usuario_envia = models.ForeignKey(User, related_name="usuario_envia_set", blank=True, null=True,
                                      verbose_name=u"Usuario Envia", on_delete=models.CASCADE)
    fecha_envia = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Envia")
    observacion_validador = models.TextField(default='', verbose_name=u"Observaci√≥n de la persona que prevalido el documento")
    persona_validador = models.ForeignKey("sga.Persona", blank=True, null=True,
                                       verbose_name=u"Persona que hace la prevalidaci√≥n", on_delete=models.CASCADE)
    fecha_validacion = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha que valida el documento")
    observacion_revisa = models.TextField(default='', verbose_name=u"Obs. revisada")
    usuario_revisa = models.ForeignKey(User, related_name="usuario_revisa_set", blank=True, null=True,
                                       verbose_name=u"Usuario revisa", on_delete=models.CASCADE)
    fecha_revisa = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha revisa")
    estado_accion_revisa = models.IntegerField(choices=ESTADOS_ACCIONES, default=1, verbose_name=u"Estado Revisa")
    observacion_aprobacion = models.TextField(default='', verbose_name=u"Obs. aprobacionda")
    usuario_aprobacion = models.ForeignKey(User, related_name="usuario_aprobacion_set", blank=True, null=True,
                                           verbose_name=u"Usuario aprobacion", on_delete=models.CASCADE)
    fecha_aprobacion = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha aprobacion")
    estado_accion_aprobacion = models.IntegerField(choices=ESTADOS_ACCIONES, default=1,
                                                   verbose_name=u"Estado Aprobacion")
    archivo = models.FileField(upload_to='evidenciaspoa/%Y/%m/%d', blank=True, null=True, verbose_name=u'Evidencia')
    procesado = models.BooleanField(default=False, verbose_name=u"Procesado")
    rubrica_revisa = models.ForeignKey(RubricaPoa, blank=True, null=True, verbose_name=u"Rubrica revisa",
                                       on_delete=models.CASCADE)
    rubrica_aprobacion = models.ForeignKey(RubricaPoa, related_name='rubrica_aprobacion', blank=True, null=True,
                                           verbose_name=u'Rubrica aprobacion', on_delete=models.CASCADE)
    fecha_evidencia = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Evidencia")
    aplica_calculo = models.BooleanField(default=False, verbose_name=u"La meta cumplida no forma parte del calculo de evaluaci√≥n")

    def __str__(self):
        return u"%s" % self.acciondocumentodetalle

    def color_estadorevision(self):
        if self.estadorevision == 1:
            return 'text-muted'
        elif self.estadorevision == 7:
            return 'text-secondary'
        elif self.estadorevision == 9:
            return 'text-primary'
        elif self.estadorevision == 10:
            return 'text-blue-shadow'
        elif self.estadorevision in [8, 3]:
            return 'text-orange'
        elif self.estadorevision == 5:
            return 'text-info'
        elif self.estadorevision in [6, 2]:
            return 'text-success'

    def get_periodo(self):
        return self.get_objetivoestrategico().periodopoa

    def get_actividad(self):
        return self.acciondocumentodetalle.acciondocumento.descripcion

    def get_objetivooperativo(self):
        return self.acciondocumentodetalle.objetivooperativo()

    def get_objetivotactico(self):
        return self.get_objetivooperativo().objetivotactico

    def get_objetivoestrategico(self):
        return self.get_objetivooperativo().objetivotactico.objetivoestrategico

    def puede_editar(self):
        validacion = self.get_validacion_last()
        estados = [1, 3, 5, 7]
        estadoprincipal = self.estadorevision in estados
        if not validacion:
            return estadoprincipal
        return estadoprincipal and validacion.estadorevision in estados

    def puede_poner_observacion(self):
        validacion = self.get_validacion_last()
        estados = [3, 5]
        estadoprincipal = self.estadorevision in estados
        return estadoprincipal and validacion and validacion.estadorevision in estados

    def historial_validacion(self):
        return self.historialvalidacionevidencia_set.filter(status=True)

    def get_historial_last(self):
        return self.historial_validacion().order_by('fecha_creacion').last()

    def get_validacion_last(self):
        return self.historialvalidacionevidencia_set.filter(status=True, accion__in=[2, 3]).order_by('fecha_creacion').last()

    def get_observacion(self):
        validacion = self.get_validacion_last()
        observacion = self.observacion_revisa if validacion.estadorevision == 8 else validacion.observacion
        return observacion

    def get_registro_last(self):
        return self.historialvalidacionevidencia_set.filter(status=True, accion=1).order_by('fecha_creacion').last()

    def puede_ponerobservacion(self):
        validacion = self.get_validacion_last()
        return self.estadorevision == 3 or validacion and validacion.estadorevision == 3

    def meta_ejecutada(self):
        registro = self.get_registro_last()
        return registro.metaejecutada if registro else 0

    def puede_revisar(self):
        return not self.estadorevision in [6, 10] and not self.procesado

    def calculo_cumplimiento(self):
        planificada = self.meta.numero
        ejecutada = self.numero if self.aplica_calculo else planificada
        calculo = (ejecutada/planificada)*100
        cumplimiento = round(calculo, 2)
        return cumplimiento if cumplimiento <= 100 else 100

    def calcular_cumplimiento(self, ejecutada):
        planificada = self.meta.numero
        calculo = (ejecutada/planificada)*100
        cumplimiento = round(calculo, 2)
        return cumplimiento if cumplimiento <= 100 else 100

    def puede_subirevidencia(self):
        hoy = datetime.now().date()
        acciondetalle = self.acciondocumentodetalle
        return acciondetalle.inicio <= hoy and  acciondetalle.fin >= hoy

    def puede_subirevidenciaatrasada(self):
        eObjetivo = self.acciondocumentodetalle.acciondocumento.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico
        informe = eObjetivo.informe_generado()
        prorroga = self.prorroga_subirevidencia()
        if self.estadorevision in self.estados_subirevidencia() and (informe or prorroga):
            return datetime.now().date() <= informe.fechamax or prorroga or self.estadorevision == 7
        return False

    def estados_subirevidencia(self):
        return [1, 3, 5, 7]

    def prorroga_subirevidencia(self):
        hoy = datetime.now().date()
        periodo = self.acciondocumentodetalle.acciondocumento.indicadorpoa.objetivooperativo.objetivotactico.objetivoestrategico.periodopoa
        if periodo.activo:
            validacion = self.get_validacion_last()
            if validacion and validacion.estadorevision == 3 and self.estadorevision in [3, 5]:
                fechadisponible = validacion.fecha_creacion.date() + timedelta(days=periodo.diascorreccion)
                if fechadisponible >= hoy:
                    return True
        return False

    def icon_indicador(self):
        obj_operativo = self.get_objetivooperativo()
        if obj_operativo.tipo == 1:
            return '<i class="bi bi-sort-numeric-up-alt"></i>'
        return '<i class="bi bi-percent"></i>'

    def observacion_vigente(self):
        if self.observacion_aprobacion and self.estadorevision == 2:
            return self.observacion_aprobacion
        # elif self.observacion_revisa:
        #     return self.observacion_revisa
        elif self.observacion_validador:
            return self.observacion_validador

    def observacion_informe(self):
        validacion = self.get_validacion_last()
        if self.observacion_aprobacion:
            return self.observacion_aprobacion
        elif validacion:
            return validacion.observacion

    class Meta:
        verbose_name = u'Accion Documento Detalle'
        verbose_name_plural = u'Acciones Documento Detalles'
        ordering = ('acciondocumentodetalle',)

    def save(self, *args, **kwargs):
        super(AccionDocumentoDetalleRecord, self).save(*args, **kwargs)

class HistorialValidacionEvidencia(ModeloBase):
    evidencia = models.ForeignKey(AccionDocumentoDetalleRecord, verbose_name=u"Evidencia cargada por el ususario",on_delete=models.CASCADE)
    metaejecutada = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name=u"Meta Ejecutada")
    estadorevision = models.IntegerField(choices=ESTADO_REVISION_EVIDENCIA, default=1, verbose_name=u"Estado de revisi√≥n de evidencia")
    persona = models.ForeignKey("sga.Persona", blank=True, null=True, verbose_name=u"Responsable que hace la primera revisi√≥n", on_delete=models.CASCADE)
    observacion = models.TextField(default='', verbose_name=u"Observaci√≥n")
    archivo = models.FileField(upload_to='historialevidenciaspoa/%Y/%m/%d', blank=True, null=True, verbose_name=u'Evidencia validada')
    accion = models.IntegerField(choices=ACCION_HISTORIAL_EVIDENCIA, default=1, verbose_name=u"Acci√≥n ejecutada")

    def __str__(self):
        return f'{self.get_estadorevision_display()} - {self.persona}'

    def color_estadorevision(self):
        if self.estadorevision == 1:
            return 'text-muted'
        elif self.estadorevision == 7:
            return 'text-secondary'
        elif self.estadorevision == 9:
            return 'text-primary'
        elif self.estadorevision == 10:
            return 'text-blue-shadow'
        elif self.estadorevision in [8, 3]:
            return 'text-orange'
        elif self.estadorevision == 5:
            return 'text-info'
        elif self.estadorevision in [6, 2]:
            return 'text-success'

    def estadorevision_text(self):
        return ESTADO_REVISION_EVIDENCIA[self.estadorevision - 1][1]

    def accion_text(self):
        return ACCION_HISTORIAL_EVIDENCIA[self.accion-1][1]

    class Meta:
        verbose_name = u'Historial Validaci√≥n Evidencia'
        verbose_name_plural = u'Historiales de validaci√≥n de evidencia'
        ordering = ('-fecha_creacion',)

TIPOS_INFORMES = (
    (1, 'PRELIMINAR'),
    (2, 'FINAL')
)


class InformeGenerado(ModeloBase):
    periodopoa = models.ForeignKey(PeriodoPoa, verbose_name=u"Periodo POA", on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, verbose_name=u"Departamento", on_delete=models.CASCADE)
    mes = models.IntegerField(default=0, verbose_name=u"Mes")
    tipo = models.IntegerField(choices=TIPOS_INFORMES, default=1, verbose_name=u"Tipo Informe")
    numinfo = models.IntegerField(default=0, verbose_name=u"No. Informe")
    fechamax = models.DateField(blank=True, null=True, verbose_name=u"Fecha Maxima")
    recomendacion = models.TextField(default='', verbose_name=u"Obs. aprobacionda")
    archivo = models.FileField(upload_to='informespoa', blank=True, null=True, verbose_name=u'Informes POA')
    gestion = models.ForeignKey('sagest.SeccionDepartamento', blank=True, null=True, verbose_name=u"Gesti√≥n", on_delete=models.CASCADE)
    procesado = models.BooleanField(default=False, verbose_name=u"Procesado")
    carrera = models.ForeignKey('sga.Carrera', blank=True, null=True, verbose_name=u"Carreras",
                                on_delete=models.CASCADE)
    personacarrera = models.ForeignKey('sga.Persona', verbose_name=u"Persona responsable de carrera", blank=True,
                                       null=True, on_delete=models.CASCADE)
    personadirector = models.ForeignKey('sga.Persona', related_name='personadirector_set',
                                        verbose_name=u"Representante Departamento / Facultad", blank=True, null=True,
                                        on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % self.periodopoa

    class Meta:
        verbose_name = u'Informe Generado'
        verbose_name_plural = u'Informes Generados'
        ordering = ('periodopoa', 'departamento', 'mes', 'tipo')

    def save(self, *args, **kwargs):
        super(InformeGenerado, self).save(*args, **kwargs)

    def accionesfacultadcarrera(self):
        from sagest.poa_aprobarevidencia import datosinformegeneralfacultadcarrera
        return datosinformegeneralfacultadcarrera(self.periodopoa_id, self.departamento_id, self.mes, self.carrera_id)

    def informenesfacultad(self):
        return InformeGeneradoFacultad.objects.filter(informegenerado=self, status=True)


class InformeGeneradoDetalle(ModeloBase):
    informegenerado = models.ForeignKey(InformeGenerado, verbose_name=u"Informe", on_delete=models.CASCADE)
    acciondocumentodetallerecord = models.ForeignKey(AccionDocumentoDetalleRecord,
                                                     verbose_name=u"Calificacion de evidencia",
                                                     on_delete=models.CASCADE)
    observacion_aprobacion = models.TextField(default='', verbose_name=u"Obs. aprobacionda")
    estado_accion_aprobacion = models.IntegerField(choices=ESTADOS_ACCIONES, default=1,
                                                   verbose_name=u"Estado Aprobacion")

    def __str__(self):
        return u"%s" % self.informegenerado

    class Meta:
        verbose_name = u'Informe Generado Detalle'
        verbose_name_plural = u'Informes Generados Detalles'
        ordering = ('informegenerado',)

    def save(self, *args, **kwargs):
        super(InformeGeneradoDetalle, self).save(*args, **kwargs)


class InformeGeneradoFacultad(ModeloBase):
    informegenerado = models.ForeignKey(InformeGenerado, verbose_name=u"Informe", on_delete=models.CASCADE)
    recomendacion = models.TextField(default='', verbose_name=u"Obs. aprobacionda")
    archivo = models.FileField(upload_to='informespoafacultad', blank=True, null=True, verbose_name=u'Informes POA')
    procesado = models.BooleanField(default=False, verbose_name=u"Procesado")


class AperturarInforme(ModeloBase):
    informegenerado = models.ForeignKey(InformeGenerado, verbose_name=u"Informe", on_delete=models.CASCADE)
    fechaold = models.DateField(blank=True, null=True, verbose_name=u"Fecha Maxima Anterior")
    fechanew = models.DateField(blank=True, null=True, verbose_name=u"Fecha Maxima Nueva")
    motivo = models.TextField(default='', verbose_name=u"Motivo del cambio")

    def __str__(self):
        return u"%s" % self.informegenerado

    class Meta:
        verbose_name = u'Aperturar Fecha'
        verbose_name_plural = u'Aperturar Fechas'
        ordering = ('informegenerado',)

    def save(self, *args, **kwargs):
        super(AperturarInforme, self).save(*args, **kwargs)


TIPOS_USUARIO = (
    (1, 'USUARIO'),
    (2, 'DIRECTOR / DECANO'),
    (3, 'DIRECTOR / CARRERA'),
    (4, 'EXPERTO DPI'),
    (5, 'DIRECTOR DPI')
)


class UsuarioConsultaEvidencia(ModeloBase):
    from django.contrib.auth.models import User
    userpermiso = models.ForeignKey(User, verbose_name=u"Usuario Permiso", on_delete=models.CASCADE)
    unidadorganica = models.ForeignKey(Departamento, verbose_name=u"Unidad Org√°nica", on_delete=models.CASCADE)
    tipousuario = models.IntegerField(choices=TIPOS_USUARIO, default=1, verbose_name=u"Tipo Usuario")

    def __str__(self):
        return u"%s[%s]" % (self.unidadorganica, self.userpermiso.persona_set.get())

    def cedula(self):
        return u"%s" % self.userpermiso.persona_set.get().cedula

    def nombre(self):
        return u"%s" % self.userpermiso.persona_set.get()

    class Meta:
        verbose_name = u'Usuario Consulta Evidencia'
        verbose_name_plural = u'Usuarios Consultas Evidencias'
        ordering = ('unidadorganica', '-tipousuario', 'userpermiso')

    def save(self, *args, **kwargs):
        super(UsuarioConsultaEvidencia, self).save(*args, **kwargs)


class UsuarioEvidencia(ModeloBase):
    from django.contrib.auth.models import User
    userpermiso = models.ForeignKey(User, verbose_name=u"Usuario Permiso", on_delete=models.CASCADE)
    unidadorganica = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Unidad Org√°nica", on_delete=models.CASCADE)
    gestion = models.ForeignKey('sagest.SeccionDepartamento',blank=True, null=True, verbose_name=u"Gesti√≥n", on_delete=models.CASCADE)
    tipousuario = models.IntegerField(choices=TIPOS_USUARIO, default=1, verbose_name=u"Tipo Usuario")
    tipopermiso = models.IntegerField(choices=MY_TIPO_PERMISO, default=1, verbose_name=u"Tipo de permiso")
    carrera = models.ForeignKey('sga.Carrera', blank=True, null=True, verbose_name=u"Carreras",
                                on_delete=models.CASCADE)
    activo = models.BooleanField(default=True, verbose_name=u"¬øActivo?")
    firmainforme = models.BooleanField(default=False, verbose_name=u"¬øFirma el informe?")
    cargo_text = models.CharField(max_length=500, default='', verbose_name=u"Cargo del usuario o colaborador externo a unemi")


    def __str__(self):
        return u"%s[%s]" % (self.unidadorganica, self.userpermiso.persona_set.get())

    def cedula(self):
        return u"%s" % self.userpermiso.persona_set.get().cedula

    def nombre(self):
        return u"%s" % self.userpermiso.persona_set.get()

    def get_persona(self):
        return self.userpermiso.persona_set.get()

    def get_cargo(self):
        persona = self.get_persona()
        cargo = persona.mi_cargo_administrativo()
        if cargo:
            return cargo
        elif persona.mi_cargo():
            return persona.mi_cargo()
        return self.cargo_text

    def color_tipo(self):
        if self.tipousuario in [1, 4]:
            return f'text-primary'
        elif self.tipousuario in [2,5]:
            return f'text-success'
        else:
            return f'text-orange'

    def seleccion(self):
        if self.carrera:
            return self.carrera
        elif self.gestion:
            return self.gestion
        return self.unidadorganica

    def name_seleccion(self):
        name = f'<h6 class="texto-blue mb-0"><i class="bi bi-diagram-3"></i> {self.unidadorganica}</h6>'
        if self.carrera:
            name += f'<h6 class="texto-blue mb-0"><i class="bi bi-mortarboard fs-3"></i> {self.carrera}</h6>'
        elif self.gestion:
            name += f'<h6 class="texto-blue mb-0"><i class="bi bi-diagram-2"></i> {self.gestion}</h6>'
        return name

    def usuarios_seguimiento(self):
        return UsuarioEvidencia.objects.filter(status=True, unidadorganica=self.unidadorganica, gestion=self.gestion, carrera=self.carrera, tipopermiso=2)

    def tipo_firma(self):
        if self.tipousuario == 4:
            return 2
        elif self.tipousuario == 5:
            return 3
        return 1

    class Meta:
        verbose_name = u'Usuario Evidencia'
        verbose_name_plural = u'Usuarios Evidencias'
        ordering = ('unidadorganica', '-tipousuario', 'userpermiso')

    def save(self, *args, **kwargs):
        super(UsuarioEvidencia, self).save(*args, **kwargs)

class SeguimientoPoa(ModeloBase):
    unidadorganica = models.ForeignKey(Departamento, verbose_name=u"Unidad Org√°nica", on_delete=models.CASCADE)
    gestion = models.ForeignKey('sagest.SeccionDepartamento',blank=True, null=True, verbose_name=u"Gesti√≥n", on_delete=models.CASCADE)
    carrera = models.ForeignKey('sga.Carrera', blank=True, null=True, verbose_name=u"Carreras",
                                on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', related_name="personasolicita_set", on_delete=models.CASCADE, verbose_name="persona que solicita")
    personaseguimiento = models.ForeignKey('sga.Persona', blank=True, null=True, related_name="personaseguimiento_set", on_delete=models.CASCADE, verbose_name="persona que dio el seguimiento")
    responsables = models.ManyToManyField('sga.Persona', blank=True, related_name="responsables_set", verbose_name="personas encargadas de dar seguimiento")
    detalle = models.CharField(default='', max_length=4000, verbose_name=u"Descripci√≥n de solicitud")
    observaciondpi = models.CharField(default='', max_length=4000, verbose_name=u"Observaci√≥n DPI", blank=True, null=True)
    estado = models.IntegerField(choices=ESTADO_SEGUIMIENTO_POA, default=1, verbose_name=u"Estado de seguimiento")
    fechaagenda = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha agendamiento")
    horaagenda = models.TimeField(null=True, blank=True, verbose_name=u'Hora agendamiento')
    fechafinaliza = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha finaliza")
    fechasugerida = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha sugerida")
    horasugerida = models.TimeField(null=True, blank=True, verbose_name=u'Hora sugerida')
    sugierefechayhora =  models.BooleanField(default=False, verbose_name=u'Sugiere fecha y hora', blank=True, null=True)
    notificatodos = models.BooleanField(default=False, verbose_name=u"¬øNotifica a todos?", null=True, blank=True)

    def __str__(self):
        palabra =f'{self.unidadorganica}'
        if self.gestion:
            palabra = f'{self.gestion}'
        elif self.carrera:
            palabra += f'{self.carrera}'
        return palabra

    class Meta:
        verbose_name = u'Seguimiento POA'
        verbose_name_plural = u'Seguimientos POA'
        ordering = ('-fecha_creacion',)
        
    def get_detalles(self):
        return self.detalleseguimientopoa_set.filter(status=True)

    def color_estado(self):
        if self.estado == 1:
            return 'text-secondary'
        elif self.estado == 2:
            return 'text-info'
        elif self.estado == 3:
            return 'text-success'
        elif self.estado == 4:
            return 'text-danger'
        else:
            return 'text-primary'

class DetalleSeguimientoPoa(ModeloBase):
    solicitud = models.ForeignKey(SeguimientoPoa, verbose_name=u"Solicitud de seguimiento de poa", on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', on_delete=models.CASCADE, verbose_name="persona que registra el seguimiento")
    observacion = models.CharField(default='', max_length=1000, verbose_name=u"Observaci√≥n", blank=True, null=True)
    archivo = models.FileField(upload_to='seguimientopoa/%Y/', blank=True, null=True, verbose_name=u'Archivo')

    def __str__(self):
        return  f'Observaci√≥n de {self.persona}'

    class Meta:
        verbose_name = u'Detalle Seguimiento POA'
        verbose_name_plural = u'Detalles Seguimientos POA'
        ordering = ('-fecha_creacion',)

    def tipo_archivo(self):
        namefile = self.archivo.name
        ext = namefile[namefile.rfind("."):].lower()
        if ext in ['.pdf']:
            return {'formato': 'pdf', 'icon': 'fa-file-pdf-o text-danger'}
        elif ext in ['.png', '.jpg', '.jpeg', '.svg']:
            return {'formato': 'img', 'icon': 'fa-file-image texto-blue'}
        elif ext in ['.xls', '.xlsx', '.xlsx', '.xlsb']:
            return {'formato': 'excel', 'icon': 'fa-file-excel-o text-success'}
        elif ext in ['.docx', '.doc']:
            return {'formato': 'word', 'icon': 'fa-file-word-o text-primary'}
        else:
            return {'formato': 'otro', 'icon': 'fa-file text-secondary'}

class PoaArchivo(ModeloBase):
    periodopoa = models.ForeignKey(PeriodoPoa, on_delete=models.CASCADE)
    unidadorganica = models.ForeignKey(Departamento, verbose_name=u"Unidad Org√°nica", on_delete=models.CASCADE)
    observacion = models.TextField(verbose_name=u"Observacion", blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Informe")
    archivo = models.FileField(upload_to='archivo_depa', blank=True, null=True, verbose_name=u'Archivo')

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper().strip() if self.observacion else None
        super(PoaArchivo, self).save(*args, **kwargs)


class PoaInformeFinal(ModeloBase):
    periodopoa = models.ForeignKey(PeriodoPoa, on_delete=models.CASCADE)
    unidadorganica = models.ForeignKey(Departamento, verbose_name=u"Unidad Org√°nica", on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Informe")
    observacion = models.TextField(verbose_name=u"Observacion", blank=True, null=True)
    mes = models.IntegerField(default=0, verbose_name=u"Mes")
    objetivosplanificados = models.IntegerField(default=0, verbose_name=u"Objetivos Planificados")
    objetivos = models.IntegerField(default=0, verbose_name=u"Total de Objetivos")
    planificado = models.DecimalField(default=0, max_digits=6, decimal_places=2, verbose_name=u"Planificado")
    ejecutado = models.DecimalField(default=0, max_digits=6, decimal_places=2, verbose_name=u"Ejecutado")
    ejecutadoparcial = models.DecimalField(default=0, max_digits=6, decimal_places=2, verbose_name=u"Ejecutado parcial")
    nocumple = models.DecimalField(default=0, max_digits=6, decimal_places=2, verbose_name=u"No cumple")
    pendiente = models.DecimalField(default=0, max_digits=6, decimal_places=2, verbose_name=u"Pendiente")
    cumplimiento = models.DecimalField(default=0, max_digits=6, decimal_places=2, verbose_name=u"Cumplimiento")

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper().strip() if self.observacion else None
        super(PoaInformeFinal, self).save(*args, **kwargs)


# MODELOS DE ACTIVOS FIJOS
class TipoDocumentoRespaldo(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Tipo Documento de Respaldo'
        verbose_name_plural = u'Tipo Documentos de Respaldo'
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def en_uso(self):
        return self.activofijo_set.exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(TipoDocumentoRespaldo, self).save(*args, **kwargs)


class ClaseDocumentoRespaldo(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Clase Documento Respaldo'
        verbose_name_plural = u'Clase Documentos Respaldo'
        ordering = ('nombre',)
        unique_together = ('nombre',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return ClaseDocumentoRespaldo.objects.filter(nombre__icontains=q).distinct()[:limit]

    def flexbox_repr(self):
        return self.nombre

    def flexbox_alias(self):
        return [self.id, self.nombre]

    def en_uso(self):
        return self.activofijo_set.exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(ClaseDocumentoRespaldo, self).save(*args, **kwargs)


class TipoBien(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Tipo de Bien'
        verbose_name_plural = u'Tipo de Bienes'
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def en_uso(self):
        return self.catalogobien_set.exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(TipoBien, self).save(*args, **kwargs)


class OrigenIngreso(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Origen de Ingreso'
        verbose_name_plural = u'Origen de Ingreso'
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def en_uso(self):
        return self.activofijo_set.exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(OrigenIngreso, self).save(*args, **kwargs)


class GruposCategoria(ModeloBase):
    descripcion = models.CharField(max_length=250, verbose_name=u"Descripci√≥n")
    identificador = models.CharField(default='', max_length=100, verbose_name=u"Identificador")

    def total_actividades(self):
        return len(self.actividadinformegc_set.filter(status=True))

    def __str__(self):
        return u"%s" % self.descripcion

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(GruposCategoria, self).save(*args, **kwargs)

class ActividadInformeGC(ModeloBase):
    grupocategoria = models.ForeignKey(GruposCategoria, blank=True, null=True, verbose_name=u"Grupo Categoria", on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=250, verbose_name=u"Actividad")
    activo = models.BooleanField(default=True, verbose_name=u"¬øActividad activa?")

    class Meta:
        verbose_name = u'Actividad informe grupo categoria'
        verbose_name_plural = u'Actividades informe grupo categoria'
        ordering = ('-fecha_creacion',)

    def __str__(self):
        return u"%s" % self.descripcion

class MantenimientoGruCategoria(ModeloBase):
    grupocategoria = models.ForeignKey(GruposCategoria, blank=True, null=True, verbose_name=u"Grupo Categoria",
                                       on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=250, verbose_name=u"Descripci√≥n")
    activo = models.BooleanField(default=True, verbose_name=u"Tarea activa?")

    def __str__(self):
        return u"%s" % self.descripcion

    def en_uso(self):
        return self.tareasactivospreventivos_set.exists()


class MantenimientoGruDanios(ModeloBase):
    grupocategoria = models.ForeignKey(GruposCategoria, blank=True, null=True, verbose_name=u"Grupo Categoria",
                                       on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=250, verbose_name=u"Descripci√≥n")
    activo = models.BooleanField(default=True, verbose_name=u"Tarea activa?")

    def __str__(self):
        return u"%s" % self.descripcion

    def en_uso(self):
        return self.tareasactivospreventivosdanios_set.exists()


class CatalogoBien(ModeloBase):
    tipocatalogo = models.IntegerField(choices=TIPO_CATALOGO, verbose_name=u'Tipo Catalogo', default=1)
    identificador = models.CharField(max_length=15, verbose_name=u"Identificador")
    descripcion = models.CharField(max_length=250, verbose_name=u"Descripci√≥n")
    tipobien = models.ForeignKey(TipoBien, blank=True, null=True, verbose_name=u"Tipo de Bien",
                                 on_delete=models.CASCADE)
    item = models.ForeignKey(Partida, verbose_name=u'Item', blank=True, null=True, on_delete=models.CASCADE)
    equipoelectronico = models.BooleanField(default=False, verbose_name=u"Equipo Electronico?")
    clasificado = models.BooleanField(default=False, verbose_name=u"Est√° clasificado?")
    grupo = models.ForeignKey(GruposCategoria, blank=True, null=True, verbose_name=u"Grupo Categoria",
                              on_delete=models.CASCADE)

    def __str__(self):
        return u"%s - %s" % (self.descripcion, self.tipobien)

    class Meta:
        verbose_name = u'Cat√°logo de Bienes'
        verbose_name_plural = u'Cat√°logo de Bienes'
        ordering = ('descripcion',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if extra:
            return eval('CatalogoBien.objects.filter(Q(descripcion__icontains="%s") | Q(identificador__icontains="%s"), status=True).filter(%s).distinct()[:%s]' % (q, q, extra, limit))
        return CatalogoBien.objects.filter(Q(descripcion__icontains=q) | Q(identificador__icontains=q), status=True).distinct()[:limit]

    def flexbox_repr(self):
        return u" [%s] - %s" % (self.identificador, self.descripcion)

    def flexbox_alias(self):
        return [u" [%s] - %s" % (self.identificador, self.descripcion)]

    def en_uso(self):
        return self.activofijo_set.exists()

    def cantidad_activos(self):
        return self.activofijo_set.count()

    def catalogo_des(self):
        return TIPO_CATALOGO[self.tipocatalogo - 1][1]

    def get_componenteactivo(self):
        return self.componentecatalogoactivo_set.filter(componente__status=True, status=True)

    def save(self, *args, **kwargs):
        self.identificador = self.identificador.upper().strip()
        self.descripcion = self.descripcion.upper().strip()
        super(CatalogoBien, self).save(*args, **kwargs)


class TipoProyecto(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u"Tipo Proyecto")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Tipo Proyecto'
        verbose_name_plural = u'Tipo Proyectos'
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def en_uso(self):
        return self.activofijo_set.exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(TipoProyecto, self).save(*args, **kwargs)


class Color(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u"Color")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Color'
        verbose_name_plural = u'Colores'
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def en_uso(self):
        if ActivoFijo.objects.filter(color=self).exists():
            return True
        elif ActivoFijo.objects.filter(colorprimario=self).exists():
            return True
        elif ActivoFijo.objects.filter(colorsecundario=self).exists():
            return True
        return False

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(Color, self).save(*args, **kwargs)


class ClaseVehiculo(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u"Clase Veh√≠culo")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Clase Veh√≠culo'
        verbose_name_plural = u'Clases Veh√≠culos'
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def en_uso(self):
        return self.activofijo_set.exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(ClaseVehiculo, self).save(*args, **kwargs)


class TipoVehiculo(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u"Tipo Veh√≠culo")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Tipo Veh√≠culo'
        verbose_name_plural = u'Tipos Veh√≠culos'
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def en_uso(self):
        return self.activofijo_set.exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(TipoVehiculo, self).save(*args, **kwargs)


class RangoVidaUtil(ModeloBase):
    descripcion = models.IntegerField(choices=SEMAFORO_VIDAUTIL, verbose_name=u'Descripcion', default=1)
    anio = models.IntegerField(default=0, verbose_name=u"A√±o")
    numeromesdesde = models.IntegerField(default=0, verbose_name=u"Numero mes desde")
    numeromeshasta = models.IntegerField(default=0, verbose_name=u"Numero mes hasta")

    def __str__(self):
        return u"%s" % self.descripcion


class ActivoFijo(ModeloBase):
    codigogobierno = models.CharField(default='', max_length=20, verbose_name=u"C√≥digo Gobierno")
    codigointerno = models.CharField(default='', blank=True, null=True, max_length=20, verbose_name=u"C√≥digo Interno")
    fechaingreso = models.DateField()
    observacion = models.TextField(default='', max_length=250, blank=True, null=True, verbose_name=u"Observaci√≥n")
    costo = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Costo")
    costohistorico = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Costo Historico")
    serie = models.CharField(default='', max_length=100, verbose_name=u"Serie")
    descripcion = models.CharField(default='', max_length=250, blank=True, null=True, verbose_name=u"Descripci√≥n")
    modelo = models.CharField(default='', max_length=100, verbose_name=u"Modelo")
    marca = models.CharField(default='', max_length=300, verbose_name=u"Marca")
    tipocomprobante = models.ForeignKey(TipoDocumento, blank=True, null=True, verbose_name=u"Tipo Comprobante",
                                        on_delete=models.CASCADE)
    numerocomprobante = models.CharField(default='', max_length=20, blank=True, null=True,
                                         verbose_name=u"N√∫mero Comprobante")
    fechacomprobante = models.DateField(blank=True, null=True)
    fechaultimadeprec = models.DateField(blank=True, null=True)
    fechafindeprec = models.DateField(blank=True, null=True)
    deprecia = models.BooleanField(default=True, verbose_name=u"Depreciable")
    vidautil = models.IntegerField(default=1, verbose_name=u"Vida √∫til")
    valorresidual = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor Residual")
    valorlibros = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor en libros")
    valordepreciacionacumulada = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                                     verbose_name=u"Valor Depreciaci√≥n Acumulads")
    valordepreciacionanual = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                                 verbose_name=u"Valor Depreciaci√≥n Anual")
    subidogobierno = models.BooleanField(default=False, verbose_name=u"Fue subido a la plataforma de Gobierno?")
    estructuraactivo = models.IntegerField(default=1, blank=True, null=True, choices=ESTRUCTURA_ACTIVO,
                                           verbose_name=u'Forma Ing. Activo')
    clasebien = models.IntegerField(default=1, blank=True, null=True, choices=CLASE_BIEN, verbose_name=u'Clase Bien')
    catalogo = models.ForeignKey(CatalogoBien, verbose_name=u"Cat√°logo", on_delete=models.CASCADE)
    origeningreso = models.ForeignKey(OrigenIngreso, verbose_name=u"Origen de ingreso", on_delete=models.CASCADE)
    tipodocumentorespaldo = models.ForeignKey(TipoDocumentoRespaldo, blank=True, null=True,
                                              verbose_name=u"Tipo Documento Respaldo", on_delete=models.CASCADE)
    clasedocumentorespaldo = models.ForeignKey(ClaseDocumentoRespaldo, blank=True, null=True,
                                               verbose_name=u"Clase Documento Respaldo", on_delete=models.CASCADE)
    estado = models.ForeignKey(EstadoProducto, verbose_name=u"Estado activo", on_delete=models.CASCADE)
    statusactivo = models.IntegerField(default=1, choices=ESTADO_ACTIVO, verbose_name=u'Status')
    tipoproyecto = models.ForeignKey(TipoProyecto, blank=True, null=True, verbose_name=u"Tipo Proyeecto",
                                     on_delete=models.CASCADE)
    cuentacontable = models.ForeignKey(CuentaContable, blank=True, null=True, verbose_name=u"Cuenta Contable",
                                       on_delete=models.CASCADE)
    origenregistro = models.IntegerField(default=1, choices=ORIGEN_REGISTRO, verbose_name=u'Origen Registro')
    custodio = models.ForeignKey('sga.Persona', related_name='custodioactivo', verbose_name=u"Custodio", blank=True,
                                 null=True, on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', related_name='responsableactivo', verbose_name=u"Usuario",
                                    blank=True, null=True, on_delete=models.CASCADE)
    ubicacion = models.ForeignKey(Ubicacion, verbose_name=u"Ubicaci√≥n", blank=True, null=True, on_delete=models.CASCADE)
    titulo = models.CharField(default='', max_length=500, verbose_name=u"T√≠tulo")
    autor = models.CharField(default='', max_length=500, verbose_name=u"Autor")
    editorial = models.CharField(default='', max_length=500, verbose_name=u"Editorial")
    fechaedicion = models.DateField(blank=True, null=True, verbose_name=u"Fecha Edici√≥n")
    numeroedicion = models.CharField(default='', max_length=100, verbose_name=u"N√∫mero Edici√≥n")
    clasificacionbibliografica = models.CharField(default='', max_length=200,
                                                  verbose_name=u"Clasificaci√≥n Bibliogr√°fica")
    color = models.ForeignKey(Color, related_name='+', blank=True, null=True, verbose_name=u"Color",
                              on_delete=models.CASCADE)
    material = models.CharField(default='', max_length=200, verbose_name=u"Material")
    dimensiones = models.CharField(default='', max_length=200, verbose_name=u"Dimensiones")
    clasevehiculo = models.ForeignKey(ClaseVehiculo, blank=True, null=True, verbose_name=u"Clase Vehiculo",
                                      on_delete=models.CASCADE)
    tipovehiculo = models.ForeignKey(TipoVehiculo, blank=True, null=True, verbose_name=u"Tipo Vehiculo",
                                     on_delete=models.CASCADE)
    numeromotor = models.CharField(default='', max_length=200, verbose_name=u"Numero Motor")
    numerochasis = models.CharField(default='', max_length=200, verbose_name=u"Numero Chasis")
    placa = models.CharField(default='', max_length=200, verbose_name=u"Placa")
    aniofabricacion = models.IntegerField(default=0, verbose_name=u"A√±o fabricaci√≥n")
    colorprimario = models.ForeignKey(Color, related_name='+', blank=True, null=True, verbose_name=u"Color Primario",
                                      on_delete=models.CASCADE)
    colorsecundario = models.ForeignKey(Color, related_name='+', blank=True, null=True,
                                        verbose_name=u"Color Secundario", on_delete=models.CASCADE)
    propietario = models.CharField(default='', max_length=200, verbose_name=u"Propietario")
    codigocatastral = models.CharField(default='', max_length=20, verbose_name=u"C√≥digo Catastral")
    numeropredio = models.CharField(default='', max_length=20, verbose_name=u"N√∫mero de Predio")
    valoravaluo = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor Aval√∫o")
    anioavaluo = models.IntegerField(default=0, verbose_name=u"A√±o Aval√∫o")
    areapredio = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"√Årea Predio")
    areaconstruccion = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                           verbose_name=u"√Årea Construccion")
    pisos = models.IntegerField(default=0, verbose_name=u"Pisos")
    provincia = models.ForeignKey('sga.Provincia', blank=True, null=True, verbose_name=u"Provincia",
                                  on_delete=models.CASCADE)
    canton = models.ForeignKey('sga.Canton', blank=True, null=True, verbose_name=u"Canton", on_delete=models.CASCADE)
    parroquia = models.ForeignKey('sga.Parroquia', blank=True, null=True, verbose_name=u"Parroquia",
                                  on_delete=models.CASCADE)
    zona = models.IntegerField(default=1, choices=TIPO_ZONA, verbose_name=u'Zona')
    nomenclatura = models.CharField(default='', max_length=20, verbose_name=u"Nomenclatura")
    sector = models.CharField(default='', max_length=300, verbose_name=u"Sector de residencia")
    direccion = models.CharField(default='', max_length=300, verbose_name=u"Calle principal")
    direccion2 = models.CharField(default='', max_length=300, verbose_name=u"Calle secundaria")
    escritura = models.CharField(default='', max_length=20, verbose_name=u"Escritura")
    fechaescritura = models.DateField(blank=True, null=True, verbose_name=u"Fecha Escritura")
    notaria = models.CharField(default='', max_length=200, verbose_name=u"Notaria")
    beneficiariocontrato = models.CharField(default='', max_length=200, verbose_name=u"Beneficiario")
    fechacontrato = models.DateField(blank=True, null=True, verbose_name=u"Fecha Contrato")
    duracioncontrato = models.IntegerField(default=0, verbose_name=u"Duraci√≥n del contrato")
    montocontrato = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Monto del contrato")
    archivobaja = models.FileField(upload_to='archivo_activo_baja/%Y/%m/%d', blank=True, null=True,
                                   verbose_name=u'Archivo Activo dado de Baja')
    procesobaja = models.BooleanField(default=False, verbose_name=u"¬øEn proceso de baja?")
    condicionestado = models.IntegerField(blank=True, null=True, choices=ESTADO_BAJA, verbose_name=u'Condici√≥n de estado')
    enuso = models.BooleanField(blank=True, null=True, verbose_name=u'¬øEst√° en uso?')
    ubicacionbodega = models.TextField(default='', max_length=250, blank=True, null=True, verbose_name=u"Ubicaci√≥n en bodega")
    fechainiciogarantia = models.DateField(blank=True, null=True, verbose_name=u'F. Inicio de garant√≠a')
    fechafingarantia = models.DateField(blank=True, null=True, verbose_name=u'F. Fin de garant√≠a')
    ebye = models.BooleanField(default=True, blank=True, null=True, verbose_name=u"Pertenece a eByE")

    def __str__(self):
        return u"%s - Cod.Inv. %s - Cod.Gob. %s " % (self.descripcion, self.codigointerno, self.codigogobierno)

    class Meta:
        verbose_name = u'Activos Fijos'
        verbose_name_plural = u'Activos Fijos'
        ordering = ('codigogobierno', 'descripcion',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if extra:
            #return eval(f'''ActivoFijo.objects.filter({extra}).filter(Q(descripcion__icontains="{q}") | Q(codigogobierno__icontains="{q}") | Q(codigointerno__icontains="{q}")).distinct()[:{limit}]''')
            return eval(f'''ActivoFijo.objects.filter(Q(descripcion__icontains="{q}") | Q(codigogobierno__icontains="{q}") | Q(codigointerno__icontains="{q}")).distinct()[:{limit}]''')
        return ActivoFijo.objects.filter(Q(descripcion__icontains=q) | Q(codigogobierno__icontains=q) | Q(codigointerno__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return u"%s - Cod.Inv. %s - Cod.Gob. %s " % (self.descripcion, self.codigointerno, self.codigogobierno)

    def flexbox_reprhd(self):
        return u"Cod.Inv. %s - Cod.Gob. %s - %s" % (self.codigointerno, self.codigogobierno, self.descripcion)

    def download_link(self):
        return self.archivobaja.url

    def flexbox_alias(self):
        return [self.id, self.descripcion, self.codigogobierno, self.estado.nombre, str(self.costo), self.estado_id,
                self.responsable.nombre_completo(), self.responsable_id, self.ubicacion.nombre, self.ubicacion_id]
        # return [self.id, self.descripcion, self.codigogobierno, self.estado.nombre, str(self.costo), self.estado_id, self.responsable.nombre_completo() if self.responsable else "No existe Responsable", self.responsable_id, self.ubicacion.nombre if self.ubicacion else "No existe Ubicacion", self.ubicacion_id]

    def fechadadobaja(self):
        resultado = None
        fechabaja = InformeActivoBaja.objects.filter(status=True, activofijo=self)
        if fechabaja:
            resultado = fechabaja[0].fecha_creacion
            return resultado
        return resultado

    def estado_activo(self):
        return ESTADO_ACTIVO[self.statusactivo - 1][1]

    def existeinformebaja(self):
        return self.informeactivobaja_set.filter(status=True).first()

    def documentoinformebaja(self):
        informebaja = self.existeinformebaja()
        return False if not informebaja else informebaja.documentofirmainformebaja_set.filter(status=True).first()

    def documento_firmadirector(self):
        informebaja = self.existeinformebaja()
        return False if not informebaja else informebaja.documentofirmainformebaja_set.filter(status=True, firmadirector=True).first()

    def archivo_informebaja(self):
        documento =self.documentoinformebaja()
        if documento and documento.archivo:
            return documento.archivo
        elif self.archivobaja:
            return self.archivobaja
        else:
            return False

    def clase_bien(self):
        return CLASE_BIEN[self.clasebien - 1][1]

    def origen_registro(self):
        return ORIGEN_REGISTRO[self.origenregistro - 1][1]

    def activo_origen(self):
        # if self.origenregistro == 1:
        return "Individual"
        # else:
        #     return "Lote"

    def estructura_activo(self):
        return ESTRUCTURA_ACTIVO[self.estructuraactivo - 1][1]

    def seleccionado(self, movimiento):
        return self.detalletraspasoactivo_set.filter(codigotraspaso=movimiento).exists()

    def total_mantenimientos(self):
        total = HdDetalle_Incidente.objects.filter(incidente__activo=self, status=True,
                                                   incidente__status=True).count() + MantenimientosActivosPreventivos.objects.filter(
            activofijo=self, status=True).count() + MantenimientosActivosGarantia.objects.filter(activofijo=self,
                                                                                                 status=True).count()
        return total if total else 0

    def total_accidentes(self):
        total = HdIncidente.objects.filter(activo=self).count()
        return total if total else 0

    def total_mantpreven(self):
        total = MantenimientosActivosPreventivos.objects.filter(activofijo=self).count()
        return total if total else 0

    def total_mantpregar(self):
        total = MantenimientosActivosGarantia.objects.filter(activofijo=self).count()
        return total if total else 0

    def total_bajaact(self):
        total = DetalleBajaActivo.objects.filter(activo=self).count()
        return total if total else 0

    def depreciar_activo(self, fecha, request):
        if self.statusactivo == 1:
            if self.deprecia:
                if self.vidautil > 0:
                    porc_residual = Decimal(0.10).quantize(Decimal('.01'))
                    self.valorresidual = (self.costo * porc_residual).quantize(Decimal('.01'), rounding=ROUND_HALF_UP)
                    subtotal = self.costo - self.valorresidual

                    depanual = subtotal / self.vidautil
                    depdiaria = depanual / Decimal('365')

                    dias = (fecha - self.fechaingreso).days + 1

                    anios = Decimal(dias / 365.0)
                    if anios > self.vidautil:
                        self.valordepreciacionacumulada = Decimal(self.costo - self.valorresidual).quantize(
                            Decimal('.01'), rounding=ROUND_HALF_UP)
                        self.valordepreciacionanual = self.valorresidual
                        diassuma = (self.vidautil * 365) - 1
                        self.fechafindeprec = self.fechaingreso + timedelta(days=diassuma)
                    else:
                        self.valordepreciacionacumulada = Decimal(depdiaria * dias).quantize(Decimal('.01'),
                                                                                             rounding=ROUND_HALF_UP)
                        self.valordepreciacionanual = Decimal(depanual).quantize(Decimal('.01'), rounding=ROUND_HALF_UP)
                        self.fechafindeprec = fecha
                    self.fechaultimadeprec = fecha
                self.valorlibros = Decimal(self.costo - self.valordepreciacionacumulada).quantize(Decimal('.01'),
                                                                                                  rounding=ROUND_HALF_UP)
            else:
                self.valordepreciacionacumulada = 0
                self.valordepreciacionanual = 0
                self.valorresidual = 0
            self.save(request)

    def mi_tarjeta_control(self):
        if self.tarjetacontrol_set.exists():
            return self.tarjetacontrol_set.all()[0]
        else:
            tarjetacontrol = TarjetaControl(activo=self)
            tarjetacontrol.save()
            secuencia = SecuenciaActivos.objects.all()[0]
            secuencia.numerotarjetacontrol += 1
            secuencia.save()
            tarjetacontrol.numero = secuencia.numerotarjetacontrol
            tarjetacontrol.save()
            return tarjetacontrol

    def en_uso(self):
        return self.detalletraspasoactivo_set.exists()

    def baja(self):
        return self.statusactivo == 2

    def tiene_responsable(self):
        return self.detalletraspasoactivo_set.exists()

    def actualiza_responsable_directo(self, custodio, ubicacion, usuario):
        self.custodio = custodio
        self.ubicacion = ubicacion
        self.responsable = usuario
        self.save()

    def actualiza_responsable(self):
        if TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self, status=True,
                                         detalletraspasoactivo__status=True).exists():
            usuario = None
            if TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self,
                                             detalletraspasoactivo__seleccionado=True, usuariobienrecibe__isnull=False,
                                             estado=2, tipo=2, status=True,
                                             detalletraspasoactivo__status=True).exists():
                usuario = TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self,
                                                        detalletraspasoactivo__seleccionado=True,
                                                        usuariobienrecibe__isnull=False, estado=2, tipo=2, status=True,
                                                        detalletraspasoactivo__status=True).order_by(
                    "-fecha").distinct()[0].usuariobienrecibe

            else:
                if TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self,
                                                 detalletraspasoactivo__seleccionado=True,
                                                 usuariobienrecibe__isnull=False, estado=2, tipo=1, status=True,
                                                 detalletraspasoactivo__status=True).exists():
                    usuario = TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self,
                                                            detalletraspasoactivo__seleccionado=True,
                                                            usuariobienrecibe__isnull=False, estado=2, tipo=1,
                                                            status=True, detalletraspasoactivo__status=True).order_by(
                        "-fecha").distinct()[0].usuariobienrecibe
                else:
                    usuario = None
            if TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self,
                                             detalletraspasoactivo__seleccionado=True, custodiobienrecibe__isnull=False,
                                             estado=2, status=True, detalletraspasoactivo__status=True).exists():
                custodio = TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self,
                                                         detalletraspasoactivo__seleccionado=True,
                                                         custodiobienrecibe__isnull=False, estado=2, status=True,
                                                         detalletraspasoactivo__status=True).order_by(
                    "-fecha").distinct()[0].custodiobienrecibe

            else:
                custodio = None
            if TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self,
                                             detalletraspasoactivo__seleccionado=True,
                                             ubicacionbienrecibe__isnull=False, estado=2, status=True,
                                             detalletraspasoactivo__status=True).order_by("-fecha").exists():
                ubicacion = TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self,
                                                          detalletraspasoactivo__seleccionado=True,
                                                          ubicacionbienrecibe__isnull=False, estado=2, status=True,
                                                          detalletraspasoactivo__status=True).order_by(
                    "-fecha").distinct()[0].ubicacionbienrecibe
            else:
                ubicacion = None
            self.custodio = custodio
            self.ubicacion = ubicacion
            self.responsable = usuario
            self.save()
        # else:
        #     self.custodio = None
        #     self.ubicacion = None
        #     self.responsable = None
        # self.save()

    def tiene_custodio(self):
        return self.detalletraspasoactivo_set.exists()

    def mi_custodio(self):
        if self.tiene_custodio():
            return TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self,
                                                 detalletraspasoactivo__historico=False).distinct()[
                0].custodiobienrecibe
        return None

    def mi_responsable(self):
        if self.tiene_custodio():
            return TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self,
                                                 detalletraspasoactivo__historico=False).distinct()[0].usuariobienrecibe
        return None

    def tiene_ubicacion(self):
        return self.detalletraspasoactivo_set.exists()

    def mi_ubicacion(self):
        if self.tiene_ubicacion():
            return \
            TraspasoActivo.objects.filter(detalletraspasoactivo__activo=self, detalletraspasoactivo__historico=False)[
                0].ubicacionbienrecibe
        return None

    def tiene_constatacion(self):
        return self.detalleconstatacionfisica_set.filter(codigoconstatacion__isnull=False, status=True).exists()

    def tipodoc(self):
        if self.tipocomprobante_id == 1:
            return "1-Factura"
        elif self.tipocomprobante_id == 2:
            return "2-Nota de Venta"
        elif self.tipocomprobante_id == 3:
            return "3-Liquidacion de Compras"
        else:
            return "4-Otros"

    def activo_estado(self):
        if self.estado_id == 1:
            return "Bueno"
        elif self.estado_id == 2:
            return "Regular"
        else:
            return "Malo"

    def activo_deprecia(self):
        if self.deprecia:
            return "S"
        else:
            return "N"

    def fecha_caducidad(self):
        if self.vidautil > 0:
            return self.fechaingreso + relativedelta(years=self.vidautil)
        return ""

    def es_electronico(self):
        if self.catalogo.equipoelectronico:
            return True
        return False

    def total_numerocomprobante_catalogo(self, catalogo):
        ids_at=ActivoTecnologico.objects.filter(status=True, activotecnologico__numerocomprobante=self.numerocomprobante).values_list('activotecnologico_id',flat=True)
        total=len(ActivoFijo.objects.filter(status=True, numerocomprobante=self.numerocomprobante, catalogo=catalogo).exclude(id__in=ids_at))
        return total + len(ids_at)

    def total_numerocomprobante(self):
        return len(ActivoFijo.objects.filter(status=True, numerocomprobante=self.numerocomprobante))

    def documento_activobaja_at(self):
        return DocumentoFirmaInformeBaja.objects.filter(status=True, informe__activofijo_id=self.id)

    def fecha_proceso_baja(self):
        return self.historialestadoactivo_set.filter(status=True).order_by('-id').last()

    def activo_constatado(self, periodo):
        return self.detalleconstatacionfisica_set.filter(status=True, codigoconstatacion__periodo_id=periodo, codigoconstatacion__status=True).first()

    def at_constatado(self, periodo):
        return DetalleConstatacionFisicaActivoTecnologico.objects.filter(status=True, cronograma__periodo_id=periodo, constatado=True, activo__activotecnologico=self).first()

    def existe_directorresponsablebaja(self, departamento):
        grupo_id = 12 if departamento == 'AF' else 14
        grupo = GrupoDepartamento.objects.filter(id=grupo_id).first()
        if grupo:
            departamento = grupo.departamento_set.filter(status=True, integrantes__isnull=False).first()
            if departamento:
                return DirectorResponsableBaja.objects.filter(status=True, departamento=departamento,
                                                                             actual=True).first()
        return None

    def existe_en_bodegavirtual(self):
        return self.bodegavirtual_set.filter(status=True).first()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        if not self.id:
            self.fechaultimadeprec = self.fechaingreso
        super(ActivoFijo, self).save(*args, **kwargs)

class HistorialEstadoActivo(ModeloBase):
    activo = models.ForeignKey(ActivoFijo, verbose_name=u"Activo Fijo", blank=True, null=True, on_delete=models.CASCADE)
    estado = models.ForeignKey(EstadoProducto, verbose_name=u"Estado activo", on_delete=models.CASCADE)
    condicionestado = models.IntegerField(blank=True, null=True, choices=ESTADO_BAJA, verbose_name=u'Condici√≥n de estado')
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u'Persona', on_delete=models.CASCADE)
    observacion = models.CharField(default='', verbose_name=u"Observaci√≥n cambio de estado", max_length=1000)
    enuso = models.BooleanField(blank=True, null=True, verbose_name=u'¬øEst√° en uso?')
    tiporegistro = models.IntegerField(blank=True, null=True, choices=MY_TIPO_REGISTRO_ACTIVO_FIJO, verbose_name=u'Tipo de registro')
    informe = models.FileField(upload_to='informe_estado_activo', blank=True, null=True, verbose_name=u'Informe')
    ubicacionbodega = models.TextField(default='', max_length=250, blank=True, null=True, verbose_name=u"Ubicaci√≥n en bodega")
    gestionbaja = models.BooleanField(default=False, verbose_name=u'Gesti√≥n de baja')

    class Meta:
        verbose_name = u'Historial de estado'
        verbose_name_plural = u'Historiales de estados'

    def color_estado(self):
        if self.condicionestado == 1:
            return 'danger'
        elif self.condicionestado == 2:
            return 'warning'
        elif self.condicionestado == 3:
            return 'primary'
        elif self.condicionestado == 4:
            return 'success'

    def nombre_condicionestado(self):
        return next(opcion[1] for opcion in ESTADO_BAJA if opcion[0] == int(self.condicionestado))


class PeriodoInventarioAT(ModeloBase):
    nombre = models.CharField(default='', max_length=150, verbose_name=u"Nombre Periodo")
    fechainicio = models.DateField(blank=True, null=True)
    fechafin = models.DateField(blank=True, null=True)
    fechacierre = models.DateField(blank=True, null=True)
    estado = models.IntegerField(default=1, choices=ESTADO_CIERRE, verbose_name=u'Estado')
    detalle = models.CharField(default='', max_length=150, verbose_name=u"Detalle Periodo")
    normativaconstatacion = models.TextField(default='', verbose_name=u"Normativa Constatacion")
    fechafinprorroga = models.DateField(blank=True, null=True, verbose_name=u'Fecha hasta donde se puede extender las constataciones')

    class Meta:
        verbose_name = u'Periodo Inventario'
        verbose_name_plural = u'Periodos Inventario'

    def save(self, *args, **kwargs):
        super(PeriodoInventarioAT, self).save(*args, **kwargs)

    def total_cronograma(self):
        return len(self.cronograma_periodo.filter(status=True))

    def eventos(self):
        return self.cronograma_periodo.filter(status=True)

    def cronograma_planificados(self):
        return self.cronograma_periodo.filter(status=True, estado=1)

    def cronograma_en_proceso(self):
        return self.cronograma_periodo.filter(status=True, estado=2)

    def cronograma_finalizado(self):
        return self.cronograma_periodo.filter(status=True, estado=3)

    def cronograma_cerrado(self):
        return self.cronograma_periodo.filter(status=True, estado=4)

    def total_activos(self):
        total = 0
        for evento in self.eventos():
            total += len(evento.activos_asignados())
        return total

    def total_activos_constatados(self):
        total = 0
        for evento in self.eventos():
            total += len(evento.activos_constatados())
        return total

    def total_activos_por_constatar(self):
        return self.total_activos() - self.total_activos_constatados()

    def detalle_constatacion(self):
        return DetalleConstatacionFisicaActivoTecnologico.objects.filter(status=True, cronograma__periodo=self)

    def __str__(self):
        return u"%s - Fec. Inicio %s - Fec. Fin %s" % (self.nombre, self.fechainicio, self.fechafin)


class EvidenciaPeriodoInventarioTecnologico(ModeloBase):
    nombre = models.CharField(default='', max_length=150, verbose_name=u"Nombre Evidencia")
    descripcion = models.CharField(default='', max_length=300, verbose_name=u"Descripci√≥n Evidencia")
    fecha = models.DateField(blank=True, null=True)
    archivo = models.FileField(upload_to='evidenciaperiodoinventariotecnologico', blank=True, null=True,
                               verbose_name=u'Evidencia pdf')
    periodo = models.ForeignKey(PeriodoInventarioAT, related_name='evidenciaperiodoinv',
                                verbose_name=u"Evidencia periodo", blank=True, null=True, on_delete=models.CASCADE)

    class Meta:
        verbose_name = u'Evidencia Periodo Inventario'
        verbose_name_plural = u'Evidencias Periodo Inventario'

    def save(self, *args, **kwargs):
        super(EvidenciaPeriodoInventarioTecnologico, self).save(*args, **kwargs)

    def __str__(self):
        return u"%s - Descripci√≥n %s" % (self.nombre, self.descripcion)


class AsignacionCierreInventarioAT(ModeloBase):
    persona = models.ForeignKey('sga.Persona', related_name='encargadocierre', verbose_name=u"Encargado", blank=True,
                                null=True, on_delete=models.CASCADE)
    periodo = models.ForeignKey(PeriodoInventarioAT, related_name='periodoinventario', verbose_name=u"Periodo",
                                blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateField(blank=True, null=True)
    estado = models.IntegerField(default=1, choices=ESTADO_INVENTARIO, verbose_name=u'Estado')

    class Meta:
        verbose_name = u'Proceso Inventario'
        verbose_name_plural = u'Procesos Inventario'

    def save(self, *args, **kwargs):
        super(AsignacionCierreInventarioAT, self).save(*args, **kwargs)


class Marca(ModeloBase):
    descripcion = models.CharField(default='', max_length=500, verbose_name=u"Marca")

    class Meta:
        verbose_name = u'Marca'
        verbose_name_plural = u'Marcas'

    def __str__(self):
        return u"%s" % (self.descripcion)

class ComponenteActivo(ModeloBase):
    descripcion = models.CharField(default='', max_length=500, verbose_name=u"Marca")

    class Meta:
        verbose_name = u'Componente'
        verbose_name_plural = u'Componentes'

    def __str__(self):
        return u"%s" % (self.descripcion)

    def en_uso(self):
        return self.componentecatalogoactivo_set.filter(status = True).values("id").exists()
        #ComponenteCatalogoActivo.objects.filter(status=True, componente=self).exists()


class ComponenteCatalogoActivo(ModeloBase):
    componente = models.ForeignKey(ComponenteActivo, verbose_name=u"Componente de activo",
                                          blank=True, null=True, on_delete=models.CASCADE)
    catalogo = models.ForeignKey(CatalogoBien, verbose_name=u"Cat√°logo de activo",
                                          blank=True, null=True, on_delete=models.CASCADE)

    class Meta:
        verbose_name = u'Componente de cat√°logo'
        verbose_name_plural = u'Componentes de cat√°logo'

    def detalle_componente(self, constatacion_id):
        return self.detallecatalogocomponenteconstatacionat_set.filter(status=True,  constatacion_id=constatacion_id).first()

    def nombre_input(self):
        return f'cca_{self.id}'

    def __str__(self):
        return u"%s - %s" % (self.componente, self.catalogo)

class ActivoTecnologico(ModeloBase):
    activotecnologico = models.ForeignKey(ActivoFijo, related_name='activotecnologico', verbose_name=u"ActivoFijo", blank=True, null=True, on_delete=models.CASCADE)
    comprobanteat = models.ForeignKey("sagest.ComprobanteAT", verbose_name=u"Comprobante de compra u otro de activo tecnol√≥gico", blank=True, null=True, on_delete=models.CASCADE)
    codigotic = models.IntegerField(blank=True, null=True, verbose_name=u"C√≥digo Tics")
    tipoactivo = models.ForeignKey("helpdesk.HdGruposCategoria", blank=True, null=True, verbose_name=u"Tipo activo",
                                   on_delete=models.CASCADE)
    # Campos de activo tecnol√≥gico principales
    codigogobierno = models.CharField(default='', max_length=20, verbose_name=u"C√≥digo Gobierno")
    codigointerno = models.CharField(default='', blank=True, null=True, max_length=20, verbose_name=u"C√≥digo Interno")
    serie = models.CharField(default='', blank=True, null=True, max_length=100, verbose_name=u"Serie")
    modelo = models.CharField(default='',blank=True, null=True, max_length=100, verbose_name=u"Modelo")
    marcaactivo = models.ForeignKey(Marca, related_name='marcaactivotecnologico', verbose_name=u"Marca", blank=True, null=True, on_delete=models.CASCADE)
    marca = models.CharField(default='', max_length=300, verbose_name=u"Marca")

    ubicacion = models.ForeignKey(Ubicacion, verbose_name=u"Ubicaci√≥n", blank=True, null=True, on_delete=models.CASCADE)
    grupocategoria = models.ForeignKey(GruposCategoria, verbose_name=u"Grupo categoria", blank=True, null=True,
                                       on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', related_name='responsableactivotecnologico', verbose_name=u"Usuario",
                                    blank=True, null=True, on_delete=models.CASCADE)
    fechacompra = models.DateField(blank=True, null=True)
    aplicagarantia = models.BooleanField(default=False, verbose_name=u'¬øProducto tiene garant√≠a?')
    garantiameses = models.IntegerField(default=0, verbose_name=u'Cantidad de garant√≠a en meses')
    periodogarantiainicio = models.DateField(blank=True, null=True)
    periodogarantiafin = models.DateField(blank=True, null=True)
    proveedor = models.ForeignKey(Proveedor, blank=True, null=True, verbose_name=u"Proveedor", on_delete=models.CASCADE)
    estado = models.ForeignKey(EstadoProducto, verbose_name=u"Estado activo tecnol√≥gico", blank=True, null=True,
                               on_delete=models.CASCADE)
    tipo_registro = models.IntegerField(choices=TIPO_REGISTRO_ACTIVOSTECNOLOGICOS, default=2,
                                        verbose_name=u'Tipo registro')
    # Campos no utilizados
    fechaingreso = models.DateField(blank=True, null=True, verbose_name=u'Fecha ingreso')
    observacion = models.TextField(default='', max_length=250, blank=True, null=True, verbose_name=u"Observaci√≥n")
    costo = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Costo")
    costohistorico = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Costo Historico")
    descripcion = models.CharField(default='', max_length=250, blank=True, null=True, verbose_name=u"Descripci√≥n")
    tipocomprobante = models.ForeignKey(TipoDocumento, blank=True, null=True, verbose_name=u"Tipo Comprobante",
                                        on_delete=models.CASCADE)
    numerocomprobante = models.CharField(default='', max_length=20, blank=True, null=True,
                                         verbose_name=u"N√∫mero Comprobante")
    fechacomprobante = models.DateField(blank=True, null=True)
    fechaultimadeprec = models.DateField(blank=True, null=True)
    fechafindeprec = models.DateField(blank=True, null=True)
    deprecia = models.BooleanField(default=True, verbose_name=u"Depreciable")
    vidautil = models.IntegerField(default=1, verbose_name=u"Vida √∫til")
    valorresidual = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor Residual")
    valorlibros = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor en libros")
    valordepreciacionacumulada = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                                     verbose_name=u"Valor Depreciaci√≥n Acumulads")
    valordepreciacionanual = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                                 verbose_name=u"Valor Depreciaci√≥n Anual")
    subidogobierno = models.BooleanField(default=False, verbose_name=u"Fue subido a la plataforma de Gobierno?")
    estructuraactivo = models.IntegerField(default=1, blank=True, null=True, choices=ESTRUCTURA_ACTIVO,
                                           verbose_name=u'Forma Ing. Activo')
    clasebien = models.IntegerField(default=1, blank=True, null=True, choices=CLASE_BIEN, verbose_name=u'Clase Bien')
    catalogo = models.ForeignKey(CatalogoBien, verbose_name=u"Cat√°logo", blank=True, null=True,
                                 on_delete=models.CASCADE)
    origeningreso = models.ForeignKey(OrigenIngreso, verbose_name=u"Origen de ingreso", blank=True, null=True,
                                      on_delete=models.CASCADE)
    tipodocumentorespaldo = models.ForeignKey(TipoDocumentoRespaldo, blank=True, null=True,
                                              verbose_name=u"Tipo Documento Respaldo", on_delete=models.CASCADE)
    clasedocumentorespaldo = models.ForeignKey(ClaseDocumentoRespaldo, blank=True, null=True,
                                               verbose_name=u"Clase Documento Respaldo", on_delete=models.CASCADE)
    statusactivo = models.IntegerField(default=1, choices=ESTADO_ACTIVO, verbose_name=u'Status')
    tipoproyecto = models.ForeignKey(TipoProyecto, blank=True, null=True, verbose_name=u"Tipo Proyecto",
                                     on_delete=models.CASCADE)
    cuentacontable = models.ForeignKey(CuentaContable, blank=True, null=True, verbose_name=u"Cuenta Contable",
                                       on_delete=models.CASCADE)
    origenregistro = models.IntegerField(default=1, choices=ORIGEN_REGISTRO, verbose_name=u'Origen Registro')
    custodio = models.ForeignKey('sga.Persona', related_name='custodioactivotecnologico', verbose_name=u"Custodio",
                                 blank=True, null=True, on_delete=models.CASCADE)
    titulo = models.CharField(default='', max_length=500, verbose_name=u"T√≠tulo")
    autor = models.CharField(default='', max_length=500, verbose_name=u"Autor")
    editorial = models.CharField(default='', max_length=500, verbose_name=u"Editorial")
    fechaedicion = models.DateField(blank=True, null=True, verbose_name=u"Fecha Edici√≥n")
    numeroedicion = models.CharField(default='', max_length=100, verbose_name=u"N√∫mero Edici√≥n")
    clasificacionbibliografica = models.CharField(default='', max_length=200,
                                                  verbose_name=u"Clasificaci√≥n Bibliogr√°fica")
    color = models.ForeignKey(Color, related_name='+', blank=True, null=True, verbose_name=u"Color",
                              on_delete=models.CASCADE)
    material = models.CharField(default='', max_length=200, verbose_name=u"Material")
    dimensiones = models.CharField(default='', max_length=200, verbose_name=u"Dimensiones")
    clasevehiculo = models.ForeignKey(ClaseVehiculo, blank=True, null=True, verbose_name=u"Clase Vehiculo",
                                      on_delete=models.CASCADE)
    tipovehiculo = models.ForeignKey(TipoVehiculo, blank=True, null=True, verbose_name=u"Tipo Vehiculo",
                                     on_delete=models.CASCADE)
    numeromotor = models.CharField(default='', max_length=200, verbose_name=u"Numero Motor")
    numerochasis = models.CharField(default='', max_length=200, verbose_name=u"Numero Chasis")
    placa = models.CharField(default='', max_length=200, verbose_name=u"Placa")
    aniofabricacion = models.IntegerField(default=0, verbose_name=u"A√±o fabricaci√≥n")
    colorprimario = models.ForeignKey(Color, related_name='colorprimarioactivotecnologico', blank=True, null=True,
                                      verbose_name=u"Color Primario", on_delete=models.CASCADE)
    colorsecundario = models.ForeignKey(Color, related_name='colorsecundarioactivotecnologico', blank=True, null=True,
                                        verbose_name=u"Color Secundario", on_delete=models.CASCADE)
    propietario = models.CharField(default='', max_length=200, verbose_name=u"Propietario")
    codigocatastral = models.CharField(default='', max_length=20, verbose_name=u"C√≥digo Catastral")
    numeropredio = models.CharField(default='', max_length=20, verbose_name=u"N√∫mero de Predio")
    valoravaluo = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor Aval√∫o")
    anioavaluo = models.IntegerField(default=0, verbose_name=u"A√±o Aval√∫o")
    areapredio = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"√Årea Predio")
    areaconstruccion = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                           verbose_name=u"√Årea Construccion")
    pisos = models.IntegerField(default=0, verbose_name=u"Pisos")
    provincia = models.ForeignKey('sga.Provincia', blank=True, null=True, verbose_name=u"Provincia",
                                  on_delete=models.CASCADE)
    canton = models.ForeignKey('sga.Canton', blank=True, null=True, verbose_name=u"Canton", on_delete=models.CASCADE)
    parroquia = models.ForeignKey('sga.Parroquia', blank=True, null=True, verbose_name=u"Parroquia",
                                  on_delete=models.CASCADE)
    zona = models.IntegerField(default=1, choices=TIPO_ZONA, verbose_name=u'Zona')
    nomenclatura = models.CharField(default='', max_length=20, verbose_name=u"Nomenclatura")
    sector = models.CharField(default='', max_length=300, verbose_name=u"Sector de residencia")
    direccion = models.CharField(default='', max_length=300, verbose_name=u"Calle principal")
    direccion2 = models.CharField(default='', max_length=300, verbose_name=u"Calle secundaria")
    escritura = models.CharField(default='', max_length=20, verbose_name=u"Escritura")
    fechaescritura = models.DateField(blank=True, null=True, verbose_name=u"Fecha Escritura")
    notaria = models.CharField(default='', max_length=200, verbose_name=u"Notaria")
    beneficiariocontrato = models.CharField(default='', max_length=200, verbose_name=u"Beneficiario")
    fechacontrato = models.DateField(blank=True, null=True, verbose_name=u"Fecha Contrato")
    duracioncontrato = models.IntegerField(default=0, verbose_name=u"Duraci√≥n del contrato")
    montocontrato = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Monto del contrato")
    archivobaja = models.FileField(upload_to='archivo_activotecnologico_baja/%Y/%m/%d', blank=True, null=True,
                                   verbose_name=u'Archivo Activo tecnol√≥gico dado de Baja')
    procesobaja = models.BooleanField(default=False, verbose_name=u"¬øEn proceso de baja?")
    actualizado = models.BooleanField(default=False, verbose_name=u"¬øActualizado?")

    class Meta:
        verbose_name = u'Activo Tecnol√≥gico'
        verbose_name_plural = u'Activos Tecnol√≥gicos'

    def save(self, *args, **kwargs):
        super(ActivoTecnologico, self).save(*args, **kwargs)

    def __str__(self):
        if self.activotecnologico:
            return u"%s " % (self.activotecnologico)
        return u"%s - Cod.Inv. %s - Cod.Gob. %s " % (self.descripcion, self.codigointerno, self.codigogobierno)

    def en_uso(self):
        return self.detalletraspasoactivotecnologico_set.exists()

    def constatacion(self):
        return self.detalleconstatacionfisicaactivotecnologico_set.filter(status=True).first()

    def depreciar_activo(self, fecha, request):
        if self.statusactivo == 1:
            if self.deprecia:
                if self.vidautil > 0:
                    porc_residual = Decimal(0.10).quantize(Decimal('.01'))
                    self.valorresidual = (self.costo * porc_residual).quantize(Decimal('.01'), rounding=ROUND_HALF_UP)
                    subtotal = self.costo - self.valorresidual

                    depanual = subtotal / self.vidautil
                    depdiaria = depanual / Decimal('365')

                    dias = (fecha - self.fechaingreso).days + 1

                    anios = Decimal(dias / 365.0)
                    if anios > self.vidautil:
                        self.valordepreciacionacumulada = Decimal(self.costo - self.valorresidual).quantize(
                            Decimal('.01'), rounding=ROUND_HALF_UP)
                        self.valordepreciacionanual = self.valorresidual
                        diassuma = (self.vidautil * 365) - 1
                        self.fechafindeprec = self.fechaingreso + timedelta(days=diassuma)
                    else:
                        self.valordepreciacionacumulada = Decimal(depdiaria * dias).quantize(Decimal('.01'),
                                                                                             rounding=ROUND_HALF_UP)
                        self.valordepreciacionanual = Decimal(depanual).quantize(Decimal('.01'), rounding=ROUND_HALF_UP)
                        self.fechafindeprec = fecha
                    self.fechaultimadeprec = fecha
                self.valorlibros = Decimal(self.costo - self.valordepreciacionacumulada).quantize(Decimal('.01'),
                                                                                                  rounding=ROUND_HALF_UP)
            else:
                self.valordepreciacionacumulada = 0
                self.valordepreciacionanual = 0
                self.valorresidual = 0
            self.save(request)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if extra:
            return eval('''ActivoTecnologico.objects.filter(Q(codigotic__contains="%s") |
                                                Q(activotecnologico__codigogobierno__icontains="%s") |
                                                Q(activotecnologico__codigointerno__icontains="%s") |
                                                Q(activotecnologico__descripcion__icontains="%s"),
                                                status=True
                                                ).filter(%s).distinct()[:%s]''' % (q, q, q, q, extra, limit))
        return ActivoTecnologico.objects.filter(Q(codigotic__contains=q) |
                                                Q(activotecnologico__codigogobierno__icontains=q) |
                                                Q(activotecnologico__codigointerno__icontains=q) |
                                                Q(activotecnologico__descripcion__icontains=q),
                                                status=True
                                                ).distinct()[:limit]

    def flexbox_repr(self):
        return u"%s - Cod.Tic. %s" % (self.activotecnologico.descripcion, self.codigotic)

    def flexbox_repr_lic(self):
        return u"%s - Cod.Tic. %s - Cod.Gob. %s" % (self.activotecnologico.descripcion, self.codigotic, self.codigogobierno)

    def actividades_informe_baja(self):
        return ActividadInformeGC.objects.filter(status=True, grupocategoria=self.activotecnologico.catalogo.grupo)

    def informe_baja(self):
        return InformeActivoBaja.objects.filter(status=True, activofijo=self.activotecnologico).first()

    def firmo_director(self):
        return DocumentoFirmaInformeBaja.objects.filter(informe=self.informe_baja(), status=True, firmadirector=True)

    def documento_informebaja(self):
        return DocumentoFirmaInformeBaja.objects.filter(informe=self.informe_baja(), status=True).first()

    def tiene_garantia(self):
        hoy = datetime.now().date()
        if int(hoy.month) == 2 and int(hoy.day) == 29:
            fecha_tope = date(int(hoy.year - 3), int(hoy.month), 28)
        else:
            fecha_tope = date(int(hoy.year - 3), int(hoy.month), int(hoy.day))
        if self.activotecnologico.fechacomprobante:
            return True if self.activotecnologico.fechacomprobante >= fecha_tope else False
        return False

class TipoNotificacion(ModeloBase):
    descripcion = models.CharField(default='', blank=True, null=True, max_length=400, verbose_name=u"Descripci√≥n")

    def __str__(self):
        return f"{self.descripcion}"

    class Meta:
        verbose_name = u'Tipo de Notificacion'
        verbose_name_plural = u'Tipos de Notificaciones'
        ordering = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(TipoNotificacion, self).save(*args, **kwargs)

    def en_uso(self):
        return True if self.notificacionactivoresponsable_set.filter(status=True).exists() else False


class Notificacionactivoresponsable(ModeloBase):
    activo = models.ForeignKey(ActivoTecnologico, verbose_name=u"Activo tecnologico", blank=True, null=True, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoNotificacion, verbose_name=u"Tipo de Notificacion", blank=True, null=True, on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', verbose_name=u"Responsable", blank=True, null=True, on_delete=models.CASCADE)
    asunto = models.CharField(default='', blank=True, null=True, max_length=1000, verbose_name=u"Asunto")
    detalle = models.CharField(default='', blank=True, null=True, max_length=9000, verbose_name=u"Detalle")
    fecha = models.DateField(blank=True, null=True, verbose_name=u"Fecha de Notificacion")
    hora = models.TimeField(blank=True, null=True, verbose_name=u"hora de Notificacion")
    estado = models.IntegerField(choices=ESTADO_NOTIFICACION, default=1, blank=True, null=True, verbose_name=u'Estado')
    fechaestado = models.DateField(blank=True, null=True, verbose_name=u"Fecha de Cambio de estado")
    horaestado = models.TimeField(blank=True, null=True, verbose_name=u"hora de Cambio de estado")


    def __str__(self):
        return f"{self.asunto}"

    class Meta:
        verbose_name = u'Notificacion de Activo'
        verbose_name_plural = u'Notificaciones de Activos'
        ordering = ('asunto',)


class HistorialEstadoActivoTecnologico(ModeloBase):
    activo = models.ForeignKey(ActivoTecnologico, verbose_name=u"Activo tecnologico", blank=True, null=True,
                               on_delete=models.CASCADE)
    estado = models.ForeignKey(EstadoProducto, verbose_name=u"Estado activo tecnologico", on_delete=models.CASCADE)

    class Meta:
        verbose_name = u'Historial de estado del activo tecnologico'
        verbose_name_plural = u'Historiales de estados de activos tecnologicos'

class CronogramaPersonaConstatacionAT(ModeloBase):
    persona = models.ForeignKey('sga.Persona', related_name='cronograma_persona', verbose_name=u"Encargado", blank=True,null=True, on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', related_name='responsable_constatar', verbose_name=u"Responsable de constatar activos", blank=True,null=True, on_delete=models.CASCADE)
    periodo = models.ForeignKey(PeriodoInventarioAT, related_name='cronograma_periodo', verbose_name=u"Periodo", blank=True, null=True, on_delete=models.CASCADE)
    hora = models.TimeField(blank=True, null=True, verbose_name=u"hora cronograma")
    fecha = models.DateField(blank=True, null=True, verbose_name=u"fecha cronograma")
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
    fechainicio = models.DateTimeField(verbose_name=u"Fecha inicio constataci√≥n", blank=True, null=True)
    fechafin = models.DateTimeField(verbose_name=u"Fecha Fin constataci√≥n", blank=True, null=True)
    fechacierre = models.DateTimeField(verbose_name=u"Fecha cierre de constataci√≥n", blank=True, null=True)
    estado = models.IntegerField(default=1, choices=ESTADO_CONSTATACION_AT, verbose_name=u'Estado')
    descripcion = models.CharField(default='', max_length=150, verbose_name=u"Descripci√≥n")

    def __str__(self):
        return u"%s - %s" % (self.persona.nombre_normal_minus(), self.get_estado_display())

    def color_estado(self):
        color='badge bg-primary'
        if self.estado == 2:
            color='badge bg-secondary'
        if self.estado == 3:
            color='badge bg-success'
        if self.estado == 4:
            color = 'badge bg-dark'
        return color

    def color_evento(self):
        color='#3498DB'
        if self.estado == 2:
            color='#79758f'
        if self.estado == 3:
            color='rgb(25, 203, 152)'
        if self.estado == 4:
            color='#212529'
        return color

    def constataciones(self):
        return self.detalleconstatacionfisicaactivotecnologico_set.filter(status=True)

    def activos_tecnologicos(self):
        informe_ab=InformeActivoBaja.objects.filter(status=True,responsable_id=self.persona.id).values_list('activofijo_id')
        activos_t=ActivoTecnologico.objects.filter(status=True,
                                                   activotecnologico__responsable_id=self.persona.id,
                                                   activotecnologico__statusactivo=1,
                                                   activotecnologico__procesobaja=False).exclude(activotecnologico_id__in=informe_ab).exclude(id__in=self.activos_asignados())
        # ids_af=activos_t.values_list('activotecnologivo_id', flat=True)
        # af_traspasados=HistorialTraspaso.objects.filter(status=True,activofijo_id__in=ids_af, responsableasignado_id=self.persona.id, fecha_creacion)
        return activos_t

    def activos_constatados(self):
        return self.constataciones().filter(cronograma__status=True, constatado=True).values_list('activo_id')

    def activos_asignados(self):
        return self.constataciones().filter(cronograma__status=True).values_list('activo_id')

    def activos_por_constatar(self):
        return len(self.activos_asignados())-len(self.activos_constatados())

    def puede_eliminar(self):
        puede = True if len(self.detalleconstatacionfisicaactivotecnologico_set.filter(status=True, constatado=True)) == 0 else False
        return puede

    def acta_firmada_orden_1(self):
        return self.historialdocumentosfirmadosconstatacionat_set.filter(status=True,orden=1).last()

    def acta_firmada_orden_2(self):
        return self.historialdocumentosfirmadosconstatacionat_set.filter(status=True,orden=2).last()

    def acta_firmada(self):
        return self.historialdocumentosfirmadosconstatacionat_set.filter(status=True).last()

    def save(self, *args, **kwargs):
        super(CronogramaPersonaConstatacionAT, self).save(*args, **kwargs)

    class Meta:
        verbose_name = u'Cronograma Persona Inventario'
        verbose_name_plural = u'Cronogramas Persona Inventario'

class DetalleConstatacionFisicaActivoTecnologico(ModeloBase):
    cronograma = models.ForeignKey(CronogramaPersonaConstatacionAT,blank=True, null=True,verbose_name=u"Cabecera constataci√≥n", on_delete=models.CASCADE)
    activo = models.ForeignKey(ActivoTecnologico, verbose_name=u"Activo tecnologico", on_delete=models.CASCADE)
    encontrado = models.BooleanField(default=False, verbose_name=u"Encontrado")
    enuso = models.BooleanField(default=False, verbose_name=u"En Uso")
    perteneceusuario = models.BooleanField(default=False, verbose_name=u"Pertenece a Usuario")
    usuariobienes = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Usuario/Bienes", on_delete=models.CASCADE)
    ubicacionbienes = models.ForeignKey(Ubicacion, blank=True, null=True, verbose_name=u"Ubicaci√≥n/Bienes", on_delete=models.CASCADE)
    estadooriginal = models.ForeignKey(EstadoProducto, blank=True, null=True, related_name='estadooriginal', verbose_name=u"Estado Original", on_delete=models.CASCADE)
    estadoactual = models.ForeignKey(EstadoProducto, blank=True, null=True, related_name='estadoactual', verbose_name=u"Estado Actual", on_delete=models.CASCADE)
    requieretraspaso = models.BooleanField(default=False, verbose_name=u"Requiere Traspaso")
    requieredarbaja = models.BooleanField(default=False, verbose_name=u"Requiere dar de baja el activo")
    aplica = models.BooleanField(default=False, verbose_name=u"Aplica componentes con activo")
    observacion = models.TextField(default='', verbose_name=u"Observaci√≥n")
    constatado = models.BooleanField(default=False, verbose_name=u"Activo Constatado")
    bloque = models.ForeignKey('sagest.HdBloque',blank=True, null=True,verbose_name=u"Bloque donde se ubica el bien", on_delete=models.CASCADE)
    ubicacion = models.ForeignKey('sagest.HdBloqueUbicacion',blank=True, null=True,verbose_name=u"Ubicaci√≥n dentro de bloque del bien", on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % (self.activo)

    def detalle_componentes(self):
        return self.detallecatalogocomponenteconstatacionat_set.filter(status=True)

    class Meta:
        verbose_name = u'Detalle constataci√≥n f√≠sica activo tecnol√≥gico'
        verbose_name_plural = u'Detalles constataciones f√≠sicas activo tecnol√≥gico'

class DetalleCatalogoComponenteConstatacionAT(ModeloBase):
    constatacion = models.ForeignKey(DetalleConstatacionFisicaActivoTecnologico, blank=True, null=True, verbose_name=u"Constatacion de activo tecnol√≥gico", on_delete=models.CASCADE)
    catalogo = models.ForeignKey(ComponenteCatalogoActivo, blank=True, null=True, verbose_name=u"Cat√°logo", on_delete=models.CASCADE)
    estado = models.ForeignKey(EstadoProducto, blank=True, null=True, verbose_name=u"Estado Actual",on_delete=models.CASCADE)
    observacion = models.TextField(default='', verbose_name=u"Observaci√≥n")
    encontrado = models.BooleanField(default=False, verbose_name=u"Encontrado")

    def __str__(self):
        return u"%s" % (self.catalogo)

    def color_texto(self):
        color='text-default'
        if self.estado.id==1:
            color = 'text-success'
        if self.estado.id==2:
            color = 'text-secondary'
        if self.estado.id==3:
            color = 'text-danger'
        return color

    def nombre_input(self):
        return f'dcc_{self.id}'

    class Meta:
        verbose_name = u'Detalle catalogo componenete constatacion AT'
        verbose_name_plural = u'Detalles catalogo componenete constatacion AT'

class HistorialDocumentosFirmadosConstatacionAT(ModeloBase):
    cronograma = models.ForeignKey(CronogramaPersonaConstatacionAT, on_delete=models.CASCADE, verbose_name=u'Cronograma de constataci√≥n')
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u'Persona que firmo el documento', on_delete=models.CASCADE, related_name='+')
    archivo = models.FileField(upload_to='activostecnologicos/acta_constatacion/', blank=True, null=True,verbose_name=u'Archivo a Firmar')
    orden = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'Orden de Firma')

    def __str__(self):
        return u'%s' % (self.persona)

class TraspasoActivoTecnologico(ModeloBase):
    tipo = models.IntegerField(default=1, choices=TIPO_MOVIMIENTO_ACTIVO, verbose_name=u'Tipo')
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
    actaentregagobierno = models.IntegerField(default=0, verbose_name=u"N√∫mero gobierno")
    fecha = models.DateTimeField(verbose_name="Fecha")
    tiposolicitud = models.IntegerField(default=1, choices=TIPO_SOLICITUD_TRASPASO_BAJA, blank=True, null=True,
                                        verbose_name=u'Tipo Solicitud')
    solicitante = models.ForeignKey('sga.Persona', related_name="solicitantetraspasoat", blank=True, null=True,
                                    verbose_name=u"Solicitante", on_delete=models.CASCADE)
    oficio = models.CharField(max_length=150, default='', verbose_name=u"Oficio")
    fechaoficio = models.DateField(blank=True, null=True, verbose_name=u"Fecha Oficio/Email")
    ubicacionbienentrega = models.ForeignKey(Ubicacion, related_name="ubicacionbienentregaat", blank=True, null=True,
                                             verbose_name=u"Ubicaci√≥n Entrega", on_delete=models.CASCADE)
    ubicacionbienrecibe = models.ForeignKey(Ubicacion, related_name="ubicacionbienrecibeat", blank=True, null=True,
                                            verbose_name=u"Ubicaci√≥n Recibe", on_delete=models.CASCADE)
    custodiobienentrega = models.ForeignKey('sga.Persona', related_name="custodiobienentregaat", blank=True, null=True,
                                            verbose_name=u"Custodio Entrega", on_delete=models.CASCADE)
    custodiobienrecibe = models.ForeignKey('sga.Persona', related_name="custodiobienrecibeat", blank=True, null=True,
                                           verbose_name=u"Custodio Recibe", on_delete=models.CASCADE)
    usuariobienentrega = models.ForeignKey('sga.Persona', related_name="usuariobienentregaat", blank=True, null=True,
                                           verbose_name=u"Usuario Entrega", on_delete=models.CASCADE)
    usuariobienrecibe = models.ForeignKey('sga.Persona', related_name="usuariobienrecibeat", blank=True, null=True,
                                          verbose_name=u"Usuario Recibe", on_delete=models.CASCADE)
    responsablebienes = models.ForeignKey('sga.Persona', related_name="responsablebienesat",
                                          verbose_name=u"Responsable Bienes", on_delete=models.CASCADE)
    observacion = models.TextField(default='', max_length=250, verbose_name=u"Observaci√≥n")
    proveedor = models.CharField(default='', max_length=250, verbose_name=u"Proveedor")
    asistentebodega = models.ForeignKey('sga.Persona', related_name="asistentebodegaat", blank=True, null=True,
                                        verbose_name=u"Asistente de bodega", on_delete=models.CASCADE)
    normativatraspaso = models.TextField(default='', max_length=250, verbose_name=u"Normativa Traspaso")
    normativaacta = models.TextField(default='', max_length=250, verbose_name=u"Normativa Acta")
    estado = models.IntegerField(choices=ESTADO_PROCESO, default=1, verbose_name=u"Estado")
    tipotraspaso = models.IntegerField(choices=TIPO_TRASPASO, default=0, verbose_name=u"Estado")
    totalbienes = models.IntegerField(default=0, verbose_name=u"total")
    traspasoactivofirma = models.FileField(upload_to='traspasoactivofirmaat', blank=True, null=True,
                                           verbose_name=u'Archivo traspaso activo')

    class Meta:
        verbose_name = u'Traspaso activo tecnologico'
        verbose_name_plural = u'Traspasos activo tecnologico'


class DetalleTraspasoActivoTecnologico(ModeloBase):
    codigotraspaso = models.ForeignKey(TraspasoActivoTecnologico, verbose_name=u"C√≥digo Traspaso",
                                       on_delete=models.CASCADE)
    activo = models.ForeignKey(ActivoTecnologico, verbose_name=u"Activo tecnol√≥gico", on_delete=models.CASCADE)
    historico = models.BooleanField(default=False, verbose_name=u"No es Actual")
    seleccionado = models.BooleanField(default=False, verbose_name=u"Seleccionado para traspaso")

    class Meta:
        verbose_name = u'Detalle traspaso activo tecnologico'
        verbose_name_plural = u'Detalles traspasos activo tecnologico'


class HistorialTraspaso(ModeloBase):
    activofijo = models.ForeignKey(ActivoFijo, related_name='historialtraspasoactivo', verbose_name=u"ActivoFijo",
                                   blank=True, null=True, on_delete=models.CASCADE)
    responsableanterior = models.ForeignKey('sga.Persona', related_name='activoanterior', verbose_name=u"Anterior",
                                            blank=True, null=True, on_delete=models.CASCADE)
    responsableasignado = models.ForeignKey('sga.Persona', related_name='activoasignado', verbose_name=u"Asignado",
                                            blank=True, null=True, on_delete=models.CASCADE)
    fechasolicitud = models.DateField(blank=True, null=True)
    fechaasignacion = models.DateField(blank=True, null=True)
    archivo = models.FileField(upload_to='entregaactivo', blank=True, null=True, verbose_name=u'Archivo activo pdf')

    class Meta:
        verbose_name = u'Historial Activos Fijos'
        verbose_name_plural = u'Historial Activos Fijos'

    def save(self, *args, **kwargs):
        super(HistorialTraspaso, self).save(*args, **kwargs)


class SolicitudActivos(ModeloBase):
    activo = models.ForeignKey(ActivoFijo, related_name='solicitudactivo', verbose_name=u"SolicitudActivo", blank=True,
                               null=True,
                               on_delete=models.CASCADE)
    responsableasignacion = models.ForeignKey('sga.Persona', related_name='responsableasignado',
                                              verbose_name=u"ResponsablePendiente",
                                              blank=True, null=True, on_delete=models.CASCADE)
    solicitante = models.ForeignKey('sga.Persona', related_name='solicitante', verbose_name=u"Solicitante",
                                    blank=True, null=True, on_delete=models.CASCADE)
    fechasolicitud = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Solicitud")
    fechaaceptacion = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Aceptacion")
    codigoinforme = models.CharField(default='', max_length=20, verbose_name=u"C√≥digo Informe")
    estado = models.IntegerField(default=1, choices=ESTADO_TRASPASO, verbose_name=u'Estado')
    accionorigen = models.IntegerField(default=1, choices=ACCION_MODULO,
                                       verbose_name=u'Acci√≥n de orgien de la solicitud de traspaso')

    class Meta:
        verbose_name = u'Solicitud Activos Fijos'
        verbose_name_plural = u'Solicitud Activos Fijos'

    def save(self, *args, **kwargs):
        super(SolicitudActivos, self).save(*args, **kwargs)

    def __str__(self):
        return u"%s - %s" % (self.activo, self.responsableasignacion)


class ActivoFijoInventarioTecnologico(ModeloBase):
    activo = models.ForeignKey(ActivoFijo, related_name='activotecnologicoinventario',
                               verbose_name=u"ActivoTecnologicoInventario", blank=True, null=True,
                               on_delete=models.CASCADE)
    activotecnologico = models.ForeignKey(ActivoTecnologico, related_name='activotecnologicoinventariotics',
                                          verbose_name=u"ActivoTecnologicoInventario", blank=True, null=True,
                                          on_delete=models.CASCADE)
    periodo = models.ForeignKey(PeriodoInventarioAT, related_name='periodoinventarioat', verbose_name=u"PeriodoAT",
                                blank=True, null=True, on_delete=models.CASCADE)
    fechainventario = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Solicitud tecnologico")
    observacion = models.CharField(max_length=200, default="", verbose_name=u"Inventario")
    estadoubicacion = models.IntegerField(default=1, choices=ESTADO_UBICACION, verbose_name=u'Estado ubicaci√≥n')
    estadofuncionamiento = models.IntegerField(default=1, choices=ESTADO_FUNCIONAMIENTO,
                                               verbose_name=u'Estado funcionamiento')
    estadouso = models.IntegerField(default=1, choices=ESTADO_USO_AT, verbose_name=u'Estado uso')
    movimiento = models.IntegerField(default=1, choices=ESTADO_MOVIMIENTO, verbose_name=u'Estado Movimiento')
    estado = models.IntegerField(default=0, verbose_name=u'Estado')

    class Meta:
        verbose_name = u'Inventario Activo Tecnologico'
        verbose_name_plural = u'Inventario Activos Tecnologicos'

    def save(self, *args, **kwargs):
        super(ActivoFijoInventarioTecnologico, self).save(*args, **kwargs)

    def obtenercodigotic(self):
        activo = ActivoTecnologico.objects.filter(status=True, activotecnologico_id=self.activo_id)
        codigo = activo[0].codigotic if activo.exists() else ''
        return codigo

    def estadosasignados(self):
        return InventarioATEstadosGenerales.objects.filter(inventarioat_id=self.id, status=True,
                                                           estadogeneral__status=True)

    def obtener_ubicacion_bloque(self):
        consulta = ActivoFijoInventarioTecnologico.objects.filter(id=self.id).values_list(
            'activo__ubicacion__bloque__descripcion')[0][0]
        return consulta


class EstadosGeneralesInventarioAT(ModeloBase):
    descripcion = models.CharField(default='', max_length=150, verbose_name=u"Nombre estado general")

    class Meta:
        verbose_name = u'Estado general'
        verbose_name_plural = u'Estados generales'

    def save(self, *args, **kwargs):
        super(EstadosGeneralesInventarioAT, self).save(*args, **kwargs)

    def __str__(self):
        return u"%s " % (self.descripcion)


class InventarioATEstadosGenerales(ModeloBase):
    inventarioat = models.ForeignKey(ActivoFijoInventarioTecnologico, related_name='estadogeneralinventario',
                                     verbose_name=u"Estado general inventario at", blank=True, null=True,
                                     on_delete=models.CASCADE)
    estadogeneral = models.ForeignKey(EstadosGeneralesInventarioAT, related_name='estadogeneral',
                                      verbose_name=u"Estado general", blank=True, null=True,
                                      on_delete=models.CASCADE)

    class Meta:
        verbose_name = u'Estado general inventario'
        verbose_name_plural = u'Estados generales inventario'

    def save(self, *args, **kwargs):
        super(InventarioATEstadosGenerales, self).save(*args, **kwargs)

    def __str__(self):
        return u"%s " % (self.estadogeneral.descripcion)


class PrestamoActivosOperaciones(ModeloBase):
    activotecnologico = models.ForeignKey(ActivoTecnologico, related_name='Activotecnologico',
                                          verbose_name=u"Activo tecnologico", blank=True, null=True,
                                          on_delete=models.CASCADE)
    personaentrega = models.ForeignKey(Persona, related_name='Personaentrega', verbose_name=u"Persona entrega",
                                       blank=True, null=True, on_delete=models.CASCADE)
    personarecibe = models.ForeignKey(Persona, related_name='Personarecibe', verbose_name=u"Persona recibe", blank=True,
                                      null=True, on_delete=models.CASCADE)
    desde = models.DateField(verbose_name=u'Fecha desde', blank=True, null=True)
    hasta = models.DateField(verbose_name=u'Fecha hasta', blank=True, null=True)
    fechadevolucion = models.DateField(verbose_name=u'Fecha devoluci√≥n', blank=True, null=True)
    estado = models.IntegerField(choices=PRESTAMO_ACTIVOS_OPERACIONES, default=1, blank=True, null=True,
                                 verbose_name=u"Estado prestamo")
    observacion = models.TextField(default='', max_length=500, verbose_name=u"Observaci√≥n")

    class Meta:
        verbose_name = u'Pr√©stamo activo'
        verbose_name_plural = u'Pr√©stamos activos'

    def save(self, *args, **kwargs):
        super(PrestamoActivosOperaciones, self).save(*args, **kwargs)


class AuditoriaPrestamoActivosOperaciones(ModeloBase):
    prestamo = models.ForeignKey(PrestamoActivosOperaciones, related_name='Prestamo', verbose_name=u"Pr√©stamo",
                                 blank=True, null=True,
                                 on_delete=models.CASCADE)
    personaentrega = models.ForeignKey(Persona, related_name='AuditoriaPersonaentrega', verbose_name=u"Persona entrega",
                                       blank=True, null=True, on_delete=models.CASCADE)
    personarecibe = models.ForeignKey(Persona, related_name='AuditoriaPersonarecibe', verbose_name=u"Persona recibe",
                                      blank=True,
                                      null=True, on_delete=models.CASCADE)
    desde = models.DateField(verbose_name=u'Auditoria fecha desde', blank=True, null=True)
    hasta = models.DateField(verbose_name=u'Auditoria fecha hasta', blank=True, null=True)
    fechadevolucion = models.DateField(verbose_name=u'Auditoria fecha devoluci√≥n', blank=True, null=True)
    estado = models.IntegerField(choices=AUDITORIA_PRESTAMO_ACTIVOS_OPERACIONES, default=1, blank=True, null=True,
                                 verbose_name=u"Estado auditoria")
    observacion = models.TextField(default='', max_length=500, verbose_name=u"Observaci√≥n")

    class Meta:
        verbose_name = u'Auditor√≠a pr√©stamo'
        verbose_name_plural = u'Auditor√≠as pr√©stamos'

    def save(self, *args, **kwargs):
        super(AuditoriaPrestamoActivosOperaciones, self).save(*args, **kwargs)


ESTADO_ACTA_CONSTATACION = ((1,'Pendiente'), (2,'En Proceso'), (3,'Remitida'), (4,'Legalizado'))

class ConstatacionFisica(ModeloBase):
    periodo=models.ForeignKey('sagest.PeriodoConstatacionAF',blank=True, null=True, verbose_name=u"Periodo de constataci√≥n", on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
    fechainicio = models.DateTimeField(verbose_name=u"Fecha/Hora Inicio", blank=True, null=True)
    fechafin = models.DateTimeField(verbose_name=u"Fecha/Hora Fin", blank=True, null=True)
    estado = models.IntegerField(default=1, choices=ESTADO_CONSTATACION, verbose_name=u'Estado')
    usuariobienes = models.ForeignKey('sga.Persona', related_name='+', verbose_name=u"Usuario/Bienes",
                                      on_delete=models.CASCADE)
    usuariofinaliza = models.ForeignKey('sga.Persona', related_name='finaliza', verbose_name=u"Usuario que finaliza el acta",
                                      on_delete=models.CASCADE,null=True, blank=True)
    ubicacionbienes = models.ForeignKey(Ubicacion, related_name='+', verbose_name=u"Ubicaci√≥n/Bienes",
                                        on_delete=models.CASCADE, null=True, blank=True)
    observacion = models.TextField(default='', verbose_name=u"Observaci√≥n")
    normativaconstatacion = models.TextField(default
                                             ='', verbose_name=u"Normativa Constatacion")
    acta_constatacion = models.FileField(upload_to='activos/actas_constatacion/', blank=True, null=True, verbose_name=u'Archivo firmado')
    estadoacta = models.IntegerField(default=1, choices=ESTADO_ACTA_CONSTATACION, verbose_name=u'Estado de acta de constataci√≥n')

    def __str__(self):
        return f'CONSTATACION | {self.usuariobienes}-{self.numero}'

    class Meta:
        verbose_name = u'Constataci√≥n F√≠sica'
        verbose_name_plural = u'Constataciones F√≠sicas'
        ordering = ('-fechainicio', '-numero',)

    def director_activofijo(self):
        return SeccionDepartamento.objects.get(id=23).responsable

    def estado_constatacion(self):
        return ESTADO_CONSTATACION[self.estado - 1][1]

    def secuencial_acta(self):
        if not self.numero>0:
            actas= ConstatacionFisica.objects.filter(periodo=self.periodo, status=True,estado=2).order_by('-numero').first()
            if actas:
                return actas.numero+1
            return 1
        return self.numero

    def contadores_pertenece(self):
        return {"tot_encontrados": self.total_encontrados(), "activos_totales": self.total_act(),
                "tot_falta": self.total_faltantes(), "tot_uso": self.total_uso(),
                "tot_mal_estado": self.total_malestado(), "tot_reg": self.total_regular()}

    def contadores_otros(self):
        return {"tot_otros": self.total_act_otro(), "mal_estado_otro": self.total_malestado_otro(),
                "tot_estado_reg_otro": self.total_regular_otro(), "tot_desuso_otro": self.total_desuso_otro()}

    def contadores_ni(self):
        return {"tot_ni": self.total_act_ni(), "mal_ni": self.total_malestado_ni(), "reg_ni": self.total_regular_ni()}

    def total_encontrados(self):
        total = DetalleConstatacionFisica.objects.filter(encontrado=True, codigoconstatacion=self).count()
        return total if total else 0

    def total_faltantes(self):
        total = DetalleConstatacionFisica.objects.filter(encontrado=False, codigoconstatacion=self).count()
        return total if total else 0

    def total_uso(self):
        total = DetalleConstatacionFisica.objects.filter(enuso=True, codigoconstatacion=self).count()
        return total if total else 0

    def total_desuso(self):
        total = DetalleConstatacionFisica.objects.filter(enuso=False, codigoconstatacion=self).count()
        return total if total else 0

    def total_traspaso(self):
        total = DetalleConstatacionFisica.objects.filter(requieretraspaso=True, codigoconstatacion=self).count()
        return total if total else 0

    def total_malestado(self):
        total = DetalleConstatacionFisica.objects.filter(estadoactual=3, codigoconstatacion=self).count()
        return total if total else 0

    def total_regular(self):
        total = DetalleConstatacionFisica.objects.filter(estadoactual=2, codigoconstatacion=self).count()
        return total if total else 0

    def total_act(self):
        total = DetalleConstatacionFisica.objects.filter(codigoconstatacion=self, perteneceusuario=True).count()
        return total if total else 0

    def total_desuso_otro(self):
        total = DetalleConstatacionFisica.objects.filter(enuso=False, codigoconstatacion=self,
                                                         perteneceusuario=False).count()
        return total if total else 0

    def total_malestado_otro(self):
        total = DetalleConstatacionFisica.objects.filter(estadoactual=3, codigoconstatacion=self,
                                                         perteneceusuario=False).count()
        return total if total else 0

    def total_regular_otro(self):
        total = DetalleConstatacionFisica.objects.filter(estadoactual=2, codigoconstatacion=self,
                                                         perteneceusuario=False).count()
        return total if total else 0

    def total_act_otro(self):
        total = self.detalleconstatacionfisica_set.filter(perteneceusuario=False).count()
        return total if total else 0

    def en_uso(self):
        return self.detalleconstatacionfisica_set.exists() or self.detallenoidentificado_set.exists()

    def tiene_det_ni(self):
        return self.detallenoidentificado_set.exists()

    def total_malestado_ni(self):
        total = DetalleNoIdentificado.objects.filter(estado=3, codigoconstatacion=self).count()
        return total if total else 0

    def total_regular_ni(self):
        total = DetalleNoIdentificado.objects.filter(estado=2, codigoconstatacion=self).count()
        return total if total else 0

    def total_act_ni(self):
        total = self.detallenoidentificado_set.count()
        return total if total else 0

    def act_otros(self):
        total = DetalleConstatacionFisica.objects.filter(codigoconstatacion=self, perteneceusuario=False).count()
        return total if total else 0

    def act_requiere_tras(self):
        total = DetalleConstatacionFisica.objects.filter(codigoconstatacion=self, requieretraspaso=True).count()
        return total if total else 0

    def t_constataciones(self):
        return len(self.detalleconstatacionfisica_set.filter(status=True))

    def activos_constatados(self):
        return self.detalleconstatacionfisica_set.filter(status=True)

    def detalle_constatacion(self):
        return self.detalleconstatacionfisica_set.filter(status=True)

    def color_estado(self):
        if self.estado == 1:
            return 'text-primary'
        else:
            return 'text-success'

    def color_estado_acta(self):
        if self.estadoacta == 1:
            return 'text-secondary'
        elif self.estadoacta == 2:
            return 'text-primary'
        elif self.estadoacta == 3:
            return 'text-warning'
        elif self.estadoacta == 4:
            return 'text-success'

    def get_documento(self):
        acta = self.actaconstatacion_set.filter(status=True).last()
        if acta:
            return acta.archivo
        elif self.acta_constatacion:
            return self.acta_constatacion

    def get_acta(self):
        return self.actaconstatacion_set.filter(status=True).last()

    def acta_persona_firmada(self, persona):
        return self.actaconstatacion_set.filter(status=True, persona=persona, estado=2).last()

    def total_firmas(self):
        generado = self.actaconstatacion_set.filter(status=True, estado=1).last()
        if generado:
            actas=self.actaconstatacion_set.filter(status=True, estado=2, fecha_creacion__gte=generado.fecha_creacion)
            total_firmados = actas.aggregate(total_firmas=Sum('cantidad'))['total_firmas'] if actas else 0
        else:
            actas = self.actaconstatacion_set.filter(status=True, estado=2)
            total_firmados =actas.aggregate(total_firmas=Sum('cantidad'))['total_firmas'] if actas else 0
        return total_firmados

    def total_activos(self):
        constatados = self.detalleconstatacionfisica_set.filter(status=True).values_list('activo_id', flat=True)
        activos = ActivoFijo.objects.filter(responsable=self.usuariobienes, status=True, statusactivo=1).exclude(id__in=constatados).values_list('id', flat=True)
        constatados_restantes = len(DetalleConstatacionFisica.objects.filter(status=True,
                                                                             codigoconstatacion__periodo=self.periodo,
                                                                             codigoconstatacion__status=True,
                                                                             activo_id__in=activos).exclude(codigoconstatacion__usuariobienes=self.usuariobienes).values_list('id',flat=True))
        return len(constatados)+len(activos)-constatados_restantes


ESTADO_ACTA = ((1,'Generado'),(2,'Firmado'))
class ActaConstatacion(ModeloBase):
    constatacion = models.ForeignKey(ConstatacionFisica, on_delete=models.CASCADE, verbose_name=u'Constataci√≥n')
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u'Persona que firmo el documento', on_delete=models.CASCADE, related_name='+')
    archivo = models.FileField(upload_to='activos/actas_constatacion/', blank=True, null=True,verbose_name=u'Archivo firmado')
    estado = models.IntegerField(default=1, choices=ESTADO_ACTA, verbose_name=u'Estado')
    cantidad = models.IntegerField(default=1, verbose_name='Cantidad de firmas en el documento')

    def __str__(self):
        return u'%s' % (self.persona)

    def color_estado(self):
        if self.estado==1:
            return 'text-primary'
        return 'text-success'

    class Meta:
        verbose_name = u'Acta constatacion firmada'
        verbose_name_plural = u'Actas de constataciones firmada'
        ordering = ('fecha_creacion',)

class DetalleConstatacionFisica(ModeloBase):
    responsable = models.ForeignKey('sga.Persona', related_name='responsables', verbose_name=u"Responsable de constatar activos", blank=True,null=True, on_delete=models.CASCADE)
    codigoconstatacion = models.ForeignKey(ConstatacionFisica, verbose_name=u"C√≥digo Constataci√≥n",
                                           on_delete=models.CASCADE)
    activo = models.ForeignKey(ActivoFijo, verbose_name=u"Activo", on_delete=models.CASCADE)
    encontrado = models.BooleanField(default=False, verbose_name=u"Encontrado")
    enuso = models.BooleanField(default=False, verbose_name=u"En Uso")
    perteneceusuario = models.BooleanField(default=False, verbose_name=u"Pertenece a Usuario")
    usuariobienes = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Usuario/Bienes",
                                      on_delete=models.CASCADE)
    ubicacionbienes = models.ForeignKey(Ubicacion, blank=True, null=True, verbose_name=u"Ubicaci√≥n/Bienes",on_delete=models.CASCADE)
    ubicacionanterior = models.ForeignKey(Ubicacion, related_name='+', blank=True, null=True, verbose_name=u"Ubicaci√≥n/Bienes",on_delete=models.CASCADE)
    estadooriginal = models.ForeignKey(EstadoProducto, related_name='+', verbose_name=u"Estado Original",
                                       on_delete=models.CASCADE)
    estadoactual = models.ForeignKey(EstadoProducto, related_name='+', verbose_name=u"Estado Actual",
                                     on_delete=models.CASCADE,blank=True, null=True)
    condicionestado = models.IntegerField(blank=True, null=True, choices=ESTADO_BAJA, verbose_name=u'Condici√≥n de estado')
    requieretraspaso = models.BooleanField(default=False, verbose_name=u"Requiere Traspaso")
    requieredarbaja = models.BooleanField(default=False, verbose_name=u"Requiere dar de baja el activo")
    observacion = models.TextField(default='', verbose_name=u"Observaci√≥n")
    importado = models.BooleanField(default=False, verbose_name=u"¬øEl detalle fue importado?")

    def __str__(self):
        return f'{self.codigoconstatacion} | Gob:{self.activo.codigogobierno}-Int:{self.activo.codigointerno}'

    class Meta:
        verbose_name = u'Constataci√≥n F√≠sica Detalle'
        verbose_name_plural = u'Constataciones F√≠sicas Detalle'
        ordering = ('activo__codigointerno', 'activo__codigogobierno')

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(DetalleConstatacionFisica, self).save(*args, **kwargs)

    def color_estado(self):
        if self.estadoactual.id == 1:
            return 'success'
        elif self.estadoactual.id == 2:
            return 'warning'
        else:
            return 'danger'

class DetalleNoIdentificado(ModeloBase):
    codigoconstatacion = models.ForeignKey(ConstatacionFisica, verbose_name=u"C√≥digo Constataci√≥n",
                                           on_delete=models.CASCADE)
    codigobarra = models.CharField(max_length=20, default="", verbose_name=u"C√≥digo de Barra")
    catalogobien = models.ForeignKey(CatalogoBien, verbose_name=u"Cat√°logo de Bienes", on_delete=models.CASCADE)
    serie = models.CharField(max_length=100, verbose_name=u"Serie")
    descripcion = models.CharField(max_length=250, verbose_name=u"Descripci√≥n")
    modelo = models.CharField(max_length=100, verbose_name=u"Modelo")
    marca = models.CharField(max_length=300, verbose_name=u"Marca")
    estado = models.ForeignKey(EstadoProducto, verbose_name=u"Estado activo", on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % self.codigoconstatacion

    class Meta:
        verbose_name = u'Constataci√≥n F√≠sica Detalle No Identificados'
        verbose_name_plural = u'Constataciones F√≠sicas Detalle No Identificados'
        ordering = ('codigobarra',)

    def save(self, *args, **kwargs):
        self.marca = self.marca.upper().strip()
        self.serie = self.serie.upper().strip()
        self.descripcion = self.descripcion.upper().strip()
        self.modelo = self.modelo.upper().strip()
        super(DetalleNoIdentificado, self).save(*args, **kwargs)


class TallerMantenimiento(ModeloBase):
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")
    observacion = models.CharField(max_length=150, verbose_name=u"Observaci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Taller de Mantenimiento'
        verbose_name_plural = u'Talleres de Mantenimiento'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def en_uso(self):
        return self.trasladomantenimiento_set.exists()

    def cantidad_mantenimientos(self):
        return self.trasladomantenimiento_set.count()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.observacion = self.observacion.upper()
        super(TallerMantenimiento, self).save(*args, **kwargs)


class TipoArchivo(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo de archivo"
        verbose_name_plural = u"Tipos de archivo"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(TipoArchivo, self).save(*args, **kwargs)


class TraspasoActivo(ModeloBase):
    tipo = models.IntegerField(default=1, choices=TIPO_MOVIMIENTO_ACTIVO, verbose_name=u'Tipo')
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
    actaentregagobierno = models.IntegerField(default=0, verbose_name=u"N√∫mero gobierno")
    fecha = models.DateTimeField(verbose_name="Fecha")
    tiposolicitud = models.IntegerField(default=1, choices=TIPO_SOLICITUD_TRASPASO_BAJA, blank=True, null=True,
                                        verbose_name=u'Tipo Solicitud')
    solicitante = models.ForeignKey('sga.Persona', related_name="+", blank=True, null=True, verbose_name=u"Solicitante",
                                    on_delete=models.CASCADE)
    oficio = models.CharField(max_length=150, default='', verbose_name=u"Oficio")
    fechaoficio = models.DateField(blank=True, null=True, verbose_name=u"Fecha Oficio/Email")
    ubicacionbienentrega = models.ForeignKey(Ubicacion, related_name="ubicacionbienentrega", blank=True, null=True,
                                             verbose_name=u"Ubicaci√≥n Entrega", on_delete=models.CASCADE)
    ubicacionbienrecibe = models.ForeignKey(Ubicacion, related_name="ubicacionbienrecibe", blank=True, null=True,
                                            verbose_name=u"Ubicaci√≥n Recibe", on_delete=models.CASCADE)
    custodiobienentrega = models.ForeignKey('sga.Persona', related_name="custodiobienentrega", blank=True, null=True,
                                            verbose_name=u"Custodio Entrega", on_delete=models.CASCADE)
    custodiobienrecibe = models.ForeignKey('sga.Persona', related_name="custodiobienrecibe", blank=True, null=True,
                                           verbose_name=u"Custodio Recibe", on_delete=models.CASCADE)
    usuariobienentrega = models.ForeignKey('sga.Persona', related_name="usuariobienentrega", blank=True, null=True,
                                           verbose_name=u"Usuario Entrega", on_delete=models.CASCADE)
    usuariobienrecibe = models.ForeignKey('sga.Persona', related_name="usuariobienrecibe", blank=True, null=True,
                                          verbose_name=u"Usuario Recibe", on_delete=models.CASCADE)
    responsablebienes = models.ForeignKey('sga.Persona', related_name="responsablebienes",
                                          verbose_name=u"Responsable Bienes", on_delete=models.CASCADE)
    observacion = models.TextField(default='', max_length=1000, verbose_name=u"Observaci√≥n")
    proveedor = models.CharField(default='', max_length=250, verbose_name=u"Proveedor")
    asistentebodega = models.ForeignKey('sga.Persona', related_name="asistentebodega", blank=True, null=True,
                                        verbose_name=u"Asistente de bodega", on_delete=models.CASCADE)
    normativatraspaso = models.TextField(default='', max_length=250, verbose_name=u"Normativa Traspaso")
    normativaacta = models.TextField(default='', max_length=250, verbose_name=u"Normativa Acta")
    estado = models.IntegerField(choices=ESTADO_PROCESO, default=1, verbose_name=u"Estado")
    tipotraspaso = models.IntegerField(choices=TIPO_TRASPASO, default=0, verbose_name=u"Estado")
    totalbienes = models.IntegerField(default=0, verbose_name=u"total")
    traspasoactivofirma = models.FileField(upload_to='traspasoactivofirma', blank=True, null=True,
                                           verbose_name=u'Archivo traspaso activo')

    def __str__(self):
        return u"%s" % self.numero

    class Meta:
        verbose_name = u'Traspaso de Activos'
        verbose_name_plural = u'Traspasos de Activos'
        ordering = ('-numero', 'tipo')

    def activo(self):
        return DetalleTraspasoActivo.objects.get(codigotraspaso=self).activo

    def rep_tipo(self):
        return TIPO_MOVIMIENTO_ACTIVO[self.tipo - 1][1]

    def rep_estado(self):
        return ESTADO_ACTA[self.estado - 1][1]

    def rep_tipo_sol(self):
        return TIPO_SOLICITUD_TRASPASO_BAJA[self.tiposolicitud - 1][1]

    def contador_traspaso(self):
        return {"tot_activos": self.cantidad_activos(), "tot_selec": self.cantidad_seleccionados()}

    def cantidad_activos(self):
        return self.detalletraspasoactivo_set.count()

    def cantidad_seleccionados(self):
        return self.detalletraspasoactivo_set.filter(seleccionado=True).count()

    def mi_tipo_bien(self):
        if self.detalletraspasoactivo_set.exists():
            return self.detalletraspasoactivo_set.all()[0].activo.catalogo.tipobien_id
        return None

    def detalle(self):
        return self.detalletraspasoactivo_set.all()[0]

    def tiene_detalle(self):
        return self.detalletraspasoactivo_set.exists()

    def puede_editarse_traspaso(self):
        return not TraspasoActivo.objects.filter(
            detalletraspasoactivo__activo__id__in=self.detalletraspasoactivo_set.filter(seleccionado=True).values_list(
                'activo__id', flat=True), fecha_creacion__gt=self.fecha_creacion).exists()

    def dias_permite_modificar(self):
        return (datetime.now() - self.fecha).days <= DIAS_MODIFICAR_ACTIVOS

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(TraspasoActivo, self).save(*args, **kwargs)

    def traspaso_tiene_solicitudtraspaso(self):
        solicitudtraspaso = SolicitudTraspasoActivos.objects.filter(status=True, traspasoactivofijo=self,
                                                                    estado__in=[6, 9, 11])
        if solicitudtraspaso:
            return solicitudtraspaso[0]
        return False


class DetalleTraspasoActivo(ModeloBase):
    codigotraspaso = models.ForeignKey(TraspasoActivo, verbose_name=u"C√≥digo Traspaso", on_delete=models.CASCADE)
    activo = models.ForeignKey(ActivoFijo, verbose_name=u"Activo", on_delete=models.CASCADE)
    historico = models.BooleanField(default=False, verbose_name=u"No es Actual")
    seleccionado = models.BooleanField(default=False, verbose_name=u"Seleccionado para traspaso")

    def __str__(self):
        return u"%s" % self.codigotraspaso

    class Meta:
        verbose_name = u'Traspaso de Activos Detalle'
        verbose_name_plural = u'Traspasos de Activos Detalle'
        ordering = ('activo__codigointerno', 'activo__codigogobierno')

    def es_actual(self):
        usuario = TraspasoActivo.objects.filter(detalletraspasoactivo=self).order_by("-fecha").distinct()[
            0].usuariobienrecibe
        if usuario == self.activo.responsable:
            return True
        else:
            return False

    def save(self, *args, **kwargs):
        super(DetalleTraspasoActivo, self).save(*args, **kwargs)


class AccionesTramitePago(ModeloBase):
    from django.contrib.auth.models import Permission
    accion = models.CharField(default='', max_length=200, verbose_name=u'Acci√≥n')
    permiso = models.ManyToManyField(Permission, verbose_name=u'Permisos', blank=True)

    def __str__(self):
        return u"%s" % self.accion

    class Meta:
        verbose_name = u'Acci√≥n sobre tr√°mite'
        verbose_name_plural = u'Acciones sobre tr√°mites'
        ordering = ('id',)

    def save(self, *args, **kwargs):
        self.accion = self.accion.upper().strip()
        super(AccionesTramitePago, self).save(*args, **kwargs)


class ArchivoActivoFijo(ModeloBase):
    tipobien = models.ForeignKey(TipoBien, verbose_name=u'Tipo', on_delete=models.CASCADE)
    nombre = models.CharField(default='', max_length=200, verbose_name=u'Nombre')
    fecha = models.DateField(verbose_name=u'Fecha')
    archivo = models.FileField(upload_to='activos', verbose_name=u'Archivo')
    archivoincidencias = models.FileField(upload_to='activos', blank=True, null=True,
                                          verbose_name=u'Archivo Incidencias')
    estado = models.IntegerField(choices=ESTADO_IMPORTACION)
    actas = models.ManyToManyField(TraspasoActivo, verbose_name=u"Actas generadas")
    numimportados = models.IntegerField(default=0, verbose_name=u"Numero de activos importados")

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Archivo"
        verbose_name_plural = u"Archivos"
        unique_together = ('nombre', 'archivo',)

    def nombre_archivo(self):
        return os.path.split(str(self.archivo.name))[1]

    def download_link(self):
        return self.archivo.url

    def tiene_actas(self):
        return self.actas.exists()

    def estado_importacion(self):
        return ESTADO_IMPORTACION[self.estado - 1][1]

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(ArchivoActivoFijo, self).save(*args, **kwargs)


class ExportacionesActivos(ModeloBase):
    fecha = models.DateField(verbose_name=u'Fecha')
    clasebien = models.IntegerField(choices=CLASE_BIEN, default=1, verbose_name=u'Clase Bien')
    tipobien = models.ForeignKey(TipoBien, blank=True, null=True, on_delete=models.CASCADE)
    cuentacontable = models.ForeignKey(CuentaContable, verbose_name=u'Cuenta', on_delete=models.CASCADE)
    activos = models.ManyToManyField(ActivoFijo)
    estado = models.IntegerField(choices=ESTADO_PROCESO, default=1, verbose_name=u'Estado Exportaci√≥n')
    ficherocsv = models.FileField(upload_to='activos', verbose_name=u'Archivo CSV')
    ficheroxls = models.FileField(upload_to='activos', verbose_name=u'Archivo XLS', blank=True, null=True)

    def __str__(self):
        return u'%s' % self.fecha

    class Meta:
        verbose_name = u"Exportacion"
        verbose_name_plural = u"Exportaciones"

    def clase(self):
        return CLASE_BIEN[self.clasebien - 1][1]

    def total_activos(self):
        return self.activos.count()

    def activos_costo(self):
        return null_to_decimal(self.activos.aggregate(valor=Sum('costo'))['valor'])


class TipoBaja(ModeloBase):
    nombre = models.CharField(default='', max_length=200)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = u'Tipo de Baja'
        verbose_name_plural = u'Tipos de Bajas'
        ordering = ('nombre',)

    def en_uso(self):
        return self.bajaactivo_set.all().exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(TipoBaja, self).save(*args, **kwargs)


class BajaActivo(ModeloBase):
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
    fecha = models.DateField(verbose_name=u"Fecha")
    tiposolicitud = models.IntegerField(default=1, choices=TIPO_SOLICITUD_TRASPASO_BAJA, verbose_name=u'Tipo Solicitud')
    solicitante = models.ForeignKey('sga.Persona', related_name="+", verbose_name=u"Solicitante",
                                    on_delete=models.CASCADE)
    oficio = models.CharField(max_length=150, blank=True, null=True, verbose_name=u"Oficio")
    fechaoficio = models.DateField(blank=True, null=True, verbose_name=u"Fecha Oficio/Email")
    tipobaja = models.ForeignKey(TipoBaja, verbose_name=u"Tipo Baja", on_delete=models.CASCADE)
    ubicacionbienentrega = models.ForeignKey(Ubicacion, related_name="+", verbose_name=u"Ubicaci√≥n Entrega",
                                             on_delete=models.CASCADE)
    usuariobienentrega = models.ForeignKey('sga.Persona', related_name="+", verbose_name=u"Usuario Entrega",
                                           on_delete=models.CASCADE)
    custodioentrega = models.ForeignKey('sga.Persona', related_name="+", blank=True, null=True,
                                        verbose_name=u"Usuario Entrega", on_delete=models.CASCADE)
    usuariorecibe = models.CharField(max_length=100, verbose_name=u"Usuario Recibe")
    cargorecibe = models.CharField(max_length=100, verbose_name=u"Cargo Recibe")
    observacion = models.TextField(max_length=250, verbose_name=u"Observaci√≥n")
    estado = models.IntegerField(choices=ESTADO_PROCESO, default=1, verbose_name=u"Estado")
    experto = models.ForeignKey('sga.Persona', blank=True, null=True, related_name="experto", verbose_name=u"Experto",
                                on_delete=models.CASCADE)
    contadorper = models.ForeignKey('sga.Persona', blank=True, null=True, related_name="contador",
                                    verbose_name=u"Contador", on_delete=models.CASCADE)
    usuarioejecuta = models.ForeignKey('sga.Persona', blank=True, null=True, related_name="usuarioejecuta",
                                       verbose_name=u"Contador", on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % self.observacion

    class Meta:
        verbose_name = u'Baja de Activos'
        verbose_name_plural = u'Bajass de Activos'
        ordering = ('numero', 'fecha',)

    def tipo_solicitud(self):
        return TIPO_SOLICITUD_TRASPASO_BAJA[self.tiposolicitud - 1][1]

    def custodio(self):
        return DetalleBajaActivo.objects.filter(codigobaja=self)[0].activo.custodio

    def total(self):
        total = 0
        for baja in self.detallebajaactivo_set.all():
            total += baja.activo.costo
        return total

    def contador(self):
        return {"tot_act": self.cantidad_activos(), "tot_selec": self.cantidad_seleccionados()}

    def cantidad_activos(self):
        return self.detallebajaactivo_set.all().count()

    def cantidad_seleccionados(self):
        return self.detallebajaactivo_set.filter(seleccionado=True).count()

    def deprec(self):
        valor = 0
        for baja in self.detallebajaactivo_set.all():
            valor += baja.activo.valordepreciacionacumulada
        return valor

    def save(self, *args, **kwargs):
        self.oficio = self.oficio.upper()
        self.observacion = self.observacion.upper()
        self.usuariorecibe = self.usuariorecibe.upper()
        self.cargorecibe = self.cargorecibe.upper()
        super(BajaActivo, self).save(*args, **kwargs)


class DetalleBajaActivo(ModeloBase):
    codigobaja = models.ForeignKey(BajaActivo, verbose_name=u"C√≥digo Baja", on_delete=models.CASCADE)
    activo = models.ForeignKey(ActivoFijo, verbose_name=u"Activo", on_delete=models.CASCADE)
    seleccionado = models.BooleanField(default=False, verbose_name=u"Seleccionado para baja")

    def __str__(self):
        return u"%s" % self.codigobaja

    class Meta:
        verbose_name = u'Baja de Activos Detalle'
        verbose_name_plural = u'Bajas de Activos Detalle'
        ordering = ('activo__codigointerno', 'activo__codigogobierno')

    def save(self, *args, **kwargs):
        super(DetalleBajaActivo, self).save(*args, **kwargs)


class TrasladoMantenimiento(ModeloBase):
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
    fecha = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Definitivo")
    departamentosolicita = models.ForeignKey(Departamento, verbose_name=u"Departamento Solicita",
                                             on_delete=models.CASCADE)
    asistentelogistica = models.ForeignKey('sga.Persona', related_name="+",
                                           verbose_name=u"Asistente Logisitica o Jefe Dpto", on_delete=models.CASCADE)
    usuariobienes = models.ForeignKey('sga.Persona', related_name="+", verbose_name=u"Usuario de Bienes",
                                      on_delete=models.CASCADE)
    observacion = models.TextField(max_length=250, verbose_name=u"Observaci√≥n")
    taller = models.ForeignKey(TallerMantenimiento, blank=True, null=True, verbose_name=u"Empresa o Taller",
                               on_delete=models.CASCADE)
    administradorcontrato = models.ForeignKey('sga.Persona', related_name="+", blank=True, null=True,
                                              verbose_name=u"Administrador de Contrato", on_delete=models.CASCADE)
    estado = models.IntegerField(choices=ESTADO_PROCESO, default=1, verbose_name=u"Estado")

    def __str__(self):
        return u"%s" % self.numero

    class Meta:
        verbose_name = u'Traslados de Activos para Mantenimiento'
        verbose_name_plural = u'Traslados de Activos para Mantenimiento'
        ordering = ('numero', 'fecha',)

    def cantidad_activos(self):
        return self.detalletrasladomantenimiento_set.count()

    def cantidad_seleccionado(self):
        return self.detalletrasladomantenimiento_set.filter(seleccionado=True).count()

    def contador(self):
        return {'total_act': self.cantidad_activos(), 'total_sel': self.cantidad_seleccionado()}

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(TrasladoMantenimiento, self).save(*args, **kwargs)


class DetalleTrasladoMantenimiento(ModeloBase):
    codigotraslado = models.ForeignKey(TrasladoMantenimiento, verbose_name=u"C√≥digo Taslado", on_delete=models.CASCADE)
    activo = models.ForeignKey(ActivoFijo, verbose_name=u"Activo", on_delete=models.CASCADE)
    observacion = models.TextField(max_length=100, verbose_name=u"Observaci√≥n")
    seleccionado = models.BooleanField(default=False, verbose_name=u"Seleccionado para traslado")

    def __str__(self):
        return u"%s" % self.activo

    class Meta:
        verbose_name = u'Traslados de Activos Detalle'
        verbose_name_plural = u'Traslados de Activos Detalle'
        ordering = ('activo__codigointerno', 'activo__codigogobierno')

    def tiene_detalle(self):
        return self.detallemantenimiento_set.exists()

    def estado(self):
        return self.detallemantenimiento_set.all()[0].estado

    def puede_editarse(self):
        return not DetalleTrasladoMantenimiento.objects.filter(activo=self.activo,
                                                               codigotraslado__fecha_creacion__gt=self.codigotraslado.fecha_creacion).exists()

    def detalle(self):
        if self.tiene_detalle():
            return self.detallemantenimiento_set.all()[0]
        return None

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(DetalleTrasladoMantenimiento, self).save(*args, **kwargs)


class TarjetaControl(ModeloBase):
    activo = models.ForeignKey(ActivoFijo, verbose_name=u"Activo", on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")

    def __str__(self):
        return u"%s" % self.activo

    class Meta:
        verbose_name = u'Tarjeta de Control de Activos'
        verbose_name_plural = u'Tarjeta de Control de Activos'
        ordering = ('activo',)

    def cantidad_mantenimientos(self):
        return self.detallemantenimiento_set.count()

    def tiene_mantenimiento(self):
        return self.detallemantenimiento_set.exists()

    def mantenimiento_pendiente(self):
        return self.detallemantenimiento_set.filter(estado=1).exists()

    def ultimo_mantenimiento(self):
        if self.tiene_mantenimiento():
            return self.detallemantenimiento_set.all().order_by('-detalletrasladomantenimiento__codigotraslado__fecha')[
                0]
        return None


class DetalleMantenimiento(ModeloBase):
    tarjeta = models.ForeignKey(TarjetaControl, blank=True, null=True, verbose_name=u"Tarjeta de control",
                                on_delete=models.CASCADE)
    detalletrasladomantenimiento = models.ForeignKey(DetalleTrasladoMantenimiento, blank=True, null=True,
                                                     verbose_name=u"Codigo de Traslado", on_delete=models.CASCADE)
    mantenimientorealizar = models.TextField(verbose_name=u"Mantenimiento a Realizar", default='')
    mantenimientorealizado = models.TextField(verbose_name=u"Mantenimiento a Realizado", default='')
    observacion = models.TextField(verbose_name=u"Observacion", default='')
    aplicagarantia = models.BooleanField(default=False, verbose_name=u"Aplica Garantia")
    manodeobra = models.BooleanField(default=False, verbose_name=u"Mano de Obra")
    repuestos = models.BooleanField(default=False, verbose_name=u"Repuestos")
    costomanodeobra = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                          verbose_name=u"Costo Mano de Obra")
    costomanodereparacion = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u"Costo de Repuestos")
    facturamanodeobra = models.CharField(max_length=20, default='', verbose_name=u"Factura Mano de Obra")
    facturareparacion = models.CharField(max_length=20, default='y', verbose_name=u"Factura de Repuestos")
    fecharecepcion = models.DateField(verbose_name=u"Fecha de Recepcion", null=True, blank=True)
    fechaentrega = models.DateField(verbose_name=u"Fecha de Entrega", null=True, blank=True)
    estado = models.IntegerField(choices=ESTADO_PROCESO, default=1, verbose_name=u"Estado")
    taller = models.ForeignKey(TallerMantenimiento, blank=True, null=True, verbose_name=u"Empresa o Taller",
                               on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % self.detalletrasladomantenimiento

    class Meta:
        verbose_name = u'Detalle Tarjeta de Control de Activos'
        verbose_name_plural = u'Detalle Tarjeta de Control de Activos'
        ordering = ('detalletrasladomantenimiento', 'fecharecepcion',)

    def save(self, *args, **kwargs):
        self.mantenimientorealizar = self.mantenimientorealizar.upper()
        self.mantenimientorealizado = self.mantenimientorealizado.upper()
        if not self.manodeobra:
            self.costomanodeobra = 0
            self.facturamanodeobra = ''
        if not self.repuestos:
            self.costomanodereparacion = 0
            self.facturareparacion = ''
        super(DetalleMantenimiento, self).save(*args, **kwargs)


class SecuenciaActivos(ModeloBase):
    numeroasignacion = models.IntegerField(default=0, verbose_name=u'N√∫mero Asignaci√≥n')
    numerotraspaso = models.IntegerField(default=0, verbose_name=u'N√∫mero Traspaso')
    numeroconstatacion = models.IntegerField(default=0, verbose_name=u'N√∫mero Constataci√≥n')
    numeromantenimiento = models.IntegerField(default=0, verbose_name=u'N√∫mero Traslado a mantenimiento')
    numerobajaactivo = models.IntegerField(default=0, verbose_name=u'N√∫mero Baja')
    numerotarjetacontrol = models.IntegerField(default=0, verbose_name=u'N√∫mero Tarjeta control')
    normativatraspaso = models.TextField(default='', verbose_name=u"Normativa Traspaso")
    normativaacta = models.TextField(default='', verbose_name=u"Normativa Acta")
    normativaconstatacion = models.TextField(default='', verbose_name=u"Normativa Constatacion")

    class Meta:
        verbose_name = u"Secuencia de documento de activo"
        verbose_name_plural = u"Secuencias de documentos de activos"

    def save(self, *args, **kwargs):
        super(SecuenciaActivos, self).save(*args, **kwargs)


class AnioEjercicio(ModeloBase):
    anioejercicio = models.IntegerField(default=0, verbose_name=u"Ejercicio")
    sbu = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Salario b√°sico unificado")

    def __str__(self):
        return u"%s" % self.anioejercicio

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return AnioEjercicio.objects.filter(anioejercicio__icontains=q).distinct()[:limit]

    def flexbox_repr(self):
        return u"%s" % self.anioejercicio

    def flexbox_alias(self):
        return [self.id, self.anioejercicio]


class PartidaEntidad(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Partida Entidad'
        verbose_name_plural = u'Partidas Entidades'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaEntidad, self).save(*args, **kwargs)


class PartidaUnidadEjecutoria(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Partida Unidad Ejec.'
        verbose_name_plural = u'Partidas Unidades Ejec.'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaUnidadEjecutoria, self).save(*args, **kwargs)


class PartidaUnidadDesconcentrada(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Partida Unidad Desc.'
        verbose_name_plural = u'Partidas Unidades Des.'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaUnidadDesconcentrada, self).save(*args, **kwargs)


class PartidaPrograma(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s - %s" % (self.codigo, self.nombre)

    class Meta:
        verbose_name = u'Partida Programa'
        verbose_name_plural = u'Partidas Programas'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaPrograma, self).save(*args, **kwargs)


class PartidaSubprograma(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Partida Subprograma'
        verbose_name_plural = u'Partidas Subprogramas'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaSubprograma, self).save(*args, **kwargs)


class PartidaProyecto(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s - %s" % (self.codigo, self.nombre)

    class Meta:
        verbose_name = u'Partida Proyecto'
        verbose_name_plural = u'Partidas Proyectos'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaProyecto, self).save(*args, **kwargs)


class PartidaActividad(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s - %s" % (self.codigo, self.nombre)

    class Meta:
        verbose_name = u'Partida Actividad'
        verbose_name_plural = u'Partidas Actividades'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaActividad, self).save(*args, **kwargs)


class PartidaObra(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Partida Obra'
        verbose_name_plural = u'Partidas Obras'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaObra, self).save(*args, **kwargs)


class PartidaGeografico(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Partida Geogr√°fico'
        verbose_name_plural = u'Partidas Geogr√°ficos'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaGeografico, self).save(*args, **kwargs)


class PartidaFuente(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s - %s" % (self.codigo, self.nombre)

    class Meta:
        verbose_name = u'Partida Fuente'
        verbose_name_plural = u'Partidas Fuentes'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaFuente, self).save(*args, **kwargs)


class PartidaOrganismo(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Partida Organismo'
        verbose_name_plural = u'Partidas Organismos'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaOrganismo, self).save(*args, **kwargs)


class PartidaCorrelativo(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Partida Correlativo'
        verbose_name_plural = u'Partidas Correlativo'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.partidassaldo_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PartidaCorrelativo, self).save(*args, **kwargs)


# Modelacion de Presupuesto
class PartidasSaldo(ModeloBase):
    partida = models.ForeignKey(Partida, verbose_name=u"Renglon", on_delete=models.CASCADE)
    anioejercicio = models.ForeignKey(AnioEjercicio, verbose_name=u"Ejercicio", on_delete=models.CASCADE)
    entidad = models.ForeignKey(PartidaEntidad, blank=True, null=True, verbose_name=u"Entidad",
                                on_delete=models.CASCADE)
    unidadejecutoria = models.ForeignKey(PartidaUnidadEjecutoria, blank=True, null=True,
                                         verbose_name=u"Unidada Ejecutoria", on_delete=models.CASCADE)
    unidaddesconcentrada = models.ForeignKey(PartidaUnidadDesconcentrada, blank=True, null=True,
                                             verbose_name=u"Unidad Desconcentrada", on_delete=models.CASCADE)
    programa = models.ForeignKey(PartidaPrograma, blank=True, null=True, verbose_name=u"Programa",
                                 on_delete=models.CASCADE)
    subprograma = models.ForeignKey(PartidaSubprograma, blank=True, null=True, verbose_name=u"SubPrograma",
                                    on_delete=models.CASCADE)
    proyecto = models.ForeignKey(PartidaProyecto, blank=True, null=True, verbose_name=u"Proyecto",
                                 on_delete=models.CASCADE)
    actividad = models.ForeignKey(PartidaActividad, blank=True, null=True, verbose_name=u"Actividad",
                                  on_delete=models.CASCADE)
    obra = models.ForeignKey(PartidaObra, blank=True, null=True, verbose_name=u"Obra", on_delete=models.CASCADE)
    geografico = models.ForeignKey(PartidaGeografico, blank=True, null=True, verbose_name=u"Geografico",
                                   on_delete=models.CASCADE)
    fuente = models.ForeignKey(PartidaFuente, blank=True, null=True, verbose_name=u"Fuente", on_delete=models.CASCADE)
    organismo = models.ForeignKey(PartidaOrganismo, blank=True, null=True, verbose_name=u"Organismo",
                                  on_delete=models.CASCADE)
    correlativo = models.ForeignKey(PartidaCorrelativo, blank=True, null=True, verbose_name=u"Correlativo",
                                    on_delete=models.CASCADE)
    asignado = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                   verbose_name=u"Asignado")
    codificado = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                     verbose_name=u"Codificado")
    reservadonegativo = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                            verbose_name=u"Reservado Negativo")
    precompromiso = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                        verbose_name=u"PreCompromiso")
    compromiso = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                     verbose_name=u"Compromiso")
    devengado = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                    verbose_name=u"Devengado")
    pagado = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                 verbose_name=u"Pagado")
    recaudado = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                    verbose_name=u"Recaudado")
    recaudadoesigef = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                          verbose_name=u"Recaudado esigef")
    disponible = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                     verbose_name=u"Saldo Disponible")

    def __str__(self):
        return self.codigo_todo()

    class Meta:
        verbose_name = u'Saldo de Partida Presupuestaria'
        verbose_name_plural = u'Saldos de Partidas Presupuestarias'
        ordering = (
        'anioejercicio', 'entidad', 'unidadejecutoria', 'unidaddesconcentrada', 'programa', 'subprograma', 'proyecto',
        'actividad', 'obra', 'partida__codigo', 'geografico', 'fuente', 'organismo', 'correlativo',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if extra:
            return eval('PartidasSaldo.objects.filter(Q(partida__codigo__icontains="%s") | Q(partida__nombre__icontains="%s")).filter(%s).distinct()[:%s]' % (q, q, extra, limit))
        return PartidasSaldo.objects.filter(Q(partida__codigo__icontains=q) | Q(partida__nombre__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return self.codigo_todo()

    def flexbox_alias(self):
        return self.codigo_todo()

    def actualizar_saldos(self, request):
        liquidados = 0
        self.reservadonegativo = null_to_decimal(
            self.detallereformapartida_set.filter(reformapartida__aprobado='S').aggregate(valor=Sum('montoaprobado'))[
                'valor'], 2)
        self.precompromiso = null_to_decimal(
            self.detallecertificacion_set.filter(estado=1).aggregate(valor=Sum('saldo'))['valor'], 2)
        liquidados = null_to_decimal(
            self.detallecertificacion_set.filter(estado=1).aggregate(valor=Sum('liquidado'))['valor'], 2)
        self.compromiso = null_to_decimal(
            DetalleCompromiso.objects.filter(detallecertificacion__partidassaldo=self).distinct().aggregate(
                valor=Sum('monto'))['valor'], 2)
        self.recaudado = null_to_decimal(self.resumencomprobantepartida_set.aggregate(valor=Sum('valor'))['valor'], 2)
        self.codificado = null_to_decimal(self.asignado, 2) + null_to_decimal(self.reservadonegativo, 2)
        self.disponible = null_to_decimal(self.codificado, 2) - null_to_decimal(self.precompromiso,
                                                                                2) + liquidados + null_to_decimal(
            (self.recaudadoesigef if self.recaudadoesigef else 0), 2)
        self.save(request)

    def saldo_dev(self):
        return null_to_decimal(self.asignado - self.devengado, 2)

    def saldo_rec(self):
        return null_to_decimal(self.devengado - self.recaudadoesigef, 2)

    def mi_codigo(self):
        if self.partida.tipo == 1:
            if self.obra:
                return u"%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s" % (
                self.anioejercicio, self.partida.codigo, self.entidad.codigo, self.unidadejecutoria.codigo,
                self.unidaddesconcentrada.codigo, self.programa.codigo, self.subprograma.codigo,
                self.proyecto.codigo, self.actividad.codigo, self.obra.codigo, self.geografico.codigo,
                self.fuente.codigo,
                self.organismo.codigo, self.correlativo.codigo)
            else:
                return u"%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s" % (
                self.anioejercicio, self.partida.codigo, self.entidad.codigo, self.unidadejecutoria.codigo,
                self.unidaddesconcentrada.codigo, self.programa.codigo, self.subprograma.codigo,
                self.proyecto.codigo, self.actividad.codigo, self.geografico.codigo,
                self.fuente.codigo,
                self.organismo.codigo, self.correlativo.codigo)
        return self.codigo_ingreso()

    def codigo_ingreso(self):
        return u"%s.%s.%s" % (self.anioejercicio, self.partida.codigo, self.fuente.codigo)

    def codigo_ingreso_todo(self):
        return u"%s.%s.%s - %s" % (self.anioejercicio, self.partida.codigo, self.fuente.codigo, self.partida.nombre)

    def es_egreso(self):
        if self.entidad and self.unidadejecutoria and self.unidaddesconcentrada and self.programa:
            return True
        return False

    def codigo_todo(self):
        if self.partida.tipo == 1:
            if self.obra:
                return u"%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s - %s" % (
                    self.anioejercicio, self.partida.codigo, self.entidad.codigo, self.unidadejecutoria.codigo,
                    self.unidaddesconcentrada.codigo, self.programa.codigo, self.subprograma.codigo,
                    self.proyecto.codigo, self.actividad.codigo, self.obra.codigo, self.geografico.codigo,
                    self.fuente.codigo,
                    self.organismo.codigo, self.correlativo.codigo, self.partida.nombre)
            else:
                return u"%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s.%s - %s" % (
                    self.anioejercicio, self.partida.codigo, self.entidad.codigo, self.unidadejecutoria.codigo,
                    self.unidaddesconcentrada.codigo, self.programa.codigo, self.subprograma.codigo,
                    self.proyecto.codigo, self.actividad.codigo, self.geografico.codigo,
                    self.fuente.codigo,
                    self.organismo.codigo, self.correlativo.codigo, self.partida.nombre)
        return self.codigo_ingreso_todo()

    def tipo_otro_rubro(self):
        if self.tipootrorubrosaldopartida_set.exists():
            return self.tipootrorubrosaldopartida_set.all()[0]
        return None

    def save(self, *args, **kwargs):
        super(PartidasSaldo, self).save(*args, **kwargs)


class ReformaClaseRegistro(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s - %s" % (self.codigo, self.nombre)

    class Meta:
        verbose_name = u'Clase Registro Reforma'
        verbose_name_plural = u'Clases Registros Reforma'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.reformapartida_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(ReformaClaseRegistro, self).save(*args, **kwargs)


class ReformaPartida(ModeloBase):
    nocur = models.IntegerField(default=0, verbose_name=u"NO CUR")
    claseregistro = models.ForeignKey(ReformaClaseRegistro, verbose_name=u"CLASE REGISTRO", on_delete=models.CASCADE)
    montosolicitado = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                          verbose_name=u"Monto Aprobado Detalle")
    montoaprobado = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                        verbose_name=u"Monto Aprobado Hoja")
    descripcion = models.CharField(default='', blank=True, null=True, max_length=1000, verbose_name=u"Descripci√≥n")
    fecimputacion = models.DateField(verbose_name=u"Fecha Imputaci√≥n", blank=True, null=True)
    disposicionlegal = models.TextField(default='', blank=True, null=True, max_length=30,
                                        verbose_name=u"Disposicion Legal")
    fecdisposicion = models.DateField(verbose_name=u"Fecha Disposici√≥n", blank=True, null=True)
    solicitado = models.CharField(default="S", max_length=1, choices=SINO, verbose_name=u'Solicitado')
    aprobado = models.CharField(default="S", max_length=1, choices=SINO, verbose_name=u'Aprobado')
    error = models.IntegerField(default=0, verbose_name=u"Error")
    tipodocumento = models.IntegerField(default=0, verbose_name=u"Tipo Documento")
    local = models.BooleanField(default=False, verbose_name=u'Es local')

    def __str__(self):
        return u"%s[%s]" % (self.descripcion, self.nocur)

    class Meta:
        verbose_name = u'Reformas de Partida Presupuestaria'
        verbose_name_plural = u'Reformas de Partidas Presupuestarias'
        ordering = ('nocur',)

    def totales(self, request):
        self.montosolicitado = null_to_decimal(
            self.detallereformapartida_set.aggregate(valor=Sum('montosolicitado'))['valor'], 2)
        self.montoaprobado = null_to_decimal(
            self.detallereformapartida_set.aggregate(valor=Sum('montoaprobado'))['valor'], 2)
        self.save(request)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.disposicionlegal = self.disposicionlegal.upper()
        super(ReformaPartida, self).save(*args, **kwargs)


class DetalleReformaPartida(ModeloBase):
    partidassaldo = models.ForeignKey(PartidasSaldo, verbose_name=u"Saldo Partida", on_delete=models.CASCADE)
    reformapartida = models.ForeignKey(ReformaPartida, verbose_name=u"Reforma Partida", on_delete=models.CASCADE)
    montosolicitado = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                          verbose_name=u"Monto Aprobado Detalle")
    montoaprobado = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                        verbose_name=u"Monto Aprobado Hoja")
    decrementa = models.BooleanField(default=True)

    def __str__(self):
        return u"%s[%s]" % (self.reformapartida, self.partidassaldo)

    class Meta:
        verbose_name = u'Reformas de Partida Presupuestaria'
        verbose_name_plural = u'Reformas de Partidas Presupuestarias'
        ordering = ('partidassaldo',)

    def save(self, *args, **kwargs):
        super(DetalleReformaPartida, self).save(*args, **kwargs)


class CompromisoClaseRegistro(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Entidad")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s - %s" % (self.codigo, self.nombre)

    class Meta:
        verbose_name = u'Clase Registro Compormiso'
        verbose_name_plural = u'Clases Registros Compormiso'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.compromisopartida_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(CompromisoClaseRegistro, self).save(*args, **kwargs)


class CompromisoClaseModificacion(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"C√≥digo")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s - %s" % (self.codigo, self.nombre)

    class Meta:
        verbose_name = u'Clase Modificacion Compormiso'
        verbose_name_plural = u'Clases Modificaci√≥n Compormiso'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.compromisopartida_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(CompromisoClaseModificacion, self).save(*args, **kwargs)


class CompromisoClaseGasto(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Codigo")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s - %s" % (self.codigo, self.nombre)

    class Meta:
        verbose_name = u'Clase Gasto Compormiso'
        verbose_name_plural = u'Clases Gastos Compormiso'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.compromisopartida_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(CompromisoClaseGasto, self).save(*args, **kwargs)


class PresupuestoTipoDocumentoRespaldo(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Codigo")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s - %s" % (self.codigo, self.nombre)

    class Meta:
        verbose_name = u'Clase Gasto Compormiso'
        verbose_name_plural = u'Clases Gastos Compormiso'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.certificacionpartida_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PresupuestoTipoDocumentoRespaldo, self).save(*args, **kwargs)


class PresupuestoClaseDocumentoRespaldo(ModeloBase):
    codigo = models.CharField(max_length=20, default=0, verbose_name=u"Codigo")
    nombre = models.CharField(max_length=200, default=0, verbose_name=u"Nombre")

    def __str__(self):
        return u"%s - %s" % (self.codigo, self.nombre)

    class Meta:
        verbose_name = u'Clase Gasto Compormiso'
        verbose_name_plural = u'Clases Gastos Compormiso'
        ordering = ('nombre',)
        unique_together = ('codigo',)

    def en_uso(self):
        return self.certificacionpartida_set.exists()

    def save(self, *args, **kwargs):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        super(PresupuestoClaseDocumentoRespaldo, self).save(*args, **kwargs)


class CertificacionPartida(ModeloBase):
    descripcion = models.TextField(default='', verbose_name=u"Descripci√≥n")
    anioejercicio = models.ForeignKey(AnioEjercicio, verbose_name=u"Ejercicio", on_delete=models.CASCADE)
    numerocertificacion = models.IntegerField(default=0, verbose_name=u"NO. Certificaci√≥n")
    claseregistro = models.ForeignKey(CompromisoClaseRegistro, blank=True, null=True, verbose_name=u"Clase Registro",
                                      on_delete=models.CASCADE)
    clasemodificacion = models.ForeignKey(CompromisoClaseModificacion, blank=True, null=True,
                                          verbose_name=u"Clase Modificaci√≥n", on_delete=models.CASCADE)
    clasegasto = models.ForeignKey(CompromisoClaseGasto, blank=True, null=True, verbose_name=u"Clase Gasto",
                                   on_delete=models.CASCADE)
    tipodocumento = models.ForeignKey(PresupuestoTipoDocumentoRespaldo, blank=True, null=True,
                                      verbose_name=u"Clase Gasto", on_delete=models.CASCADE)
    clasedocumento = models.ForeignKey(PresupuestoClaseDocumentoRespaldo, blank=True, null=True,
                                       verbose_name=u"Clase Gasto", on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u"Fecha", blank=True, null=True)
    estado = models.IntegerField(default=0, choices=ESTADO_CERTIFICACION, verbose_name=u'Solicitado')
    monto = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                verbose_name=u"Monto")
    saldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                verbose_name=u"Saldo")
    liquidado = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                    verbose_name=u"Liquidado")
    local = models.BooleanField(default=False, verbose_name=u'Es local')

    def __str__(self):
        return u"%s - %s" % (self.numerocertificacion, self.monto)

    class Meta:
        verbose_name = u'Certificacion de Partida Presupuestaria'
        verbose_name_plural = u'Certificacion de Partidas Presupuestarias'
        ordering = ('-numerocertificacion',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return CertificacionPartida.objects.filter(Q(descripcion__icontains=q, status=True) | Q(numerocertificacion__icontains=q, status=True, saldo__gt=0)).distinct()[:limit]

    def flexbox_repr(self):
        return "%s - %s" % (self.numerocertificacion, self.monto)

    def flexbox_alias(self):
        return [self.id, self.numerocertificacion, self.descripcion]

    def totales(self, request):
        self.monto = null_to_decimal(self.detallecertificacion_set.aggregate(valor=Sum('monto'))['valor'], 2)
        self.liquidado = null_to_decimal(self.detallecertificacion_set.aggregate(valor=Sum('liquidado'))['valor'], 2)
        self.saldo = null_to_decimal(self.detallecertificacion_set.aggregate(valor=Sum('saldo'))['valor'], 2)
        self.save(request)

    def compromisos(self):
        compromisos = 0
        for detalle in self.detallecertificacion_set.all():
            compromisos += detalle.monto_compromiso()
        return compromisos

    def actualiza_estado(self, request):
        if self.detallecertificacion_set.filter(estado=3).exists():
            self.detallecertificacion_set.update(estado=3)
            self.estado = 2
        elif self.detallecertificacion_set.filter(estado=2).exists():
            self.detallecertificacion_set.update(estado=2)
            self.estado = 2
        else:
            detalle = DetalleCompromiso.objects.filter(
                detallecertificacion__in=self.detallecertificacion_set.filter(estado=1))
            valor_hijos = null_to_decimal(detalle.aggregate(valor=Sum('monto'))['valor'], 2)
            if valor_hijos == self.monto:
                self.estado = 2
            else:
                self.estado = 1
        self.save(request)

    def tabla(self):
        return self.detallecertificacion_set.filter(status=True)

    def fechainicio(self):
        if FechaCertificacion.objects.filter(numerocertificacion=self.numerocertificacion, status=True).exists():
            return FechaCertificacion.objects.filter(numerocertificacion=self.numerocertificacion, status=True)[
                0].fechainicio
        return None

    def fechafin(self):
        if FechaCertificacion.objects.filter(numerocertificacion=self.numerocertificacion, status=True).exists():
            return FechaCertificacion.objects.filter(numerocertificacion=self.numerocertificacion, status=True)[
                0].fechafin
        return None

    def restarfecha(self):
        if FechaCertificacion.objects.filter(numerocertificacion=self.numerocertificacion, status=True).exists():
            fechacertificacion = \
            FechaCertificacion.objects.filter(numerocertificacion=self.numerocertificacion, status=True)[0]
            if fechacertificacion.fechainicio:
                if fechacertificacion.fechafin:
                    fecha = (fechacertificacion.fechafin - fechacertificacion.fechainicio)
                    return fecha.days
        return 0

    def condicional(self):
        # 3 = rojo, 2 = amarillo, 1 = verde
        hoy = datetime.now().date()
        saldo = self.saldo
        fechafin = self.fechafin()
        if fechafin:
            if saldo > 0 and hoy > fechafin:
                return "red"
            else:
                if saldo == 0:
                    return "green"
                else:
                    return "yellow"
        else:
            if saldo > 0:
                return "red"
            else:
                return "green"

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(CertificacionPartida, self).save(*args, **kwargs)


class FechaCertificacion(ModeloBase):
    numerocertificacion = models.IntegerField(default=0, verbose_name=u"NO. Certificaci√≥n")
    fechainicio = models.DateField(verbose_name=u"Fecha Inicio", blank=True, null=True)
    fechafin = models.DateField(verbose_name=u"Fecha Fin", blank=True, null=True)
    anioejercicio = models.ForeignKey(AnioEjercicio, verbose_name=u"Ejercicio", on_delete=models.CASCADE)


class DetalleCertificacion(ModeloBase):
    certificacion = models.ForeignKey(CertificacionPartida, verbose_name=u"Certificacion", on_delete=models.CASCADE)
    partidassaldo = models.ForeignKey(PartidasSaldo, verbose_name=u"Saldo Partida", on_delete=models.CASCADE)
    ruc = models.CharField(default='', max_length=300, blank=True, null=True, verbose_name=u"Ruc")
    nitnombre = models.CharField(default='', max_length=300, blank=True, null=True, verbose_name=u"Nombre")
    estado = models.IntegerField(default=0, choices=ESTADO_COMPROMISO, verbose_name=u'Solicitado')
    monto = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                verbose_name=u"Monto")
    liquidado = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                    verbose_name=u"Liquidado")
    saldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                verbose_name=u"Saldo")

    def __str__(self):
        return u"%s - %s" % (self.partidassaldo.partida, self.saldo)

    class Meta:
        verbose_name = u'Detalle Certificacion de Partida Presupuestaria'
        verbose_name_plural = u'Detalles Certificacion de Partidas Presupuestarias'
        ordering = ('-id',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if extra:
            return eval('DetalleCertificacion.objects.filter(Q(partidassaldo__partida__codigo__icontains="%s") | Q(partidassaldo__partida__nombre__icontains="%s")).filter(%s).distinct()[:%s]' % (q, q, extra, limit))
        return DetalleCertificacion.objects.filter(Q(partidassaldo__partida__codigo__icontains=q) | Q(partidassaldo__partida__nombre__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return u"%s - %s" % (self.partidassaldo.partida, self.saldo)

    def en_uso(self):
        return self.detallecompromiso_set.exists()

    def monto_compromiso(self):
        return null_to_decimal(self.detallecompromiso_set.aggregate(valor=Sum('monto'))['valor'], 2)

    def actualiza_saldo(self, request):
        valor = self.monto_compromiso()
        self.saldo = self.monto - (valor + self.liquidado)
        self.save(request)


class CompromisoPartida(ModeloBase):
    nocur = models.IntegerField(default=0, verbose_name=u"NO CUR")
    claseregistro = models.ForeignKey(CompromisoClaseRegistro, verbose_name=u"Clase Registro", on_delete=models.CASCADE)
    clasemodificacion = models.ForeignKey(CompromisoClaseModificacion, verbose_name=u"Clase Modificaci√≥n",
                                          on_delete=models.CASCADE)
    clasegasto = models.ForeignKey(CompromisoClaseGasto, verbose_name=u"Clase Gasto", on_delete=models.CASCADE)
    descripcion = models.TextField(default='', verbose_name=u"Descripci√≥n")
    fecha = models.DateField(verbose_name=u"Fecha", blank=True, null=True)
    estado = models.IntegerField(default=0, choices=ESTADO_COMPROMISO, verbose_name=u'Solicitado')
    monto = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                verbose_name=u"Monto")
    local = models.BooleanField(default=False, verbose_name=u'Es local')

    def __str__(self):
        return u"%s" % self.nocur

    class Meta:
        verbose_name = u'Compormiso de Partida Presupuestaria'
        verbose_name_plural = u'Compromisos de Partidas Presupuestarias'
        ordering = ('-nocur',)

    def monto_total(self, request):
        self.monto = null_to_decimal(self.detallecompromiso_set.aggregate(valor=Sum('monto'))['valor'], 2)
        self.save(request)

    def detalle(self):
        if self.detallecompromiso_set.exists():
            return self.detallecompromiso_set.all()[0]
        return None

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(CompromisoPartida, self).save(*args, **kwargs)


class DetalleCompromiso(ModeloBase):
    detallecertificacion = models.ForeignKey(DetalleCertificacion, verbose_name=u"Certificacion",
                                             on_delete=models.CASCADE)
    comrpomiso = models.ForeignKey(CompromisoPartida, verbose_name=u"Certificacion", on_delete=models.CASCADE)
    monto = models.DecimalField(default=0, max_digits=30, decimal_places=2, blank=True, null=True,
                                verbose_name=u"Monto")

    def __str__(self):
        return u"%s - %s" % (self.detallecertificacion.certificacion.numerocertificacion, self.monto)

    class Meta:
        verbose_name = u'Detalle Certificacion de Partida Presupuestaria'
        verbose_name_plural = u'Detalles Certificacion de Partidas Presupuestarias'
        ordering = ('-id',)


# Modelos de Evaluacion de Riesgos y Planificaci√≥n A. Preventiva

PROBABILIDAD_SEVERIDAD = (
    (1, u'ALTA'),
    (2, u'MEDIA'),
    (3, u'BAJA'),
)

GRADO_RIESGO = (
    [1, 1, u'MUY ALTO'],
    (1, 2, u'ALTO'),
    (1, 3, u'MODERADO'),
    (2, 1, u'ALTO'),
    (2, 2, u'MODERADO'),
    (2, 3, u'BAJO'),
    (3, 1, u'MODERADO'),
    (3, 2, u'BAJO'),
    (3, 3, u'MUY BAJO')
)

ESTADO_PLAN_ACCION_PREVENTIVA = (
    (1, u'NO TIENE'),
    (2, u'PARCIAL'),
    (3, u'PLANIFICADO'),
    (4, u'FINALIZADO'),
)

ESTADO_DETALLE_PLAN_ACCION_PREVENTIVA = (
    (1, u'PENDIENTE'),
    (2, u'CUMPLIDA'),
    (3, u'INCUMPLIDA'),
)


class RiesgoTrabajo(ModeloBase):
    codigo = models.CharField(max_length=5, verbose_name=u"C√≥digo de Riesgo")
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Riesgo de Trabajo'
        verbose_name_plural = u'Riesgos de Trabajo'
        ordering = ('codigo',)
        unique_together = ('codigo', 'descripcion',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return RiesgoTrabajo.objects.filter(Q(descripcion__icontains=q, status=True) | Q(codigo__icontains=q, status=True)).distinct()[:limit]

    def flexbox_repr(self):
        return "%s - %s" % (self.codigo, self.descripcion)

    def flexbox_alias(self):
        return [self.id, self.codigo, self.descripcion]

    def en_uso(self):
        return self.agenteriesgoriesgo_set.exists()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(RiesgoTrabajo, self).save(*args, **kwargs)


class GrupoAgente(ModeloBase):
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Grupo de Agente'
        verbose_name_plural = u'Grupos de Agentes'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(GrupoAgente, self).save(*args, **kwargs)


class SubgrupoAgente(ModeloBase):
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Subgrupo de Agente'
        verbose_name_plural = u'Subgrupos de Agentes'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(SubgrupoAgente, self).save(*args, **kwargs)


class AgenteRiesgo(ModeloBase):
    grupo = models.ForeignKey(GrupoAgente, verbose_name=u"C√≥digo de Grupo", on_delete=models.CASCADE)
    subgrupo = models.ForeignKey(SubgrupoAgente, blank=True, null=True, verbose_name=u"C√≥digo de Subgrupos",
                                 on_delete=models.CASCADE)
    apartado = models.CharField(max_length=250, default="", verbose_name=u"Apartado/Subapartado")
    codigo = models.CharField(max_length=5, verbose_name=u"C√≥digo de Agente")
    descripcion = models.CharField(max_length=250, verbose_name=u"Descripci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Agente de Riesgo'
        verbose_name_plural = u'Agentes de Riesgo'
        ordering = ('codigo', 'descripcion',)
        unique_together = ('codigo', 'descripcion',)

    def detalles_agente_concatenado(self):
        lista = ''
        for dato in self.detalles_agente():
            if len(lista) == 0:
                lista = str(dato.riesgo_id) + ":" + dato.medida + ":U"
            else:
                lista = lista + ";" + str(dato.riesgo_id) + ":" + dato.medida + ":U"
        return lista

    def detalles_agente(self):
        return self.agenteriesgoriesgo_set.filter(status=True)

    def cantidad_riesgos_asociados(self):
        return self.agenteriesgoriesgo_set.filter(status=True).count()

    def en_uso(self):
        return DetalleEvaluacionRiesgo.objects.filter(agente_id=self, status=True).exists()

    def save(self, *args, **kwargs):
        self.apartado = self.apartado.upper()
        self.descripcion = self.descripcion.upper()
        super(AgenteRiesgo, self).save(*args, **kwargs)


class AgenteRiesgoRiesgo(ModeloBase):
    agente = models.ForeignKey(AgenteRiesgo, verbose_name=u"C√≥digo de Agente de Riesgo", on_delete=models.CASCADE)
    riesgo = models.ForeignKey(RiesgoTrabajo, blank=True, null=True, verbose_name=u"C√≥digo de Riesgo de Trabajo",
                               on_delete=models.CASCADE)
    medida = models.TextField(max_length=1000, verbose_name=u"Medida")

    def __str__(self):
        return u"%s - %s" % (self.agente, (self.riesgo if self.riesgo else ""))

    class Meta:
        verbose_name = u'Riesgo Asociado a un Agente'
        verbose_name_plural = u'Riesgos Asociados a un Agente'
        ordering = ('agente', 'riesgo')

    def save(self, *args, **kwargs):
        self.medida = self.medida.upper()
        super(AgenteRiesgoRiesgo, self).save(*args, **kwargs)


class SeccionDepartamento(ModeloBase):
    departamento = models.ForeignKey(Departamento, verbose_name=u"Departamento", on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=100, verbose_name=u"Descripci√≥n")
    observacion = models.CharField(max_length=250, verbose_name=u"Observaci√≥n")
    responsable = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True, verbose_name=u'Responsable',
                                    on_delete=models.CASCADE)
    responsablesubrogante = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True,
                                              verbose_name=u'Responsable', on_delete=models.CASCADE)
    mision = models.TextField(default='', verbose_name=u'Misi√≥n', blank=True)
    codigoindice = models.CharField(max_length=20, default="", verbose_name=u"C√≥digo Indice")
    activo = models.BooleanField(default=True, verbose_name=u"Usa actualmente")
    noactividades = models.BooleanField(default=False, verbose_name=u'No ingresa actividades')

    def activo_str(self):
        return 'fa fa-check-circle text-success' if self.activo else 'fa fa-times-circle text-error'

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Seccion de Departamento'
        verbose_name_plural = u'Secciones de Departamentos'
        ordering = ('descripcion',)
        unique_together = ('descripcion','departamento')

    def name_estadistica(self):
        return f'{self.descripcion}'

    def encuesta(self):
        from django.contrib.contenttypes.models import ContentType
        from balcon.models import EncuestaProceso
        content_type = ContentType.objects.get_for_model(self)
        return EncuestaProceso.objects.filter(object_id=self.id, content_type=content_type, status=True, vigente=True).first()

    def encuesta_configurada(self):
        from balcon.models import EncuestaProceso
        from django.contrib.contenttypes.models import ContentType
        content_type = ContentType.objects.get_for_model(self)
        return EncuestaProceso.objects.filter(object_id=self.id, content_type=content_type, status=True).first()

    def tiene_preguntas(self):
        return self.encuesta().preguntas_obj() if self.encuesta() else None

    def preguntas_encuesta(self):
        return self.encuesta_configurada().preguntas_para_estadisticas() if self.encuesta_configurada() else None

    def personal(self):
        return self.organigrama_set.filter(status=True).order_by('nivel_puesto')

    def productos(self):
        return self.productoservicioseccion_set.filter(status=True,activo=True ).order_by('id')


    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.observacion = self.observacion.upper()
        super(SeccionDepartamento, self).save(*args, **kwargs)

    def reservas(self):
        return IncidenciaSCRUM.objects.filter(categoria__gestion_recepta=self, requerimiento__isnull=False)


class ProductoServicioSeccion(ModeloBase):
    producto = models.ForeignKey(ProductoServicioTh, verbose_name=u"Producto/Servicio", on_delete=models.CASCADE)
    seccion = models.ForeignKey(SeccionDepartamento, verbose_name=u"Gesti√≥n", on_delete=models.CASCADE)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return u"%s - %s" % (self.producto, self.seccion)

    def get_activo(self):
        return 'fa fa-check-circle text-success' if not self.activo else 'fa fa-times-circle text-error'

    def actividades(self):
        return self.actividadsecuencialth_set.filter(status=True).order_by('id')


class EvaluacionRiesgo(ModeloBase):
    fecha = models.DateField(verbose_name=u"Fecha de Evaluaci√≥n")
    responsable = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True, verbose_name=u"Responsable",
                                    on_delete=models.CASCADE)
    bloque = models.ForeignKey(Bloque, verbose_name=u"C√≥digo del Bloque", on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"C√≥digo de Departamento",
                                     on_delete=models.CASCADE)
    seccion = models.ForeignKey(SeccionDepartamento, blank=True, null=True, verbose_name=u"C√≥digo de Secci√≥n",
                                on_delete=models.CASCADE)
    trabajador = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True,
                                   verbose_name=u"Empleado/Trabajador", on_delete=models.CASCADE)
    trabajadoresexpuestos = models.IntegerField(default=0, blank=True, null=True,
                                                verbose_name=u"N√∫mero de Trabajadores Expuestos")
    observacion = models.CharField(max_length=250, verbose_name=u"Observaci√≥n")
    estadoplanaccion = models.IntegerField(default=1, choices=ESTADO_PLAN_ACCION_PREVENTIVA,
                                           verbose_name=u"Estado Plan de Accion Preventiva")

    def __str__(self):
        return u"%s" % self.observacion

    class Meta:
        verbose_name = u'Evaluaci√≥n de Riesgo'
        verbose_name_plural = u'Evaluaciones de Riesgo'
        ordering = ('estadoplanaccion', '-fecha', 'bloque', 'departamento', 'seccion', 'trabajador',)

    def detalle(self):
        return self.detalleevaluacionriesgo_set.filter()

    def detallesnoplanificados(self):
        return self.detalleevaluacionriesgo_set.filter(planaccionpreventiva__isnull=False)

    def actualizar_estado(self, request):
        if self.detalleevaluacionriesgo_set.all().count() == self.detalleevaluacionriesgo_set.filter(
                detalleplanaccionpreventiva__isnull=True).distinct().count():
            self.estadoplanaccion = 1
        elif self.detalleevaluacionriesgo_set.all().count() == self.detalleevaluacionriesgo_set.filter(
                detalleplanaccionpreventiva__isnull=False).distinct().count():
            if self.detalleevaluacionriesgo_set.all().count() == self.detalleevaluacionriesgo_set.filter(
                    detalleplanaccionpreventiva__isnull=False,
                    detalleplanaccionpreventiva__cerrada=True).distinct().count():
                self.estadoplanaccion = 4
            else:
                self.estadoplanaccion = 3
        else:
            self.estadoplanaccion = 2
        self.save(request)

    def parcialplanificada(self):
        return self.estadoplanaccion == 2

    def planificada(self):
        return self.estadoplanaccion == 3

    def completada(self):
        return self.estadoplanaccion == 4

    def siplanificado(self):
        return self.estadoplanaccion == 3

    def noplanificada(self):
        return self.estadoplanaccion == 1

    def cantidad_riesgos(self):
        return self.detalleevaluacionriesgo_set.count()

    def cantidad_planificadas(self):
        return PlanAccionPreventiva.objects.filter(
            detalleplanaccionpreventiva__detalleevaluacionriesgo__codigoevaluacion=self).count()

    def cantidad_cerradas(self):
        return self.planaccionpreventiva_set.filter(detalleplanaccionpreventiva__cerrada=True).count()

    def tiene_riesgos(self):
        return self.detalleevaluacionriesgo_set.exists()

    def mis_planificaciones(self):
        return PlanAccionPreventiva.objects.filter(
            detalleplanaccionpreventiva__detalleevaluacionriesgo__codigoevaluacion=self).distinct()

    def tiene_planificaciones(self):
        return PlanAccionPreventiva.objects.filter(
            detalleplanaccionpreventiva__detalleevaluacionriesgo__codigoevaluacion=self).exists()

    def rep_estadoplanaccion(self):
        return ESTADO_PLAN_ACCION_PREVENTIVA[self.estadoplanaccion - 1][1]

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(EvaluacionRiesgo, self).save(*args, **kwargs)


class DetalleEvaluacionRiesgo(ModeloBase):
    codigoevaluacion = models.ForeignKey(EvaluacionRiesgo, verbose_name=u"C√≥digo de Evaluaci√≥n",
                                         on_delete=models.CASCADE)
    agente = models.ForeignKey(AgenteRiesgoRiesgo, verbose_name=u"C√≥digo de Agente de Riesgo", on_delete=models.CASCADE)
    probabilidaddanio = models.IntegerField(default=1, choices=PROBABILIDAD_SEVERIDAD,
                                            verbose_name=u"Probabilidad que ocurra el dA√±o")
    severidaddanio = models.IntegerField(default=1, choices=PROBABILIDAD_SEVERIDAD, verbose_name=u"Severidad del dA√±o")
    comentario = models.CharField(max_length=250, verbose_name=u"Comentario")
    planaccionpreventiva = models.BooleanField(default=False, verbose_name=u"Tiene Plan de Acci√≥n preventiva")

    def __str__(self):
        return u"%s" % self.codigoevaluacion

    class Meta:
        verbose_name = u'Detalle de Evaluaci√≥n de Riesgo'
        verbose_name_plural = u'Detalles de Evaluaciones de Riesgo'
        ordering = ('agente',)

    def rep_probabilidaddanio(self):
        return PROBABILIDAD_SEVERIDAD[self.probabilidaddanio - 1][1]

    def rep_severidaddanio(self):
        return PROBABILIDAD_SEVERIDAD[self.severidaddanio - 1][1]

    def rep_gradoriesgo(self):
        nombre = GRADO_RIESGO[0][2]
        for elemento in GRADO_RIESGO:
            if elemento[0] == self.probabilidaddanio and elemento[1] == self.severidaddanio:
                nombre = elemento[2]
                break
        return nombre

    def esta_planificado(self):
        return self.detalleplanaccionpreventiva_set.exists()

    def mi_planificacion(self):
        return self.detalleplanaccionpreventiva_set.all()[0]

    def save(self, *args, **kwargs):
        self.comentario = self.comentario.upper()
        super(DetalleEvaluacionRiesgo, self).save(*args, **kwargs)

    def foto(self):
        if self.evidenciadetalleevaluacionriesgo_set.exists():
            return self.evidenciadetalleevaluacionriesgo_set.all()[0]
        return None


class EvidenciaDetalleEvaluacionRiesgo(ModeloBase):
    detalleevaluacion = models.ForeignKey(DetalleEvaluacionRiesgo, verbose_name=u"Detalle Evaluaci√≥n Riesgo",
                                          on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='archivo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Evidencias')

    def download_link(self):
        return self.archivo.url


class PlanAccionPreventiva(ModeloBase):
    codigoevaluacion = models.ForeignKey(EvaluacionRiesgo, verbose_name=u"C√≥digo de Evaluaci√≥n",
                                         on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u"Fecha Plan de Acci√≥n")
    periodo = models.CharField(max_length=150, verbose_name=u"Periodo de tiempo")
    responsable = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Responsable",
                                    on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % self.periodo

    class Meta:
        verbose_name = u'Planificaci√≥n Acci√≥n Preventiva'
        verbose_name_plural = u'Planificaciones Acciones Preventivas'
        ordering = ('codigoevaluacion', 'fecha',)

    def mis_planificaciones(self):
        return self.detalleplanaccionpreventiva_set.all()

    def mis_evaluaciones(self):
        return DetallePlanAccionPreventiva.objects.filter(planaccionpreventiva__codigoevaluacion=True).all()

    def detalleseditarplan(self):
        return DetalleEvaluacionRiesgo.objects.filter(
            Q(planaccionpreventiva__isnull=False) | Q(detalleplanaccionpreventiva__planaccionpreventiva=self),
            codigoevaluacion=self.codigoevaluacion).distinct()

    def fue_ejecutada(self):
        return self.detalleplanaccionpreventiva_set.filter(planrealizado__gt=1).exists()

    def save(self, *args, **kwargs):
        self.periodo = self.periodo.upper()
        super(PlanAccionPreventiva, self).save(*args, **kwargs)


class DetallePlanAccionPreventiva(ModeloBase):
    planaccionpreventiva = models.ForeignKey(PlanAccionPreventiva, verbose_name=u"C√≥digo Plan de Acci√≥n Preventiva",
                                             on_delete=models.CASCADE)
    detalleevaluacionriesgo = models.ForeignKey(DetalleEvaluacionRiesgo,
                                                verbose_name=u"C√≥digo de Detalle de Evaluaci√≥n",
                                                on_delete=models.CASCADE)
    medida = models.TextField(verbose_name=u"Medida y Acciones")
    responsable = models.ForeignKey('sga.Persona', verbose_name=u"C√≥digo del Responsable", on_delete=models.CASCADE)
    fechainicio = models.DateField(null=True, blank=True, verbose_name=u"Fecha de Inicio")
    fechafin = models.DateField(null=True, blank=True, verbose_name=u"Fecha de Fin")
    planrealizado = models.IntegerField(default=1, choices=ESTADO_DETALLE_PLAN_ACCION_PREVENTIVA,
                                        verbose_name=u"Plan realizado")
    cerrada = models.BooleanField(default=False, verbose_name=u"Cerrada")

    def __str__(self):
        return u"%s" % self.planaccionpreventiva

    class Meta:
        verbose_name = u'Detalle Planificaci√≥n Acci√≥n Preventiva'
        verbose_name_plural = u'Detalles Planificaciones Acciones Preventivas'
        ordering = ('planaccionpreventiva', 'detalleevaluacionriesgo',)

    def foto(self):
        if self.evidenciadetalleplanaccionpreventiva_set.exists():
            return self.evidenciadetalleplanaccionpreventiva_set.all()[0]
        return None

    def esta_pendiente(self):
        return self.planrealizado == 1

    def esta_cumplida(self):
        return self.planrealizado == 2

    def esta_incumplida(self):
        return self.planrealizado == 3

    def tiene_evidencia(self):
        return self.evidenciadetalleplanaccionpreventiva_set.exists()

    def save(self, *args, **kwargs):
        self.medida = self.medida.upper()
        detalleevaluacionriesgo = self.detalleevaluacionriesgo
        detalleevaluacionriesgo.planaccionpreventiva = True
        detalleevaluacionriesgo.save()
        super(DetallePlanAccionPreventiva, self).save(*args, **kwargs)


class EvidenciaDetallePlanAccionPreventiva(ModeloBase):
    detalleplanaccionpreventiva = models.ForeignKey(DetallePlanAccionPreventiva, verbose_name=u"Detalle Plan Accion",
                                                    on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='archivo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Evidencias')

    def download_link(self):
        return self.archivo.url


class TipoArriendo(ModeloBase):
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Tipo de Arriendo'
        verbose_name_plural = u'Tipos de Arriendos'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(TipoArriendo, self).save(*args, **kwargs)


class LugarContrato(ModeloBase):
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Lugar de Contrato'
        verbose_name_plural = u'Lugares de Contratos'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(LugarContrato, self).save(*args, **kwargs)


class ContratoRecaudacion(ModeloBase):
    cliente = models.ForeignKey('sga.Persona', verbose_name=u"Responsable del contrato", on_delete=models.CASCADE)
    numero = models.CharField(max_length=20, verbose_name=u"Numero Contrato")
    diacobro = models.IntegerField(default=5, verbose_name=u"D√≠a de cobro")
    tipoarriendo = models.ForeignKey(TipoArriendo, verbose_name=u"Tipo de Arriendo", on_delete=models.CASCADE)
    lugar = models.ForeignKey(LugarContrato, verbose_name=u"Lugar", on_delete=models.CASCADE)
    fechainicio = models.DateField(verbose_name=u"Fecha inicio contrato")
    fechafin = models.DateField(verbose_name=u"Fecha fin contrato", blank=True, null=True)
    monto = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Monto del contrato")
    descripcion = models.CharField(max_length=100, blank=True, null=True, verbose_name=u"Descripci√≥n")
    archivo = models.FileField(upload_to='archivo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')
    activo = models.BooleanField(default=True)
    finalizado = models.BooleanField(default=False)

    def download_link(self):
        return self.archivo.url

    def puede_modificarse(self):
        if self.rubro_set.filter(pago__isnull=False).exists():
            return False
        return True

    def meses(self):
        return int(((self.fechafin - self.fechainicio).days / 30))

    def meses_nuevo(self, fechacobro):
        return int(((self.fechafin - fechacobro).days / 30) + 1)

    def esta_activo(self):
        if self.rubro_set.filter(status=True).exists():
            for r in self.rubro_set.filter(status=True):
                if r.cancelado == False:
                    return True
        return False

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        if self.id:
            self.monto = null_to_decimal(self.detallecontratorecaudacion_set.aggregate(valor=Sum('valor'))['valor'], 2)
        super(ContratoRecaudacion, self).save(*args, **kwargs)


class IvaAplicado(ModeloBase):
    descripcion = models.CharField(max_length=300, verbose_name=u'Nombre')
    porcientoiva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'% IVA aplicado')
    codigo = models.IntegerField(default=0, verbose_name=u'Codigo')
    activo = models.BooleanField(default=True, verbose_name=u'Activo')
    fechainicio = models.DateTimeField(verbose_name=u"Fecha inicio",blank=True, null=True)
    fechafin = models.DateTimeField(verbose_name=u"Fecha fin", blank=True, null=True)

    def __str__(self):
        return u'%s' % self.descripcion

    class Meta:
        verbose_name = u"IVA aplicado"
        verbose_name_plural = u"IVA aplicados"

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper().strip()
        super(IvaAplicado, self).save(*args, **kwargs)


class ImpuestoRetenido(ModeloBase):
    nombre = models.CharField(verbose_name=u'Nombre', max_length=300)

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Impuesto retenido"
        verbose_name_plural = u"Impuestos retenidos"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(ImpuestoRetenido, self).save(*args, **kwargs)


class CodigoRetencion(ModeloBase):
    impuestoretenido = models.ForeignKey(ImpuestoRetenido, verbose_name=u'Impuesto Retenido', on_delete=models.CASCADE)
    nombre = models.CharField(verbose_name=u'Nombre', max_length=300)
    porcentaje = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'% Retenido')
    codigosri = models.CharField(verbose_name=u'C√≥digo SRI', max_length=10)

    def __str__(self):
        return u'%s - %s (%s)' % (self.impuestoretenido.nombre, self.nombre, self.porcentaje)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return CodigoRetencion.objects.filter(Q(impuestoretenido__nombre__icontains=q) | Q(nombre__icontains=q) | Q(porcentaje__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return self.nombre

    def flexbox_alias(self):
        return [self.id, self.nombre]

    class Meta:
        verbose_name = u"Codigo retencion"
        verbose_name_plural = u"C√≥digos retencines"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(CodigoRetencion, self).save(*args, **kwargs)


ESTADO_PRESUPUESTO = (
    (1, u"DISE√ëO"),
    (2, u"APROBADO"),
    (3, u"RECHAZADO"),
    (4, u"FINALIZADO"),
)

ESTADO_PLANILLA = (
    (1, u"PENDIENTE"),
    (2, u"FINALIZADA")
)


class LugarObra(ModeloBase):
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")


class Recursos(ModeloBase):
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")


class PresupuestoObra(ModeloBase):
    nombre = models.CharField(max_length=300, default='', verbose_name=u'Nombre')
    descripcion = models.TextField(default='', verbose_name=u"Descripci√≥n")
    fecha = models.DateTimeField()
    porcentajeindirectoutilidad = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                      verbose_name=u"Porcentaje Indirecto utilidad")
    duracion = models.IntegerField(default=0, verbose_name=u"Duraci√≥n Meses")
    ubicacion = models.CharField(max_length=300, default='', verbose_name=u'Ubicaci√≥n')
    elaborado = models.ForeignKey('sga.Persona', verbose_name=u"Elaborado", on_delete=models.CASCADE)
    estado = models.IntegerField(default=1, choices=ESTADO_PRESUPUESTO, verbose_name=u"Estado del presupuesto")
    observacion = models.TextField(default='', verbose_name=u"Observacion")
    saldoplanilla = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Saldo Planillas")
    valoranticipo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Valor Anticipo")
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Valor")

    def __str__(self):
        return u"%s" % self.nombre

    class Meta:
        verbose_name = u'Presupuesto de obra'
        verbose_name_plural = u'Presupuestos de obras'
        ordering = ('fecha', 'nombre')
        unique_together = ('fecha', 'nombre')

    def rep_estado(self):
        return ESTADO_PRESUPUESTO[self.estado - 1][1]

    def pendiente(self):
        return self.valor - self.saldoplanilla

    def avance(self):
        return null_to_decimal(
            self.planillapresupuestoobra_set.filter(tipoplanilla=1, estado=2).aggregate(valor=Sum('monto'))['valor'], 2)

    def complementarias(self):
        return null_to_decimal(
            self.planillapresupuestoobra_set.filter(tipoplanilla=2, estado=2).aggregate(valor=Sum('monto'))['valor'], 2)

    def extra(self):
        return null_to_decimal(
            self.planillapresupuestoobra_set.filter(tipoplanilla=3, estado=2).aggregate(valor=Sum('monto'))['valor'], 2)

    def generar_cronograma_presupuesto(self):
        for mes in range(1, self.duracion + 1):
            if not self.cronogramapresupuestoobra_set.filter(mes=mes).exists():
                crono = CronogramaPresupuestoObra(presupuestoobra=self,
                                                  mes=mes)
                crono.save()

    def actualizar_presupuesto(self):
        self.valor = null_to_decimal(self.actividadpresupuestoobra_set.aggregate(total=Sum('valor'))['total'], 2)
        self.save()

    def actualiza_planificado(self):
        valor_acumulado = 0
        valor_ejecutadoacumulado = 0
        for cronograma in self.cronogramapresupuestoobra_set.all().order_by('mes'):
            valor_acumulado += cronograma.planificado
            cronograma.planificadoacumulado = valor_acumulado
            valor_ejecutadoacumulado += cronograma.ejecutado
            cronograma.ejecutadoacumulado = valor_ejecutadoacumulado
            cronograma.save()

    def valor_meses(self):
        return null_to_decimal(CronogramaRecursoActividadPresupuestObra.objects.filter(
            recursoactividadpresupuestobra__grupoactividadpresupuestobra__actividadpresupuestoobra__presupuestoobra=self).distinct().aggregate(
            valor=Sum('valor'))['valor'], 2)

    def esta_aprobado(self):
        return self.estado == 2

    def esta_diseno(self):
        return self.estado == 1

    def esta_rechazado(self):
        return self.estado == 3

    def esta_finalizado(self):
        return self.estado == 4

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        self.ubicacion = self.ubicacion.upper()
        super(PresupuestoObra, self).save(*args, **kwargs)


class AprobacionPresupuestoObra(ModeloBase):
    presupuestoobra = models.ForeignKey(PresupuestoObra, verbose_name=u"Proyecto", on_delete=models.CASCADE)
    fechainicio = models.DateTimeField(verbose_name=u"Fecha inicio contrato")
    fechafin = models.DateTimeField(verbose_name=u"Fecha fin contrato", blank=True, null=True)
    contratonumero = models.CharField(max_length=600, default='', verbose_name=u'Numero de Contrato')
    contratista = models.CharField(max_length=600, default='', verbose_name=u'Contratista')
    fiscalizador = models.CharField(max_length=600, default='', verbose_name=u'Fiscalizador')
    administradorcontrato = models.CharField(max_length=600, default='', verbose_name=u'Administrador contrato')
    finalizado = models.BooleanField(default=False)

    def __str__(self):
        return u"%s" % self.contratista

    class Meta:
        verbose_name = u'Aprobacion Presupuesto de obra'
        verbose_name_plural = u'Aprobaciones Presupuestos de obras'
        ordering = ('fechainicio',)


class CronogramaPresupuestoObra(ModeloBase):
    presupuestoobra = models.ForeignKey(PresupuestoObra, verbose_name=u"Proyecto", on_delete=models.CASCADE)
    mes = models.IntegerField(default=1)
    planificado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Planificado")
    planificadoacumulado = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u"Planificado Acumilado")
    ejecutado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Ejecutado")
    ejecutadoacumulado = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u"Ejecutado Acumilado")
    porcientoavance = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Porcentaje Avance")

    def __str__(self):
        return u"%s" % self.mes

    class Meta:
        verbose_name = u'Cronograma Presupuesto de obra'
        verbose_name_plural = u'Cronogramas Presupuestos de obras'
        ordering = ('mes',)


class TipoArchivoPresupuestoObra(ModeloBase):
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Tipo de Archivo de Presupuesto'
        verbose_name_plural = u'Tipos de Archivos de Presupuesto'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(TipoArchivoPresupuestoObra, self).save(*args, **kwargs)


class ArchivoPresupuestoObra(ModeloBase):
    presupuestoobra = models.ForeignKey(PresupuestoObra, verbose_name=u"Proyecto", on_delete=models.CASCADE)
    tipoarchivo = models.ForeignKey(TipoArchivoPresupuestoObra, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=300, verbose_name=u'Nombre')
    archivo = models.FileField(upload_to='archivo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')

    def download_link(self):
        return self.archivo.url

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(ArchivoPresupuestoObra, self).save(*args, **kwargs)


class TipoRecurso(ModeloBase):
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Tipo de recurso'
        verbose_name_plural = u'Tipos de recursos'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(TipoRecurso, self).save(*args, **kwargs)


class UnidadMedidaPresupuesto(ModeloBase):
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Unidad de medida de recurso'
        verbose_name_plural = u'Unidades de medida de recursos'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(UnidadMedidaPresupuesto, self).save(*args, **kwargs)


class AnexoRecurso(ModeloBase):
    tipoanexo = models.IntegerField(choices=TIPO_ANEXOS_RECURSOS, default=1)
    descripcion = models.TextField(default="", verbose_name=u"Descripci√≥n")
    unidadmedida = models.ForeignKey(UnidadMedidaPresupuesto, blank=True, null=True, on_delete=models.CASCADE)
    costomaquinaria = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Costo maquinaria")
    costosalario = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Costo salario")
    costomateriale = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Costo materiale")

    def __str__(self):
        return u"%s" % self.descripcion

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if extra:
            return eval('AnexoRecurso.objects.filter(descripcion__icontains="%s").filter(%s).distinct()[:%s]' % (q, extra, limit))
        return AnexoRecurso.objects.filter(descripcion__icontains=q, status=True)[:limit]

    def flexbox_repr(self):
        return "%s" % self.descripcion

    def flexbox_alias(self):
        return [self.id, self.descripcion, self.tipoanexo,
                str(Decimal(self.costomaquinaria).quantize(Decimal('.0001'))),
                str(Decimal(self.costosalario).quantize(Decimal('.0001'))),
                str(Decimal(self.costomateriale).quantize(Decimal('.0001')))]

    def rep_tipoanexo(self):
        return TIPO_ANEXOS_RECURSOS[self.tipoanexo - 1][1]

    class Meta:
        verbose_name = u'Anexo Presupuesto'
        verbose_name_plural = u'Anexos Presupuestos'
        ordering = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(AnexoRecurso, self).save(*args, **kwargs)


class NomencladorPresupuesto(ModeloBase):
    descripcion = models.TextField(default="", verbose_name=u"Descripci√≥n")
    unidadmedida = models.ForeignKey(UnidadMedidaPresupuesto, on_delete=models.CASCADE)
    costoequipos = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo equipos")
    costosmanoobra = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo mano de obra")
    costomateriales = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo materiales")
    costotransporte = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo transporte")
    costootros = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo otros")
    costototal = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo total")

    def __str__(self):
        return u"%s" % self.descripcion

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return NomencladorPresupuesto.objects.filter(descripcion__icontains=q, status=True).distinct()[:limit]

    def flexbox_repr(self):
        return "%s - %s" % (self.descripcion, self.unidadmedida.descripcion)

    def flexbox_alias(self):
        return [self.id, self.descripcion, self.unidadmedida.descripcion]

    class Meta:
        verbose_name = u'Nomenclador presupuesto'
        verbose_name_plural = u'Nomencladores presupuestos'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def actualizar_recurso(self):
        self.costootros = null_to_decimal(
            self.detallenomenclador_set.filter(tiporecurso=1).aggregate(valor=Sum('costoreferencia'))['valor'], 2)
        self.costoequipos = null_to_decimal(
            self.detallenomenclador_set.filter(tiporecurso=2).aggregate(valor=Sum('costoreferencia'))['valor'], 2)
        self.costosmanoobra = null_to_decimal(
            self.detallenomenclador_set.filter(tiporecurso=3).aggregate(valor=Sum('costoreferencia'))['valor'], 2)
        self.costomateriales = null_to_decimal(
            self.detallenomenclador_set.filter(tiporecurso=4).aggregate(valor=Sum('costoreferencia'))['valor'], 2)
        self.costotransporte = null_to_decimal(
            self.detallenomenclador_set.filter(tiporecurso=5).aggregate(valor=Sum('costoreferencia'))['valor'], 2)
        self.costototal = self.costootros + self.costoequipos + self.costosmanoobra + self.costomateriales + self.costotransporte
        self.save()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(NomencladorPresupuesto, self).save(*args, **kwargs)


class DetalleNomenclador(ModeloBase):
    nomencladorpresupuesto = models.ForeignKey(NomencladorPresupuesto, on_delete=models.CASCADE)
    tiporecurso = models.IntegerField(choices=TIPO_ACTIVIDAD_PRESUPUESTO, default=1)
    descripcion = models.TextField(default="", verbose_name=u"Descripci√≥n")
    unidadmedida = models.ForeignKey(UnidadMedidaPresupuesto, blank=True, null=True, on_delete=models.CASCADE)
    cantidadreferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                             verbose_name=u"Cantidad referencial")
    preciomaterialunitario = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                                 verbose_name=u"Precio unitario material")
    tarifareferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                           verbose_name=u"Tarifa referencial")
    jornadareferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                            verbose_name=u"Jornada referencial")
    costohorareferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo hora")
    rendimientoreferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Rendimiento")
    otroindirecto = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Otro indirecto")
    costoreferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo referencial")

    def __str__(self):
        return u"%s" % self.descripcion

    def rep_tiporecurso(self):
        return TIPO_ACTIVIDAD_PRESUPUESTO[self.tiporecurso - 1][1]

    class Meta:
        verbose_name = u'Detalle nomenclador presupuesto'
        verbose_name_plural = u'Detalles nomencladores presupuestos'
        ordering = ('descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(DetalleNomenclador, self).save(*args, **kwargs)


class ActividadPresupuestoObra(ModeloBase):
    presupuestoobra = models.ForeignKey(PresupuestoObra, on_delete=models.CASCADE)
    descripcion = models.TextField(default="", verbose_name=u"Descripci√≥n")
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Valor")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Actividad de presupuesto'
        verbose_name_plural = u'Actividades de presupuestos'
        ordering = ('descripcion',)

    def actualizar_actividad(self):
        self.valor = null_to_decimal(self.grupoactividadpresupuestobra_set.aggregate(total=Sum('valor'))['total'], 2)
        self.save()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(ActividadPresupuestoObra, self).save(*args, **kwargs)


class GrupoActividadPresupuestObra(ModeloBase):
    actividadpresupuestoobra = models.ForeignKey(ActividadPresupuestoObra, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=150, default="", verbose_name=u"Descripci√≥n")
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Valor")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Grupo de actividad de presupuesto'
        verbose_name_plural = u'Grupos de actividades de presupuestos'
        ordering = ('descripcion',)

    def actualizar_grupo_presupuesto(self):
        self.valor = null_to_decimal(self.recursoactividadpresupuestobra_set.aggregate(total=Sum('valor'))['total'], 2)
        self.save()

    def actividades(self):
        return

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(GrupoActividadPresupuestObra, self).save(*args, **kwargs)


class RecursoActividadPresupuestObra(ModeloBase):
    grupoactividadpresupuestobra = models.ForeignKey(GrupoActividadPresupuestObra, on_delete=models.CASCADE)
    descripcion = models.TextField(verbose_name=u"Descripci√≥n")
    unidadmedida = models.ForeignKey(UnidadMedidaPresupuesto, on_delete=models.CASCADE)
    indirectoutilidad = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                            verbose_name=u"Indirecto utilidad")
    otroindirecto = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Otro indirecto")
    costoequipos = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo equipos")
    costosmanoobra = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo mano de obra")
    costomateriales = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo materiales")
    costotransporte = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo transporte")
    costootros = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo otros")
    costototal = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo total")
    cantidad = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Cantidad")
    cantidadsaldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Cantidad Saldo")
    preciounitario = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Precio unitario")
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Valor")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Recurso de actividad de presupuesto'
        verbose_name_plural = u'Recursos de actividades de presupuestos'
        ordering = ('descripcion',)

    def total_prgramado(self):
        return null_to_decimal(
            self.cronogramarecursoactividadpresupuestobra_set.all().aggregate(valor=Sum('valor'))['valor'], 2)

    def generar_cronograma_recurso(self):
        for mes in range(1, self.grupoactividadpresupuestobra.actividadpresupuestoobra.presupuestoobra.duracion + 1):
            if not self.cronogramarecursoactividadpresupuestobra_set.filter(mes=mes).exists():
                crono = CronogramaRecursoActividadPresupuestObra(recursoactividadpresupuestobra=self,
                                                                 mes=mes)
                crono.save()

    def actualizar_recursoactividad(self):
        self.costootros = null_to_decimal(
            self.detallerecursoactividadpresupuestoobra_set.filter(tiporecurso=1).aggregate(
                valor=Sum('costoreferencia'))['valor'], 2)
        self.costoequipos = null_to_decimal(
            self.detallerecursoactividadpresupuestoobra_set.filter(tiporecurso=2).aggregate(
                valor=Sum('costoreferencia'))['valor'], 2)
        self.costosmanoobra = null_to_decimal(
            self.detallerecursoactividadpresupuestoobra_set.filter(tiporecurso=3).aggregate(
                valor=Sum('costoreferencia'))['valor'], 2)
        self.costomateriales = null_to_decimal(
            self.detallerecursoactividadpresupuestoobra_set.filter(tiporecurso=4).aggregate(
                valor=Sum('costoreferencia'))['valor'], 2)
        self.costotransporte = null_to_decimal(
            self.detallerecursoactividadpresupuestoobra_set.filter(tiporecurso=5).aggregate(
                valor=Sum('costoreferencia'))['valor'], 2)
        self.otroindirecto = \
        self.detallerecursoactividadpresupuestoobra_set.all().aggregate(valor=Sum('otroindirecto'))['valor']
        self.costototal = self.costootros + self.costoequipos + self.costosmanoobra + self.costomateriales + self.costotransporte
        self.indirectoutilidad = Decimal(self.costototal) * Decimal(
            self.grupoactividadpresupuestobra.actividadpresupuestoobra.presupuestoobra.porcentajeindirectoutilidad / 100).quantize(
            Decimal('.0001'))
        self.preciounitario = Decimal(
            Decimal(self.costototal) + Decimal(self.indirectoutilidad) + Decimal(self.otroindirecto)).quantize(
            Decimal('.01'))
        self.valor = Decimal(self.preciounitario * self.cantidad).quantize(Decimal('.01'))
        self.save()

    def actividades(self):
        return

    def actualizar_cantidad_saldo(self):
        self.cantidadsaldo = null_to_decimal(
            self.detalleplanillapresupuestoobra_set.filter(planillapresupuestoobra__tipoplanilla=1).aggregate(
                valor=Sum('cantidadavance'))['valor'], 2)
        self.save()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.cantidadsaldo = null_to_decimal(
            self.detalleplanillapresupuestoobra_set.filter(planillapresupuestoobra__tipoplanilla=1).aggregate(
                valor=Sum('cantidadavance'))['valor'], 2)
        super(RecursoActividadPresupuestObra, self).save(*args, **kwargs)


class CronogramaRecursoActividadPresupuestObra(ModeloBase):
    recursoactividadpresupuestobra = models.ForeignKey(RecursoActividadPresupuestObra, on_delete=models.CASCADE)
    mes = models.IntegerField(default=1)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Valor")

    def __str__(self):
        return u"%s" % self.mes

    class Meta:
        verbose_name = u'Cronograma recurso de actividad de presupuesto'
        verbose_name_plural = u'Cronograma recursos de actividades de presupuestos'
        ordering = ('mes',)


class DetalleRecursoActividadPresupuestoObra(ModeloBase):
    recursoactividadpresupuestobra = models.ForeignKey(RecursoActividadPresupuestObra, on_delete=models.CASCADE)
    tiporecurso = models.IntegerField(choices=TIPO_ACTIVIDAD_PRESUPUESTO, default=1)
    descripcion = models.CharField(max_length=150, verbose_name=u"Descripci√≥n")
    unidadmedida = models.ForeignKey(UnidadMedidaPresupuesto, blank=True, null=True, on_delete=models.CASCADE)
    cantidadreferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                             verbose_name=u"Cantidad referencial")
    preciomaterialunitario = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                                 verbose_name=u"Precio unitario material")
    tarifareferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                           verbose_name=u"Tarifa referencial")
    jornadareferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                            verbose_name=u"Jornada referencial")
    costohorareferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo hora")
    rendimientoreferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Rendimiento")
    otroindirecto = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Otro indirecto")
    costoreferencia = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo referencial")

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'Detalle recurso de actividad de presupuesto'
        verbose_name_plural = u'Detalles recursos de actividades de presupuestos'
        ordering = ('descripcion',)

    def rep_tiporecurso(self):
        return TIPO_ACTIVIDAD_PRESUPUESTO[self.tiporecurso - 1][1]

    def actividades(self):
        return

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(DetalleRecursoActividadPresupuestoObra, self).save(*args, **kwargs)


class PlanillaPresupuestoObra(ModeloBase):
    presupuestoobra = models.ForeignKey(PresupuestoObra, verbose_name=u"Proyecto", on_delete=models.CASCADE)
    monto = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Monto")
    montoapagar = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Monto a Pagar")
    periodoinicio = models.DateTimeField(verbose_name=u"Periodo inicio")
    periodofin = models.DateTimeField(verbose_name=u"Periodo fin", blank=True, null=True)
    saldoanticipo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Saldo Anticipo")
    valoranticipo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Valor Anticipo")
    mesplanilla = models.IntegerField(blank=True, null=True)
    tipoplanilla = models.IntegerField(choices=TIPO_PANILLA, default=1)
    estado = models.IntegerField(default=1, choices=ESTADO_PLANILLA, verbose_name=u"Estado del presupuesto")

    def __str__(self):
        return u"%s" % self.presupuestoobra.descripcion

    class Meta:
        verbose_name = u'Planilla Presupuesto de obra'
        verbose_name_plural = u'Planillas Presupuestos de obras'
        ordering = ('periodoinicio',)

    def choice_meses(self):
        lista_meses = [(i, i) for i in range(1, self.presupuestoobra.duracion + 1)]
        return lista_meses

    def valor_planilla(self):
        return null_to_decimal(
            self.detalleplanillapresupuestoobra_set.all().aggregate(valor=Sum('costoavance'))['valor'], 2)

    def rep_estado(self):
        return ESTADO_PLANILLA[self.estado - 1][1]

    def rep_planilla(self):
        return TIPO_PANILLA[self.tipoplanilla - 1][1]

    def esta_pendiente(self):
        return self.estado == 1

    def esta_finalizada(self):
        return self.estado == 2

    def tipo_avance(self):
        return self.tipoplanilla == 1

    def tipo_complementario(self):
        return self.tipoplanilla == 2

    def contador_plantilla(self):
        return {"tot_recursos": self.cantidad_activos(), "tot_selec": self.cantidad_seleccionados(),
                "tot_recursos_pagado": self.cantidad_recursos_pagado()}

    def cantidad_activos(self):
        return self.detalleplanillapresupuestoobra_set.count()

    def cantidad_seleccionados(self):
        return self.detalleplanillapresupuestoobra_set.filter(seleccionado=True).count()

    def cantidad_recursos_pagado(self):
        return self.detalleplanillapresupuestoobra_set.filter(recursoactividadpresupuestobra__cantidadsaldo=0).count()


class DetallePlanillaPresupuestoObra(ModeloBase):
    planillapresupuestoobra = models.ForeignKey(PlanillaPresupuestoObra, on_delete=models.CASCADE)
    recursoactividadpresupuestobra = models.ForeignKey(RecursoActividadPresupuestObra, blank=True, null=True,
                                                       on_delete=models.CASCADE)
    cantidadavance = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Cantidad avance")
    porcentajeavance = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u"Porcentaje Avance")
    costoavance = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo Avance")
    cantidadanterior = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                           verbose_name=u"Cantidad Anteriot")
    porcentajeanterior = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u"Porcentaje Anterior")
    costoanterior = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo Anterior")
    cantidadacumulada = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                            verbose_name=u"Cantidad Acumulada")
    porcentajeacumulada = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u"Porcentaje Acumulada")
    costoacumulada = models.DecimalField(default=0, max_digits=30, decimal_places=4, verbose_name=u"Costo Acumulada")
    extra = models.CharField(max_length=300, verbose_name=u"Recurso Extra")
    preciounitarioextra = models.DecimalField(default=0, max_digits=30, decimal_places=4,
                                              verbose_name=u"Precio Unitario Extra")
    seleccionado = models.BooleanField(default=False, verbose_name=u"Seleccionado para plantilla")

    def __str__(self):
        return u"%s" % self.recursoactividadpresupuestobra

    class Meta:
        verbose_name = u'Detalle planilla de presupuesto'
        verbose_name_plural = u'Detalles planillas de presupuestos'
        ordering = ('planillapresupuestoobra',)

    def cantidad_actual(self):
        return null_to_decimal(DetallePlanillaPresupuestoObra.objects.filter(
            planillapresupuestoobra__presupuestoobra=self.planillapresupuestoobra.presupuestoobra,
            recursoactividadpresupuestobra=self.recursoactividadpresupuestobra, planillapresupuestoobra__tipoplanilla=1,
            planillapresupuestoobra__estado=2).distinct().aggregate(cantidad=Sum('cantidadavance'))['cantidad'], 2)

    def save(self, *args, **kwargs):
        self.extra = self.extra.upper()
        super(DetallePlanillaPresupuestoObra, self).save(*args, **kwargs)


# Modulo de Perfil Optimo de desempe√ëo
class PodPeriodo(ModeloBase):
    anio = models.IntegerField(default=0, verbose_name=u"A√±o a evaluar")
    descripcion = models.CharField(max_length=150, default="", verbose_name=u"Descripci√≥n")
    inicio = models.DateField(blank=True, null=True, verbose_name=u"Inicio de evaluacion")
    fin = models.DateField(blank=True, null=True, verbose_name=u"Fin de evaluacion")
    iniciopod = models.DateField(blank=True, null=True, verbose_name=u"Inicio POD")
    finpod = models.DateField(blank=True, null=True, verbose_name=u"Fin POD")
    inicioeval = models.DateField(blank=True, null=True, verbose_name=u"Inicio eval")
    fineval = models.DateField(blank=True, null=True, verbose_name=u"Fin eval")
    publicacion = models.DateField(blank=True, null=True, verbose_name=u"Publicacion")
    archivo = models.FileField(upload_to='Pod/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')
    metanotae = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Nota Externo")
    metaobservacione = models.CharField(max_length=500, verbose_name=u"Observacion Externo", blank=True, null=True)
    metaarchivoe = models.FileField(upload_to='Pod/meta', blank=True, null=True, verbose_name=u'Archivo Externo')

    def __str__(self):
        return u"%s" % self.descripcion

    class Meta:
        verbose_name = u'POD Periodo'
        verbose_name_plural = u'POD Periodos'
        ordering = ('-anio',)
        unique_together = ('descripcion',)

    def factores(self):
        if PodFactor.objects.filter(podevaluaciondetcali__podevaluaciondetrecord__podevaluaciondet__podperiodo=self,
                                    podevaluaciondetcali__podevaluaciondetrecord__podevaluaciondet__podperiodo__status=True,
                                    status=True, podevaluaciondetcali__podevaluaciondetrecord__status=True,
                                    podevaluaciondetcali__podfactor__tipofactor=1).exists():
            return PodFactor.objects.filter(
                podevaluaciondetcali__podevaluaciondetrecord__podevaluaciondet__podperiodo=self,
                podevaluaciondetcali__podevaluaciondetrecord__podevaluaciondet__podperiodo__status=True, status=True,
                podevaluaciondetcali__podevaluaciondetrecord__status=True,
                podevaluaciondetcali__podfactor__tipofactor=1).distinct().order_by("-id")

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(PodPeriodo, self).save(*args, **kwargs)


TIPO_FACTOR = (
    (1, u"(+)"),
    (2, u"(-)"),
    (3, u"(!)"),
)


class PodFactor(ModeloBase):
    descripcion = models.CharField(max_length=150, default="", verbose_name=u"Descripci√≥n")
    minimo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Minimo")
    maximo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Maximo")
    tipofactor = models.IntegerField(default=1, choices=TIPO_FACTOR, verbose_name=u"Tipo Factor")

    def __str__(self):
        return u"%s (%s)" % (self.descripcion, "+" if self.tipofactor == 1 else "-" if self.tipofactor == 2 else "!")

    class Meta:
        verbose_name = u'POD Factor'
        verbose_name_plural = u'POD Factores'
        ordering = ('descripcion',)
        unique_together = ('descripcion',)

    def rep_tipo(self):
        return TIPO_FACTOR[self.tipofactor - 1][1]

    def en_uso(self):
        return self.podperidofactor_set.exists()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(PodFactor, self).save(*args, **kwargs)


class PodPeridoFactor(ModeloBase):
    podperiodo = models.ForeignKey(PodPeriodo, on_delete=models.CASCADE)
    podfactor = models.ForeignKey(PodFactor, on_delete=models.CASCADE)
    orden = models.IntegerField(default=0, verbose_name=u"Orden")
    minimo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Minimo")
    maximo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Maximo")

    def __str__(self):
        return u"%s - %s" % (self.podperiodo, self.podfactor)

    def calificacion(self, record):
        cali = 0
        if record:
            if PodEvaluacionDetCali.objects.filter(podfactor=self.podfactor, podevaluaciondetrecord=record,
                                                   status=True).exists():
                cali = PodEvaluacionDetCali.objects.get(podfactor=self.podfactor, podevaluaciondetrecord=record,
                                                        status=True).puntaje
        return cali

    class Meta:
        verbose_name = u'POD Periodo Factor'
        verbose_name_plural = u'POD Periodo Factores'
        ordering = ('podperiodo', 'podfactor')

    def save(self, *args, **kwargs):
        super(PodPeridoFactor, self).save(*args, **kwargs)


ESTADO_POD = (
    (1, u"PROCESO"),
    (2, u"PENDIENTE DEL CORREO"),
    (3, u"ACEPTADO"),
    (4, u"RECHAZADO"),
    (5, u"REVISION"),
)


class PodEvaluacion(ModeloBase):
    podperiodo = models.ForeignKey(PodPeriodo, on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)
    evaluador = models.ForeignKey('sga.Persona', verbose_name=u'Evaluador', on_delete=models.CASCADE)
    estadopodmeta = models.IntegerField(default=1, choices=ESTADO_POD, verbose_name=u"Estado POD Meta")
    estadoevameta = models.IntegerField(default=1, choices=ESTADO_POD, verbose_name=u"Estado Eva Meta")
    metanotai = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Nota Interno")
    metaobservacioni = models.CharField(max_length=500, verbose_name=u"Observacion Interno", blank=True, null=True)
    metaarchivoi = models.FileField(upload_to='Pod/meta', blank=True, null=True, verbose_name=u'Archivo Interno')

    def __str__(self):
        return u"%s - %s - %s" % (self.podperiodo, self.departamento, self.evaluador)

    def puede_ingresar_pod_meta(self):
        if self.estadopodmeta == 1 or self.estadopodmeta == 4:
            return self.podperiodo.iniciopod <= datetime.now().date() <= self.podperiodo.finpod
        return False

    def puede_ingresar_eva_meta(self):
        if self.estadoevameta == 1 or self.estadoevameta == 4:
            return self.podperiodo.inicioeval <= datetime.now().date() <= self.podperiodo.fineval
        return False

    def puede_mod_pod_meta(self):
        if self.estadopodmeta == 5:
            return self.podperiodo.iniciopod <= datetime.now().date() <= self.podperiodo.finpod
        return False

    def puede_mod_eva_meta(self):
        if self.estadoevameta == 5:
            return self.podperiodo.inicioeval <= datetime.now().date() <= self.podperiodo.fineval
        return False

    def puede_ingresar_pod_meta_adm(self):
        if self.estadopodmeta == 1 or self.estadopodmeta == 3 or self.estadopodmeta == 4:
            return True
        return False

    def puede_ingresar_eva_meta_adm(self):
        if self.estadoevameta == 1 or self.estadoevameta == 3 or self.estadoevameta == 4:
            return True
        return False

    class Meta:
        verbose_name = u'POD Evaluacion'
        verbose_name_plural = u'POD Evaluaciones'
        ordering = ('departamento', 'evaluador')

    def save(self, *args, **kwargs):
        self.metaobservacioni = self.metaobservacioni.upper().strip() if self.metaobservacioni else None
        super(PodEvaluacion, self).save(*args, **kwargs)


TIPO_EVAL = (
    (1, u"EVALUACI√ìN"),
    (2, u"PERIODO PRUEBA"),
)


class PodEvaluacionDet(ModeloBase):
    from django.contrib.auth.models import User
    evaluacion = models.ForeignKey(PodEvaluacion, blank=True, null=True, verbose_name=u'Evaluaci√≥n cabecera',
                                   on_delete=models.CASCADE)
    podperiodo = models.ForeignKey(PodPeriodo, on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)
    evaluado = models.ForeignKey('sga.Persona', verbose_name=u'Evaluado', on_delete=models.CASCADE)
    inicio = models.DateField(blank=True, null=True, verbose_name=u"Inicio de evaluacion")
    fin = models.DateField(blank=True, null=True, verbose_name=u"Fin de evaluacion")
    iniciopod = models.DateField(blank=True, null=True, verbose_name=u"Inicio POD")
    finpod = models.DateField(blank=True, null=True, verbose_name=u"Fin POD")
    inicioeval = models.DateField(blank=True, null=True, verbose_name=u"Inicio eval")
    fineval = models.DateField(blank=True, null=True, verbose_name=u"Fin eval")
    totaleva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Maximo")
    estadopod = models.IntegerField(default=1, choices=ESTADO_POD, verbose_name=u"Estado POD")
    estadoeva = models.IntegerField(default=1, choices=ESTADO_POD, verbose_name=u"Estado Eva")
    # estadopodmeta = models.IntegerField(default=1, choices=ESTADO_POD, verbose_name=u"Estado POD Meta")
    # estadoevameta = models.IntegerField(default=1, choices=ESTADO_POD, verbose_name=u"Estado Eva Meta")
    aprobado = models.BooleanField(default=False, verbose_name=u'Aprobado')
    regimenlaboral = models.ForeignKey(RegimenLaboral, blank=True, null=True, default=None,
                                       verbose_name=u"R√©gimen Laboral", on_delete=models.CASCADE)
    modalidadlaboral = models.ForeignKey(ModalidadLaboral, blank=True, null=True, default=None,
                                         verbose_name=u"Modalidad Laboral", on_delete=models.CASCADE)
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, blank=True, null=True, default=None,
                                           verbose_name=u"Denominaci√≥n Puesto", on_delete=models.CASCADE)
    unidadorganica = models.ForeignKey(Departamento, blank=True, null=True, default=None, related_name='unidadorganica',
                                       verbose_name=u"Unidad Org√°nica", on_delete=models.CASCADE)
    tipo = models.IntegerField(default=1, choices=TIPO_EVAL, verbose_name=u"tipo de evaluaci√≥n prueba/normal")

    def __str__(self):
        return u"%s - %s - %s" % (self.podperiodo, self.departamento, self.evaluado)

    def director(self):
        director = None
        if PodEvaluacion.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo,
                                        status=True).exists():
            director = \
            PodEvaluacion.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo, status=True)[0]
        return director

    def puede_ingresar_pod(self):
        if self.estadopod == 1 or self.estadopod == 4:
            return self.iniciopod <= datetime.now().date() <= self.finpod
        return False

    def puede_ingresar_eva(self):
        if self.estadoeva == 1 or self.estadoeva == 4:
            return self.inicioeval <= datetime.now().date() <= self.fineval
        return False

    def puede_ingresar_pod_adm(self):
        if self.estadopod == 1 or self.estadopod == 3 or self.estadopod == 4:
            return True
        return False

    def puede_ingresar_eva_adm(self):
        if self.estadoeva == 1 or self.estadoeva == 3 or self.estadoeva == 4:
            return True
        return False

    def puede_mod_pod(self):
        if self.estadopod == 5:
            return self.iniciopod <= datetime.now().date() <= self.finpod
        return False

    def puede_mod_eva(self):
        if self.estadoeva == 5:
            return self.inicioeval <= datetime.now().date() <= self.fineval
        return False

    def en_uso(self):
        return self.podevaluaciondetrecord_set.exists()

    def lista_detalles(self):
        lista = []
        cantidad_meses = 0
        ok = 0
        for m in range(1, 13):
            data = PodEvaluacionDet.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo,
                                                   evaluado=self.evaluado, status=True, inicio__month=m).order_by(
                "inicio")
            if data.exists():
                mes_inicio = data[0].inicio.month
                mes_fin = data[0].fin.month
                cantidad_meses = mes_fin - mes_inicio
                ok = 1
                lista.append((data[0].id, data[0].inicio, data[0].fin, cantidad_meses + 1, ok, data[0]))
            else:
                if not lista or cantidad_meses == 0:
                    lista.append((0, '-', '-', 1, ok, []))
                else:
                    cantidad_meses -= 1
        return lista

    def ultimo_record_pod(self):
        if self.podevaluaciondetrecord_set.filter(status=True, tipoformulacio=1).exists():
            return self.podevaluaciondetrecord_set.filter(status=True, tipoformulacio=1).order_by("-id")[0]
        return []

    def ultimo_record_eva(self):
        if self.podevaluaciondetrecord_set.filter(status=True, tipoformulacio=2).exists():
            return self.podevaluaciondetrecord_set.filter(status=True, tipoformulacio=2).order_by("-id")[0]
        return []

    def podevaluacionid(self):
        if PodEvaluacion.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo,
                                        status=True).exists():
            return \
            PodEvaluacion.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo, status=True)[0].id
        else:
            return 0

    def podevaluacionestadopodmeta(self):
        if PodEvaluacion.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo,
                                        status=True).exists():
            return \
            PodEvaluacion.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo, status=True)[
                0].estadopodmeta
        else:
            return 0

    def podevaluacionestadoevameta(self):
        if PodEvaluacion.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo,
                                        status=True).exists():
            return \
            PodEvaluacion.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo, status=True)[
                0].estadoevameta
        else:
            return 0

    def detallerecord(self):
        if PodEvaluacionDetCali.objects.filter(podevaluaciondetrecord__estado=3,
                                               podevaluaciondetrecord__podevaluaciondet=self, status=True,
                                               podevaluaciondetrecord__status=True, podfactor__tipofactor=1).exists():
            return PodEvaluacionDetCali.objects.filter(podevaluaciondetrecord__estado=3,
                                                       podevaluaciondetrecord__podevaluaciondet=self, status=True,
                                                       podevaluaciondetrecord__status=True,
                                                       podfactor__tipofactor=1).order_by("-podfactor__id")
        return []

    def detallerecordsanciones(self):
        if PodEvaluacionDetCali.objects.filter(podevaluaciondetrecord__estado=3,
                                               podevaluaciondetrecord__podevaluaciondet=self, status=True,
                                               podevaluaciondetrecord__status=True, podfactor__tipofactor=2).exists():
            return PodEvaluacionDetCali.objects.filter(podevaluaciondetrecord__estado=3,
                                                       podevaluaciondetrecord__podevaluaciondet=self, status=True,
                                                       podevaluaciondetrecord__status=True,
                                                       podfactor__tipofactor=2).order_by("-id")
        return []

    def notametainterna(self):
        if PodEvaluacionDetRecordMeta.objects.filter(podevaluacion__podperiodo=self.podperiodo,
                                                     podevaluacion__departamento=self.departamento, status=True,
                                                     tipoformulacio=2, estado=3).exists():
            return null_to_decimal(PodEvaluacionDetRecordMeta.objects.filter(podevaluacion__podperiodo=self.podperiodo,
                                                                             podevaluacion__departamento=self.departamento,
                                                                             status=True, tipoformulacio=2, estado=3)[
                                       0].puntaje, 2)
        return null_to_decimal(0, 2)

    def notainterna(self):
        if PodEvaluacion.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo,
                                        status=True).exists():
            return \
            PodEvaluacion.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo, status=True)[
                0].metanotai
        return null_to_decimal(0, 2)

    def notaexterna(self):
        return null_to_decimal(self.podperiodo.metanotae, 2)

    def notapunto1(self):
        if PodEvaluacionDetRecordMeta.objects.filter(podevaluacion__podperiodo=self.podperiodo,
                                                     podevaluacion__departamento=self.departamento, status=True,
                                                     tipoformulacio=2, estado=3).exists():
            return null_to_decimal((null_to_decimal(
                PodEvaluacionDetRecordMeta.objects.filter(podevaluacion__podperiodo=self.podperiodo,
                                                          podevaluacion__departamento=self.departamento, status=True,
                                                          tipoformulacio=2, estado=3)[0].puntaje, 2) * 0.35), 2)
        return null_to_decimal(0, 2)

    def notapunto2(self):
        if PodEvaluacionDetCali.objects.filter(podevaluaciondetrecord__podevaluaciondet=self, status=True,
                                               podevaluaciondetrecord__status=True, podfactor__tipofactor=1,
                                               podevaluaciondetrecord__estado=3).exists():
            return null_to_decimal((null_to_decimal(
                PodEvaluacionDetCali.objects.filter(podevaluaciondetrecord__podevaluaciondet=self, status=True,
                                                    podevaluaciondetrecord__status=True, podfactor__tipofactor=1,
                                                    podevaluaciondetrecord__estado=3).aggregate(nota=Sum('puntaje'))[
                    'nota'], 2) * 0.30), 2)
        return null_to_decimal(0, 2)

    def notapunto3(self):
        return null_to_decimal((null_to_decimal(self.podperiodo.metanotae, 2) * 0.20), 2)

    def notapunto4(self):
        if PodEvaluacion.objects.filter(departamento=self.departamento, podperiodo=self.podperiodo,
                                        status=True).exists():
            return null_to_decimal((null_to_decimal((PodEvaluacion.objects.filter(departamento=self.departamento,
                                                                                  podperiodo=self.podperiodo,
                                                                                  status=True)[0].metanotai),
                                                    2) * 0.15), 2)
        return null_to_decimal(0, 2)

    def notapunto5(self):
        if PodEvaluacionDetCali.objects.filter(podevaluaciondetrecord__podevaluaciondet=self, status=True,
                                               podevaluaciondetrecord__status=True, podfactor__tipofactor=2).exists():
            return null_to_decimal(
                PodEvaluacionDetCali.objects.filter(podevaluaciondetrecord__podevaluaciondet=self, status=True,
                                                    podevaluaciondetrecord__status=True,
                                                    podfactor__tipofactor=2).aggregate(nota=Sum('puntaje'))['nota'], 2)
        return null_to_decimal(0, 2)

    def sumatotal(self):
        return null_to_decimal(
            (self.notapunto1() + self.notapunto2() + self.notapunto3() + self.notapunto4() - self.notapunto5()), 2)

    def resultado(self):
        total = self.sumatotal()
        if total >= 95:
            return "EXCELENTE"
        if total >= 90:
            return "MUY BUENO"
        if total >= 80:
            return "SATISFACTORIO"
        if total >= 70:
            return "REGULAR"
        return "INSUFICIENTE"

    def actualiza_campos_distributivo(self, request):
        self.regimenlaboral = self.evaluado.mis_regimen_actuales2()
        self.modalidadlaboral = self.evaluado.mis_modalidad_actuales2()
        self.denominacionpuesto = self.evaluado.mis_cargos_actuales2()
        self.unidadorganica = self.evaluado.mis_unidad_actuales2()
        self.save(request)


TIPO_POD = (
    (1, u"POD"),
    (2, u"EVAL"),
)


# class PodProductos(ModeloBase):
#     nombre = models.CharField(default='', max_length=900, verbose_name=u"Descripci√≥n")
#
#     def __str__(self):
#         return u'%s' % self.nombre
#
#     class Meta:
#         verbose_name = u"Producto POD"
#         verbose_name_plural = u"Productos POD"
#         ordering = ['nombre']
#
#     def save(self, *args, **kwargs):
#         self.nombre = self.nombre.upper().strip()
#         super(PodProductos, self).save(*args, **kwargs)

class PodEvaluacionDetRecord(ModeloBase):
    podevaluaciondet = models.ForeignKey(PodEvaluacionDet, on_delete=models.CASCADE)
    aprobador = models.ForeignKey('sga.Persona', verbose_name=u'Aprobador', blank=True, null=True,
                                  on_delete=models.CASCADE)
    observacionenvia = models.CharField(max_length=1000, verbose_name=u"Observacion Envia", blank=True, null=True)
    observacionaprobador = models.CharField(max_length=1000, verbose_name=u"Observacion Aprobador", blank=True,
                                            null=True)
    fechaestado = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Estado")
    estado = models.IntegerField(default=1, choices=ESTADO_POD, verbose_name=u"Estado POD")
    tipoformulacio = models.IntegerField(default=1, choices=TIPO_POD, verbose_name=u"Tipo POD")
    puntaje = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Puntaje")
    misionpuesto = models.CharField(max_length=500, verbose_name=u"Misi√≥n del Puesto", blank=True, null=True)
    observacioncrea = models.CharField(max_length=500, verbose_name=u"Observacion Crea", blank=True, null=True)
    notifica = models.ForeignKey('sga.Persona', verbose_name=u'Notifica', related_name="notifica_set", blank=True,
                                 null=True, on_delete=models.CASCADE)
    notificado = models.BooleanField(default=False, verbose_name=u'Notifica')
    fechanotifica = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Notifica")
    archivo = models.FileField(upload_to='Pod/pdf', blank=True, null=True, verbose_name=u'Archivo')

    def __str__(self):
        return u"%s - %s - %s" % (self.id, self.observacionenvia, self.tipoformulacio)

    def archivo_existe(self):
        folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'Pod', 'pdf', ''))
        arch = folder + self.archivo.url.split("/")[4]
        return os.path.isfile(arch)

    def save(self, *args, **kwargs):
        self.observacionaprobador = self.observacionaprobador.upper().strip() if self.observacionaprobador else None
        self.observacioncrea = self.observacioncrea.upper().strip() if self.observacioncrea else None
        self.observacionenvia = self.observacionenvia.upper().strip() if self.observacionenvia else None
        super(PodEvaluacionDetRecord, self).save(*args, **kwargs)


class PodEvaluacionDetRecordMeta(ModeloBase):
    podevaluacion = models.ForeignKey(PodEvaluacion, on_delete=models.CASCADE)
    aprobador = models.ForeignKey('sga.Persona', verbose_name=u'Aprobador', blank=True, null=True,
                                  on_delete=models.CASCADE)
    observacionenvia = models.CharField(max_length=1000, verbose_name=u"Observacion Envia", blank=True, null=True)
    observacionaprobador = models.CharField(max_length=1000, verbose_name=u"Observacion Aprobador", blank=True,
                                            null=True)
    fechaestado = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Estado")
    estado = models.IntegerField(default=1, choices=ESTADO_POD, verbose_name=u"Estado POD")
    tipoformulacio = models.IntegerField(default=1, choices=TIPO_POD, verbose_name=u"Tipo POD")
    puntaje = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Puntaje")
    observacioncrea = models.CharField(max_length=500, verbose_name=u"Observacion Crea", blank=True, null=True)
    notifica = models.ForeignKey('sga.Persona', verbose_name=u'Notifica', related_name="notifica_meta_set", blank=True,
                                 null=True, on_delete=models.CASCADE)
    notificado = models.BooleanField(default=False, verbose_name=u'Notifica')
    fechanotifica = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Notifica")
    archivo = models.FileField(upload_to='Meta/pdf', blank=True, null=True, verbose_name=u'Archivo')

    def __str__(self):
        return u"%s - %s - %s" % (self.id, self.observacionenvia, self.tipoformulacio)

    def archivo_existe(self):
        folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'Meta', 'pdf', ''))
        arch = folder + self.archivo.url.split("/")[4]
        return os.path.isfile(arch)

    def save(self, *args, **kwargs):
        self.observacionaprobador = self.observacionaprobador.upper().strip() if self.observacionaprobador else None
        self.observacioncrea = self.observacioncrea.upper().strip() if self.observacioncrea else None
        self.observacionenvia = self.observacionenvia.upper().strip() if self.observacionenvia else None
        super(PodEvaluacionDetRecordMeta, self).save(*args, **kwargs)


class PodEvaluacionMeta(ModeloBase):
    # producto = models.ForeignKey('sagest.PodProductos', blank=True, null=True, verbose_name=u"Producto/Servicios")
    evaluacion = models.ForeignKey('sagest.PodEvaluacion', blank=True, null=True, verbose_name=u"Evaluaci√≥n",
                                   on_delete=models.CASCADE)
    producto = models.ForeignKey('sagest.ProductoServicioTh', blank=True, null=True, verbose_name=u"Producto/Servicios",
                                 on_delete=models.CASCADE)
    indicador = models.CharField(default='', max_length=200, verbose_name=u"Indicador")
    mproyectada = models.CharField(default='', max_length=200, verbose_name=u"Meta Proyectada")
    mcumplida = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Meta Cumplida')
    porcentajecumplimiento = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'Porcentaje Cumplimiento')
    observacion = models.TextField(default='', verbose_name=u"Observaci√≥n")

    def __str__(self):
        return u"%s - %s - %s" % (self.producto, self.indicador, self.porcentajecumplimiento)

    def save(self, *args, **kwargs):
        self.indicador = self.indicador.upper()
        self.mproyectada = self.mproyectada.upper()
        self.observacion = self.observacion.upper()
        super(PodEvaluacionMeta, self).save(*args, **kwargs)


class PodEvaluacionRelacionMeta(ModeloBase):
    evaluacion = models.ForeignKey(PodEvaluacionDetRecordMeta, verbose_name=u"Evaluacion Meta",
                                   on_delete=models.CASCADE)
    meta = models.ForeignKey(PodEvaluacionMeta, verbose_name=u"Metas", on_delete=models.CASCADE)


TIPO_COMPETENCIA = (
    (1, u"COMPETENCIA T√âCNICA"),
    (2, u"COMPETENCIA CONDUCTUAL"),
)


# No usar estas tablas, luego de analizar y avanzar en perfiles de puesto se determin√≥ que no sirve este modelo.
# Los modelos correspondientes se encuentran arriba.
class PodDiccionarioCompLaboral(ModeloBase):
    tipo = models.IntegerField(default=1, choices=TIPO_COMPETENCIA, verbose_name=u"Tipo de competencia")
    denominacion = models.CharField(default='', max_length=200, verbose_name=u"Denominaci√≥n de la competencia")
    definicion = models.TextField(default='', verbose_name=u"Definici√≥n")

    def __str__(self):
        return u"%s - %s" % (self.numero, self.denominacion)

    def save(self, *args, **kwargs):
        self.denominacion = self.denominacion.upper()
        self.definicion = self.definicion.upper()
        super(PodDiccionarioCompLaboral, self).save(*args, **kwargs)

    def detalles(self):
        return PodDiccionarioCompLabRelacion.objects.filter(complaboralcab_id=self.id, status=True)


OPORTUNIDAD_POD = (
    (1, u"EN EL TIEMPO PREVISTO"),
    (2, u"DESPU√âS DEL TIEMPO PREVISTO"),
    (3, u"NO ENTREGA"),
)

CALIDAD_POD = (
    (1, u"EXCELENTE"),
    (2, u"BUENA"),
    (3, u"MALA"),
)

TIPO_RELACION_POD = (
    (1, u"INTERNA"),
    (2, u"EXTERNA"),
)

APLICA_POD = (
    (1, u"APLICA"),
    (2, u"NO APLICA"),
)
TIPO_NIVEL = (
    (1, u"ALTO"),
    (2, u"MEDIO"),
    (3, u"BAJO"),
)


class PodDiccionarioCompLaboralDet(ModeloBase):
    nivel = models.IntegerField(default=1, choices=TIPO_NIVEL, verbose_name=u"Nivel")
    compobservable = models.TextField(default='', verbose_name=u"Comportamiento Observable")


class PodDiccionarioCompLabRelacion(ModeloBase):
    complaboralcab = models.ForeignKey(PodDiccionarioCompLaboral, verbose_name=u"Campo Laboral",
                                       on_delete=models.CASCADE)
    complaboraldet = models.ForeignKey(PodDiccionarioCompLaboralDet, verbose_name=u"Campo Laboral Detalles",
                                       on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")


ESTADO_APLICACON = (
    (1, u"APLICA"),
    (2, u"NO APLICA"),
)


class PodEvaluacionDetProducto(ModeloBase):
    podevaluacion = models.ForeignKey(PodEvaluacionDet, verbose_name=u"Cabecera de evaluaci√≥n",
                                      on_delete=models.CASCADE)
    producto = models.ForeignKey('sagest.ProductoServicioTh', blank=True, null=True, verbose_name=u"Producto/Servicios",
                                 on_delete=models.CASCADE)
    productointermedio = models.ForeignKey('sagest.ProductoIntermedioTH', blank=True, null=True,
                                           verbose_name=u"Producto/Servicios", on_delete=models.CASCADE)
    metindividual = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                        verbose_name=u"Meta individual a cumplir")
    metindividualcump = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                            verbose_name=u"Meta individual cumplida")
    aplica = models.BooleanField(default=False, verbose_name=u'Aplica')
    calidad = models.IntegerField(choices=CALIDAD_POD, default=1, verbose_name=u"Oportunidad POD")
    oportunidad = models.IntegerField(choices=OPORTUNIDAD_POD, default=1, verbose_name=u"Oportunidad POD")
    observacionproducto = models.TextField(verbose_name=u"Observacion Producto", blank=True, null=True)
    puntaje = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                  verbose_name=u"Puntaje de evaluaci√≥n a conocimientos espec√≠ficos")
    observacionconocimiento = models.TextField(verbose_name=u"Observacion de conocimientos espec√≠ficos", blank=True,
                                               null=True)


# Nuevos Detalles de productos
class PodProductoEvaDet(ModeloBase):
    producto = models.ForeignKey(PodEvaluacionMeta, verbose_name=u"Evaluacion meta", on_delete=models.CASCADE)
    prointermedio = models.CharField(default='', max_length=200, verbose_name=u"Producto intermedio")
    conespe = models.CharField(default='', max_length=200, verbose_name=u"Conocimiento especifico")
    aplicacon = models.IntegerField(default=1, choices=ESTADO_APLICACON, verbose_name=u"Aplica conocimiento")


# Relaciones de POD con Productos
class PodEvaDetProductoRelacion(ModeloBase):
    podevadetcab = models.ForeignKey(PodEvaluacionDetRecord, verbose_name=u"Evaluacion POD", on_delete=models.CASCADE)
    podevametadet = models.ForeignKey(PodProductoEvaDet, verbose_name=u"Productos de Evaluacion",
                                      on_delete=models.CASCADE)


# Relacion Competencia con POD
class PodEvaDetCompLabRelacion(ModeloBase):
    podevadetcab = models.ForeignKey(PodEvaluacionDetRecord, verbose_name=u"Evaluacion POD", on_delete=models.CASCADE)
    podcomlabdet = models.ForeignKey(PodDiccionarioCompLabRelacion, verbose_name=u"Relacion de Comp Laboral",
                                     on_delete=models.CASCADE)


class PodEvaluacionDetCompetencia(ModeloBase):
    podevaluacion = models.ForeignKey(PodEvaluacionDet, verbose_name=u"Cabecera de evaluaci√≥n",
                                      on_delete=models.CASCADE)
    competencia = models.ForeignKey('sagest.CompetenciaLaboral', blank=True, null=True,
                                    verbose_name=u"Diccionario de competencia", on_delete=models.CASCADE)
    puntuacion = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Puntuaci√≥n")
    observacionconocimiento = models.TextField(verbose_name=u"Observacion de conocimientos espec√≠ficos", blank=True,
                                               null=True)


class PodEvaluacionDetRelacion(ModeloBase):
    podevaluacion = models.ForeignKey(PodEvaluacionDet, verbose_name=u"Cabecera de evaluaci√≥n",
                                      on_delete=models.CASCADE)
    tipo = models.IntegerField(choices=TIPO_RELACION_POD, verbose_name=u"Tipo de relaci√≥n POD")
    relacion = models.TextField(verbose_name=u"Descripci√≥n de la relaci√≥n", blank=True, null=True)


# Relaciones internas y externas
class PodRelIntExt(ModeloBase):
    interno = models.CharField(default='', max_length=200, verbose_name=u"Interno")
    externo = models.CharField(default='', max_length=200, verbose_name=u"Externo")


# Relacion entre Int Ext con POD
class PodEvaDetIERelacion(ModeloBase):
    podevadetcab = models.ForeignKey(PodEvaluacionDetRecord, verbose_name=u"Relacion de Comp Laboral",
                                     on_delete=models.CASCADE)
    podcomlabdet = models.ForeignKey(PodRelIntExt, verbose_name=u"Relacion Rel Interna y Externa",
                                     on_delete=models.CASCADE)


# #Los modelos correspondientes se encuentran arriba.
# class PodDiccionarioCompLaboral(ModeloBase):
#     tipo = models.IntegerField(default=1, choices=TIPO_COMPETENCIA, verbose_name=u"Tipo de competencia")
#     denominacion = models.CharField(default='', max_length=200, verbose_name=u"Denominaci√≥n de la competencia")
#     definicion = models.TextField(default='', verbose_name=u"Definici√≥n")
#
#     def __str__(self):
#         return u"%s - %s" % (self.numero, self.denominacion)
#
#
#     def save(self, *args, **kwargs):
#         self.denominacion = self.denominacion.upper()
#         self.definicion = self.definicion.upper()
#         super(PodDiccionarioCompLaboral, self).save(*args, **kwargs)
#
#     def detalles(self):
#         return PodDiccionarioCompLabRelacion.objects.filter(complaboralcab_id=self.id, status=True)
#
# TIPO_NIVEL = (
#     (1, u"ALTO"),
#     (2, u"MEDIO"),
#     (3, u"BAJO"),
# )
#
# class PodDiccionarioCompLaboralDet(ModeloBase):
#     nivel = models.IntegerField(default=1, choices=TIPO_NIVEL, verbose_name=u"Nivel")
#     compobservable = models.TextField(default='', verbose_name=u"Comportamiento Observable")
#
# class PodDiccionarioCompLabRelacion(ModeloBase):
#     complaboralcab = models.ForeignKey(PodDiccionarioCompLaboral, verbose_name=u"Campo Laboral", on_delete=models.CASCADE)
#     complaboraldet = models.ForeignKey(PodDiccionarioCompLaboralDet, verbose_name=u"Campo Laboral Detalles", on_delete=models.CASCADE)
#     numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
#

# ESTADO_APLICACON = (
#     (1, u"APLICA"),
#     (2, u"NO APLICA"),
# )
# #Nuevos Detalles de productos
# class PodProductoEvaDet(ModeloBase):
#     producto = models.ForeignKey(PodEvaluacionMeta, verbose_name=u"Evaluacion meta", on_delete=models.CASCADE)
#     prointermedio = models.CharField(default='', max_length=200, verbose_name=u"Producto intermedio")
#     conespe = models.CharField(default='', max_length=200, verbose_name=u"Conocimiento especifico")
#     aplicacon = models.IntegerField(default=1, choices=ESTADO_APLICACON, verbose_name=u"Aplica conocimiento")
#
# #Relaciones de POD con Productos
# class PodEvaDetProductoRelacion(ModeloBase):
#     podevadetcab = models.ForeignKey(PodEvaluacionDetRecord, verbose_name=u"Evaluacion POD", on_delete=models.CASCADE)
#     podevametadet = models.ForeignKey(PodProductoEvaDet, verbose_name=u"Productos de Evaluacion", on_delete=models.CASCADE)
#
# #Relacion Competencia con POD
# class PodEvaDetCompLabRelacion(ModeloBase):
#     podevadetcab = models.ForeignKey(PodEvaluacionDetRecord, verbose_name=u"Evaluacion POD", on_delete=models.CASCADE)
#     podcomlabdet = models.ForeignKey(PodDiccionarioCompLabRelacion, verbose_name=u"Relacion de Comp Laboral", on_delete=models.CASCADE)
#
# #Relaciones internas y externas
# class PodRelIntExt(ModeloBase):
#     interno = models.CharField(default='', max_length=200, verbose_name=u"Interno")
#     externo = models.CharField(default='', max_length=200, verbose_name=u"Externo")
#
# #Relacion entre Int Ext con POD
# class PodEvaDetIERelacion(ModeloBase):
#     podevadetcab = models.ForeignKey(PodEvaluacionDetRecord, verbose_name=u"Relacion de Comp Laboral", on_delete=models.CASCADE)
#     podcomlabdet = models.ForeignKey(PodRelIntExt, verbose_name=u"Relacion Rel Interna y Externa", on_delete=models.CASCADE)
#
class PodEvaluacionDetCali(ModeloBase):
    podevaluaciondetrecord = models.ForeignKey(PodEvaluacionDetRecord, on_delete=models.CASCADE)
    podfactor = models.ForeignKey(PodFactor, on_delete=models.CASCADE)
    puntaje = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Puntaje")

    def save(self, *args, **kwargs):
        super(PodEvaluacionDetCali, self).save(*args, **kwargs)


# FINANZAS
class ClienteFactura(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    identificacion = models.CharField(default='', max_length=20, verbose_name=u"Identificaci√≥n")
    tipo = models.IntegerField(choices=MY_TIPOS_IDENTIFICACION, default=1, verbose_name=u"Tipo de identificaci√≥n")
    nombre = models.CharField(default='', max_length=200, verbose_name=u"Nombre")
    email = models.CharField(default='', max_length=100, verbose_name=u"Email")
    direccion = models.TextField(default='', verbose_name=u"Direcci√≥n")
    telefono = models.CharField(default='', max_length=50, verbose_name=u"Telefono")

    def save(self, *args, **kwargs):
        self.identificacion = self.identificacion.upper().strip()
        self.nombre = self.nombre.upper().strip()
        self.direccion = self.direccion.upper().strip()
        self.telefono = self.telefono.upper().strip()
        self.email = self.email.lower().strip()
        super(ClienteFactura, self).save(*args, **kwargs)


class Banco(ModeloBase):
    nombre = models.CharField(default='', max_length=250, verbose_name=u'Nombre')
    tasaprotesto = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Banco')
    codigo = models.CharField(max_length=10, default="", verbose_name=u"C√≥digo")
    codigo_tthh = models.IntegerField(default=0, verbose_name=u"C√≥digo tthh banco")

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Banco"
        verbose_name_plural = u"Bancos"
        ordering = ['nombre']
        unique_together = ('nombre',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if extra:
            return eval('Banco.objects.filter(Q(nombre__icontains="%s")).filter(%s).distinct()[:%s]' % (
                q, extra, limit))
        return Banco.objects.filter(Q(nombre__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return u'%s' % self.nombre

    def flexbox_alias(self):
        return [self.id, self.nombre.upper()]

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        self.codigo = self.codigo.upper().strip()
        super(Banco, self).save(*args, **kwargs)


class TipoCuentaBanco(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')
    codigo = models.CharField(max_length=10, default="", verbose_name=u"C√≥digo")

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo cuenta banco"
        verbose_name_plural = u"Tipos de cuentas de banco"
        ordering = ['nombre']
        unique_together = ('nombre',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if extra:
            return eval('TipoCuentaBanco.objects.filter(Q(nombre__icontains="%s")).filter(%s).distinct()[:%s]' % (
            q, extra, limit))
        return TipoCuentaBanco.objects.filter(Q(nombre__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return u'%s' % self.nombre

    def flexbox_alias(self):
        return [self.id, self.nombre.upper()]

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        self.codigo = self.codigo.upper().strip()
        super(TipoCuentaBanco, self).save(*args, **kwargs)


class CuentaBanco(ModeloBase):
    banco = models.ForeignKey(Banco, verbose_name=u'Banco', on_delete=models.CASCADE)
    tipocuenta = models.ForeignKey(TipoCuentaBanco, verbose_name=u'Tipo cuenta banco', on_delete=models.CASCADE)
    numero = models.CharField(default='', max_length=50, verbose_name=u'Numero')
    representante = models.CharField(default='', max_length=100, verbose_name=u'Representante')
    saldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo')

    def __str__(self):
        return u'%s %s %s' % (self.banco, self.tipocuenta, self.numero)

    class Meta:
        verbose_name = u"Cuenta de banco"
        verbose_name_plural = u"Cuentas bancarias"
        ordering = ['numero']
        unique_together = ('banco', 'tipocuenta', 'numero')

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return CuentaBanco.objects.filter(numero__icontains=q).distinct()[:limit]

    def flexbox_repr(self):
        return self.banco.nombre + " - " + self.tipocuenta + " - " + self.numero

    def saldo_cuenta(self, fecha):
        if self.saldocuentabanco_set.filter(fecha=fecha).exists():
            saldo = self.saldocuentabanco_set.filter(fecha=fecha)[0]
        else:
            saldo = SaldoCuentaBanco(cuentabanco=self,
                                     fecha=fecha,
                                     saldoinicial=0)
            saldo.save()
        return saldo

    # def actualiza_saldo(self, request):
    #     self.saldo = null_to_decimal(self.detalleconciliacion_set.aggregate(valor=Sum('valor'))['valor'], 2)
    #     self.save(request)

    def total_recaudado(self, fecha):
        from sga.funciones import convertir_fecha
        if self.recaudacionbanco_set.filter(fecha=convertir_fecha(fecha)).exists():
            recaudacion = self.recaudacionbanco_set.filter(fecha=convertir_fecha(fecha))[0]
            return recaudacion.valor
        return 0

    def save(self, *args, **kwargs):
        self.representante = self.representante.upper().strip()
        super(CuentaBanco, self).save(*args, **kwargs)


class SaldoCuentaBanco(ModeloBase):
    cuentabanco = models.ForeignKey(CuentaBanco, verbose_name=u'Cuenta Banco', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha')
    saldoinicial = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo Inicial')
    saldodeposito = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo Deposito')
    saldotransferencia = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u'Saldo Transferencia Ingreso')
    saldonotacredito = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Saldo nota credito')
    saldonotadebito = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo nota debito')
    saldotransegreso = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Saldo transferencia egreso')
    saldofinal = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                     verbose_name=u'Saldo transferencia egreso')
    estado = models.IntegerField(choices=ESTADO_PROCESO, default=1, verbose_name=u'Estado Proceso')

    def __str__(self):
        return u'%s %s %s' % (self.cuentabanco, self.fecha, self.saldofinal)

    class Meta:
        verbose_name = u"Saldo Cuenta de banco"
        verbose_name_plural = u"Saldos Cuentas bancarias"
        ordering = ['id']

    def actualiza_saldo(self):
        if SaldoCuentaBanco.objects.filter(cuentabanco=self.cuentabanco, fecha__lt=self.fecha).order_by(
                '-fecha').exists():
            self.saldoinicial = \
            SaldoCuentaBanco.objects.filter(cuentabanco=self.cuentabanco, fecha__lt=self.fecha).order_by('-fecha')[
                0].saldofinal
        else:
            self.saldoinicial = 0
        self.saldodeposito = null_to_decimal(
            DetalleConciliacion.objects.filter(cuentabanco=self.cuentabanco, tipo__id=1,
                                               fecha__gte=self.fecha).aggregate(valor=Sum('valor'))['valor'], 2)
        self.saldotransferencia = null_to_decimal(
            DetalleConciliacion.objects.filter(cuentabanco=self.cuentabanco, tipo__id=2,
                                               fecha__gte=self.fecha).aggregate(valor=Sum('valor'))['valor'], 2)
        self.saldonotacredito = null_to_decimal(
            DetalleConciliacion.objects.filter(cuentabanco=self.cuentabanco, tipo__id=3,
                                               fecha__gte=self.fecha).aggregate(valor=Sum('valor'))['valor'], 2)
        self.saldonotadebito = null_to_decimal(
            DetalleConciliacion.objects.filter(cuentabanco=self.cuentabanco, tipo__id=4,
                                               fecha__gte=self.fecha).aggregate(valor=Sum('valor'))['valor'], 2)
        self.saldotransegreso = null_to_decimal(
            DetalleConciliacion.objects.filter(cuentabanco=self.cuentabanco, tipo__id=5,
                                               fecha__gte=self.fecha).aggregate(valor=Sum('valor'))['valor'], 2)
        self.saldofinal = self.saldoinicial + self.saldodeposito + self.saldonotacredito + self.saldotransferencia - self.saldonotadebito - self.saldotransegreso
        self.save()

    def actualizar_conciliacion(self):
        if SaldoCuentaBanco.objects.filter(cuentabanco=self.cuentabanco, fecha__gte=self.fecha).exists():
            for saldo in SaldoCuentaBanco.objects.filter(cuentabanco=self.cuentabanco, fecha__gte=self.fecha):
                saldo.actualiza_saldo()


class PuntoVenta(ModeloBase):
    nombreestablecimiento = models.CharField(default='', max_length=300, verbose_name=u'Nombre')
    establecimiento = models.CharField(default='', max_length=3, verbose_name=u'Establecimiento')
    puntoventa = models.CharField(default='', max_length=3, verbose_name=u'Punto de venta')
    activo = models.BooleanField(default=True, verbose_name=u'Activo')
    facturaelectronica = models.BooleanField(default=False, verbose_name=u'Factura electronica')
    imprimirfactura = models.BooleanField(default=False, verbose_name=u'Imprimir factura')
    direccion = models.CharField(default='', max_length=300, verbose_name=u'Direccion Establecimiento')

    def __str__(self):
        return u'%s' % self.nombreestablecimiento

    class Meta:
        verbose_name_plural = u"Puntos de venta"
        ordering = ['establecimiento']
        unique_together = ('establecimiento', 'puntoventa')

    def numeracion(self):
        return self.establecimiento + '-' + self.puntoventa

    def save(self, *args, **kwargs):
        self.nombreestablecimiento = self.nombreestablecimiento.upper().strip()
        self.establecimiento = self.establecimiento.upper().strip()
        self.puntoventa = self.puntoventa.upper().strip()
        super(PuntoVenta, self).save(*args, **kwargs)


class LugarRecaudacion(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')
    puntoventa = models.ForeignKey(PuntoVenta, verbose_name=u'Punto de venta', on_delete=models.CASCADE)
    activo = models.BooleanField(default=True, verbose_name=u'Activo')

    class Meta:
        verbose_name = u"Lugar de recaudaci√≥n"
        verbose_name_plural = u"Lugares de recaudaci√≥n"
        ordering = ['nombre']
        unique_together = ('persona',)

    def __str__(self):
        return u'%s - %s' % (self.nombre, self.persona)

    def esta_abierta(self):
        return SesionCaja.objects.filter(caja=self, abierta=True).exists()

    def sesion_caja(self):
        if SesionCaja.objects.filter(caja=self, abierta=True).exists():
            return SesionCaja.objects.filter(caja=self, abierta=True)[0]
        return None

    def sesion_fecha(self, fecha):
        if self.sesioncaja_set.filter(fecha=fecha).exists():
            return self.sesioncaja_set.filter(fecha=fecha)
        return None

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(LugarRecaudacion, self).save(*args, **kwargs)


class ProcesadorPagoTarjeta(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Procesador pago tarjeta"
        verbose_name_plural = u"Procesadores de pago por tarjeta"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(ProcesadorPagoTarjeta, self).save(*args, **kwargs)


class FormaDePago(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Forma de pago"
        verbose_name_plural = u"Formas de pago"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(FormaDePago, self).save(*args, **kwargs)


class TipoOtroRubro(ModeloBase):
    nombre = models.CharField(default='', max_length=300, verbose_name=u'Nombre')
    partida = models.ForeignKey(Partida, blank=True, null=True, verbose_name=u"Partida", on_delete=models.CASCADE)
    programa = models.ForeignKey(PartidaPrograma, blank=True, null=True, verbose_name=u"Programa", on_delete=models.CASCADE)
    unidad_organizacional = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Unidad Organizacional", on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    interface = models.BooleanField(default=False, verbose_name=u'Interface')
    activo = models.BooleanField(default=True, verbose_name=u'Activo')
    ivaaplicado = models.ForeignKey(IvaAplicado, verbose_name=u'Iva Aplicado', on_delete=models.CASCADE)
    nofactura = models.BooleanField(default=True, verbose_name=u'No Emitir Factura')
    exportabanco = models.BooleanField(default=False, verbose_name=u'Exporta deudas a banco')
    tiporubro = models.IntegerField(default=0, choices=TIPO_RUBRO, blank=True, null=True, verbose_name=u'Tipos de Rubros')
    moduloreprobado = models.BooleanField(default=False, verbose_name=u'M√≥dulo Reprobado maestr√≠a')
    subtiporubro = models.IntegerField(default=1, choices=SUB_TIPO_RUBRO, blank=True, null=True, verbose_name=u'Sub-tipo')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo otro rubro"
        verbose_name_plural = u"Tipos otros rubros"
        ordering = ['nombre']
        unique_together = ('nombre',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return TipoOtroRubro.objects.filter(nombre__icontains=q).distinct()[:limit]

    def flexbox_repr(self):
        return unicode(self.nombre)

    def tiene_detalle(self, anio):
        return self.tipootrorubrosaldopartida_set.filter(partidassaldo__anioejercicio__anioejercicio=anio).exists()

    def partida_saldo(self, anio):
        if self.tipootrorubrosaldopartida_set.filter(partidassaldo__anioejercicio__anioejercicio=anio).exists():
            return self.tipootrorubrosaldopartida_set.filter(partidassaldo__anioejercicio__anioejercicio=anio)[0]
        return None

    def se_usa(self):
        if self.rubro_set.exists():
            return True
        elif self.pagocalendario_set.exists():
            return True
        elif self.tipootrorubrosaldopartida_set.exists():
            return True
        return False

    def en_uso(self, anio):
        if self.rubro_set.exists():
            return True
        elif self.pagocalendario_set.exists():
            return True
        elif self.tiene_comprobante(anio):
            return True
        return False

    def tiene_comprobante(self, anio):
        if self.tiene_detalle(anio):
            tiporubro = self.tipootrorubrosaldopartida_set.filter(partidassaldo__anioejercicio__anioejercicio=anio)[0]
            return ComprobanteRecaudacion.objects.filter(
                resumencomprobantepartida__partida=tiporubro.partidassaldo).exists()
        return False

    def mi_rubro(self):
        if self.rubro_set.exists():
            return self.rubro_set.all()[0]
        return None

    # Si el curso tiene al menos un rubro creado no podr√° editar el valor del rubro - 05/2023
    # def puede_modificar_valorrubro_evento(self):
    #     eventoperiodoipec = self.capeventoperiodoipec_set
    #     # validar que no exista ni un rubro en unemi
    #     rubrosevento_unemi = eventoperiodoipec.rubro_set.values('id').filter(status=True)
    #     # Verificar que ning√∫n rubro de este evento exista en epunemi (considero tambien rubros unemi eliminados)
    #     idrubrosepunemi_all = tuple(eventoperiodoipec.rubro_set.filter(idrubroepunemi__isnull=False).values_list('idrubroepunemi', flat=True).exclude(idrubroepunemi=0))
    #     rubrosevento_epunemi = None
    #     if idrubrosepunemi_all:
    #         # consultar en epunemi si existen rubros del evento
    #         cursor = connections['epunemi'].cursor()
    #         sql = """Select id from sagest_rubro where status=TRUE AND id IN %s;""" % (str(idrubrosepunemi_all))
    #         cursor.execute(sql)
    #         rubrosevento_epunemi = cursor.fetchone()
    #         cursor.close()
    #     if rubrosevento_unemi or rubrosevento_epunemi:
    #         return False
    #     else:
    #         return True

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(TipoOtroRubro, self).save(*args, **kwargs)


class TipoOtroRubroSaldoPartida(ModeloBase):
    tipootrorubro = models.ForeignKey(TipoOtroRubro, verbose_name=u'Tipo Otro Rubro', on_delete=models.CASCADE)
    partidassaldo = models.ForeignKey(PartidasSaldo, verbose_name=u'Partida Saldo', on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.partidassaldo


class DetalleContratoRecaudacion(ModeloBase):
    contrato = models.ForeignKey(ContratoRecaudacion, verbose_name=u"Contrato", on_delete=models.CASCADE)
    rubro = models.ForeignKey(TipoOtroRubro, verbose_name=u'Iva Aplicado', on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u"Valor")
    iva = models.ForeignKey(IvaAplicado, verbose_name=u'Iva Aplicado', on_delete=models.CASCADE)
    recargo = models.BooleanField(default=True)
    porcientorecargo = models.IntegerField(default=0, verbose_name=u"Porciento recargo")


class CapPeriodoIpec(ModeloBase):
    nombre = models.CharField(max_length=500, verbose_name=u'Nombre')
    descripcion = models.CharField(max_length=1000, verbose_name=u'Descripcion')
    fechainicio = models.DateField(blank=True, null=True)
    fechafin = models.DateField(blank=True, null=True)
    archivo = models.FileField(upload_to='capacitacionIPEC/%Y/%m/%d', blank=True, null=True, verbose_name=u'Titulo')
    instructivo = models.FileField(upload_to='instructivoIPEC/%Y/%m/%d', blank=True, null=True,
                                   verbose_name=u'Instructivo')
    urlmoodle = models.CharField(default='https://aulaposgrado.unemi.edu.ec', max_length=500, verbose_name=u'url moodle')
    keymoodle = models.CharField(default='65293afed416ee1dc5dd1b137c35f03d', max_length=500, verbose_name=u'key moodle')

    def __str__(self):
        return u'%s [ %s - %s ]' % (
        self.nombre, self.fechainicio.strftime('%d-%m-%Y'), self.fechafin.strftime('%d-%m-%Y'))

    def download_link(self):
        return self.archivo.url

    def download_link_instructivo(self):
        return self.instructivo.url

    def en_uso(self):
        return self.capeventoperiodoipec_set.exists()

    def esta_activo_periodo(self):
        return True if self.fechainicio <= datetime.now().date() and self.fechafin >= datetime.now().date() else False

    def esta_cap_evento_periodo_activo(self):
        return True if self.capeventoperiodoipec_set.filter(status=True).exists() else False

    def contar_inscripcion_periodo(self):
        total = 0
        if CapEventoPeriodoIpec.objects.filter(periodo=self.id).exists():
            for evento in CapEventoPeriodoIpec.objects.filter(periodo=self.id):
                total += evento.contar_inscripcion_evento_periodo()
        return total

    def idnumber(self):
        anoini = self.fechainicio.year
        anofin = self.fechafin.year
        if anoini != anofin:
            ano = '%s-%s' % (anoini, anofin)
        else:
            ano = '%s' % anoini
        return u'PEREDCON%s-%s' % (self.id, ano)

    class Meta:
        verbose_name = u"Periodo Capacitacion IPEC"
        verbose_name_plural = u"Periodo Capacitaciones IPEC"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        super(CapPeriodoIpec, self).save(*args, **kwargs)


class CapEventoIpec(ModeloBase):
    nombre = models.CharField(max_length=500, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    def codigo(self):
        return u'PROG-%s' % self.id

    def esta_cap_evento_activo(self):
        return True if self.capeventoperiodoipec_set.filter(status=True).exists() else False

    class Meta:
        verbose_name = u"Evento Capacitaci√≥n IPEC"
        verbose_name_plural = u"Evento Capacitaci√≥n IPEC"
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(CapEventoIpec, self).save(*args, **kwargs)


class CapTurnoIpec(ModeloBase):
    turno = models.IntegerField(default=0, verbose_name=u'Turno')
    horainicio = models.TimeField(verbose_name=u'Comienza')
    horafin = models.TimeField(verbose_name=u'Termina')
    horas = models.FloatField(default=0, verbose_name=u'Horas')

    class Meta:
        verbose_name = u"Turno de clase"
        verbose_name_plural = u"Turnos de clases"
        ordering = ['horainicio']

    def __str__(self):
        return u'Turno %s [%s a %s]' % (
        str(self.turno), self.horainicio.strftime("%H:%M %p"), self.horafin.strftime("%H:%M %p"))

    def nombre_horario(self):
        return self.horainicio.strftime("%H:%M %p") + ' a ' + self.horafin.strftime("%H:%M %p")

    def save(self, *args, **kwargs):
        super(CapTurnoIpec, self).save(*args, **kwargs)


class CapEnfocadaIpec(ModeloBase):
    nombre = models.CharField(max_length=500, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Capacitaci√≥n Enfocada IPEC"
        verbose_name_plural = u"Capacitaci√≥n Enfocada IPEC"
        ordering = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(CapEnfocadaIpec, self).save(*args, **kwargs)


TIPO_REPORTE_IPEC = (
    (0, u'---------------'),
    (1, u'ASISTENCIA'),
    (2, u'PROMEDIO'),
)


class CapEventoPeriodoIpec(ModeloBase):
    from sga.models import MODALIDAD_CAPACITACION
    periodo = models.ForeignKey(CapPeriodoIpec, verbose_name=u"Capacitacion Periodo", on_delete=models.CASCADE)
    capevento = models.ForeignKey(CapEventoIpec, verbose_name=u"Evento", on_delete=models.CASCADE)
    enfoque = models.ForeignKey(CapEnfocadaIpec, verbose_name=u"Capacitacion Enfoque", on_delete=models.CASCADE)
    horas = models.IntegerField(default=0, verbose_name=u'Horas Academica')
    minasistencia = models.IntegerField(default=0, verbose_name=u'Minimo Asistencia')
    minnota = models.IntegerField(default=0, verbose_name=u'Minimo Notas')
    cupo = models.IntegerField(default=0, verbose_name=u'Cupo')
    costo = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Costo Interno")
    costoexterno = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Costo Externo")
    tipocertificacion = models.ForeignKey('sga.TipoCertificacion', blank=True, null=True,
                                          verbose_name=u"Tipo certificaci√≥n", on_delete=models.CASCADE)
    tipoparticipacion = models.ForeignKey('sga.TipoParticipacion', blank=True, null=True,
                                          verbose_name=u"Tipo participaci√≥n", on_delete=models.CASCADE)
    contextocapacitacion = models.ForeignKey('sga.ContextoCapacitacion', blank=True, null=True,
                                             verbose_name=u'Contexto capacitacion', on_delete=models.CASCADE)
    tipocapacitacion = models.ForeignKey('sga.TipoCapacitacion', blank=True, null=True,
                                         verbose_name=u"Tipo capacitaci√≥n", on_delete=models.CASCADE)
    modalidad = models.IntegerField(choices=MODALIDAD_CAPACITACION, blank=True, null=True,
                                    verbose_name=u'Modalidad Capacitacion')
    responsable = models.ForeignKey('sga.Persona', verbose_name=u"Persona", on_delete=models.CASCADE)
    aula = models.ForeignKey('sga.Aula', verbose_name=u'Aula', on_delete=models.CASCADE)
    fechainicio = models.DateField(blank=True, null=True)
    fechafin = models.DateField(blank=True, null=True)
    areaconocimiento = models.ForeignKey('sga.AreaConocimientoTitulacion', blank=True, null=True,
                                         verbose_name=u'Area de conocimiento', on_delete=models.CASCADE)
    aprobado2 = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aproba2',
                                  verbose_name=u"Aprobador2", on_delete=models.CASCADE)
    aprobado3 = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aproba3',
                                  verbose_name=u"Vicerrector Adtvo.", on_delete=models.CASCADE)
    denominacionaprobado2 = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                              related_name='denominacionaproba2',
                                              verbose_name=u"Denominacion Aprobador2", on_delete=models.CASCADE)
    denominacionaprobado3 = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                              related_name='denominacionaproba3',
                                              verbose_name=u"Denominacion Vicerrector Adtvo.", on_delete=models.CASCADE)
    observacion = models.TextField(blank=True, null=True, verbose_name=u"Observacion")
    objetivo = models.TextField(blank=True, null=True, verbose_name=u"Objetivo")
    contenido = models.TextField(blank=True, null=True, verbose_name=u"Contenido")
    visualizar = models.BooleanField(default=False, verbose_name=u"Visualizar")
    convalidar = models.BooleanField(default=False, verbose_name=u"Convalidar")
    fechainicioinscripcion = models.DateField(blank=True, null=True)
    fechafininscripcion = models.DateField(blank=True, null=True)
    tiporubro = models.ForeignKey(TipoOtroRubro, blank=True, null=True, verbose_name=u"Tipo", on_delete=models.CASCADE)
    publicarinscripcion = models.BooleanField(default=False, verbose_name=u"Incripci√≥n P√∫blica")
    fechamaxpago = models.DateField(blank=True, null=True)
    envionotaemail = models.BooleanField(default=False, verbose_name=u"Envi√≥ de nota al email")
    generarrubro = models.BooleanField(default=True, verbose_name=u"Se generan rubros")
    notificarubro = models.BooleanField(default=False, verbose_name=u"Se Notifica rubros")
    seguimientograduado = models.BooleanField(default=False, verbose_name=u"Seguimiento Graduado")
    fechacertificado = models.TextField(blank=True, null=True, verbose_name=u"Fecha certificado")
    archivo = models.FileField(upload_to='capacitcionipec', blank=True, null=True, verbose_name=u'Archivo de imagen')
    banner = models.FileField(upload_to='capacitcionipec_banner', blank=True, null=True, verbose_name=u'Banner')
    brochure = models.FileField(upload_to='brochureedcon', blank=True, null=True, verbose_name=u'Brochure')
    modeloevaludativoindividual = models.BooleanField(default=False, verbose_name=u"Modelo Evaluativo Individual?")
    mes = models.IntegerField(choices=MESES_CHOICES, blank=True, null=True, verbose_name=u'Mes de capeventoipec')
    configuraciondefirmas = models.BooleanField(default=False, verbose_name=u"Configuracion de firmas")


    def obtener_mes(self):
        if self.mes:
            meses = MESES_CHOICES[self.mes - 1][1]
            return meses
        return ''

    def obtener_facturados(self):
        try:
            cursor = connections['epunemi'].cursor()
            inscritos = self.list_inscritos()
            facturado = []
            totalfacturadoEpunemi = 0
            totalinscritofacturadoEpunemi = 0
            totalfacturadoEducacion = 0
            totalinscritofacturadoEducacion = 0
            for inscrito in inscritos:
                rubro = Rubro.objects.filter(persona=inscrito, capeventoperiodoipec=self.id,
                                             status=True).exclude(pago__factura__valida=False)
                if rubro:
                    pagado = inscrito.capinscritoipec_set.get(status=True, capeventoperiodo=self.id).pagorubrocurso()
                    if pagado:
                        totalfacturadoEducacion = totalfacturadoEducacion + (
                            inscrito.capinscritoipec_set.get(status=True,
                                                             capeventoperiodo=self.id).total_pagado_conrubro() if inscrito.capinscritoipec_set.get(
                                status=True, capeventoperiodo=self.id).total_pagado_conrubro() else 0)
                        totalinscritofacturadoEducacion = totalinscritofacturadoEducacion + 1
                    queryest = """
                            SELECT SUM(valortotal) FROM sagest_pago WHERE status=true and rubro_id=%s
                            """ % (rubro[0].idrubroepunemi)
                    cursor.execute(queryest)
                    rowest = cursor.fetchall()
                    if rowest:
                        if rowest[0][0] != None:
                            totalinscritofacturadoEpunemi = totalinscritofacturadoEpunemi + 1
                            totalfacturadoEpunemi = totalfacturadoEpunemi + int(rowest[0][0])
            facturado.append(totalinscritofacturadoEpunemi)
            facturado.append(totalfacturadoEpunemi)
            facturado.append(totalinscritofacturadoEducacion)
            facturado.append(totalfacturadoEducacion)
            return facturado
        except Exception as ex:
            pass

    def list_inscritos(self):
        rub = Rubro.objects.filter(tipo=self.tiporubro).values_list('persona__id', flat=True)
        personas = Persona.objects.filter(status=True, id__in=rub)
        return personas

    def list_inscritos_costo(self):
        listdife = []
        rub = Rubro.objects.filter(tipo=self.tiporubro, cancelado=True, capeventoperiodoipec=self, capeventoperiodoipec__capinscritoipec__formapago=1).values_list('persona__id', flat=True)
        for inscri in self.capinscritoipec_set.filter(status=True, desactivado=False, formapago=2):
            if Rubro.objects.filter(persona__id=inscri.participante.id, capeventoperiodoipec=self,
                                    status=True, cancelado=True).exclude(pago__factura__valida=False).exists():
                listdife.append(inscri.participante.id)
        return self.capinscritoipec_set.filter(Q(aplicagratuidad=True)|Q(participante__id__in=rub)|Q(participante__id__in=listdife),status=True, desactivado=False).distinct()

    def list_inscritos_sin_costo(self):
        return self.capinscritoipec_set.filter(status=True, desactivado=False).distinct()

    def list_inscritos_sin_costo_2(self):
        listdife = []
        if self.capinscritoipec_set.filter(status=True, desactivado=False, formapago=2).exists():
            for insdif in self.capinscritoipec_set.filter(status=True, desactivado=False, formapago=2):
                if insdif.total_pagado_conrubro() < insdif.capeventoperiodo.costo:
                    listdife.append(insdif.participante.id)
            return self.capinscritoipec_set.filter(status=True, desactivado=False).exclude(participante__id__in=listdife).distinct()
        else:
            return self.capinscritoipec_set.filter(status=True, desactivado=False).distinct()

    def total_inscritos(self):
        rub = Rubro.objects.filter(tipo=self.tiporubro).values_list('persona__id', flat=True)
        personas = Persona.objects.filter(status=True, id__in=rub)
        # inscritos = self.capinscritoipec_set.filter(status=True)
        return personas.count()

    def total_pagado_real(self):
        inscritos = self.capinscritoipec_set.filter(status=True)
        rubros = Rubro.objects.filter(Q(capeventoperiodoipec=self)).filter(status=True).values_list('pk', flat=True)
        total = null_to_decimal(
            Pago.objects.filter(rubro__in=rubros, status=True).aggregate(valort=Sum('valortotal'))['valort'], 2)
        return total

    def total_pagado(self):
        inscritos = self.capinscritoipec_set.filter(status=True)
        rubros = Rubro.objects.filter(Q(capeventoperiodoipec=self) | Q(tipo=self.tiporubro)).filter(
            status=True).values_list('pk', flat=True)
        total = null_to_decimal(
            Pago.objects.filter(rubro__in=rubros, status=True).aggregate(valort=Sum('valortotal'))['valort'], 2)
        return total

    def total_curso(self):
        inscritos = self.capinscritoipec_set.filter(status=True)
        # persona__in = inscritos.values_list('participante__id', flat=True
        valor = null_to_decimal(
            Rubro.objects.filter(Q(capeventoperiodoipec=self) | Q(tipo=self.tiporubro)).filter(status=True).aggregate(
                valort=Sum('valortotal'))['valort'], 2)
        return valor

    def total_curso_sininscripcion(self):
        valor = null_to_decimal(
            Rubro.objects.filter(tipo=self.tiporubro, status=True).exclude(capeventoperiodoipec=self).aggregate(
                valort=Sum('valortotal'))['valort'], 2)
        return valor

    def total_curso_coninscripcion(self):
        valor = null_to_decimal(
            Rubro.objects.filter(capeventoperiodoipec=self, status=True).aggregate(valort=Sum('valortotal'))['valort'],
            2)
        return valor

    def total_saldo_rubro(self):
        return Decimal(self.total_curso()) - Decimal(self.total_pagado())

    def vencido_a_la_fechamatricula(self):
        inscritos = self.capinscritoipec_set.filter(status=True).distinct()
        rubros = Rubro.objects.filter(Q(capeventoperiodoipec=self) | Q(tipo=self.tiporubro)).filter(cancelado=False,
                                                                                                    fechavence__lt=datetime.now().date(),
                                                                                                    status=True)
        valor_rubros = null_to_numeric(rubros.aggregate(valort=Sum('valortotal'))['valort'])
        valor_pagos = null_to_numeric(
            Pago.objects.filter(rubro__in=rubros, status=True).aggregate(valort=Sum('valortotal'))['valort'])
        return Decimal(valor_rubros) - Decimal(valor_pagos)

    def puede_inscribirse(self):
        limite = self.fechainicio - timedelta(days=2)
        return True if limite >= datetime.now().date() else False

    def __str__(self):
        obser = ""
        if self.observacion:
            obser = "-" + self.observacion
        return u'%s - Periodo:[%s] %s' % (self.capevento, self.periodo, obser)

    class Meta:
        verbose_name = u"Evento Capacitaci√≥n IPEC"
        verbose_name_plural = u"Evento Capacitaciones IPEC"
        ordering = ('fechainicio',)

    def facturatotalexiste(self):
        return self.capeventoperiodofacturatotalipec_set.filter(status=True).exists()

    def facturatotal(self):
        return self.capeventoperiodofacturatotalipec_set.filter(status=True)[0]

    def instructor_principal(self):
        if self.capinstructoripec_set.filter(status=True, instructorprincipal=True).exists():
            return self.capinstructoripec_set.filter(status=True, instructorprincipal=True)[0]
        return None

    def instructores_principal(self):
        if self.capinstructoripec_set.filter(status=True).exists():
            return self.capinstructoripec_set.filter(status=True)
        return None

    def esta_activo_evento_periodo(self):
        return True if self.fechainicio >= datetime.now().date() and datetime.now().date() <= self.fechafin else False

    def hay_cupo_inscribir(self):
        return True if self.contar_inscripcion_evento_periodo() < self.cupo else False

    def contar_inscripcion_evento_periodo(self):
        return self.capinscritoipec_set.filter(status=True).count()

    def exiten_inscritos(self):
        return self.capinscritoipec_set.filter(status=True).exists()

    def inscripcion_evento_rubro_cancelado(self):
        return self.capinscritoipec_set.filter(participante__rubro__isnull=False, participante__rubro__cancelado=True,
                                               participante__rubro__status=True,
                                               participante__rubro__capeventoperiodoipec=self, status=True).distinct(
            'participante__rubro__persona')
        # return CapInscritoIpec.objects.filter(capeventoperiodo=self, participante__rubro__isnull=False, participante__rubro__cancelado=True, participante__rubro__status=True,participante__rubro__capeventoperiodoipec=self, status=True).distinct('participante__rubro__persona')

    def contar_inscripcion_evento_rubro_cancelado(self):
        return self.inscripcion_evento_rubro_cancelado().count()

    def total_rubros_cancelados(self):
        return CapInscritoIpec.objects.filter(participante__rubro__isnull=False,
                                              participante__rubro__capeventoperiodoipec=self,
                                              participante__rubro__cancelado=True,
                                              participante__rubro__status=True).count()

    def inscripcion_evento_rubro_pendiente_o_cancelado(self):
        # return self.capinscritoipec_set.filter(participante__rubro__isnull=False, participante__rubro__status=True,participante__rubro__capeventoperiodoipec=self, status=True).distinct('participante__rubro__persona')
        return self.capinscritoipec_set.values('participante__rubro__persona').filter(participante__rubro__isnull=False,
                                                                                      participante__rubro__status=True,
                                                                                      participante__rubro__capeventoperiodoipec=self,
                                                                                      status=True).distinct()

    def contar_inscripcion_evento_rubro_pendiente_o_cancelado(self):
        return self.inscripcion_evento_rubro_pendiente_o_cancelado().count()

    def limitar_objetivo_presentacion(self):
        objetivo = self.objetivo
        if objetivo:
            if self.objetivo.__len__() > 200:
                objetivo = self.objetivo[0:200] + "..."
        return objetivo

    def limitar_observacion_presentacion(self):
        observacion = self.observacion
        if observacion:
            if self.observacion.__len__() > 200:
                observacion = self.observacion[0:200] + "..."
        return observacion

    def limitar_contenido_presentacion(self):
        contenido = self.contenido
        if contenido:
            if contenido.__len__() > 200:
                contenido = self.contenido[0:200] + "..."
        else:
            contenido = ''
        return contenido

    def clases_activas_horario(self, dia, turno):
        return CapClaseIpec.objects.filter(dia=dia, turno=turno, capeventoperiodo_id=self.id,
                                           status=True) if CapClaseIpec.objects.filter(dia=dia,
                                                                                       capeventoperiodo_id=self.id,
                                                                                       status=True).exists() else ""

    def clases_activas(self):
        return CapClaseIpec.objects.filter(
            (Q(fechainicio__lte=datetime.now().date()) & Q(fechafin__gte=datetime.now().date())),
            capeventoperiodo_id=self.id, status=True, dia=date.today().weekday() + 1).order_by('fechainicio', 'turno')

    def concatenar_facilitadores(self):
        concatenado = ""
        facilitador = self.capinstructoripec_set.filter(status=True)
        if facilitador.exists():
            for faci in facilitador:
                concatenado += faci.instructor.nombre_completo_inverso() + ","
            concatenado = concatenado[:concatenado.__len__() - 1]
        return u'%s' % concatenado

    def clases_dia(self, dia):
        return CapCabeceraAsistenciaIpec.objects.filter(clase__in=[clas for clas in
                                                                   CapClaseIpec.objects.filter(capeventoperiodo=self.id,
                                                                                               status=True,
                                                                                               dia=dia)]).order_by(
            'fecha')

    def clases_evento(self):
        return CapClaseIpec.objects.filter(capeventoperiodo=self.id, status=True)

    def inscritos(self):
        return self.capinscritoipec_set.filter(status=True).order_by('participante__persona__id',
                                                                     'participante__apellido1',
                                                                     'participante__apellido2',
                                                                     'participante__nombres') if self.capinscritoipec_set.filter(
            status=True).exists() else []

    def inscritos_id(self):
        return self.capinscritoipec_set.filter(status=True).values_list('participante__id').order_by(
            'participante__persona__id') if self.capinscritoipec_set.filter(status=True).exists() else []

    def total_asistencia_promedio(self):
        suma_promedio = 0
        inscritos = self.inscritos()
        for inscrito in inscritos:
            suma_promedio += inscrito.porciento_asistencia_ipec()
        return round((float(suma_promedio / float(inscritos.count())) if inscritos.count() > 0 else 0), 2)

    def exiten_asistencia(self):
        return CapCabeceraAsistenciaIpec.objects.filter(clase__in=self.capclaseipec_set.filter(status=True)).exists()

    def turnos_en_fecha(self, fecha):
        return CapCabeceraAsistenciaIpec.objects.filter(clase__capeventoperiodo=self, fecha=fecha).order_by(
            'clase__turno')

    def todas_fechas_asistencia(self):
        return CapCabeceraAsistenciaIpec.objects.filter(clase__capeventoperiodo=self).distinct('fecha').order_by(
            'fecha')

    def total_promedio_por_fecha_asistencia(self):
        suma_promedio = 0
        fechas = self.todas_fechas_asistencia()
        c = fechas.count()
        for fecha in fechas:
            suma = self.porcentaje_asistencia_por_fecha(fecha.fecha)
            suma_promedio += suma
        return round((float(suma_promedio / c) if c > 0 else 0), 2)

    def abreviar_fecha(self, fecha):
        meses = ["ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SEP", "OCT", "NOV", "DIC"]
        return str(fecha.day) + " " + meses[fecha.month - 1]

    def asistencia_en_fecha_asistieron(self, fecha):
        return CapDetalleAsistenciaIpec.objects.filter(cabeceraasistencia__clase__capeventoperiodo=self,
                                                       cabeceraasistencia__fecha=fecha, asistio=True, status=True)

    def asistencia_en_fecha_no_asistieron(self, fecha):
        return CapDetalleAsistenciaIpec.objects.filter(cabeceraasistencia__clase__capeventoperiodo=self,
                                                       cabeceraasistencia__fecha=fecha, asistio=False, status=True)

    def porcentaje_asistencia_por_fecha(self, fecha):
        fecha_asistencia = CapDetalleAsistenciaIpec.objects.filter(cabeceraasistencia__clase__capeventoperiodo=self,
                                                                   cabeceraasistencia__fecha=fecha)
        asistencia = fecha_asistencia.filter(asistio=True, status=True).count()
        return round((asistencia * 100) / float(fecha_asistencia.count()), 2)

    def puede_eliminar_planificacion_evento(self):
        mensaje = ""
        if self.capinstructoripec_set.filter(status=True).exists():
            mensaje += "instructor "
        if self.capclaseipec_set.filter(status=True).exists():
            mensaje += "horarios "
        if self.exiten_inscritos():
            mensaje += "inscritos "
        if not mensaje == "":
            s = mensaje.split(" ")
            mensaje = ""
            if len(s) == 4:
                mensaje = s[0] + ", " + s[1] + ", " + s[2]
            elif len(s) == 3:
                mensaje = s[0] + ", " + s[1]
            else:
                mensaje = s[0]
        else:
            mensaje = None
        return mensaje

    def titulo_3nivel_aprobador2(self):
        aprobado2 = self.aprobado2.titulacion_principal_senescyt_registro()
        if aprobado2 != '':
            if aprobado2.titulo.nivel.rango > 5:
                return \
                self.aprobado2.titulacion_set.filter(titulo__nivel__rango=aprobado2.titulo.nivel.rango - 1).order_by(
                    '-fechaobtencion')[0]
        return None

    def titulo_3nivel_aprobador3(self):
        aprobado3 = self.aprobado3.titulacion_principal_senescyt_registro()
        if aprobado3 != '':
            if aprobado3.titulo.nivel_id > 5:
                return \
                self.aprobado3.titulacion_set.filter(titulo__nivel__rango=aprobado3.titulo.nivel.rango - 1).order_by(
                    '-fechaobtencion')[0]
        return None

    def evento_esta_vigente(self):
        return True if self.fechafin > datetime.now().date() else False

    def en_uso(self):
        return True if self.capinscritoipec_set.filter(status=True).exists() else False

    def estado_evento(self):
        estado = ''
        if datetime.now().date() >= self.fechainicio and datetime.now().date() <= self.fechafin:
            estado = 'EN CURSO'
        elif datetime.now().date() < self.fechainicio:
            estado = 'PENDIENTE'
        else:
            estado = 'CERRADO'
        return estado

    def mis_profesores(self):
        if self.capinstructoripec_set.values('id').filter(status=True, instructorprincipal=True).exists():
            return self.capinstructoripec_set.filter(status=True, instructorprincipal=True)
        return None

    def inscritos_aprobado(self):
        # return self.capcabecerasolicitud_set.filter(status=True,estadosolicitud=variable_valor('APROBADO_CAPACITACION'))
        return CapCabeceraSolicitud.objects.filter(capeventoperiodo=self, status=True,
                                                   estadosolicitud=variable_valor('APROBADO_CAPACITACION'))

    def crear_actualizar_categoria_notas_curso(self, clave):
        from sga.models import PeriodoMoodleCapacitacion
        from django.db import connections
        from moodle import moodle
        cursor = connections['moodle_db'].cursor()
        #################################################################################################################
        #################################################################################################################
        # servidor
        AGREGAR_ESTUDIANTE = False
        AGREGAR_DOCENTE = False
        if clave == 'estudiante':
            AGREGAR_ESTUDIANTE = True
        if clave == 'docente':
            AGREGAR_DOCENTE = True
        if clave == 'todo':
            AGREGAR_ESTUDIANTE = True
            AGREGAR_DOCENTE = True
        parent_grupoid = 0
        tipourl = 1
        periodo = PeriodoMoodleCapacitacion.objects.get(pk=2)
        bgrupo = moodle.BuscarCategoriasid(periodo, tipourl, periodo.categoria)
        # bgrupo = moodle.BuscarCategoriasid(periodo, tipourl,periodo.categoria)
        if bgrupo:
            if 'id' in bgrupo[0]:
                parent_grupoid = bgrupo[0]['id']
        contador = 0

        if parent_grupoid > 0:
            """"
            CREANDO EL CURSO CAPACITACION EL ID SE CONFIGURA EN VARIABLES GLABALES
            """
            bperiodo = moodle.BuscarCategorias(periodo, tipourl, periodo.idnumber())
            parent_periodoid = 0
            if bperiodo:
                if 'id' in bperiodo[0]:
                    parent_periodoid = bperiodo[0]['id']
            else:
                bperiodo = moodle.CrearCategorias(periodo, tipourl, periodo.__str__(), periodo.idnumber(),
                                                  periodo.nombre, parent=parent_grupoid)
                parent_periodoid = bperiodo[0]['id']
            # print('Periodo lectivo: %s' % periodo)
            if parent_periodoid > 0:
                """"
                CREANDO LAS A√ëO
                """
                anio = datetime.now().year
                anio_nombre = str(anio)
                idnumber_coordinacion = u'%s-ANIO%s' % (periodo.idnumber(), anio)
                bcoordinacion = moodle.BuscarCategorias(periodo, tipourl, idnumber_coordinacion)
                parent_coordinacionid = 0
                categoryid = 0
                if bcoordinacion:
                    if 'id' in bcoordinacion[0]:
                        parent_coordinacionid = bcoordinacion[0]['id']
                        categoryid = bcoordinacion[0]['id']
                else:
                    bcoordinacion = moodle.CrearCategorias(periodo, tipourl, anio_nombre, idnumber_coordinacion,
                                                           anio_nombre, parent=parent_periodoid)
                    parent_coordinacionid = bcoordinacion[0]['id']
                    categoryid = bcoordinacion[0]['id']

                # print('**Facultad: %s' % coordinacion)
                if parent_coordinacionid > 0:
                    """"
                    CREANDO LOS CURSOS
                    """
                    cursos = CapEventoPeriodoIpec.objects.filter(id__in=[self.id])
                    for curso in cursos:
                        idnumber_curso = u'%s-ANIO%s-CURS%s' % (periodo.idnumber(), anio, curso.id)
                        bcurso = moodle.BuscarCursos(periodo, tipourl, 'idnumber', idnumber_curso)
                        if not bcurso:
                            bcurso = moodle.BuscarCursos(periodo, tipourl, 'idnumber', idnumber_curso)
                        numsections = 1
                        objetivocur = curso
                        summary = u''
                        if objetivocur:
                            summary = objetivocur.objetivo
                        startdate = int(time.mktime(curso.fechainicio.timetuple()))
                        enddate = int(time.mktime(curso.fechafin.timetuple()))
                        cursoid = 0
                        if bcurso['courses']:
                            if 'id' in bcurso['courses'][0]:
                                cursoid = bcurso['courses'][0]['id']
                        else:
                            bcurso = moodle.CrearCursos(periodo, tipourl, u'%s' % curso.capevento,
                                                        u'%s,[%s] - %s[%s]' % (
                                                        curso.capevento, curso.id, 'CAPACITACION', curso.id),
                                                        categoryid, idnumber_curso, summary, startdate, enddate,
                                                        numsections)
                            cursoid = bcurso[0]['id']
                        # print('********Curso: %s' % curso)
                        if cursoid > 0:
                            if curso.idcursomoodle != cursoid:
                                curso.idcursomoodle = cursoid
                                curso.save()

                            if AGREGAR_DOCENTE:
                                curso.crear_actualizar_docente_curso(moodle, 1, periodo)

                            if AGREGAR_ESTUDIANTE:
                                curso.crear_actualizar_estudiantes_curso(moodle, 1, periodo)

    def crear_actualizar_docente_curso(self, moodle, tipourl, periodo):
        #################################################################################################################
        # AGREGAR DOCENTE
        #################################################################################################################
        from sga.funciones import log
        try:
            if self.idcursomoodle:
                cursoid = self.idcursomoodle
                if self.quitar_docente_curso(moodle, tipourl, periodo):
                    # docentes = self.mis_profesores_autores()
                    docentes = self.mis_profesores()
                    for curpro in docentes:
                        profesor = curpro
                        if profesor and profesor.instructor.usuario and not 'POR DEFINIR' in profesor.instructor.nombres:
                            persona = profesor.instructor
                            username = persona.usuario.username
                            bprofesor = moodle.BuscarUsuario(periodo, tipourl, 'username', username)
                            profesorid = 0
                            if not bprofesor:
                                bprofesor = moodle.BuscarUsuario(periodo, tipourl, 'username', username)

                            if bprofesor['users']:
                                if 'id' in bprofesor['users'][0]:
                                    profesorid = bprofesor['users'][0]['id']
                            else:
                                idnumber_user = persona.identificacion()
                                notuser = moodle.BuscarUsuario(periodo, tipourl, 'idnumber', idnumber_user)
                                if not notuser:
                                    notuser = moodle.BuscarUsuario(periodo, tipourl, 'idnumber', idnumber_user)

                                bprofesor = moodle.CrearUsuario(periodo, tipourl, u'%s' % persona.usuario.username,
                                                                u'%s' % persona.identificacion(),
                                                                u'%s' % persona.nombres,
                                                                u'%s %s' % (persona.apellido1, persona.apellido2),
                                                                u'%s' % persona.emailinst,
                                                                idnumber_user,
                                                                u'%s' % persona.canton.nombre if persona.canton else '',
                                                                u'%s' % persona.pais.nombre if persona.pais else '')
                                profesorid = bprofesor[0]['id']

                            if profesorid > 0:
                                rolest = moodle.EnrolarCurso(periodo, tipourl, periodo.rolprofesortutor, profesorid,
                                                             cursoid)
                                if persona.idusermoodle != profesorid:
                                    persona.idusermoodle = profesorid
                                    persona.save()
                            # print('**********PROFESOR: %s' % profesor)
        except Exception as ex:
            # log(u'Moodle Error al crear docente: %s' % persona, None, "add", User.objects.get(pk=1))
            print('Error al crear docente %s' % ex)

    def quitar_docente_curso(self, moodle, tipourl, periodo):
        from django.db import connections
        cursor = connections['moodle_db'].cursor()
        #################################################################################################################
        # QUITAR DOCENTE
        #################################################################################################################
        if self.idcursomoodle:
            cursoid = self.idcursomoodle

            idprofesores = ""
            for x in self.capinstructoripec_set.values_list('instructor__idusermoodleposgrado', flat=False).filter(
                    status=True, instructorprincipal=True):
                idprofesores += "%s," % x[0]
            query = u"SELECT DISTINCT enrol.userid, asi.roleid from mooc_user_enrolments enrol " \
                    u"inner join mooc_role_assignments asi on asi.userid=enrol.userid and asi.roleid in(%s) " \
                    u"where enrol.enrolid in(select en.id from mooc_enrol en where en.courseid=%s) " \
                    u"AND enrol.userid not in(%s0)" % (periodo.rolprofesortutor, cursoid, idprofesores)
            cursor.execute(query)
            row = cursor.fetchall()
            if row:
                for deluser in row:
                    unrolest = moodle.UnEnrolarCurso(periodo, tipourl, deluser[1], deluser[0], cursoid)
                    print('************ Eliminar Profesor: *** %s' % deluser[0])
        return True

    def crear_actualizar_estudiantes_curso(self, moodle, tipourl, periodo):
        #################################################################################################################
        # AGREGAR ESTUDIANTE
        #################################################################################################################
        from sga.funciones import log
        if self.idcursomoodle:
            contador = 0
            cursoid = self.idcursomoodle
            for estudiante in self.inscritos_aprobado():
                try:
                    contador += 1
                    bandera = 0
                    persona = estudiante.participante
                    username = persona.usuario.username
                    bestudiante = moodle.BuscarUsuario(periodo, tipourl, 'username', username)
                    estudianteid = 0
                    if not bestudiante:
                        bestudiante = moodle.BuscarUsuario(periodo, tipourl, 'username', username)

                    if bestudiante['users']:
                        if 'id' in bestudiante['users'][0]:
                            estudianteid = bestudiante['users'][0]['id']
                    else:
                        idnumber_user = persona.identificacion()
                        notuser = moodle.BuscarUsuario(periodo, tipourl, 'idnumber', idnumber_user)
                        if not notuser:
                            notuser = moodle.BuscarUsuario(periodo, tipourl, 'idnumber', idnumber_user)

                        bestudiante = moodle.CrearUsuario(periodo, tipourl, u'%s' % persona.usuario.username,
                                                          u'%s' % persona.identificacion(),
                                                          u'%s' % persona.nombres,
                                                          u'%s %s' % (persona.apellido1, persona.apellido2),
                                                          u'%s' % persona.emailinst if persona.emailinst else persona.email,
                                                          idnumber_user,
                                                          u'%s' % persona.canton.nombre if persona.canton else '',
                                                          u'%s' % persona.pais.nombre if persona.pais else '')
                        estudianteid = bestudiante[0]['id']
                    if estudianteid > 0:
                        # rolest = moodle.EnrolarCurso(5, estudianteid, cursoid)
                        # Estudiante-oct-feb2019
                        # rolest = moodle.EnrolarCurso(5, estudianteid, cursoid)
                        rolest = moodle.EnrolarCurso(periodo, tipourl, periodo.rolestudiante, estudianteid, cursoid)
                        if persona.idusermoodle != estudianteid:
                            persona.idusermoodle = estudianteid
                            persona.save()
                    print('************Estudiante: %s *** %s idm: %s rol: %s' % (
                    contador, persona, self.idcursomoodle, rolest))
                except Exception as ex:
                    log(u'Moodle Error al crear Estudiante: %s' % persona, None, "add", User.objects.get(pk=1))
                    print('Error al crear estudiante %s' % ex)
            # if variable_valor('QUITAR_ALUMNOS_MOODLE'):
            #     self.quitar_estudiantes_curso(moodle, tipourl)

    def idnumber(self):
        anoini = self.fechainicio.year
        anofin = self.fechafin.year
        if anoini != anofin:
            ano = '%s-%s' % (anoini, anofin)
        else:
            ano = '%s' % anoini
        return u'CURSOEDCON%s-%s' % (self.id, ano)

    # Si el curso tiene al menos un rubro creado no podr√° editar el valor del rubro - 05/2023
    def puede_modificar_valorrubro_evento(self):
        # validar que no exista ni un rubro en unemi
        rubrosevento_unemi = self.rubro_set.values('id').filter(status=True)
        # Verificar que ning√∫n rubro de este evento exista en epunemi (considero tambien rubros unemi eliminados)
        idrubrosepunemi_all = tuple(self.rubro_set.filter(idrubroepunemi__isnull=False).values_list('idrubroepunemi', flat=True).exclude(idrubroepunemi=0))
        rubrosevento_epunemi = None
        if idrubrosepunemi_all:
            # consultar en epunemi si existen rubros del evento
            cursor = connections['epunemi'].cursor()
            sql = """Select id from sagest_rubro where status=TRUE AND id IN %s;""" % (str(idrubrosepunemi_all))
            cursor.execute(sql)
            rubrosevento_epunemi = cursor.fetchone()
            cursor.close()
        if rubrosevento_unemi or rubrosevento_epunemi:
            return False
        else:
            return True

    def save(self, *args, **kwargs):
        self.objetivo = self.objetivo.upper()
        super(CapEventoPeriodoIpec, self).save(*args, **kwargs)


class ConfigurarcionMejoraContinua(ModeloBase):
    nombre = models.TextField(blank=True, null=True, verbose_name=u"Nombre")
    cargo = models.TextField(blank=True, null=True, verbose_name=u"Cargo")
    firma = models.FileField(upload_to='reportes/encabezados_pies/firmas', blank=True, null=True,
                                 verbose_name=u'Firma')
    orden = models.IntegerField(default=0, verbose_name=u'Turno')
    curso = models.ForeignKey(CapEventoPeriodoIpec, verbose_name=u"Evento Periodo Ipec",
                                             on_delete=models.CASCADE)

    def __str__(self):
        return  u'%s' % self.nombre

    class Meta:
        verbose_name = "Configuracion Mejora"
        verbose_name_plural = "Configuracion Mejoras"




TIPO_CUOTA = (
    (1, u'ADMISION'),
    (2, u'MATRICULA'),
    (3, u'CUOTA'),
)


class CapEventoPeriodoFacturaTotalIpec(ModeloBase):
    from sga.models import MODALIDAD_CAPACITACION
    capeventoperiodoipec = models.ForeignKey(CapEventoPeriodoIpec, verbose_name=u"Evento Periodo Ipec",
                                             on_delete=models.CASCADE)
    subtotal = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"SubTotal")
    iva = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Iva")
    total = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Total")
    archivo = models.FileField(upload_to='capacitcionipecfacturatotal', blank=True, null=True, verbose_name=u'Archivo')


ESTADO_FINAL_INSCRITO = (
    (1, u'PENDIENTE'),
    (2, u'APROBADO'),
    (3, u'REPROBADO')
)

FORMA_PAGO_EDCON = (
    (1, u'Contado'),
    (2, u'Diferido')
)

class CapInscritoIpec(ModeloBase):
    capeventoperiodo = models.ForeignKey(CapEventoPeriodoIpec, verbose_name=u'Evento Capacitaci√≥n',
                                         on_delete=models.CASCADE)
    participante = models.ForeignKey('sga.Persona', verbose_name=u'Participante', on_delete=models.CASCADE)
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n')
    personalunemi = models.BooleanField(default=False, verbose_name=u'Personal Unemi')
    emailnotificado = models.BooleanField(default=False, verbose_name=u'Notificar email')
    fecha_emailnotifica = models.DateTimeField(blank=True, null=True)
    persona_emailnotifica = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='+',
                                              verbose_name=u'Quien notifica y envia certificado',
                                              on_delete=models.CASCADE)
    # rutapdf = models.CharField(default='', max_length=500, verbose_name=u"Ruta del certificado")
    rutapdf = models.FileField(upload_to='qrcode/certificados', blank=True, null=True,
                               verbose_name=u'Archivo retencion pdf')
    observacionmanual = models.TextField(default='', verbose_name=u'Observaci√≥n manual')
    observacionmover = models.TextField(default='', verbose_name=u'Observaci√≥n mover')
    archivo = models.FileField(upload_to='archivoinscripcionipec/%Y/%m/%d/', blank=True, null=True,
                               verbose_name=u'Archivo inscripcion ipec')
    desactivado = models.BooleanField(default=False, verbose_name=u'Desactivado por falta de pago')
    encursomoodle = models.BooleanField(default=False, verbose_name=u"Esta en curso moodle")
    notafinal = models.FloatField(blank=True, null=True, verbose_name=u'Nota Final')
    estado = models.IntegerField(choices=ESTADO_FINAL_INSCRITO, default=1, verbose_name=u'Estado del curso')
    formapago = models.IntegerField(choices=FORMA_PAGO_EDCON, default=1, verbose_name=u'Forma de pago')
    urlhtmlinsignia = models.CharField(blank=True, null=True, max_length=200, verbose_name=u'url html insignia')
    namehtmlinsignia = models.CharField(blank=True, null=True, max_length=100, verbose_name=u'name html insignia')
    aplicagratuidad = models.IntegerField(choices=APLICA_GRATUIDAD_INSCRITO, default=2,
                                          verbose_name=u'Aplica gratuidad')
    reseteopordesuso = models.BooleanField(blank=True, null=True, default=False, verbose_name=u"Reseteo sga/sagest por desuso")

    def inscrito_recaudacion(self):
        rubros = Rubro.objects.filter(persona=self.participante,
                                     capeventoperiodoipec=self.capeventoperiodo,
                                     status=True).exclude(pago__factura__valida=False)
        pagoEpunemi = 0
        sumpagoEp = 0
        cancelado = 'NO'
        estado = False
        epunemi = []
        if rubros:
            for rubro in rubros:
                cursor = connections['epunemi'].cursor()
                queryest = """
                        SELECT valortotal, cancelado FROM sagest_rubro WHERE status=true and id=%s AND idrubrounemi=%s
                        """ % (rubro.idrubroepunemi, rubro.id)
                cursor.execute(queryest)
                rowest = cursor.fetchall()
                if rowest:
                    costoEpunemi = rowest[0][0]
                    cancelado = rowest[0][1]
                    # estado = True
                queryest = """
                        SELECT SUM(valortotal) FROM sagest_pago WHERE status=true and rubro_id=%s
                        """ % (rubro.idrubroepunemi)
                cursor.execute(queryest)
                rowest = cursor.fetchall()
                if rowest:
                    if rowest[0][0] != None:
                        pagoEpunemi = rowest[0][0]
                        sumpagoEp += pagoEpunemi

            if sumpagoEp == self.capeventoperiodo.costo:
                estado = True

        epunemi.append(cancelado)
        epunemi.append(sumpagoEp)
        epunemi.append(estado)
        return epunemi

    def nota_final_curso(self):
        notafinal = 0
        instructores = CapInstructorIpec.objects.filter(capeventoperiodo_id=self.capeventoperiodo.pk, status=True)
        if instructores.exists():
            for d in instructores:
                nota = self.nota_total_evento_porinstructor(self.capeventoperiodo.pk, d.pk)
                notafinal += nota if nota else 0
            return notafinal / instructores.count()
        else:
            return notafinal

    def campo(self, campo, instructor_id):
        instructor = CapInstructorIpec.objects.get(id=instructor_id)
        if CapModeloEvaluativoTareaIpec.objects.filter(status=True, capnotaipec__instructor=instructor, nombre=campo):
            return \
            CapModeloEvaluativoTareaIpec.objects.filter(status=True, capnotaipec__instructor=instructor, nombre=campo)[
                0]
        return None

    def cali_campo(self, campo, instructor_id):
        # .
        detalle = None
        instructor = CapInstructorIpec.objects.get(id=instructor_id)
        modeloevaluativo = instructor.modelo_calificacion(instructor.capeventoperiodo).filter(modelo__nombre=campo)
        if modeloevaluativo:
            if CapDetalleNotaIpec.objects.filter(status=True, cabeceranota__status=True, cabeceranota_id=modeloevaluativo[0], inscrito=self,
                                                 cabeceranota__instructor__capeventoperiodo=instructor.capeventoperiodo).exists():
                detalle = CapDetalleNotaIpec.objects.filter(status=True, cabeceranota__status=True, cabeceranota_id=modeloevaluativo[0],
                                                         inscrito=self,
                                                         cabeceranota__instructor__capeventoperiodo=instructor.capeventoperiodo).order_by('-id').first()
            # return detalle.nota
            if detalle == None:
                return 0.0
            else:
                return detalle.nota
        return None

    # def verifica_evaluacion_generica(self):
    # if not self.evaluaciongenerica_set.exists():
    # modelo = self.materia.modeloevaluativo
    # for campos in modelo.detallemodeloevaluativo_set.all():
    # evaluacion = EvaluacionGenerica(materiaasignada=self,
    # detallemodeloevaluativo=campos,
    # valor=0)
    # evaluacion.save()
    # return True

    def __str__(self):
        return u'%s' % self.participante

    class Meta:
        verbose_name = u"Inscripci√≥n de Evento"
        verbose_name_plural = u"Inscripci√≥n de Evento"
        ordering = ['participante']

    def download_link(self):
        return self.rutapdf.url

    def download_link_archivo(self):
        return self.archivo.url

    def es_alumnounemi(self):
        esalumno = False
        if self.participante.inscripcion_set.values('id').filter(status=True).exclude(coordinacion_id=9):
            verificainsripcion = self.participante.inscripcion_set.values_list('id').filter(status=True).exclude(
                coordinacion_id=9)
            if Matricula.objects.values('id').filter(inscripcion__id__in=verificainsripcion, status=True):
                esalumno = True
            else:
                if RecordAcademico.objects.values('id').filter(inscripcion__id__in=verificainsripcion, status=True):
                    esalumno = True
        return esalumno

    def inscripcion(self):
        inscripcion = ''
        if self.participante.inscripcion_set.values('id').filter(status=True).exclude(coordinacion_id__in=[9, 7]):
            inscripcion = self.participante.inscripcion_set.filter(status=True).exclude(coordinacion_id__in=[9, 7])[0]
        return inscripcion

    def instructor_notasfinales(self, docente=None):
        listarray = []
        if self.capeventoperiodo.capinstructoripec_set.values('id').filter(status=True).exists():
            listado = self.capeventoperiodo.capinstructoripec_set.filter(status=True)
            nota = 0
            estado = 'REPROBADO'
            for lista in listado:
                if docente is not None:
                    if lista.id == docente:
                        notainstructor = null_to_decimal(
                            CapDetalleNotaIpec.objects.filter(inscrito=self, cabeceranota__instructor=lista).aggregate(
                                total=Sum('nota'))['total'], 2)
                        nota += notainstructor
                else:
                    notainstructor = null_to_decimal(
                        CapDetalleNotaIpec.objects.filter(inscrito=self, cabeceranota__instructor=lista).aggregate(
                            total=Sum('nota'))['total'], 2)
                    nota += notainstructor
            if docente is not None:
                if nota >= self.capeventoperiodo.minnota:
                    estado = 'APROBADO'
                listarray.append([nota, estado])
            else:
                if self.nota_final_curso() >= self.capeventoperiodo.minnota and self.porciento_requerido_asistencia_ipec():
                    estado = 'APROBADO'
                listarray.append([nota, estado])
        else:
            listarray.append([0, 'SIN CALIFICAR'])
        return listarray

    def porciento_asistencia_ipec(self):
        total = CapCabeceraAsistenciaIpec.objects.filter(clase__capeventoperiodo=self.capeventoperiodo,
                                                         capdetalleasistenciaipec__isnull=False,
                                                         capdetalleasistenciaipec__inscrito=self).count()
        if total:
            numeroreal = self.capdetalleasistenciaipec_set.filter(asistio=True, status=True).count()
            return round(float((numeroreal * 100) / float(total)), 2)
        else:
            return 100

    def porciento_requerido_asistencia_ipec(self):
        return self.porciento_asistencia_ipec() >= self.capeventoperiodo.minasistencia

    def asistencia_fecha_turno_ipec(self, asistencia):
        if CapDetalleAsistenciaIpec.objects.filter(cabeceraasistencia=asistencia, inscrito=self).exists():
            return CapDetalleAsistenciaIpec.objects.filter(cabeceraasistencia=asistencia, inscrito=self)[0]
        return None

    def contar_asistencia_asistida_ipec(self):
        return CapDetalleAsistenciaIpec.objects.filter(asistio=True, inscrito=self)

    # def mail_notificar_talento_humano(self, nombresistem):
    #     from sga.tasks import send_html_mail
    #     from sga.models import miinstitucion
    #     #notifica ya sido eliminado por talento humano
    #     send_html_mail("Eliminaci√≥n de Inscrito por Talento Humano", "emails/eliminadoinscritocapacitaciontalentohumano.html", {'sistema': nombresistem, 'd': self, 't': miinstitucion()}, self.participante.lista_emails_interno(), [], cuenta=variable_valor('CUENTAS_CORREOS')[1])

    def cancelo_rubro(self):
        return Rubro.objects.filter(cancelado=True, status=True, persona=self.participante,
                                    capeventoperiodoipec=self.capeventoperiodo).exists()

    def estado_rubro(self):
        if self.cancelo_rubro():
            pagosactivos = Pago.objects.filter(status=True, rubro__status=True, factura__valida=True,
                                               factura__status=True, rubro__persona=self.participante,
                                               rubro__capeventoperiodoipec=self.capeventoperiodo).count()
            pagosanulados = Pago.objects.filter(status=True, rubro__status=True, factura__valida=False,
                                                factura__status=True, rubro__persona=self.participante,
                                                rubro__capeventoperiodoipec=self.capeventoperiodo).count()

            if pagosactivos == 0:
                return 2
            else:
                return 1
        else:
            return 0

    def valor_rubro(self):
        if Rubro.objects.filter(status=True, persona=self.participante,
                                capeventoperiodoipec=self.capeventoperiodo).exists():
            return \
            Rubro.objects.filter(status=True, persona=self.participante, capeventoperiodoipec=self.capeventoperiodo)[
                0].valor_total()
        else:
            return 0

    def valor_rubrocursos(self):
        if Rubro.objects.filter(cancelado=True, status=True, persona=self.participante,
                                tipo=self.capeventoperiodo.tiporubro).exists():
            return Rubro.objects.filter(cancelado=True, status=True, persona=self.participante,
                                        tipo=self.capeventoperiodo.tiporubro).exclude(
                pago__factura__valida=False).aggregate(valor=Sum('valor'))['valor']
        else:
            return 0

    def pagorubrocurso(self):
        valor = Rubro.objects.filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo,
                                     cancelado=True, status=True).exclude(pago__factura__valida=False)
        return valor

    def existerubrocurso(self):
        valor = None
        if Rubro.objects.values('id').filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo,
                                             status=True).exclude(pago__factura__valida=False):
            valor = Rubro.objects.filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo,
                                         status=True).exclude(pago__factura__valida=False)
        return valor

    def cantidad_cuotas(self):
        return Rubro.objects.values('id').filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo, status=True).exclude(pago__factura__valida=False).count()

    def cantidad_cuotas_pagadas(self):
        return Rubro.objects.values('id').filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo, status=True, cancelado=True).exclude(pago__factura__valida=False).count()

    def cantidad_cuotas_por_pagar(self):
        return Rubro.objects.values('id').filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo, status=True, cancelado=False).exclude(pago__factura__valida=False).count()

    def cantidad_cuotas_vencidas(self):
        hoy = datetime.now().date()
        return Rubro.objects.values('id').filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo, status=True, cancelado=False, fechavence__lt=hoy).exclude(pago__factura__valida=False).count()

    def pagorubrocurso_2(self):
        pagado = False
        if self.formapago == 1:
            if Rubro.objects.filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo,
                                         cancelado=True, status=True).exclude(pago__factura__valida=False).exists():
                pagado = True
        else:
            total = Decimal(null_to_decimal(Pago.objects.values_list('valortotal').filter(status=True, rubro__status=True,
                                                                                          rubro__persona=self.participante,
                                                                                          rubro__capeventoperiodoipec=self.capeventoperiodo).exclude(factura__valida=False).aggregate(valor=Sum('valortotal'))['valor'], 2)).quantize(Decimal('.01'))
            if total == self.total_deuda_edcon():
                pagado = True
        return pagado

    def vencido_a_la_fechamatricula(self):
        rubros = Rubro.objects.filter(persona_id=self.participante.pk, capeventoperiodoipec=self.capeventoperiodo,
                                      cancelado=False, fechavence__lt=datetime.now().date(), status=True).distinct()
        totrubpend = 0
        for r in rubros:
            totrubpend += r.valortotal - Decimal(r.total_pagado())
        return totrubpend

    def total_pagado(self):
        rubros = Rubro.objects.filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo,
                                      status=True).values_list('pk', flat=True)
        return null_to_decimal(
            Pago.objects.filter(rubro__in=rubros, rubro__status=True, status=True).aggregate(valort=Sum('valortotal'))[
                'valort'], 2)

    def total_pagado_rubro(self):
        valor = null_to_decimal((self.total_rubros() - self.total_saldo_rubro()), 2)
        return valor

    def total_pagado_conrubro(self):
        if Rubro.objects.filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo,
                                status=True).exclude(pago__factura__valida=False):
            if self.formapago == 1:
                # if Rubro.objects.filter(persona=self.participante, tipo=self.capeventoperiodo.tiporubro, status=True).exclude(pago__factura__valida=False):
                rub = Rubro.objects.filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo,
                                           status=True).exclude(pago__factura__valida=False)[0]
                # rub = Rubro.objects.filter(persona=self.participante, tipo=self.capeventoperiodo.tiporubro, status=True).exclude(pago__factura__valida=False)[0]
                det = null_to_decimal(
                    rub.pago_set.filter(rubro__status=True).exclude(pagoliquidacion__isnull=False).distinct().aggregate(
                        valor=Sum('valortotal'))['valor'], 2)
            else:
                det = Decimal(null_to_decimal(Pago.objects.values_list('valortotal').filter(status=True, rubro__status=True,
                                                                                  rubro__persona=self.participante,
                                                                                  rubro__capeventoperiodoipec=self.capeventoperiodo).exclude(factura__valida=False).aggregate(valor=Sum('valortotal'))['valor'], 2)).quantize(Decimal('.01'))
            return det
        else:
            return 0

    def total_pagos_rubros_edcon(self):
        totalpagado = Decimal(
            null_to_decimal(Pago.objects.values_list('valortotal').filter(rubro__persona=self.participante,
                                                                          rubro__capeventoperiodoipec=self.capeventoperiodo,
                                                                          status=True, rubro__status=True).aggregate(
                valor=Sum('valortotal'))['valor'], 2)).quantize(Decimal('.01'))
        return totalpagado

    def total_rubros(self):
        # valor = null_to_decimal(Rubro.objects.filter(persona=self.participante, tipo=self.capeventoperiodo.tiporubro, capeventoperiodoipec_id=self.capeventoperiodo.id, status=True).exclude(pago__factura__valida=False).aggregate(valor=Sum('valortotal'))['valor'], 2)
        valor = null_to_decimal(
            Rubro.objects.filter(persona=self.participante, capeventoperiodoipec_id=self.capeventoperiodo.id,
                                 status=True).exclude(pago__factura__valida=False).aggregate(valor=Sum('valortotal'))[
                'valor'], 2)
        return valor

    def total_saldo_rubro(self):
        valor = null_to_decimal(
            Rubro.objects.filter(persona=self.participante, tipo=self.capeventoperiodo.tiporubro, status=True).exclude(
                pago__factura__valida=False).aggregate(valor=Sum('saldo'))['valor'], 2)
        return valor

    def total_valoradeuda(self):
        if Rubro.objects.filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo, status=True):
            # if Rubro.objects.filter(persona=self.participante, tipo=self.capeventoperiodo.tiporubro, status=True):
            rub = \
            Rubro.objects.filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo, status=True)[0]
            # rub = Rubro.objects.filter(persona=self.participante, tipo=self.capeventoperiodo.tiporubro, status=True)[0]
            return rub.total_adeudado()
        else:
            return 1

    def total_deuda_edcon(self):
        if Rubro.objects.filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo, status=True).exists():
            total = Decimal(null_to_decimal(Rubro.objects.values_list('valor').filter(status=True, persona=self.participante, capeventoperiodoipec=self.capeventoperiodo).aggregate(valor=Sum('valor'))['valor'], 2)).quantize(Decimal('.01'))
        else:
            total = 0
        return total

    def total_generado_alumno_programa(self, fechacorte):
        totalproyectado = Decimal(null_to_decimal(Rubro.objects.values_list('valor').filter(persona=self.participante,
                                                                                            capeventoperiodoipec=self.capeventoperiodo,
                                                                                            status=True,
                                                                                            fechavence__lte=fechacorte).aggregate(
            valor=Sum('valortotal'))['valor'], 2)).quantize(Decimal('.01'))
        totalanulado = Decimal(null_to_decimal(
            Pago.objects.values_list('valortotal').filter(rubro__persona=self.participante,
                                                          rubro__capeventoperiodoipec=self.capeventoperiodo,
                                                          fecha__lte=fechacorte, status=True, rubro__status=True,
                                                          factura__valida=False, factura__status=True).aggregate(
                valor=Sum('valortotal'))['valor'], 2)).quantize(Decimal('.01'))
        totalliquidado = Decimal(null_to_decimal(
            Pago.objects.values_list('valortotal').filter(rubro__persona=self.participante,
                                                          rubro__capeventoperiodoipec=self.capeventoperiodo,
                                                          fecha__lte=fechacorte, status=True, rubro__status=True,
                                                          pagoliquidacion__isnull=False,
                                                          pagoliquidacion__status=True).aggregate(
                valor=Sum('valortotal'))['valor'], 2)).quantize(Decimal('.01'))
        totalgenerado = totalproyectado - (totalanulado + totalliquidado)

        return totalgenerado

    def total_saldo_rubrosinanular_programa(self, fechacorte):
        valor = null_to_decimal(
            Rubro.objects.filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo, status=True,
                                 fechavence__lte=fechacorte).aggregate(valor=Sum('saldo'))['valor'], 2)
        return valor

    # def promedio_notas_tareas(self, modeloevaluativo, instructor):
    #     promedio_tarea = None
    #     promedio = None
    #     contar_tareas=0
    #     falta_revisar = False
    #     sumanotas = 0
    #     for detallemodelo in CapDetalleModeloEvaluativoTareaIpec.objects.filter(modelo_id=modeloevaluativo,status=True):
    #         for tarea in CapTareaIpec.objects.filter(detallemodelo=detallemodelo,capeventoperiodo=self.capeventoperiodo, instructor_id=instructor):
    #             inscrito = tarea.capdetalletareaipec_set.filter(inscrito=self)
    #             if inscrito.exists():
    #                 if inscrito[0].nota:
    #                     sumanotas += inscrito[0].nota
    #                     contar_tareas+=1
    #                 else:
    #                     falta_revisar = True
    #                     break
    #             else:
    #                 falta_revisar = True
    #                 break
    #         if sumanotas:
    #             promedio += round(float(sumanotas / float(contar_tareas)), 2)
    #         promedio_tarea = round(float((promedio * detallemodelo.modelo.notamaxima) / float(detallemodelo.notamaxima)), 2)
    #
    #
    def get_nota_individual(self, idm, ide):
        if CapDetalleNotaIpec.objects.filter(status=True, cabeceranota__status=True, cabeceranota_id=int(idm), inscrito=self,
                                             cabeceranota__instructor__capeventoperiodo_id=ide).exists():
            return CapDetalleNotaIpec.objects.filter(status=True, cabeceranota__status=True, cabeceranota_id=int(idm), inscrito_id=self.id,
                                                  cabeceranota__instructor__capeventoperiodo_id=ide).order_by('-id').first()
        return None

    def mi_nota_individual(self, idm, ide):
        if CapDetalleNotaIpec.objects.filter(status=True,cabeceranota__status=True, cabeceranota_id=int(idm), inscrito=self,
                                             cabeceranota__instructor__capeventoperiodo_id=ide).exists():
            return CapDetalleNotaIpec.objects.filter(status=True,cabeceranota__status=True,  cabeceranota_id=int(idm), inscrito_id=self.id,
                                                  cabeceranota__instructor__capeventoperiodo_id=ide).order_by('-id').first()
        return None

    def nota_total_evento(self, ide):
        from django.db.models import Avg
        totaldocentes = self.capeventoperiodo.capinstructoripec_set.all().count()
        if CapDetalleNotaIpec.objects.filter(status=True, inscrito=self,
                                             cabeceranota__instructor__capeventoperiodo_id=ide).exists():
            return CapDetalleNotaIpec.objects.filter(status=True, inscrito=self,
                                                     cabeceranota__instructor__capeventoperiodo_id=ide).aggregate(
                nota=Coalesce(Sum(F('nota'), output_field=FloatField()), 0.0)).get('nota') / totaldocentes
        return None

    def nota_total_evento_porinstructor(self, ide, idi):
        from django.db.models import Avg
        # .
        if CapDetalleNotaIpec.objects.filter(status=True,cabeceranota__status=True,  inscrito=self,
                                             cabeceranota__instructor__capeventoperiodo_id=ide).exists():
            return CapDetalleNotaIpec.objects.filter(status=True, cabeceranota__status=True, inscrito=self,
                                                     cabeceranota__instructor__id=idi).aggregate(
                nota=(Sum(F('nota'), output_field=FloatField()))).get('nota')
        return None

    def nota_alumno(self, instructor):
        if CapDetalleNotaIpec.objects.filter(status=True, inscrito=self, cabeceranota__instructor=instructor).exists():
            return CapDetalleNotaIpec.objects.filter(status=True, inscrito=self,
                                                     cabeceranota__instructor=instructor).aggregate(nota=Sum('nota'))[
                'nota']
        return None

    def nota_porinstructor_curso(self, instructor, idm):
        if CapDetalleNotaIpec.objects.filter(status=True, cabeceranota_id=int(idm), cabeceranota__instructor=instructor,
                                             inscrito=self).exists():
            return CapDetalleNotaIpec.objects.filter(status=True, cabeceranota_id=int(idm),
                                                     cabeceranota__instructor=instructor, inscrito=self)[0]
        return None

    # Verifica si la contrasena fue reseteada para crear el moodle
    def fue_reseteado(self):
        user = User.objects.get(username=self.participante.usuario.username.lower().strip())
        return user.check_password(self.participante.identificacion())
        # return authenticate(username=self.participante.usuario.username.lower().strip(), password=self.participante.identificacion())
    
    def rubrofuemigradoaepunemi(self):
        return Rubro.objects.values('id').filter(persona=self.participante, capeventoperiodoipec=self.capeventoperiodo,
                status=True, idrubroepunemi__isnull=False, idrubroepunemi__gt=0).exclude(pago__factura__valida=False)

    def save(self, *args, **kwargs):
        super(CapInscritoIpec, self).save(*args, **kwargs)

MOTIVOCANCELACIONCUPO = [
    (1, "No tengo tiempo"),
    (2, "No tiene afinidad con mi carrera"),
    (3, "Calamidad dom√©stica"),
    (4, "Problemas econ√≥micos"),
    (5, "Razones de salud"),
    (6, "Problemas familiares"),
    (7, "Quiero tomar un descanso acad√©mico"),
    (8, "Conflictos laborales"),
]

class HistorialInscripcionEventoPeriodoIpec(ModeloBase):
    capeventoperiodo = models.ForeignKey(CapEventoPeriodoIpec, blank=True, null=True,verbose_name=u'Evento Capacitaci√≥n',on_delete=models.CASCADE)
    participante = models.ForeignKey('sga.Persona', blank=True, null=True,verbose_name=u'Participante', on_delete=models.CASCADE)
    motivos = models.IntegerField(blank=True,null=True,choices=MOTIVOCANCELACIONCUPO, verbose_name=u'Motivo')
    otromotivo = models.CharField(max_length=350, blank=True, null=True, verbose_name=u"Otro Motivo")
    cancelacupo = models.BooleanField(default=False,verbose_name=u'Cancela Cupo')

    class Meta:
        verbose_name = u"Historial Inscripcion Evento"
        verbose_name_plural = u"Historial de Inscripciones en Eventos"

ADMISION_POSGRADO_TIPO = (
    (1, u'INSCRIPCION'),
    (2, u'MATRICULA'),
    (3, u'COSTO PROGRAMA'),
)


class Rubro(ModeloBase):
    tipo = models.ForeignKey(TipoOtroRubro, blank=True, null=True, verbose_name=u"Tipo", on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Cliente', on_delete=models.CASCADE)
    matricula = models.ForeignKey('sga.Matricula', blank=True, null=True, verbose_name=u'Matricula', on_delete=models.CASCADE)
    relacionados = models.ForeignKey('self', blank=True, null=True, verbose_name=u'Rubro', on_delete=models.CASCADE)
    contratorecaudacion = models.ForeignKey(ContratoRecaudacion, blank=True, null=True, verbose_name=u'Contrato recaudaci√≥n', on_delete=models.CASCADE)
    nombre = models.CharField(max_length=300, verbose_name=u'Nombre')
    cuota = models.IntegerField(default=0, verbose_name=u'Cuota')
    tipocuota = models.IntegerField(choices=TIPO_CUOTA, default=3)
    fecha = models.DateField(verbose_name=u'Fecha emisi√≥n')
    fechavence = models.DateField(verbose_name=u'Fecha vencimiento')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    iva = models.ForeignKey(IvaAplicado, verbose_name=u'IVA', on_delete=models.CASCADE)
    valoriva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor IVA')
    valortotal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor total')
    saldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo')
    saldoanterior = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo')
    cancelado = models.BooleanField(default=False, verbose_name=u'Cancelado')
    observacion = models.TextField(default='', max_length=250, blank=True, null=True, verbose_name=u"Observaci√≥n")
    capeventoperiodoipec = models.ForeignKey(CapEventoPeriodoIpec, blank=True, null=True, verbose_name=u"Capacitacion Evento IPEC", on_delete=models.CASCADE)
    epunemi = models.BooleanField(default=False, verbose_name=u'Es rubro de epunemi')
    idrubroepunemi = models.IntegerField(default=0, verbose_name=u'Rubro epunemi')
    congreso = models.ForeignKey('sagest.Congreso', blank=True, null=True, verbose_name=u'Congreso', on_delete=models.CASCADE)
    cohortemaestria = models.ForeignKey('posgrado.CohorteMaestria', blank=True, null=True, verbose_name=u"Cohorte maestria", on_delete=models.CASCADE)
    inscripcion = models.ForeignKey('posgrado.InscripcionCohorte', blank=True, null=True, verbose_name=u'Inscripci√≥n de cohorte', on_delete=models.CASCADE)
    admisionposgradotipo = models.IntegerField(choices=ADMISION_POSGRADO_TIPO, blank=True, null=True)
    archivogenerado = models.BooleanField(default=False, verbose_name=u'Archivo para banco generado')
    compromisopago = models.ForeignKey("sagest.CompromisoPagoPosgrado", blank=True, null=True, verbose_name=u'Compromiso de pago', on_delete=models.CASCADE)
    refinanciado = models.BooleanField(default=False, verbose_name=u'Rubro Refinanciado')
    bloqueado = models.BooleanField(default=False, verbose_name=u'Rubro bloqueado para edici√≥n y eliminaci√≥n')
    coactiva = models.BooleanField(default=False, verbose_name=u'Rubro en proceso de coactiva')
    tablaamortizacionposgrado = models.ForeignKey('posgrado.TablaAmortizacion', blank=True, null=True, verbose_name=u"Tabla de amortizaci√≥n", on_delete=models.CASCADE)
    solicitud = models.ForeignKey('secretaria.Solicitud', on_delete=models.CASCADE, blank=True, null=True, related_name='+', verbose_name=u'Solicitud Secretaria')
    capeventoperiodoformejecu = models.ForeignKey("ejecuform.CapacitaEventoFormacionEjecutiva", blank=True, null=True,verbose_name=u"Capacitacion Evento Formacion Ejecutiva", on_delete=models.CASCADE)
    inscritoejecutivo = models.ForeignKey("ejecuform.InscripcionFormacionEjecutiva", blank=True, null=True,verbose_name=u"Inscripcion de Formacion Ejecutiva", on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Rubro de cobro"
        verbose_name_plural = u"Rubros de cobro"

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return Rubro.objects.filter(nombre__contains=q).distinct()[:limit]

    def flexbox_repr(self):
        return self.nombre

    def no_salga(self):
        bandera = True
        if self.matricula:
            if self.matricula.nivel.periodo.id == 112:
                if self.cancelado == False:
                    bandera = False
        return bandera

    def valor_total_relacionados(self):
        valor = null_to_decimal(Rubro.objects.filter(relacionados=self).aggregate(valor=Sum('saldo'))['valor'], 2)
        return null_to_decimal(self.saldo, 2) + valor

    def valor_total_cobrar_intermatico(self):
        # if self.relacionados:
        #     if self.relacionados.fechavence.year == self.fechavence.year and self.relacionados.fechavence.month == self.fechavence.month:
        #         return null_to_decimal((null_to_decimal(self.relacionados.saldo, 2) + null_to_decimal(self.saldo, 2)), 2)
        #     else:
        #         return null_to_decimal(self.saldo, 2)
        return null_to_decimal(self.saldo, 2)

    def esta_liquidado(self):
        return self.pago_set.values("id").filter(pagoliquidacion__isnull=False).exists()

    def liquidacion(self):
        return PagoLiquidacion.objects.get(pagos__rubro=self, status=True, pagos__rubro__status=True)

    def registropago(self):
        return self.comprobantealumno_set.filter(status=True)

    def esta_anulado(self):
        return self.pago_set.values("id").filter(factura__valida=False).exists()

    def tiene_pagos(self):
        return self.pago_set.values("id").exists()

    def cantidad_pagos(self):
        return len(self.pago_set.all())

    def tiene_factura(self):
        try:
            if self.tiene_pagos():
                for x in self.pago_set.all():
                    if x.factura_set.values("id").exists():
                        return True
                    if x.idpagoepunemi:
                        return True
            return False
        except:
            return False

    def tiene_recibo_caja(self):
        try:
            if self.pago_set.filter(status=True):
                for x in self.pago_set.filter(status=True):
                    if x.pagorecibocaja_set.exists():
                        return True

            return False
        except:
            return False

    def factura(self):
        x = 1
        return self.pago_set.all().order_by('-fecha')[0].factura().id

    def pagos(self):
        return self.pago_set.all()

    def valor_total(self):
        if self.iva.porcientoiva:
            return float(self.valor) + null_to_decimal(
                float(self.valor) * null_to_decimal(float(self.iva.porcientoiva), 2), 2)
        return float(self.valor)

    def valor_iva(self):
        if self.iva.porcientoiva:
            return null_to_decimal(float(self.valor) * null_to_decimal(float(self.iva.porcientoiva), 2), 2)
        return 0

    def notadebito(self):
        if self.rubronotadebito_set.exists():
            return self.rubronotadebito_set.all()[0]
        return None

    def vencido(self):
        return not self.cancelado and self.fechavence < datetime.now().date()

    def puede_eliminarse(self):
        return not self.cancelado and not self.pago_set.values("id").exists() and not self.rubronotadebito_set.values(
            "id").exists()

    def tiene_adeuda(self):
        return self.total_pagado() < self.valor

    def valores_anulados(self):
        anuladofactura = null_to_numeric(
            self.pago_set.filter(factura__valida=False, status=True).aggregate(valor=Sum('valortotal'))['valor'], 2)
        anuladorecibo = null_to_numeric(
            self.pago_set.filter(pagorecibocaja__anulado=True).aggregate(valor=Sum('valortotal'))['valor'], 2)

        return anuladofactura + anuladorecibo
        # return null_to_numeric(self.pago_set.filter(factura__valida=False, status=True).aggregate(valor=Sum('valortotal'))['valor'], 2)

    def total_pagado(self):
        # return null_to_decimal(self.pago_set.filter(rubro__status=True).exclude(pagoliquidacion__isnull=False).distinct().aggregate(valor=Sum('valortotal'))['valor'], 2)
        return null_to_decimal(self.pago_set.filter(status=True, rubro__status=True).exclude(
            pagoliquidacion__isnull=False).distinct().aggregate(valor=Sum('valortotal'))['valor'], 2)

    def adeudado(self):
        return float(self.valor) - self.total_pagado()

    def total_liquidado(self):
        return null_to_decimal(
            self.pago_set.filter(pagoliquidacion__isnull=False).distinct().aggregate(valor=Sum('valortotal'))['valor'],
            2)

    def pagos_liquidados(self):
        ids = []
        for id in self.pago_set.filter(pagoliquidacion__isnull=False).values_list('id', flat=True):
            ids.append(id)
        return ids

    def total_adeudado(self):
        return self.valor_total() - self.total_pagado() - self.total_liquidado()

    def es_notadebito(self):
        return self.rubronotadebito_set.exists()

    def tiene_recibo(self):
        return self.reciborubro_set.exists()

    def recibo(self):
        if self.tiene_recibo():
            return self.reciborubro_set.all()[0]
        return None

    def tiene_recibo_valido(self):
        if self.tiene_recibo():
            recibo = self.reciborubro_set.all()[0]
            return recibo.es_valido()
        return False

    def generar_recibo(self):
        if COBRA_COMISION_BANCO:
            self.reciborubro_set.all().delete()
            recibo = ReciboRubro(rubro=self,
                                 fecha=datetime.now().date(),
                                 valorcomision=Decimal(COMISION_BANCO_PACIFICO),
                                 valortotal=self.valortotal + Decimal(COMISION_BANCO_PACIFICO),
                                 fechavence=self.fechavence)
            recibo.save()

    def rubro_devolucion(self):
        return self.tipo_id == 2951

    def nombre_usuario(self):
        if self.usuario_creacion:
            if not self.usuario_creacion.is_superuser:
                return self.usuario_creacion
        return None

    def anio_mes(self):
        anio = str(self.fechavence.year)
        mes = str(self.fechavence.month)
        # if self.relacionados:
        #     if self.relacionados.fechavence.year == self.fechavence.year and self.relacionados.fechavence.month == self.fechavence.month:
        #         if len(mes) == 1:
        #             mes = '0' + mes
        #         return anio+mes+str(self.relacionados.id)
        #     else:
        #         if len(mes) == 1:
        #             mes = '0' + mes
        #         return anio+mes+str(self.id)
        if len(mes) == 1:
            mes = '0' + mes
        return anio + mes + str(self.id)

    def anio_vence(self):
        return self.fechavence.year

    def mostrar_tipo(self):
        if self.tipo.tiporubro:
            return TIPO_RUBRO[self.tipo.tiporubro - 1][1]

    def codigo_intermatico(self):
        # if self.relacionados:
        #     if self.relacionados.fechavence.year == self.fechavence.year and self.relacionados.fechavence.month == self.fechavence.month:
        #         return f"{self.fechavence.year}{self.fechavence.month}{self.relacionados.id}"
        #     else:
        #         return f"{self.fechavence.year}{self.fechavence.month}{self.id}"
        # else:
        #     return f"{self.fechavence.year}{self.fechavence.month}{self.id}"
        anio = str(self.fechavence.year)
        mes = str(self.fechavence.month)
        if len(mes) == 1:
            mes = '0' + mes
        return f"{anio}{mes}{self.id}"

    def bloqueo_matricula_actualizar(self):
        if self.matricula:
            if self.matricula.inscripcion.carrera.mi_coordinacion2() in [1, 2, 3, 4, 5,
                                                                         9] and self.matricula.bloqueomatricula and not self.matricula.retiradomatricula:
                rubrospagados = self.matricula.rubro_set.values('id').filter(cancelado=True, status=True).count()
                rubrosdebe = self.matricula.rubro_set.values('id').filter(status=True).count()
                if rubrospagados == rubrosdebe:
                    self.matricula.bloqueomatricula = False
                    self.matricula.save()
                    usermoodle = self.matricula.inscripcion.persona.usuario.username
                    if self.matricula.inscripcion.carrera.mi_coordinacion2() == 9:
                        cnmoodle = connections['db_moodle_virtual'].cursor()
                    else:
                        if self.matricula.inscripcion.carrera.modalidad in (1,2):
                            cnmoodle = connections['aulagradoa'].cursor()
                        elif self.matricula.inscripcion.carrera.modalidad == 3:
                            cnmoodle = connections['aulagradob'].cursor()
                        else:
                            cnmoodle = connections['moodle_db'].cursor()
                    if usermoodle and cnmoodle:
                        # Consulta en mooc_user
                        sql = """Select id From mooc_user Where suspended=1 and username='%s'""" % (usermoodle)
                        cnmoodle.execute(sql)
                        registro = cnmoodle.fetchall()
                        if registro:
                            sql = """Update mooc_user Set suspended=0 Where username='%s'""" % (usermoodle)
                            cnmoodle.execute(sql)

    def total_generado_epunemi(self):
        cursor = connections['epunemi'].cursor()
        sql = """SELECT valor FROM sagest_rubro WHERE idrubrounemi=%s AND status=TRUE AND anulado=FALSE; """ % (self.id)
        cursor.execute(sql)
        registrorubro = cursor.fetchone()
        if registrorubro is not None:
            return registrorubro[0]
        else:
            return 0

    def estado_rub_epunemi(self):
        cursor = connections['epunemi'].cursor()
        sql = """SELECT cancelado FROM sagest_rubro WHERE idrubrounemi=%s AND status=TRUE AND anulado=FALSE; """ % (self.id)
        cursor.execute(sql)
        registrorubro = cursor.fetchone()
        if registrorubro is not None:
            if registrorubro[0] == True:
                return True
            else:
                return False
        else:
            return False

    def saldo_epunemi(self):
        cursor = connections['epunemi'].cursor()
        sql = """SELECT saldo FROM sagest_rubro WHERE idrubrounemi=%s AND status=TRUE AND anulado=FALSE; """ % (self.id)
        cursor.execute(sql)
        registrorubro = cursor.fetchone()
        if registrorubro is not None:
            return registrorubro[0]
        else:
            return 0

    def pagado_epunemi(self):
        cursor = connections['epunemi'].cursor()
        sql = """SELECT SUM(pago.valortotal) FROM sagest_pago pago WHERE pago."status" = TRUE AND pago.rubro_id = %s""" % (self.id)
        cursor.execute(sql)
        registrorubro = cursor.fetchone()
        if registrorubro is not None:
            return registrorubro[0]
        else:
            return 0

    def procesar_solicitud(self):
        if null_to_numeric(self.solicitud_id) > 0:
            eSolicitud = self.solicitud
            eSolicitud.procesar_pagos(self)

    def delete_cache(self):
        from sga.templatetags.sga_extras import encrypt
        if self.persona:
            if cache.has_key(f"notificacion_deuda_persona_id_{encrypt(self.persona_id)}"):
                cache.delete(f"notificacion_deuda_persona_id_{encrypt(self.persona_id)}")
            if cache.has_key(f"data__persona_id_{encrypt(self.persona_id)}_serializer_congresos"):
                cache.delete(f"data__persona_id_{encrypt(self.persona_id)}_serializer_congresos")

    def delete(self, *args, **kwargs):
        if self.tiene_pagos():
            raise NameError(u"Tiene pagos generados")
        self.delete_cache()
        super(Rubro, self).delete(*args, **kwargs)

    def procesar_venta(self):
        from posgrado.models import VentasProgramaMaestria
        if self.inscripcion:
            if self.id in self.inscripcion.ids_rubros():
                self.inscripcion.vendido = True
                self.inscripcion.save()

                if not VentasProgramaMaestria.objects.filter(status=True, inscripcioncohorte=self.inscripcion).exists():
                    if self.inscripcion.tiene_pedidoonline_kushki():
                        venta = VentasProgramaMaestria(inscripcioncohorte=self.inscripcion,
                                                       fecha=datetime.now().date(),
                                                       hora=datetime.now().time(),
                                                       asesor=self.inscripcion.asesor,
                                                       mediopago='PEDIDO ONLINE - TARJETA DE CR√âDITO',
                                                       facturado=True,
                                                       valida=True)
                        venta.save()
                    else:
                        venta = VentasProgramaMaestria(inscripcioncohorte=self.inscripcion,
                                                       fecha=datetime.now().date(),
                                                       hora=datetime.now().time(),
                                                       asesor=self.inscripcion.asesor,
                                                       mediopago='VENTA DIRECTA DE CAJA',
                                                       facturado=True,
                                                       valida=True)
                        venta.save()
                else:
                    venta = VentasProgramaMaestria.objects.filter(status=True, inscripcioncohorte=self.inscripcion).first()
                    if self.inscripcion.tiene_pedidoonline_deposito() or self.inscripcion.tiene_pedidoonline_transferencia() or self.inscripcion.tiene_pedidoonline_kushki():
                        venta.facturado = True
                        venta.valida = True
                        venta.save()

    def notificar_productos_secretaria(self):
        from secretaria.models import HistorialSolicitud
        from sga.funciones import no_laborable
        from pdip.models import ContratoDip

        if self.tipo_id == 3403 and self.solicitud:
            if self.solicitud.servicio.proceso == 8 and self.solicitud.notificado_fisico == False:
                pagor = Pago.objects.filter(status=True, rubro=self).order_by('id').first()
                d = 1
                c = 0
                fechar = ''

                while c <= 3:
                    fechaa = pagor.fecha + timedelta(days=d)
                    if not no_laborable(fechaa) and fechaa.isoweekday() != 6 and fechaa.isoweekday() != 7:
                        c += 1
                        d += 1
                    else:
                        d += 1
                fechar = pagor.fecha + timedelta(days=d)

                horar = datetime.strptime('08:30:00', '%H:%M:%S').time()
                lugar = 'CAMPUS UNEMI - OFICINAS DE POSGRADO, PLANTA BAJA - SECRETAR√çA T√âCNICA DE POSGRADO'
                self.solicitud.fecha_retiro = fechar
                self.solicitud.hora_retiro = horar
                self.solicitud.lugar_retiro = lugar
                self.solicitud.notificado_fisico = True
                self.solicitud.save()

                if self.solicitud.origen_object_id == 55:
                    titulo = 'ENTREGA DE CERTIFICADO PERSONALIZADO'
                    cuerpo = f'Saludos cordiales, se comunica al maestrante {self.solicitud.perfil.persona} que su pago ha sido procesado hoy {pagor.fecha} y que podr√° descargar su certificado personalizado desde el m√≥dulo de Servicios de Secretar√≠a en la ventana de Mis pedidos, a partir del d√≠a {self.solicitud.fecha_retiro} (72 horas despues del pago procesado).'
                else:
                    titulo = 'ENTREGA DE CERTIFICADO F√çSICO'
                    cuerpo = f"Saludos cordiales, se comunica al maestrante {self.solicitud.perfil.persona} que su pago ha sido procesado hoy {pagor.fecha} y que podr√° acercarse a retirar su certificado f√≠sico a partir del d√≠a {self.solicitud.fecha_retiro} desde las {self.solicitud.hora_retiro} hasta las 17:00:00 (d√≠as laborales) en el {self.solicitud.lugar_retiro} (72 horas despu√©s del pago procesado). Por favor, acercarse en la fecha establecida para concluir con el proceso de entrega."

                notificacion4(titulo, cuerpo, self.solicitud.perfil.persona, None, '/alu_secretaria/mis_pedidos', self.solicitud.pk, 1, 'SIE', self.solicitud, self.solicitud.perfil)

                send_html_mail(u"Certificado personalizado habilitado para descarga, Secretar√≠a T√©cnica Posgrado." if self.solicitud.origen_object_id == 55 else u"Entrega de certificado f√≠sico, Secretar√≠a T√©cnica Posgrado.",
                    "emails/entrega_certificado_posgrado.html",
                    {'sistema': u'SGA', 'fecha': self.solicitud.fecha_retiro, 'hora': self.solicitud.hora_retiro,
                     'solicitud': self.solicitud,
                     'persona': self.solicitud.perfil.persona, 'lugar': self.solicitud.lugar_retiro},
                               self.solicitud.perfil.persona.lista_emails_envio(), [], [], cuenta=MY_CUENTAS_CORREOS[34][1])

                secretarias = Persona.objects.filter(id__in=[24378, 22456, 27604, 26991, 29369, 30993], status=True)

                for secretaria in secretarias:
                    if self.solicitud.origen_object_id == 55:
                        titulo = "SOLICITUD DE CERTIFICADO PERSONALIZADO"
                        cuerpo = f"Se informa a todo el personal de Secretar√≠a T√©cnica Posgrado que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por la elaboraci√≥n de un certificado personalizado. Por favor, atender dicha solicitud lo m√°s pronto posible, puesto que ya se notific√≥ al maestrante que puede descargar el certificado a partir del {self.solicitud.fecha_retiro}."
                    else:
                        titulo = "SOLICITUD DE CERTIFICADO F√çSICO"
                        cuerpo = f"Se informa a todo el personal de Secretar√≠a T√©cnica Posgrado que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por la elaboraci√≥n de un certificado f√≠sico. Por favor, atender dicha solicitud lo m√°s pronto posible, puesto que ya se notific√≥ al maestrante que puede retirar el certificado a partir del {self.solicitud.fecha_retiro}."

                    notificacion2(titulo, cuerpo, secretaria, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), secretaria.pk, 1, 'sga', secretaria)

        if self.tipo_id == 3439 and self.solicitud and self.solicitud.notificado_fisico == False and self.solicitud.origen_object_id == 58:
            if self.solicitud.perfil.inscripcion.estado_gratuidad != 1 or self.solicitud.perfil.inscripcion.graduado() or self.solicitud.perfil.inscripcion.egresado():
                self.solicitud.notificado_fisico = True
                self.solicitud.save()

                observacion = f'Se ha procesado correctamente el pago de {self.valor} por concepto de {self.nombre} del maestrante {self.persona}'
                eHistorialSolicitud = HistorialSolicitud(solicitud=self.solicitud,
                                                         observacion=observacion,
                                                         fecha=datetime.now().date(),
                                                         hora=datetime.now().time(),
                                                         estado=self.solicitud.estado,
                                                         responsable_id=1)
                eHistorialSolicitud.save()

                titulo = 'CERTIFICADO PERSONALIZADO PAGADO'
                cuerpo = f"Saludos cordiales, se comunica al maestrante {self.solicitud.perfil.persona} que su pago por concepto de certificado personalizado ha sido procesado correctamente. Se le comunicar√° v√≠a SGA y correo electr√≥nico cuando su certificado est√© terminado y subido en el sistema."

                notificacion4(titulo, cuerpo, self.solicitud.perfil.persona, None, '/alu_secretaria/mis_pedidos', self.solicitud.pk, 1, 'SIE', self.solicitud, self.solicitud.perfil)

                if self.solicitud.perfil.inscripcion.carrera.coordinacion_carrera().id == 1:
                    secretarias = Persona.objects.filter(usuario__groups__name='SOLICITUDES_FACS')

                    for secretaria in secretarias:
                        titulo = "ELABORACI√ìN DE CERTIFICADO PERSONALIZADO DE PREGRADO"
                        cuerpo = f"Se informa a {secretaria} que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por la elaboraci√≥n de un certificado personalizado. Por favor, atender dicha solicitud."

                        notificacion2(titulo, cuerpo, secretaria, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), secretaria.pk, 1, 'sga', secretaria)
                if self.solicitud.perfil.inscripcion.carrera.coordinacion_carrera().id in [3, 2]:
                    if self.solicitud.perfil.inscripcion.carrera.id in [134, 138, 244, 7, 130, 160, 246, 89, 190, 161, 6, 162, 92, 141, 95, 225, 140, 61]:
                        secretarias = Persona.objects.filter(usuario__groups__name='SOLICITUDES_ASISTENTE_1')

                        for secretaria in secretarias:
                            titulo = "ELABORACI√ìN DE CERTIFICADO PERSONALIZADO DE PREGRADO"
                            cuerpo = f"Se informa a {secretaria} que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por la elaboraci√≥n de un certificado personalizado. Por favor, atender dicha solicitud."

                            notificacion2(titulo, cuerpo, secretaria, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), secretaria.pk, 1, 'sga', secretaria)

                    if self.solicitud.perfil.inscripcion.carrera.id in [188, 9, 145, 91, 164, 8, 43, 165, 11, 128, 158, 245, 248, 10, 88, 144, 16, 12, 126, 242, 163, 93]:
                        secretarias = Persona.objects.filter(usuario__groups__name='SOLICITUDES_ASISTENTE_2')

                        for secretaria in secretarias:
                            titulo = "ELABORACI√ìN DE CERTIFICADO PERSONALIZADO DE PREGRADO"
                            cuerpo = f"Se informa a {secretaria} que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por la elaboraci√≥n de un certificado personalizado. Por favor, atender dicha solicitud."

                            notificacion2(titulo, cuerpo, secretaria, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), secretaria.pk, 1, 'sga', secretaria)

                    if self.solicitud.perfil.inscripcion.carrera.id in [132, 136, 243, 18, 137, 58, 152, 5, 159, 15, 131, 143, 247, 80]:
                        secretarias = Persona.objects.filter(usuario__groups__name='SOLICITUDES_ASISTENTE_3')

                        for secretaria in secretarias:
                            titulo = "ELABORACI√ìN DE CERTIFICADO PERSONALIZADO DE PREGRADO"
                            cuerpo = f"Se informa a {secretaria} que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por la elaboraci√≥n de un certificado personalizado. Por favor atender dicha solicitud."

                            notificacion2(titulo, cuerpo, secretaria, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), secretaria.pk, 1, 'sga', secretaria)

                if self.solicitud.perfil.inscripcion.carrera.coordinacion_carrera().id == 4:
                    secretarias = Persona.objects.filter(usuario__groups__name='SOLICITUDES_FACI')

                    for secretaria in secretarias:
                        titulo = "ELABORACI√ìN DE CERTIFICADO PERSONALIZADO DE PREGRADO"
                        cuerpo = f"Se informa a {secretaria} que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por la elaboraci√≥n de un certificado personalizado. Por favor, atender dicha solicitud."

                        notificacion2(titulo, cuerpo, secretaria, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), secretaria.pk, 1, 'sga', secretaria)
                if self.solicitud.perfil.inscripcion.carrera.coordinacion_carrera().id == 5:
                    secretarias = Persona.objects.filter(usuario__groups__name='SOLICITUDES_FACE')

                    for secretaria in secretarias:
                        titulo = "ELABORACI√ìN DE CERTIFICADO PERSONALIZADO DE PREGRADO"
                        cuerpo = f"Se informa a {secretaria} que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por la elaboraci√≥n de un certificado personalizado. Por favor atender dicha solicitud."

                        notificacion2(titulo, cuerpo, secretaria, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), secretaria.pk, 1, 'sga', secretaria)

        if self.tipo_id == 3440 and self.solicitud and self.solicitud.notificado_fisico == False and self.solicitud.origen_object_id == 59:
            if self.solicitud.perfil.inscripcion.estado_gratuidad != 1 or self.solicitud.perfil.inscripcion.graduado() or self.solicitud.perfil.inscripcion.egresado():
                self.solicitud.notificado_fisico = True
                self.solicitud.save()

                observacion = f'Se ha procesado correctamente el pago de {self.valor} por concepto de {self.nombre} del maestrante {self.persona}'
                eHistorialSolicitud = HistorialSolicitud(solicitud=self.solicitud,
                                                         observacion=observacion,
                                                         fecha=datetime.now().date(),
                                                         hora=datetime.now().time(),
                                                         estado=self.solicitud.estado,
                                                         responsable_id=1)
                eHistorialSolicitud.save()

                titulo = 'CERTIFICADO PERSONALIZADO PAGADO'
                cuerpo = f"Saludos cordiales, se comunica al maestrante {self.solicitud.perfil.persona} que su pago por concepto de certificado personalizado ha sido procesado correctamente. Se le comunicar√° v√≠a SGA y correo electr√≥nico cuando su certificado est√© terminado y subido en el sistema."

                notificacion4(titulo, cuerpo, self.solicitud.perfil.persona, None, '/alu_secretaria/mis_pedidos', self.solicitud.pk, 1, 'SIE', self.solicitud, self.solicitud.perfil)

                secretarias = Persona.objects.filter(usuario__groups__name='SOLICITUDES_NIVELACION')

                for secretaria in secretarias:
                    titulo = "ELABORACI√ìN DE CERTIFICADO PERSONALIZADO DE NIVELACI√ìN"
                    cuerpo = f"Se informa a {secretaria} que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por la elaboraci√≥n de un certificado personalizado. Por favor, atender dicha solicitud."

                    notificacion2(titulo, cuerpo, secretaria, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), secretaria.pk, 1, 'sga', secretaria)

        if self.tipo_id == 3401 and self.solicitud and self.solicitud.notificado_fisico == False:
            self.solicitud.notificado_fisico = True
            self.solicitud.save()

            if self.solicitud.estado == 1:
                self.solicitud.estado = 10
                self.solicitud.save()

            observacion = f'Se ha procesado correctamente el pago de {self.valor} por concepto de {self.nombre} del maestrante {self.persona}'
            eHistorialSolicitud = HistorialSolicitud(solicitud=self.solicitud,
                                                     observacion=observacion,
                                                     fecha=datetime.now().date(),
                                                     hora=datetime.now().time(),
                                                     estado=self.solicitud.estado,
                                                     responsable_id=1)
            eHistorialSolicitud.save()

            pagor = Pago.objects.filter(status=True, rubro=self).order_by('id').first()
            d = 1
            c = 0
            fechar = ''

            while c <= 5:
                fechaa = pagor.fecha + timedelta(days=d)
                if not no_laborable(fechaa) and fechaa.isoweekday() != 6 and fechaa.isoweekday() != 7:
                    c += 1
                    d += 1
                else:
                    d += 1
            fechar = pagor.fecha + timedelta(days=d)

            titulo = 'SOLICITUD DE TITULACI√ìN EXTRAORDINARIA PAGADA'
            cuerpo = f"Saludos cordiales, se comunica al maestrante {self.solicitud.perfil.persona} que su pago ha sido procesado hoy {pagor.fecha}. El personal administrativo se encuentra realizando su informe t√©cnico de pertinencia, con el objetivo de ver su aplicabilidad al proceso de titulaci√≥n extraordinaria. Se le notificar√° si su respuesta es afirmativa o negativa el d√≠a {fechar}."

            notificacion4(titulo, cuerpo, self.solicitud.perfil.persona, None, '/alu_secretaria/mis_pedidos', self.solicitud.pk, 1, 'SIE', self.solicitud, self.solicitud.perfil)

            secretarias = Persona.objects.filter(id__in=variable_valor('PERSONAL_SECRETARIA'), status=True)

            coordinadores = ContratoDip.objects.filter(status=True, cargo__nombre__icontains='COORDINADOR',
                                                       contratocarrera__carrera=self.solicitud.perfil.inscripcion.carrera,
                                                       fechainicio__lte=datetime.now().date(),
                                                       fechafin__gte=datetime.now().date())

            for secretaria in secretarias:
                titulo = "REALIZACI√ìN DEL INFORME T√âCNICO DE PERTINENCIA"
                cuerpo = f"Se informa a todo el personal de Secretar√≠a T√©cnica Posgrado que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por la elaboraci√≥n del informe t√©cnico de pertinencia para ver su aplicabilidad al proceso de titulaci√≥n extraordinaria. Por favor, atender dicha solicitud lo m√°s pronto posible, puesto que ya se notific√≥ al maestrante que tendr√° una respuesta a su solicitud el d√≠a {fechar}."

                notificacion2(titulo, cuerpo, secretaria, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), secretaria.pk, 1, 'sga', secretaria)

            for coordinador in coordinadores:
                titulo = "REALIZACI√ìN DEL INFORME T√âCNICO DE PERTINENCIA"
                cuerpo = f"Se informa a los coordinadores de apoyo de la {self.solicitud.perfil.inscripcion.carrera} que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por la elaboraci√≥n del informe t√©cnico de pertinencia para ver su aplicabilidad al proceso de titulaci√≥n extraordinaria. Por favor, atender dicha solicitud lo m√°s pronto posible, puesto que tendr√° una respuesta a su solicitud el d√≠a {fechar}."

                notificacion2(titulo, cuerpo, coordinador.persona, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), coordinador.persona.pk, 1, 'sga', coordinador.persona)

        if self.tipo_id == 3442 and self.solicitud and self.solicitud.notificado_segundorubro == False:
            self.solicitud.notificado_segundorubro = True
            self.solicitud.estado = 15
            self.solicitud.save()

            observacion = f'Se ha procesado correctamente el pago de {self.valor} por concepto de {self.nombre} del maestrante {self.persona}'
            eHistorialSolicitud = HistorialSolicitud(solicitud=self.solicitud,
                                                     observacion=observacion,
                                                     fecha=datetime.now().date(),
                                                     hora=datetime.now().time(),
                                                     estado=self.solicitud.estado,
                                                     responsable_id=1)
            eHistorialSolicitud.save()

            pagor = Pago.objects.filter(status=True, rubro=self).order_by('id').first()
            d = 1
            c = 0
            fechar = ''

            while c <= 3:
                fechaa = pagor.fecha + timedelta(days=d)
                if not no_laborable(fechaa) and fechaa.isoweekday() != 6 and fechaa.isoweekday() != 7:
                    c += 1
                    d += 1
                else:
                    d += 1
            fechar = pagor.fecha + timedelta(days=d)

            titulo = 'NOTIFICACI√ìN DE CRONOGRAMA'
            cuerpo = f"Saludos cordiales, se comunica al maestrante {self.solicitud.perfil.persona} que su pago por el ingreso al proceso de titulaci√≥n extraordinaria ha sido procesado hoy {pagor.fecha}. El personal administrativo se encuentra realizando su cronograma de titulaci√≥n extraordinaria, el cual se le notificar√° el d√≠a {fechar}."

            notificacion4(titulo, cuerpo, self.solicitud.perfil.persona, None, '/alu_secretaria/mis_pedidos', self.solicitud.pk, 1, 'SIE', self.solicitud, self.solicitud.perfil)

            secretarias = Persona.objects.filter(id__in=variable_valor('PERSONAL_SECRETARIA'), status=True)

            for secretaria in secretarias:
                titulo = "CRONOGRAMA DE TITULACI√ìN EXTRAORDINARIA"
                cuerpo = f"Se informa a todo el personal de Secretar√≠a T√©cnica Posgrado que el maestrante {self.solicitud.perfil.persona} ha realizado el pago por el ingreso al proceso de titulaci√≥n extraordinaria. Por favor, comenzar la elaboraci√≥n del cronograma de titulaci√≥n, puesto que ya se le notific√≥ al maestrante que recibir√° su cronograma a partir del d√≠a {fechar}."

                notificacion2(titulo, cuerpo, secretaria, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), secretaria.pk, 1, 'sga', secretaria)

    def notificar_pago_homologacion(self):
        try:
            from secretaria.models import HistorialSolicitud
            if self.solicitud and self.solicitud.inscripcioncohorte and self.tipo.id == 3456 and not self.solicitud.notificado_fisico:
                titulo = "HOMOLOGACI√ìN INTERNA POSGRADO PAGADA"
                cuerpo = f"Se informa al coordinador del programa de {self.solicitud.inscripcioncohorte.cohortes.maestriaadmision.carrera} que el maestrante {self.solicitud.perfil.persona} ha realizado el pago respectivo por concepto de aplicaci√≥n de homologaci√≥n interna de Posgrado. Por favor, ir a la ficha de homologaci√≥n del solicitante y aplicar la homologaci√≥n de las asignaturas favorables."

                notificacion2(titulo, cuerpo, self.solicitud.inscripcioncohorte.cohortes.coordinador, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), self.solicitud.inscripcioncohorte.cohortes.coordinador.pk, 1, 'sga', self.solicitud.inscripcioncohorte.cohortes.coordinador)

                cuerpo2 = f"Saludos cordiales, se comunica al maestrante {self.solicitud.perfil.persona} que su pago por concepto de aplicaci√≥n de homologaci√≥n interna de asignaturas posgrado ha sido procesado correctamente. Su homologaci√≥n ser√° ejecutada en los pr√≥ximos d√≠as y podr√° verla reflejada en el m√≥dulo de R√©cord Acad√©mico."

                notificacion4(titulo, cuerpo2, self.solicitud.perfil.persona, None, '/alu_secretaria/service/asignaturashomologa', self.solicitud.pk, 1, 'SIE', self.solicitud, self.solicitud.perfil)

                secretaria = Persona.objects.get(id=variable_valor('ENCARGADA_ADMISION'), status=True)

                cuerpo3 = f"Se informa a la encargada de admisi√≥n que el maestrante {self.solicitud.perfil.persona} ha realizado el pago respectivo por concepto de aplicaci√≥n de homologaci√≥n interna de Posgrado. Por favor, dar seguimiento."

                notificacion2(titulo, cuerpo3, secretaria, None, '/adm_secretaria?action=versolicitudes&id=' + str(self.solicitud.servicio.categoria.id) + '&ids=0&s=' + str(self.solicitud.codigo), secretaria.pk, 1, 'sga', secretaria)

                observacion = f'Se ha procesado correctamente el pago de {self.valor} por concepto de {self.nombre} del maestrante {self.persona}. Adem√°s se ha notificado al coordinador {self.solicitud.inscripcioncohorte.cohortes.coordinador} aplicar la homologaci√≥n.'

                self.solicitud.estado = 26
                self.notificado_fisico = True
                self.solicitud.save()

                if not HistorialSolicitud.objects.filter(status=True, solicitud=self.solicitud, estado=26).exists():
                    eHistorialSolicitud = HistorialSolicitud(solicitud=self.solicitud,
                                                             observacion=observacion,
                                                             fecha=datetime.now().date(),
                                                             hora=datetime.now().time(),
                                                             estado=26,
                                                             responsable_id=1)
                    eHistorialSolicitud.save()
        except Exception as ex:
            pass

    def prevent_save(self):
        from pdip.models import ContratoDip
        self.nombre = self.nombre.upper().strip()
        self.observacion = self.observacion.upper().strip()
        if not self.id:
            if self.iva.porcientoiva:
                self.valoriva = self.valor_iva()
            else:
                self.valoriva = 0
        self.valortotal = self.valor_total()
        self.saldo = self.total_adeudado()
        self.cancelado = (self.saldo <= 0)

        if self.saldo <= 0:
            self.procesar_venta()
            self.notificar_productos_secretaria()
            self.notificar_pago_homologacion()

    def save(self, *args, **kwargs):
        try:
            self.prevent_save()
            self.bloqueo_matricula_actualizar()
            self.procesar_solicitud()
            self.delete_cache()
            super(Rubro, self).save(*args, **kwargs)
        except Exception as ex:
            raise NameError(f"Error save rubro: {ex} - linea: {sys.exc_info()[-1].tb_lineno}")

        # Si es Rubro de posgrado y tiene matricula
        # if self.tipo.tiporubro == 1 and self.matricula:
        #     self.matricula.desbloquear_matricula_posgrado()


class logRubros(ModeloBase):
    accion = models.CharField(max_length=100, verbose_name='Acci√≥n')
    usuario = models.ForeignKey("auth.User", on_delete=models.PROTECT, blank=True, null=True, verbose_name='Usuario',
                                related_name='+')
    idrubro = models.CharField(default='', max_length=500, blank=True, null=True, verbose_name='Id Rubros')
    rubroname = models.CharField(default='', max_length=500, blank=True, null=True, verbose_name='Rubros')
    cedulapersona = models.CharField(default='', max_length=500, blank=True, null=True, verbose_name='Cedula Persona')
    persona = models.CharField(default='', max_length=500, blank=True, null=True, verbose_name='Persona')
    datos_json = models.TextField(verbose_name="Datos en formato json", null=True, blank=True)

    def __str__(self):
        return "{} - {} - [{}]".format(self.usuario.username, self.idrubro, self.accion)

    class Meta:
        verbose_name = 'Auditor√≠a Usuario'
        verbose_name_plural = 'Auditor√≠as Usuarios'
        ordering = ('-fecha_creacion', 'pk')


class ReciboRubro(ModeloBase):
    rubro = models.ForeignKey(Rubro, verbose_name=u'Rubro', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha')
    valorcomision = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Comisi√≥n')
    valortotal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Total')
    fechavence = models.DateField(verbose_name=u'Fecha', blank=True, null=True)

    def es_valido(self):
        if self.fechavence:
            return datetime.now().date() >= self.fechavence
        return True


class RubroNotaDebito(ModeloBase):
    rubro = models.ForeignKey(Rubro, verbose_name=u'Rubro', on_delete=models.CASCADE)
    motivo = models.CharField(default='', max_length=200, verbose_name=u'Motivo')

    def __str__(self):
        return u'%s' % self.motivo

    class Meta:
        verbose_name = u"Rubro nota de debito"
        verbose_name_plural = u"Rubros notas de debito"
        unique_together = ('rubro',)

    def save(self, *args, **kwargs):
        self.motivo = self.motivo.upper().strip()
        super(RubroNotaDebito, self).save(*args, **kwargs)


class SesionCaja(ModeloBase):
    caja = models.ForeignKey(LugarRecaudacion, verbose_name=u'Caja', on_delete=models.CASCADE)
    anioejercicio = models.ForeignKey(AnioEjercicio, verbose_name=u'Anio Ejercicio', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha')
    fondo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Fondo inicial')
    abierta = models.BooleanField(default=True, verbose_name=u'Abierta')
    numero = models.IntegerField(default=0, verbose_name=u'Numero arqueo')

    def __str__(self):
        return u'%s - %s' % (self.fecha.strftime("%d-%m-%Y"), self.caja)

    class Meta:
        verbose_name = u"Sesion de recaudaci√≥n de caja"
        verbose_name_plural = u"Sesiones de recaudaci√≥n de caja"
        ordering = ['caja', 'fecha']
        unique_together = ('caja', 'fecha',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return SesionCaja.objects.filter(Q(caja__nombre__icontains=q) | Q(caja__persona__apellido1__icontains=q) | Q(
            caja__persona__apellido2__icontains=q) | Q(caja__persona__nombres__icontains=q) | Q(
            caja__persona__cedula__icontains=q)).distinct().order_by('-fecha', '-hora')[:limit]

    def flexbox_repr(self):
        return self.caja.nombre + " " + self.fecha.strftime("%d-%m-%Y") + " " + str(self.id)

    def total_efectivo_sesion(self):
        return null_to_decimal(
            Pago.objects.filter(sesion=self, efectivo=True, factura__valida=True).distinct().aggregate(
                valor=Sum('valortotal'))['valor'], 2)

    def cantidad_facturas_sesion(self):
        return Factura.objects.filter(pagos__sesion=self, valida=True).distinct().count()

    def cantidad_facturasanuladas_sesion(self):
        return Factura.objects.filter(pagos__sesion=self, valida=False).distinct().count()

    def cantidad_cheques_sesion(self):
        return PagoCheque.objects.filter(pagos__sesion=self, pagos__factura__valida=True).distinct().count()

    def cantidad_cuentasxcobrar_sesion(self):
        return PagoCuentaporCobrar.objects.filter(pagos__sesion=self, pagos__factura__valida=True).distinct().count()

    def total_cheque_sesion(self):
        return null_to_decimal(
            Pago.objects.filter(sesion=self, pagocheque__isnull=False, factura__valida=True).distinct().aggregate(
                valor=Sum('valortotal'))['valor'], 2)

    def total_electronico_sesion(self):
        return null_to_decimal(Pago.objects.filter(sesion=self, pagodineroelectronico__isnull=False,
                                                   factura__valida=True).distinct().aggregate(valor=Sum('valortotal'))[
                                   'valor'], 2)

    def total_cuentasxcobrar_sesion(self):
        return null_to_decimal(Pago.objects.filter(sesion=self, pagocuentaporcobrar__isnull=False,
                                                   factura__valida=True).distinct().aggregate(valor=Sum('valortotal'))[
                                   'valor'], 2)

    def cantidad_tarjetas_sesion(self):
        return PagoTarjeta.objects.filter(pagos__sesion=self, pagos__factura__valida=True).distinct().count()

    def total_tarjeta_sesion(self):
        return null_to_decimal(
            Pago.objects.filter(sesion=self, pagotarjeta__isnull=False, factura__valida=True).distinct().aggregate(
                valor=Sum('valortotal'))['valor'], 2)

    def cantidad_depositos_sesion(self):
        return PagoTransferenciaDeposito.objects.filter(pagos__sesion=self, deposito=True,
                                                        pagos__factura__valida=True).distinct().count()

    def total_deposito_sesion(self):
        return null_to_decimal(Pago.objects.filter(sesion=self, pagotransferenciadeposito__isnull=False,
                                                   pagotransferenciadeposito__deposito=True,
                                                   factura__valida=True).exclude(
            pagotransferenciadeposito__recaudacionventanilla=True).distinct().aggregate(valor=Sum('valortotal'))[
                                   'valor'], 2)

    def total_recibocaja_sesion(self):
        return null_to_decimal(
            ReciboCaja.objects.filter(sesioncaja=self).distinct().aggregate(valor=Sum('valor'))['valor'], 2)

    def cantidad_transferencias_sesion(self):
        return PagoTransferenciaDeposito.objects.filter(pagos__sesion=self, deposito=False,
                                                        pagos__factura__valida=True).distinct().count()

    def total_transferencia_sesion(self):
        return null_to_decimal(Pago.objects.filter(sesion=self, pagotransferenciadeposito__isnull=False,
                                                   pagotransferenciadeposito__deposito=False,
                                                   factura__valida=True).distinct().aggregate(valor=Sum('valortotal'))[
                                   'valor'], 2)

    def total_sesion(self):
        return self.total_efectivo_sesion() + self.total_cheque_sesion() + self.total_deposito_sesion() + self.total_transferencia_sesion() + self.total_tarjeta_sesion() + self.total_recibocaja_sesion() + self.total_electronico_sesion() + self.total_cuentasxcobrar_sesion()

    def cierre_sesion(self):
        if self.cierresesioncaja_set.exists():
            return self.cierresesioncaja_set.all()[0]
        return None

    def generar_resumen_partida(self):
        if not self.resumenpartida_set.exists():
            for partida in Partida.objects.filter(tipootrorubro__rubro__pago__sesion=self).distinct():
                valor = null_to_decimal(
                    Pago.objects.filter(rubro__tipo__partida=partida, sesion=self).distinct().aggregate(
                        valor=Sum('valortotal'))['valor'], 2)
                resumenpartida = ResumenPartida(sesioncaja=self,
                                                partida=partida,
                                                valor=valor)
                resumenpartida.save()

    def save(self, *args, **kwargs):
        super(SesionCaja, self).save(*args, **kwargs)


class ResumenPartida(ModeloBase):
    sesioncaja = models.ForeignKey(SesionCaja, verbose_name=u"Sesi√≥n de caja", on_delete=models.CASCADE)
    partida = models.ForeignKey(Partida, verbose_name=u"Partida", on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor partida')


class CierreSesionCaja(ModeloBase):
    sesion = models.ForeignKey(SesionCaja, verbose_name=u'Sesion de caja', on_delete=models.CASCADE)
    total = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total')
    totalefectivo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total')
    bill100 = models.IntegerField(default=0, verbose_name=u'Billetes de 100')
    bill50 = models.IntegerField(default=0, verbose_name=u'Billetes de 50')
    bill20 = models.IntegerField(default=0, verbose_name=u'Billetes de 20')
    bill10 = models.IntegerField(default=0, verbose_name=u'Billetes de 10')
    bill5 = models.IntegerField(default=0, verbose_name=u'Billetes de 5')
    bill2 = models.IntegerField(default=0, verbose_name=u'Billetes de 2')
    bill1 = models.IntegerField(default=0, verbose_name=u'Billetes de 1')
    mon1 = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monedas de 1')
    mon50 = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monedas de 50 centavos')
    mon25 = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monedas de 25 centavos')
    mon10 = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monedas de 10 centavos')
    mon5 = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monedas de 5 centavos')
    mon1c = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monedas de 1 centavo')
    deposito = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total en depositos')
    cheques = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total en cheques')
    transfer = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total en Transferencias')
    electronico = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                      verbose_name=u'Total en Dinero Electr√≥nico')
    tarjeta = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Tarjeta cr√©dito')
    recibocaja = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Recibos de caja')
    fecha = models.DateField(blank=True, null=True, verbose_name=u'Fecha')
    tesorero = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u'Tesorero',
                                 on_delete=models.CASCADE)

    def __str__(self):
        return u'Billetes cierre sesion: %s' % self.sesion

    class Meta:
        verbose_name = u"Resumen cierre de sesion de caja"
        verbose_name_plural = u"Resumenes cierre de sesion de caja"
        unique_together = ('sesion',)

    def total_100(self):
        return self.bill100 * 100

    def total_50(self):
        return self.bill50 * 50

    def total_20(self):
        return self.bill20 * 20

    def total_10(self):
        return self.bill10 * 10

    def total_5(self):
        return self.bill5 * 5

    def total_mon50(self):
        return float(self.mon50) * 0.5

    def total_mon25(self):
        return float(self.mon25) * 0.25

    def total_mon10(self):
        return float(self.mon10) * 0.1

    def total_mon5(self):
        return float(self.mon5) * 0.05

    def total_mon1c(self):
        return float(self.mon1c) * 0.01

    def save(self, *args, **kwargs):
        self.total = Decimal(
            (self.bill100 * Decimal(100)) + (self.bill50 * Decimal(50)) + (self.bill20 * Decimal(20)) + (
                        self.bill10 * Decimal(10)) + (self.bill5 * Decimal(5)) + (self.bill2 * Decimal(2)) + (
                        self.bill1 * Decimal(1)) + self.mon1 + (self.mon50 * Decimal(0.5)) + (
                        self.mon25 * Decimal(0.25)) + (self.mon10 * Decimal(0.10)) + (self.mon5 * Decimal(0.05)) + (
                        self.mon1c * Decimal(0.01)) + Decimal(self.deposito) + Decimal(self.tarjeta) + Decimal(
                self.transfer) + Decimal(self.electronico) + Decimal(self.cheques) + Decimal(self.recibocaja)).quantize(
            Decimal('.01'))
        self.totalefectivo = Decimal(
            (self.bill100 * Decimal(100)) + (self.bill50 * Decimal(50)) + (self.bill20 * Decimal(20)) + (
                        self.bill10 * Decimal(10)) + (self.bill5 * Decimal(5)) + (self.bill2 * Decimal(2)) + (
                        self.bill1 * Decimal(1)) + self.mon1 + (self.mon50 * Decimal(0.5)) + (
                        self.mon25 * Decimal(0.25)) + (self.mon10 * Decimal(0.10)) + (self.mon5 * Decimal(0.05)) + (
                        self.mon1c * Decimal(0.01))).quantize(Decimal('.01'))
        super(CierreSesionCaja, self).save(*args, **kwargs)


class TipoComprobanteRecaudacion(ModeloBase):
    nombre = models.CharField(default='', max_length=300, verbose_name=u'Tipo Comprobante')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo Comprobante Recaudacion"
        verbose_name_plural = u"Tipos Comprobantes Recaudacion"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(TipoComprobanteRecaudacion, self).save(*args, **kwargs)


class TipoMovimientoConciliacion(ModeloBase):
    nombre = models.CharField(default='', max_length=300, verbose_name=u'Tipo Comprobante')
    alias = models.CharField(default='', max_length=10, verbose_name=u'Alias')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo Movimiento Concilicacion"
        verbose_name_plural = u"Tipos Movimientos Conciliacion"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        self.alias = self.alias.upper().strip()
        super(TipoMovimientoConciliacion, self).save(*args, **kwargs)


class DetalleConciliacion(ModeloBase):
    cuentabanco = models.ForeignKey(CuentaBanco, related_name="+", verbose_name=u'Cuenta', on_delete=models.CASCADE)
    cuentabancoegreso = models.ForeignKey(CuentaBanco, related_name="+", blank=True, null=True, verbose_name=u'Cuenta',
                                          on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoMovimientoConciliacion, verbose_name=u'Tipo', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo')
    referencia = models.CharField(default='', max_length=50, verbose_name=u'Referencia')
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n')

    def __str__(self):
        return u'%s %s %s' % (self.tipo, self.fecha, self.valor)

    class Meta:
        verbose_name = u"Detalle Concialici√≥n"
        verbose_name_plural = u"Detalles Conciliaciones"
        ordering = ['-fecha']

    def puede_editarce(self):
        return SaldoCuentaBanco.objects.filter(fecha=self.fecha, cuentabanco=self.cuentabanco, estado=1).exists()

    def save(self, *args, **kwargs):
        self.referencia = self.referencia.upper().strip()
        self.observacion = self.observacion.upper().strip()
        super(DetalleConciliacion, self).save(*args, **kwargs)


class DetalleConciliacionTransferencia(ModeloBase):
    fecha = models.DateField(verbose_name=u'Fecha')
    cuentabanco = models.ForeignKey(CuentaBanco, related_name="+", verbose_name=u'Cuenta', on_delete=models.CASCADE)
    referencia = models.CharField(default='', max_length=50, verbose_name=u'Referencia')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo')
    conciliacionbancaria = models.ForeignKey(DetalleConciliacion, blank=True, null=True, verbose_name=u'Conciliaci√≥n',
                                             on_delete=models.CASCADE)

    def __str__(self):
        return u'%s %s' % (self.fecha, self.valor)

    class Meta:
        verbose_name = u"Detalle Concialici√≥n Transferencia"
        verbose_name_plural = u"Detalles Conciliaciones Transferencias"
        ordering = ['-fecha']

    def save(self, *args, **kwargs):
        self.referencia = self.referencia.upper().strip()
        super(DetalleConciliacionTransferencia, self).save(*args, **kwargs)


class ComprobanteRecaudacion(ModeloBase):
    numero = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'N√∫mero')
    nocur = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'N√∫mero CUR')
    tipocomprobanterecaudacion = models.ForeignKey(TipoComprobanteRecaudacion, verbose_name=u'Tipo de Comprobante',
                                                   on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha')
    fechanotacredito = models.DateField(verbose_name=u'Fecha Nota credito', blank=True, null=True)
    cuentadeposito = models.ForeignKey(CuentaBanco, verbose_name=u'Cuenta Dep√≥sito', on_delete=models.CASCADE)
    puntoemision = models.ForeignKey(PuntoVenta, verbose_name=u'Caja', on_delete=models.CASCADE)
    depositante = models.CharField(max_length=300, default='', verbose_name=u'Depositante')
    valortotal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Total')
    concepto = models.TextField(default='', verbose_name=u'Concepto')
    referencia = models.TextField(default='', verbose_name=u'Referencia')
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n')
    autoriza = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True,
                                 verbose_name=u'Persona Autoriza', on_delete=models.CASCADE)
    tesorero = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True,
                                 verbose_name=u'Persona Autoriza', on_delete=models.CASCADE)
    deposita = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True,
                                 verbose_name=u'Persona Autoriza', on_delete=models.CASCADE)
    estado = models.IntegerField(choices=ESTADO_PROCESO, blank=True, null=True, default=1)
    confirmado = models.BooleanField(default=False)
    fechaconfirmacion = models.DateField(verbose_name=u'Fecha confirmado', blank=True, null=True)
    devengado = models.BooleanField(default=False, blank=True)
    fechadevengado = models.DateField(verbose_name=u'Fecha devengado', blank=True, null=True)
    curdevengado = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'CUR Devengado')
    conceptodevengado = models.TextField(default='', verbose_name=u'Concepto devengado', blank=True, null=True)
    conceptopercibido = models.TextField(default='', verbose_name=u'Concepto percibido', blank=True, null=True)
    percibido = models.BooleanField(default=False, blank=True)
    curpercibido = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'CUR Percibido')
    fechapercibido = models.DateField(verbose_name=u'Fecha percibido', blank=True, null=True)
    fechabanco = models.DateField(verbose_name=u'Fecha Banco Central', blank=True, null=True)
    fechaesigef = models.DateField(verbose_name=u'Fecha Esigef', blank=True, null=True)
    conciliacionbancaria = models.ForeignKey(DetalleConciliacion, blank=True, null=True, verbose_name=u'Conciliaci√≥n',
                                             on_delete=models.CASCADE)
    jefepresupuesto = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True,
                                        verbose_name=u'Jefe Presupuesto', on_delete=models.CASCADE)
    personaconfirma = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True,
                                        verbose_name=u'Realiza presupuesto', on_delete=models.CASCADE)
    personaanula = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True,
                                     verbose_name=u'Realiza Anulacion', on_delete=models.CASCADE)
    personapercibe = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True,
                                       verbose_name=u'Realiza Percibir', on_delete=models.CASCADE)
    fechaanula = models.DateField(verbose_name=u'Fecha anula', blank=True, null=True)

    def __str__(self):
        return u'Conprobante Recaudaci√≥n %s - %s' % (self.tipocomprobanterecaudacion.nombre, self.numero)

    class Meta:
        verbose_name = u"Comprobante Recaudacion"
        verbose_name_plural = u"Comprobantes Recaudacion"

    def valor_partidas(self):
        valor1 = null_to_decimal(self.resumencomprobantepartida_set.aggregate(valor=Sum('valor'))['valor'], 2)
        valor2 = null_to_decimal(self.pago_set.filter(status=True).aggregate(valor=Sum('iva'))['valor'], 2)
        valor = valor1 + valor2
        return valor if valor else 0

    def mi_documento(self):
        if self.impresioncomprobantes_set.exists():
            return self.impresioncomprobantes_set.all()[0]
        return None

    def numerocurpercibido(self):
        if self.comprobanterecaudacioncurpercibido_set.exists():
            lista = [str(c.numerocur) for c in self.comprobanterecaudacioncurpercibido_set.all()]
            return ",".join(lista)
        return None

    def puede_confirmarse(self):
        return null_to_decimal(self.valortotal, 2) == null_to_decimal(self.valor_partidas(), 2)

    def total_costos(self):
        return null_to_decimal(self.centrocostotramiteingreso_set.all().aggregate(valor=Sum('valor'))['valor'], 2)

    def lista_partidas(self):
        lista = []
        for partida in self.resumencomprobantepartida_set.all():
            lista.append(partida.partida_id)
        return lista

    def verifica_asiento_devengado_percibido(self):
        try:
            valores = {"debedev": 0.00, "haberdev": 0.00, "debeper": 0.00, "haberper": 0.00}
            descuadre = False
            diarioper = None
            debeper = haberper = Decimal(0)

            if Diario.objects.filter(documento=self.numero, status=True, tipo=1).exists():
                diariodev = Diario.objects.filter(documento=self.numero, status=True, tipo=1)[0]
                debedev = Decimal(diariodev.valor_debe()).quantize(Decimal('.01'))
                haberdev = Decimal(diariodev.valor_haber()).quantize(Decimal('.01'))

                if Diario.objects.filter(documento=self.numero, status=True, tipo=2).exists():
                    diarioper = Diario.objects.filter(documento=self.numero, status=True, tipo=2)[0]
                    debeper = Decimal(diarioper.valor_debe()).quantize(Decimal('.01'))
                    haberper = Decimal(diarioper.valor_haber()).quantize(Decimal('.01'))

                if debedev != haberdev or self.valortotal != debedev or self.valortotal != haberdev:
                    descuadre = True

                if diarioper:
                    if debeper != haberper or self.valortotal != debeper or self.valortotal != haberper:
                        descuadre = True

                if descuadre:
                    valores["debedev"] = debedev
                    valores["haberdev"] = haberdev
                    valores["debeper"] = debeper
                    valores["haberper"] = haberper
                    return valores
                else:
                    return None

            return None
        except Exception as e:
            print(e)
            return None

    def save(self, *args, **kwargs):
        self.concepto = self.concepto.upper().strip()
        if self.conceptodevengado:
            self.conceptodevengado = self.conceptodevengado.upper().strip()
        if self.conceptopercibido:
            self.conceptopercibido = self.conceptopercibido.upper().strip()
        self.referencia = self.referencia.upper().strip()
        if self.observacion:
            self.observacion = self.observacion.upper().strip()
        self.depositante = self.depositante.upper().strip()
        super(ComprobanteRecaudacion, self).save(*args, **kwargs)


class ComprobanteRecaudacionCurPercibido(ModeloBase):
    comprobante = models.ForeignKey(ComprobanteRecaudacion, verbose_name=u'Comprobante Recaudaci√≥n',
                                    on_delete=models.CASCADE)
    numerocur = models.IntegerField(default=0, verbose_name=u'# CUR Percibido')
    fechabce = models.DateField(blank=True, null=True, verbose_name=u'Fecha Banco Central')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    afectatotal = models.BooleanField(default=True, verbose_name=u'Afecta al Total')
    tipocobro = models.ForeignKey(FormaDePago, blank=True, null=True, verbose_name=u'Forma Cobro',
                                  on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.numerocur

    class Meta:
        verbose_name = u"Cur Percibido"
        verbose_name_plural = u"Curs Percibido"
        ordering = ['numerocur']


class ReciboCaja(ModeloBase):
    numero = models.IntegerField(default=0, verbose_name=u"Numero")
    numerocompleto = models.CharField(default='', max_length=20, verbose_name=u"Numero Completo")
    sesioncaja = models.ForeignKey(SesionCaja, verbose_name=u'Sesi√≥n de caja', on_delete=models.CASCADE)
    partida = models.ForeignKey(PartidasSaldo, blank=True, null=True, verbose_name=u'Partida', on_delete=models.CASCADE)
    concepto = models.TextField(default='', verbose_name=u'Concepto')
    valor = models.DecimalField(default='0', max_digits=30, decimal_places=2, verbose_name=u'Valor')
    persona = models.ForeignKey('sga.Persona', verbose_name=u"Persona Entrega", on_delete=models.CASCADE)
    comprobante = models.ForeignKey(ComprobanteRecaudacion, blank=True, null=True,
                                    verbose_name=u'Comprobante Recaudaci√≥n', on_delete=models.CASCADE)
    fechacomprobante = models.DateField(verbose_name=u'Fecha Comprobante', blank=True, null=True)

    def __str__(self):
        return u'Recibo de caja $%s' % self.valor

    class Meta:
        verbose_name = u"Recibo de caja"
        verbose_name_plural = u"Recibos de caja"
        ordering = ['persona']

    def save(self, *args, **kwargs):
        self.concepto = self.concepto.upper().strip()
        super(ReciboCaja, self).save(*args, **kwargs)


class Pago(ModeloBase):
    sesion = models.ForeignKey(SesionCaja, blank=True, null=True, verbose_name=u'Sesion de caja',
                               on_delete=models.CASCADE)
    rubro = models.ForeignKey(Rubro, verbose_name=u'Rubros', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha')
    subtotal0 = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    subtotaliva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    iva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'IVA')
    valordescuento = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Total')
    valortotal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Total')
    efectivo = models.BooleanField(default=True, verbose_name=u'Pago en efectivo')
    epunemipago = models.BooleanField(default=False, verbose_name=u'Pago Epunemi')
    idpagoepunemi = models.IntegerField(default=0, verbose_name=u'Rubro epunemi')
    comprobante = models.ForeignKey(ComprobanteRecaudacion, blank=True, null=True,
                                    verbose_name=u'Comprobante Recaudaci√≥n', on_delete=models.CASCADE)

    def __str__(self):
        return u'Pago $%s' % self.valortotal

    class Meta:
        verbose_name = u"Pago"
        verbose_name_plural = u"Pagos"
        ordering = ['fecha']

    def subtotal(self):
        return self.subtotaliva if self.iva else self.subtotal0

    def total_sinimpuesto(self):
        return Decimal(self.subtotal0 + self.subtotaliva).quantize(Decimal('.01'))

    def tipo(self):
        if self.es_tarjeta():
            return "TARJETA"
        elif self.es_cheque():
            return "CHEQUE"
        elif self.es_deposito():
            return "DEPOSITO"
        elif self.es_transferencia():
            return "TRANSFERENCIA"
        elif self.es_electronico():
            return "DINERO ELECTRONICO"
        elif self.es_liquidacion():
            return "LIQUIDACION"
        elif self.es_epunemi():
            return "EPUNEMI"
        elif self.es_cuentaporcobrar():
            return "CUENTAXCOBRAR"
        else:
            return "EFECTIVO"

    def relacionado(self):
        if self.es_tarjeta():
            return self.pagotarjeta_set.all()[0]
        elif self.es_cheque():
            return self.pagocheque_set.all()[0]
        elif self.es_electronico():
            return self.pagodineroelectronico_set.all()[0]
        elif self.es_liquidacion():
            return self.pagoliquidacion_set.all()[0]
        elif self.es_epunemi():
            return self.pagoepunemi_set.all()[0]
        elif self.es_cuentaporcobrar():
            return self.pagocuentaporcobrar_set.all()[0]
        elif self.es_deposito() or self.es_transferencia():
            return self.pagotransferenciadeposito_set.all()[0]
        return None

    def es_chequevista(self):
        return self.relacionado().a_vista()

    def es_epunemi(self):
        return self.pagoepunemi_set.values("id").exists()

    def es_tarjeta(self):
        return self.pagotarjeta_set.values("id").exists()

    def es_chequepostfechado(self):
        return not self.relacionado().a_vista()

    def es_cheque(self):
        return self.pagocheque_set.values("id").exists()

    def es_transferencia(self):
        return self.pagotransferenciadeposito_set.values("id").filter(deposito=False).exists()

    def es_deposito(self):
        return self.pagotransferenciadeposito_set.values("id").filter(deposito=True).exists()

    def es_electronico(self):
        return self.pagodineroelectronico_set.values("id").exists()

    def es_liquidacion(self):
        return self.pagoliquidacion_set.values("id").filter(status=True).exists()

    def es_cuentaporcobrar(self):
        return self.pagocuentaporcobrar_set.values("id").exists()

    def factura(self):
        if self.factura_set.values("id").exists():
            return self.factura_set.all()[0]
        return None

    def recibocaja(self):
        if self.pagorecibocaja_set.values("id").exists():
            return self.pagorecibocaja_set.all()[0]
        return None

    def url_factura(self):
        cursor = connections['epunemi'].cursor()
        if not self.rubro.epunemi:
            return self.factura().pdfarchivo
        elif self.idpagoepunemi:
            sql = """
                SELECT fact.pdfarchivo
                FROM sagest_pago pa
                INNER JOIN sagest_factura_pagos fac_pag ON pa.id=fac_pag.pago_id
                INNER JOIN sagest_factura fact ON fact.id=fac_pag.factura_id
                WHERE pa.id=%s
            """ % (self.idpagoepunemi)
            cursor.execute(sql)
            row = cursor.fetchall()
            return row[0][0] if row.__len__() > 0 else None
        return None

    def codigo_factura(self):
        cursor = connections['epunemi'].cursor()
        if not self.rubro.epunemi:
            return self.factura().pdfarchivo
        elif self.idpagoepunemi:
            sql = """
                SELECT fact.numerocompleto
                FROM sagest_pago pa
                INNER JOIN sagest_factura_pagos fac_pag ON pa.id=fac_pag.pago_id
                INNER JOIN sagest_factura fact ON fact.id=fac_pag.factura_id
                WHERE pa.id=%s
            """ % (self.idpagoepunemi)
            cursor.execute(sql)
            row = cursor.fetchall()
            return row[0][0] if row.__len__() > 0 else None
        return None

    def get_content_type(self):
        return ContentType.objects.get_for_model(self)


class TipoTransferencia(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo de transferencia"
        verbose_name_plural = u"Tipos de transferencias"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(TipoTransferencia, self).save(*args, **kwargs)


class PagoTransferenciaDeposito(ModeloBase):
    deposito = models.BooleanField(default=True, verbose_name=u'Es desposito')
    tipotransferencia = models.ForeignKey(TipoTransferencia, blank=True, null=True, verbose_name=u'Tipo Transferencia',
                                          on_delete=models.CASCADE)
    cuentabanco = models.ForeignKey(CuentaBanco, verbose_name=u'Cuenta banco', on_delete=models.CASCADE)
    mismobanco = models.BooleanField(default=False, verbose_name=u'Mismo banco')
    exterior = models.BooleanField(default=False, verbose_name=u'Desde el exterior')
    fecha = models.DateField(verbose_name=u'Fecha')
    referencia = models.CharField(default='', max_length=50, verbose_name=u'Referencia')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    pagos = models.ManyToManyField(Pago, verbose_name=u'Pagos')
    recaudacionventanilla = models.BooleanField(default=False, verbose_name=u'Dep√≥sito por ventanilla')

    def __str__(self):
        return u'Pago %s $%s' % (("Transferencia" if not self.deposito else "Deposito"), str(self.valor))

    class Meta:
        verbose_name = u"Pago con tranferencia/deposito"
        verbose_name_plural = u"Pagos con transferencias/depositos"

    def save(self, *args, **kwargs):
        self.referencia = self.referencia.upper().strip()
        super(PagoTransferenciaDeposito, self).save(*args, **kwargs)


class PagoDineroElectronico(ModeloBase):
    fecha = models.DateField(verbose_name=u'Fecha')
    referencia = models.CharField(default='', max_length=50, verbose_name=u'Referencia')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    pagos = models.ManyToManyField(Pago, verbose_name=u'Pagos')

    def __str__(self):
        return u'Pago Dinero Electr√≥nico $%s' % str(self.valor)

    class Meta:
        verbose_name = u"Pago con Dinero Electr√≥nico"
        verbose_name_plural = u"Pagos con Dinero Electr√≥nico"

    def save(self, *args, **kwargs):
        self.referencia = self.referencia.upper().strip()
        super(PagoDineroElectronico, self).save(*args, **kwargs)


class PagoCuentaporCobrar(ModeloBase):
    fecha = models.DateField(verbose_name=u'Fecha')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    pagos = models.ManyToManyField(Pago, verbose_name=u'Pagos')

    def __str__(self):
        return u'Pago Cuenta por cobrar $%s' % str(self.valor)

    def saldo(self):
        pago = self.pagos.aggregate(valor=Sum('valortotal'))['valor']
        return self.valor - (pago if pago else 0)

    class Meta:
        verbose_name = u"Pago Cuenta por cobrar"
        verbose_name_plural = u"Pagos Cuentas por cobrar"


class TipoCheque(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo de cheque"
        verbose_name_plural = u"Tipos de cheques"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(TipoCheque, self).save(*args, **kwargs)


class PagoCheque(ModeloBase):
    banco = models.ForeignKey(Banco, verbose_name=u'Banco', on_delete=models.CASCADE)
    cuenta = models.CharField(default='', max_length=50, verbose_name=u'Cuenta')
    numero = models.CharField(default='', max_length=50, verbose_name=u'Numero')
    tipocheque = models.ForeignKey(TipoCheque, verbose_name=u'Tipo Cheque', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha de emision')
    fechacobro = models.DateField(verbose_name=u'Fecha de cobro')
    emite = models.CharField(default='', max_length=100, verbose_name=u'Emite')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    protestado = models.BooleanField(default=False, verbose_name=u'Protestado')
    chequegerencia = models.BooleanField(default=False, verbose_name=u'Cheque gerencia')
    chequecertificado = models.BooleanField(default=False, verbose_name=u'Cheque certificado')
    pagos = models.ManyToManyField(Pago, verbose_name=u'Pagos')

    def __str__(self):
        return u'Pago Cheque $%s' % str(self.valor)

    class Meta:
        verbose_name = u"Pago con cheque"
        verbose_name_plural = u"Pagos con cheques"
        ordering = ['-fechacobro']

    def a_vista(self):
        return self.fecha == self.fechacobro

    def esta_protestado(self):
        if self.chequeprotestado_set.all().exists():
            return self.chequeprotestado_set.all()[0]
        return None

    def tiene_pagos(self):
        return self.pagos.exists()

    def factura(self):
        if self.pagos.exists():
            pago = self.pagos.all()[0]
            if pago.factura_set.filter().exists():
                return pago.factura_set.all()[0]
            else:
                return None
        return None

    def save(self, *args, **kwargs):
        self.numero = self.numero.upper().strip()
        self.emite = self.emite.upper().strip()
        super(PagoCheque, self).save(*args, **kwargs)


class TipoTarjetaBanco(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo de tarjeta de banco"
        verbose_name_plural = u"Tipos de tarjetas de banco"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(TipoTarjetaBanco, self).save(*args, **kwargs)


class ProcedenciaTarjeta(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Procedencia de tarjeta "
        verbose_name_plural = u"Procedencia de tarjetas"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(ProcedenciaTarjeta, self).save(*args, **kwargs)


class PagoTarjeta(ModeloBase):
    tipo = models.ForeignKey(TipoTarjetaBanco, verbose_name=u'Tipo tarjeta', on_delete=models.CASCADE)
    procedencia = models.ForeignKey(ProcedenciaTarjeta, verbose_name=u'Tipo tarjeta', on_delete=models.CASCADE)
    nacional = models.BooleanField(default=False, verbose_name=u'Nacional')
    banco = models.ForeignKey(Banco, verbose_name=u'Banco', on_delete=models.CASCADE)
    poseedor = models.CharField(default='', max_length=100, verbose_name=u'Poseedor')
    procesadorpago = models.ForeignKey(ProcesadorPagoTarjeta, verbose_name=u'Procesador de pago',
                                       on_delete=models.CASCADE)
    referencia = models.CharField(default='', max_length=50, verbose_name=u'Referencia')
    fecha = models.DateField(verbose_name=u'Fecha')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor')
    pagos = models.ManyToManyField(Pago, verbose_name=u'Pago')

    def __str__(self):
        return u'Pago Tarjeta $%s' % str(self.valor)

    class Meta:
        verbose_name = u"Pago con tarjeta"
        verbose_name_plural = u"Pagos con tarjetas"

    def save(self, *args, **kwargs):
        self.poseedor = self.poseedor.upper().strip()
        self.referencia = self.referencia.upper().strip()
        super(PagoTarjeta, self).save(*args, **kwargs)


class PagoLiquidacion(ModeloBase):
    fecha = models.DateTimeField(verbose_name=u'Fecha')
    motivo = models.TextField(default='')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor')
    pagos = models.ManyToManyField(Pago, verbose_name=u'Pago')


class PagoReciboCaja(ModeloBase):
    puntoventa = models.ForeignKey(PuntoVenta, blank=True, null=True, verbose_name=u"Punto Venta",
                                   on_delete=models.CASCADE)
    sesioncaja = models.ForeignKey(SesionCaja, blank=True, null=True, verbose_name=u"Caja", on_delete=models.CASCADE)
    numero = models.IntegerField(blank=True, null=True, verbose_name=u"Numero de recibo")
    numerocompleto = models.CharField(blank=True, null=True, max_length=20, verbose_name=u"Numero Completo")
    pdfarchivo = models.FileField(upload_to='comprobantes/recibocaja/', blank=True, null=True,
                                  verbose_name=u'Archivo pdf del recibo de caja')
    fecha = models.DateTimeField(verbose_name=u'Fecha')
    persona = models.ForeignKey(Persona, verbose_name=u'Persona', on_delete=models.CASCADE)
    motivo = models.TextField(default='', verbose_name=u"Motivo")
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    pagos = models.ManyToManyField(Pago, verbose_name=u'Pago')
    comprobante = models.ForeignKey(ComprobanteRecaudacion, blank=True, null=True,
                                    verbose_name=u'Comprobante Recaudaci√≥n', on_delete=models.CASCADE)
    enviadocliente = models.BooleanField(default=False, verbose_name=u"Enviada por correo")
    observacion = models.TextField(blank=True, null=True, verbose_name=u"Observaci√≥n")
    anulado = models.BooleanField(default=False, verbose_name=u"Recibo anulado")

    def __str__(self):
        return u'%s - %s - $ %s' % (self.numerocompleto, self.persona, self.valor)

    class Meta:
        verbose_name = u"Pago Recibo de Caja"
        verbose_name_plural = u"Pagos Recibos de Caja"

    def save(self, *args, **kwargs):
        super(PagoReciboCaja, self).save(*args, **kwargs)

    def direccion_email_cliente(self):
        return self.persona.clientefactura_set.all()[0].email

    def datos_cliente(self):
        return self.persona.clientefactura_set.all()[0]

MOTIVO_NOTA_CREDITO = (
    (1, u'ANULACI√ìN DE FACTURAS'),
    (2, u'DEVOLUCI√ìN DE DINERO'),
    (3, u'CAMBIO DE VALORES'),
    (4, u'BECAS'),
)

class PagoEpunemi(ModeloBase):
    fecha = models.DateTimeField(verbose_name=u'Fecha')
    motivo = models.TextField(default='')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor')
    pagos = models.ManyToManyField(Pago, verbose_name=u'Pago')
    pagadocomo = models.TextField(default='')
    idpagoepunemi = models.IntegerField(default=0, verbose_name=u'Rubro epunemi')
    idmotivopago = models.IntegerField(choices=MOTIVO_NOTA_CREDITO, default=0, verbose_name=u'Motivo Pago epunemi',blank=True, null=True)
    idnotacredito = models.IntegerField(default=0, verbose_name=u'Nota Credito epunemi', blank=True, null=True)


class SecuencialRecaudaciones(ModeloBase):
    puntoventa = models.ForeignKey(PuntoVenta, verbose_name=u'Punto e venta', on_delete=models.CASCADE)
    factura = models.IntegerField(default=0, verbose_name=u'Secuencia Factura')
    notacredito = models.IntegerField(default=0, verbose_name=u'Secuencia Nota cr√©dito')
    comprobante = models.IntegerField(default=0, verbose_name=u'Secuencia Comprobantes')
    nocur = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'N√∫mero CUR')
    documento = models.IntegerField(default=0, verbose_name=u'Secuencia Documentos Comprobantes')
    recibocaja = models.IntegerField(default=0, verbose_name=u'Recibo Caja')
    recibocajapago = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'Recibo Caja Pago')
    liquidacioncompra = models.IntegerField(default=0, verbose_name=u'Secuencia Liquidaci√≥n Compra')

    class Meta:
        verbose_name = u"Secuencia de recaudacion"
        verbose_name_plural = u"Secuencias de recaudaciones"

    def save(self, *args, **kwargs):
        super(SecuencialRecaudaciones, self).save(*args, **kwargs)


class SecuenciaEgresos(ModeloBase):
    comprobanteegreso = models.IntegerField(default=0, verbose_name=u'Secuencia Comprobantes Egreesos')
    tramitepago = models.IntegerField(default=0, verbose_name=u'Tramites')
    documentoret = models.IntegerField(default=0, verbose_name=u'Retenciones')
    resumenegreso = models.IntegerField(default=0, verbose_name=u'Secuencia Resumen de Egresos')

    class Meta:
        verbose_name = u"Secuencia de tramite de egreso"
        verbose_name_plural = u"Secuencias de tramites de egresos"

    def save(self, *args, **kwargs):
        super(SecuenciaEgresos, self).save(*args, **kwargs)


class SecuenciaSesionCaja(ModeloBase):
    anioejercicio = models.ForeignKey(AnioEjercicio, verbose_name=u'Anio Ejercicio', on_delete=models.CASCADE)
    secuenciacaja = models.IntegerField(default=0, verbose_name=u'Secuencia Caja')


class SecuencialPresupuesto(ModeloBase):
    from django.contrib.auth.models import User
    certificacion = models.IntegerField(default=0, verbose_name=u'Certificaciones')
    reforma = models.IntegerField(default=0, verbose_name=u'Reformas')
    compromisos = models.IntegerField(default=0, verbose_name=u'Secuencia Comprobantes')
    fechaultimasaldosegreso = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha Importaci√≥n saldos')
    usuariomodificaegresos = models.ForeignKey(User, related_name='+', verbose_name=u'Modifico egreso',
                                               on_delete=models.CASCADE)
    fechaultimasaldosingreso = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha Importaci√≥n saldos')
    usuariomodificaingresos = models.ForeignKey(User, related_name='+', verbose_name=u'Modifico ingreso',
                                                on_delete=models.CASCADE)
    fechaultimareformas = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha Importaci√≥n reformas')
    usuariomodificareformas = models.ForeignKey(User, related_name='+', verbose_name=u'Modifico reformas',
                                                on_delete=models.CASCADE)
    fechaultimacertificaciones = models.DateTimeField(blank=True, null=True,
                                                      verbose_name=u'Fecha Importaci√≥n certificaciones')
    usuariomodificacertificacion = models.ForeignKey(User, related_name='+', verbose_name=u'Modifico certificaciones',
                                                     on_delete=models.CASCADE)
    fechaultimacompromisos = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha Importaci√≥n compromisos')
    usuariomodificacompromiso = models.ForeignKey(User, related_name='+', verbose_name=u'Modifico compromisos',
                                                  on_delete=models.CASCADE)

    class Meta:
        verbose_name = u"Secuencia de presupuesto"
        verbose_name_plural = u"Secuencias de presupuestos"

    def save(self, *args, **kwargs):
        super(SecuencialPresupuesto, self).save(*args, **kwargs)


class ReciboCajaCobrar(ModeloBase):
    from sga.models import TIPOS_IDENTIFICACION
    puntoventa = models.ForeignKey(PuntoVenta, verbose_name=u"Punto Venta", on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u"Numero")
    numerocompleto = models.CharField(default='', max_length=20, verbose_name=u"Numero Completo")
    fecha = models.DateField(verbose_name=u"Fecha")
    valida = models.BooleanField(default=True, verbose_name=u"Valida")
    cliente = models.ForeignKey('sga.Persona', verbose_name=u"Cliente", on_delete=models.CASCADE)
    total = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    sesioncaja = models.ForeignKey(SesionCaja, verbose_name=u"Caja", on_delete=models.CASCADE)
    pagos = models.ManyToManyField(Pago, blank=True, verbose_name=u"Pagos")
    identificacion = models.CharField(default='', max_length=20, verbose_name=u"Identificaci√≥n")
    tipo = models.IntegerField(choices=MY_TIPOS_IDENTIFICACION, default=1, verbose_name=u"Tipo de identificaci√≥n")
    nombre = models.CharField(default='', max_length=100, verbose_name=u"Nombre")
    email = models.CharField(default='', max_length=100, verbose_name=u"Email")
    direccion = models.TextField(default='', verbose_name=u"Direcci√≥n")
    telefono = models.CharField(default='', max_length=50, verbose_name=u"Telefono")
    pagada = models.BooleanField(default=True, verbose_name=u"Pagada")
    comprobante = models.ForeignKey(ComprobanteRecaudacion, blank=True, null=True,
                                    verbose_name=u'Comprobante Recaudaci√≥n', on_delete=models.CASCADE)

    def __str__(self):
        return u'Recibo Caja Cobrar No. %s' % self.numero

    class Meta:
        verbose_name = u"Recibo Caja Cobrar"
        verbose_name_plural = u"Recibos Cajas Cobrar"
        ordering = ['numero']
        unique_together = ('numero',)

    def actualiza_subtotales(self):
        self.total = null_to_decimal(self.pagos.aggregate(valor=Sum('valortotal'))['valor'], 2)

    def save(self, *args, **kwargs):
        self.numerocompleto = self.numerocompleto.upper().strip()
        self.identificacion = self.identificacion.upper().strip()
        self.nombre = self.nombre.upper().strip()
        self.direccion = self.direccion.upper().strip()
        self.telefono = self.telefono.upper().strip()
        if self.id:
            self.actualiza_subtotales()
        super(ReciboCajaCobrar, self).save(*args, **kwargs)


class Factura(ModeloBase):
    from sga.models import TIPOS_IDENTIFICACION
    puntoventa = models.ForeignKey(PuntoVenta, verbose_name=u"Punto Venta", on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u"Numero")
    numerocompleto = models.CharField(default='', max_length=20, verbose_name=u"Numero Completo")
    fecha = models.DateField(verbose_name=u"Fecha")
    valida = models.BooleanField(default=True, verbose_name=u"Valida")
    cliente = models.ForeignKey('sga.Persona', verbose_name=u"Cliente", on_delete=models.CASCADE)
    ivaaplicado = models.ForeignKey(IvaAplicado, blank=True, null=True, verbose_name=u"Iva Aplicado", on_delete=models.CASCADE)
    subtotal_base_iva = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    subtotal_base0 = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total_descuento = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total_iva = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    sesioncaja = models.ForeignKey(SesionCaja, verbose_name=u"Caja", on_delete=models.CASCADE)
    impresa = models.BooleanField(default=False, verbose_name=u"Impresa")
    pagos = models.ManyToManyField(Pago, blank=True, verbose_name=u"Pagos")
    identificacion = models.CharField(default='', max_length=20, verbose_name=u"Identificaci√≥n")
    tipo = models.IntegerField(choices=MY_TIPOS_IDENTIFICACION, default=1, verbose_name=u"Tipo de identificaci√≥n")
    nombre = models.CharField(default='', max_length=100, verbose_name=u"Nombre")
    email = models.CharField(default='', max_length=100, verbose_name=u"Email")
    direccion = models.TextField(default='', verbose_name=u"Direcci√≥n")
    telefono = models.CharField(default='', max_length=50, verbose_name=u"Telefono")
    electronica = models.BooleanField(default=False, verbose_name=u"Electr√≥nica")
    pagada = models.BooleanField(default=True, verbose_name=u"Pagada")
    firmada = models.BooleanField(default=False, verbose_name=u"Firmada")
    enviadasri = models.BooleanField(default=False, verbose_name=u"Enviada SRI")
    falloenviodasri = models.BooleanField(default=False, verbose_name=u"Fallo de Envio SRI")
    mensajeenvio = models.TextField(blank=True, null=True, verbose_name=u"Mensaje de Envio SRI")
    falloautorizacionsri = models.BooleanField(default=False, verbose_name=u"Fallo de Autorizaci√≥n SRI")
    mensajeautorizacion = models.TextField(blank=True, null=True, verbose_name=u"Mensaje de Autorizaci√≥n")
    autorizada = models.BooleanField(default=False, verbose_name=u"Autorizada")
    enviadacliente = models.BooleanField(default=False, verbose_name=u"Enviada por correo")
    xmlgenerado = models.BooleanField(default=False, verbose_name=u"XML Generado")
    xml = models.TextField(blank=True, null=True, verbose_name=u'XML')
    xmlfirmado = models.TextField(blank=True, null=True, verbose_name=u'XML Firmado')
    xmlarchivo = models.FileField(upload_to='comprobantes/facturas/', blank=True, null=True, verbose_name=u'XML Archivo')
    pdfarchivo = models.FileField(upload_to='comprobantes/facturas/', blank=True, null=True, verbose_name=u'XML Archivo')
    fechaautorizacion = models.DateTimeField(verbose_name=u"Fecha autorizacion", blank=True, null=True)
    autorizacion = models.TextField(verbose_name=u'Autorizacion')
    weburl = models.CharField(max_length=32)
    claveacceso = models.CharField(max_length=49, verbose_name=u'Clave de Acceso')
    tipoambiente = models.IntegerField(default=1, verbose_name=u'Tipo Ambiente')
    tipoemision = models.IntegerField(default=1, verbose_name=u'Tipo Emision')
    estado = models.IntegerField(choices=ESTADO_COMPROBANTE, default=1, verbose_name=u'Estado Factura')
    comprobante = models.ForeignKey(ComprobanteRecaudacion, blank=True, null=True, verbose_name=u'Comprobante Recaudaci√≥n', on_delete=models.CASCADE)

    def __str__(self):
        return u'Factura No. %s' % self.numero

    class Meta:
        verbose_name = u"Factura"
        verbose_name_plural = u"Facturas"
        ordering = ['numero']
        unique_together = ('numero',)

    def enletras(self):
        from sga import number_to_letter
        return number_to_letter.enletras(self.total)

    def persona_cajero(self):
        return self.sesioncaja.caja.persona

    def puede_reimprimirse(self):
        return self.fecha == datetime.now().date()

    def total_sin_impuesto_sri(self):
        return Decimal(self.subtotal_base0 + self.subtotal_base_iva).quantize(Decimal('.01'))

    def esta_anulada(self):
        return FacturaCancelada.objects.filter(factura=self).exists()

    def datos_anulacion(self):
        if self.esta_anulada():
            return FacturaCancelada.objects.filter(factura=self)[0]
        return None

    def en_fecha(self):
        return datetime.now().date() == self.fecha

    def tipo_identificacion(self):
        from sga.models import TIPOS_IDENTIFICACION
        return TIPOS_IDENTIFICACION[self.tipo - 1][1]

    def actualiza_subtotales(self):
        self.subtotal_base0 = null_to_decimal(self.pagos.aggregate(valor=Sum('subtotal0'))['valor'], 2)
        self.subtotal_base_iva = null_to_decimal(self.pagos.aggregate(valor=Sum('subtotaliva'))['valor'], 2)
        self.total_descuento = null_to_decimal(self.pagos.aggregate(valor=Sum('valordescuento'))['valor'], 2)
        self.total_iva = null_to_decimal(self.pagos.aggregate(valor=Sum('iva'))['valor'], 2)
        self.total = null_to_decimal(self.pagos.aggregate(valor=Sum('valortotal'))['valor'], 2)

    def cancelar(self, motivo, request):
        for pago in self.pagos.all():
            restaurabanco = DetallePagoArchivoCuentaBanco.objects.filter(status=True,pago=pago).first()
            if restaurabanco:
                restaurabanco.status=False
                restaurabanco.save(request, update_fields=['status'])
                cab= restaurabanco.pagobanco
                cab.pagado=False
                cab.saldofinal=cab.saldofinal+restaurabanco.pago.valortotal
                cab.save(request, update_fields=['pagado','saldofinal'])
                estadoprocesar=cab.cab
                if not estadoprocesar.incorrecto:
                    estadoprocesar.incorrecto=True
                    estadoprocesar.save(request, update_fields=['incorrecto'])

            rubro = Rubro(tipo=pago.rubro.tipo,
                          persona=pago.rubro.persona,
                          nombre=pago.rubro.nombre,
                          cuota=pago.rubro.cuota,
                          contratorecaudacion=pago.rubro.contratorecaudacion,
                          fecha=pago.rubro.fecha,
                          fechavence=pago.rubro.fechavence,
                          valor=pago.total_sinimpuesto(),
                          iva=pago.rubro.iva,
                          valoriva=pago.iva,
                          valortotal=pago.valortotal,
                          saldo=pago.valortotal,
                          cancelado=False)
            rubro.save(request)
            if pago.rubro.saldo>0:
                rubrores = pago.rubro
                rubronew = Rubro(tipo=rubrores.tipo,
                          persona=rubrores.persona,
                          nombre=rubrores.nombre,
                          cuota=rubrores.cuota,
                          contratorecaudacion=rubrores.contratorecaudacion,
                          fecha=rubrores.fecha,
                          fechavence=rubrores.fechavence,
                          valor=rubrores.saldo,
                          iva=rubrores.iva,
                          valoriva=rubrores.valoriva,
                          valortotal=rubrores.saldo,
                          saldo=rubrores.saldo,
                          cancelado=False)
                rubronew.save(request)
                rubrores.valortotal = rubrores.valor =rubrores.valor-rubrores.saldo
                rubrores.save(request)

        self.valida = False
        self.save(request)
        facturacancelada = FacturaCancelada(factura=self,
                                            motivo=motivo,
                                            fecha=datetime.now())
        facturacancelada.save(request)

    def genera_clave_acceso_factura(self):
        hoy = self.fecha
        numero = self.numero
        return self.generar_clave_acceso(hoy, numero, '01')

    def generar_clave_acceso(self, fecha, numero, codigo):
        from sga.models import miinstitucion
        institucion = miinstitucion()
        hoy = fecha
        codigonumerico = str(
            Decimal('%02d%02d%04d' % (hoy.day, hoy.month, hoy.year)) + Decimal(institucion.ruc) + Decimal(
                '%3s%3s%9s' % (self.puntoventa.establecimiento, self.puntoventa.puntoventa, str(numero).zfill(9))))[:8]
        parcial = "%02d%02d%04d%2s%13s%1d%3s%3s%9s%8s%1d" % (hoy.day, hoy.month, hoy.year, codigo, institucion.ruc,
                                                             self.tipoambiente, self.puntoventa.establecimiento,
                                                             self.puntoventa.puntoventa, str(numero).zfill(9),
                                                             codigonumerico, self.tipoemision)
        digitoverificador = self.generar_digito_verificador(parcial)
        return parcial + str(digitoverificador)

    def generar_digito_verificador(self, cadena):
        basemultiplicador = 7
        aux = [0 for i in cadena]
        multiplicador = 2
        total = 0
        verificador = 0
        for i in range(len(cadena) - 1, -1, -1):
            aux[i] = int(cadena[i]) * multiplicador
            multiplicador += 1
            if multiplicador > basemultiplicador:
                multiplicador = 2
            total += aux[i]
        if total == 0 or total == 1:
            verificador = 0
        else:
            verificador = 0 if (11 - (total % 11)) == 11 else 11 - (total % 11)
        if verificador == 10:
            verificador = 1
        return verificador

    def numero_secuencial(self):
        return str(self.numero).zfill(9)

    def tipo_pago(self):
        lista = []
        if self.pagos.filter(efectivo=True).exists():
            valor = null_to_decimal(self.pagos.filter(efectivo=True).aggregate(valor=Sum('valortotal'))['valor'], 2)
            lista.append(['01', valor])
        if self.pagos.filter(pagocheque__isnull=False).exists():
            if self.pagos.filter(pagocheque__isnull=False, pagocheque__tipocheque__id=1).exists():
                valor = null_to_decimal(
                    self.pagos.filter(pagocheque__isnull=False, pagocheque__tipocheque__id=1).aggregate(
                        valor=Sum('valortotal'))['valor'], 2)
                lista.append(['20', valor])
            if self.pagos.filter(pagocheque__isnull=False, pagocheque__tipocheque__id=2).exists():
                valor = null_to_decimal(
                    self.pagos.filter(pagocheque__isnull=False, pagocheque__tipocheque__id=2).aggregate(
                        valor=Sum('valortotal'))['valor'], 2)
                lista.append(['20', valor])
            if self.pagos.filter(pagocheque__isnull=False, pagocheque__tipocheque__id=3).exists():
                valor = null_to_decimal(
                    self.pagos.filter(pagocheque__isnull=False, pagocheque__tipocheque__id=3).aggregate(
                        valor=Sum('valortotal'))['valor'], 2)
                lista.append(['20', valor])
            if self.pagos.filter(pagocheque__isnull=False, pagocheque__tipocheque__id=4).exists():
                valor = null_to_decimal(
                    self.pagos.filter(pagocheque__isnull=False, pagocheque__tipocheque__id=4).aggregate(
                        valor=Sum('valortotal'))['valor'], 2)
                lista.append(['20', valor])
        if self.pagos.filter(pagotransferenciadeposito__isnull=False,
                             pagotransferenciadeposito__deposito=False).exists():
            if self.pagos.filter(pagotransferenciadeposito__isnull=False, pagotransferenciadeposito__deposito=False,
                                 pagotransferenciadeposito__tipotransferencia__id=1).exists():
                valor = null_to_decimal(self.pagos.filter(pagotransferenciadeposito__isnull=False,
                                                          pagotransferenciadeposito__deposito=False,
                                                          pagotransferenciadeposito__tipotransferencia__id=1).aggregate(
                    valor=Sum('valortotal'))['valor'], 2)
                lista.append(['20', valor])
            if self.pagos.filter(pagotransferenciadeposito__isnull=False, pagotransferenciadeposito__deposito=False,
                                 pagotransferenciadeposito__tipotransferencia__id=2).exists():
                valor = null_to_decimal(self.pagos.filter(pagotransferenciadeposito__isnull=False,
                                                          pagotransferenciadeposito__deposito=False,
                                                          pagotransferenciadeposito__tipotransferencia__id=2).aggregate(
                    valor=Sum('valortotal'))['valor'], 2)
                lista.append(['20', valor])
            if self.pagos.filter(pagotransferenciadeposito__isnull=False, pagotransferenciadeposito__deposito=False,
                                 pagotransferenciadeposito__tipotransferencia__id=3).exists():
                valor = null_to_decimal(self.pagos.filter(pagotransferenciadeposito__isnull=False,
                                                          pagotransferenciadeposito__deposito=False,
                                                          pagotransferenciadeposito__tipotransferencia__id=3).aggregate(
                    valor=Sum('valortotal'))['valor'], 2)
                lista.append(['20', valor])
        if self.pagos.filter(pagotransferenciadeposito__isnull=False,
                             pagotransferenciadeposito__deposito=True).exists():
            valor = null_to_decimal(self.pagos.filter(pagotransferenciadeposito__isnull=False,
                                                      pagotransferenciadeposito__deposito=True).aggregate(
                valor=Sum('valortotal'))['valor'], 2)
            lista.append(['20', valor])
        if self.pagos.filter(pagodineroelectronico__isnull=False).exists():
            valor = null_to_decimal(
                self.pagos.filter(pagodineroelectronico__isnull=False).aggregate(valor=Sum('valortotal'))['valor'], 2)
            lista.append(['17', valor])
        if self.pagos.filter(pagotarjeta__isnull=False).exists():
            if self.pagos.filter(pagotarjeta__isnull=False, pagotarjeta__tipo__id=1):
                if self.pagos.filter(pagotarjeta__isnull=False, pagotarjeta__tipo__id=1,
                                     pagotarjeta__procedencia__id=1).exists():
                    valor = null_to_decimal(self.pagos.filter(pagotarjeta__isnull=False, pagotarjeta__tipo__id=1,
                                                              pagotarjeta__procedencia__id=1).aggregate(
                        valor=Sum('valortotal'))['valor'], 2)
                    lista.append(['19', valor])
                if self.pagos.filter(pagotarjeta__isnull=False, pagotarjeta__tipo__id=1,
                                     pagotarjeta__procedencia__id=2).exists():
                    valor = null_to_decimal(self.pagos.filter(pagotarjeta__isnull=False, pagotarjeta__tipo__id=1,
                                                              pagotarjeta__procedencia__id=2).aggregate(
                        valor=Sum('valortotal'))['valor'], 2)
                    lista.append(['19', valor])
            if self.pagos.filter(pagotarjeta__isnull=False, pagotarjeta__tipo__id=2):
                valor = null_to_decimal(self.pagos.filter(pagotarjeta__isnull=False, pagotarjeta__tipo__id=2).aggregate(
                    valor=Sum('valortotal'))['valor'], 2)
                lista.append(['16', valor])
            if self.pagos.filter(pagotarjeta__isnull=False, pagotarjeta__tipo__id=3):
                valor = null_to_decimal(self.pagos.filter(pagotarjeta__isnull=False, pagotarjeta__tipo__id=3).aggregate(
                    valor=Sum('valortotal'))['valor'], 2)
                lista.append(['18', valor])
        if self.pagos.filter(pagocuentaporcobrar__isnull=False).exists():
            valor = null_to_decimal(
                self.pagos.filter(pagocuentaporcobrar__isnull=False).aggregate(valor=Sum('valortotal'))['valor'], 2)
            lista.append(['20', valor])
        return lista

    def tiene_notacredito(self):
        return self.notacredito_set.exists()

    def tiene_cuenta_por_cobrar(self):
        return PagoCuentaporCobrar.objects.filter(pagos__factura=self).exists()

    def cuenta_por_cobrar(self):
        if self.tiene_cuenta_por_cobrar():
            return PagoCuentaporCobrar.objects.filter(pagos__factura=self)[0]
        return None

    def save(self, *args, **kwargs):
        self.numerocompleto = self.numerocompleto.upper().strip()
        self.identificacion = self.identificacion.upper().strip()
        self.nombre = self.nombre.upper().strip()
        self.direccion = self.direccion.upper().strip()
        self.telefono = self.telefono.upper().strip()
        if self.id:
            self.actualiza_subtotales()
        super(Factura, self).save(*args, **kwargs)


class DetalleNotaCredito(ModeloBase):
    sesion = models.ForeignKey(SesionCaja, blank=True, null=True, verbose_name=u'Sesion de caja',
                               on_delete=models.CASCADE)
    nombre = models.CharField(max_length=300, verbose_name=u'Nombre')
    cantidad = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Cantidad')
    subtotal0 = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    subtotaliva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    iva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'IVA')
    ivaaplicado = models.ForeignKey(IvaAplicado, verbose_name=u'IVA', on_delete=models.CASCADE)
    valordescuento = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Total')
    valortotal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Total')

    def __str__(self):
        return u'Nota Credito $%s' % self.valortotal

    class Meta:
        verbose_name = u"Nota Credito"
        verbose_name_plural = u"Notas Creditos"

    def subtotal(self):
        return self.subtotaliva if self.iva else self.subtotal0

    def total_sinimpuesto(self):
        return Decimal(self.subtotal0 + self.subtotaliva).quantize(Decimal('.01'))


class NotaCredito(ModeloBase):
    from sga.models import TIPOS_IDENTIFICACION
    factura = models.ForeignKey(Factura, blank=True, null=True, verbose_name=u'Factura', on_delete=models.CASCADE)
    puntoventa = models.ForeignKey(PuntoVenta, verbose_name=u"Punto Venta", on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u"Numero")
    numerocompleto = models.CharField(default='', max_length=20, verbose_name=u"Numero Completo")
    fecha = models.DateField(verbose_name=u"Fecha")
    valida = models.BooleanField(default=True, verbose_name=u"Valida")
    cliente = models.ForeignKey('sga.Persona', verbose_name=u"Cliente", on_delete=models.CASCADE)
    ivaaplicado = models.ForeignKey(IvaAplicado, blank=True, null=True, verbose_name=u"Iva Aplicado",
                                    on_delete=models.CASCADE)
    subtotal_base_iva = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    subtotal_base0 = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total_descuento = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total_iva = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    razonmodificacion = models.TextField(default='', verbose_name=u"Raz√≥n Modificaci√≥n")
    sesioncaja = models.ForeignKey(SesionCaja, verbose_name=u"Caja", on_delete=models.CASCADE)
    impresa = models.BooleanField(default=False, verbose_name=u"Impresa")
    detalle = models.ManyToManyField(DetalleNotaCredito, blank=True, verbose_name=u"Pagos")
    identificacion = models.CharField(default='', max_length=20, verbose_name=u"Identificaci√≥n")
    tipo = models.IntegerField(choices=MY_TIPOS_IDENTIFICACION, default=1, verbose_name=u"Tipo de identificaci√≥n")
    nombre = models.CharField(default='', max_length=100, verbose_name=u"Nombre")
    motivo = models.TextField(default='', verbose_name=u'Motivo')
    email = models.CharField(default='', max_length=100, verbose_name=u"Email")
    direccion = models.TextField(default='', verbose_name=u"Direcci√≥n")
    telefono = models.CharField(default='', max_length=50, verbose_name=u"Telefono")
    electronica = models.BooleanField(default=False, verbose_name=u"Electr√≥nica")
    firmada = models.BooleanField(default=False, verbose_name=u"Firmada")
    enviadasri = models.BooleanField(default=False, verbose_name=u"Enviada SRI")
    falloenviodasri = models.BooleanField(default=False, verbose_name=u"Fallo de Envio SRI")
    mensajeenvio = models.TextField(blank=True, null=True, verbose_name=u"Mensaje de Envio SRI")
    falloautorizacionsri = models.BooleanField(default=False, verbose_name=u"Fallo de Autorizaci√≥n SRI")
    mensajeautorizacion = models.TextField(blank=True, null=True, verbose_name=u"Mensaje de Autorizaci√≥n")
    autorizada = models.BooleanField(default=False, verbose_name=u"Autorizada")
    enviadacliente = models.BooleanField(default=False, verbose_name=u"Enviada por correo")
    xmlgenerado = models.BooleanField(default=False, verbose_name=u"XML Generado")
    xml = models.TextField(blank=True, null=True, verbose_name=u'XML')
    xmlfirmado = models.TextField(blank=True, null=True, verbose_name=u'XML Firmado')
    xmlarchivo = models.FileField(upload_to='comprobantes/facturas/', blank=True, null=True,
                                  verbose_name=u'XML Archivo')
    pdfarchivo = models.FileField(upload_to='comprobantes/facturas/', blank=True, null=True,
                                  verbose_name=u'XML Archivo')
    fechaautorizacion = models.DateTimeField(verbose_name=u"Fecha autorizacion", blank=True, null=True)
    autorizacion = models.TextField(verbose_name=u'Autorizacion')
    weburl = models.CharField(max_length=32)
    claveacceso = models.CharField(max_length=49, verbose_name=u'Clave de Acceso')
    tipoambiente = models.IntegerField(default=1, verbose_name=u'Tipo Ambiente')
    tipoemision = models.IntegerField(default=1, verbose_name=u'Tipo Emision')
    estado = models.IntegerField(choices=ESTADO_COMPROBANTE, default=1, verbose_name=u'Estado Factura')

    def __str__(self):
        return u'Factura No. %s' % self.numero

    class Meta:
        verbose_name = u"Nota de cr√©dito"
        verbose_name_plural = u"Notas de cr√©ditos"
        ordering = ['numero']
        unique_together = ('numero',)

    def genera_clave_acceso_notacredito(self):
        hoy = self.fecha
        numero = self.numero
        return self.generar_clave_acceso(hoy, numero, '04')

    def generar_clave_acceso(self, fecha, numero, codigo):
        from sga.models import miinstitucion
        institucion = miinstitucion()
        hoy = fecha
        codigonumerico = str(
            Decimal('%02d%02d%04d' % (hoy.day, hoy.month, hoy.year)) + Decimal(institucion.ruc) + Decimal(
                '%3s%3s%9s' % (self.puntoventa.establecimiento, self.puntoventa.puntoventa, str(numero).zfill(9))))[:8]
        parcial = "%02d%02d%04d%2s%13s%1d%3s%3s%9s%8s%1d" % (hoy.day, hoy.month, hoy.year, codigo, institucion.ruc,
                                                             self.tipoambiente, self.puntoventa.establecimiento,
                                                             self.puntoventa.puntoventa, str(numero).zfill(9),
                                                             codigonumerico, self.tipoemision)
        digitoverificador = self.generar_digito_verificador(parcial)
        return parcial + str(digitoverificador)

    def generar_digito_verificador(self, cadena):
        basemultiplicador = 7
        aux = [0 for i in cadena]
        multiplicador = 2
        total = 0
        verificador = 0
        for i in range(len(cadena) - 1, -1, -1):
            aux[i] = int(cadena[i]) * multiplicador
            multiplicador += 1
            if multiplicador > basemultiplicador:
                multiplicador = 2
            total += aux[i]
        if total == 0 or total == 1:
            verificador = 0
        else:
            verificador = 0 if (11 - (total % 11)) == 11 else 11 - (total % 11)
        if verificador == 10:
            verificador = 1
        return verificador

    def numero_secuencial(self):
        return str(self.numero).zfill(9)

    def total_sin_impuesto_sri(self):
        return Decimal(self.subtotal_base0 + self.subtotal_base_iva).quantize(Decimal('.01'))

    def tipo_identificacion(self):
        from sga.models import TIPOS_IDENTIFICACION
        return TIPOS_IDENTIFICACION[self.tipo - 1][1]

    def save(self, *args, **kwargs):
        self.motivo = self.motivo.upper().strip()
        self.numerocompleto = self.numerocompleto.upper().strip()
        self.identificacion = self.identificacion.upper().strip()
        self.nombre = self.nombre.upper().strip()
        self.direccion = self.direccion.upper().strip()
        self.telefono = self.telefono.upper().strip()
        super(NotaCredito, self).save(*args, **kwargs)


class FacturaCancelada(ModeloBase):
    factura = models.ForeignKey(Factura, related_name='cancelada', verbose_name=u'Factura', on_delete=models.CASCADE)
    motivo = models.TextField(default='', verbose_name=u'Motivo')
    fecha = models.DateField(verbose_name=u'Fecha')

    def __str__(self):
        return u'Factura cancelada No.%s %s' % (self.factura, self.fecha.strftime("%d-%m-%Y"))

    class Meta:
        verbose_name = u"Factura cancelada"
        verbose_name_plural = u"Facturas canceladas"
        unique_together = ('factura',)

    def save(self, *args, **kwargs):
        self.motivo = self.motivo.upper().strip()
        super(FacturaCancelada, self).save(*args, **kwargs)


class ChequeProtestado(ModeloBase):
    cheque = models.ForeignKey(PagoCheque, verbose_name=u'Cheque', on_delete=models.CASCADE)
    motivo = models.CharField(default='', max_length=200, verbose_name=u'Motivo')
    fecha = models.DateField(verbose_name=u'Fecha')

    def __str__(self):
        return u'Cheque protestado No. %s - %s' % (self.cheque.numero, self.fecha.strftime("%d-%m-%Y"))

    class Meta:
        verbose_name = u"Cheque protestado"
        verbose_name_plural = u"Cheques protestados"
        unique_together = ('cheque',)

    def save(self, *args, **kwargs):
        self.motivo = self.motivo.upper().strip()
        super(ChequeProtestado, self).save(*args, **kwargs)


class RecaudacionBanco(ModeloBase):
    sesioncaja = models.ForeignKey(SesionCaja, verbose_name=u'Sesion Caja', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u"Fecha")
    cuentabanco = models.ForeignKey(CuentaBanco, verbose_name=u'Cuenta Banco', on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    archivo = models.FileField(upload_to='recaudaciones/bancopacifico/', blank=True, null=True,
                               verbose_name=u'Archivo Recaudaci√≥n Banco')
    incorrecto = models.BooleanField(default=False)

    def get_incorrecto(self):
        return 'fa fa-check-circle text-success' if not self.incorrecto else 'fa fa-times-circle text-error'

    def __str__(self):
        return u'Recaudacion Banco: %s - %s' % (self.cuentabanco, self.valor)

    class Meta:
        verbose_name = u"Recaudacion Banco"
        verbose_name_plural = u"Recaudaciones Bancos"
        unique_together = ('fecha', 'cuentabanco',)

    def save(self, *args, **kwargs):
        super(RecaudacionBanco, self).save(*args, **kwargs)


class DetalleRecaudacionBanco(ModeloBase):
    recaudacionbanco = models.ForeignKey(RecaudacionBanco, verbose_name=u'Recaudaci√≥n Banco', on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Recaudaci√≥n Banco', on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')

    def __str__(self):
        return u'Detalle Recaudacion: %s - %s' % (self.persona.nombre_completo(), self.valor)

    class Meta:
        verbose_name = u"Detalle Recaudacion"
        verbose_name_plural = u"Detalles Recaudacion"


class ArchivoGeneradoRecaudacionBanco(ModeloBase):
    cuentabanco = models.ForeignKey(CuentaBanco, verbose_name=u'Recaudaci√≥n Banco', on_delete=models.CASCADE)
    fecha = models.DateTimeField(verbose_name=u"Fecha genraci√≥n")
    archivo = models.FileField(upload_to='recaudaciones/bancopacifico/', blank=True, null=True,
                               verbose_name=u'Archivo Recaudaci√≥n Banco')


class ArchivoCuentaBancoVerificadoDetalle(ModeloBase):
    cab = models.ForeignKey('sagest.RecaudacionBanco', verbose_name=u'Banco', on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', blank=True, null=True, on_delete=models.CASCADE)
    rubro = models.ForeignKey('sagest.Rubro', verbose_name=u'Rubro', blank=True, null=True, on_delete=models.CASCADE)
    rubroidstr = models.CharField(default='', max_length=300, verbose_name=u'Rubro no existente', blank=True, null=True)
    forma = models.CharField(default='', max_length=300, verbose_name=u'Forma', blank=True, null=True)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Pagado', blank=True,
                                null=True)
    saldoinicial = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo Inicial',
                                       blank=True, null=True)
    total = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total', blank=True,
                                null=True)
    codtercero = models.CharField(default='', max_length=300, verbose_name=u'Cod. Tercero', blank=True, null=True)
    fechamov = models.DateField(verbose_name="Fecha Moviento", null=True, blank=True)
    banco = models.CharField(default='', max_length=300, verbose_name=u'¬øBanco?', blank=True, null=True)
    tipocuenta = models.CharField(default='', max_length=300, verbose_name=u'Tipo Cuenta', blank=True, null=True)
    numcta = models.CharField(default='', max_length=300, verbose_name=u'Num. Cta', blank=True, null=True)
    fechainipago = models.DateField(verbose_name="Fecha Ini. Pago", null=True, blank=True)
    localidad = models.CharField(default='', max_length=300, verbose_name=u'Localidad', blank=True, null=True)
    ordenemp = models.CharField(default='', max_length=300, verbose_name=u'Orden. Emp', blank=True, null=True)
    nucadquiriente = models.CharField(default='', max_length=300, verbose_name=u'Nuc. Adquiriente', blank=True,
                                      null=True)
    fechavcto = models.DateField(verbose_name="Fecha Vcto", null=True, blank=True)
    canal = models.CharField(default='', max_length=300, verbose_name=u'Canal', blank=True, null=True)
    referenciadep = models.CharField(default='', max_length=300, verbose_name=u'Referencia Dep', blank=True, null=True)
    valido = models.BooleanField(default=False, verbose_name='Es Valido')
    pagado = models.BooleanField(default=False, verbose_name='Esta Pagada')
    observacion = models.TextField(default='', verbose_name='Observaci√≥n')
    saldofinal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo Final',
                                     blank=True, null=True)

    def nocuadran(self):
        if self.valor < self.total:
            return 1
        elif self.valor > self.total:
            return 2
        elif self.valor == self.total:
            return 3

    def get_valido(self):
        return 'fa fa-check-circle text-success' if self.valido else 'fa fa-times-circle text-error'

    def get_pagado(self):
        return 'fa fa-check-circle text-success' if self.pagado else 'fa fa-times-circle text-error'

    def get_rubros_matricula(self):
        rubros = self.persona.rubro_set.filter(status=True, cancelado=False,
                                     tipo_id__in=[RUBRO_ARANCEL,
                                                  RUBRO_MATRICULA]).exists()

        return 'fa fa-check-circle text-success' if rubros else 'fa fa-times-circle text-error'
    def __str__(self):
        return u'%s %s %s' % (self.cab, self.rubro, self.valor)

    class Meta:
        verbose_name = u"Archivo Cuenta de banco Detalle"
        verbose_name_plural = u"Archivo Cuentas bancarias Detalles"


class ArchivoCuentaBancoRubroDetalle(ModeloBase):
    det = models.ForeignKey(ArchivoCuentaBancoVerificadoDetalle, verbose_name=u'Detalle', on_delete=models.CASCADE)
    rubro = models.ForeignKey('sagest.Rubro', verbose_name=u'Rubro Relacionado', blank=True, null=True,
                              on_delete=models.CASCADE)
    saldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo', blank=True,
                                null=True)

    def __str__(self):
        return u'%s %s %s' % (self.det, self.rubro, self.saldo)

    class Meta:
        verbose_name = u"Archivo Cuenta de banco Detalle"
        verbose_name_plural = u"Archivo Cuentas bancarias Detalles"

class DetallePagoArchivoCuentaBanco(ModeloBase):
    pagobanco = models.ForeignKey(ArchivoCuentaBancoVerificadoDetalle, verbose_name=u'pago', on_delete=models.CASCADE)
    pago = models.ForeignKey('sagest.Pago', verbose_name=u'Rubro Relacionado', blank=True, null=True,
                              on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo', blank=True,
                                null=True)

    def __str__(self):
        return u'%s %s %s' % (self.pago, self.valor)

    class Meta:
        verbose_name = u"Detalle de pago banco"
        verbose_name_plural = u"Detalles de pago banco"


class DetalleNotaCreditoComprobante(ModeloBase):
    comprobanterecaudacion = models.ForeignKey(ComprobanteRecaudacion, blank=True, null=True,
                                               verbose_name=u'Comprobante', on_delete=models.CASCADE)
    numero = models.BigIntegerField(default=0, verbose_name=u'N√∫mero')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    conciliacionbancaria = models.ForeignKey(DetalleConciliacion, blank=True, null=True, verbose_name=u'Conciliaci√≥n',
                                             on_delete=models.CASCADE)

    def __str__(self):
        return u'Detalle Nota Cr√©dito Comprobante %s' % self.numero

    class Meta:
        verbose_name = u"Detalle Nota Cr√©ditoComprobante Recaudacion"
        verbose_name_plural = u"Detalles Notas Credito Comprobantes Recaudacion"

    def save(self, *args, **kwargs):
        super(DetalleNotaCreditoComprobante, self).save(*args, **kwargs)


class TipoConceptoTransferenciaGobierno(ModeloBase):
    nombre = models.CharField(default='', max_length=300, verbose_name=u'Tipo Concepto')
    partida = models.ForeignKey(Partida, on_delete=models.CASCADE)
    cuenta = models.ForeignKey(CuentaBanco, on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo Concepto Transferencia Gobierno"
        verbose_name_plural = u"Tipos Conceptos Transferencias Gobierno"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(TipoConceptoTransferenciaGobierno, self).save(*args, **kwargs)


class DetalleTransferenciaGobierno(ModeloBase):
    comprobanterecaudacion = models.ForeignKey(ComprobanteRecaudacion, verbose_name=u'Comprobante',
                                               on_delete=models.CASCADE)
    tipoconcepto = models.ForeignKey(TipoConceptoTransferenciaGobierno, verbose_name=u'Comprobante',
                                     on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u'N√∫mero')
    montopresupuestado = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u'Monto Presupuestado')
    montorecibido = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monto Recibido')
    diferencia = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Diferencia')
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n')
    cuota = models.CharField(default='', max_length=300, verbose_name=u'Cuota')
    conciliacionbancaria = models.ForeignKey(DetalleConciliacion, blank=True, null=True, verbose_name=u'Conciliaci√≥n',
                                             on_delete=models.CASCADE)

    def __str__(self):
        return u'Transferencia Gobierno: %s' % self.numero

    class Meta:
        verbose_name = u"Detalle Transferencia Gobierno"
        verbose_name_plural = u"Detalles Transferencias Gobierno"

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper().strip()
        self.cuota = self.cuota.upper().strip()
        super(DetalleTransferenciaGobierno, self).save(*args, **kwargs)


class ResumenComprobantePartida(ModeloBase):
    comprobanterecaudacion = models.ForeignKey(ComprobanteRecaudacion, verbose_name=u'Comprobante',
                                               on_delete=models.CASCADE)
    partida = models.ForeignKey(PartidasSaldo, verbose_name=u'Partida', on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')

    def __str__(self):
        return u'Resumen Comprobante Partida: %s-(%s)' % (self.partida, self.valor)

    class Meta:
        verbose_name = u"Resumen Comprobante Partida"
        verbose_name_plural = u"Resumen Comprobantes Partida"

    def save(self, *args, **kwargs):
        super(ResumenComprobantePartida, self).save(*args, **kwargs)


class PapeletasDepositos(ModeloBase):
    comprobanterecaudacion = models.ForeignKey(ComprobanteRecaudacion, verbose_name=u'Comprobante',
                                               on_delete=models.CASCADE)
    referencia = models.CharField(default='', max_length=50, verbose_name=u'Referencia')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Total')
    conciliacionbancaria = models.ForeignKey(DetalleConciliacion, blank=True, null=True, verbose_name=u'Conciliaci√≥n',
                                             on_delete=models.CASCADE)

    def __str__(self):
        return u'Papeleta: %s' % self.referencia

    class Meta:
        verbose_name = u"Papeleta Deposito"
        verbose_name_plural = u"Papeletas Depositos"

    def save(self, *args, **kwargs):
        if self.referencia:
            self.referencia = self.referencia.strip()
        super(PapeletasDepositos, self).save(*args, **kwargs)


class TipoTramite(ModeloBase):
    from django.contrib.auth.models import Group
    nombre = models.CharField(default='', max_length=300, verbose_name=u'Tipo Tr√°mite')
    grupo = models.ManyToManyField(Group)
    aprobadorectorado = models.BooleanField(default=False, verbose_name=u'aprobado rectorado')
    aprobadofinanciero = models.BooleanField(default=False, verbose_name=u'aprobado financiero')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo de Tramite"
        verbose_name_plural = u"Tipos de Tramites"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(TipoTramite, self).save(*args, **kwargs)


class ComprobanteEgreso(ModeloBase):
    numero = models.IntegerField(default=0, verbose_name=u'N√∫mero')
    beneficiario = models.CharField(verbose_name=u'Beneficiario', max_length=300)
    identificacion = models.CharField(verbose_name=u'Identificacion', max_length=14)
    fecha = models.DateField(verbose_name=u'Fecha')
    valordocumentos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor documentos')
    totalretenidoiva = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Total Retenido Iva')
    totalretenidofuente = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u'Total Retenido Fuente')
    totalotros = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Retenido')
    totalanticipos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Anticipos')
    totalmultas = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Multas')
    totalpagar = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total a pagar')
    concepto = models.TextField(default='', verbose_name=u'Concepto')
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n')
    estado = models.IntegerField(choices=ESTADO_PROCESO, blank=True, null=True, default=1)
    autoriza = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u'Persona Autoriza',
                                 on_delete=models.CASCADE)

    def __str__(self):
        return u'Conprobante Egreso %s - %s' % (self.numero, self.beneficiario)

    class Meta:
        verbose_name = u"Comprobante Egreso"
        verbose_name_plural = u"Comprobantes Egresos"

    def totaldesc(self):
        return self.totalanticipos + self.totalretenidofuente + self.totalretenidoiva + self.totalotros + self.totalmultas

    def mi_documento(self):
        if self.resumencomprobantesegreso_set.exists():
            return self.resumencomprobantesegreso_set.all()[0]
        return None

    def total_costos(self):
        return null_to_decimal(self.centrocostocomprobantepago_set.all().aggregate(valor=Sum('valor'))['valor'], 2)

    def save(self, *args, **kwargs):
        self.concepto = self.concepto.upper().strip()
        self.beneficiario = self.beneficiario.upper().strip()
        self.observacion = self.observacion.upper().strip()
        super(ComprobanteEgreso, self).save(*args, **kwargs)


class TramitePago(ModeloBase):
    tipotramite = models.ForeignKey(TipoTramite, verbose_name=u'Tipo de Tr√°mite', on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u'N√∫mero')
    valortotal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monto')
    valordocumentos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor documentos')
    totalretenido = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Retenido')
    totalanticipos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Anticipos')
    totalmultas = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Multas')
    totalpagar = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total a pagar')
    fechainicio = models.DateField(verbose_name=u'Fecha Inicio')
    fechafin = models.DateField(verbose_name=u'Fecha Fin', blank=True, null=True)
    pagado = models.BooleanField(default=False, verbose_name=u'Esta pagado')
    fechapagado = models.DateField(verbose_name=u'Fecha Pagado', blank=True, null=True)
    acreditado = models.BooleanField(default=False, verbose_name=u'Esta acreditado')
    aprobadorectorado = models.BooleanField(default=False, verbose_name=u'Esta aprobado rectorado')
    aprobadofinanciero = models.BooleanField(default=False, verbose_name=u'Esta aprobdo financiero')
    fechaaprobador = models.DateField(verbose_name=u'Fecha aprobado rec', blank=True, null=True)
    fechaaprobadof = models.DateField(verbose_name=u'Fecha aprobado finan', blank=True, null=True)
    fechaacreditado = models.DateField(verbose_name=u'Fecha Acreditado', blank=True, null=True)
    origen = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u'Departamento',
                               on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u'Responsable',
                                    on_delete=models.CASCADE)
    motivo = models.TextField(verbose_name=u'Motivo')
    motivorechazo = models.TextField(verbose_name=u'Motivo Rechazo', blank=True, null=True)
    estado = models.IntegerField(choices=ESTADO_TRAMITE_PAGO, verbose_name=u'Estado', default=1)
    comprobanteegreso = models.ForeignKey(ComprobanteEgreso, blank=True, null=True, verbose_name=u'Comprobante',
                                          on_delete=models.CASCADE)

    def __str__(self):
        return u'Tramite de: %s - %s' % (self.tipotramite.nombre, self.fechainicio)

    class Meta:
        verbose_name = u"Tramite de Pago"
        verbose_name_plural = u"Tramites de Pagos"
        ordering = ('fechainicio',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if extra:
            return eval('TramitePago.objects.filter(Q(numero__icontains="%s") | Q(origen__nombre__icontains="%s") | Q(motivo__icontains="%s")).filter(%s).distinct()[:%s]' % (q, q, q, extra, limit))
        return TramitePago.objects.filter(Q(numero__icontains=q) | Q(origen__nombre__icontains=q) | Q(motivo__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return str(self.numero) + " - " + self.motivo + " - $ " + str(self.valortotal)

    def flexbox_alias(self):
        return [self.id, self.numero]

    def rep_estado(self):
        return ESTADO_TRAMITE_PAGO[self.estado - 1][1]

    def puede_elimnarce(self):
        return self.recorridotramite_set.count() == 1

    def ubicacion_actual(self):
        if self.recorridotramite_set.exists():
            return self.recorridotramite_set.all().order_by('-fecharecibido')[0]
        return None

    # def saldo(self):
    #     valor = self.centrocostotramitepago_set.aggregate(valor=Sum('valor'))['valor']
    #     return self.valortotal - (valor if valor else 0)

    def recorridos(self):
        return self.recorridotramite_set.all().order_by('-fecharecibido')

    def total_beneficiarios(self):
        return null_to_decimal(self.beneficiaritramitepago_set.all().aggregate(valor=Sum('valor'))['valor'], 2)

    # def total_costos(self):
    #     return null_to_decimal(self.centrocostotramitepago_set.all().aggregate(valor=Sum('valor'))['valor'])

    def cantidad_doc(self):
        return self.documentostramitepago_set.all().count()

    def cantidad_doc_verificado(self):
        return self.documentostramitepago_set.filter(detalledocumentopago__verificado=True,
                                                     detalledocumentopago__recorrido=self.ubicacion_actual()).count()

    def save(self, *args, **kwargs):
        self.motivo = self.motivo.upper().strip()
        super(TramitePago, self).save(*args, **kwargs)


class RecorridoTramite(ModeloBase):
    tramitepago = models.ForeignKey(TramitePago, verbose_name=u'Tr√°mite', on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u'Departamento',
                                     on_delete=models.CASCADE)
    accion = models.ForeignKey(AccionesTramitePago, blank=True, null=True, verbose_name=u'Persona',
                               on_delete=models.CASCADE)
    estado = models.IntegerField(choices=ESTADO_TRAMITE_PAGO, verbose_name=u'Estado', default=1)
    fecharecibido = models.DateTimeField(verbose_name=u'Fecha recibido')
    fechaproceso = models.DateTimeField(verbose_name=u'Fecha de proceso', blank=True, null=True)

    def __str__(self):
        return u'%s - %s' % (self.tramitepago, self.departamento.nombre)

    class Meta:
        verbose_name = u"Tipo de Tramite"
        verbose_name_plural = u"Tipos de Tramites"
        ordering = ('tramitepago',)

    def rep_estado(self):
        return ESTADO_TRAMITE_PAGO[self.estado - 1][1]

    def save(self, *args, **kwargs):
        super(RecorridoTramite, self).save(*args, **kwargs)


class TipoDocumentoTramitePago(ModeloBase):
    nombre = models.CharField(verbose_name=u'Nombre', max_length=300)

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo de Documento Tramite"
        verbose_name_plural = u"Tipos de Documentos Tramites"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(TipoDocumentoTramitePago, self).save(*args, **kwargs)


class BeneficiariTramitePago(ModeloBase):
    tramitepago = models.ForeignKey(TramitePago, verbose_name=u'Tramite Pago', on_delete=models.CASCADE)
    beneficiario = models.ForeignKey('sga.Persona', on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    comprobante = models.ForeignKey(ComprobanteEgreso, blank=True, null=True, verbose_name=u'Comprobante',
                                    on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.beneficiario


class CentroCosto(ModeloBase):
    nombre = models.CharField(max_length=300, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return CentroCosto.objects.filter(nombre__icontains=q).distinct()[:limit]

    def flexbox_repr(self):
        return self.nombre

    def flexbox_alias(self):
        return [self.id, self.nombre]

    class Meta:
        verbose_name = u"Centro de Costo"
        verbose_name_plural = u"Centros de Costos"

    def saldo_periodo(self, anio):
        anioejercicio = AnioEjercicio.objects.filter(anioejercicio=anio)[0]
        if self.centrocostosaldo_set.filter(aniofiscal=anioejercicio).exists():
            return self.centrocostosaldo_set.filter(aniofiscal=anioejercicio)[0]
        else:
            saldo = CentroCostoSaldo(aniofiscal=anioejercicio,
                                     centrocosto=self)
            saldo.save()
            return saldo

    def en_uso(self):
        return self.centrocostocomprobantepago_set.exists() or self.centrocostotramiteingreso_set.exists()

    def actualiza_saldo_egreso(self, anio):
        valor = null_to_decimal(self.centrocostocomprobantepago_set.aggregate(valor=Sum('valor'))['valor'], 2)
        saldo = self.saldo_periodo(anio)
        saldo.egreso = valor
        saldo.save()

    def actualiza_saldo_ingreso(self, anio):
        valor = null_to_decimal(self.centrocostotramiteingreso_set.aggregate(valor=Sum('valor'))['valor'], 2)
        saldo = self.saldo_periodo(anio)
        saldo.ingreso = valor
        saldo.save()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(CentroCosto, self).save(*args, **kwargs)


class CentroCostoSaldo(ModeloBase):
    aniofiscal = models.ForeignKey(AnioEjercicio, verbose_name=u"Anio", on_delete=models.CASCADE)
    centrocosto = models.ForeignKey(CentroCosto, verbose_name=u"Centro de Costo", on_delete=models.CASCADE)
    egreso = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Egreso')
    ingreso = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Ingreso')

    def __str__(self):
        return u'%s' % self.centrocosto

    def flexbox_repr(self):
        return self.centrocosto

    def saldo(self):
        return null_to_decimal(self.ingreso - self.egreso, 2)


class DocumentosTramitePago(ModeloBase):
    tramitepago = models.ForeignKey(TramitePago, verbose_name=u'Tr√°mite', on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u'Departamento',
                                     on_delete=models.CASCADE)
    beneficiario = models.ForeignKey(BeneficiariTramitePago, blank=True, null=True, verbose_name=u'Departamento',
                                     on_delete=models.CASCADE)
    tipodocumento = models.ForeignKey(TipoDocumentoTramitePago, on_delete=models.CASCADE)
    numero = models.IntegerField(default=0)
    nombre = models.CharField(verbose_name=u'Nombre', max_length=300)
    descripcion = models.TextField(verbose_name=u'Descripcion')
    archivo = models.FileField(upload_to='pagos/%Y/%m/%d/', blank=True, null=True, verbose_name=u'Archivo Tramite')
    subtotal0 = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Subtotal0')
    subtotaliva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Subtotaliva')
    baseimponible = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Base Imponible')
    iva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'IVA')
    descuento = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Descuento')
    total = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total')
    retencionfuente = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                          verbose_name=u'Retencion en la fuente')
    comprobante = models.ForeignKey(ComprobanteEgreso, blank=True, null=True, verbose_name=u'Comprobante',
                                    on_delete=models.CASCADE)

    def __str__(self):
        return u'Documento del pago %s' % self.tramitepago

    class Meta:
        verbose_name = u"Documento de Pago"
        verbose_name_plural = u"Documentos de Pagos"

    def detalle_documento(self, recorrido):
        if self.detalledocumentopago_set.filter(recorrido=recorrido).exists():
            return self.detalledocumentopago_set.filter(recorrido=recorrido)[0]
        return None

    def esta_verificado(self, recorrido):
        detalle = self.detalle_documento(recorrido)
        return detalle.verificado if detalle else False

    def retenciones(self):
        return null_to_decimal(self.retencionesdocumentotramitepago_set.aggregate(valor=Sum('valorretenido'))['valor'],
                               2)

    def retencion_iva(self):
        return null_to_decimal(
            self.retencionesdocumentotramitepago_set.filter(codigo__impuestoretenido__id=2).aggregate(
                valor=Sum('valorretenido'))['valor'], 2)

    def retencion_fuente(self):
        return null_to_decimal(
            self.retencionesdocumentotramitepago_set.filter(codigo__impuestoretenido__id=1).aggregate(
                valor=Sum('valorretenido'))['valor'], 2)

    def verificado(self, recorrido):
        return self.detalledocumentopago_set.filter(recorrido=recorrido).exists()

    def recorrido_actual(self):
        if RecorridoTramite.objects.filter(tramitepago=self.tramitepago, fechaproceso__isnull=True).exists():
            return RecorridoTramite.objects.filter(tramitepago=self.tramitepago, fechaproceso__isnull=True)[0]
        return None

    def retencion(self):
        if self.documentoretencion_set.exists():
            return self.documentoretencion_set.all()[0]
        else:
            retencion = DocumentoRetencion(documento=self)
            retencion.save()
            return retencion

    def tiene_xml(self):
        return self.documentoretencion_set.filter(archivoxml__isnull=False).exists()

    def tiene_pdf(self):
        return self.documentoretencion_set.filter(archivopdf__isnull=False).exists()

    def en_uso(self):
        return self.comprobante

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        super(DocumentosTramitePago, self).save(*args, **kwargs)


class DetalleDocumentoPago(ModeloBase):
    recorrido = models.ForeignKey(RecorridoTramite, verbose_name=u'Recorrido', on_delete=models.CASCADE)
    documentopago = models.ForeignKey(DocumentosTramitePago, verbose_name=u'Documento Pago', on_delete=models.CASCADE)
    verificado = models.BooleanField(default=False, verbose_name=u'Verificado')
    observacion = models.TextField(verbose_name=u'Observaci√≥n')

    def __str__(self):
        return u'Detalle Documento: %s' % self.documentopago

    class Meta:
        verbose_name = u"Detalle Documento de Pago"
        verbose_name_plural = u"Detalles Documentos de Pagos"

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(DetalleDocumentoPago, self).save(*args, **kwargs)


class RetencionesDocumentoTramitePago(ModeloBase):
    documentotramitepago = models.ForeignKey(DocumentosTramitePago, verbose_name=u'Documento', on_delete=models.CASCADE)
    codigo = models.ForeignKey(CodigoRetencion, verbose_name=u'C√≥digo Retencion', on_delete=models.CASCADE)
    valorretenido = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Retenido')


class DetallePartidaTramitePago(ModeloBase):
    tramitepago = models.ForeignKey(TramitePago, verbose_name=u'Tramite Pago', on_delete=models.CASCADE)
    partida = models.ForeignKey(Partida, verbose_name=u'Partida', on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')


class DocumentoRetencion(ModeloBase):
    documento = models.ForeignKey(DocumentosTramitePago, verbose_name=u'Tramite Pago', on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u'N√∫mero')
    archivoxml = models.FileField(upload_to='comprobantes/retenciones/', blank=True, null=True,
                                  verbose_name=u'XML Archivo')
    archivopdf = models.FileField(upload_to='comprobantes/retenciones/', blank=True, null=True,
                                  verbose_name=u'Archivo PDF')

    def __str__(self):
        return u'Detalle Documento: %s' % self.documento

    class Meta:
        verbose_name = u"Documento de Retencion"
        verbose_name_plural = u"Detalles Documentos de Retenciones"
        unique_together = ('documento',)


class CertificacionTramitePago(ModeloBase):
    tramitepago = models.ForeignKey(TramitePago, verbose_name=u'Tramite Pago', on_delete=models.CASCADE)
    certificacion = models.ForeignKey(CertificacionPartida, verbose_name=u'Partida', on_delete=models.CASCADE)


# class CompromisoTramitePago(ModeloBase):
#     tramitepago = models.ForeignKey(TramitePago, verbose_name=u'Tramite Pago')
#     compromiso = models.ForeignKey(Compromiso)
#


class CentroCostoComprobantePago(ModeloBase):
    comprobante = models.ForeignKey(ComprobanteEgreso, verbose_name=u'Comprobante', on_delete=models.CASCADE)
    centrocosto = models.ForeignKey(CentroCosto, verbose_name=u'Centro de Costo', on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')


class CentroCostoTramiteIngreso(ModeloBase):
    comprobante = models.ForeignKey(ComprobanteRecaudacion, verbose_name=u'Tramite Pago', on_delete=models.CASCADE)
    centrocosto = models.ForeignKey(CentroCosto, verbose_name=u'Centro de Costo', on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')


# contabilidad
class PeriodoGastosPersonales(ModeloBase):
    descripcion = models.CharField(default='', max_length=300, verbose_name=u'Descripcion')
    anio = models.IntegerField(default=0, verbose_name=u"A√±o")
    fechadesde = models.DateField(verbose_name=u"Fecha Desde Ingreso")
    fechahasta = models.DateField(verbose_name=u"Fecha Hasta Ingreso")
    formato = models.FileField(upload_to='planificacion_gastos', blank=True, null=True, verbose_name=u'Formato para declaraci√≥n')
    mostrar = models.BooleanField(default=False, verbose_name=u'Mostrar')


    def __str__(self):
        return u'%s - %s' % (self.descripcion, self.anio)

    def puede_modificarse(self):
        return self.anio == datetime.now().year

    def gastospersonales(self):
        return self.gastospersonales_set.filter(status=True)

    def personasgasto(self):
        return self.gastospersonales().distinct('persona_id')

    def en_uso(self):
        return self.gastospersonales().exists()

    def t_conarchivos(self):
        return len(self.gastospersonales().exclude(Q(archivo__isnull=True) | Q(archivo='')))

    def t_sinarchivos(self):
        return len(self.gastospersonales().filter(Q(archivo__isnull=True)|Q(archivo=''),status=True))

    def t_gastospersonales(self):
        return len(self.gastospersonales())


    class Meta:
        verbose_name = u'Proveedor'
        verbose_name_plural = u'Proveedores'
        ordering = ['-anio', ]
        unique_together = ('anio',)


class GastosPersonales(ModeloBase):
    from sga.models import MESES_CHOICES
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    periodogastospersonales = models.ForeignKey(PeriodoGastosPersonales, verbose_name=u'Persona',
                                                on_delete=models.CASCADE)
    mes = models.IntegerField(choices=MESES_CHOICES, default=1, verbose_name=u"Mes")
    rmuproyectado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'RMU Proyectado')
    rmupagado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'RMU Pagado')
    horasextraspagado = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                            verbose_name=u'Horas Extras Pagado')
    horasextrasactual = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                            verbose_name=u'Horas Extras Actual')
    horasextrasproyectado = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'Horas Extras Proyectado')
    otrosingresos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Otros Ingresos')
    totalingresos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Ingresos')
    otrosgastos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Otros Gastos')
    rebajasotros = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Rebajas Otros')
    totalgastos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Gastos')
    excepcionesgastos = models.IntegerField(choices=EXCEPCIONES_GASTOS_PERSONALES, default=1,
                                            verbose_name=u'Excepciones Gatos')
    valorexcepcionedad = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u'Valor Excepcion')
    valorexcepciondiscapacidad = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                     verbose_name=u'Valor Excepcion')
    fraccionbasica = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Fraccion Basica')
    excedentehasta = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Excedente Hasta')
    impuestofraccion = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Impuesto Fraccion')
    porcentajeimpuesto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u'Porcentaje Impuesto')
    segurogastos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Seguro Gastos')
    valorretenido = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Retenido')
    impuestopagar = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Impuesto Pagar')
    detallevivienda = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Gasto vivienda')
    detalleeducacion = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Gasto educacion')
    detallesalud = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Gasto Salud')
    detallealimentacion = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u'Gasto alimentacion')
    detallevestimenta = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                            verbose_name=u'Gasto vestimenta')
    retensionmensual = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Retension Mensual')
    archivo = models.FileField(upload_to='gastos_personales', blank=True, null=True, verbose_name=u'Archivo de gastos personales firmados')


    def __str__(self):
        return u'%s - %s' % (self.persona, self.periodogastospersonales)

    def actualiza_detalle(self):
        for mes in range(self.mes, 13):
            if ResumenMesGastosPersonales.objects.filter(mes=mes,
                                                         gastospersonales__periodogastospersonales__anio=self.periodogastospersonales.anio,
                                                         gastospersonales__persona=self.persona).distinct().exists():
                detalle = ResumenMesGastosPersonales.objects.filter(mes=mes,
                                                                    gastospersonales__periodogastospersonales__anio=self.periodogastospersonales.anio,
                                                                    gastospersonales__persona=self.persona)[0]
                detalle.gastospersonales = self
                detalle.retensionmensual = self.retensionmensual
                detalle.save()
            else:
                detalle = ResumenMesGastosPersonales(mes=mes,
                                                     gastospersonales=self,
                                                     retensionmensual=self.retensionmensual)
                detalle.save()

    def rep_mes(self):
        from sga.models import MESES_CHOICES
        return MESES_CHOICES[self.mes - 1][1]


class ResumenMesGastosPersonales(ModeloBase):
    gastospersonales = models.ForeignKey(GastosPersonales, verbose_name=u'Gastos Personales', on_delete=models.CASCADE)
    mes = models.IntegerField(verbose_name=u"Mes")
    retensionmensual = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Retension Mensual')

    def rep_mes(self):
        from sga.models import MESES_CHOICES
        return MESES_CHOICES[self.mes - 1][1]


class TablaImpuestoRenta(ModeloBase):
    anio = models.IntegerField(verbose_name=u"A√±o")
    secuencia = models.IntegerField(verbose_name=u"Secuencia")
    fraccionbasica = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Fracci√≥n B√°sica')
    excesohasta = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Exceso Hasta')
    valorfraccionbasica = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u'Valor Fracci√≥n B√°sica')
    impuestofraccionbasica = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'Impuesto a la Fracci√≥n B√°sica')
    porcentajeimpuestofraccionbasica = models.IntegerField(default=0, verbose_name=u"A√±o")


class DeclaracionSriAnual(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    periodogastospersonales = models.ForeignKey(PeriodoGastosPersonales, verbose_name=u'Persona',
                                                on_delete=models.CASCADE)
    sueldosysalarios = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Sueldos y Salarios')
    sobresueldos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Sobresueldos')
    participacionutil = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                            verbose_name=u'Participaci√≥n Utilidades')
    otrosingresos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Otros Ingresos')
    decimotercer = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Decimo Tercer Sueldo')
    decimocuarto = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Decimo Cuarto')
    fondoreserva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Fondo Reserva')
    otrosingresossinrenta = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'Otros Ingresos sin renta gravada')
    fraccionbasica = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Fraccion Basica')
    aportepersonaleste = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u'Aporte Personal este empleador')
    totalingresos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Ingresos')
    otrosgastos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Otros Gastos')
    totalgastos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total Gastos')
    excepcionesgastos = models.IntegerField(choices=EXCEPCIONES_GASTOS_PERSONALES, default=1,
                                            verbose_name=u'Excepciones Gatos')
    valorexcepcionedad = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u'Valor Excepcion edad')
    valorexcepciondiscapacidad = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                     verbose_name=u'Valor Excepcion discapacidad')
    segurogastos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Seguro Gastos')
    valorretenido = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Retenido')
    impuestoasumido = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Impuesto Asumido')
    impuestopagar = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Impuesto Pagar')
    detallevivienda = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Gasto vivienda')
    detalleeducacion = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Gasto educacion')
    detallesalud = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Gasto Salud')
    detallealimentacion = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u'Gasto alimentacion')
    detallevestimenta = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                            verbose_name=u'Gasto vestimenta')
    retensionmensual = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Retension Mensual')
    baseimponible = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Base Imponible')
    ingresosgravados = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Ingresos Gravados')


class DeclaracionSriAnual107A(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    periodogastospersonales = models.ForeignKey(PeriodoGastosPersonales, verbose_name=u'Persona',
                                                on_delete=models.CASCADE)
    remuneracioncontribucionconeste = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                          verbose_name=u'Remuneracion Contribucion con este')
    remuneracioncontribucionconotro = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                          verbose_name=u'Remuneracion contribucion con otro')
    exoneracionremuneracion = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                  verbose_name=u'Exoneracion Remuneracion')
    totalremuneracion = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                            verbose_name=u'Total Remuneracion')
    numeromesestrabajadosconeste = models.IntegerField(default=0, verbose_name=u"Numero meses trabajados con este")
    numeromesestrabajadosconotro = models.IntegerField(default=0, verbose_name=u"Numero meses trabajados con otro")
    totalnumeromeses = models.IntegerField(default=0, verbose_name=u"Total numero meses")
    remuneracionmensualpromedio = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                      verbose_name=u'Remuneracion mensual promedio')
    numeromesescontribucionconeste = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                         verbose_name=u'Numero meses contribucion con este')
    numeromesescontribucionconotro = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                         verbose_name=u'Numero meses contribucion con otro')
    totalnumeromesescontribucion = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                       verbose_name=u'Total numero meses contribucion')
    totalcontribuciongenerada = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                    verbose_name=u'Total contribucion generada')
    creditotributariodonacioncontribucionotro = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                                    verbose_name=u'Credito tributario donacion contribucion otro')
    creditotributariodonacioncontribucioneste = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                                    verbose_name=u'Credito tributario donacion con tribucion este')
    creditotributariopordonacioncontribucionnoutilizadoporeste = models.DecimalField(default=0, max_digits=30,
                                                                                     decimal_places=2,
                                                                                     verbose_name=u'Credito tributario por donacion contribucion no utilizado por este')
    totalcreditotributariodonacioncontribucion = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                                     verbose_name=u'Total credito tributario donacion contribucion')
    contribucionpagar = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                            verbose_name=u'Contribucion pagar')
    contribucionasumidaotro = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                  verbose_name=u'Contribucion asumida otro')
    contribucionretenidaotro = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                   verbose_name=u'Contribucion retenida otro')
    contribucionasumidaeste = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                  verbose_name=u'Contribucion asumida este')
    contribucionretenidaeste = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                   verbose_name=u'Contribucion retenida este')


class ImpresionComprobantes(ModeloBase):
    anioejercicio = models.ForeignKey(AnioEjercicio, blank=True, null=True, verbose_name=u"Ejercicio",
                                      on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
    fecha = models.DateField(verbose_name=u"Fecha Impresi√≥n")
    descripcion = models.TextField(default='', verbose_name=u'Descripci√≥n')
    comprobantes = models.ManyToManyField(ComprobanteRecaudacion, verbose_name=u'Comprobantes')
    estado = models.IntegerField(choices=ESTADO_PROCESO, blank=True, null=True, default=1)

    def __str__(self):
        return u'Detalle Documento: %s' % self.descripcion

    class Meta:
        verbose_name = u"Documento de Comprobantes"
        verbose_name_plural = u"Documentos de Comprobantes"

    def cantidad_detalle(self):
        return self.comprobantes.count()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(ImpresionComprobantes, self).save(*args, **kwargs)


class ResumenComprobantesEgreso(ModeloBase):
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero")
    fecha = models.DateField(verbose_name=u"Fecha Impresi√≥n")
    descripcion = models.TextField(default='', verbose_name=u'Descripci√≥n')
    comprobantes = models.ManyToManyField(ComprobanteEgreso, verbose_name=u'Comprobantes')
    estado = models.IntegerField(choices=ESTADO_PROCESO, blank=True, null=True, default=1)

    def __str__(self):
        return u'Detalle Documento: %s' % self.descripcion

    class Meta:
        verbose_name = u"Documento de Comprobantes"
        verbose_name_plural = u"Documentos de Comprobantes"

    def cantidad_detalle(self):
        return self.comprobantes.count()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(ResumenComprobantesEgreso, self).save(*args, **kwargs)


class Aseguradora(ModeloBase):
    nombre = models.CharField(default='', max_length=300)

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Aseguradora"
        verbose_name_plural = u"Aseguradoras"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(Aseguradora, self).save(*args, **kwargs)


class Garantias(ModeloBase):
    tramitepago = models.ForeignKey(TramitePago, blank=True, null=True, verbose_name=u'Tr√°mite',
                                    on_delete=models.CASCADE)
    numero = models.CharField(default='', max_length=100)
    contratista = models.ForeignKey('sga.Persona', related_name="+", verbose_name=u'Contratista',
                                    on_delete=models.CASCADE)
    concepto = models.CharField(default='', max_length=300)
    proceso = models.CharField(default='', max_length=300)
    aseguradora = models.ForeignKey(Aseguradora, verbose_name=u'Aseguradora', on_delete=models.CASCADE)
    monto = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monto Contrato')
    totalasegurado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monto Asegurado')
    fechainicio = models.DateField(verbose_name=u"Fecha Inicio")
    fechafin = models.DateField(verbose_name=u"Fecha Fin")
    fechafinreal = models.DateField(verbose_name=u"Fecha Fin")
    autoriza = models.ForeignKey('sga.Persona', related_name="+", blank=True, null=True,
                                 verbose_name=u'Persona Autoriza', on_delete=models.CASCADE)

    def __str__(self):
        return u'%s - %s' % (self.numero, self.concepto)

    class Meta:
        verbose_name = u"Garantia"
        verbose_name_plural = u"Garantias"

    def vencido(self):
        return self.fechafin < datetime.now().date()

    def dias_vence(self):
        dias = self.fechafin - datetime.now().date()
        return dias.days

    def total_asegurado(self):
        return null_to_decimal(self.garantiaramo_set.aggregate(valor=Sum('montoasegurado'))['valor'], 2)

    def actualiza_total(self):
        self.totalasegurado = self.total_asegurado()
        self.save()

    def tiene_ramo(self):
        return self.garantiaramo_set.exists()

    def total_ramo(self):
        if self.tiene_ramo():
            return self.garantiaramo_set.count()
        return 1

    def mis_ramo(self):
        return self.garantiaramo_set.all().order_by('-id')

    def tiene_ramo_cumplimiento(self):
        return self.garantiaramo_set.filter(tipo__id=1).exists()

    def total_ramo_cumplimiento(self):
        return self.garantiaramo_set.filter(tipo__id=1).count()

    def mis_ramo_cumplimiento(self):
        return self.garantiaramo_set.filter(tipo__id=1)

    def tiene_ramo_anticipo(self):
        return self.garantiaramo_set.filter(tipo__id=2).exists()

    def total_ramo_anticipo(self):
        return self.garantiaramo_set.filter(tipo__id=2).count()

    def mis_ramo_anticipo(self):
        return self.garantiaramo_set.filter(tipo__id=2)

    def save(self, *args, **kwargs):
        self.concepto = self.concepto.upper()
        super(Garantias, self).save(*args, **kwargs)


class HistorialGarantias(ModeloBase):
    garantia = models.ForeignKey(Garantias, blank=True, null=True, verbose_name=u'Tr√°mite', on_delete=models.CASCADE)
    motivo = models.CharField(default='', max_length=300)
    fechafin = models.DateField(verbose_name=u"Fecha Fin")
    fechafinanterior = models.DateField(verbose_name=u"Fecha Fin")

    def __str__(self):
        return u'%s - %s' % (self.garantia, self.motivo)

    class Meta:
        verbose_name = u"Historial Garantia"
        verbose_name_plural = u"Historiaal Garantias"

    def save(self, *args, **kwargs):
        self.motivo = self.motivo.upper()
        super(HistorialGarantias, self).save(*args, **kwargs)


class GarantiaComplementaria(ModeloBase):
    garantia = models.ForeignKey(Garantias, blank=True, null=True, verbose_name=u'Tr√°mite', on_delete=models.CASCADE)
    concepto = models.CharField(default='', max_length=300)
    fechainicio = models.DateField(verbose_name=u"Fecha Inicio")
    fechafin = models.DateField(verbose_name=u"Fecha Fin")
    numero = models.CharField(default='', max_length=100)
    monto = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monto Contrato')

    def __str__(self):
        return u'%s - %s' % (self.garantia, self.concepto)

    class Meta:
        verbose_name = u"Historial Garantia"
        verbose_name_plural = u"Historiaal Garantias"

    def vencido(self):
        return self.fechafin < datetime.now().date()

    def dias_vence(self):
        dias = self.fechafin - datetime.now().date()
        return dias.days

    def total_asegurado(self):
        return null_to_decimal(self.garantiaramocomplementario_set.aggregate(valor=Sum('montoasegurado'))['valor'], 2)

    def actualiza_total(self):
        self.totalasegurado = self.total_asegurado()
        self.save()

    def tiene_ramo(self):
        return self.garantiaramocomplementario_set.exists()

    def tiene_ramo_cumplimiento(self):
        return self.garantiaramocomplementario_set.filter(tipo__id=1).exists()

    def tiene_ramo_anticipo(self):
        return self.garantiaramocomplementario_set.filter(tipo__id=2).exists()

    def save(self, *args, **kwargs):
        self.concepto = self.concepto.upper()
        self.numero = self.numero.upper()
        super(GarantiaComplementaria, self).save(*args, **kwargs)


class TipoRamo(ModeloBase):
    nombre = models.CharField(default='', max_length=300)

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo Ramo"
        verbose_name_plural = u"Tipos Ramos"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(TipoRamo, self).save(*args, **kwargs)


class GarantiaRamo(ModeloBase):
    tipo = models.ForeignKey(TipoRamo, verbose_name=u'Aseguradora', on_delete=models.CASCADE)
    garantia = models.ForeignKey(Garantias, verbose_name=u'Garantia', on_delete=models.CASCADE)
    numerodocumento = models.CharField(default='', max_length=100)
    fechainicio = models.DateField(verbose_name=u"Fecha Inicio")
    fechafin = models.DateField(verbose_name=u"Fecha Fin")
    porcentaje = models.DecimalField(default=0, max_digits=30, decimal_places=2)
    montoasegurado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monto Contrato')
    estado_emailnotificacion = models.BooleanField(default=False, verbose_name=u'Email notificaci√≥n')
    fecha_emailnotificacion = models.DateTimeField(blank=True, null=True)
    persona_envianotificacion = models.ForeignKey('sga.Persona', blank=True, null=True,
                                                  verbose_name=u'Quien envia notificacion de ramos',
                                                  on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='evidenciaasramos/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')

    def __str__(self):
        return u'%s' % self.garantia

    class Meta:
        verbose_name = u"Tipo Ramo"
        verbose_name_plural = u"Tipos Ramos"

    def puede_modificarse(self):
        garantia = self.garantia
        if not GarantiaRamo.objects.filter(fechafin__gt=self.fechafin, garantia=garantia).exists():
            return True
        else:
            return False


class GarantiaRamoComplementario(ModeloBase):
    tipo = models.ForeignKey(TipoRamo, verbose_name=u'Aseguradora', on_delete=models.CASCADE)
    garantia = models.ForeignKey(GarantiaComplementaria, verbose_name=u'Garantia', on_delete=models.CASCADE)
    numerodocumento = models.CharField(default='', max_length=100)
    fechainicio = models.DateField(verbose_name=u"Fecha Inicio")
    fechafin = models.DateField(verbose_name=u"Fecha Fin")
    porcentaje = models.DecimalField(default=0, max_digits=30, decimal_places=2)
    montoasegurado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monto Contrato')

    def __str__(self):
        return u'%s - %s' % (self.numerodocumento, self.montoasegurado)

    class Meta:
        verbose_name = u"Tipo Ramo"
        verbose_name_plural = u"Tipos Ramos"

    def puede_modificarse(self):
        garantia = self.garantia
        if not GarantiaRamoComplementario.objects.filter(fechafin__gt=self.fechafin, garantia=garantia).exists():
            return True
        else:
            return False


class DetalleSuministroProducto(ModeloBase):
    producto = models.ForeignKey(Producto, on_delete=models.CASCADE)
    cantidad = models.DecimalField(max_digits=30, decimal_places=4, default=0)
    estado = models.ForeignKey(EstadoProducto, blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return u"%s  - Cant:  %s" % (self.producto, self.cantidad)

    def ingreso_producto(self):
        return self.suministroproducto_set.all()[0]

    class Meta:
        verbose_name = u'Detalle Suministro producto'
        verbose_name_plural = u'Detalles Suministro de Productos'
        ordering = ('producto__codigo',)

    def save(self, *args, **kwargs):
        super(DetalleSuministroProducto, self).save(*args, **kwargs)


class SuministroProducto(ModeloBase):
    proveedor = models.ForeignKey(Proveedor, on_delete=models.CASCADE)
    tipodocumento = models.ForeignKey(TipoDocumento, blank=True, null=True, on_delete=models.CASCADE)
    numerodocumento = models.CharField(max_length=20, blank=True, null=True)
    autorizacion = models.CharField(max_length=40, blank=True, null=True)
    fechadocumento = models.DateField()
    descripcion = models.CharField(default='', max_length=200)
    ordencompra = models.CharField(default='', max_length=200)
    solicitudcompra = models.CharField(default='', max_length=200)
    fechaoperacion = models.DateTimeField()
    productos = models.ManyToManyField(DetalleSuministroProducto)
    anulado = models.BooleanField(default=False)

    def __str__(self):
        return self.proveedor.nombre + ' - ' + self.numerodocumento + ' - ' + self.fechaoperacion.strftime('%d-%m-%Y')

    class Meta:
        verbose_name = u'Suministro de Producto '
        verbose_name_plural = u'Suministros de Productos'

    def repr_id(self):
        return str(self.id).zfill(4)

    def cantidad_productos(self):
        return self.productos.all().count()

    def persona_recibe(self):
        return self.usuario_creacion.persona_set.all()[0]

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.solicitudcompra = self.solicitudcompra.upper()
        self.ordencompra = self.ordencompra.upper()
        super(SuministroProducto, self).save(*args, **kwargs)


class DetalleSuministroSalidaProducto(ModeloBase):
    producto = models.ForeignKey(Producto, on_delete=models.CASCADE)
    cantidad = models.DecimalField(max_digits=30, decimal_places=4, default=0)

    def __str__(self):
        return u"%s  - Cant:  %s " % (self.producto, self.cantidad)

    class Meta:
        verbose_name = u'Detalle Ingreso producto'
        verbose_name_plural = u'Detalles Ingreso de Productos'
        ordering = ('producto__codigo',)

    def salida_producto(self):
        if self.suministrosalidaproducto_set.all():
            return self.suministrosalidaproducto_set.all()[0]
        return None

    def save(self, *args, **kwargs):
        super(DetalleSuministroSalidaProducto, self).save(*args, **kwargs)


class SuministroSalidaProducto(ModeloBase):
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', verbose_name=u'Responsable', on_delete=models.CASCADE)
    numerodocumento = models.IntegerField(blank=True, null=True)
    descripcion = models.CharField(default='', max_length=200)
    fechaoperacion = models.DateTimeField()
    productos = models.ManyToManyField(DetalleSuministroSalidaProducto)
    observaciones = models.TextField(default='', verbose_name=u"Observaciones")
    anulado = models.BooleanField(default=False)

    def __str__(self):
        return u'%s %s %s' % (self.departamento.nombre, self.numerodocumento, self.fechaoperacion.strftime('%d-%m-%Y'))

    class Meta:
        verbose_name = u'Suministro Salida de Producto '
        verbose_name_plural = u'Suministros Salidas de Productos'
        ordering = ('-fechaoperacion', '-numerodocumento')
        unique_together = ('numerodocumento',)

    def repr_id(self):
        return str(self.id).zfill(4)

    def cantidad_productos(self):
        return self.productos.all().count()

    def persona_entrega(self):
        return self.usuario_creacion.persona_set.all()[0]

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.observaciones = self.observaciones.upper()
        super(SuministroSalidaProducto, self).save(*args, **kwargs)


# MODULO PAC
class BienesServiciosInsumosPac(ModeloBase):
    descripcion = models.TextField(default='', verbose_name=u'Descripci√≥n')
    tipo = models.IntegerField(choices=TIPO_PRODUCTO_PAC, blank=True, null=True)
    bienes = models.ForeignKey(CatalogoBien, blank=True, null=True, verbose_name=u'Producto', on_delete=models.CASCADE)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return BienesServiciosInsumosPac.objects.filter(descripcion__icontains=q).distinct()[:limit]

    def flexbox_repr(self):
        return self.descripcion + " - Tipo: " + self.get_tipo_display()

    def flexbox_alias(self):
        return self.descripcion + " - Tipo: " + self.get_tipo_display()

    def __str__(self):
        return u'%s - %s' % (self.descripcion, self.tipo)

    class Meta:
        verbose_name = u'BienesServiciosInsumosPac'
        verbose_name_plural = u'BienesServiciosInsumosPac'
        ordering = ('-descripcion',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(BienesServiciosInsumosPac, self).save(*args, **kwargs)


class PeriodoPac(ModeloBase):
    anio = models.IntegerField(default=0, verbose_name=u'A√±o')
    descripcion = models.TextField(default='', verbose_name=u'Descripci√≥n')
    observacion = models.TextField(default='', verbose_name=u'Descripci√≥n')
    permisoinicio = models.DateField(blank=True, null=True, verbose_name=u'Permiso Inicio')
    permisofin = models.DateField(blank=True, null=True, verbose_name=u'Permiso Fin')
    aprobado = models.BooleanField(default=False, verbose_name=u"Aprobar")
    fechaaprobado = models.DateField(blank=True, null=True, verbose_name=u'Fecha Aprobaci√≥n')

    def __str__(self):
        return u'Periodo proforma: %s - a√±o %s' % (self.descripcion, self.anio)

    class Meta:
        verbose_name = u"Periodo PAC"
        verbose_name_plural = u"Periodos PAC"

    def enuso(self):
        return Pac.objects.filter(periodo=self, status=True).exists()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.observacion = self.observacion.upper()
        super(PeriodoPac, self).save(*args, **kwargs)


class TopePeriodoPac(ModeloBase):
    periodo = models.ForeignKey(PeriodoPac, verbose_name=u'Periodo', on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Tope')
    estadotope = models.BooleanField(default=False, verbose_name=u'Estado Tope')

    class Meta:
        verbose_name = u'Tope Periodo PAC'
        verbose_name_plural = u'Topes Periodos PAC'
        ordering = ['-periodo', ]
        unique_together = ('periodo', 'departamento')


class Pac(ModeloBase):
    periodo = models.ForeignKey(PeriodoPac, verbose_name=u'Periodo', on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)
    acciondocumento = models.ForeignKey(AccionDocumento, blank=True, null=True, verbose_name=u'Actividad/Proyecto',
                                        on_delete=models.CASCADE)
    programa = models.ForeignKey(PartidaPrograma, blank=True, null=True, verbose_name=u'Programa',
                                 on_delete=models.CASCADE)
    actividad = models.ForeignKey(PartidaActividad, blank=True, null=True, verbose_name=u'Programa',
                                  on_delete=models.CASCADE)
    fuente = models.ForeignKey(PartidaFuente, blank=True, null=True, verbose_name=u'Programa', on_delete=models.CASCADE)
    item = models.ForeignKey(Partida, blank=True, null=True, verbose_name=u'Item', on_delete=models.CASCADE)
    caracteristicas = models.ForeignKey(BienesServiciosInsumosPac, verbose_name=u'Productos', on_delete=models.CASCADE)
    estadoitem = models.IntegerField(choices=ESTADO_ITEM, blank=True, null=True)
    cantidadenero = models.IntegerField(default=0, verbose_name=u'Cantidad Enero')
    cantidadfebrero = models.IntegerField(default=0, verbose_name=u'Cantidad Febrero')
    cantidadmarzo = models.IntegerField(default=0, verbose_name=u'Cantidad Marzo')
    cantidadabril = models.IntegerField(default=0, verbose_name=u'Cantidad Abril')
    cantidadmayo = models.IntegerField(default=0, verbose_name=u'Cantidad Mayo')
    cantidadjunio = models.IntegerField(default=0, verbose_name=u'Cantidad Junio')
    cantidadjulio = models.IntegerField(default=0, verbose_name=u'Cantidad Julio')
    cantidadagosto = models.IntegerField(default=0, verbose_name=u'Cantidad Agosto')
    cantidadseptiembre = models.IntegerField(default=0, verbose_name=u'Cantidad Septiembre')
    cantidadoctubre = models.IntegerField(default=0, verbose_name=u'Cantidad Octubre')
    cantidadnoviembre = models.IntegerField(default=0, verbose_name=u'Cantidad Noviembre')
    cantidaddiciembre = models.IntegerField(default=0, verbose_name=u'Cantidad Diciembre')
    unidadmedida = models.ForeignKey(UnidadMedida, blank=True, null=True, verbose_name=u'Unidad Medida',
                                     on_delete=models.CASCADE)
    costounitario = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Costo Unitario')
    subtotal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'SubTotal')
    iva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Iva')
    total = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total')
    fechaejecucion = models.DateField(verbose_name=u'Permiso Fin', blank=True, null=True)
    # valorreforma = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Reformas')
    valorejecutado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Ejecutado')
    saldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo')
    tipo = models.IntegerField(choices=TIPO_PAC, default=1, verbose_name=u'Tipo PAC')
    estado = models.IntegerField(choices=ESTADO_PAC, default=1, verbose_name=u'Estado PAC')

    def __str__(self):
        return u'PAC: %s' % self.periodo

    class Meta:
        verbose_name = u"PAC"
        verbose_name_plural = u"PACs"

    def estado_letra(self):
        return ESTADO_ITEM[self.estadoitem - 1][1]

    def tipo_pac(self):
        return TIPO_PAC[self.tipo - 1][1]

    def reformas(self):
        reformapac = None
        if ReformaPac.objects.filter(periodo=self.periodo, departamento=self.departamento,
                                     acciondocumento=self.acciondocumento, programa=self.programa,
                                     actividad=self.actividad, fuente=self.fuente, caracteristicas=self.caracteristicas,
                                     unidadmedida=self.unidadmedida, costounitario=self.costounitario,
                                     fechaejecucion=self.fechaejecucion, status=True).exists():
            reformapac = ReformaPac.objects.filter(periodo=self.periodo, departamento=self.departamento,
                                                   acciondocumento=self.acciondocumento, programa=self.programa,
                                                   actividad=self.actividad, fuente=self.fuente,
                                                   caracteristicas=self.caracteristicas, unidadmedida=self.unidadmedida,
                                                   costounitario=self.costounitario, fechaejecucion=self.fechaejecucion,
                                                   status=True)
        return reformapac

    def cantidadejecutada(self):
        valor = null_to_decimal(
            EjecucionPac.objects.filter(pac=self, status=True).aggregate(cantidad=Sum('cantidad'))['cantidad'], 2)
        return valor

    def cantidadsaldo(self):
        return self.cantidad() - self.cantidadejecutada()

    def valorejecutada(self):
        valor = null_to_decimal(
            EjecucionPac.objects.filter(pac=self, status=True).aggregate(total=Sum('total'))['total'], 2)
        return valor

    def valorreformasaldodisminuye(self):
        # self.acciondocumento
        valor = null_to_decimal(
            ReformaPac.objects.filter(periodo=self.periodo, departamento=self.departamento, acciondocumento=None,
                                      programa=self.programa, actividad=self.actividad, fuente=self.fuente,
                                      caracteristicas=self.caracteristicas, unidadmedida=self.unidadmedida,
                                      costounitario=self.costounitario, fechaejecucion=self.fechaejecucion,
                                      tiporeforma=2, status=True).aggregate(total=Sum('total'))['total'], 2)
        return valor

    def valorreformasaldoaumenta(self):
        # self.acciondocumento
        valor = null_to_decimal(
            ReformaPac.objects.filter(periodo=self.periodo, departamento=self.departamento, acciondocumento=None,
                                      programa=self.programa, actividad=self.actividad, fuente=self.fuente,
                                      caracteristicas=self.caracteristicas, unidadmedida=self.unidadmedida,
                                      costounitario=self.costounitario, fechaejecucion=self.fechaejecucion,
                                      tiporeforma=1, status=True).aggregate(total=Sum('total'))['total'], 2)
        return valor

    def cantidad(self):
        return self.cantidadenero + self.cantidadfebrero + self.cantidadmarzo + self.cantidadabril + self.cantidadmayo + self.cantidadjunio + self.cantidadjulio + self.cantidadagosto + self.cantidadseptiembre + self.cantidadoctubre + self.cantidadnoviembre + self.cantidaddiciembre

    def primera_creacion(self, departamento):
        pacs = Pac.objects.filter(status=True, estado__in=[1, 2], departamento=departamento)
        fecha = ''
        if pacs:
            fecha = str(convertir_fecha_invertida_hora(str(pacs.order_by('fecha_creacion')[0].fecha_creacion)))
        return fecha

    def ultima_modificacion(self, departamento):
        pacs = Pac.objects.filter(status=True, estado__in=[1, 2], departamento=departamento)
        fecha = ''
        if pacs:
            modificacion = Pac.objects.filter(status=True, estado__in=[1, 2], departamento=departamento,
                                              fecha_modificacion__isnull=False)
            if modificacion:
                fecha = str(convertir_fecha_invertida_hora(
                    str(modificacion.order_by('-fecha_modificacion').fecha_modificacion)))
            else:
                fecha = str(convertir_fecha_invertida_hora(str(pacs.order_by('fecha_creacion')[0].fecha_creacion)))
        return fecha

    def save(self, *args, **kwargs):
        self.valorejecutado = self.valorejecutada()
        subtotal = null_to_decimal(
            ((self.cantidad() - self.cantidadejecutada()) * null_to_decimal(self.costounitario, 2)), 2)
        self.total = subtotal + (null_to_decimal(subtotal * IVA))
        if self.tipo == 1:
            subtotal = null_to_decimal((self.cantidadsaldo() * null_to_decimal(self.costounitario, 2)), 2)
            self.saldo = subtotal + (null_to_decimal(subtotal * IVA)) + null_to_decimal(self.valorreformasaldoaumenta(),
                                                                                        2) - null_to_decimal(
                self.valorreformasaldodisminuye(), 2)
        else:
            self.saldo = null_to_decimal(self.valorreformasaldoaumenta(), 2) - null_to_decimal(
                self.valorreformasaldodisminuye(), 2) - null_to_decimal(self.valorejecutado, 2)
        super(Pac, self).save(*args, **kwargs)


class Reforma(ModeloBase):
    descripcion = models.TextField(default='', verbose_name=u'Descripci√≥n')
    memorando = models.TextField(default='', verbose_name=u'Memorando')
    informe = models.TextField(default='', verbose_name=u'Informe')
    estadoreforma = models.IntegerField(choices=ESTADO_REFORMA, verbose_name=u'Estado Reforma')
    fecha = models.DateField(verbose_name=u'Fecha')
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento Beneficiado', on_delete=models.CASCADE)

    def __str__(self):
        return u'Reforma: %s - Memorando: %s' % (self.descripcion, self.memorando)

    class Meta:
        verbose_name = u"Reforma"
        verbose_name_plural = u"Reformas"

    def estado_letra(self):
        return ESTADO_REFORMA[self.estadoreforma - 1][1]

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.memorando = self.memorando.upper()
        self.informe = self.informe.upper()
        super(Reforma, self).save(*args, **kwargs)


class ReformaPac(ModeloBase):
    periodo = models.ForeignKey(PeriodoPac, verbose_name=u'Periodo', on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)
    acciondocumento = models.ForeignKey(AccionDocumento, verbose_name=u'Actividad/Proyecto', on_delete=models.CASCADE)
    programa = models.ForeignKey(PartidaPrograma, blank=True, null=True, verbose_name=u'Programa',
                                 on_delete=models.CASCADE)
    actividad = models.ForeignKey(PartidaActividad, blank=True, null=True, verbose_name=u'Programa',
                                  on_delete=models.CASCADE)
    fuente = models.ForeignKey(PartidaFuente, blank=True, null=True, verbose_name=u'Programa', on_delete=models.CASCADE)
    item = models.ForeignKey(Partida, blank=True, null=True, verbose_name=u'Item', on_delete=models.CASCADE)
    caracteristicas = models.ForeignKey(BienesServiciosInsumosPac, verbose_name=u'Caracteristicas',
                                        on_delete=models.CASCADE)
    estadoitem = models.IntegerField(choices=ESTADO_ITEM, blank=True, null=True)
    cantidad = models.IntegerField(default=0, verbose_name=u'Cantidad')
    unidadmedida = models.ForeignKey(UnidadMedida, blank=True, null=True, verbose_name=u'Unidad Medida',
                                     on_delete=models.CASCADE)
    costounitario = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Costo Unitario')
    total = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total')
    fechaejecucion = models.DateField(verbose_name=u'Fecha Ejecucion', blank=True, null=True)
    tiporeforma = models.IntegerField(choices=TIPO_REFORMA, default=None, blank=True, null=True,
                                      verbose_name=u'Tipo Reforma')


class EjecucionPac(ModeloBase):
    pac = models.ForeignKey(Pac, verbose_name=u'Pac', on_delete=models.CASCADE)
    cantidad = models.IntegerField(default=0, verbose_name=u'Cantidad')
    costounitario = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Costo Unitario')
    total = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total')
    fecha = models.DateField(verbose_name=u'Fecha', blank=True, null=True)
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n')
    archivo = models.FileField(upload_to='pac/ejecucion/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')

    def download_link(self):
        return self.archivo.url

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(EjecucionPac, self).save(*args, **kwargs)


class NominaPac(ModeloBase):
    periodopac = models.ForeignKey(PeriodoPac, verbose_name=u'Periodo Pac', on_delete=models.CASCADE)
    programa = models.TextField(default='', verbose_name=u'Programa')
    subprograma = models.TextField(default='', verbose_name=u'Subprograma')
    proyecto = models.TextField(default='', verbose_name=u'Proyecto')
    actividad = models.TextField(default='', verbose_name=u'Actividad')
    funcion = models.TextField(default='', verbose_name=u'Funci√≥n')
    geografico = models.TextField(default='', verbose_name=u'Geogr√°fico')
    fuente = models.TextField(default='', verbose_name=u'Fuente')
    organismo = models.TextField(default='', verbose_name=u'Organismo')
    correlativo = models.TextField(default='', verbose_name=u'Correlativo')
    item = models.TextField(default='', verbose_name=u'Item')
    descripcion_item = models.TextField(default='', verbose_name=u'Descripci√≥n √≠tem')
    regimen_laboral = models.TextField(default='', verbose_name=u'R√©gimen laboral')
    rmu = models.TextField(default='', verbose_name=u'rmu')
    estado = models.TextField(default='', verbose_name=u'Estado')
    desde = models.TextField(default='', verbose_name=u'Desde')
    hasta = models.TextField(default='', verbose_name=u'Hasta')
    unidad_organizacional = models.TextField(default='', verbose_name=u'Unidad organizacional')
    cedula = models.TextField(default='', verbose_name=u'N√≥mina')
    nomina = models.TextField(default='', verbose_name=u'N√≥mina')
    rmu_sueldo_enero = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'rmu_sueldo_enero')
    decimo_tercero_enero = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'decimo_tercero_enero')
    decimo_cuarto_enero = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u'decimo_cuarto_enero')
    aporte_patronal_enero = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'aporte_patronal_enero')
    fondos_reserva_enero = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'fondos_reserva_enero')
    rmu_sueldo_febrero = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u'rmu_sueldo_febrero')
    decimo_tercero_febrero = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'decimo_tercero_febrero')
    decimo_cuarto_febrero = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'decimo_cuarto_febrero')
    aporte_patronal_febrero = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                  verbose_name=u'aporte_patronal_febrero')
    fondos_reserva_febrero = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'fondos_reserva_febrero')
    rmu_sueldo_marzo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'rmu_sueldo_marzo')
    decimo_tercero_marzo = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'decimo_tercero_marzo')
    decimo_cuarto_marzo = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u'decimo_cuarto_marzo')
    aporte_patronal_marzo = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'aporte_patronal_marzo')
    fondos_reserva_marzo = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'fondos_reserva_marzo')
    rmu_sueldo_abril = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'rmu_sueldo_abril')
    decimo_tercero_abril = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'decimo_tercero_abril')
    decimo_cuarto_abril = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u'decimo_cuarto_abril')
    aporte_patronal_abril = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'aporte_patronal_abril')
    fondos_reserva_abril = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'fondos_reserva_abril')
    rmu_sueldo_mayo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'rmu_sueldo_mayo')
    decimo_tercero_mayo = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u'decimo_tercero_mayo')
    decimo_cuarto_mayo = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u'decimo_cuarto_mayo')
    aporte_patronal_mayo = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'aporte_patronal_mayo')
    fondos_reserva_mayo = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u'fondos_reserva_mayo')
    rmu_sueldo_junio = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'rmu_sueldo_junio')
    decimo_tercero_junio = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'decimo_tercero_junio')
    decimo_cuarto_junio = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u'decimo_cuarto_junio')
    aporte_patronal_junio = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'aporte_patronal_junio')
    fondos_reserva_junio = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'fondos_reserva_junio')
    rmu_sueldo_julio = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'rmu_sueldo_julio')
    decimo_tercero_julio = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'decimo_tercero_julio')
    decimo_cuarto_julio = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                              verbose_name=u'decimo_cuarto_julio')
    aporte_patronal_julio = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'aporte_patronal_julio')
    fondos_reserva_julio = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'fondos_reserva_julio')
    rmu_sueldo_agosto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                            verbose_name=u'rmu_sueldo_agosto')
    decimo_tercero_agosto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'decimo_tercero_agosto')
    decimo_cuarto_agosto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'decimo_cuarto_agosto')
    aporte_patronal_agosto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'aporte_patronal_agosto')
    fondos_reserva_agosto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'fondos_reserva_agosto')
    rmu_sueldo_septiembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'rmu_sueldo_septiembre')
    decimo_tercero_septiembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                    verbose_name=u'decimo_tercero_septiembre')
    decimo_cuarto_septiembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                   verbose_name=u'decimo_cuarto_septiembre')
    aporte_patronal_septiembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                     verbose_name=u'aporte_patronal_septiembre')
    fondos_reserva_septiembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                    verbose_name=u'fondos_reserva_septiembre')
    rmu_sueldo_octubre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u'rmu_sueldo_octubre')
    decimo_tercero_octubre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'decimo_tercero_octubre')
    decimo_cuarto_octubre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'decimo_cuarto_octubre')
    aporte_patronal_octubre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                  verbose_name=u'aporte_patronal_octubre')
    fondos_reserva_octubre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'fondos_reserva_octubre')
    rmu_sueldo_noviembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'rmu_sueldo_noviembre')
    decimo_tercero_noviembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                   verbose_name=u'decimo_tercero_noviembre')
    decimo_cuarto_noviembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                  verbose_name=u'decimo_cuarto_noviembre')
    aporte_patronal_noviembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                    verbose_name=u'aporte_patronal_noviembre')
    fondos_reserva_noviembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                   verbose_name=u'fondos_reserva_noviembre')
    rmu_sueldo_diciembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'rmu_sueldo_diciembre')
    decimo_tercero_diciembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                   verbose_name=u'decimo_tercero_diciembre')
    decimo_cuarto_diciembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                  verbose_name=u'decimo_cuarto_diciembre')
    aporte_patronal_diciembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                    verbose_name=u'aporte_patronal_diciembre')
    fondos_reserva_diciembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                   verbose_name=u'fondos_reserva_diciembre')


class TipoAccionPersonal(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre


class MotivoAccionPersonal(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')
    abreviatura = models.CharField(default='', blank=True, null=True, max_length=20, verbose_name=u'Abreviatura')
    orden = models.IntegerField(verbose_name='Orden', blank=True, null=True)
    activo = models.BooleanField(default=False, verbose_name=u'Activo', blank=True, null=True)


    def __str__(self):
        return u'%s' % self.nombre

    def configurado(self):
        return self.motivoaccionpersonaldetalle_set.filter(status=True).exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.abreviatura = self.abreviatura.upper()
        super(MotivoAccionPersonal, self).save(*args, **kwargs)


class BaseLegalAccionPersonal(ModeloBase):
    descripcion = models.TextField(default='', blank=True, null=True, verbose_name=u'Descripci√≥n')

    def __str__(self):
        return u'%s' % self.descripcion

    def save(self, *args, **kwargs):
        # self.descripcion = self.descripcion.upper()
        super(BaseLegalAccionPersonal, self).save(*args, **kwargs)


class MotivoAccionPersonalDetalle(ModeloBase):
    motivo = models.ForeignKey(MotivoAccionPersonal, verbose_name=u"Motivo de acci√≥n de personal",
                               on_delete=models.CASCADE)
    regimenlaboral = models.ForeignKey(RegimenLaboral, verbose_name=u"R√©gimen Laboral", on_delete=models.CASCADE)
    baselegal = models.ForeignKey(BaseLegalAccionPersonal, verbose_name=u"Base Legal", on_delete=models.CASCADE)

    def __str__(self):
        return u'%s-%s' % (self.motivo, self.baselegal)

    def puede_eliminar(self):
        if AccionPersonal.objects.filter(motivo_id=self.id).exists():
            return False
        return True


class IndiceGrupo(ModeloBase):
    nombre = models.TextField(default='', verbose_name=u'Descripci√≥n Grupo')

    def __str__(self):
        return u'%s' % self.nombre


class IndiceSesion(ModeloBase):
    indicegrupo = models.ForeignKey(IndiceGrupo, blank=True, null=True, verbose_name=u"Sesi√≥n",
                                    on_delete=models.CASCADE)
    nombre = models.TextField(default='', verbose_name=u'Descripci√≥n Sesi√≥n')

    def __str__(self):
        return u'%s' % self.nombre


class IndiceSerie(ModeloBase):
    indicesesion = models.ForeignKey(IndiceSesion, blank=True, null=True, verbose_name=u"Serie",
                                     on_delete=models.CASCADE)
    nombre = models.TextField(default='', verbose_name=u'Descripci√≥n Serie')

    def __str__(self):
        return u'%s' % self.nombre


class IndiceSeriePuesto(ModeloBase):
    indiceserie = models.ForeignKey(IndiceSerie, blank=True, null=True, verbose_name=u"Serie", on_delete=models.CASCADE)
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                           verbose_name=u"Denominaci√≥n Puesto", on_delete=models.CASCADE)
    escalaocupacional = models.ForeignKey(EscalaOcupacional, blank=True, null=True, verbose_name=u"Escala Ocupacional",
                                          on_delete=models.CASCADE)
    tipogrado = models.IntegerField(choices=TIPO_GRADO, default=0, verbose_name=u'Tipo Grado')
    codificacion = models.TextField(default='', verbose_name=u'Codificaci√≥n')
    rmu = models.FloatField(default=0.00)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return IndiceSeriePuesto.objects.filter(denominacionpuesto__descripcion__icontains=q).distinct()[:limit]

    def flexbox_repr(self):
        return self.denominacionpuesto.descripcion + " - " + self.escalaocupacional.descripcion + " - " + self.get_tipogrado_display() + " - " + str(
            self.rmu)

    def flexbox_alias(self):
        return self.denominacionpuesto.descripcion, self.escalaocupacional.descripcion + "," + self.get_tipogrado_display() + "," + str(
            self.rmu)


ESTADO_ARCHIVO_FIRMADO = (
    (0, 'Pendiente'),
    (1, 'Firm√≥ usuario'),
    (2, 'Firm√≥ TH'),
    (3, 'Firm√≥ Director'),
    (4, 'Aprobado'),
    (5, 'Anulado'),
    (6, 'Proceso'),
)


#EDITAR BLADIMIR
class AccionPersonal(ModeloBase):
    persona = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Persona", on_delete=models.CASCADE)
    subroganterector = models.BooleanField(default=True, verbose_name=u'Subrogante rector')
    personarector = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='personarector_set',
                                      verbose_name=u"Persona rector", on_delete=models.CASCADE)
    subroganterrhh = models.BooleanField(default=True, verbose_name=u'Subrogante talento humano')
    personauath = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='personauath_set',
                                    verbose_name=u"Persona talento humano", on_delete=models.CASCADE)
    personaregistrocontrol = models.ForeignKey('sga.Persona', blank=True, null=True,
                                               related_name='personaregistrocontrol_set',
                                               verbose_name=u"Persona registro y control", on_delete=models.CASCADE)
    regimenlaboral = models.ForeignKey(RegimenLaboral, blank=True, null=True, verbose_name=u"R√©gimen Laboral",
                                       on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoAccionPersonal, blank=True, null=True, verbose_name=u"Tipo acci√≥n personal",
                             on_delete=models.CASCADE)
    motivo = models.ForeignKey(MotivoAccionPersonalDetalle, blank=True, null=True,
                               verbose_name=u"Motivo acci√≥n personal", on_delete=models.CASCADE)
    numero = models.IntegerField(default=0, verbose_name=u'Numero')
    numerodocumento = models.CharField(null=True,blank=True, max_length=100, verbose_name=u"N√∫mero de acci√≥n personal manual")
    abreviatura = models.CharField(null=True, blank=True, max_length=50, verbose_name=u'Abreviatura')
    documento = models.CharField(null=True, blank=True, max_length=100, verbose_name=u'Documento')
    anio = models.IntegerField(default=0, verbose_name=u'A√±o')
    fechaelaboracion = models.DateField(verbose_name=u'Fecha elaboraci√≥n',null=True, blank=True,)
    fechaaprobacion = models.DateField(verbose_name=u'Fecha aprobacion',null=True, blank=True,)
    fechadesde = models.DateField(verbose_name=u'Fecha desde',null=True, blank=True,)
    fechahasta = models.DateField(verbose_name=u'Fecha hasta',null=True, blank=True,)
    explicacion = models.TextField(default='', verbose_name=u'Explicaci√≥n')
    departamentoactual = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Departamento actual",
                                           on_delete=models.CASCADE)
    denominacionpuestoactual = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                                 verbose_name=u"Denominaci√≥n puesto actual", on_delete=models.CASCADE)
    escalaocupacionalactual = models.ForeignKey(EscalaOcupacional, blank=True, null=True,
                                                verbose_name=u"Escala ocupacional actual", on_delete=models.CASCADE)
    tipogradoactual = models.IntegerField(choices=TIPO_GRADO, default=0, verbose_name=u'Tipo Grado actual')
    lugartrabajoactual = models.CharField(default='', max_length=50, verbose_name=u"Lugar trabajo actual")
    rmuactual = models.FloatField(default=0.00)
    partidapresupuestariaactual = models.TextField(default='', verbose_name=u'Partida presupuestaria')
    departamento = models.ForeignKey(Departamento, blank=True, null=True, related_name='departamento_set',
                                     verbose_name=u"Departamento", on_delete=models.CASCADE)
    indiceocupacionalpropuesto = models.ForeignKey(IndiceSeriePuesto, blank=True, null=True,
                                                   related_name='indiceocupacionalpropuesto_set',
                                                   verbose_name=u"Indice ocupacional propuesto",
                                                   on_delete=models.CASCADE)
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                           related_name='denominacionpuesto_set', verbose_name=u"Denominaci√≥n puesto",
                                           on_delete=models.CASCADE)
    escalaocupacional = models.ForeignKey(EscalaOcupacional, blank=True, null=True,
                                          related_name='escalaocupacional_set', verbose_name=u"Escala ocupacional",
                                          on_delete=models.CASCADE)
    tipogrado = models.IntegerField(choices=TIPO_GRADO, default=0, verbose_name=u'Tipo Grado')
    lugartrabajo = models.CharField(default='', max_length=50, verbose_name=u"Lugar trabajo")
    rmu = models.FloatField(default=0.00)
    partidapresupuestaria = models.TextField(default='', verbose_name=u'Partida presupuestaria')
    numeroactafinal = models.IntegerField(blank=True, null=True, default=0, verbose_name=u'Numero acta final')
    fechaactafinal = models.DateField(blank=True, null=True, verbose_name=u'Fecha acta final')
    numerocaucion = models.IntegerField(blank=True, null=True, default=0, verbose_name=u'Numero caucion')
    fechacaucion = models.DateField(blank=True, null=True, verbose_name=u'Fecha caucion')
    personareemplaza = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='personareemplaza_set',
                                         verbose_name=u"Persona reemplaza", on_delete=models.CASCADE)
    denominacionpuestoreemplazo = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                                    related_name='denominacionpuestoreemplazo_set',
                                                    verbose_name=u"Denominaci√≥n puesto reemplazo",
                                                    on_delete=models.CASCADE)
    cesofunciones = models.TextField(default='', verbose_name=u'Ceso funciones')
    numeroaccion = models.IntegerField(blank=True, null=True, default=0, verbose_name=u'Numero caucion')
    fecharegistroaccion = models.DateField(blank=True, null=True, verbose_name=u'Fecha registroaccion')
    colegioprofesionales = models.TextField(default='', verbose_name=u'Colegio profesionales')
    finalizado = models.BooleanField(default=False, verbose_name=u'Acci√≥n personal finalizada')
    archivo = models.FileField(upload_to='accionpersonal/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'Acci√≥n Personal')
    nroregistro = models.IntegerField(blank=True, null=True, default=0, verbose_name=u'Numero registro')
    observacion = models.TextField(default='', verbose_name=u'Observacion',blank=True, null=True)
    estadoarchivo = models.IntegerField(choices=ESTADO_ARCHIVO_FIRMADO, default=0, verbose_name=u'Estado Archivo')
    ubicacionfisico = models.CharField(default='', max_length=150, verbose_name=u"Ubicaci√≥n archivo f√≠sico")
    motivoaccion = models.ForeignKey(MotivoAccionPersonal,blank=True, null=True, verbose_name=u"Motivo de acci√≥n de personal",
                               on_delete=models.CASCADE)
    procesoinstitucional = models.IntegerField(choices=TIPO_PROCESO_TH, blank=True, null=True, verbose_name=u'Proceso institucional')
    declaracionjuramentada = models.BooleanField(default=False, verbose_name=u'Presento declaraci√≥n juramentada')
    nivelgestion = models.IntegerField(choices=NIVEL_GESTION, blank=True, null=True, verbose_name=u'Nivel de gesti√≥n')
    estructuraprogramatica = models.ForeignKey(EstructuraProgramatica, blank=True, null=True,
                                               verbose_name=u"Estructura Programatica", on_delete=models.CASCADE)
    partidaindividual = models.IntegerField(default=0, verbose_name=u"Partida Individual")


    def __str__(self):
        return u'%s -  %s' % (self.numero if self.numero else self.numerodocumento, self.persona)

    def descargararchivo(self):
        return self.archivo.url

    def get_procesoinstitucional(self):
        return dict(TIPO_PROCESO_TH)[int(self.procesoinstitucional)]

    def get_nivelgestion(self):
        return dict(NIVEL_GESTION)[int(self.nivelgestion)]

    def historial_documentos(self):
        if self.historicodocumentospersonaacciones_set.filter(status=True):
            return self.historicodocumentospersonaacciones_set.filter(status=True,
                                                                      personaaccionvacacion__isnull=False).order_by(
                '-fecha_creacion')

    def documento_firmado(self):
        if self.historial_documentos():
            return self.historial_documentos().first().archivofirmado
        return self.archivo

    def color_estado(self):
        color = 'success'
        if not self.finalizado:
            estado = self.estadoarchivo
            if estado == 0:
                color = 'warning'
            elif estado == 1:
                color = 'info'
            elif estado == 2:
                color = 'aqua'
            else:
                color = 'primary'
        return color

    def save(self, *args, **kwargs):
        # self.explicacion = self.explicacion.upper()
        super(AccionPersonal, self).save(*args, **kwargs)


class UbicacionProceso(ModeloBase):
    descripcion = models.CharField(max_length=250, verbose_name=u'Descripci√≥n')

    def __str__(self):
        return u'%s' % self.descripcion

    class Meta:
        verbose_name = u"Ubicacion Archivo"
        verbose_name_plural = u"Ubicacion de Archivos"


TIPO_TRAMITE = (
    (1, u'Ingreso'),
    (2, u'Egreso'),
    (3, u'Otro'),
)


class PerchaArchivo(ModeloBase):
    numero = models.CharField(max_length=50, verbose_name=u'N¬∞')

    def __str__(self):
        return u'%s' % (self.numero)


class FilaArchivo(ModeloBase):
    numero = models.CharField(max_length=50, verbose_name=u'N¬∞')

    def __str__(self):
        return u'%s' % (self.numero)


class TipoPagoArchivo(ModeloBase):
    nombre = models.TextField(default='', verbose_name=u'Nombre tipo pago', blank=True, null=True)

    def __str__(self):
        return u'%s' % (self.nombre)

    class Meta:
        verbose_name = u"Tipo Pago archivo"
        verbose_name_plural = u"Tipo pago archivos"

    def usado(self):
        return self.subtipopagoarchivo_set.filter(status=True).exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(TipoPagoArchivo, self).save(*args, **kwargs)


class SubTipoPagoArchivo(ModeloBase):
    tipopago = models.ForeignKey(TipoPagoArchivo, verbose_name=u"Tipo de pago", blank=True, null=True,
                                 on_delete=models.CASCADE)
    nombre = models.TextField(default='', verbose_name=u'Nombre sub tipo pago', blank=True, null=True)

    def __str__(self):
        return u'%s' % (self.nombre)

    class Meta:
        verbose_name = u"Sub Tipo Pago archivo"
        verbose_name_plural = u"Sub Tipo pago archivos"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(SubTipoPagoArchivo, self).save(*args, **kwargs)


class ProveedorArchivo(ModeloBase):
    nombre = models.CharField(default='', max_length=300)
    alias = models.CharField(default='', max_length=100, blank=True, null=True)
    identificacion = models.CharField(default='', max_length=200, blank=True, null=True)
    direccion = models.CharField(default='', max_length=300, blank=True, null=True)
    pais = models.ForeignKey('sga.Pais', max_length=100, blank=True, null=True, on_delete=models.CASCADE)
    telefono = models.CharField(default='', max_length=100, blank=True, null=True)
    celular = models.CharField(default='', max_length=100, blank=True, null=True)
    email = models.CharField(default='', max_length=200, blank=True, null=True)
    fax = models.CharField(default='', max_length=100, blank=True, null=True)

    def __str__(self):
        return '%s - %s' % (self.identificacion, self.nombre)

    class Meta:
        verbose_name = u'Proveedor'
        verbose_name_plural = u'Proveedores'
        ordering = ('nombre',)

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return ProveedorArchivo.objects.filter(Q(nombre__icontains=q) | Q(alias__icontains=q) | Q(identificacion__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return self.nombre_simple() + ' - ' + self.identificacion

    def flexbox_alias(self):
        return [self.id, self.nombre_simple()]

    def nombre_simple(self):
        return "%s" % self.nombre

    def nombre_identificacion(self):
        return "%s - %s" % (self.identificacion, self.nombre)

    def en_uso(self):
        return self.archivoproceso_set.exists()

    def lista_telefonos(self):
        lista = []
        if self.telefono:
            lista.append(self.telefono)
        if self.celular:
            lista.append(self.celular)
        if self.fax:
            lista.append(self.fax)
        return lista

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.alias = self.alias.upper()
        self.identificacion = self.identificacion.upper()
        self.direccion = self.direccion.upper()
        self.telefono = self.telefono.upper()
        self.celular = self.celular.upper()
        self.fax = self.fax.upper()
        super(ProveedorArchivo, self).save(*args, **kwargs)


class ArchivoProceso(ModeloBase):
    codigo = models.CharField(max_length=50, verbose_name=u'N¬∞ Tr√°mite')
    descripcion = models.CharField(max_length=250, verbose_name=u'Descripci√≥n')
    tipopago = models.ForeignKey(TipoPagoArchivo, blank=True, null=True, verbose_name=u"Tipo Pago",
                                 on_delete=models.CASCADE)
    subtipopago = models.ForeignKey(SubTipoPagoArchivo, blank=True, null=True, verbose_name=u"Sub tipo pago",
                                    on_delete=models.CASCADE)
    ubicacion = models.ForeignKey(UbicacionProceso, blank=True, null=True, verbose_name=u"Ubicacion",
                                  on_delete=models.CASCADE)
    nombrepercha = models.CharField(null=True, blank=True, max_length=1000, verbose_name=u'Nombre de percha')
    nopercha = models.ForeignKey(PerchaArchivo, blank=True, null=True, verbose_name=u"N√∫mero percha",
                                 on_delete=models.CASCADE)
    # folder = models.CharField(null=True, blank=True, max_length=1000, verbose_name=u'folder')
    externo = models.ForeignKey('sga.Externo', blank=True, null=True, verbose_name=u'Cliente externo',
                                on_delete=models.CASCADE)
    nofila = models.ForeignKey(FilaArchivo, blank=True, null=True, verbose_name=u"Fila", on_delete=models.CASCADE)
    proveedor = models.ForeignKey(ProveedorArchivo, blank=True, null=True, verbose_name=u'Proveedor',
                                  on_delete=models.CASCADE)
    tipo = models.IntegerField(choices=TIPO_TRAMITE, verbose_name=u'Tipo Tramite', default=1)
    egring = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Egreso/Ingreso')
    anio = models.IntegerField(default=0, verbose_name=u'A√±o', blank=True, null=True)
    fechadocumento = models.DateField(verbose_name=u'Fecha del Documento', blank=True, null=True)
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n', blank=True, null=True)
    archivo = models.FileField(upload_to='digitales/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')

    def __str__(self):
        return u'Documento: %s - Ubi: %s' % (self.descripcion, self.ubicacion)

    class Meta:
        verbose_name = u"Archivos(Tramites y Procesos)"
        verbose_name_plural = u"Archivos(Tramites y Procesos)"

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.codigo = self.codigo.upper()
        self.observacion = self.observacion.upper()
        self.anio = self.fechadocumento.year
        super(ArchivoProceso, self).save(*args, **kwargs)


class PaginaArchivo(ModeloBase):
    archivoproceso = models.ForeignKey(ArchivoProceso, verbose_name=u"Proceso", on_delete=models.CASCADE)
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n', blank=True, null=True)
    fechadocumento = models.DateField(verbose_name=u'Fecha del Documento', blank=True, null=True)
    archivo = models.FileField(upload_to='digitales/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')
    orden = models.IntegerField(default=1, verbose_name=u'orden', blank=True, null=True)

    def __str__(self):
        return u'Observaci√≥n: %s - Fecha: %s - URL: %s' % (self.observacion, self.fechadocumento, self.archivo.url)

    class Meta:
        verbose_name = u"Pagina Archivo"
        verbose_name_plural = u"Paginas Archivos"

    def tamanioarchivo(self):
        return null_to_decimal(((self.archivo.size) / 1024) / 1024, 2)

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(PaginaArchivo, self).save(*args, **kwargs)


TIPO_DIARIO = (
    (1, u'DEVENGADO CONTABLE'),
    (2, u'PERCIBIO TESORER√åA'),
)


class Diario(ModeloBase):
    tipo = models.IntegerField(choices=TIPO_DIARIO, verbose_name=u'Tipo Diario', default=1)
    documento = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'N√∫mero')

    def rep_tipo(self):
        return TIPO_DIARIO[self.tipo - 1][1]

    def valor_debe(self):
        return null_to_decimal(
            self.detallediario_set.filter(naturaleza=1, status=True).aggregate(valor=Sum('valor'))['valor'], 2)

    def valor_haber(self):
        return null_to_decimal(
            self.detallediario_set.filter(naturaleza=2, status=True).aggregate(valor=Sum('valor'))['valor'], 2)


class DetalleDiario(ModeloBase):
    diario = models.ForeignKey(Diario, verbose_name=u'Diario', on_delete=models.CASCADE)
    naturaleza = models.IntegerField(choices=NATURALEZA_CUENTA, verbose_name=u'Naturaleza Cuenta', default=1)
    cuentacontable = models.ForeignKey(CuentaContable, verbose_name=u'Cuenta Contable', on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=30, decimal_places=16, default=0, verbose_name=u'Valor')

    def rep_naturaleza(self):
        return NATURALEZA_CUENTA[self.naturaleza - 1][1]


# PAC VERSION 2
class TotalPac(ModeloBase):
    from sga.models import MESES_CHOICES
    anio = models.IntegerField(default=0, verbose_name=u'A√±o')
    mes = models.IntegerField(choices=MESES_CHOICES, verbose_name=u'Meses', default=1)
    planificado = models.DecimalField(max_digits=30, decimal_places=16, default=0, verbose_name=u'Valor Planificado')
    fechaplanificado = models.DateTimeField(blank=True, null=True)
    ejecutado = models.DecimalField(max_digits=30, decimal_places=16, default=0, verbose_name=u'Valor Ejecutado')
    fechaejecutado = models.DateTimeField(blank=True, null=True)
    archivoejecutado = models.FileField(upload_to='totalpac/%Y/%m', blank=True, null=True,
                                        verbose_name=u'Archivo Ejecutado')
    fuente = models.DecimalField(max_digits=30, decimal_places=16, default=0, verbose_name=u'Valor Fuente')
    fechafuente = models.DateTimeField(blank=True, null=True)
    archivofuente = models.FileField(upload_to='totalpac/%Y/%m', blank=True, null=True, verbose_name=u'Archivo Fuente')

    def __str__(self):
        return u'TotalPac %s - %s' % (self.anio, self.mes)

    def download_ejecutado(self):
        return self.archivoejecutado.url

    def download_fuente(self):
        return self.archivofuente.url


# PAC VERSION 3
class ObjetivosPac(ModeloBase):
    periodopoa = models.ForeignKey(PeriodoPoa, verbose_name=u"Periodo POA", on_delete=models.CASCADE)
    descripcion = models.TextField(verbose_name=u'Descripci√≥n')
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.descripcion

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(ObjetivosPac, self).save(*args, **kwargs)


class ProductosPac(ModeloBase):
    descripcion = models.TextField(verbose_name=u'Descripci√≥n')

    def __str__(self):
        return u'%s' % self.descripcion

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(ProductosPac, self).save(*args, **kwargs)


class Productos(ModeloBase):
    descripcion = models.TextField(verbose_name=u'Descripci√≥n')

    def __str__(self):
        return u'%s' % self.descripcion

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(Productos, self).save(*args, **kwargs)


class PacGeneral(ModeloBase):
    periodo = models.ForeignKey(PeriodoPac, verbose_name=u'Periodo', on_delete=models.CASCADE)
    objetivospac = models.ForeignKey(ObjetivosPac, verbose_name=u'Objetivos PAC', on_delete=models.CASCADE)
    productospac = models.ForeignKey(ProductosPac, verbose_name=u'ProductosPac', on_delete=models.CASCADE)
    total = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total')
    valorejecutado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Ejecutado')
    saldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo')

    def __str__(self):
        return u'PAC: %s' % self.periodo

    class Meta:
        verbose_name = u"PAC General"
        verbose_name_plural = u"PACs General"

    def valorejecutada(self):
        valor = null_to_decimal(PacDetalladoGeneral.objects.filter(pacgeneral=self, status=True).aggregate(
            valorejecutado=Sum('valorejecutado'))['valorejecutado'], 2)
        return valor

    def valor_mes(self, mes):
        valor = null_to_decimal(PacDetalladoGeneral.objects.filter(pacgeneral=self, status=True, mes=mes)[0].valor, 2)
        return valor

    def id_mes(self, mes):
        id = PacDetalladoGeneral.objects.filter(pacgeneral=self, status=True, mes=mes)[0].id
        return id

    def aprobado_mes(self, mes):
        aprobado = PacDetalladoGeneral.objects.filter(pacgeneral=self, status=True, mes=mes)[0].aprobado
        return aprobado

    def valor_mes_ejecutado(self, mes):
        valor = null_to_decimal(
            PacDetalladoGeneral.objects.filter(pacgeneral=self, status=True, mes=mes)[0].valorejecutado, 2)
        return valor

    def valor_mes_ajudicado(self, mes):
        valor = null_to_decimal(
            PacDetalladoGeneral.objects.filter(pacgeneral=self, status=True, mes=mes)[0].valorajudicado, 2)
        return valor

    def fecha_ejecutado(self, mes):
        fecha = PacDetalladoGeneral.objects.filter(pacgeneral=self, status=True, mes=mes)[0].fechaaprobado
        if not fecha:
            fecha = datetime.now().date()
        return fecha

    def fecha_ajudicado(self, mes):
        fecha = PacDetalladoGeneral.objects.filter(pacgeneral=self, status=True, mes=mes)[0].fechaajudicado
        if not fecha:
            fecha = datetime.now().date()
        return fecha

    def observacion_ejecutado(self, mes):
        return PacDetalladoGeneral.objects.filter(pacgeneral=self, status=True, mes=mes)[0].observacionejecutado

    def observacion_ajudicado(self, mes):
        return PacDetalladoGeneral.objects.filter(pacgeneral=self, status=True, mes=mes)[0].observacionajudicado

    def aprobado_un_mes(self):
        return PacDetalladoGeneral.objects.filter(pacgeneral=self, status=True, aprobado=True).exists()

    def save(self, *args, **kwargs):
        # self.valorejecutado = self.valorejecutada()
        # self.saldo = self.total - self.valorejecutado
        super(PacGeneral, self).save(*args, **kwargs)


class PacDetalladoGeneral(ModeloBase):
    from sga.models import MESES_CHOICES
    pacgeneral = models.ForeignKey(PacGeneral, verbose_name=u'PAC General', on_delete=models.CASCADE)
    mes = models.IntegerField(choices=MESES_CHOICES, verbose_name=u'Meses', default=1)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    aprobado = models.BooleanField(default=False, verbose_name=u'Aprobado')
    fechaaprobado = models.DateField(blank=True, null=True, verbose_name=u'Fecha Aprobado')
    valorejecutado = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                         verbose_name=u'Valor Ejecutado Certificado')
    observacionejecutado = models.TextField(default='', verbose_name=u'Observacion Ejecutado Certificado')
    fechaajudicado = models.DateField(blank=True, null=True, verbose_name=u'Fecha Ajudicado')
    valorajudicado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor Ajudicado')
    observacionajudicado = models.TextField(default='', verbose_name=u'Observaci√≥n Ajudicado')
    saldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo')

    def save(self, *args, **kwargs):
        # self.saldo = self.valor - self.valorejecutado
        super(PacDetalladoGeneral, self).save(*args, **kwargs)


# PAC VERSION 4
class PacArchivo(ModeloBase):
    periodo = models.ForeignKey(PeriodoPac, verbose_name=u'Periodo', on_delete=models.CASCADE)
    programa = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Programa')
    actividad = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Actividad')
    renglo = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Renglo')
    fuente = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Fuente')
    codigocategoria = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Codigo Categoria')
    tipocompra = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Tipo Compra')
    productospac = models.ForeignKey(ProductosPac, verbose_name=u'Productos Pac Padre', on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)
    productos = models.ForeignKey(Productos, verbose_name=u'Productos Pac Padre', on_delete=models.CASCADE)
    cantidadanual = models.IntegerField(default=0, verbose_name=u'Cantidad Anual')
    unidad = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Unidad')
    costoinicial = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Costo Inicial')
    costototal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Costo Total')
    compreforma = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Comp. Reforma')
    resolucionreforma = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Resoluci√≥n Reforma')
    aumenta = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Aumenta')
    disminuye = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Disminuye')
    saldoreforma = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo Reforma')
    cuatrimestre1 = models.BooleanField(default=True)
    cuatrimestre2 = models.BooleanField(default=True)
    cuatrimestre3 = models.BooleanField(default=True)
    tipoproducto = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Tipo Producto')
    catalodoelectronico = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Catalago Electr√≥nico')
    procedimientosugerido = models.CharField(null=True, blank=True, max_length=200,
                                             verbose_name=u'Procedimiento Sugerido')
    tiporegimen = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Tipo Regimen')
    comprometidoeneromonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'Comprometido Enero Monto')
    comprometidoenero = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Comprometido Enero')
    comprometidofebreromonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                   verbose_name=u'Comprometido Febrero Monto')
    comprometidofebrero = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Comprometido Febrero')
    comprometidomarzomonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'Comprometido Marzo Monto')
    comprometidomarzo = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Comprometido Marzo')
    comprometidoabrilmonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'Comprometido Abril Monto')
    comprometidoabril = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Comprometido Abril')
    comprometidomayomonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'Comprometido Mayo Monto')
    comprometidomayo = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Comprometido Mayo')
    comprometidojuniomonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'Comprometido Junio Monto')
    comprometidojunio = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Comprometido Junio')
    comprometidojuliomonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                 verbose_name=u'Comprometido Julio Monto')
    comprometidojulio = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Comprometido Julio')
    comprometidoagostomonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                  verbose_name=u'Comprometido Agosto Monto')
    comprometidoagosto = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Comprometido Agosto')
    comprometidoseptiembremonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                      verbose_name=u'Comprometido Septiembre Monto')
    comprometidoseptiembre = models.CharField(null=True, blank=True, max_length=200,
                                              verbose_name=u'Comprometido Septiembre')
    comprometidooctubremonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                   verbose_name=u'Comprometido Octubre Monto')
    comprometidooctubre = models.CharField(null=True, blank=True, max_length=200, verbose_name=u'Comprometido Octubre')
    comprometidonoviembremonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                     verbose_name=u'Comprometido Noviembre Monto')
    comprometidonoviembre = models.CharField(null=True, blank=True, max_length=200,
                                             verbose_name=u'Comprometido Noviembre')
    comprometidodiciembremonto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                     verbose_name=u'Comprometido Diciembre Monto')
    comprometidodiciembre = models.CharField(null=True, blank=True, max_length=200,
                                             verbose_name=u'Comprometido Diciembre')
    paccomprometido = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'PAC Comprometido')
    pacdisponible = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'PAC Disponible')
    planificadoenero = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Planificado Enero')
    planificadofebrero = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u'Planificado Febrero')
    planificadomarzo = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Planificado Marzo')
    planificadoabril = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Planificado Abril')
    planificadomayo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Planificado Mayo')
    planificadojunio = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Planificado Junio')
    planificadojulio = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'Planificado Julio')
    planificadoagosto = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                            verbose_name=u'Planificado Agosto')
    planificadoseptiembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                                verbose_name=u'Planificado Septiembre')
    planificadooctubre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                             verbose_name=u'Planificado Octubre')
    planificadonoviembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'Planificado Noviembre')
    planificadodiciembre = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                               verbose_name=u'Planificado Diciembre')

    def __str__(self):
        return u'PAC: %s' % self.periodo

    def save(self, *args, **kwargs):
        super(PacArchivo, self).save(*args, **kwargs)


class PersonaAcciones(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u"Persona", on_delete=models.CASCADE)
    numerodocumento = models.CharField(default='', max_length=100, verbose_name=u"N√∫mero de acci√≥n personal")
    tipo = models.ForeignKey(TipoAccionPersonal, blank=True, null=True, verbose_name=u"Tipo acci√≥n personal",
                             on_delete=models.CASCADE)
    motivo = models.ForeignKey(MotivoAccionPersonal, blank=True, null=True, verbose_name=u"Motivo acci√≥n personal",
                               on_delete=models.CASCADE)
    fecharige = models.DateField(verbose_name=u"Fecha Rige")
    ubicacionfisico = models.CharField(default='', max_length=150, verbose_name=u"Ubicaci√≥n archivo f√≠sico")
    archivo = models.FileField(upload_to='accionpersonal/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')
    estado = models.BooleanField(default=False, verbose_name=u"Estado")
    cargo = models.CharField(default='', null=True, blank=True, max_length=250, verbose_name=u'Cargo')
    unidad = models.CharField(default='', null=True, blank=True, max_length=250, verbose_name=u'Unidad / Facultad')
    remuneracion = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Remuneraci√≥n')
    explicacion = models.TextField(default='', null=True, blank=True, verbose_name=u'Explicaci√≥n')
    estadoarchivo = models.IntegerField(choices=ESTADO_ARCHIVO_FIRMADO, default=0, verbose_name=u'Estado Archivo')
    migrado = models.BooleanField(default=False, verbose_name=u"Registro Migrado")

    def __str__(self):
        return u"%s" % self.numerodocumento

    def historial_documentos(self):
        return self.historicodocumentospersonaacciones_set.filter(status=True, personaaccion__isnull=False).order_by(
            '-fecha_creacion')

    def documento_firmado(self):
        if self.historial_documentos():
            return self.historicodocumentospersonaacciones_set.filter(status=True).order_by('-fecha_creacion')[
                0].archivofirmado
        return self.archivo

    def color_estado(self):
        color = 'success'
        if not self.estado:
            estado = self.estadoarchivo
            if estado == 0:
                color = 'warning'
            elif estado == 1:
                color = 'info'
            elif estado == 2:
                color = 'aqua'
            else:
                color = 'primary'
        return color

    class Meta:
        verbose_name = u'Accion Persona'
        verbose_name_plural = u'Acciones Personas'
        ordering = ('persona',)

    def save(self, *args, **kwargs):
        self.numerodocumento = self.numerodocumento.upper()
        self.cargo = self.cargo.upper()
        self.unidad = self.unidad.upper()
        self.explicacion = self.explicacion.upper()
        super(PersonaAcciones, self).save(*args, **kwargs)


class HistoricoDocumentosPersonaAcciones(ModeloBase):
    personaaccion = models.ForeignKey(PersonaAcciones, verbose_name='Accion de personal', on_delete=models.CASCADE,
                                      null=True, blank=True)
    personaaccionvacacion = models.ForeignKey(AccionPersonal, verbose_name='Accion de personal vacaciones',
                                              on_delete=models.CASCADE, null=True, blank=True)
    archivofirmado = models.FileField(upload_to='accionpersonalfirmados', blank=True, null=True,
                                      verbose_name=u'archivofirmado')

    def __str__(self):
        return u"%s" % self.personaaccion

    class Meta:
        verbose_name = u'Historial documentos accion personal'
        verbose_name_plural = u'Historiales documentos acciones personal'
        ordering = ('personaaccion',)


class SolicitudPublicacion(ModeloBase):
    from core.choices.models.sga import MY_ESTADO_PUBLICACION_ARTICULO
    persona = models.ForeignKey('sga.Persona', verbose_name=u"Persona", on_delete=models.CASCADE)
    motivo = models.TextField(default='')
    tiposolicitud = models.IntegerField(choices=TIPO_SOLICITUD_PUBLICACION, verbose_name=u'Tipo Solicitud')
    archivo = models.FileField(upload_to='solicitudpublicacion/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')
    archivocertificado = models.FileField(upload_to='solicitudpublicacion/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo Certificacion')
    aprobado = models.BooleanField(default=False, verbose_name=u"Solicitud Aprobada")
    registrado = models.BooleanField(default=False, verbose_name=u"Solicitud Registrada")
    observacion = models.TextField(verbose_name=u"Observaci√≥n", blank=True, null=True)
    nombre = models.TextField(verbose_name=u"Codigo ISSN", default='')
    ciudad = models.TextField(verbose_name=u"Ciudad", default='')
    pais = models.ForeignKey(Pais, blank=True, null=True, verbose_name=u"Pais", on_delete=models.CASCADE)
    fecharecepcion = models.DateField(blank=True, null=True, verbose_name=u'Fecha recepcion')
    fechaaprobacion = models.DateField(blank=True, null=True, verbose_name=u'Fecha aprobacion')
    fechapublicacion = models.DateField(blank=True, null=True, verbose_name=u'Fecha publicacion')
    fechatentpublicacion = models.DateField(blank=True, null=True, verbose_name=u'Fecha tentativa de publicaci√≥n')
    volumen = models.TextField(verbose_name=u"Volumen", default='')
    numero = models.TextField(verbose_name=u"Numero", default='')
    paginas = models.TextField(verbose_name=u"Paginas de articulos", default='')
    areaconocimiento = models.ForeignKey(AreaConocimientoTitulacion, blank=True, null=True, verbose_name=u'Area de conocimiento', on_delete=models.CASCADE)
    subareaconocimiento = models.ForeignKey(SubAreaConocimientoTitulacion, blank=True, null=True, verbose_name=u'Sub area de conocimiento', on_delete=models.CASCADE)
    subareaespecificaconocimiento = models.ForeignKey(SubAreaEspecificaConocimientoTitulacion, blank=True, null=True, verbose_name=u'Sub area especifica de conocimiento', on_delete=models.CASCADE)
    evento = models.TextField(verbose_name=u"Evento", default='')
    enlace = models.TextField(verbose_name=u"Enlace", default='')
    revista = models.TextField(verbose_name=u"Revista", default='')
    base = models.TextField(verbose_name=u"Base", default='')
    estadopublicacion = models.IntegerField(choices=MY_ESTADO_PUBLICACION_ARTICULO, blank=True, null=True, verbose_name=u'Estado de la publicaci√≥n')
    revistainvestigacion = models.ForeignKey(RevistaInvestigacion, blank=True, null=True, verbose_name=u'Revista de Investigaci√≥n', on_delete=models.CASCADE)
    provieneproyecto = models.BooleanField(default=False, verbose_name=u'Art√≠culo proviene de un proyecto de investigacion')
    tipoproyecto = models.IntegerField(choices=TIPO_PROYECTO_ARTICULO, blank=True, null=True, verbose_name=u'Tipo Proyecto')
    proyectointerno = models.ForeignKey(ProyectosInvestigacion, blank=True, null=True, verbose_name=u'Proyecto de investigacion interno', on_delete=models.CASCADE)
    proyectoexterno = models.ForeignKey(ProyectoInvestigacionExterno, blank=True, null=True, verbose_name=u'Proyecto de investigacion externo', on_delete=models.CASCADE)
    pertenecegrupoinv = models.BooleanField(default=False, verbose_name=u'Pertenece a un grupo de investigaci√≥n')
    grupoinvestigacion = models.ForeignKey("investigacion.GrupoInvestigacion", on_delete=models.CASCADE, blank=True, null=True, verbose_name=u'Grupo de investigaci√≥n')
    lineainvestigacion = models.ForeignKey(LineaInvestigacion, blank=True, null=True, verbose_name=u'L√≠nea de investigaci√≥n', on_delete=models.CASCADE)
    sublineainvestigacion = models.ForeignKey(SubLineaInvestigacion, blank=True, null=True, verbose_name=u'Subl√≠nea de investigaci√≥n', on_delete=models.CASCADE)
    comitecientifico = models.BooleanField(default=False, verbose_name=u'Existe comite cientifico evaluador')
    archivoparticipacion = models.FileField(upload_to='solicitudpublicacion/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo certificado de participaci√≥n')
    archivocomite = models.FileField(upload_to='solicitudpublicacion/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo Comit√© evaluador')
    archivoprograma = models.FileField(upload_to='solicitudpublicacion/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo Programa del evento')
    integrantecomite = models.TextField(verbose_name=u"Integrantes del comit√© cient√≠fico evaluador", blank=True, null=True)
    codigoisbn = models.CharField(max_length=80, blank=True, null=True, verbose_name=u"Codigo Isbn")
    editorcompilador = models.TextField(blank=True, null=True, verbose_name=u"Editor o Compilador")
    totalcapitulo = models.IntegerField(blank=True, null=True, verbose_name=u'Total Cap√≠tulos en el libro')
    filiacion = models.IntegerField(choices=MY_ESTADO_PUBLICACION_PON, default=1, verbose_name=u"Filiaci√≥n")
    revisadopar = models.BooleanField(default=False, verbose_name=u'Revisado por pares')
    estado = models.ForeignKey("sagest.EstadoSolicitud", on_delete=models.CASCADE, blank=True, null=True, verbose_name=u"Estado del registro")

    def __str__(self):
        return u"%s - %s" % (self.persona, self.motivo)

    class Meta:
        verbose_name = u'Solicitud de Publicaci√≥n'
        verbose_name_plural = u'Solicitudes de Publicaciones'
        ordering = ('persona',)

    def save(self, *args, **kwargs):
        self.enlace = self.enlace.lower() if self.enlace else ''
        self.ciudad = self.ciudad.upper() if self.ciudad else ''
        if self.editorcompilador:
            self.editorcompilador = self.editorcompilador.upper()
        super(SolicitudPublicacion, self).save(*args, **kwargs)

    def download_link(self):
        return self.archivo.url

    def download_link2(self):
        return self.archivocertificado.url

    def nombre_archivo_publicacion(self):
        return os.path.basename(self.archivo.name)

    def nombre_archivo_carta_aceptacion(self):
        return os.path.basename(self.archivocertificado.name)

    def nombre_archivo_portada_indice(self):
        return os.path.basename(self.archivocomite.name)

    def nombre_archivo_certificado_participacion(self):
        return os.path.basename(self.archivoparticipacion.name)

    def nombre_archivo_comite(self):
        return os.path.basename(self.archivocomite.name)
    
    def nombre_archivo_programa_evento(self):
        return os.path.basename(self.archivoprograma.name)

    def articulossolicitados(self):
        return ArticuloInvestigacion.objects.select_related().filter(
            participantesarticulos__profesor__persona=self.persona,
            status=True,
            participantesarticulos__status=True).order_by('revista__nombre', 'numero', 'nombre')

    def numero_integrantes(self):
        if self.participantesolicitudpublicacion_set.filter(status=True).exists():
            return self.participantesolicitudpublicacion_set.filter(status=True).count()
        return 0

    def evidencias(self):
        evidencias = []

        if self.tiposolicitud in [1, 5]:  # Art√≠culo o Proceeding
            if self.archivocomite:
                evidencias.append({'descripcion' : 'Portada e √çndice', 'archivo': self.archivocomite})
            if self.archivo:
                evidencias.append({'descripcion' : 'Art√≠culo', 'archivo': self.archivo})
            if self.archivocertificado:
                evidencias.append({'descripcion' : 'Carta de aceptaci√≥n', 'archivo': self.archivocertificado})
        elif self.tiposolicitud == 2:  # Ponencia
            if self.archivo:
                evidencias.append({'descripcion': 'Publicaci√≥n o memorias', 'archivo': self.archivo})
            if self.archivocertificado:
                evidencias.append({'descripcion': 'Carta de aceptaci√≥n o invitaci√≥n', 'archivo': self.archivocertificado})
            if self.archivoparticipacion:
                evidencias.append({'descripcion': 'Certificado participaci√≥n', 'archivo': self.archivoparticipacion})
            if self.archivocomite:
                evidencias.append({'descripcion': 'Comit√© cient√≠fico', 'archivo': self.archivocomite})
            if self.archivoprograma:
                evidencias.append({'descripcion': 'Programa del evento', 'archivo': self.archivoprograma})
        elif self.tiposolicitud == 3:  # Libros
            if self.archivo:
                evidencias.append({'descripcion': 'Libro', 'archivo': self.archivo})
            if self.archivocertificado:
                evidencias.append({'descripcion': 'Certificado de publicaci√≥n', 'archivo': self.archivocertificado})
            if self.archivocomite:
                evidencias.append({'descripcion': 'Certificado o matriz de revisi√≥n por pares', 'archivo': self.archivocomite})
        elif self.tiposolicitud == 4:  # Cap√≠tulo de Libros
            if self.archivocertificado:
                evidencias.append({'descripcion': 'Libro', 'archivo': self.archivocertificado})
            if self.archivo:
                evidencias.append({'descripcion': 'Cap√≠tulo de libro', 'archivo': self.archivo})
            if self.archivoparticipacion:
                evidencias.append({'descripcion': 'Certificado de publicaci√≥n', 'archivo': self.archivoparticipacion})
            if self.archivocomite:
                evidencias.append({'descripcion': 'Certificado o matriz de revisi√≥n por pares', 'archivo': self.archivocomite})

        return evidencias

    def participantes(self):
        participantes = []
        for participante in self.participantesolicitudpublicacion_set.filter(status=True).order_by('id'):
            if participante.profesor:
                participantes.append(
                    {
                        'tipopersona': 1,
                        'id': participante.id,
                        'idregtipopersona': participante.profesor.id,
                        'idpersona': participante.profesor.persona.id,
                        'nombres': participante.profesor.persona.nombre_completo_inverso(),
                        'idtipo': participante.tipo,
                        'tipo': participante.get_tipo_display(),
                        'idfiliacion': participante.tipoparticipanteins,
                        'filiacion': participante.get_tipoparticipanteins_display()
                    }
                )
            elif participante.administrativo:
                participantes.append(
                    {
                        'tipopersona': 2,
                        'id': participante.id,
                        'idregtipopersona': participante.administrativo.id,
                        'idpersona': participante.administrativo.persona.id,
                        'nombres': participante.administrativo.persona.nombre_completo_inverso(),
                        'idtipo': participante.tipo,
                        'tipo': participante.get_tipo_display(),
                        'idfiliacion': participante.tipoparticipanteins,
                        'filiacion': participante.get_tipoparticipanteins_display()
                    }
                )
            else:
                participantes.append(
                    {
                        'tipopersona': 3,
                        'id': participante.id,
                        'idregtipopersona': participante.inscripcion.id,
                        'idpersona': participante.inscripcion.persona.id,
                        'nombres': participante.inscripcion.persona.nombre_completo_inverso(),
                        'idtipo': participante.tipo,
                        'tipo': participante.get_tipo_display(),
                        'idfiliacion': participante.tipoparticipanteins,
                        'filiacion': participante.get_tipoparticipanteins_display()
                    }
                )

        return participantes

    def integrantes_comite_cientifico_ponencia(self):
        return list(eval(self.integrantecomite))

    def puede_editar_eliminar(self):
        return self.estado.valor in [1, 3]

    def tiene_novedad(self):
        return self.estado.valor in [3, 4]


class ParticipanteSolicitudPublicacion(ModeloBase):
    solicitud = models.ForeignKey(SolicitudPublicacion, verbose_name=u'Solicitud de Publicaci√≥n', on_delete=models.CASCADE)
    tipo = models.IntegerField(choices=MY_TIPO_PARTICIPANTE, default=1, verbose_name=u'Tipo Participante: Autor o Coautor')
    profesor = models.ForeignKey(Profesor, blank=True, null=True, verbose_name=u'Participante Docente', on_delete=models.CASCADE)
    administrativo = models.ForeignKey(Administrativo, blank=True, null=True, verbose_name=u'Participante Administrativo', on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, blank=True, null=True, verbose_name=u'Participante Alumno', on_delete=models.CASCADE)
    tipoparticipanteins = models.IntegerField(choices=MY_TIPO_PARTICIPANTE_INSTITUCION, default=1, verbose_name=u'Tipo Participante Instituci√≥n')

    def __str__(self):
        return u"%s - %s%s%s" % (self.solicitud, self.profesor if self.profesor else '', self.administrativo if self.administrativo else '', self.inscripcion if self.inscripcion else '')


class Publicacion(ModeloBase):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, null=True, blank=True, verbose_name=u"")
    nombre = models.TextField(blank=True, null=True, verbose_name=u"Nombre")
    archivo = models.FileField(upload_to='publicacion', blank=True, null=True, verbose_name=u'archivo de publicacion')
    tiposolicitud = models.IntegerField(choices=TIPO_SOLICITUD_PUBLICACION, verbose_name=u'Tipo Solicitud')
    fecha = models.DateField(verbose_name=u'Fecha', blank=True, null=True)

    def __str__(self):
        return u"%s" % (self.nombre)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(Publicacion, self).save(*args, **kwargs)


# Modulo de HelpDesk
class HdDirector(ModeloBase):
    persona = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u'Director',
                                on_delete=models.CASCADE)
    vigente = models.BooleanField(default=False, verbose_name=u'Vigente')

    def __str__(self):
        return u'%s' % self.persona

    class Meta:
        verbose_name = u"Grupo"
        verbose_name_plural = u"Grupos"

    def save(self, *args, **kwargs):
        super(HdDirector, self).save(*args, **kwargs)


class HdDepartament(ModeloBase):
    parent = models.ForeignKey('self', null=True, blank=True, related_name='children',
                               verbose_name=u'Departamento', on_delete=models.CASCADE)
    name = models.CharField(max_length=250, verbose_name=u'Nombre')
    director = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='director',
                                 verbose_name=u'Director/a', on_delete=models.CASCADE)
    expert = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='expert',
                               verbose_name=u'Experto/a', on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % (self.name)

    class Meta:
        verbose_name = u"Departamento"
        verbose_name_plural = u"Departamentos"

    def save(self, *args, **kwargs):
        self.name = self.name.upper()
        super(HdDepartament, self).save(*args, **kwargs)

    def allSubDepartament(self, id):
        if HdDepartament.objects.filter(status=True, parent=id).exists():
            return HdDepartament.objects.filter(status=True, parent=id)
        return []


class HdTipoIncidente(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    descripcion = models.TextField(default='', verbose_name=u'Descripci√≥n')

    def __str__(self):
        return u'%s' % self.nombre

    def total_encuestas(self):
        return self.hdcabencuestas_set.filter(status=True).count()

    def esta_activo(self):
        if self.hdcategoria_set.filter(status=True).exists():
            return True
        return False

    class Meta:
        verbose_name = u"Tipo de incidente"
        verbose_name_plural = u"Tipos de Incidentes"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        super(HdTipoIncidente, self).save(*args, **kwargs)


class HdCabEncuestas(ModeloBase):
    tipoincidente = models.ForeignKey(HdTipoIncidente, blank=True, null=True, verbose_name=u"Tipo incidente",
                                      on_delete=models.CASCADE)
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    descripcion = models.TextField(default='', verbose_name=u'Descripci√≥n')
    activo = models.BooleanField(default=True, verbose_name=u'Activo')

    def __str__(self):
        return u'%s' % self.nombre

    def total_preguntas(self):
        return self.hddetencuestas_set.filter(status=True).count()

    class Meta:
        verbose_name = u"Encuesta de incidente"
        verbose_name_plural = u"Encuestas de Incidentes"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        super(HdCabEncuestas, self).save(*args, **kwargs)


class HdPreguntas(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    activo = models.BooleanField(default=True, verbose_name=u'Activo')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Pregunta de incidente"
        verbose_name_plural = u"Preguntas de Incidentes"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(HdPreguntas, self).save(*args, **kwargs)


class HdDetEncuestas(ModeloBase):
    encuesta = models.ForeignKey(HdCabEncuestas, blank=True, null=True, verbose_name=u"Encuesta",
                                 on_delete=models.CASCADE)
    pregunta = models.ForeignKey(HdPreguntas, blank=True, null=True, verbose_name=u"Pregunta", on_delete=models.CASCADE)
    tiporespuesta = models.ForeignKey('sga.TipoRespuesta', verbose_name=u'Tipo Respuesta', on_delete=models.CASCADE)
    activo = models.BooleanField(default=True, verbose_name=u'Activo')

    def __str__(self):
        return u'%s' % self.encuesta

    class Meta:
        verbose_name = u"Detalle Encuesta de incidente"
        verbose_name_plural = u"Detalles Encuestas de Incidentes"

    def save(self, *args, **kwargs):
        super(HdDetEncuestas, self).save(*args, **kwargs)


class HdGrupo(ModeloBase):
    departament = models.ForeignKey(HdDepartament, null=True, blank=True, related_name='areagrupo',
                                    verbose_name=u'√Årea', on_delete=models.CASCADE)
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre', unique=True)
    descripcion = models.CharField(max_length=100, verbose_name=u'Descripci√≥n')
    tipoincidente = models.ForeignKey(HdTipoIncidente, null=True, blank=True, related_name='tipincidentegrupo',
                                      verbose_name=u'Tipo de incidente', on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.nombre

    def mis_agentes(self):
        return self.hddetalle_grupo_set.filter(status=True).order_by('persona')

    def agentes_grupos(self):
        return self.hddetalle_grupo_set.values_list('id', flat=True).filter(status=True)

    def mis_agentesview(self):
        return self.hddetalle_grupo_set.filter().order_by('persona')

    def esta_activo(self):
        return True if self.hddetalle_grupo_set.filter(status=True).exists() else False

    class Meta:
        verbose_name = u"Grupo"
        verbose_name_plural = u"Grupos"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        super(HdGrupo, self).save(*args, **kwargs)


class HdDetalle_Grupo(ModeloBase):
    grupo = models.ForeignKey(HdGrupo, verbose_name=u'Grupo', on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    responsable = models.BooleanField(default=False, verbose_name=u'Responsable')
    estado = models.BooleanField(default=True, verbose_name=u'Estado')
    isDirector = models.BooleanField(default=False, verbose_name=u'Director')
    isExpert = models.BooleanField(default=False, verbose_name=u'Experto')

    def __str__(self):
        return u'%s' % self.persona

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        from sga.models import Administrativo
        s = q.split(" ")
        if s.__len__() == 2:
            return Administrativo.objects.filter(Q(persona__apellido1__contains=s[0]) &Q(persona__apellido2__contains=s[1])).distinct()[:limit]
        return Administrativo.objects.filter(Q(persona__nombres__contains=s[0]) | Q(persona__apellido1__contains=s[0]) | Q(persona__apellido2__contains=s[0]) | Q(persona__cedula__contains=s[0])).distinct()[:limit]

    def flexbox_repr(self):
        return self.persona.cedula + " - " + self.persona.nombre_completo_inverso() + ")"

    def mis_cargos(self):
        from sga.models import Persona
        return self.persona.distributivopersona_set.all()

    def mi_agente(self):
        return self.persona_id

    def esta_activo(self):
        return True if self.hddetalle_incidente_set.filter(status=True).exists() else False

    def isAssigned(self):
        return True if self.hddetalle_incidente_set.filter().exists() else False

    class Meta:
        verbose_name = u"Detalle"
        verbose_name_plural = u"Detalles"

    def save(self, *args, **kwargs):
        super(HdDetalle_Grupo, self).save(*args, **kwargs)


class HdImpacto(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    descripcion = models.CharField(max_length=100, verbose_name=u'Descripci√≥n')
    codigo = models.CharField(default='', max_length=10, verbose_name=u'Codigo')

    def __str__(self):
        return u'%s' % self.nombre

    def esta_activo(self):
        return True if self.hdurgencia_impacto_prioridad_set.filter(status=True).exists() else False

    class Meta:
        verbose_name = u"Impacto"
        verbose_name_plural = u"Impactos"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(HdImpacto, self).save(*args, **kwargs)


class HdUrgencia(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    descripcion = models.CharField(max_length=100, verbose_name=u'Descripci√≥n')
    codigo = models.CharField(default='', max_length=10, verbose_name=u'Codigo')

    def __str__(self):
        return u'%s' % self.nombre

    def esta_activo(self):
        return True if self.hdurgencia_impacto_prioridad_set.filter(status=True).exists() else False

    class Meta:
        verbose_name = u"Impacto"
        verbose_name_plural = u"Impactos"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(HdUrgencia, self).save(*args, **kwargs)


class HdPrioridad(ModeloBase):
    codigo = models.CharField(default='', max_length=10, verbose_name=u'Codigo')
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    horamax = models.CharField(default='00', max_length=100, verbose_name=u'Hora')
    minutomax = models.CharField(default='00', max_length=100, verbose_name=u'Minutos')
    segundomax = models.CharField(default='00', max_length=100, verbose_name=u'Segundos')
    imagen = models.FileField(upload_to='Imagen/%Y/%m/%d', blank=True, null=True, verbose_name=u'Imagen')

    def __str__(self):
        return u'%s' % self.nombre

    def esta_activo(self):
        return True if self.hdurgencia_impacto_prioridad_set.filter(status=True).exists() else False

    class Meta:
        verbose_name = u"Prioridad"
        verbose_name_plural = u"Prioridad"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(HdPrioridad, self).save(*args, **kwargs)


class HdUrgencia_Impacto_Prioridad(ModeloBase):
    urgencia = models.ForeignKey(HdUrgencia, verbose_name=u'Urgencia', on_delete=models.CASCADE)
    impacto = models.ForeignKey(HdImpacto, verbose_name=u'Categoria', on_delete=models.CASCADE)
    prioridad = models.ForeignKey(HdPrioridad, verbose_name=u'Prioridad', on_delete=models.CASCADE)
    modificar = models.BooleanField(default=False, verbose_name=u"Modificar")
    horamax = models.CharField(default='00', max_length=100, verbose_name=u'Hora')
    minutomax = models.CharField(default='00', max_length=100, verbose_name=u'Minutos')
    segundomax = models.CharField(default='00', max_length=100, verbose_name=u'Segundos')

    def __str__(self):
        return u'%s' % self.prioridad.nombre

    class Meta:
        verbose_name = u"Prioridad"
        verbose_name_plural = u"Prioridad"

    def esta_activo(self):
        return True if self.hddetalle_subcategoria_set.filter(status=True).exists() else False

    def save(self, *args, **kwargs):
        super(HdUrgencia_Impacto_Prioridad, self).save(*args, **kwargs)


class HdCategoria(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    tipoincidente = models.ForeignKey(HdTipoIncidente, null=True, blank=True, verbose_name=u'Tipo de incidente', on_delete=models.CASCADE)
    orden = models.IntegerField(default=0, verbose_name=u"Orden")

    def __str__(self):
        return u'%s' % self.nombre

    def esta_activo(self):
        return True if self.hdsubcategoria_set.filter(status=True).exists() else False

    def mis_dispositivos(self):
        return self.hdsubcategoria_set.filter(status=True)

    class Meta:
        verbose_name = u"Impacto"
        verbose_name_plural = u"Impactos"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(HdCategoria, self).save(*args, **kwargs)


class HdUnidadMedida(ModeloBase):
    # code = models.CharField(max_length=100, verbose_name=u'C√≥digo')
    name = models.CharField(max_length=300, verbose_name=u'Nombre')
    name_key = models.CharField(max_length=300, verbose_name=u'Nombre ID')

    def __str__(self):
        return u'%s' % self.name_key

    def save(self, *args, **kwargs):
        self.name = self.name.strip()
        self.name_key = self.name_key.strip()
        super(HdUnidadMedida, self).save(*args, **kwargs)


class HdMateriales(ModeloBase):
    codigo = models.CharField(max_length=100, verbose_name=u'Codigo')
    nombre = models.CharField(max_length=300, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper().strip()
        super(HdMateriales, self).save(*args, **kwargs)


class HdUndMedida_Material(ModeloBase):
    und_medida = models.ForeignKey(HdUnidadMedida, verbose_name=u'Unidad de Medida', on_delete=models.CASCADE)
    material = models.ForeignKey(HdMateriales, verbose_name=u'Material', on_delete=models.CASCADE)


class HdSubCategoria(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    categoria = models.ForeignKey(HdCategoria, verbose_name=u'Categoria', on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.nombre

    def mis_problemas(self):
        return self.hddetalle_subcategoria_set.filter(status=True)

    def esta_activo(self):
        return True if self.hddetalle_subcategoria_set.filter(status=True) else False

    class Meta:
        verbose_name = u"Sub Categoria"
        verbose_name_plural = u"Sub Categorias"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(HdSubCategoria, self).save(*args, **kwargs)


class HdDetalle_SubCategoria(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    subcategoria = models.ForeignKey(HdSubCategoria, verbose_name=u'SubCategoria', on_delete=models.CASCADE)
    prioridad = models.ForeignKey(HdUrgencia_Impacto_Prioridad, verbose_name=u'Prioridad', blank=True, null=True,
                                  on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Iten"
        verbose_name_plural = u"Iten"

    def esta_activo(self):
        return True if self.hdincidente_set.filter(status=True) else False

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(HdDetalle_SubCategoria, self).save(*args, **kwargs)


class HdEstado(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    imagen = models.FileField(upload_to='Imagen/%Y/%m/%d', blank=True, null=True, verbose_name=u'Imagen')

    def __str__(self):
        return u'%s' % self.nombre

    def esta_activo(self):
        return True if self.hdincidente_set.filter(status=True).exists() else False

    class Meta:
        verbose_name = u"Iten"
        verbose_name_plural = u"Iten"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(HdEstado, self).save(*args, **kwargs)


class HdMedioReporte(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    descripcion = models.CharField(max_length=100, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Medio de Reporte"
        verbose_name_plural = u"Medios de Reportes"
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def esta_activo(self):
        return True if self.hdincidente_set.filter(status=True).exists() else False

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        super(HdMedioReporte, self).save(*args, **kwargs)


class HdBloque(ModeloBase):
    nombre = models.CharField(max_length=300, verbose_name=u"Nombre Bloque")

    def __str__(self):
        return u'%s' % self.nombre

    def puede_eliminar_bloque(self):
        if not self.hdbloqueubicacion_set.values("id").filter(status=True).exists():
            return True
        return False

    class Meta:
        verbose_name = u"Bloque"
        verbose_name_plural = u"Bloques"

    def save(self, *args, **kwargs):
        super(HdBloque, self).save(*args, **kwargs)


class HdUbicacion(ModeloBase):
    nombre = models.CharField(max_length=300, verbose_name=u"Nombre Ubicaci√≥n")

    def __str__(self):
        return u'%s' % self.nombre

    def puede_eliminar_ubicacion(self):
        if self.hdbloqueubicacion_set.values("id").filter(status=True).exists():
            return True
        else:
            return False

    class Meta:
        verbose_name = u"Ubicaci√≥n"
        verbose_name_plural = u"Ubicaciones"

    def save(self, *args, **kwargs):
        super(HdUbicacion, self).save(*args, **kwargs)


class HdBloqueUbicacion(ModeloBase):
    bloque = models.ForeignKey(HdBloque, blank=True, null=True, verbose_name=u'Bloque', on_delete=models.CASCADE)
    ubicacion = models.ForeignKey(HdUbicacion, blank=True, null=True, verbose_name=u'Ubicaci√≥n',
                                  on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.ubicacion

    def mis_ubicaciones(self):
        if HdBloqueUbicacion.objects.filter(status=True, bloque=self.bloque).exists():
            return HdBloqueUbicacion.objects.filter(status=True, bloque=self.bloque)
        return []

    class Meta:
        verbose_name = u"Ubicaci√≥n"
        verbose_name_plural = u"Ubicaciones"


class HdCausas(ModeloBase):
    nombre = models.CharField(max_length=300, verbose_name=u"Nombre Causa")
    tipoincidente = models.ForeignKey(HdTipoIncidente, blank=True, null=True, verbose_name=u'Tipo incidente',
                                      on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.nombre

    def en_uso(self):
        return self.hdincidente_set.filter(status=True).exists()

    class Meta:
        verbose_name = u"Causa"
        verbose_name_plural = u"Causas"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(HdCausas, self).save(*args, **kwargs)


class SecuenciaHdIncidente(ModeloBase):
    anioejercicio = models.ForeignKey(AnioEjercicio, verbose_name=u'Anio Ejercicio', on_delete=models.CASCADE)
    secuenciaincidente = models.IntegerField(default=0, verbose_name=u'Secuencia Caja')


ESTADO_ORDEN_TRABAJO = (
    (1, u"GENERADO"),
    (2, u"CERRADO"),
    (3, u"PENDIENTE REPUESTO"),
    (4, u"TALLER PARTICULAR"),
    (5, u"EN TR√ÅMITE")
)

TIPO_USUARIO = (
    ('', u"---------"),
    (1, u"ADMINISTRATIVO"),
    (2, u"PROFESOR")
)


class OrdenTrabajo(ModeloBase):
    codigoorden = models.CharField(default='', max_length=250, null=True, blank=True, verbose_name=u'codigo orden de trabajo')
    informe = models.TextField(blank=True, null=True, verbose_name=u'Repuestos')
    estado = models.IntegerField(choices=ESTADO_ORDEN_TRABAJO, default=1, verbose_name=u'Estado Orden Trabajo')
    calificacion = models.FloatField(blank=True, null=True, verbose_name=u'calificacion solicitante')
    archivo = models.FileField(upload_to='OrdenTrabajo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Informe')

    def __str__(self):
        return u'%s' % self.codigoorden

    def en_uso(self):
        return self.hdincidente_set.filter(status=True).exists()

    def download_link(self):
        return self.archivo.url

    class Meta:
        verbose_name = u"Orden Trabajo"
        verbose_name_plural = u"Ordenes Trabajo"
        unique_together = ('codigoorden',)

    def save(self, *args, **kwargs):
        self.codigoorden = self.codigoorden.upper()
        super(OrdenTrabajo, self).save(*args, **kwargs)


class DetalleOrdenTrabajo(ModeloBase):
    orden = models.ForeignKey(OrdenTrabajo, blank=True, null=True, verbose_name=u'Orden Trabajo',
                              on_delete=models.CASCADE)
    repuesto = models.TextField(blank=True, null=True, verbose_name=u'Repuestos')
    cantidad = models.CharField(default='', max_length=250, verbose_name=u'Cantidad')

    def __str__(self):
        return u'%s' % self.orden

    class Meta:
        verbose_name = u"Detalle Orden Trabajo"
        verbose_name_plural = u"Detalle Ordenes Trabajo"

    def save(self, *args, **kwargs):
        self.repuesto = self.repuesto.upper()
        super(DetalleOrdenTrabajo, self).save(*args, **kwargs)


class ActivosSinCodigo(ModeloBase):
    nombre = models.CharField(max_length=500, verbose_name=u'Nombre')
    descripcion = models.TextField(blank=True, null=True, verbose_name=u'Descripcion')
    serie = models.CharField(default='', max_length=100, verbose_name=u"Serie")
    modelo = models.CharField(default='', max_length=100, verbose_name=u"Modelo")
    marca = models.CharField(default='', max_length=300, verbose_name=u"Marca")
    vidautil = models.IntegerField(default=1, verbose_name=u"Vida √∫til")
    statusactivo = models.IntegerField(default=1, choices=ESTADO_ACTIVO, verbose_name=u'Status')
    responsable = models.ForeignKey('sga.Persona', related_name='responsableactivosincodigo', verbose_name=u"Usuario", blank=True, null=True, on_delete=models.CASCADE)
    ubicacion = models.ForeignKey(Ubicacion, verbose_name=u"Ubicaci√≥n", blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"nombre"
        verbose_name_plural = u"nombres"

    def estado_activo(self):
        return ESTADO_ACTIVO[self.statusactivo - 1][1]

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        super(ActivosSinCodigo, self).save(*args, **kwargs)


class DetalleOrdenPedido(ModeloBase):
    producto = models.ForeignKey(Producto, on_delete=models.CASCADE)
    cantidad = models.DecimalField(max_digits=30, decimal_places=4, default=0)
    costo = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    valor = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    existencia = models.DecimalField(max_digits=30, decimal_places=4, default=0)

    def __str__(self):
        return u"%s  - Cant:  %s " % (self.producto, self.cantidad)

    class Meta:
        verbose_name = u'Detalle Ingreso producto'
        verbose_name_plural = u'Detalles Ingreso de Productos'
        ordering = ('producto__codigo',)

    def salida_producto(self):
        return self.ordenpedido_set.all()[0]

    def inventario_real(self):
        # if self.producto.inventarioreal_set.filter(producto=self).exists():
        #     inventario = self.inventarioreal_set.filter(producto=self)[0]
        #     cantidad = inventario.cantidad
        #     costo = inventario.costo
        return self.producto.inventarioreal_set.filter(producto=self)[0]

    def save(self, *args, **kwargs):
        super(DetalleOrdenPedido, self).save(*args, **kwargs)


ESTADO_ORDEN_PEDIDO = (
    (1, u"SOLICITADO"),
    (2, u"APROBADO"),
    (3, u"ANULADO"),
)


class OrdenPedido(ModeloBase):
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', related_name="ordenpedido_responsable_persona", verbose_name=u'Responsable', on_delete=models.CASCADE)
    denominacionpuesto = models.CharField(blank=True, null=True, max_length=500)
    director = models.ForeignKey('sga.Persona', related_name="ordenpedido_director_persona", verbose_name=u'Director', blank=True, null=True, on_delete=models.CASCADE)
    directordenominacionpuesto = models.CharField(blank=True, null=True, max_length=500)
    numerodocumento = models.IntegerField(blank=True, null=True)
    codigodocumento = models.CharField(blank=True, null=True, max_length=200)
    descripcion = models.CharField(default='', max_length=200)
    fechaoperacion = models.DateTimeField()
    productos = models.ManyToManyField(DetalleOrdenPedido)
    valor = models.DecimalField(max_digits=30, decimal_places=16, default=0)
    observaciones = models.TextField(default='', verbose_name=u"Observaciones")
    anulado = models.BooleanField(default=False)
    observacionanulado = models.CharField(blank=True, null=True, max_length=500, verbose_name=u"Observaci√≥n de anulado")
    estado = models.IntegerField(default=1, choices=ESTADO_ORDEN_PEDIDO, verbose_name=u'Estado')

    def __str__(self):
        return u'%s %s %s' % (self.departamento.nombre, self.numerodocumento, self.fechaoperacion.strftime('%d-%m-%Y'))

    class Meta:
        verbose_name = u'Orden de pedido'
        verbose_name_plural = u'Ordenes de pedido'
        ordering = ('-fechaoperacion', '-numerodocumento')
        unique_together = ('numerodocumento',)

    def mis_incidentes(self):
        incidentes = self.hdincidente_set.all()
        if incidentes:
            return incidentes
        return None

    def repr_id(self):
        return str(self.id).zfill(4)

    def cantidad_productos(self):
        return self.productos.all().count()

    def valor_orden(self):
        return null_to_decimal(self.productos.aggregate(suma=Sum('valor'))['suma'])

    def persona_entrega(self):
        return self.usuario_creacion.persona_set.all()[0]

    def mi_anulacion(self):
        if self.anulacion_set.exists():
            return self.anulacion_set.all()[0]
        return None

    def mi_estado(self):
        if self.estado_set.exists():
            return ESTADO_ORDEN_PEDIDO[self.estado_set.all()[0]]
        return None

    def mis_productos(self):
        return self.productos.all()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.observaciones = self.observaciones.upper()
        if self.id:
            self.valor = self.valor_orden()
        super(OrdenPedido, self).save(*args, **kwargs)


class HdIncidente(ModeloBase):
    asunto = models.CharField(max_length=500, verbose_name=u'Asunto')
    persona = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='persona_set', verbose_name=u'Solicitante', on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u'Departamento', on_delete=models.CASCADE)
    descripcion = models.TextField(blank=True, null=True, verbose_name=u'Descripci√≥n')
    subcategoria = models.ForeignKey(HdSubCategoria, blank=True, null=True, verbose_name=u'Sub categoria', on_delete=models.CASCADE)
    detallesubcategoria = models.ForeignKey(HdDetalle_SubCategoria, blank=True, null=True, verbose_name=u'Detalle', on_delete=models.CASCADE)
    activo = models.ForeignKey(ActivoFijo, blank=True, null=True, verbose_name=u'Activo', on_delete=models.CASCADE)
    fechareporte = models.DateField(verbose_name=u"Fecha de reporte")
    horareporte = models.TimeField(verbose_name=u"hora de reporte")
    medioreporte = models.ForeignKey(HdMedioReporte, blank=True, null=True, verbose_name=u'Medio de reporte', on_delete=models.CASCADE)
    director = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='director_set', verbose_name=u'Director', on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='Archivo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')
    estado = models.ForeignKey(HdEstado, verbose_name=u'Estado', on_delete=models.CASCADE)
    tipoincidente = models.ForeignKey(HdTipoIncidente, null=True, blank=True, verbose_name=u'Tipo de incidente', on_delete=models.CASCADE)
    # tipo = models.BooleanField(default=False, verbose_name=u'Estado de envio')
    ubicacion = models.ForeignKey(HdBloqueUbicacion, blank=True, null=True, verbose_name=u'Ubicacion', on_delete=models.CASCADE)
    causa = models.ForeignKey(HdCausas, blank=True, null=True, verbose_name=u'Causa', on_delete=models.CASCADE)
    responsableactivofijo = models.ForeignKey('sga.Persona', related_name='responsableactivofijo', verbose_name=u"Usuario", blank=True, null=True, on_delete=models.CASCADE)
    realizoencuesta = models.BooleanField(default=False, verbose_name=u'Realizo Encuesta')
    revisionequipoexterno = models.BooleanField(default=False, verbose_name=u'Revisi√≥n de equipo personal que realiza gesti√≥n institucional')
    revisionequiposincodigo = models.BooleanField(default=False, verbose_name=u'Revisi√≥n de equipo institucional sin c√≥digo de barra o sin registro de sistema interno')
    serie = models.CharField(default='', max_length=250, verbose_name=u'Serie o c√≥digo')
    ordentrabajo = models.ForeignKey(OrdenTrabajo, blank=True, null=True, verbose_name=u'Ubicacion', on_delete=models.CASCADE)
    tercerapersona = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='tercerapersona_set', verbose_name=u'Tercera Persona', on_delete=models.CASCADE)
    tipousuario = models.IntegerField(choices=TIPO_USUARIO, default=1, verbose_name=u'Tipo usuario')
    concodigo = models.BooleanField(default=False, verbose_name=u'Con C√≥digo')
    activosincodigo = models.ForeignKey(ActivosSinCodigo, blank=True, null=True, verbose_name=u'Activo Sin Codigo', on_delete=models.CASCADE)
    # ordenpedido = models.ForeignKey(OrdenPedido, blank=True, null=True, verbose_name=u'Orden de Pedido')
    ordenpedidos = models.ManyToManyField(OrdenPedido)

    # activosincodigo = models.ForeignKey(ActivosSi  nCodigo, blank=True, null=True, verbose_name=u'Activo Sin Codigo')

    def __str__(self):
        return u'%s' % self.asunto

    class Meta:
        verbose_name = u"Incidente"
        verbose_name_plural = u"Incidentes"

    def mis_ordenpedidos(self):
        return self.ordenpedidos.filter(hdincidente=self)

    def tiene_ordenpedido(self):
        return True if self.ordenpedidos.filter(hdincidente=self, anulado=False).exists() else False

    def download_link(self):
        return self.archivo.url

    def tiene_detalle(self):
        return True if self.hddetalle_incidente_set.filter(status=True).exists() else False

    def tiene_detalle_historial(self):
        hdt = self.hddetalle_incidente_set.filter(resolucion__isnull=False, status=True)
        rt = False
        if hdt.exists():
            count = 0
            for d in hdt:
                if not d.resolucion:
                    count = count + 1
            if hdt.count() == count:
                rt = False
            else:
                rt = True

        return rt

    def mi_detalle(self):
        return self.hddetalle_incidente_set.filter(status=True).order_by('-id')

    def mi_detallepersona(self, persona):
        return self.hddetalle_incidente_set.filter(agente__persona_id=persona, status=True).exclude(
            estadoasignacion=3).order_by('-id')

    def tiene_prioridad(self):
        return True if self.detallesubcategoria.prioridad else False

    def es_critica(self):
        return True if self.detallesubcategoria.prioridad.prioridad.codigo == '1' else False

    def es_alta(self):
        return True if self.detallesubcategoria.prioridad.prioridad.codigo == '2' else False

    def es_media(self):
        return True if self.detallesubcategoria.prioridad.prioridad.codigo == '3' else False

    def es_baja(self):
        return True if self.detallesubcategoria.prioridad.prioridad.codigo == '4' else False

    def esta_abierto(self):
        return True if self.estado_id == 1 else False

    def esta_pendiente(self):
        return True if self.estado_id == 2 else False

    def esta_resulto(self):
        return True if self.estado_id == 3 else False

    def esta_cerrado(self):
        return True if self.estado_id == 4 else False

    def esta_rechazado(self):
        return True if self.estado_id == 5 else False

    def ultimo_agente_asignado(self):
        if self.hddetalle_incidente_set.all().exists():
            return self.mi_detalle()[0].agente
        else:
            return None

    def ultimo_registro(self):
        if self.hddetalle_incidente_set.all().exists():
            return self.mi_detalle().order_by('-id')[0]
        else:
            return None

    def ultimo_registropersona(self, persona):
        if self.hddetalle_incidente_set.filter(agente__persona_id=persona, status=True).exclude(
                estadoasignacion=3).exists():
            return self.mi_detallepersona(persona)
        else:
            return None

    def puede_eliminar(self):
        if self.hddetalle_incidente_set.filter(status=True).exists():
            if self.hddetalle_incidente_set.filter(status=True).count() == 1:
                return True
            else:
                return False
        return True

    def mi_grupo(self, persona):
        if self.hddetalle_incidente_set.all().exists():
            if self.ultimo_registro().grupo:
                if self.ultimo_registro().grupo.hddetalle_grupo_set.filter(persona_id=persona).exists():
                    return True
                else:
                    return False
            return False
        return False

    def es_mi_grupo(self, persona):
        if HdDetalle_Grupo.objects.filter(persona_id=persona, status=True).exists():
            agente = HdDetalle_Grupo.objects.filter(persona_id=persona, status=True)[0]
            # if HdIncidente.objects.filter(Q(pk=self.id),(Q(tipoincidente=agente.grupo.tipoincidente)| Q(hddetalle_incidente__agente__grupo=agente.grupo)),status=True).exclude(estado=3).exists():
            if HdIncidente.objects.filter(Q(pk=self.id), Q(tipoincidente=agente.grupo.tipoincidente),
                                          status=True).exclude(estado=3).exists():
                return True
        return False

    def es_mi_agente(self, persona):
        if HdDetalle_Grupo.objects.filter(persona_id=persona, status=True).exists():
            agente = HdDetalle_Grupo.objects.filter(persona_id=persona, status=True)[0]
            if self.hddetalle_incidente_set.filter(status=True).exists():
                if self.ultimo_registro().agente:
                    if (self.ultimo_registro().agente == agente and self.ultimo_registro().estadoasignacion == 1) or (
                            self.ultimo_registro().estadoasignacion == 2 or self.ultimo_registro().estadoasignacion == 3):
                        return True
                    else:
                        return False
                elif self.es_mi_grupo(persona):
                    return True
        return True

    def mi_agente(self, persona):
        if self.hddetalle_incidente_set.all().exists():
            if self.ultimo_registro().agente:
                if self.ultimo_registro().agente.persona_id == persona:
                    return True
                else:
                    return False
            return False
        return False

    def es_agente_tic(self, persona):
        if HdDetalle_Grupo.objects.filter(persona_id=persona, status=True).exists():
            agente = HdDetalle_Grupo.objects.filter(persona_id=persona, status=True)[0]
            if agente.grupo.tipoincidente_id == 2:
                return True
        return False

    def agente(self, persona):
        if self.hddetalle_incidente_set.filter(status=True, agente__persona__id=persona).exists():
            return self.hddetalle_incidente_set.filter(status=True, agente__persona__id=persona)[0]
        return None

    def cantidad_detalle_incidente(self):
        return self.hddetalle_incidente_set.filter(status=True).count()

    def email_notificacion_tic(self, nombresistema):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        lista = ['tic@unemi.edu.ec']
        asunto = "HelpDesk: Nuevo Incidente #" + str(self.id)
        send_html_mail(asunto, "emails/notificarnuevoincidentehelpdesk.html",
                       {'sistema': nombresistema, 'incidente': self, 't': miinstitucion(),
                        'fecha': datetime.now().date()},
                       lista, [], cuenta=MY_CUENTAS_CORREOS[4][1])

    def email_notificacion_mantenimiento(self):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        lista = ['jsoriac@unemi.edu.ec', 'kbritol@unemi.edu.ec']
        asunto = "HelpDesk: Nuevo Incidente #" + str(self.id)
        send_html_mail(asunto, "emails/notificarnuevoincidentehelpdesk.html",
                       {'sistema': 'Sagest', 'incidente': self, 't': miinstitucion(), 'fecha': datetime.now().date()},
                       lista, [], cuenta=MY_CUENTAS_CORREOS[4][1])

    def email_notificacion_seguridadinformatica(self):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        lista = ['cloyolar@unemi.edu.ec', 'cperaltac@unemi.edu.ec', 'eferruzolag@unemi.edu.ec']
        asunto = "HelpDesk: Nuevo Incidente #" + str(self.id)
        send_html_mail(asunto, "emails/notificarnuevoincidentehelpdesk.html",
                       {'sistema': 'Sagest', 'incidente': self, 't': miinstitucion(), 'fecha': datetime.now().date()},
                       lista, [], cuenta=MY_CUENTAS_CORREOS[4][1])

    def email_notificacion_equipo_sin_codigo(self, nombresistema):
        # departamento = Departamento.objects.get()
        detalle = self.hddetalle_incidente_set.filter(status=True).order_by('-id')[0]
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        lista = ['helpdesk-novedades@unemi.edu.ec', detalle.agente.persona.emailinst]
        asunto = "HelpDesk: Nuevo incidente sin codigo barra, interno # cod.: " + str(self.id)
        send_html_mail(asunto, "emails/notificar_incidente_sincodigo.html",
                       {'sistema': nombresistema, 'incidente': self,
                        'agente': detalle.agente.persona.nombre_completo_inverso(), 't': miinstitucion(),
                        'fecha': datetime.now().date()},
                       lista, [], cuenta=MY_CUENTAS_CORREOS[4][1])

    def cantidad_pendientes(self):
        return len(HdIncidente.objects.values('id').filter(status=True, estado__id__in=[1, 2]).order_by('id').all())

    def turno(self):
        total = HdIncidente.objects.values('id').filter(status=True, estado__id__in=[1, 2]).order_by('id').all()
        if HdIncidente.objects.values('id').filter(status=True, estado__id__in=[1, 2], persona=self.persona,
                                                   id=self.id).exists():
            puesto = HdIncidente.objects.get(status=True, estado__id__in=[1, 2], persona=self.persona, id=self.id)


        else:
            puesto = None
        count = 0
        for t in total:
            if t['id'] == puesto.id:
                return count + 1
            count += 1
        return False

    # def email_notificacion_escalar(self, nombresistema, incidente):
    #     from sga.tasks import send_html_mail
    #     from sga.models import miinstitucion
    #     lista = []
    #
    #     for agente in self.grupo.mis_agentes():
    #         lista.append(agente.persona.lista_emails_interno())
    #     #Notificar al grupo de incidente escalado
    #     send_html_mail("HelpDesk: Incidente escalado #"+ str(self.id),
    #                    "emails/notificarincidenteescaladohelpdesk.html",
    #                    {'sistema': nombresistema, 'detalle': self, 't': miinstitucion(), 'dedetalle': dedetalle, 'fecha': datetime.now().date()}, lista,[],
    #                    cuenta=MY_CUENTAS_CORREOS[4][1])

    # def puede_eliminar(self):
    #     return True if self.hddetalle_incidente_set.all().count()==1 and self.estado == 1  and self.ultimo_registro().estadoasignacion == 1 else False

    def save(self, *args, **kwargs):
        self.asunto = self.asunto.upper()
        if self.descripcion:
            self.descripcion = self.descripcion.upper()
        super(HdIncidente, self).save(*args, **kwargs)


ESTADO_DETALLE_INCIDENTE = (
    (1, u'ASIGNADO'),
    (2, u'REASIGNACI√ìN'),
    (3, u'ESCALAMIENTO'),
    (4, u'DESISTIDO'),
)


class HdProceso(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u"Nombre")

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Proceso de Incidente"
        verbose_name_plural = u"Proceso de incidente"
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def esta_activo(self):
        return True if self.hdestado_proceso_set.all().exists() else False

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(HdProceso, self).save(*args, **kwargs)


class HdEstado_Proceso(ModeloBase):
    nombre = models.CharField(max_length=250, verbose_name=u"Nombre")
    proceso = models.ForeignKey(HdProceso, verbose_name=u'Proceso', on_delete=models.CASCADE)
    detalle = models.CharField(default='', max_length=500, verbose_name=u"Detalle")

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Estado del proceso de Incidente"
        verbose_name_plural = u"Estado del proceso de Incidentes"
        ordering = ('nombre',)
        unique_together = ('nombre',)

    def esta_activo(self):
        return True if HdDetalle_Incidente.objects.filter(estadoproceso=self).exists() else False

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(HdEstado_Proceso, self).save(*args, **kwargs)


class HdDetalle_Incidente(ModeloBase):
    incidente = models.ForeignKey(HdIncidente, blank=True, null=True, verbose_name=u'Incidente',
                                  on_delete=models.CASCADE)
    agente = models.ForeignKey(HdDetalle_Grupo, blank=True, null=True, verbose_name=u'Agente', on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='responsable_set',
                                    verbose_name=u'Responsable Grupo', on_delete=models.CASCADE)
    grupo = models.ForeignKey(HdGrupo, related_name=u'Grupo', on_delete=models.CASCADE)
    resolucion = models.TextField(blank=True, null=True, verbose_name=u'Resoluci√≥n')
    fecharesolucion = models.DateField(blank=True, null=True, verbose_name=u"Fecha Resolucion")
    horaresolucion = models.TimeField(blank=True, null=True, verbose_name=u"hora de reporte")
    estadoasignacion = models.IntegerField(choices=ESTADO_DETALLE_INCIDENTE, blank=True, null=True,
                                           verbose_name=u'Estado de Asignaci√≥n')
    estadoproceso = models.ForeignKey(HdEstado_Proceso, blank=True, null=True, verbose_name=u'Estado de Proceso',
                                      on_delete=models.CASCADE)
    estado = models.ForeignKey(HdEstado, blank=True, null=True, verbose_name=u'Estado', on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.incidente

    class Meta:
        verbose_name = u"Detalle de Incidente"
        verbose_name_plural = u"Detalle de Incidentes"

    def es_asignado(self):
        return True if self.estadoasignacion == 1 else False

    def es_reasingnado(self):
        return True if self.estadoasignacion == 2 else False

    def es_escalamiento(self):
        return True if self.estadoasignacion == 3 else False

    def mi_grupo(self, persona):
        if self.grupo:
            return True if self.grupo.hddetalle_grupo_set.filter(persona_id=persona).exists() else False
        return None

    def mis_ayudantes(self):
        return self.hddetalle_incidente_ayudantes_set.filter(status=True)

    def mi_agente(self):
        return self.agente.persona_id if self.agente else None

    def email_notificacion_agente(self, nombresistema):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        # Notificar al agente que se a asignado un nuevo incidente
        if self.agente:

            send_html_mail("HelpDesk: Incidente Asignado #" + str(self.incidente_id),
                           "emails/notificarincidenteasignadohelpdesk.html",
                           # {'sistema': nombresistema, 'detalle': self, 't': miinstitucion(), 'fecha': datetime.now().date()}, self.agente.persona.lista_emails_interno(),[],
                           {'sistema': nombresistema, 'detalle': self, 't': miinstitucion(),
                            'fecha': datetime.now().date()}, self.agente.persona.lista_emails_interno(), [],
                           cuenta=MY_CUENTAS_CORREOS[4][1])

            if self.incidente.persona:
                send_html_mail("HelpDesk: Incidente Asignado #" + str(self.incidente_id),
                               "emails/notificarincidenteasignadohelpdesksolicitante.html",
                               # {'sistema': nombresistema, 'detalle': self, 't': miinstitucion(), 'fecha': datetime.now().date()}, self.agente.persona.lista_emails_interno(),[],
                               {'sistema': nombresistema, 'detalle': self, 't': miinstitucion(),
                                'fecha': datetime.now().date()}, self.incidente.persona.lista_emails_interno(), [],
                               cuenta=MY_CUENTAS_CORREOS[4][1])
            # else:
            #     lista = []
            #     for agente in self.grupo.mis_agentes():
            #         lista.append(agente.persona.lista_emails_interno())
            #         send_html_mail("Nuevo Incidente Reasignado",
            #                        "emails/notificarincidenteescaladohelpdesk.html",
            #                        {'sistema': nombresistema, 'detalle': self, 't': miinstitucion()},lista, [],cuenta=MY_CUENTAS_CORREOS[4][1])

    def email_notificacion_agente_reasignado(self, nombresistema, deagente):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        # Notificar al agente que se a asignado un nuevo incidente
        lista = ['bbarcom@unemi.edu.ec', self.agente.persona.lista_emails_interno()]
        send_html_mail("HelpDesk: Incidente Reasignado #" + str(self.id),
                       "emails/notificarincidentereasignadohelpdesk.html",
                       {'sistema': nombresistema, 'detalle': self, 't': miinstitucion(), 'deagente': deagente,
                        'fecha': datetime.now().date()}, lista, [],
                       cuenta=MY_CUENTAS_CORREOS[4][1])

    def email_notificacion_escalar(self, nombresistema, dedetalle):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        lista = ['bbarcom@unemi.edu.ec']
        for agente in self.grupo.mis_agentes():
            lista.append(agente.persona.lista_emails_interno())
        # Notificar al grupo de incidente escalado
        send_html_mail("HelpDesk: Incidente escalado #" + str(self.id),
                       "emails/notificarincidenteescaladohelpdesk.html",
                       {'sistema': nombresistema, 'detalle': self, 't': miinstitucion(), 'dedetalle': dedetalle,
                        'fecha': datetime.now().date()}, lista, [],
                       cuenta=MY_CUENTAS_CORREOS[4][1])

    def save(self, *args, **kwargs):
        super(HdDetalle_Incidente, self).save(*args, **kwargs)


class HdDetalle_Incidente_Ayudantes(ModeloBase):
    detallleincidente = models.ForeignKey(HdDetalle_Incidente, blank=True, null=True, verbose_name=u'Detalle Incidente',
                                          on_delete=models.CASCADE)
    agente = models.ForeignKey(HdDetalle_Grupo, blank=True, null=True, verbose_name=u'Agente', on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.detallleincidente

    def save(self, *args, **kwargs):
        super(HdDetalle_Incidente_Ayudantes, self).save(*args, **kwargs)


class HdMaterial_Incidente(ModeloBase):
    incidente = models.ForeignKey(HdIncidente, blank=True, null=True, verbose_name=u'Incidente',
                                  on_delete=models.CASCADE)
    material = models.ForeignKey(HdMateriales, blank=True, null=True, verbose_name=u'Material',
                                 on_delete=models.CASCADE)
    cantidad = models.IntegerField(default=0)

    def __str__(self):
        return u'%s' % self.material

    def save(self, *args, **kwargs):
        super(HdMaterial_Incidente, self).save(*args, **kwargs)


class HdMaterial_OrdenPedido_Incidente(ModeloBase):
    incidente = models.ForeignKey(HdIncidente, blank=True, null=True, verbose_name=u'Incidente',
                                  on_delete=models.CASCADE)
    material = models.ForeignKey(DetalleOrdenPedido, blank=True, null=True, verbose_name=u'Material',
                                 on_delete=models.CASCADE)
    cantidad = models.IntegerField(default=0)

    def __str__(self):
        return u'%s' % self.material

    def ordenpedido(self):
        ordenpedido = OrdenPedido.objects.get(productos=self.material)
        return ordenpedido

    def save(self, *args, **kwargs):
        super(HdMaterial_OrdenPedido_Incidente, self).save(*args, **kwargs)


# HORAS EXTRAS
class PlanificacionHorasExtras(ModeloBase):
    from sga.models import MESES_CHOICES
    anio = models.IntegerField(default=0, verbose_name=u"A√±o")
    mes = models.IntegerField(choices=MESES_CHOICES, default=1, verbose_name=u"Mes")
    departamento = models.ForeignKey(Departamento, verbose_name=u'Departamento', on_delete=models.CASCADE)
    actividadplanificada = models.TextField(verbose_name=u"Actividad Planificada")
    observacionplanificada = models.TextField(verbose_name=u"Observaci√≥n")
    verificadotthh = models.BooleanField(default=False, verbose_name=u"Verificado por TTHH")
    personaverificado = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='personaverificado_set',
                                          verbose_name=u'Persona Verificado', on_delete=models.CASCADE)
    observaciontthh = models.TextField(verbose_name=u"Observaci√≥n por TTHH", default='')
    aprobado = models.BooleanField(default=False, verbose_name=u"Aprobado")
    personaaprobado = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='personaaprobado_set',
                                        verbose_name=u'Persona Aprobado', on_delete=models.CASCADE)
    observacionaprobado = models.TextField(verbose_name=u"Observaci√≥n por Aprobado", default='')

    def __str__(self):
        return u'%s - %s - %s - %s' % (self.anio, self.mes, self.departamento, self.actividadplanificada)

    class Meta:
        verbose_name = u"Planificaci√≥n"
        verbose_name_plural = u"Planificaciones"

    def cantidad(self):
        return PlanificacionHorasExtrasPersona.objects.filter(status=True, planificacion=self).count()

    def save(self, *args, **kwargs):
        self.actividadplanificada = self.actividadplanificada.upper()
        self.observacionplanificada = self.observacionplanificada.upper()
        self.observaciontthh = self.observaciontthh.upper()
        self.observacionaprobado = self.observacionaprobado.upper()
        super(PlanificacionHorasExtras, self).save(*args, **kwargs)


class PlanificacionHorasExtrasPersona(ModeloBase):
    planificacion = models.ForeignKey(PlanificacionHorasExtras, verbose_name=u'Planificacion', on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', on_delete=models.CASCADE)
    modalidadlaboral = models.ForeignKey(ModalidadLaboral, verbose_name=u'Modalidad Laboral', on_delete=models.CASCADE)
    regimenlaboral = models.ForeignKey(RegimenLaboral, verbose_name=u'Regimen Laboral', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha')
    horadesde = models.TimeField(verbose_name=u'Hora desde')
    horahasta = models.TimeField(blank=True, null=True, verbose_name=u'Hora hasta')
    actividadplanificada = models.TextField(verbose_name=u"Actividad Planificada")
    actividadrealizada = models.TextField(verbose_name=u"Actividad Realizada")

    def __str__(self):
        return u'%s - %s - %s %s a %s' % (self.planificacion, self.persona, self.fecha, self.horadesde, self.horahasta)

    class Meta:
        verbose_name = u"Planificaci√≥n Persona"
        verbose_name_plural = u"Planificaciones Personas"

    def codigo(self):
        return str(self.persona_id) + str(self.fecha_replace()) + str(self.horadesde_replace()) + str(
            self.horahasta_replace())

    def fecha_replace(self):
        dia = str(self.fecha.day)
        if len(dia) == 1:
            dia = "0" + dia
        mes = str(self.fecha.month)
        if len(mes) == 1:
            mes = "0" + mes
        return dia + mes + "-" + str(self.fecha.year)

    def horadesde_replace(self):
        hora = str(self.horadesde.hour)
        if len(hora) == 1:
            hora = "0" + hora
        minuto = str(self.horadesde.minute)
        if len(minuto) == 1:
            minuto = "0" + minuto
        return hora + minuto

    def horahasta_replace(self):
        hora = str(self.horahasta.hour)
        if len(hora) == 1:
            hora = "0" + hora
        minuto = str(self.horahasta.minute)
        if len(minuto) == 1:
            minuto = "0" + minuto
        return hora + minuto

    def horasuplementaria(self):
        from sga.funciones import convertir_hora
        dias_laborables = [1, 2, 3, 4, 5]
        if self.fecha.isoweekday() in dias_laborables:
            if self.regimenlaboral_id == 1:
                return restar_hora(str(self.horahasta), str(self.horadesde))
            else:
                # verificar para quitar las horas nocturnas a los que no son administrativos
                if self.horadesde < convertir_hora('06:00:00'):
                    horad = convertir_hora('06:00:00')
                else:
                    horad = self.horadesde

                if self.horahasta > convertir_hora('23:00:00'):
                    horah = convertir_hora('23:00:00')
                else:
                    horah = self.horahasta
                return restar_hora(str(horah), str(horad))
        return ""

    def horaextraordinaria(self):
        dias_laborables = [6, 7]
        if self.fecha.isoweekday() in dias_laborables:
            return restar_hora(str(self.horahasta), str(self.horadesde))
        return ""

    def horanocturna(self):
        from sga.funciones import convertir_hora
        if self.regimenlaboral_id != 1:
            if self.horadesde < convertir_hora('06:00:00'):
                hora1 = ""
                if self.horadesde < convertir_hora('06:00:00'):
                    if self.horahasta > convertir_hora('06:00:00'):
                        hora1 = restar_hora('06:00:00', str(self.horadesde))
                    else:
                        hora1 = restar_hora(str(self.horahasta), str(self.horadesde))
                hora2 = ""
                if self.horahasta > convertir_hora('23:00:00'):
                    hora2 = restar_hora(str(self.horahasta), '23:00:00')

                if hora1 != "" and hora2 != "":
                    return sumar_hora(str(hora2), str(hora1))
                else:
                    if hora1 != "":
                        return str(hora1)
                    else:
                        return str(hora2)
        return ""

    def horasuplementaria_horas(self, pdesde, phasta, mdesde, mhasta):
        from sga.funciones import convertir_hora
        dias_laborables = [1, 2, 3, 4, 5]
        if mdesde != "" and mhasta != "":
            if self.fecha.isoweekday() in dias_laborables:
                if self.regimenlaboral_id == 1:
                    if mdesde > pdesde:
                        hora1 = mdesde
                    else:
                        hora1 = pdesde

                    if mhasta > phasta:
                        hora2 = phasta
                    else:
                        hora2 = mhasta
                    return restar_hora(str(hora2), str(hora1))
                else:
                    # verificar para quitar las horas nocturnas a los que no son administrativos
                    if mdesde < convertir_hora('06:00:00'):
                        horad = convertir_hora('06:00:00')
                    else:
                        horad = mdesde

                    if mhasta > convertir_hora('23:00:00'):
                        horah = convertir_hora('23:00:00')
                    else:
                        horah = mhasta
                    return restar_hora(str(horah), str(horad))
        return ""

    def horaextraordinaria_horas(self, pdesde, phasta, mdesde, mhasta):
        dias_laborables = [6, 7]
        if mdesde != "" and mhasta != "":
            if self.fecha.isoweekday() in dias_laborables:
                if mdesde > pdesde:
                    hora1 = mdesde
                else:
                    hora1 = pdesde

                if mhasta > phasta:
                    hora2 = phasta
                else:
                    hora2 = mhasta
                return restar_hora(str(hora2), str(hora1))
        return ""

    def horanocturna_horas(self, pdesde, phasta, mdesde, mhasta):
        from sga.funciones import convertir_hora
        if mdesde != "" and mhasta != "":
            if self.regimenlaboral_id != 1:
                if mdesde < convertir_hora('06:00:00'):
                    hora1 = ""
                    if mdesde < convertir_hora('06:00:00'):
                        if mhasta > convertir_hora('06:00:00'):
                            hora1 = restar_hora('06:00:00', str(mdesde))
                        else:
                            hora1 = restar_hora(str(mhasta), str(mdesde))
                    hora2 = ""
                    if mhasta > convertir_hora('23:00:00'):
                        hora2 = restar_hora(str(mhasta), '23:00:00')

                    if hora1 != "" and hora2 != "":
                        return sumar_hora(str(hora2), str(hora1))
                    else:
                        if hora1 != "":
                            return str(hora1)
                        else:
                            return str(hora2)
        return ""

    def marcadas(self):
        from sga.funciones import convertir_hora
        if MarcadasDia.objects.filter(persona=self.persona, fecha=self.fecha, status=True).exists():
            marcadasdia = MarcadasDia.objects.filter(persona=self.persona, fecha=self.fecha, status=True)[0]
            posicion = 0
            resultado_resta_aux = ""
            detalles = marcadasdia.registromarcada_set.filter(status=True).order_by('id')
            for detalle in detalles:
                marcadaentrada = detalle.entrada
                if marcadaentrada.time() >= self.horadesde:
                    resultado_resta = convertir_hora(restar_hora(str(marcadaentrada.time()), str(self.horadesde)))
                else:
                    resultado_resta = convertir_hora(restar_hora(str(self.horadesde), str(marcadaentrada.time())))
                if resultado_resta_aux == "":
                    posicion_actual = posicion
                    resultado_resta_aux = resultado_resta
                else:
                    if resultado_resta < resultado_resta_aux:
                        resultado_resta_aux = resultado_resta
                        posicion_actual = posicion
                posicion += 1
            return detalles[posicion_actual]
        return None

    def save(self, *args, **kwargs):
        self.actividadplanificada = self.actividadplanificada.upper()
        self.actividadrealizada = self.actividadrealizada.upper()
        super(PlanificacionHorasExtrasPersona, self).save(*args, **kwargs)


# CURSOS FORMACION Y CAPACITACION GENERADO POR TALENTO HUMANO
class CapPeriodo(ModeloBase):
    nombre = models.CharField(max_length=500, verbose_name=u'Nombre')
    descripcion = models.CharField(max_length=1000, verbose_name=u'Descripcion')
    fechainicio = models.DateField(blank=True, null=True)
    fechafin = models.DateField(blank=True, null=True)
    archivo = models.FileField(upload_to='capacitacionTH/%Y/%m/%d', blank=True, null=True, verbose_name=u'Titulo')
    abreviatura = models.CharField(max_length=25, blank=True, null=True, verbose_name=u'Abreviatura')

    def __str__(self):
        return u'%s [ %s - %s ]' % (
        self.nombre, self.fechainicio.strftime('%d-%m-%Y'), self.fechafin.strftime('%d-%m-%Y'))

    def download_link(self):
        return self.archivo.url

    def esta_activo_periodo(self):
        return True if self.fechainicio <= datetime.now().date() and self.fechafin >= datetime.now().date() else False

    def esta_cap_evento_periodo_activo(self):
        return True if self.capeventoperiodo_set.values('id').filter(status=True).exists() else False

    def contar_inscripcion_periodo(self):
        total = 0
        if CapEventoPeriodo.objects.filter(periodo=self.id).exists():
            for eventos in CapEventoPeriodo.objects.filter(periodo=self.id):
                total += eventos.capcabecerasolicitud_set.filter(status=True, estadosolicitud=variable_valor(
                    'APROBADO_CAPACITACION')).count()
        return total

    class Meta:
        verbose_name = u"Periodo Capacitacion"
        verbose_name_plural = u"Periodo Capacitaciones"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        self.abreviatura = self.abreviatura.upper()
        super(CapPeriodo, self).save(*args, **kwargs)


class CapEvento(ModeloBase):
    nombre = models.CharField(max_length=500, verbose_name=u'Nombre')
    tipocurso = models.ForeignKey('sga.TipoCurso', verbose_name=u"Capacitacion Periodo", on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.nombre

    def esta_cap_evento_activo(self):
        return True if self.capeventoperiodo_set.filter(status=True).exists() else False

    class Meta:
        verbose_name = u"Evento Capacitaci√≥n"
        verbose_name_plural = u"Evento Capacitaci√≥n"
        ordering = ['nombre']

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(CapEvento, self).save(*args, **kwargs)


class CapEnfocada(ModeloBase):
    nombre = models.CharField(max_length=500, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Capacitaci√≥n Enfocada"
        verbose_name_plural = u"Capacitaci√≥n Enfocada"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(CapEnfocada, self).save(*args, **kwargs)


class CapEventoPeriodo(ModeloBase):
    from sga.models import MODALIDAD_CAPACITACION
    periodo = models.ForeignKey(CapPeriodo, verbose_name=u"Capacitacion Periodo", on_delete=models.CASCADE)
    capevento = models.ForeignKey(CapEvento, verbose_name=u"Evento", on_delete=models.CASCADE)
    enfoque = models.ForeignKey(CapEnfocada, verbose_name=u"Capacitacion Enfoque", on_delete=models.CASCADE)
    observacion = models.TextField(verbose_name=u"Observacion")
    objetivo = models.TextField(verbose_name=u"Objetivo")
    horas = models.IntegerField(default=0, verbose_name=u'Horas Academica')
    horaspropedeutica = models.IntegerField(default=0, verbose_name=u'Horas Proped√©uticas')
    horasautonoma = models.IntegerField(default=0, verbose_name=u'Horas Aut√≥nomas')
    minasistencia = models.IntegerField(default=0, verbose_name=u'Minimo Asistencia')
    minnota = models.IntegerField(default=0, verbose_name=u'Minimo Notas')
    cupo = models.IntegerField(default=0, verbose_name=u'Cupo')
    folder = models.IntegerField(default=0, verbose_name=u'N¬∫ Folder')
    regimenlaboral = models.ForeignKey(RegimenLaboral, verbose_name=u"Regimen Laboral", on_delete=models.CASCADE)
    tipocertificacion = models.ForeignKey('sga.TipoCertificacion', blank=True, null=True,
                                          verbose_name=u"Tipo certificaci√≥n", on_delete=models.CASCADE)
    tipoparticipacion = models.ForeignKey('sga.TipoParticipacion', blank=True, null=True,
                                          verbose_name=u"Tipo participaci√≥n", on_delete=models.CASCADE)
    contextocapacitacion = models.ForeignKey('sga.ContextoCapacitacion', blank=True, null=True,
                                             verbose_name=u'Contexto capacitacion', on_delete=models.CASCADE)
    tipocapacitacion = models.ForeignKey('sga.TipoCapacitacion', blank=True, null=True,
                                         verbose_name=u"Tipo capacitaci√≥n", on_delete=models.CASCADE)
    modalidad = models.IntegerField(choices=MODALIDAD_CAPACITACION, blank=True, null=True,
                                    verbose_name=u'Modalidad Capacitacion')
    pais = models.ForeignKey('sga.Pais', blank=True, null=True, verbose_name=u'Pa√≠s', on_delete=models.CASCADE)
    provincia = models.ForeignKey('sga.Provincia', blank=True, null=True, verbose_name=u'Provincia',
                                  on_delete=models.CASCADE)
    canton = models.ForeignKey('sga.Canton', blank=True, null=True, verbose_name=u'Canton', on_delete=models.CASCADE)
    parroquia = models.ForeignKey('sga.Parroquia', blank=True, null=True, verbose_name=u"Parroquia",
                                  on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', verbose_name=u"Persona", on_delete=models.CASCADE)
    aula = models.ForeignKey('sga.Aula', verbose_name=u'Aula', on_delete=models.CASCADE)
    fechainicio = models.DateField(blank=True, null=True)
    fechafin = models.DateField(blank=True, null=True)
    contenido = models.TextField(verbose_name=u"Contenido")
    visualizar = models.BooleanField(default=False, verbose_name=u"Visualizar")
    areaconocimiento = models.ForeignKey('sga.AreaConocimientoTitulacion', blank=True, null=True,
                                         verbose_name=u'Area de conocimiento', on_delete=models.CASCADE)
    subareaconocimiento = models.ForeignKey('sga.SubAreaConocimientoTitulacion', blank=True, null=True,
                                            verbose_name=u'Sub area de conocimiento', on_delete=models.CASCADE)
    subareaespecificaconocimiento = models.ForeignKey('sga.SubAreaEspecificaConocimientoTitulacion', blank=True,
                                                      null=True, verbose_name=u'Sub area especifica de conocimiento',
                                                      on_delete=models.CASCADE)
    revisado = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='revisado',
                                 verbose_name=u"Revisador", on_delete=models.CASCADE)
    aprobado1 = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aprobado1',
                                  verbose_name=u"Aprobador1", on_delete=models.CASCADE)
    aprobado2 = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aprobado2',
                                  verbose_name=u"Aprobador2", on_delete=models.CASCADE)
    denominacionrevisado = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                             verbose_name=u"Denominacion Revisador", on_delete=models.CASCADE)
    denominacionaprobado1 = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                              related_name='denominacionaprobado1',
                                              verbose_name=u"Denominacion Aprobador1", on_delete=models.CASCADE)
    denominacionaprobado2 = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                              related_name='denominacionaprobado2',
                                              verbose_name=u"Denominacion Aprobador2", on_delete=models.CASCADE)
    aprobado3 = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aprobado3',
                                  verbose_name=u"Vicerrector Adtvo.", on_delete=models.CASCADE)
    denominacionaprobado3 = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                              related_name='denominacionaprobado3',
                                              verbose_name=u"Denominacion Vicerrector Adtvo.", on_delete=models.CASCADE)
    codigo = models.IntegerField(default=0, verbose_name=u'Codigo')
    observacionreporte = models.TextField(default='', verbose_name=u"Observacion Reporte", blank=True, null=True)
    abreviaturadepartamento = models.CharField(max_length=25, blank=True, null=True, verbose_name=u'Abreviatura')
    departamento = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Departamento",
                                     on_delete=models.CASCADE)

    def __str__(self):
        return u'%s - [%s]' % (self.capevento, self.regimenlaboral)

    class Meta:
        verbose_name = u"Evento Capacitaci√≥n "
        verbose_name_plural = u"Evento Capacitaciones"
        ordering = ['capevento']

    def actualizar_folio(self):
        from django.db.models import Max
        for aprobado in CapCabeceraSolicitud.objects.filter(status=True,
                                                            estadosolicitud=variable_valor('APROBADO_CAPACITACION'),
                                                            fechasolicitud__year=datetime.now().year, folionumero=0):
            if aprobado.porciento_requerido_asistencia:
                codigo = int((CapCabeceraSolicitud.objects.filter(fechasolicitud__year=datetime.now().year,
                                                                  status=True).aggregate(Max('folionumero'))[
                    'folionumero__max']) + 1)
                aprobado.folionumero = codigo
                aprobado.save()

    def clases_activas_horario(self, dia, turno):
        return CapClase.objects.filter(dia=dia, turno=turno, capeventoperiodo_id=self.id,
                                       status=True) if CapClase.objects.filter(dia=dia, capeventoperiodo_id=self.id,
                                                                               status=True).exists() else ""

    def clases_activas(self):
        return CapClase.objects.filter(
            (Q(fechainicio__lte=datetime.now().date()) & Q(fechafin__gte=datetime.now().date())),
            capeventoperiodo_id=self.id, status=True, dia=date.today().weekday() + 1).order_by('fechainicio', 'turno')

    def clases_dia(self, dia):
        return CapCabeceraAsistencia.objects.filter(
            clase__in=[clas for clas in CapClase.objects.filter(capeventoperiodo=self.id, status=True, dia=dia)])

    def inscritos_aprobado(self):
        # return self.capcabecerasolicitud_set.filter(status=True,estadosolicitud=variable_valor('APROBADO_CAPACITACION'))
        return CapCabeceraSolicitud.objects.filter(capeventoperiodo=self, status=True,
                                                   estadosolicitud=variable_valor('APROBADO_CAPACITACION'))

    def concatenar_codigo(self):
        codigo = ''
        if self.codigo < 9:
            codigo = '00'
        elif self.codigo > 9 and self.codigo < 100:
            codigo = '0'
        return codigo.__str__() + '' + self.codigo.__str__() + (
            '-' + self.periodo.abreviatura.__str__() if self.periodo.abreviatura else '') + (
                   '-' + self.abreviaturadepartamento.__str__() if self.abreviaturadepartamento else '') + (
                           '-' + self.fechainicio.year.__str__())

    def hay_cupo_inscribir(self):
        if self.contar_inscripcion_evento_periodo() < self.cupo:
            return True
        return False

    def total_asistencia_promedio(self):
        suma_promedio = 0
        inscritos = self.inscritos_aprobado()
        for inscrito in inscritos:
            suma_promedio += inscrito.porciento_asistencia()
        return round((float(suma_promedio / inscritos.count()) if inscritos.count() > 0 else 0), 2)

    def contar_inscripcion_evento_periodo(self):
        return self.capcabecerasolicitud_set.filter(status=True,
                                                    estadosolicitud=variable_valor('APROBADO_CAPACITACION')).count()

    def exiten_inscritos(self):
        return self.capcabecerasolicitud_set.filter(status=True).exists()

    def exiten_inscritos_aprobado(self):
        return self.capcabecerasolicitud_set.filter(status=True,
                                                    estadosolicitud=variable_valor('APROBADO_CAPACITACION')).exists()

    def exiten_asistencia(self):
        return CapCabeceraAsistencia.objects.filter(clase__in=self.capclase_set.filter(status=True)).exists()

    def turnos_en_fecha(self, fecha):
        return CapCabeceraAsistencia.objects.filter(clase__capeventoperiodo=self, fecha=fecha).order_by('clase__turno')

    def todas_fechas_asistencia(self):
        return CapCabeceraAsistencia.objects.filter(clase__capeventoperiodo=self).distinct('fecha').order_by('fecha')

    def total_promedio_por_fecha_asistencia(self):
        suma_promedio = 0
        fechas = self.todas_fechas_asistencia()
        c = fechas.count()
        for fecha in fechas:
            suma = self.porcentaje_asistencia_por_fecha(fecha.fecha)
            suma_promedio += suma
        return round((float(suma_promedio / c) if c > 0 else 0), 2)

    def abreviar_fecha(self, fecha):
        meses = ["ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SEP", "OCT", "NOV", "DIC"]
        return str(fecha.day) + " " + meses[fecha.month - 1]

    def asistencia_en_fecha_asistieron(self, fecha):
        return CapDetalleAsistencia.objects.filter(cabeceraasistencia__clase__capeventoperiodo=self,
                                                   cabeceraasistencia__fecha=fecha, asistio=True, status=True)

    def asistencia_en_fecha_no_asistieron(self, fecha):
        return CapDetalleAsistencia.objects.filter(cabeceraasistencia__clase__capeventoperiodo=self,
                                                   cabeceraasistencia__fecha=fecha, asistio=False, status=True)

    def porcentaje_asistencia_por_fecha(self, fecha):
        fecha_asistencia = CapDetalleAsistencia.objects.filter(cabeceraasistencia__clase__capeventoperiodo=self,
                                                               cabeceraasistencia__fecha=fecha)
        asistencia = fecha_asistencia.values('id').filter(asistio=True, status=True).count()
        return round((asistencia * 100) / float(fecha_asistencia.values('id').count()), 2)

    def puede_eliminar_planificacion_evento(self):
        mensaje = ""
        if self.capinstructor_set.values('id').filter(status=True).exists():
            mensaje += "instructor "
        if self.capclase_set.values('id').filter(status=True).exists():
            mensaje += "horarios "
        if self.capcabecerasolicitud_set.values('id').filter(status=True).exists():
            mensaje += "inscritos "
        if not mensaje == "":
            s = mensaje.split(" ")
            mensaje = ""
            if len(s) == 4:
                mensaje = s[0] + ", " + s[1] + ", " + s[2]
            elif len(s) == 3:
                mensaje = s[0] + ", " + s[1]
            else:
                mensaje = s[0]
        else:
            mensaje = None
        return mensaje

    def limitar_contenido_presentacion(self):
        contenido = self.contenido
        if self.contenido.__len__() > 200:
            contenido = self.contenido[0:200] + "..."
        return contenido

    def limitar_objetivo_presentacion(self):
        objetivo = self.objetivo
        if self.objetivo.__len__() > 200:
            objetivo = self.objetivo[0:200] + "..."
        return objetivo

    def limitar_observacion_presentacion(self):
        observacion = self.observacion
        if self.observacion.__len__() > 200:
            observacion = self.observacion[0:200] + "..."
        return observacion

    def concatenar_facilitadores(self):
        concatenado = ""
        facilitador = self.capinstructor_set.filter(status=True)
        if facilitador.exists():
            for faci in facilitador:
                concatenado += faci.instructor.nombre_completo_inverso() + ","
            concatenado = concatenado[:concatenado.__len__() - 1]
        return u'%s' % concatenado

    def instructor_principal(self):
        if self.capinstructor_set.values('id').filter(status=True, instructorprincipal=True).exists():
            return self.capinstructor_set.filter(status=True, instructorprincipal=True)[0]
        return None

    def titulo_instructor_principal(self):
        instructor_principal = self.instructor_principal()
        if not instructor_principal is None:
            return instructor_principal.instructor.titulacion_principal_senescyt_registro()
        return ''

    def titulo_3nivel_instructor_principal(self):
        titulo_instructor = self.titulo_instructor_principal()
        if titulo_instructor != '':
            if titulo_instructor.titulo.nivel_id == 4:
                return titulo_instructor.persona.titulacion_set.filter(titulo__nivel=3).order_by('-fechaobtencion')[0]
        return None

    def titulo_3nivel_revisador(self):
        if self.revisado:
            revisado = self.revisado.titulacion_principal_senescyt_registro()
            if revisado != '':
                if revisado.titulo.nivel_id == 4:
                    return self.revisado.titulacion_set.filter(titulo__nivel=3).order_by('-fechaobtencion')[0]
        return None

    def titulo_3nivel_aprobador1(self):
        aprobado1 = self.aprobado1.titulacion_principal_senescyt_registro()
        if aprobado1 != '':
            if aprobado1.titulo.nivel_id == 4:
                return self.aprobado1.titulacion_set.filter(titulo__nivel=3).order_by('-fechaobtencion')[0]
        return None

    def titulo_3nivel_aprobador2(self):
        aprobado2 = self.aprobado2.titulacion_principal_senescyt_registro()
        if aprobado2 != '':
            if aprobado2.titulo.nivel_id == 4:
                return self.aprobado2.titulacion_set.filter(titulo__nivel=3).order_by('-fechaobtencion')[0]
        return None

    def titulo_3nivel_aprobador3(self):
        aprobado3 = self.aprobado3.titulacion_principal_senescyt_registro()
        if aprobado3 != '':
            if aprobado3.titulo.nivel_id == 4:
                return self.aprobado3.titulacion_set.filter(titulo__nivel=3).order_by('-fechaobtencion')[0]
        return None

    def esta_en_fecha_evento(self):
        estado = []
        if datetime.now().date() < self.fechainicio and self.hay_cupo_inscribir() and self.visualizar:
            estado.append([True])
        elif datetime.now().date() <= self.fechainicio and not self.hay_cupo_inscribir():
            estado.append([False, 'CUPO LLENO', 'important'])
        elif self.fechainicio >= datetime.now().date() and datetime.now().date() <= self.fechafin:
            estado.append([False, 'EN CURSO', 'warning'])
        elif datetime.now().date() > self.fechafin:
            estado.append([False, 'EVENTO CULMINADO', 'success'])
        return estado

    def turno_horario_evento(self):
        return CapTurno.objects.filter(
            pk__in=self.capclase_set.values_list('turno__id', flat=True).filter(status=True).distinct())

    def semana(self):
        return ['Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado', 'Domingo']

    def save(self, *args, **kwargs):
        self.objetivo = self.objetivo.upper()
        super(CapEventoPeriodo, self).save(*args, **kwargs)


CAPACITACION_FALICITADORES_TIPO = (
    (1, u'INTERNO'),
    (2, u'EXTERNO'),
)


class CapEventoPeriodoFirmas(ModeloBase):
    from sga.models import TIPOFIRMA_EVENTO
    capeventoperiodo = models.ForeignKey(CapEventoPeriodo, verbose_name=u"Capacitacion Evento Periodo",
                                         on_delete=models.CASCADE)
    firmapersona = models.ForeignKey('sga.Persona', verbose_name=u"Firma persona", on_delete=models.CASCADE)
    tipofirmaevento = models.IntegerField(choices=TIPOFIRMA_EVENTO, blank=True, null=True,
                                          verbose_name=u'Modalidad Capacitacion')
    cargo = models.ForeignKey(DenominacionPuesto, blank=True, null=True, verbose_name=u"Cargo de la persona",
                              on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.firmapersona


class CapInstructor(ModeloBase):
    capeventoperiodo = models.ForeignKey(CapEventoPeriodo, verbose_name=u"Capacitacion Evento Periodo",
                                         on_delete=models.CASCADE)
    instructor = models.ForeignKey('sga.Persona', verbose_name=u"Capacitacion Periodo", on_delete=models.CASCADE)
    tipo = models.IntegerField(choices=CAPACITACION_FALICITADORES_TIPO, blank=True, null=True,
                               verbose_name=u'Capacitacion Facilitadores Tipo')
    instructorprincipal = models.BooleanField(default=False, verbose_name=u"Estado Asistencia")

    def __str__(self):
        return u'%s' % self.instructor

    def flexbox_repr(self):
        return self.instructor

    class Meta:
        verbose_name = u"Evento Capacitaci√≥n"
        verbose_name_plural = u"Evento Capacitaci√≥n"

    def save(self, *args, **kwargs):
        super(CapInstructor, self).save(*args, **kwargs)


class CapTurno(ModeloBase):
    turno = models.IntegerField(default=0, verbose_name=u'Turno')
    horainicio = models.TimeField(verbose_name=u'Comienza')
    horafin = models.TimeField(verbose_name=u'Termina')
    horas = models.FloatField(default=0, verbose_name=u'Horas')

    class Meta:
        verbose_name = u"Turno de clase"
        verbose_name_plural = u"Turnos de clases"
        ordering = ['horainicio']

    def __str__(self):
        return u'Turno %s [%s a %s]' % (
        str(self.turno), self.horainicio.strftime("%H:%M %p"), self.horafin.strftime("%H:%M %p"))

    def nombre_horario(self):
        return self.horainicio.strftime("%H:%M") + ' a ' + self.horafin.strftime("%H:%M")

    def save(self, *args, **kwargs):
        super(CapTurno, self).save(*args, **kwargs)


class CapClase(ModeloBase):
    from sga.models import DIAS_CHOICES
    capeventoperiodo = models.ForeignKey(CapEventoPeriodo, verbose_name=u'Evento', on_delete=models.CASCADE)
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u'Fecha Inicial')
    fechafin = models.DateField(blank=True, null=True, verbose_name=u'Fecha Fin')
    turno = models.ForeignKey(CapTurno, verbose_name=u'Turno', on_delete=models.CASCADE)
    dia = models.IntegerField(choices=DIAS_CHOICES, default=0, verbose_name=u'Dia')

    def __str__(self):
        return u'%s - %s - [%s - %s]' % (
        self.get_dia_display(), self.turno, self.fechainicio.strftime('%d-%m-%Y'), self.fechafin.strftime('%d-%m-%Y'))

    class Meta:
        verbose_name = u"Clase de Evento Capacitaci√≥n"
        verbose_name_plural = u"Clase de Evento Capacitaci√≥n"

    def fechas_horarios(self):
        return self.fechainicio.strftime('%d-%m-%Y') + " al " + self.fechafin.strftime('%d-%m-%Y')

    def tiene_clase_abierta(self):
        return True if self.capcabeceraasistencia_set.filter(fecha=datetime.now().date(),
                                                             status=True).exists() else False

    def extraer_contenido_clase_activa(self):
        contenido = None
        if CapCabeceraAsistencia.objects.filter(clase__isnull=False, clase_id=self.id).exists():
            contenido = CapCabeceraAsistencia.objects.filter(clase__isnull=False, clase_id=self.id)[0].contenido
        return contenido

    def total_asistencia_activa_abierta(self):
        return self.capcabeceraasistencia_set.filter(fecha=datetime.now().date(), status=True)[
            0].total_asistieron() if self.capcabeceraasistencia_set.filter(fecha=datetime.now().date(),
                                                                           status=True).exists() else 0

    def save(self, *args, **kwargs):
        super(CapClase, self).save(*args, **kwargs)


ESTADO_CABECERA_SOLICITUD_EVENTO = (
    (1, u'SOLICITADO'),
    (2, u'PENDIENTE'),
    (3, u'APROBADO'),
    (4, u'RECHAZADO'),
)


class CapCabeceraSolicitud(ModeloBase):
    capeventoperiodo = models.ForeignKey(CapEventoPeriodo, verbose_name=u'Evento Capacitaci√≥n',
                                         on_delete=models.CASCADE)
    solicita = models.ForeignKey('sga.Persona', related_name=u'Solicita', verbose_name=u"solicita",
                                 on_delete=models.CASCADE)
    participante = models.ForeignKey('sga.Persona', related_name=u'Participante', verbose_name=u"participante",
                                     on_delete=models.CASCADE)
    fechasolicitud = models.DateField(verbose_name=u"Fecha Solicitud")
    folionumero = models.IntegerField(default=0, verbose_name=u'Folio N¬∫')
    fechaultimaestadosolicitud = models.DateTimeField(blank=True, null=True,
                                                      verbose_name=u"Fecha Aprobaci√≥n o Rechazado")
    estadosolicitud = models.IntegerField(default=1, choices=ESTADO_CABECERA_SOLICITUD_EVENTO,
                                          verbose_name=u"Estado Solicitud")
    notificado = models.BooleanField(default=False, verbose_name=u'Notificado por email')
    fechanotifica = models.DateTimeField(blank=True, null=True)
    personanotifica = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='+',
                                        verbose_name=u'Persona que notifica y envia certificado',
                                        on_delete=models.CASCADE)
    rutapdf = models.FileField(upload_to='qrcode/certificados', blank=True, null=True, verbose_name=u'Certificado pdf')

    def __str__(self):
        return u'%s' % self.participante

    class Meta:
        verbose_name = u"Solicitud Cabecera Inscripci√≥n de Evento"
        verbose_name_plural = u"Solicitud Cabecera Inscripci√≥n de Evento"
        ordering = ['participante__apellido1', 'participante__apellido2', 'participante__nombres']

    def download_link(self):
        return self.rutapdf.url

    def porciento_asistencia(self):
        total = CapCabeceraAsistencia.objects.filter(clase__capeventoperiodo=self.capeventoperiodo,
                                                     capdetalleasistencia__isnull=False,
                                                     capdetalleasistencia__cabecerasolicitud=self).count()
        if total:
            numeroreal = self.capdetalleasistencia_set.filter(asistio=True, status=True).count()
            return round(float((numeroreal * 100) / float(total)), 2)
        else:
            return 100

    def porciento_requerido_asistencia(self):
        return self.porciento_asistencia() >= self.capeventoperiodo.minasistencia

    def detalle_solicitud(self):
        return self.capdetallesolicitud_set.all()

    def puede_eliminar_inscrito(self):
        return not self.capdetalleasistencia_set.filter(asistio=True).values('id').exists()

    def tiene_unidadorganica_participante(self):
        unidadorganica = None
        if self.participante.distributivopersona_set.filter(regimenlaboral=self.capeventoperiodo.regimenlaboral,
                                                            estadopuesto_id=PUESTO_ACTIVO_ID).exists():
            unidadorganica = \
            self.participante.distributivopersona_set.filter(regimenlaboral=self.capeventoperiodo.regimenlaboral,
                                                             estadopuesto_id=PUESTO_ACTIVO_ID)[0].unidadorganica
        elif self.participante.distributivopersona_set.filter(estadopuesto_id=PUESTO_ACTIVO_ID).exists():
            unidadorganica = self.participante.distributivopersona_set.filter(estadopuesto_id=PUESTO_ACTIVO_ID)[
                0].unidadorganica
        return unidadorganica

    def tiene_cargo_participante(self):
        cargo = None
        if self.participante.distributivopersona_set.filter(regimenlaboral=self.capeventoperiodo.regimenlaboral,
                                                            estadopuesto_id=PUESTO_ACTIVO_ID).exists():
            cargo = \
            self.participante.distributivopersona_set.filter(regimenlaboral=self.capeventoperiodo.regimenlaboral,
                                                             estadopuesto_id=PUESTO_ACTIVO_ID)[0].denominacionpuesto
        elif self.participante.distributivopersona_set.filter(estadopuesto_id=PUESTO_ACTIVO_ID).exists():
            cargo = self.participante.distributivopersona_set.filter(estadopuesto_id=PUESTO_ACTIVO_ID)[
                0].denominacionpuesto
        return cargo

    def tiene_cargo_departamento_participante(self):
        cargo = None
        if self.participante.distributivopersona_set.filter(regimenlaboral=self.capeventoperiodo.regimenlaboral,
                                                            estadopuesto_id=PUESTO_ACTIVO_ID).exists():
            cargo = \
            self.participante.distributivopersona_set.filter(regimenlaboral=self.capeventoperiodo.regimenlaboral,
                                                             estadopuesto_id=PUESTO_ACTIVO_ID)[0].unidadorganica
        elif self.participante.distributivopersona_set.filter(estadopuesto_id=PUESTO_ACTIVO_ID).exists():
            cargo = self.participante.distributivopersona_set.filter(estadopuesto_id=PUESTO_ACTIVO_ID)[0].unidadorganica
        return cargo

    def tiene_responsable_participante(self):
        responsable = None
        if self.participante.distributivopersona_set.filter(regimenlaboral=self.capeventoperiodo.regimenlaboral,
                                                            estadopuesto_id=PUESTO_ACTIVO_ID).exists():
            responsable = \
            self.participante.distributivopersona_set.filter(regimenlaboral=self.capeventoperiodo.regimenlaboral,
                                                             estadopuesto_id=PUESTO_ACTIVO_ID)[
                0].unidadorganica.responsable
        elif self.participante.distributivopersona_set.filter(estadopuesto_id=PUESTO_ACTIVO_ID).exists():
            responsable = self.participante.distributivopersona_set.filter(estadopuesto_id=PUESTO_ACTIVO_ID)[
                0].unidadorganica.responsable
        return responsable

    def asistencia_fecha_turno(self, asistencia):
        if CapDetalleAsistencia.objects.filter(cabeceraasistencia=asistencia, cabecerasolicitud=self).exists():
            return CapDetalleAsistencia.objects.filter(cabeceraasistencia=asistencia, cabecerasolicitud=self)[0]
        return None

    def contar_asistencia_asistida(self):
        return CapDetalleAsistencia.objects.filter(asistio=True, cabecerasolicitud=self)

    def mail_notificar_talento_humano(self, nombresistem):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        # notifica ya sido eliminado por talento humano
        send_html_mail("Eliminaci√≥n de Inscrito por Talento Humano",
                       "emails/eliminadoinscritocapacitaciontalentohumano.html",
                       {'sistema': nombresistem, 'd': self, 't': miinstitucion()},
                       self.participante.lista_emails_interno(), [], cuenta=MY_CUENTAS_CORREOS[1][1])

    def save(self, *args, **kwargs):
        super(CapCabeceraSolicitud, self).save(*args, **kwargs)


ESTADO_DETALLE_SOLICITUD_EVENTO = (
    (1, u'SOLICITADO'),
    (2, u'APROBADO'),
    (3, u'RECHAZADO'),
)


class CapDetalleSolicitud(ModeloBase):
    cabecera = models.ForeignKey(CapCabeceraSolicitud, verbose_name=u'Cabera de Solicitud', on_delete=models.CASCADE)
    aprueba = models.ForeignKey('sga.Persona', verbose_name=u'Aprueba', on_delete=models.CASCADE)
    fechaaprobacion = models.DateField(verbose_name=u"Fecha Aprobaci√≥n")
    observacion = models.TextField(default='', verbose_name=u"Observacion")
    estado = models.IntegerField(choices=ESTADO_DETALLE_SOLICITUD_EVENTO, default=0, verbose_name=u'Estado Aprobaci√≥n')

    def __str__(self):
        return u'%s' % self.cabecera

    class Meta:
        verbose_name = u"Solicitud Detalle Inscripci√≥n de Evento"
        verbose_name_plural = u"Solicitud Detalle Inscripci√≥n de Evento"

    def mail_notificar_jefe_departamento(self, nombresistema, estado_solicitud_aprobacion):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        if estado_solicitud_aprobacion:
            # notifica cuando el jefe del departamento aprueba
            send_html_mail("Aprobaci√≥n de Solicitud por Jefe de Departamento",
                           "emails/aprobacionsolicitudcapacitacionjefedepartamento.html",
                           {'sistema': nombresistema, 'd': self, 't': miinstitucion()},
                           self.cabecera.participante.lista_emails_interno(), [], cuenta=MY_CUENTAS_CORREOS[1][1])
        else:
            # notifica al jefe departamento cuando se quieren inscribir
            jefe = DistributivoPersona.objects.filter(persona=self.cabecera.participante,
                                                      regimenlaboral=self.cabecera.capeventoperiodo.regimenlaboral)[
                0].unidadorganica.responsable
            send_html_mail("Aprobaci√≥n de Solicitud por Jefe de Departamento",
                           "emails/solicitudcapacitacionjefedepartamento.html",
                           {'sistema': nombresistema, 'd': self, 't': miinstitucion(), 'j': jefe},
                           jefe.lista_emails_interno(), [], cuenta=MY_CUENTAS_CORREOS[1][1])

    def mail_notificar_talento_humano(self, nombresistem, estado_aprobacion_dr_th):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        if estado_aprobacion_dr_th:
            # notifica cuando talento humano aprueba
            send_html_mail("Aprobaci√≥n de Solicitud por Talento Humano",
                           "emails/aprobacionsolicitudcapacitaciontalentohumano.html",
                           {'sistema': nombresistem, 'd': self, 't': miinstitucion()},
                           self.cabecera.participante.lista_emails_interno(), [], cuenta=MY_CUENTAS_CORREOS[1][1])
        else:
            # notifica a cuando talento humano cuando el jefe departamento aprueba
            lista = ['formacion_uath@unemi.edu.ec']
            send_html_mail("Aprobaci√≥n de Solicitud para Talento Humano",
                           "emails/solicitudcapacitaciontalentohumano.html",
                           {'sistema': nombresistem, 'd': self, 't': miinstitucion()}, lista, [],
                           cuenta=MY_CUENTAS_CORREOS[1][1])

    def save(self, *args, **kwargs):
        if self.observacion:
            self.observacion = self.observacion.upper()
        super(CapDetalleSolicitud, self).save(*args, **kwargs)


class CapConfiguracion(ModeloBase):
    minasistencia = models.IntegerField(default=0, verbose_name=u'Minimo Asistencia')
    minnota = models.IntegerField(default=0, verbose_name=u'Minimo Notas')
    revisado = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Revisador",
                                 on_delete=models.CASCADE)
    denominacionrevisado = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                             verbose_name=u"Denominacion Revisador", on_delete=models.CASCADE)
    aprobado1 = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aprobador1',
                                  verbose_name=u"Aprobador TTHH", on_delete=models.CASCADE)
    denominacionaprobado1 = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                              related_name='denominacionaprobador1',
                                              verbose_name=u"Denominacion Aprobador TTHH", on_delete=models.CASCADE)
    aprobado2 = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aprobador2',
                                  verbose_name=u"Aprobador IPEC", on_delete=models.CASCADE)
    denominacionaprobado2 = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                              related_name='denominacionaprobador2',
                                              verbose_name=u"Denominacion Aprobador IPEC", on_delete=models.CASCADE)
    aprobado3 = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aprobador3',
                                  verbose_name=u"Vicerrector Adtvo.", on_delete=models.CASCADE)
    denominacionaprobado3 = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                              related_name='denominacionaprobador3',
                                              verbose_name=u"Denominacion Vicerrector Adtvo.", on_delete=models.CASCADE)
    abreviaturadepartamento = models.CharField(max_length=25, blank=True, null=True, verbose_name=u'Abreviatura')

    def __str__(self):
        return u'%s - %s' % (self.minasistencia, self.minnota)

    class Meta:
        verbose_name = u"Configuraci√≥n Capacitaci√≥n "
        verbose_name_plural = u"Configuraci√≥n Capacitaci√≥n"

    def revisado_f(self):
        if self.revisado:
            return u'%s - %s - %s' % (
            self.revisado.cedula, self.revisado.nombre_completo_inverso(), self.denominacionrevisado)
        return ''

    def save(self, *args, **kwargs):
        self.abreviaturadepartamento = self.abreviaturadepartamento.upper()
        super(CapConfiguracion, self).save(*args, **kwargs)


class CapCabeceraAsistencia(ModeloBase):
    clase = models.ForeignKey(CapClase, blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'fecha')
    horaentrada = models.TimeField(verbose_name=u'Hora entrada')
    horasalida = models.TimeField(blank=True, null=True, verbose_name=u'Hora salida')
    contenido = models.TextField(default='', verbose_name=u'Tema y Subtema')
    observaciones = models.TextField(default='', verbose_name=u'Observaciones')

    def __str__(self):
        return u'%s %s' % (self.clase, self.fecha)

    class Meta:
        ordering = ['horaentrada']

    def total_asistieron(self):
        return self.capdetalleasistencia_set.filter(asistio=True, status=True).count()

    def total_inscritos(self):
        return self.capdetalleasistencia_set.filter(status=True).count()

    def total_sin_asistencia(self):
        return self.capdetalleasistencia_set.filter(status=True, asistio=False).count()

    def listado_con_asistencia(self):
        return self.capdetalleasistencia_set.filter(status=True, asistio=True)

    def tiene_todos_asistencia(self):
        if self.total_sin_asistencia() == 0 and self.total_inscritos() == self.clase.capeventoperiodo.inscritos_aprobado().count():
            return True
        else:
            return False

    def save(self, *args, **kwargs):
        super(CapCabeceraAsistencia, self).save(*args, **kwargs)


class CapDetalleAsistencia(ModeloBase):
    cabeceraasistencia = models.ForeignKey(CapCabeceraAsistencia, blank=True, null=True, on_delete=models.CASCADE)
    cabecerasolicitud = models.ForeignKey(CapCabeceraSolicitud, blank=True, null=True, on_delete=models.CASCADE)
    asistio = models.BooleanField(default=False, verbose_name=u"Estado Asistencia")

    def __str__(self):
        return u'%s %s' % (self.cabeceraasistencia, self.cabecerasolicitud)

    def save(self, *args, **kwargs):
        super(CapDetalleAsistencia, self).save(*args, **kwargs)


# modulo de solicitud de vehiculos
ESTADO_SOLICITUD_VEHICULO = (
    (1, u'SOLICITADO'),
    (2, u'ENVIO PARA APROBACION'),
    (3, u'APROBADO'),
    (4, u'CANCELADO'),
)

TIPO_SOLICITUD_VEHICULO = (
    (1, u'ADMINISTRATIVO'),
    (2, u'ACADEMICO'),
)


class SolicitudVehiculo(ModeloBase):
    codigo = models.IntegerField(default=0, verbose_name=u'C√≥digo Solicitud')
    cantonsalida = models.ForeignKey('sga.Canton', related_name='cantonsalida_set', verbose_name=u'Canton Salida',
                                     on_delete=models.CASCADE)
    cantondestino = models.ForeignKey('sga.Canton', related_name='cantondestino_set', verbose_name=u'Canton Destino',
                                      on_delete=models.CASCADE)
    fechasalida = models.DateField(verbose_name=u"Fecha Salida")
    fechallegada = models.DateField(verbose_name=u"Fecha LLegada")
    horasalida = models.TimeField(verbose_name=u'Hora Salida')
    horaingreso = models.TimeField(blank=True, null=True, verbose_name=u'Hora LLegada')
    finalidadviaje = models.TextField(default='', verbose_name=u'Finalidad Viaje')
    tiempoviaje = models.TimeField(verbose_name=u'Tiempo Viaje')
    numeropersonas = models.IntegerField(default=0, verbose_name=u'N√∫mero Personas')
    responsablegira = models.ForeignKey('sga.Persona', verbose_name=u'Responsable Gira', on_delete=models.CASCADE)
    departamentosolicitante = models.ForeignKey(Departamento, verbose_name=u'Departamento Solicitante',
                                                on_delete=models.CASCADE)
    tiposolicitud = models.IntegerField(default=1, choices=TIPO_SOLICITUD_VEHICULO,
                                        verbose_name=u'Tipo Solicitud Vehiculo')
    estado = models.IntegerField(default=1, choices=ESTADO_SOLICITUD_VEHICULO, verbose_name=u'D√≠as')
    envioaprobacion = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='envioaprobacion_set',
                                        verbose_name=u'Responsable Envio Aprobaci√≥n', on_delete=models.CASCADE)
    aprobado = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aprobado_set',
                                 verbose_name=u'Responsable Aprobado', on_delete=models.CASCADE)
    cancelado = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='cancelado_set',
                                  verbose_name=u'Responsable Cancelado', on_delete=models.CASCADE)
    motivocancelado = models.TextField(default='', verbose_name=u'Motivo Cancelaci√≥n')
    administradorgeneral = models.ForeignKey('sga.Persona', related_name='administradorgeneral_set',
                                             verbose_name=u'Administrador General', on_delete=models.CASCADE)
    directoradministrativo = models.ForeignKey('sga.Persona', related_name='directoradministrativo_set',
                                               verbose_name=u'Director Administrativo', on_delete=models.CASCADE)

    def __str__(self):
        return u'%s a %s del %s al %s, motivo: %s' % (
        self.cantonsalida, self.cantondestino, self.fechasalida, self.fechallegada, self.finalidadviaje)

    class Meta:
        verbose_name = u"Solicitud Vehiculo"
        verbose_name_plural = u"Solicitudes Vehiculos"

    def cedula_ingreso(self):
        return self.usuario_creacion.persona_set.all()[0].cedula

    def codigop(self):
        return str(self.codigo).rjust(4, '0')

    def save(self, *args, **kwargs):
        self.finalidadviaje = self.finalidadviaje.upper()
        super(SolicitudVehiculo, self).save(*args, **kwargs)


ESTADO_VEHICULO = (
    (1, u'OK'),
    (2, u'MANTENIMIENTO'),
)


class VehiculoUnemi(ModeloBase):
    vehiculo = models.ForeignKey(ActivoFijo, verbose_name=u'Vehiculo', on_delete=models.CASCADE)
    descripcion = models.CharField(default='', max_length=300, verbose_name=u'Descripci√≥n')
    matricula = models.CharField(default='', max_length=50, verbose_name=u'Matricula')
    aceite = models.IntegerField(default=0, verbose_name=u"Cambio de Aceite")
    kilometraje = models.IntegerField(default=0, verbose_name=u"Kilometraje")
    estado = models.IntegerField(default=1, choices=ESTADO_VEHICULO, verbose_name=u'Estado Vehiculo')

    def __str__(self):
        return u'%s - %s' % (self.descripcion, self.matricula)

    class Meta:
        verbose_name = u"Vehiculo UNEMI"
        verbose_name_plural = u"Vehiculos UNEMI"

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.matricula = self.matricula.upper()
        super(VehiculoUnemi, self).save(*args, **kwargs)


DIAS = (
    (1, u'LUNES A VIERNES'),
    (2, u'SABADO'),
    (3, u'DOMINGO'),
)


class SolicitudVehiculoDetalle(ModeloBase):
    solicitud = models.ForeignKey(SolicitudVehiculo, verbose_name=u'Solicitud', on_delete=models.CASCADE)
    transporteinstitucional = models.BooleanField(default=True, verbose_name=u'Transporte Institucional')
    vehiculo = models.ForeignKey(VehiculoUnemi, verbose_name=u'Vehiculo', on_delete=models.CASCADE)
    conductor = models.ForeignKey('sga.Persona', verbose_name=u'Conductor', on_delete=models.CASCADE)
    fechainicio = models.DateField(verbose_name=u"Fecha Inicio Autorizado")
    fechafin = models.DateField(verbose_name=u"Fecha de Caducidad")
    laborable = models.BooleanField(default=False, verbose_name=u'Laborable')
    dia = models.IntegerField(default=1, choices=DIAS, verbose_name=u'D√≠as')
    horadesde = models.TimeField(verbose_name=u'Hora Desde')
    horahasta = models.TimeField(blank=True, null=True, verbose_name=u'Hora Hasta')
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n')
    archivo = models.FileField(upload_to='vehiculo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Titulo')

    def __str__(self):
        return u'%s - %s - %s' % (self.solicitud, self.vehiculo, self.conductor)

    class Meta:
        verbose_name = u"Solicitud Vehiculo Detalle"
        verbose_name_plural = u"Solicitudes Vehiculos Detalles"

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(SolicitudVehiculoDetalle, self).save(*args, **kwargs)


class SolicitudVehiculoCantonCerca(ModeloBase):
    canton = models.ForeignKey('sga.Canton', verbose_name=u'Canton', on_delete=models.CASCADE)


class CodigoTabla(ModeloBase):
    opcion = models.CharField(default='', max_length=300, verbose_name=u'Opci√≥n')
    codigo = models.IntegerField(default=1, verbose_name=u'C√≥digo opci√≥n')
    anio = models.IntegerField(default=0, verbose_name=u"A√±o")


# CURSOS CAPACITACION GENERADO POR IPEC
class CapConfiguracionIpec(ModeloBase):
    minasistencia = models.IntegerField(default=0, verbose_name=u'Minimo Asistencia')
    minnota = models.IntegerField(default=0, verbose_name=u'Minimo Notas')
    aprobado2 = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aprobad2',
                                  verbose_name=u"Aprobador IPEC", on_delete=models.CASCADE)
    aprobado3 = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aprobad3',
                                  verbose_name=u"Vicerrector Adtvo.", on_delete=models.CASCADE)
    denominacionaprobado2 = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                              related_name='denominacionaprobad2',
                                              verbose_name=u"Denominacion Aprobador IPEC", on_delete=models.CASCADE)
    denominacionaprobado3 = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                              related_name='denominacionaprobad3',
                                              verbose_name=u"Denominacion Vicerrector Adtvo.", on_delete=models.CASCADE)

    def __str__(self):
        return u'%s - %s' % (self.minasistencia, self.minnota)

    class Meta:
        verbose_name = u"Configuraci√≥n Capacitaci√≥n IPEC"
        verbose_name_plural = u"Configuraci√≥n Capacitaci√≥n IPEC"

    def save(self, *args, **kwargs):
        super(CapConfiguracionIpec, self).save(*args, **kwargs)


class CapInstructorIpec(ModeloBase):
    capeventoperiodo = models.ForeignKey(CapEventoPeriodoIpec, verbose_name=u"Capacitacion Evento Periodo",
                                         on_delete=models.CASCADE)
    instructor = models.ForeignKey('sga.Persona', verbose_name=u"Capacitacion Periodo", on_delete=models.CASCADE)
    instructorprincipal = models.BooleanField(default=False, verbose_name=u"Estado Asistencia")
    activo = models.BooleanField(default=False, verbose_name=u"Perfil")
    rutapdf = models.FileField(upload_to='qrcode/certificados_facilitadores', blank=True, null=True,
                               verbose_name=u'Certificado capacitacion pdf')
    emailnotificado = models.BooleanField(default=False, verbose_name=u'Notificar email')
    fecha_emailnotifica = models.DateTimeField(blank=True, null=True)
    persona_emailnotifica = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='+',
                                              verbose_name=u'Quien notifica y envia certificado',
                                              on_delete=models.CASCADE)
    idcursomoodle = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'id de curso de moodle')
    codigonumber = models.CharField(default='', max_length=100, verbose_name=u'Codigo number edcom')
    nombrecurso = models.TextField(default='', verbose_name=u'Nombre de materia moodle')

    def __str__(self):
        return u'%s - %s - %s - [ %s ]' % (
        self.instructor.cedula, self.instructor.nombre_completo_inverso(), self.instructor.email, self.id)

    class Meta:
        verbose_name = u"Evento Capacitaci√≥n"
        verbose_name_plural = u"Evento Capacitaci√≥n"

    def download_link(self):
        return self.rutapdf.url

    def flexbox_repr(self):
        return self.instructor

    def titulo_instructor(self):
        return self.instructor.titulacion_principal_senescyt_registro()

    def titulo_3nivel_instructor(self):
        titulo_instructor = self.titulo_instructor()
        if titulo_instructor != '':
            if titulo_instructor.titulo.nivel.rango > 5:
                return titulo_instructor.persona.titulacion_set.filter(
                    titulo__nivel__rango=titulo_instructor.titulo.nivel.rango - 1).order_by('-fechaobtencion')[0]
        return None

    def notas_por_instructor(self):
        return self.capnotaipec_set.filter(status=True)

    def modelo_sin_utilizar(self):
        return CapModeloEvaluativoTareaIpec.objects.filter(Q(principal=True) | Q(evaluacion=True)).exclude(
            pk__in=[modelo.id for modelo in self.unido_modelo_evaluativo_evaluativo_utilizado()]).order_by(
            'fecha_creacion')

    def modelo_evaluativo_utilizado_sin_evaluacion(self):
        return CapModeloEvaluativoTareaIpec.objects.filter(capnotaipec__instructor=self, evaluacion=False).order_by(
            'fecha_creacion')

    def modelo_evaluativo_utilizado_evaluacion(self):
        return CapModeloEvaluativoTareaIpec.objects.filter(capnotaipec__instructor=self, evaluacion=True).order_by(
            'fecha_creacion')

    def unido_modelo_evaluativo_evaluativo_utilizado(self):
        return list(
            chain(self.modelo_evaluativo_utilizado_sin_evaluacion(), self.modelo_evaluativo_utilizado_evaluacion()))

    def contar_unido_modelo_evaluativo_evaluativo_utilizado(self):
        return self.modelo_evaluativo_utilizado_sin_evaluacion().count() + self.modelo_evaluativo_utilizado_evaluacion().count()

    def extaer_notatotal(self, inscrito):
        return null_to_decimal(
            CapDetalleNotaIpec.objects.filter(inscrito=inscrito, cabeceranota__instructor=self).aggregate(
                total=Sum('nota'))['total'], 2)

    def extraer_promediocurso(self):
        nota = 0
        c = 0
        for inscrito in CapDetalleNotaIpec.objects.values_list('inscrito_id', flat=False).filter(
                cabeceranota__instructor=self).order_by("inscrito_id").distinct("inscrito_id"):
            nota = nota + null_to_decimal(
                CapDetalleNotaIpec.objects.filter(inscrito_id=inscrito[0], cabeceranota__instructor=self).aggregate(
                    total=Sum('nota'))['total'], 2)
            c = c + 1
        return null_to_decimal((nota / c), 2)

    def notatotal_requerido(self, inscrito):
        notatotal = self.extaer_notatotal(inscrito)
        return notatotal >= self.capeventoperiodo.minnota

    def perfilusuario_instructor(self):
        from sga.models import PerfilUsuario
        if PerfilUsuario.objects.filter(instructor__instructor=self.instructor, instructor__activo=True).exists():
            if self.instructorprincipal:
                return self.perfilusuario_set.filter(instructor__isnull=False, instructor__instructorprincipal=True)
        return None

    def tiene_perfilusuario(self):
        from sga.models import PerfilUsuario
        return PerfilUsuario.objects.filter(instructor__instructor=self.instructor).exists()

    def crear_eliminar_perfil_instructor(self, activarperfil):
        # CREAR PERFIL
        if activarperfil:
            if not self.perfilusuario_instructor() and self.instructorprincipal:
                self.instructor.crear_perfil(instructor=self)
                self.save()
        # ADICIONAR A GRUPOS
        grupo = Group.objects.get(id=variable_valor('INSTRUCTOR_GROUP_ID'))
        if activarperfil:
            if not self.instructor.en_grupo(grupo.id):
                grupo.user_set.add(self.instructor.usuario)
                grupo.save()
        elif self.instructor.en_grupo(grupo.id):
            grupo.user_set.remove(self.instructor.usuario)

    def tiene_asistencia_calificacion(self):
        if self.capclaseipec_set.filter(status=True).exists() or self.capnotaipec_set.all().exists():
            return True
        return False

    def modelo_calificacion(self, eventoperiodo):
        return self.capnotaipec_set.values_list('id', 'modelo__nombre', 'modelo__notaminima', 'modelo__notamaxima',
                                                flat=False).filter \
            (status=True, instructor__capeventoperiodo=eventoperiodo, modelo__principal=True).order_by('pk')

    def modelo_calificacion_abreviado(self, eventoperiodo):
        lista = []
        for m in self.modelo_calificacion(eventoperiodo):
            inicial = ''
            ss = m[1].split(' ')
            if len(ss) == 1:
                inicial = ss[0][0] + ss[0][1]
            elif len(ss) == 2:
                inicial = ss[0][0] + ss[1][0]
            elif len(ss) == 3:
                inicial = ss[0][0] + ss[2][0]
            lista.append([m[0], inicial, m[1], m[2], m[3]])
        return lista

    def turnos_clase_ipec(self, dia, turno):
        clases = CapClaseIpec.objects.filter(dia=dia, turno=turno, status=True, instructor__instructor=self.instructor,
                                             fechafin__gte=datetime.now().date())
        return clases

    def clase_actuales_ipec(self, dia, turno):
        return CapClaseIpec.objects.filter(dia=dia, turno=turno, status=True, instructor__instructor=self.instructor,
                                           fechafin__gte=datetime.now().date(), fechainicio__lte=datetime.now().date())

    def clase_futuras_ipec(self, dia, turno):
        return CapClaseIpec.objects.filter(dia=dia, turno=turno, status=True, instructor__instructor=self.instructor,
                                           fechainicio__gt=datetime.now().date())

    def estado_perfil(self):
        return CapInstructorIpec.objects.filter(instructor=self.instructor, activo=True).exists()

    def save(self, *args, **kwargs):
        self.nombrecurso = self.nombrecurso.upper().strip()
        super(CapInstructorIpec, self).save(*args, **kwargs)

    def crear_actualizar_estudiantes_cursogrupoex(self, moodle):
        #################################################################################################################
        # AGREGAR ESTUDIANTE
        #################################################################################################################
        from sga.funciones import log
        try:
            # if self.idcursomoodle:
            contador = 0
            cursoid = 3
            # cursoid = self.idcursomoodle
            for estudiante in self.integrantegrupoexamenmsc_set.filter(status=True):
                contador += 1
                persona = estudiante.inscripcion.inscripcionaspirante.persona
                idnumber_user = persona.identificacion()
                bestudiante = moodle.BuscarUsuario('idnumber', 1, idnumber_user)
                estudianteid = 0

                bestudiante = moodle.CrearUsuario(u'%s' % persona.usuario.username,
                                                  u'%s' % persona.identificacion(),
                                                  u'%s %s' % (persona.apellido1, persona.apellido2),
                                                  u'%s' % persona.nombres,
                                                  u'%s' % persona.email,
                                                  idnumber_user,
                                                  u'%s' % persona.canton.nombre if persona.canton else '',
                                                  u'%s' % persona.pais.nombre if persona.pais else '')
                # estudianteid = bestudiante[0]['id']
                if estudianteid > 0:
                    rolest = moodle.EnrolarCurso(5, 1, estudianteid, cursoid)
                    if persona.idusermoodle != estudianteid:
                        persona.idusermoodle = estudianteid
                        persona.save()
                print('************Estudiante: %s *** %s' % (contador, persona))
            # self.quitar_estudiantes_curso(moodle)
        except Exception as ex:
            log(u'Moodle Error al crear Estudiante: %s' % persona, None, "add", User.objects.get(pk=1))
            print('Error al crear estudiante %s' % ex)

    def crear_actualizar_instructor_curso(self, moodle, tipourl):
        #################################################################################################################
        # AGREGAR DOCENTE
        #################################################################################################################
        from sga.models import Profesor
        try:
            if self.idcursomoodle:
                cursoid = self.idcursomoodle
                periodo = self.capeventoperiodo.periodo
                if self.quitar_docente_grupo(moodle, tipourl):
                    instructor = self.instructor
                    if instructor and instructor.usuario and not 'POR DEFINIR' in instructor.nombres:
                        persona = instructor
                        username = instructor.usuario.username
                        bprofesor = moodle.BuscarUsuario(periodo, tipourl, 'username', username)
                        profesorid = 0
                        if not bprofesor:
                            bprofesor = moodle.BuscarUsuario(periodo, tipourl, 'username', username)

                        if bprofesor['users']:
                            if 'id' in bprofesor['users'][0]:
                                profesorid = bprofesor['users'][0]['id']
                        else:
                            idnumber_user = persona.identificacion()
                            notuser = moodle.BuscarUsuario(periodo, tipourl, 'idnumber', idnumber_user)
                            if not notuser:
                                notuser = moodle.BuscarUsuario(periodo, tipourl, 'idnumber', idnumber_user)

                            bprofesor = moodle.CrearUsuario(periodo, tipourl, u'%s' % persona.usuario.username,
                                                            u'%s' % persona.identificacion(),
                                                            u'%s' % persona.nombres,
                                                            u'%s %s' % (persona.apellido1, persona.apellido2),
                                                            u'%s' % persona.emailinst,
                                                            idnumber_user,
                                                            u'%s' % persona.canton.nombre if persona.canton else '',
                                                            u'%s' % persona.pais.nombre if persona.pais else '')
                            profesorid = bprofesor[0]['id']

                        if profesorid > 0:
                            rolest = moodle.EnrolarCurso(periodo, tipourl, 9, profesorid, cursoid)
                            if persona.idusermoodleposgrado != profesorid:
                                persona.idusermoodleposgrado = profesorid
                                persona.save()
                        print('**********INSTRUCTOR: %s' % instructor)
        except Exception as ex:
            print('Error al crear docente %s' % ex)

    def quitar_docente_grupo(self, moodle, tipourl):
        from django.db import connections
        cursor = connections['moodle_pos'].cursor()
        #################################################################################################################
        # QUITAR DOCENTE
        #################################################################################################################
        if self.idcursomoodle:
            cursoid = self.idcursomoodle
            idprofesores = self.instructor.idusermoodleposgrado

            query = """SELECT DISTINCT enrol.userid, asi.roleid from mooc_user_enrolments enrol 
                        inner join mooc_role_assignments asi on asi.userid=enrol.userid and asi.roleid in(%s) 
                        where enrol.enrolid in(select en.id from mooc_enrol en where en.courseid=%s) 
                        AND enrol.userid not in(%s0) """ % (9, cursoid, idprofesores)
            cursor.execute(query)
            row = cursor.fetchall()
            if row:
                for deluser in row:
                    unrolest = moodle.UnEnrolarCurso(self.nombrecurso, tipourl, deluser[1], deluser[0], cursoid)
                    print('************ Eliminar Profesor: *** %s' % deluser[0])
        return True

    def crear_actualizar_estudiantes_curso(self, moodle, tipourl, codigoinscrito, edcon=False):
        #################################################################################################################
        # AGREGAR ESTUDIANTE
        #################################################################################################################
        from sga.funciones import log, generar_usuario_sin_perfil, calculate_username
        from moodle.models import UserAuth
        periodo = self.capeventoperiodo.periodo
        if self.idcursomoodle:
            contador = 0
            cursoid = self.idcursomoodle
            estudiante = CapInscritoIpec.objects.get(pk=codigoinscrito, status=True)
            try:
                contador += 1
                bandera = 0
                usuario = None
                persona = estudiante.participante
                # if not persona.emailinst and persona.emailinst != '':
                #     persona.emailinst = persona.email
                #     persona.save()
                if persona.usuario:
                    username = persona.usuario.username
                    usuario = persona.usuario
                else:
                    username = calculate_username(persona)
                    generar_usuario_sin_perfil(persona, username)
                    if not Externo.objects.filter(status=True, persona=persona).exists():
                        externo = Externo(persona=persona,
                                          nombrecomercial='',
                                          nombrecontacto='',
                                          telefonocontacto='')
                        externo.save()
                    else:
                        externo = Externo.objects.get(status=True, persona=persona)
                    persona.crear_perfil(externo=externo)
                    persona.mi_perfil()
                    usuario = persona.usuario
                    usuario.set_password(persona.identificacion())
                    usuario.save()
                    persona.participante.clave_cambiada()
                # Registar correo institucional con el usuario
                if not persona.emailinst:
                    persona.emailinst = f'{persona.usuario.username}@unemi.edu.ec'
                    persona.save()
                # OK
                if not UserAuth.objects.filter(usuario=usuario).exists():
                    usermoodle = UserAuth(usuario=usuario)
                    usermoodle.set_data()
                    usermoodle.set_password(persona.identificacion())
                    usermoodle.save()
                else:
                    usermoodle = UserAuth.objects.filter(usuario=usuario).first()
                    usermoodle.set_data()
                    usermoodle.save()
                bestudiante = moodle.BuscarUsuario(periodo, tipourl, 'username', username)
                estudianteid = 0
                if not bestudiante:
                    bestudiante = moodle.BuscarUsuario(periodo, tipourl, 'username', username)

                if bestudiante['users']:
                    if 'id' in bestudiante['users'][0]:
                        estudianteid = bestudiante['users'][0]['id']
                else:
                    idnumber_user = persona.identificacion()
                    notuser = moodle.BuscarUsuario(periodo, tipourl, 'idnumber', idnumber_user)
                    if not notuser:
                        notuser = moodle.BuscarUsuario(periodo, tipourl, 'idnumber', idnumber_user)

                    bestudiante = moodle.CrearUsuario(periodo, tipourl, u'%s' % persona.usuario.username,
                                                      u'%s' % persona.identificacion(),
                                                      u'%s' % persona.nombres,
                                                      u'%s %s' % (persona.apellido1, persona.apellido2),
                                                      u'%s' % persona.emailinst if (
                                                                  persona.emailinst and persona.emailinst != '') else persona.email,
                                                      idnumber_user,
                                                      u'%s' % persona.canton.nombre if persona.canton else '',
                                                      u'%s' % persona.pais.nombre if persona.pais else '')
                    estudianteid = bestudiante[0]['id']
                if estudianteid > 0:
                    rolest = moodle.EnrolarCurso(periodo, tipourl, 10, estudianteid, cursoid)
                    if persona.idusermoodleposgrado != estudianteid:
                        persona.idusermoodleposgrado = estudianteid
                        persona.save()
                    print('************Estudiante: %s *** %s' % (contador, persona))
            except Exception as ex:
                log(u'Moodle Error al crear Estudiante: %s' % persona, None, "add", User.objects.get(pk=1))
                print('Error al crear estudiante %s' % ex)

    def crear_actualizar_categoria_notas_curso(self):
        from django.db import connections
        cursor = connections['moodle_pos'].cursor()
        #################################################################################################################
        # AGREGAR SISTEMA DE CALIFICACION
        #################################################################################################################
        if self.idcursomoodle:
            cursoid = self.idcursomoodle
            modelonotas = self.unido_modelo_evaluativo_evaluativo_utilizado()
            if modelonotas:
                query = u"SELECT id FROM mooc_grade_categories WHERE parent is null and depth=1 and courseid= %s" % cursoid
                cursor.execute(query)
                row = cursor.fetchall()
                padrenota = 0
                fecha = int(time.mktime(datetime.now().date().timetuple()))
                if not row:
                    query = u"INSERT INTO mooc_grade_categories(courseid, parent, depth, path, fullname, aggregation, keephigh, droplow, aggregateonlygraded, hidden, timecreated, timemodified) VALUES (%s, null, 1, E'', E'?', 13, 0, 0, 0, 0, %s, %s)" % (
                    cursoid, fecha, fecha)
                    cursor.execute(query)
                    query = u"SELECT id FROM mooc_grade_categories WHERE parent is null and depth=1 and courseid= %s" % cursoid
                    cursor.execute(query)
                    row = cursor.fetchall()
                    query = u"UPDATE mooc_grade_categories SET path='/%s/' WHERE id= %s" % (row[0][0], row[0][0])
                    cursor.execute(query)
                    padrenota = row[0][0]
                else:
                    padrenota = row[0][0]
                if padrenota > 0:
                    ordennota = 1
                    query = u"SELECT id FROM mooc_grade_items WHERE courseid=%s and itemtype='course' and iteminstance=%s" % (
                    cursoid, padrenota)
                    cursor.execute(query)
                    row = cursor.fetchall()
                    if not row:
                        query = u"INSERT INTO mooc_grade_items (courseid, categoryid, itemname, itemtype, itemmodule, iteminstance, itemnumber, iteminfo, idnumber, calculation, gradetype, grademax, grademin, scaleid, outcomeid, gradepass, multfactor, plusfactor, aggregationcoef, aggregationcoef2, sortorder, display, decimals, hidden, locked, locktime, needsupdate, weightoverride, timecreated, timemodified) VALUES (%s, null, null, E'course', null, %s, null, null, null, null, 1, 100, 0, null, null, 0, 1, 0, 0, 0, %s, 0, 2, 0, 0, 0, 0, 0, %s, %s)" % (
                        cursoid, padrenota, ordennota, fecha, fecha)
                        cursor.execute(query)

                    for modelo in modelonotas:
                        query = u"SELECT id FROM mooc_grade_categories WHERE parent=%s and depth=2 and courseid= %s and fullname='%s'" % (
                        padrenota, cursoid, modelo.nombre)
                        cursor.execute(query)
                        row = cursor.fetchall()
                        padremodelo = 0
                        if not row:
                            query = u"INSERT INTO mooc_grade_categories(courseid, parent, depth, path, fullname, aggregation, keephigh, droplow, aggregateonlygraded, hidden, timecreated, timemodified) VALUES (%s, %s, 2, E'', E'%s', 0, 0, 0, 0, 0, %s, %s)" % (
                            cursoid, padrenota, modelo.nombre, fecha, fecha)
                            cursor.execute(query)
                            query = u"SELECT id FROM mooc_grade_categories WHERE parent=%s and depth=2 and courseid= %s and fullname='%s'" % (
                            padrenota, cursoid, modelo.nombre)
                            cursor.execute(query)
                            row = cursor.fetchall()
                            padremodelo = row[0][0]
                            query = u"UPDATE mooc_grade_categories SET path='/%s/%s/' WHERE id= %s" % (
                            padrenota, padremodelo, padremodelo)
                            cursor.execute(query)
                        else:
                            padremodelo = row[0][0]
                        if padremodelo > 0:
                            ordennota += 1
                            query = u"SELECT id FROM mooc_grade_items WHERE courseid=%s and itemtype='category' and iteminstance=%s" % (
                            cursoid, padremodelo)
                            cursor.execute(query)
                            row = cursor.fetchall()
                            if not row:
                                query = u"INSERT INTO mooc_grade_items (courseid, categoryid, itemname, itemtype, itemmodule, iteminstance, itemnumber, iteminfo, idnumber, calculation, gradetype, grademax, grademin, scaleid, outcomeid, gradepass, multfactor, plusfactor, aggregationcoef, aggregationcoef2, sortorder, display, decimals, hidden, locked, locktime, needsupdate, weightoverride, timecreated, timemodified) " \
                                        u"VALUES (%s, null, E'', E'category', null, %s, null, E'', E'', null, 1, %s, 0, null, null, 0, 1, 0, 0, %s, %s, 0, %s, 0, 0, 0, 0, 0, %s, %s)" \
                                        % (cursoid, padremodelo, modelo.notamaxima,
                                           null_to_decimal(modelo.notamaxima / 100, 2), ordennota, 2, fecha, fecha)
                                cursor.execute(query)

    def crear_curso_moodle(self, codigoinscritogrupoexamen, contadoringreso, edcon=False):
        from django.db import connections
        from moodle import moodle
        from sga.models import Coordinacion
        cursor = connections['moodle_pos'].cursor()
        #################################################################################################################
        #################################################################################################################
        # servidor
        AGREGAR_MODELO_NOTAS = True
        AGREGAR_ESTUDIANTE = True
        AGREGAR_DOCENTE = True

        parent_grupoid = 0
        tipourl = 1
        periodo = self.capeventoperiodo.periodo
        curso = self.capeventoperiodo
        bgrupo = moodle.BuscarCategoriasid(periodo, tipourl, 55)
        if bgrupo:
            if 'id' in bgrupo[0]:
                parent_grupoid = bgrupo[0]['id']
        contador = 0

        if parent_grupoid >= 0:
            if contadoringreso == 0:
                """"
                CREANDO EL PERIODO DE CURSO EL ID SE CONFIGURA EN VARIABLES GLOBALES
                """
                bperiodo = moodle.BuscarCategorias(periodo, tipourl, periodo.idnumber())
                parent_periodoid = 0
                if bperiodo:
                    if 'id' in bperiodo[0]:
                        parent_periodoid = bperiodo[0]['id']
                else:
                    bperiodo = moodle.CrearCategorias(periodo, tipourl, periodo.nombre, periodo.idnumber(),
                                                      periodo.nombre, parent=parent_grupoid)
                    parent_periodoid = bperiodo[0]['id']
                if parent_periodoid > 0:
                    """"
                    CREANDO CURSO IPEC
                    """
                    idnumber_curso = u'%s-CUR%s' % (periodo.idnumber(), curso.id)
                    bcurso = moodle.BuscarCategorias(periodo, tipourl, idnumber_curso)
                    parent_cursoid = 0
                    if bcurso:
                        if 'id' in bcurso[0]:
                            parent_cursoid = bcurso[0]['id']
                    else:
                        bcurso = moodle.CrearCategorias(periodo, tipourl, curso.capevento.nombre, idnumber_curso, curso,
                                                        parent=parent_periodoid)
                        parent_cursoid = bcurso[0]['id']
                    if parent_cursoid > 0:
                        """"
                        CREANDO EL INSTRUCTOR
                        """
                        if self.codigonumber:
                            idnumber_instructor = self.codigonumber
                        else:
                            idnumber_instructor = u'%s-CUR%s-INS%s' % (periodo.idnumber(), curso.id, self.id)
                        binstructor = moodle.BuscarCursos(periodo, tipourl, 'idnumber', idnumber_instructor)
                        if not binstructor:
                            binstructor = moodle.BuscarCursos(periodo, tipourl, 'idnumber', idnumber_instructor)
                        numsections = 1
                        summary = u''
                        startdate = int(time.mktime(curso.fechainicio.timetuple()))
                        enddate = int(time.mktime(curso.fechafin.timetuple()))
                        instructorid = 0
                        if binstructor['courses']:
                            if 'id' in binstructor['courses'][0]:
                                instructorid = binstructor['courses'][0]['id']
                        else:
                            binstructor = moodle.CrearCursos(periodo, tipourl, u'%s' % self.nombrecurso,
                                                             u'INS-%s-[%s]' % (str(curso.fechainicio), self.id),
                                                             parent_cursoid, idnumber_instructor, summary, startdate,
                                                             enddate, numsections)
                            instructorid = binstructor[0]['id']
                        if instructorid > 0:
                            if self.idcursomoodle != instructorid:
                                self.codigonumber = idnumber_instructor
                                self.idcursomoodle = instructorid
                                self.save()
                            if AGREGAR_MODELO_NOTAS:
                                self.crear_actualizar_categoria_notas_curso()

                            if AGREGAR_DOCENTE:
                                self.crear_actualizar_instructor_curso(moodle, 1)

                            if AGREGAR_ESTUDIANTE:
                                self.crear_actualizar_estudiantes_curso(moodle, 1, codigoinscritogrupoexamen, edcon=True)
            else:
                if AGREGAR_ESTUDIANTE:
                    self.crear_actualizar_estudiantes_curso(moodle, 1, codigoinscritogrupoexamen, edcon=True)

    def categorias_moodle_curso(self):
        from django.db import connections
        cursor = connections['moodle_pos'].cursor()
        sql = """select DISTINCT upper(gc.fullname),it.sortorder  from mooc_grade_grades nota 
                 inner join mooc_grade_items it on nota.itemid=it.id and courseid=%s and itemtype='category' 
                 inner join mooc_grade_categories gc on gc.courseid=it.courseid and gc.id=it.iteminstance and gc.depth=2 
                 where not upper(gc.fullname)='RE'
                 order by it.sortorder ;
                """ % str(self.idcursomoodle)
        cursor.execute(sql)
        results = cursor.fetchall()
        return results

    def categorias_moodle_curso_count(self):
        from django.db import connections
        cursor = connections['moodle_pos'].cursor()
        sql = "select count(contar.fullname) from(select DISTINCT gc.fullname,it.sortorder  from mooc_grade_grades nota " \
              " inner join mooc_grade_items it on nota.itemid=it.id and courseid=" + str(
            self.idcursomoodle) + " and itemtype='category' " \
                                  " inner join mooc_grade_categories gc on gc.courseid=it.courseid and gc.id=it.iteminstance and gc.depth=2 order by it.sortorder) as contar ;"
        cursor.execute(sql)
        results = cursor.fetchall()
        return results

    def notas_de_moodle(self, persona):
        from django.db import connections
        cursor = connections['moodle_pos'].cursor()
        sql = """
                        SELECT ROUND(nota.finalgrade,2), UPPER(gc.fullname)
                                FROM mooc_grade_grades nota
                        INNER JOIN mooc_grade_items it ON nota.itemid=it.id AND courseid=%s AND itemtype='category'
                        INNER JOIN mooc_grade_categories gc ON gc.courseid=it.courseid AND gc.id=it.iteminstance AND gc.depth=2
                        INNER JOIN mooc_user us ON nota.userid=us.id
                        WHERE us.id ='%s' and not UPPER(gc.fullname)='RE'
                        ORDER BY it.sortorder
                        """ % (str(self.idcursomoodle), persona.idusermoodleposgrado)

        cursor.execute(sql)
        results = cursor.fetchall()
        return results


class CapClaseIpec(ModeloBase):
    from sga.models import DIAS_CHOICES
    capeventoperiodo = models.ForeignKey(CapEventoPeriodoIpec, verbose_name=u'Evento', on_delete=models.CASCADE)
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u'Fecha Inicial')
    fechafin = models.DateField(blank=True, null=True, verbose_name=u'Fecha Fin')
    turno = models.ForeignKey(CapTurnoIpec, verbose_name=u'Turno', on_delete=models.CASCADE)
    dia = models.IntegerField(choices=DIAS_CHOICES, default=0, verbose_name=u'Dia')
    instructor = models.ForeignKey(CapInstructorIpec, blank=True, null=True, verbose_name=u'Evento',
                                   on_delete=models.CASCADE)

    def __str__(self):
        return u'%s - %s - [%s - %s]' % (
        self.get_dia_display(), self.turno, self.fechainicio.strftime('%d-%m-%Y'), self.fechafin.strftime('%d-%m-%Y'))

    class Meta:
        verbose_name = u"Clase de Evento Capacitaci√≥n"
        verbose_name_plural = u"Clase de Evento Capacitaci√≥n"

    def fechas_horarios(self):
        return self.fechainicio.strftime('%d-%m-%Y') + " al " + self.fechafin.strftime('%d-%m-%Y')

    def tiene_clase_abierta(self):
        return True if self.capcabeceraasistenciaipec_set.filter(fecha=datetime.now().date(),
                                                                 status=True).exists() else False

    def clase_disponible_ipec(self):
        dia = dia_semana_ennumero_fecha(datetime.now().date()) - 1
        if self.fechainicio <= datetime.now().date() and self.fechafin >= datetime.now().date() and self.dia == dia:
            return True
        return False

    def clase_abierta_ipec(self):
        return self.capcabeceraasistenciaipec_set.filter(status=True, fecha=datetime.now().date()).exists()

    def extraer_contenido_clase_activa(self):
        contenido = None
        if CapCabeceraAsistenciaIpec.objects.filter(clase__isnull=False, clase_id=self.id).exists():
            contenido = CapCabeceraAsistenciaIpec.objects.filter(clase__isnull=False, clase_id=self.id)[0].contenido
        return contenido

    def cargo_instructor(self):
        puestoinstructor = None
        puesto = DistributivoPersona.objects.filter(persona=self.instructor, estadopuesto__id=PUESTO_ACTIVO_ID,
                                                    status=True).exists()
        if puesto.exists():
            puestoinstructor = puesto[0]
        return puestoinstructor

    def total_asistencia_activa_abierta(self):
        return self.capcabeceraasistenciaipec_set.filter(fecha=datetime.now().date(), status=True)[
            0].total_asistieron() if self.capcabeceraasistenciaipec_set.filter(fecha=datetime.now().date(),
                                                                               status=True).exists() else 0

    def save(self, *args, **kwargs):
        super(CapClaseIpec, self).save(*args, **kwargs)


TIPO_PARTICIPANTE_INSCRIBIR = (
    (1, u'INTERNO'),
    (2, u'EXTERNO')
)


class CapRegistrarDatosInscritoIpec(ModeloBase):
    persona = models.ForeignKey('sga.Persona', null=True, blank=True, verbose_name=u'Persona', on_delete=models.CASCADE)
    lugarestudio = models.CharField(null=True, blank=True, max_length=400, verbose_name=u"Lugar de estudio")
    carrera = models.CharField(null=True, blank=True, max_length=400, verbose_name=u"Carrera")
    profesion = models.CharField(null=True, blank=True, max_length=400, verbose_name=u"Profesion")
    institucionlabora = models.CharField(null=True, blank=True, max_length=400,
                                         verbose_name=u"Institucion donde labora")
    cargodesempena = models.CharField(null=True, blank=True, max_length=400, verbose_name=u"Cargo que desempe√±a")
    esparticular = models.BooleanField(default=True, verbose_name=u"Es Particular?")

    def __str__(self):
        return u'%s - %s - %s' % (self.carrera, self.profesion, self.cargodesempena)

    class Meta:
        verbose_name = u"Registro de datos de inscripcion"
        verbose_name_plural = u"Registros de datos de inscripciones"
        ordering = ['persona']

    def save(self, *args, **kwargs):
        if self.lugarestudio:
            self.lugarestudio = self.lugarestudio.upper()
        if self.carrera:
            self.carrera = self.carrera.upper()
        if self.profesion:
            self.profesion = self.profesion.upper()
        if self.institucionlabora:
            self.institucionlabora = self.institucionlabora.upper()
        if self.cargodesempena:
            self.cargodesempena = self.cargodesempena.upper()
        super(CapRegistrarDatosInscritoIpec, self).save(*args, **kwargs)


class CapCabeceraAsistenciaIpec(ModeloBase):
    clase = models.ForeignKey(CapClaseIpec, blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'fecha')
    horaentrada = models.TimeField(verbose_name=u'Hora entrada')
    horasalida = models.TimeField(blank=True, null=True, verbose_name=u'Hora salida')
    contenido = models.TextField(default='', verbose_name=u'Tema y Subtema')
    observaciones = models.TextField(default='', verbose_name=u'Observaciones')

    def __str__(self):
        return u'%s %s' % (self.clase, self.fecha)

    def total_asistieron(self):
        return self.capdetalleasistenciaipec_set.filter(asistio=True, status=True).count()

    def total_inscritos(self):
        return self.capdetalleasistenciaipec_set.filter(status=True).count()

    def total_sin_asistencia(self):
        return self.capdetalleasistenciaipec_set.filter(status=True, asistio=False).count()

    def porciento_asistencia_ipec(self):
        return round((self.total_asistieron() * 100) / self.total_inscritos(), 0)

    def listado_con_asistencia(self):
        return self.capdetalleasistenciaipec_set.filter(status=True, asistio=True)

    def tiene_todos_asistencia(self):
        if self.total_sin_asistencia() == 0 and self.total_inscritos() == self.clase.capeventoperiodo.contar_inscripcion_evento_periodo:
            return True
        else:
            return False

    def clase_disponible(self):
        return self.fecha == datetime.now().date()

    def puede_eliminar(self):
        return True if self.clase.capeventoperiodo.fechafin > datetime.now().date() else False

    def save(self, *args, **kwargs):
        super(CapCabeceraAsistenciaIpec, self).save(*args, **kwargs)


class CapDetalleAsistenciaIpec(ModeloBase):
    cabeceraasistencia = models.ForeignKey(CapCabeceraAsistenciaIpec, blank=True, null=True, on_delete=models.CASCADE)
    inscrito = models.ForeignKey(CapInscritoIpec, blank=True, null=True, on_delete=models.CASCADE)
    asistio = models.BooleanField(default=False, verbose_name=u"Estado Asistencia")

    def __str__(self):
        return u'%s %s' % (self.cabeceraasistencia, self.inscrito)

    def save(self, *args, **kwargs):
        super(CapDetalleAsistenciaIpec, self).save(*args, **kwargs)


class CapModeloEvaluativoTareaIpec(ModeloBase):
    nombre = models.CharField(default='', max_length=500, verbose_name=u"Nombre")
    notamaxima = models.FloatField(default=0, verbose_name=u'Nota maxima')
    notaminima = models.FloatField(default=0, verbose_name=u'Nota para aprobar')
    principal = models.BooleanField(default=False, verbose_name=u"Principal")
    evaluacion = models.BooleanField(default=False, verbose_name=u"Es Evaluacion")

    def __str__(self):
        return u'%s (%s a %s)' % (self.nombre, self.notaminima.__str__(), self.notamaxima.__str__())

    def extraer_capnotasipec(self, instructor):
        return self.capnotaipec_set.filter(status=True, instructor=instructor)

    class Meta:
        verbose_name = u"Modelo evaluativo IPEC"
        verbose_name_plural = u"Modelos evaluativos IPEC"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(CapModeloEvaluativoTareaIpec, self).save(*args, **kwargs)


class CapModeloEvaluativoGeneral(ModeloBase):
    modelo = models.ForeignKey(CapModeloEvaluativoTareaIpec, blank=True, null=True, verbose_name=u'Modelo Evaluativo',
                               on_delete=models.CASCADE)
    orden = models.IntegerField(default='0', verbose_name=u"Orden")

    def __str__(self):
        return u'%s - %s' % (self.orden, self.modelo)


class CapNotaIpec(ModeloBase):
    modelo = models.ForeignKey(CapModeloEvaluativoTareaIpec, blank=True, null=True, verbose_name=u'Modelo Evaluativo',
                               on_delete=models.CASCADE)
    fecha = models.DateField(blank=True, null=True, verbose_name=u'fecha')
    instructor = models.ForeignKey(CapInstructorIpec, blank=True, null=True, verbose_name=u'Instructor',
                                   on_delete=models.CASCADE)

    def __str__(self):
        return u'%s - %s - %s' % (self.instructor.capeventoperiodo, self.modelo.nombre, self.instructor)

    def contar_calificados(self):
        return self.capdetallenotaipec_set.values('id').filter(status=True, nota__isnull=False).count()

    def existen_calificados(self):
        return self.capdetallenotaipec_set.values('id').filter(status=True, nota__isnull=False).exists()

    def extraer_detallenotaipec(self, inscrito):
        if self.capdetallenotaipec_set.filter(status=True, inscrito=inscrito).exists():
            return self.capdetallenotaipec_set.filter(status=True, inscrito=inscrito)[0]
        return None

    def save(self, *args, **kwargs):
        super(CapNotaIpec, self).save(*args, **kwargs)


class CapDetalleNotaIpec(ModeloBase):
    cabeceranota = models.ForeignKey(CapNotaIpec, blank=True, null=True, on_delete=models.CASCADE)
    inscrito = models.ForeignKey(CapInscritoIpec, blank=True, null=True, on_delete=models.CASCADE)
    nota = models.FloatField(blank=True, null=True, verbose_name=u'nota')
    observacion = models.CharField(max_length=200, default='', verbose_name=u'Nombre')

    def __str__(self):
        return u'%s %s' % (self.cabeceranota, self.inscrito)

    class Meta:
        verbose_name = u"Detalle de nota"
        verbose_name_plural = u"Detalles de notas"
        ordering = ['inscrito']

    def save(self, *args, **kwargs):
        super(CapDetalleNotaIpec, self).save(*args, **kwargs)


# Edificios
class CondicionBien(ModeloBase):
    nombre = models.CharField(default='', max_length=10, verbose_name=u"Nombre")
    descripcion = models.TextField(default='', verbose_name=u"Nombre")
    estado = models.BooleanField(default=True, verbose_name=u"Estado")

    def __str__(self):
        return u'%s' % self.nombre

    def esta_activo(self):
        return True if self.edificio_set.all().exists() else False

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        super(CondicionBien, self).save(*args, **kwargs)


class EstadoBien(ModeloBase):
    nombre = models.CharField(default='', max_length=10, verbose_name=u"Nombre")
    descripcion = models.TextField(default='', verbose_name=u"Nombre")
    estado = models.BooleanField(default=True, verbose_name=u"Estado")

    def __str__(self):
        return u'%s' % self.nombre

    def esta_activo(self):
        return True if self.edificio_set.all().exists() else False

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        super(EstadoBien, self).save(*args, **kwargs)


class Edificio(ModeloBase):
    codigobien = models.CharField(default='', max_length=50, verbose_name=u"C√≥digo del Bien")
    codigoanterior = models.CharField(default='', max_length=50, verbose_name=u"C√≥digo Anterior")
    catalogo = models.ForeignKey(CatalogoBien, blank=True, null=True, verbose_name=u"Cat√°logo",
                                 on_delete=models.CASCADE)
    identificador = models.CharField(default='', max_length=50, verbose_name=u"Identificador")
    identificacion = models.ForeignKey(Bloque, blank=True, null=True, verbose_name=u"Identificaci√≥n",
                                       on_delete=models.CASCADE)
    caracteristica = models.CharField(default='', max_length=200, verbose_name=u"Caracteristica")
    critico = models.BooleanField(default=False, verbose_name=u"Cr√≠tico")
    valorcompra = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor de compra")
    propietario = models.CharField(default='', max_length=200, verbose_name=u"Propietario registrado en el Municipio")
    clavecatastral = models.CharField(default='', max_length=50, verbose_name=u"Clave Catastral")
    numeropredio = models.CharField(default='', max_length=20, verbose_name=u"N¬∫ Prebio")
    numeropiso = models.IntegerField(default=0, blank=True, null=True, verbose_name=u"N¬∫ Piso")
    areaconstruccion = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                           verbose_name=u"√Årea de Construcci√≥n")
    numeroescritura = models.CharField(default='', max_length=50, verbose_name=u"N¬∫ Escritura")
    fechaescritura = models.DateField(blank=True, null=True, verbose_name=u"Fecha de Escritura")
    notaria = models.CharField(default='', max_length=50, verbose_name=u"Notar√≠a")
    condicionbien = models.ForeignKey(CondicionBien, blank=True, null=True, verbose_name=u"Condici√≥n del Bien",
                                      on_delete=models.CASCADE)
    estadobien = models.ForeignKey(EstadoBien, blank=True, null=True, verbose_name=u"Estado del Bien",
                                   on_delete=models.CASCADE)
    custodio = models.ForeignKey('sga.Persona', related_name='custodioedificio', verbose_name=u"Custodio", blank=True,
                                 null=True, on_delete=models.CASCADE)
    cuentacontable = models.ForeignKey(CuentaContable, blank=True, null=True, verbose_name=u"Cuenta Contable",
                                       on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', related_name='responsableedificio', verbose_name=u"Usuario",
                                    blank=True, null=True, on_delete=models.CASCADE)
    vidautil = models.IntegerField(default=0, blank=True, null=True, verbose_name=u"Vida √ötil")
    depreciable = models.BooleanField(default=True, verbose_name=u"Depreciable")
    fechaultimadeprec = models.DateField(blank=True, null=True)
    fechafindeprec = models.DateField(blank=True, null=True)
    valorresidual = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor Residual")
    valordepreciacionacumulada = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                                     verbose_name=u"Valor Depreciaci√≥n Acumulads")
    valordepreciacionanual = models.DecimalField(max_digits=30, decimal_places=2, default=0,
                                                 verbose_name=u"Valor Depreciaci√≥n Anual")
    valorcontable = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor Contable")
    valorlibros = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor en libros")
    fechaingreso = models.DateField(blank=True, null=True, verbose_name=u"Fecha Ingreso")
    observacion = models.TextField(default='', verbose_name=u"Observaci√≥n")
    estado = models.BooleanField(default=True, verbose_name=u"Estado")

    def __str__(self):
        return u'%s %s' % (self.identificacion, self.codigobien)

    def depreciar_edificio(self, fecha, request):
        if self.estado:
            if self.depreciable:
                if self.vidautil > 0:
                    porc_residual = Decimal(0.10).quantize(Decimal('.01'))
                    self.valorresidual = (self.valorcontable * porc_residual).quantize(Decimal('.01'),
                                                                                       rounding=ROUND_HALF_UP)
                    subtotal = self.valorcontable - self.valorresidual

                    depanual = subtotal / self.vidautil
                    depdiaria = depanual / Decimal('365')
                    dias = (fecha - self.fechaingreso).days + 1
                    anios = Decimal(dias / 365.0)
                    if anios > self.vidautil:
                        self.valordepreciacionacumulada = Decimal(self.valorcontable - self.valorresidual).quantize(
                            Decimal('.01'), rounding=ROUND_HALF_UP)
                        self.valordepreciacionanual = self.valorresidual
                        diassuma = (self.vidautil * 365) - 1
                        self.fechafindeprec = self.fechaingreso + timedelta(days=diassuma)
                    else:
                        self.valordepreciacionacumulada = Decimal(depdiaria * dias).quantize(Decimal('.01'),
                                                                                             rounding=ROUND_HALF_UP)
                        self.valordepreciacionanual = Decimal(depanual).quantize(Decimal('.01'), rounding=ROUND_HALF_UP)
                        self.fechafindeprec = fecha
                    self.fechaultimadeprec = fecha
                self.valorlibros = Decimal(self.valorcontable - self.valordepreciacionacumulada).quantize(
                    Decimal('.01'), rounding=ROUND_HALF_UP)
            else:
                self.valordepreciacionacumulada = 0
                self.valordepreciacionanual = 0
                self.valorresidual = 0
            self.save(request)

    def save(self, *args, **kwargs):
        self.caracteristica = self.caracteristica.upper()
        self.propietario = self.propietario.upper()
        self.observacion = self.observacion.upper()
        self.notaria = self.notaria.upper()
        super(Edificio, self).save(*args, **kwargs)


class OtroMerito(ModeloBase):
    persona = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u'Persona', on_delete=models.CASCADE)
    nombre = models.CharField(default='', max_length=300, verbose_name=u'Nombre')
    fecha = models.DateField(blank=True, null=True, verbose_name=u"Fecha")
    institucion = models.CharField(default='', max_length=300, verbose_name=u'Instituci√≥n')
    archivo = models.FileField(upload_to='OtroMerito/%Y/%m/%d', blank=True, null=True, verbose_name=u'Evidencia')

    def __str__(self):
        return u'%s' % self.nombre

    def download_link(self):
        return self.archivo.url

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        self.institucion = self.institucion.upper()
        super(OtroMerito, self).save(*args, **kwargs)


# becas docentes
class CategoriaRubroBeca(ModeloBase):
    nombre = models.CharField(default='', max_length=300, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    def en_uso(self):
        return self.rubrobeca_set.filter(status=True).exists()

    def detallerubrobecadocente(self, becadocente):
        return RubroBeca.objects.filter(status=True, detallerubrobecadocente__status=True,
                                        detallerubrobecadocente__detallebecadocente__becadocente=becadocente,
                                        categoriarubrobeca=self).distinct()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(CategoriaRubroBeca, self).save(*args, **kwargs)


class RubroBeca(ModeloBase):
    categoriarubrobeca = models.ForeignKey(CategoriaRubroBeca, verbose_name=u"Categoria Rubro Beca",
                                           on_delete=models.CASCADE)
    nombre = models.CharField(default='', max_length=300, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s - %s' % (self.nombre, self.categoriarubrobeca)

    def en_uso(self):
        return False

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(RubroBeca, self).save(*args, **kwargs)


ESTADO_BECA = (
    (1, u'SOLICITADA'),
    (2, u'APROBADA'),
    (3, u'RECHAZADA')
)

FORMAS_PAGO = (
    (1, u'MENSUAL'),
    (2, u'BIMENSUAL'),
    (3, u'TRIMESTRAL'),
    (4, u'SEMESTRAL'),
    (5, u'ANUAL'),
)


class BecaDocente(ModeloBase):
    proyecto = models.CharField(default='', max_length=300, verbose_name=u'Proyecto')
    becario = models.ForeignKey(Persona, related_name="becario", verbose_name=u"Becario", on_delete=models.CASCADE)
    garante = models.ForeignKey(Persona, related_name="garante", verbose_name=u"garante", on_delete=models.CASCADE)
    universidad = models.ForeignKey(InstitucionEducacionSuperior, verbose_name=u"Universidad", on_delete=models.CASCADE)
    titulo = models.CharField(default='', max_length=300, verbose_name=u'Titulo')
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u"Fecha Inicio")
    fechafin = models.DateField(blank=True, null=True, verbose_name=u"Fecha Fin")
    representantelegal = models.ForeignKey(Persona, related_name="representantelegal",
                                           verbose_name=u"Representante Legal", on_delete=models.CASCADE)
    estadobeca = models.IntegerField(choices=ESTADO_BECA, verbose_name=u'Estado Beca', default=1)
    observacion = models.TextField(default='', verbose_name=u"Observaci√≥n")
    archivo = models.FileField(upload_to='archivobecadocente/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'Archivo Resolucion Beca Docente')
    archivocontrato = models.FileField(upload_to='archivobecadocente/%Y/%m/%d', blank=True, null=True,
                                       verbose_name=u'Archivo Contrato Beca Docente')
    formadepagos = models.IntegerField(choices=FORMAS_PAGO, verbose_name=u'Estado Beca', default=1)

    def __str__(self):
        return u'%s - %s - %s' % (self.proyecto, self.becario, self.get_estadobeca_display())

    def valor(self):
        return null_to_decimal((
                               DetalleRubroBecaDocente.objects.filter(detallebecadocente__becadocente=self, status=True,
                                                                      detallebecadocente__status=True).aggregate(
                                   valor=Sum('valor'))['valor']), 2) + null_to_decimal((
                                                                                       DetalleRubroBecaDocente.objects.filter(
                                                                                           detallebecadocente__becadocente=self,
                                                                                           status=True,
                                                                                           detallebecadocente__status=True).aggregate(
                                                                                           valor=Sum('valoradendum'))[
                                                                                           'valor']), 2)

    def save(self, *args, **kwargs):
        self.proyecto = self.proyecto.upper()
        self.titulo = self.titulo.upper()
        self.observacion = self.observacion.upper()
        super(BecaDocente, self).save(*args, **kwargs)


ESTADO_DETALLE_BECA = (
    (1, u'INGRESADA'),
    (2, u'LIQUIDACION-REVISION'),
    (3, u'PRESUPUESTADA')
)


class DetalleBecaDocente(ModeloBase):
    becadocente = models.ForeignKey(BecaDocente, verbose_name=u"Beca Docente", on_delete=models.CASCADE)
    mesesviaje = models.IntegerField(default=0, verbose_name=u"Meses Viaje")
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u"Fecha Inicio")
    fechafin = models.DateField(blank=True, null=True, verbose_name=u"Fecha Fin")
    estadodetallebeca = models.IntegerField(choices=ESTADO_DETALLE_BECA, verbose_name=u'Estado Beca', default=1)
    observacionliquidacion = models.TextField(default='', verbose_name=u"Observaci√≥n Liquidaci√≥n")
    archivoliquidacion = models.FileField(upload_to='archivodetallebecadocenteliquidacion/%Y/%m/%d', blank=True,
                                          null=True, verbose_name=u'Archivo Detalle Beca Docente Liquidacion')
    observacionpresupuesto = models.TextField(default='', verbose_name=u"Observaci√≥n Presupuesto")
    archivopresupuesto = models.FileField(upload_to='archivodetallebecadocentepresupuesto/%Y/%m/%d', blank=True,
                                          null=True, verbose_name=u'Archivo Detalle Beca Docente Presupuesto')
    cerrado = models.BooleanField(default=False, verbose_name=u"Cerrado")

    def __str__(self):
        return u'%s - %s' % (self.becadocente, self.mesesviaje)

    def detalle(self):
        if DetalleRubroBecaDocente.objects.filter(status=True, detallebecadocente=self).exists():
            return DetalleRubroBecaDocente.objects.filter(status=True, detallebecadocente=self)
        return None

    def subtotal(self):
        if DetalleRubroBecaDocente.objects.filter(status=True, detallebecadocente=self).exists():
            return null_to_decimal(
                DetalleRubroBecaDocente.objects.filter(status=True, detallebecadocente=self).aggregate(
                    valor=Sum('valor'))['valor'], 2) + null_to_decimal(
                DetalleRubroBecaDocente.objects.filter(status=True, detallebecadocente=self).aggregate(
                    valor=Sum('valoradendum'))['valor'], 2)
        return None

    def subtotalpagado(self):
        if DetalleRubroBecaDocente.objects.filter(status=True, detallebecadocente=self).exists():
            return null_to_decimal(
                DetalleRubroBecaDocente.objects.filter(status=True, detallebecadocente=self).aggregate(
                    valor=Sum('valorpagado'))['valor'], 2)
        return None

    def subtotalsaldo(self):
        if DetalleRubroBecaDocente.objects.filter(status=True, detallebecadocente=self).exists():
            return null_to_decimal(
                DetalleRubroBecaDocente.objects.filter(status=True, detallebecadocente=self).aggregate(
                    valor=Sum('saldo'))['valor'], 2)
        return None

    def totalvalor(self, categoriarubrobeca):
        if self.detallerubrobecadocente_set.filter(status=True,
                                                   rubrobeca__categoriarubrobeca=categoriarubrobeca).exists():
            return null_to_decimal(self.detallerubrobecadocente_set.filter(status=True,
                                                                           rubrobeca__categoriarubrobeca=categoriarubrobeca).aggregate(
                valor=Sum('valor'))['valor'], 2) + null_to_decimal(self.detallerubrobecadocente_set.filter(status=True,
                                                                                                           rubrobeca__categoriarubrobeca=categoriarubrobeca).aggregate(
                valor=Sum('valoradendum'))['valor'], 2)
        return ""

    def totalvalortotal(self, becadocente):
        if self.detallerubrobecadocente_set.filter(status=True, detallebecadocente__becadocente=becadocente).exists():
            return null_to_decimal(self.detallerubrobecadocente_set.filter(status=True,
                                                                           detallebecadocente__becadocente=becadocente).aggregate(
                valor=Sum('valor'))['valor'], 2) + null_to_decimal(self.detallerubrobecadocente_set.filter(status=True,
                                                                                                           detallebecadocente__becadocente=becadocente).aggregate(
                valor=Sum('valoradendum'))['valor'], 2)
        return ""

    def valores(self, rubrobeca):
        if self.detallerubrobecadocente_set.filter(status=True, rubrobeca=rubrobeca).exists():
            return null_to_decimal((self.detallerubrobecadocente_set.filter(status=True, rubrobeca=rubrobeca)[0].valor +
                                    self.detallerubrobecadocente_set.filter(status=True, rubrobeca=rubrobeca)[
                                        0].valoradendum), 2)
        return ""


class DetalleRubroBecaDocente(ModeloBase):
    detallebecadocente = models.ForeignKey(DetalleBecaDocente, verbose_name=u"Detalla Beca Docente",
                                           on_delete=models.CASCADE)
    rubrobeca = models.ForeignKey(RubroBeca, verbose_name=u"Rubro Beca", on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor")
    valoradendum = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor Adendum")
    valorpagado = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor Pagado")
    saldo = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Saldo")

    def __str__(self):
        return u'%s - %s - %s' % (self.detallebecadocente, self.rubrobeca, self.valor)

    def valorsumado(self):
        return self.valor + self.valoradendum

    def contar_detalle(self):
        return self.detallerubrobecadocentearchivo_set.filter(status=True).count()

    def save(self, *args, **kwargs):
        self.saldo = self.valor + self.valoradendum - self.valorpagado
        super(DetalleRubroBecaDocente, self).save(*args, **kwargs)


class DetalleRubroBecaDocenteArchivo(ModeloBase):
    nombre = models.CharField(default='', max_length=300, verbose_name=u'Nombre')
    detallerubrobecadocente = models.ForeignKey(DetalleRubroBecaDocente, verbose_name=u"Detalle Rubro Beca Docente",
                                                on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='detallerubrobecadocentearchivo/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'Detalle Rubro Beca Docente Archivo')

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(DetalleRubroBecaDocenteArchivo, self).save(*args, **kwargs)


# CAJA CHICA
class CajaChica(ModeloBase):
    descripcion = models.CharField(max_length=200, verbose_name=u'Descripcion')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor de caja chica')
    valormaximo = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                      verbose_name=u'valor m√°ximo por comprobante')
    custodio = models.ForeignKey('sga.Persona', related_name='custodio', blank=True, null=True,
                                 verbose_name=u'custodio', on_delete=models.CASCADE)
    verificador = models.ForeignKey('sga.Persona', related_name='verificador', blank=True, null=True,
                                    verbose_name=u'Verificador', on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, related_name=u'Departamento', blank=True, null=True,
                                     verbose_name=u'departamento', on_delete=models.CASCADE)

    def __str__(self):
        return u"%s - %s " % (self.descripcion, self.custodio)

    class Meta:
        verbose_name = u"Cajas Chica"
        verbose_name_plural = u"Caja Chica"
        ordering = ['descripcion', 'custodio', 'verificador']
        unique_together = ('custodio',)

    def valoraprobado(self):
        suma = null_to_decimal(SolicitudCajaChica.objects.filter(status=True, partidacajachica__cajachica=self,
                                                                 estadosolicitud=3).aggregate(valor=Sum('valor'))[
                                   'valor'])
        return suma

    def valorliquidado(self):
        suma = null_to_decimal(ComprobanteCajaChica.objects.filter(status=True, solicitudreposicion__cajachica=self,
                                                                   estadocomprobante=2).aggregate(valor=Sum('valor'))[
                                   'valor'])
        return suma

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(CajaChica, self).save(*args, **kwargs)


class PartidaCajaChica(ModeloBase):
    cajachica = models.ForeignKey('sagest.CajaChica', related_name='caja', blank=True, null=True,
                                  verbose_name=u'caja chica', on_delete=models.CASCADE)
    partida = models.ForeignKey(Partida, related_name=u'Partida', blank=True, null=True, verbose_name=u'partida',
                                on_delete=models.CASCADE)
    valorinicial = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor inicial')
    valordescontado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor descontado')
    valorcomprometido = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                            verbose_name=u'valor comprometido')
    valorsaldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor saldo')
    anioejercicio = models.ForeignKey(AnioEjercicio, related_name=u'Anioejercicio', blank=True, null=True,
                                      verbose_name=u'A√±o ejercicio', on_delete=models.CASCADE)

    def __str__(self):
        return u"%s - %s - [%s]" % (self.cajachica, self.partida, self.valorsaldo)

    def nombrecompleto(self):
        return u"%s - %s - %s - %s - [%s]" % (
        self.cajachica.descripcion, self.cajachica.custodio, self.partida.codigo, self.partida.nombre, self.valorsaldo)

    class Meta:
        verbose_name = u"Partidas de caja chica"
        verbose_name_plural = u"Partida de caja Chica"
        ordering = ['cajachica', 'partida', 'valorsaldo']

    def save(self, *args, **kwargs):
        self.valorsaldo = null_to_decimal(self.valorinicial - self.valordescontado, 2)
        super(PartidaCajaChica, self).save(*args, **kwargs)


ESTADO_CAJA_CHICA = (
    (1, u"SOLICITADO"),
    (2, u"PENDIENTE"),
    (3, u"APROBADO"),
    (4, u"RECHAZADO"),
)


class SolicitudCajaChica(ModeloBase):
    secuencia = models.IntegerField(verbose_name=u"Secuencia anual", default=0)
    solicita = models.ForeignKey('sga.Persona', on_delete=models.CASCADE)
    partidacajachica = models.ForeignKey(PartidaCajaChica, on_delete=models.CASCADE)
    fechasolicitud = models.DateField(verbose_name=u"Fecha Solicitud")
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor')
    valordescontado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor descontado')
    valorsaldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor saldo')
    concepto = models.TextField(default='', verbose_name=u"concepto")
    estadosolicitud = models.IntegerField(default=1, choices=ESTADO_CAJA_CHICA, verbose_name=u"Estado Solicitud")

    def __str__(self):
        return u"%s - %s - %s - [%s]" % (
        self.secuencia, self.solicita, self.partidacajachica.partida.nombre, self.valorsaldo)

    class Meta:
        verbose_name = u'Solicitud caja chica'
        verbose_name_plural = u'solicitudes caja chica'
        ordering = ('secuencia', 'solicita',)
        unique_together = ('secuencia',)

    def actulizar_estado(self, request):
        if self.estadosolicitud != 4:
            if self.solicitudcajachicaaprobacion_set.count() > 1:
                if self.solicitudcajachicaaprobacion_set.filter(estadosolicitud=1).count() > 1:
                    self.estadosolicitud = 3
                else:
                    self.estadosolicitud = 4
            else:
                if self.solicitudcajachicaaprobacion_set.get().estadosolicitud == 1:
                    self.estadosolicitud = 2
                else:
                    self.estadosolicitud = 4
            self.save(request)

    def save(self, *args, **kwargs):
        self.concepto = self.concepto.upper()
        self.valorsaldo = null_to_decimal(self.valor - self.valordescontado)
        super(SolicitudCajaChica, self).save(*args, **kwargs)


ESTADO_CAJA_CHICA_APROBADOR = (
    (1, u"APROBADO"),
    (2, u"RECHAZADO"),
)


class SolicitudCajaChicaAprobacion(ModeloBase):
    solicitud = models.ForeignKey(SolicitudCajaChica, on_delete=models.CASCADE)
    observacion = models.TextField(default='', verbose_name=u"Observacion")
    aprueba = models.ForeignKey('sga.Persona', on_delete=models.CASCADE)
    fechaaprobacion = models.DateField(verbose_name=u"Fecha Aprobaci√≥n")
    estadosolicitud = models.IntegerField(default=1, choices=ESTADO_CAJA_CHICA_APROBADOR,
                                          verbose_name=u"Estado Solicitud")

    def __str__(self):
        return u"Aprobador: %s, solicitante: %s, estado asignado:%s" % (
        self.aprueba, self.solicitud, self.estadosolicitud)

    def mail_notificar_jefe_departamento(self, nombresistema):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        send_html_mail("Aprobacion de permiso por Jefe de Departamento", "emails/permisojefedepartamento.html",
                       {'sistema': nombresistema, 'd': self, 't': miinstitucion()},
                       self.solicitud.solicita.lista_emails_interno(), [], cuenta=MY_CUENTAS_CORREOS[1][1])

    def mail_notificar_talento_humano(self, nombresistem):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        send_html_mail("Aprobacion de permiso por Talento Humano", "emails/permisotalentohumano.html",
                       {'sistema': nombresistem, 'd': self, 't': miinstitucion()},
                       self.solicitud.solicita.lista_emails_interno(), [], cuenta=MY_CUENTAS_CORREOS[1][1])

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(SolicitudCajaChicaAprobacion, self).save(*args, **kwargs)


ESTADO_REPOSICION_SOLICTUD = (
    (1, u"INGRESADO"),
    (2, u"SOLICITADO"),
    (3, u"PENDIENTE"),
    (4, u"APROBADO"),
    (5, u"RECHAZADO"),
)


class SolicitudReposicionCajaChica(ModeloBase):
    secuencia = models.IntegerField(verbose_name=u"Secuencia ", default=0)
    solicitudcajachica = models.ForeignKey(SolicitudCajaChica, related_name=u'solicitudcajachica', blank=True,
                                           null=True, verbose_name=u'solicitudcajachica', on_delete=models.CASCADE)
    cajachica = models.ForeignKey(CajaChica, related_name=u'cajachica', blank=True, null=True,
                                  verbose_name=u'cajachica', on_delete=models.CASCADE)
    fechasolicitud = models.DateField(verbose_name=u"Fecha Solicitud", blank=True, null=True, )
    valorreembolzar = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor reembolzar')
    valorefectivo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor efectivo')
    valortotal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor total')
    estadosolicitud = models.IntegerField(default=1, choices=ESTADO_REPOSICION_SOLICTUD,
                                          verbose_name=u"Estado Solicitud")

    def __str__(self):
        return u"%s - %s - %s" % (self.secuencia, self.fechasolicitud if self.fechasolicitud else "fecha por enviar",
                                  self.get_estadosolicitud_display())

    def resumencomprobante(self):
        suma = null_to_decimal(ComprobanteCajaChica.objects.filter(status=True, solicitudreposicion=self,
                                                                   solicitudreposicion__cajachica=self.cajachica,
                                                                   estadocomprobante=2).aggregate(valor=Sum('valor'))[
                                   'valor'])
        return suma

    def detallecomprobantes(self):
        return self.comprobantecajachica_set.filter(status=True) if self.comprobantecajachica_set.filter(
            status=True).exists() else None

    def actualizar_estado(self, request):
        if self.estadosolicitud != 5:
            if self.solicitudreposicioncajachicaaprobacion_set.count() > 1:
                if self.solicitudreposicioncajachicaaprobacion_set.filter(estadosolicitud=1).count() > 1:
                    self.estadosolicitud = 4
                else:
                    self.estadosolicitud = 5
            else:
                if self.solicitudreposicioncajachicaaprobacion_set.get().estadosolicitud == 1:
                    self.estadosolicitud = 3
                else:
                    self.estadosolicitud = 5
            self.save(request)

    def estaenfecha(self):
        hoy = datetime.now().date()
        suma = self.fechasolicitud + relativedelta(days=25)
        if hoy <= suma:
            return True

    def estaenfechadiasfaltantes(self):
        hoy = datetime.now().date()
        suma = self.fechasolicitud + relativedelta(days=25)
        resta = suma - hoy
        return resta.days

    def valoraprobado(self):
        suma = null_to_decimal(self.solicitudcajachica.valor, 2)
        return suma

    def valorliquidado(self):
        suma = null_to_decimal(
            self.comprobantecajachica_set.filter(status=True, solicitudreposicion=self, estadocomprobante=2).aggregate(
                valor=Sum('valor'))['valor'])
        return suma

    def verificarporcentajecomprobantes(self):
        # suma = null_to_decimal(ComprobanteCajaChica.objects.filter(status=True, solicitudreposicion=self,estadocomprobante=2).aggregate(valor=Sum('valor'))['valor'])
        suma = null_to_decimal(
            self.comprobantecajachica_set.filter(status=True, solicitudreposicion=self, estadocomprobante=2).aggregate(
                valor=Sum('valor'))['valor'])
        porcentaje = null_to_decimal(Decimal(self.valoraprobado()) * Decimal(0.6), 2)
        if suma >= porcentaje:
            return True
        else:
            return False

    def obtenerporcentajecomprobantes(self):
        suma = null_to_decimal(
            self.comprobantecajachica_set.filter(status=True, solicitudreposicion=self, estadocomprobante=2).aggregate(
                valor=Sum('valor'))['valor'])
        porcentaje = (suma * 100) / Decimal(self.valoraprobado())
        # porcentaje=null_to_decimal(Decimal(self.valoraprobado())*Decimal(0.6),2)
        return porcentaje

    def save(self, *args, **kwargs):
        self.valortotal = null_to_decimal(Decimal(self.valorreembolzar) + Decimal(self.valorefectivo), 2)
        super(SolicitudReposicionCajaChica, self).save(*args, **kwargs)


ESTADO_COMPROBANTE_CAJA_CHICA = (
    (1, u"INGRESADO"),
    (2, u"LIQUIDADO"),
    (3, u"VENCIDO"),
    (4, u"RECHAZADO"),
)


class ComprobanteCajaChica(ModeloBase):
    solicitudreposicion = models.ForeignKey(SolicitudReposicionCajaChica, on_delete=models.CASCADE)
    secuencia = models.IntegerField(verbose_name=u"Secuencia ", default=0)
    fechasolicitud = models.DateField(verbose_name=u"Fecha Solicitud")
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'valor')
    concepto = models.TextField(default='', verbose_name=u"concepto")
    estadocomprobante = models.IntegerField(default=1, choices=ESTADO_COMPROBANTE_CAJA_CHICA,
                                            verbose_name=u"Estado Comprobante")

    def __str__(self):
        return u"%s - %s " % (self.secuencia, self.valor)

    def estaenfecha(self):
        hoy = datetime.now().date()
        suma = self.fechasolicitud + relativedelta(days=2)
        if hoy <= suma:
            return True

    def mail_notificar_dias_faltantes(self, dias):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        send_html_mail("D√≠as faltantes para liquidar comprobante ", "emails/dias_faltantes_liquidar_comprobante.html",
                       {'sistema': u'Sistema de Gesti√≥n ', 'dias': dias, 'comprobante': self, 't': miinstitucion()},
                       self.solicitudreposicion.cajachica.custodio.lista_emails_interno(), [],
                       cuenta=MY_CUENTAS_CORREOS[1][1])

    def estaenfechadiasfaltantes(self):
        hoy = datetime.now().date()
        suma = self.fechasolicitud + relativedelta(days=2)
        resta = suma - hoy
        if resta.days == 1:
            self.mail_notificar_dias_faltantes(resta.days)
        return resta.days

    def validarcumplimientovalor(self):
        if self.comprobantecajachicaliquidacion_set.filter(status=True).exists():
            suma = null_to_decimal(
                self.comprobantecajachicaliquidacion_set.filter(status=True).aggregate(total=Sum('total'))['total'])
        else:
            suma = 0
        return suma

    def tieneliquidaciones(self):
        return self.comprobantecajachicaliquidacion_set.filter(status=True).exists()

    def liquidaciones(self):
        return self.comprobantecajachicaliquidacion_set.filter(status=True)

    class Meta:
        verbose_name = u'Comprobante caja chica'
        verbose_name_plural = u'Comprobantes caja chica'
        ordering = ('secuencia',)

    def save(self, *args, **kwargs):
        self.concepto = self.concepto.upper()
        super(ComprobanteCajaChica, self).save(*args, **kwargs)


class ComprobanteCajaChicaLiquidacion(ModeloBase):
    comprobante = models.ForeignKey(ComprobanteCajaChica, on_delete=models.CASCADE)
    numeroretencion = models.CharField(default='', max_length=20, verbose_name=u"Numero retencion")
    numerofactura = models.CharField(default='', max_length=20, verbose_name=u"Numero factura")
    fecha = models.DateField(verbose_name=u"Fecha Liquidaci√≥n")
    base0 = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'base 0')
    baseiva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'base iva')
    ivacausado = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'iva causado')
    ivaretenido = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'iva retenido')
    impuestoretenido = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                           verbose_name=u'impuesto retenido')
    total = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'total')
    observacion = models.TextField(default='', verbose_name=u"Observacion")

    def __str__(self):
        return u"%s - %s -%s" % (self.numeroretencion, self.comprobante, self.total)

    def sumabase(self):
        return null_to_decimal(self.base0 + self.baseiva, 2)

    class Meta:
        verbose_name = u'Comprobante caja chica liquidacion'
        verbose_name_plural = u'Comprobantes caja chica liquidacion'
        ordering = ('comprobante', 'numeroretencion',)
        unique_together = ('numeroretencion',)

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(ComprobanteCajaChicaLiquidacion, self).save(*args, **kwargs)


ESTADO_REPOSICION_APROBADOR = (
    (1, u"APROBADO"),
    (2, u"RECHAZADO"),
)


class SolicitudReposicionCajaChicaAprobacion(ModeloBase):
    solicitud = models.ForeignKey(SolicitudReposicionCajaChica, on_delete=models.CASCADE)
    observacion = models.TextField(default='', verbose_name=u"Observacion")
    aprueba = models.ForeignKey('sga.Persona', on_delete=models.CASCADE)
    fechaaprobacion = models.DateField(verbose_name=u"Fecha Aprobaci√≥n")
    estadosolicitud = models.IntegerField(default=1, choices=ESTADO_REPOSICION_APROBADOR,
                                          verbose_name=u"Estado Solicitud")

    def __str__(self):
        return u"Aprobador: %s, solicitante: %s, estado asignado:%s" % (
        self.aprueba, self.solicitud, self.estadosolicitud)

    def mail_notificar_jefe_departamento(self, nombresistema):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        send_html_mail("Aprobacion de permiso por Jefe de Departamento", "emails/permisojefedepartamento.html",
                       {'sistema': nombresistema, 'd': self, 't': miinstitucion()},
                       self.solicitud.solicita.lista_emails_interno(), [], cuenta=MY_CUENTAS_CORREOS[1][1])

    def mail_notificar_talento_humano(self, nombresistem):
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion
        send_html_mail("Aprobacion de permiso por Talento Humano", "emails/permisotalentohumano.html",
                       {'sistema': nombresistem, 'd': self, 't': miinstitucion()},
                       self.solicitud.solicita.lista_emails_interno(), [], cuenta=MY_CUENTAS_CORREOS[1][1])

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(SolicitudReposicionCajaChicaAprobacion, self).save(*args, **kwargs)


class MantenimientosActivosPreventivos(ModeloBase):
    activofijo = models.ForeignKey(ActivoFijo, verbose_name=u"Activo fijo", on_delete=models.CASCADE)
    tipoactivo = models.ForeignKey(GruposCategoria, verbose_name=u"Activo fijo", on_delete=models.CASCADE)
    estusu = models.BooleanField(default=False, verbose_name=u'Usuario entrega el equipo')
    archivo = models.FileField(upload_to='activosgarantia/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'Activos garant√≠a')
    fecha = models.DateField(verbose_name=u'Fecha de mantenimiento')
    horamax = models.CharField(default='00', blank=True, null=True, max_length=100, verbose_name=u'Hora')
    minutomax = models.CharField(default='00', blank=True, null=True, max_length=100, verbose_name=u'Minutos')
    funcionarecibe = models.BooleanField(default=False, verbose_name=u'funcionamiento de equipo')
    funcionaentrega = models.BooleanField(default=False, verbose_name=u'funcionamiento de equipo entrega')
    marca = models.CharField(default='', max_length=250, verbose_name=u"Marca")
    modelo = models.CharField(default='', max_length=250, verbose_name=u"Modelo")
    sbequipo = models.BooleanField(default=False, verbose_name=u'Sugiere baja de equipo')
    descbaja = models.CharField(default='', max_length=250, verbose_name=u"Descripcion de sugerencia")
    observaciones = models.TextField(default='', verbose_name=u"Observaciones")
    nuevo = models.BooleanField(default=False, verbose_name=u'Referencia a nuevos ingresos')

    # Campos Antiguos
    tipomantenimiento = models.IntegerField(choices=TIPO_MANTENIMIENTO, verbose_name=u'Tipo Mantenimiento', default=1)
    persona = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Persona", on_delete=models.CASCADE)
    monitor = models.TextField(default='', verbose_name=u"monitor")
    mouse = models.TextField(default='', verbose_name=u"mouse")
    teclado = models.TextField(default='', verbose_name=u"teclado")
    procesador = models.TextField(default='', verbose_name=u"procesador")
    memoria = models.TextField(default='', verbose_name=u"memoria")
    discoduro = models.TextField(default='', verbose_name=u"discoduro")
    particiones = models.TextField(default='', verbose_name=u"particiones")
    sistemaoperativo = models.TextField(default='', verbose_name=u"sistemaoperativo")
    service = models.TextField(default='', verbose_name=u"service")
    arquitectura = models.TextField(default='', verbose_name=u"arquitectura")

    def __str__(self):
        return u"%s" % self.activofijo

    def save(self, *args, **kwargs):
        self.observaciones = self.observaciones.upper()
        super(MantenimientosActivosPreventivos, self).save(*args, **kwargs)

    def personacreador(self):
        if Persona.objects.filter(usuario_id=self.usuario_creacion_id).exists():
            p = Persona.objects.filter(usuario_id=self.usuario_creacion_id)[0]
            if p.usuario == None:
                return 'Sin usuario'
            else:
                return p.usuario.username
        else:
            return None


class TareasActivosPreventivos(ModeloBase):
    mantenimiento = models.ForeignKey(MantenimientosActivosPreventivos, verbose_name=u"mantenimiento",
                                      on_delete=models.CASCADE)
    grupos = models.ForeignKey(MantenimientoGruCategoria, verbose_name=u"mantenimiento", blank=True, null=True,
                               on_delete=models.CASCADE)


ESTADO_DANIO = (
    (1, u"REPARACION PIEZA O PARTE"),
    (2, u"CAMBIO DE PIEZA O PARTE"),
)


class TareasActivosPreventivosDanios(ModeloBase):
    mantenimiento = models.ForeignKey(MantenimientosActivosPreventivos, verbose_name=u"mantenimiento",
                                      on_delete=models.CASCADE)
    grupos = models.ForeignKey(MantenimientoGruDanios, verbose_name=u"mantenimiento", blank=True, null=True,
                               on_delete=models.CASCADE)
    estadodanio = models.IntegerField(choices=ESTADO_DANIO, verbose_name=u"Estado Da√±o", blank=True, null=True)

    def estado(self):
        return ESTADO_DANIO[self.estadodanio - 1]


class PiezaParteActivosPreventivos(ModeloBase):
    mantenimiento = models.ForeignKey(MantenimientosActivosPreventivos, verbose_name=u"mantenimiento",
                                      on_delete=models.CASCADE)
    piezaparte = models.ForeignKey('sagest.HdPiezaPartes', verbose_name=u"piezaparte", blank=True, null=True,
                                   on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=500, verbose_name=u'Descripcion de pieza', blank=True, null=True)


class MantenimientosActivosGarantia(ModeloBase):
    proveedor = models.ForeignKey(Proveedor, blank=True, null=True, verbose_name=u"proveedor", on_delete=models.CASCADE)
    activofijo = models.ForeignKey(ActivoFijo, blank=True, null=True, verbose_name=u"Activo fijo",
                                   on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Valor")
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u'Fecha inicio')
    fechafin = models.DateField(blank=True, null=True, verbose_name=u'Fecha fin')
    archivo = models.FileField(upload_to='activosgarantia/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'Activos garant√≠a')
    numreporte = models.CharField(default='', max_length=500, verbose_name=u'Numero reporte')
    tipoactivo = models.ForeignKey(GruposCategoria, blank=True, null=True, verbose_name=u"Activo fijo",
                                   on_delete=models.CASCADE)
    horamax = models.CharField(default='00', blank=True, null=True, max_length=100, verbose_name=u'Hora')
    minutomax = models.CharField(default='00', blank=True, null=True, max_length=100, verbose_name=u'Minutos')
    estusu = models.BooleanField(default=False, verbose_name=u'Usuario entrega el equipo')
    arcusen = models.FileField(upload_to='entregausuario/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'Entrega del usuario')
    estfrec = models.BooleanField(default=False, verbose_name=u'Funciona al recibir')
    estfent = models.BooleanField(default=False, verbose_name=u'Funciona al entregar')
    estnuevo = models.BooleanField(default=False, verbose_name=u'Estado de ingreso actual')
    observacion = models.TextField(default='', blank=True, null=True, verbose_name=u"Observaciones")

    def __str__(self):
        return u"%s" % self.activofijo

    def listado_detallemantenimiento(self):
        if self.detallemantenimientosactivosgarantia_set.filter(status=True).exists():
            return self.detallemantenimientosactivosgarantia_set.filter(status=True)
        return None

    def personacreador(self):
        if Persona.objects.filter(usuario_id=self.usuario_creacion_id).exists():
            p = Persona.objects.filter(usuario_id=self.usuario_creacion_id)[0]
            if p.usuario == None:
                return 'Sin usuario'
            else:
                return p.usuario.username
        else:
            return None


class DetalleMantenimientosActivosGarantia(ModeloBase):
    mantenimientoactivosgarantia = models.ForeignKey(MantenimientosActivosGarantia, blank=True, null=True,
                                                     verbose_name=u"Mantennimiento activos", on_delete=models.CASCADE)
    activofijo = models.ForeignKey(ActivoFijo, blank=True, null=True, verbose_name=u"Activo fijo",
                                   on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % self.activofijo


# Mantenimientos nuevos
class MantenimientoGruCategoriaGarantiaLimp(ModeloBase):
    grupocategoria = models.ForeignKey(GruposCategoria, blank=True, null=True, verbose_name=u"Grupo Categoria",
                                       on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=250, verbose_name=u"Descripci√≥n")
    activo = models.BooleanField(default=True, verbose_name=u"Tarea activa?")

    def __str__(self):
        return u"%s" % self.descripcion

    def en_uso(self):
        return self.tareasactivospreventivosgarantialimp_set.exists()


class MantenimientoGruCategoriaGarantiaErr(ModeloBase):
    grupocategoria = models.ForeignKey(GruposCategoria, blank=True, null=True, verbose_name=u"Grupo Categoria",
                                       on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=250, verbose_name=u"Descripci√≥n")
    activo = models.BooleanField(default=True, verbose_name=u"Tarea activa?")

    def __str__(self):
        return u"%s" % self.descripcion

    def en_uso(self):
        return self.tareasactivospreventivosgarantiaerr_set.exists()


# Garantia de Limpieza
class TareasActivosPreventivosGarantiaLimp(ModeloBase):
    mantenimiento = models.ForeignKey(MantenimientosActivosGarantia, blank=True, null=True,
                                      verbose_name=u"mantenimiento", on_delete=models.CASCADE)
    grupos = models.ForeignKey(MantenimientoGruCategoriaGarantiaLimp, blank=True, null=True,
                               verbose_name=u"mantenimiento", on_delete=models.CASCADE)


# Garantia de Error
class TareasActivosPreventivosGarantiaErr(ModeloBase):
    mantenimiento = models.ForeignKey(MantenimientosActivosGarantia, blank=True, null=True,
                                      verbose_name=u"mantenimiento", on_delete=models.CASCADE)
    grupos = models.ForeignKey(MantenimientoGruCategoriaGarantiaErr, blank=True, null=True,
                               verbose_name=u"mantenimiento", on_delete=models.CASCADE)


class HdPiezaPartes(ModeloBase):
    grupocategoria = models.ForeignKey(GruposCategoria, blank=True, null=True, verbose_name=u"Grupo Categoria",
                                       on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=300, verbose_name=u'Descripci√≥n')
    estado = models.IntegerField(default=1, choices=ESTADO_PARTES, verbose_name=u'Estado')
    imagen = models.FileField(upload_to='piezapartes/%Y/%m/%d', blank=True, null=True, verbose_name=u'imagen')

    def __str__(self):
        return u'%s' % self.descripcion

    def en_uso(self):
        return self.hdsolicitudespiezapartes_set.exists()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(HdPiezaPartes, self).save(*args, **kwargs)


class HdSolicitudesPiezaPartes(ModeloBase):
    piezaparte = models.ForeignKey(HdPiezaPartes, blank=True, null=True, verbose_name=u"pieza y parte",
                                   on_delete=models.CASCADE)
    grupocategoria = models.ForeignKey(GruposCategoria, blank=True, null=True, verbose_name=u"Grupo Categoria",
                                       on_delete=models.CASCADE)
    tipo = models.CharField(default='', max_length=300, verbose_name=u'Tipo')
    capacidad = models.CharField(default='', max_length=300, verbose_name=u'Capacidad')
    velocidad = models.CharField(default='', max_length=300, verbose_name=u'Velocidad')
    descripcion = models.TextField(blank=True, null=True, verbose_name=u'Descripci√≥n')

    def __str__(self):
        return u"%s - %s - %s - %s - %s" % (
        self.grupocategoria, self.piezaparte, self.tipo, self.capacidad, self.velocidad)

    def en_uso(self):
        return self.hdrequerimientospiezapartes_set.exists()

    def precioactivo(self):
        if self.hdpreciosolicitudespiezapartes_set.filter(cierresolicitudes__estado=False,
                                                          cierresolicitudes__activo=True, activo=True,
                                                          status=True).exists():
            return self.hdpreciosolicitudespiezapartes_set.filter(cierresolicitudes__estado=False,
                                                                  cierresolicitudes__activo=True, activo=True,
                                                                  status=True)[0].valor
        else:
            return None

    def save(self, *args, **kwargs):
        self.tipo = self.tipo.upper()
        self.capacidad = self.capacidad.upper()
        self.velocidad = self.velocidad.upper()
        self.descripcion = self.descripcion.upper()
        super(HdSolicitudesPiezaPartes, self).save(*args, **kwargs)


class HdFechacierresolicitudes(ModeloBase):
    from django.contrib.auth.models import User
    observacion = models.TextField(verbose_name=u"Observacion")
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u'Fecha inicio')
    fechafin = models.DateField(blank=True, null=True, verbose_name=u'Fecha fin')
    activo = models.BooleanField(default=False, verbose_name=u'Activo')
    estado = models.BooleanField(default=True, verbose_name=u'Activo')
    usuariocierre = models.ForeignKey(User, blank=True, null=True, verbose_name=u'Usuario resuelve',
                                      on_delete=models.CASCADE)
    fecha_cierre = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        return u"%s  (FECHA INI. %s - FECHA FIN. %s )" % (self.observacion, self.fechainicio, self.fechafin)

    def en_uso(self):
        return self.hdpreciosolicitudespiezapartes_set.exists()

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(HdFechacierresolicitudes, self).save(*args, **kwargs)


class HdPrecioSolicitudesPiezaPartes(ModeloBase):
    solicitudes = models.ForeignKey(HdSolicitudesPiezaPartes, blank=True, null=True,
                                    verbose_name=u"Solicitudes de piezas y partes", on_delete=models.CASCADE)
    cierresolicitudes = models.ForeignKey(HdFechacierresolicitudes, blank=True, null=True,
                                          verbose_name=u"Fechas cierres Solicitudes de piezas y partes",
                                          on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u"Precio Referencial")
    activo = models.BooleanField(default=False, verbose_name=u'Activo')

    def __str__(self):
        return u'%s' % self.valor

    def en_uso(self):
        return self.hdrequerimientospiezapartes_set.exists()

    def si_edita(self):
        return self.cierresolicitudes.estado


class HdRequerimientosPiezaPartes(ModeloBase):
    from django.contrib.auth.models import User
    # Nuevos Campos
    incidente = models.ForeignKey(HdIncidente, blank=True, null=True, verbose_name=u"Incidentes",
                                  on_delete=models.CASCADE)
    tipoactivo = models.ForeignKey(GruposCategoria, blank=True, null=True, verbose_name=u"Tipo de activo fijo",
                                   on_delete=models.CASCADE)
    solicitudes = models.ForeignKey(HdSolicitudesPiezaPartes, blank=True, null=True,
                                    verbose_name=u"Solicitudes de piezas y partes", on_delete=models.CASCADE)
    # Campos antiguos
    usuarioresuelve = models.ForeignKey(User, blank=True, null=True, verbose_name=u'Usuario resuelve',
                                        on_delete=models.CASCADE)
    fecharesuelve = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha resuelve')
    observacionresuelve = models.CharField(default='', max_length=300,
                                           verbose_name=u'Observaci√≥n de pieza y parte puesta')
    codigoresuelve = models.CharField(default='', max_length=300, verbose_name=u'Codigo de pieza y parte puesta')
    preciosolicitud = models.ForeignKey(HdPrecioSolicitudesPiezaPartes, blank=True, null=True,
                                        verbose_name=u"Precio Solicitudes de piezas y partes", on_delete=models.CASCADE)

    def __str__(self):
        return u"%s - %s" % (self.incidente, self.solicitudes)

    def save(self, *args, **kwargs):
        self.observacionresuelve = self.observacionresuelve.upper()
        self.codigoresuelve = self.codigoresuelve.upper()
        super(HdRequerimientosPiezaPartes, self).save(*args, **kwargs)


class RequerimientoPiezaParteMultiple(ModeloBase):
    requerimiento = models.ForeignKey(HdRequerimientosPiezaPartes, verbose_name=u"mantenimiento",
                                      on_delete=models.CASCADE)
    piezaparte = models.ForeignKey('sagest.HdPiezaPartes', verbose_name=u"piezaparte", blank=True, null=True,
                                   on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=500, verbose_name=u'Descripcion de pieza', blank=True, null=True)


class HdCabRespuestaEncuestas(ModeloBase):
    incidente = models.ForeignKey(HdIncidente, blank=True, null=True, verbose_name=u"Incidente",
                                  on_delete=models.CASCADE)
    fecha_encuesta = models.DateTimeField(blank=True, null=True)
    mantenimientoexterno = models.BooleanField(default=True, verbose_name=u"mantenimiento externo")

    def __str__(self):
        return u'%s' % self.incidente

    class Meta:
        verbose_name = u"Cabecera Respuesta Encuesta de incidente"
        verbose_name_plural = u"Cabeceras Respuestas Encuestas de Incidentes"

    def save(self, *args, **kwargs):
        super(HdCabRespuestaEncuestas, self).save(*args, **kwargs)


class HdRespuestaEncuestas(ModeloBase):
    cabrespuesta = models.ForeignKey(HdCabRespuestaEncuestas, blank=True, null=True, verbose_name=u"Cab Respuesta",
                                     on_delete=models.CASCADE)
    detencuesta = models.ForeignKey(HdDetEncuestas, blank=True, null=True, verbose_name=u"Pregunta Encuesta",
                                    on_delete=models.CASCADE)
    respuesta = models.ForeignKey('sga.Respuesta', verbose_name=u'Respuesta', on_delete=models.CASCADE)
    observaciones = models.TextField(default='', blank=True, null=True, verbose_name=u"Observaciones")

    def __str__(self):
        return u'%s' % self.cabrespuesta

    class Meta:
        verbose_name = u"Respuesta Encuesta de incidente"
        verbose_name_plural = u"Respuestas Encuestas de Incidentes"

    def save(self, *args, **kwargs):
        self.observaciones = self.observaciones.upper()
        super(HdRespuestaEncuestas, self).save(*args, **kwargs)


# class ReqSistema(ModeloBase):
#     nombre = models.TextField(blank=True, null=True, verbose_name=u'Nombre')
#     vigente = models.BooleanField(default=True, verbose_name=u"Vigente")
#
#     def __str__(self):
#         return u"%s " % (self.nombre)
#
#     def en_uso(self):
#         return self.reqhistoria_set.exists()
#
#     def save(self, *args, **kwargs):
#         self.nombre = self.nombre.upper()
#         super(ReqSistema, self).save(*args, **kwargs)

# ESTADO_MODULO = (
#     (1, u'ACTIVO'),
#     (2, u'DESACTIVO')
# )


# class ReqModulo(ModeloBase):
#     sistema = models.ForeignKey(ReqSistema, related_name='sistema', blank=True, null=True, verbose_name=u'Sistema')
#     nombre = models.CharField(default='', max_length=300, verbose_name=u'Nombre')
#     descripcion = models.TextField(blank=True, null=True, verbose_name=u'Descripcion')
#     estado = models.IntegerField(choices=ESTADO_MODULO, default=1, verbose_name=u"Estado Modulo")
#
#     def __str__(self):
#         return u"%s - %s - %s " % (self.sistema.nombre, self.nombre, self.get_estado_display())
#
#     def save(self, *args, **kwargs):
#         self.nombre = self.nombre.upper() if self.nombre else None
#         self.descripcion = self.descripcion.upper() if self.descripcion else None
#         super(ReqModulo, self).save(*args, **kwargs)

class ReqActividad(ModeloBase):
    orden = models.IntegerField(blank=True, null=True, default=0, verbose_name=u'Orden')
    nombre = models.TextField(blank=True, null=True, verbose_name=u'Nombre')
    vigente = models.BooleanField(default=False, verbose_name=u"Vigente")

    def __str__(self):
        return u"%s " % (self.nombre)

    class Meta:
        verbose_name = 'Actividad'
        verbose_name_plural = 'Actividads'
        ordering = ('orden', 'id')

    def en_uso(self):
        return self.reqhistoriaactividad_set.exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(ReqActividad, self).save(*args, **kwargs)


PRIORIDAD = (
    (1, u'ACTIVO'),
    (2, u'DESACTIVO')
)

ESTADO_HISTORIA = (
    (1, u'INGRESADO'),
    (2, u'NO INICIADA'),
    (3, u'EN PROCESO'),
    (4, u'REALIZADA'),
)


class ReqPrioridad(ModeloBase):
    codigo = models.CharField(default='', max_length=10, verbose_name=u'Codigo')
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    horamax = models.CharField(default='00', max_length=100, verbose_name=u'Hora')
    minutomax = models.CharField(default='00', max_length=100, verbose_name=u'Minutos')
    segundomax = models.CharField(default='00', max_length=100, verbose_name=u'Segundos')
    imagen = models.FileField(upload_to='Imagen/%Y/%m/%d', blank=True, null=True, verbose_name=u'Imagen')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Prioridad"
        verbose_name_plural = u"Prioridad"

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(ReqPrioridad, self).save(*args, **kwargs)

    def download_imagen(self):
        return self.imagen.url

    def tiene_imagen(self):
        return self.imagen.filter(status=True).exists()


class ReqHistoria(ModeloBase):
    responsable = models.ForeignKey('sga.Persona', related_name='responsablehist', blank=True, null=True,
                                    verbose_name=u'Responsable', on_delete=models.CASCADE)
    modulo = models.ForeignKey('sga.Modulo', blank=True, null=True, verbose_name=u'M√≥dulo', on_delete=models.CASCADE)
    solicita = models.ForeignKey('sga.Persona', related_name='solicitahist', blank=True, null=True,
                                 verbose_name=u'Solicita', on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha")
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, blank=True, null=True, verbose_name=u'Cargo',
                                           on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u'Departamento',
                                     on_delete=models.CASCADE)
    asunto = models.TextField(blank=True, null=True, verbose_name=u'Asunto')
    cuerpo = RichTextUploadingField(blank=True, null=True, verbose_name=u'Detalle Historia')
    estado = models.IntegerField(choices=ESTADO_HISTORIA, default=1, verbose_name=u"Estado Historia")
    prioridad = models.ForeignKey(ReqPrioridad, blank=True, null=True, verbose_name=u'Prioridad',
                                  on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='ReqHistoria/pdf', blank=True, null=True, verbose_name=u'Archivo')

    def __str__(self):
        return u"%s - %s" % (self.solicita, self.asunto)

    def archivo_existe(self):
        folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'ReqHistoria', 'pdf', ''))
        arch = folder + self.archivo.url.split("/")[4]
        return os.path.isfile(arch)

    def download_link(self):
        return self.archivo.url if self.archivo else None

    def detalles(self):
        return self.historia.filter(status=True)

    def save(self, *args, **kwargs):
        self.asunto = self.asunto.upper().strip() if self.asunto else None
        super(ReqHistoria, self).save(*args, **kwargs)


class ReqHistoriaActividad(ModeloBase):
    historia = models.ForeignKey(ReqHistoria, related_name='historia', blank=True, null=True, verbose_name=u'Historia',
                                 on_delete=models.CASCADE)
    descripcion = models.TextField(blank=True, null=True, verbose_name=u'Descripcion')
    actividad = models.ForeignKey(ReqActividad, related_name='actividad', blank=True, null=True,
                                  verbose_name=u'Actividad', on_delete=models.CASCADE)
    fechainicio = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Inicia")
    fechafin = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Finaliza")
    responsable = models.ForeignKey('sga.Persona', related_name='responsableactividad', blank=True, null=True,
                                    verbose_name=u'Responsable', on_delete=models.CASCADE)
    estado = models.IntegerField(choices=ESTADO_HISTORIA, default=1, verbose_name=u"Estado Historia Actividad")

    def __str__(self):
        return u"%s - %s" % (self.historia.asunto, self.actividad.nombre)

    def actualizar_estado(self):
        historia = self.historia
        actividaddet = ReqHistoriaActividad.objects.filter(historia=historia, status=True)
        # ESTADO_HISTORIA = (
        #     (1, u'INGRESADO'),
        #     (2, u'NO INICIADA'),
        #     (3, u'EN PROCESO'),
        #     (4, u'REALIZADA'),
        # )
        # SE ACTUALIZA ESTADO A 2 (NO INICIADA)
        if actividaddet.count() == 0:
            # SE ACTUALIZA ESTADO A 2 (NO INICIADA)
            historia.estado = 2
        else:
            if actividaddet.count() == 1:
                historia.estado = self.estado
            elif actividaddet.count() == actividaddet.filter(estado=4).count():
                # SE ACTUALIZA ESTADO A 4 (REALIZADA)
                historia.estado = 4
            elif actividaddet.count() == actividaddet.filter(estado=1).count():
                # SE ACTUALIZA ESTADO A 1 (INGRESADO)
                historia.estado = 1
            else:
                # SE ACTUALIZA ESTADO A 3 (EN PROCESO)
                historia.estado = 3
        historia.save()

    def save(self, *args, **kwargs):
        super(ReqHistoriaActividad, self).save(*args, **kwargs)


class TipoResolucion(ModeloBase):
    nombre = models.CharField(max_length=250, verbose_name=u'Nombre')

    def __str__(self):
        return u"%s" % self.nombre

    def en_uso(self):
        sesiones =self.sesiones().exists()
        resoluciones = self.resoluciones().exists()
        return sesiones and resoluciones

    def orden_sesion_next(self):
        ultimo = self.sesiones().order_by('orden').last()
        if ultimo:
            return ultimo.orden + 1
        return 1

    def orden_resolucion_next(self):
        ultimo = self.resoluciones().filter(sesion__isnull=True).order_by('orden').last()
        if ultimo:
            return ultimo.orden + 1
        return 1

    def sesiones(self):
        return self.sesionresolucion_set.filter(status=True)

    def resoluciones(self):
        return self.resoluciones_set.filter(status=True)

    def save(self, *args, **kwargs):
        super(TipoResolucion, self).save(*args, **kwargs)

class SesionResolucion(ModeloBase):
    tipo = models.ForeignKey(TipoResolucion, blank=True, null=True, verbose_name=u'Tipo de resoluci√≥n',
                         on_delete=models.CASCADE)
    nombre = models.CharField(max_length=250, verbose_name=u'Nombre')
    fecha = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Sesi√≥n")
    orden = models.IntegerField(default=0, blank=True, null=True, verbose_name='Orden de sessi√≥n')

    def __str__(self):
        return u"%s" % self.nombre

    def orden_next(self):
        ultimo = SesionResolucion.objects.filter(status=True, tipo=self.tipo).order_by('orden').last()
        if ultimo:
            return ultimo.orden + 1
        return 1

    def orden_resolucion_next(self):
        ultimo = self.resoluciones().order_by('orden').last()
        if ultimo:
            return ultimo.orden + 1
        return 1

    def resoluciones(self):
        return self.resoluciones_set.filter(status=True)

    class Meta:
        verbose_name = u'Sesi√≥n'
        verbose_name_plural = u'Sesiones'
        ordering = ('nombre',)

class Resoluciones(ModeloBase):
    tipo = models.ForeignKey(TipoResolucion, blank=True, null=True, verbose_name=u'Tipo de resoluci√≥n',
                             on_delete=models.CASCADE)
    sesion = models.ForeignKey(SesionResolucion, blank=True, null=True, verbose_name=u'Sesi√≥n donde se creo la resoluci√≥n',
                             on_delete=models.CASCADE)
    numeroresolucion = models.CharField(max_length=250, verbose_name=u'Nombre')
    resuelve = models.TextField(blank=True, null=True, verbose_name=u'Descripcion')
    fecha = models.DateTimeField(blank=True, null=True, verbose_name=u"Fecha Inicia")
    archivo = models.FileField(upload_to='ReqHistoria/pdf', blank=True, null=True, verbose_name=u'Archivo')
    orden = models.IntegerField(default=0, blank=True, null=True, verbose_name='Orden de resoluci√≥n')

    def __str__(self):
        return u"%s - %s" % (self.tipo, self.numeroresolucion)

    def orden_next(self):
        ultimo = Resoluciones.objects.filter(status=True, tipo=self.tipo, sesion=self.sesion).order_by('orden').last()
        if ultimo:
            return ultimo.orden + 1
        return 1

    def download_link(self):
        return self.archivo.url

    def save(self, *args, **kwargs):
        self.numeroresolucion = self.numeroresolucion.upper().strip()
        super(Resoluciones, self).save(*args, **kwargs)


class IngresoSalidaObras(ModeloBase):
    producto = models.ForeignKey(Producto, verbose_name=u'Producto', on_delete=models.CASCADE)
    tipomovimiento = models.IntegerField(default=1, choices=TIPOS_MOVIMIENTO_INVENTARIO,
                                         verbose_name=u'Tipo Movimiento')
    fecha = models.DateTimeField(verbose_name=u'Fecha')
    cantidad = models.DecimalField(max_digits=30, decimal_places=4, default=0, verbose_name=u'Cantidad')
    saldo = models.DecimalField(max_digits=30, decimal_places=4, default=0, verbose_name=u'Cantidad')

    def __str__(self):
        return u"%s - %s (%s, %s)" % (self.producto.codigo, self.cantidad, self.tipomovimiento, self.fecha)

    class Meta:
        verbose_name = 'Kardex de inventario Obra'
        verbose_name_plural = 'Kardexs de inventario Obras'
        ordering = ('fecha', 'id')

    def save(self, *args, **kwargs):
        super(IngresoSalidaObras, self).save(*args, **kwargs)


class ArchivoRetenciones(ModeloBase):
    proveedor = models.ForeignKey(Proveedor, blank=True, null=True, verbose_name=u'Proveedor', on_delete=models.CASCADE)
    numerocur = models.IntegerField(blank=True, null=True)
    comprobanteventa = models.TextField(blank=True, null=True, verbose_name=u'Comprobante venta')
    fechaemisionventa = models.DateField(blank=True, null=True, verbose_name=u'Fecha venta')
    comprobanteretencion = models.TextField(blank=True, null=True, verbose_name=u'Comprobante retencion')
    fechaemisionretencion = models.DateField(blank=True, null=True, verbose_name=u'Fecha retencion')
    montoretencion = models.FloatField(blank=True, null=True, verbose_name=u'Monto de retencion')
    archivopdf = models.FileField(upload_to='archivoretenciones/%Y/%m/%d', blank=True, null=True,
                                  verbose_name=u'Archivo retencion pdf')
    archivoxml = models.FileField(upload_to='archivoretenciones/%Y/%m/%d', blank=True, null=True,
                                  verbose_name=u'Archivo retencion xml')
    estado_emailnotificacion = models.BooleanField(default=False, verbose_name=u'Email notificaci√≥n')
    fecha_emailnotificacion = models.DateTimeField(blank=True, null=True)
    persona_envianotificacion = models.ForeignKey('sga.Persona', blank=True, null=True,
                                                  verbose_name=u'Quien envia notificacion de retenciones',
                                                  on_delete=models.CASCADE)

    def __str__(self):
        return u"%s - %s" % (self.proveedor, self.numerocur)


class TipoActividadCrai(ModeloBase):
    descripcion = models.TextField(verbose_name=u"Descripcion")
    tipo = models.IntegerField(choices=MY_TIPO_MUNDO_CRAI, default=1, verbose_name=u'Tipo')

    def __str__(self):
        return u'%s - descripci√≥n: %s' % (self.get_tipo_display(), self.descripcion)

    def en_uso(self):
        return self.ingresoactividadescrai_set.filter(status=True).exists()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(TipoActividadCrai, self).save(*args, **kwargs)


class IngresoActividadesCrai(ModeloBase):
    from sga.models import Profesor, Administrativo, Inscripcion
    tipoactividadcrai = models.ForeignKey(TipoActividadCrai, blank=True, null=True, verbose_name=u'Tipo Actividad Crai',
                                          on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, blank=True, null=True, verbose_name=u'Profesor', on_delete=models.CASCADE)
    administrativo = models.ForeignKey(Administrativo, blank=True, null=True, verbose_name=u'Administrativo',
                                       on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, blank=True, null=True, verbose_name=u'Inscripci√≥n',
                                    on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u"Fecha")
    actividad = models.TextField(default='', verbose_name=u"Actividad")

    def __str__(self):
        return u'tipo: %s - persona: %s - actividad: %s' % (
        self.tipoactividadcrai, self.persona_actual(), self.actividad)

    def persona_actual(self):
        if self.profesor:
            return u"Docente: %s" % self.profesor.persona.nombre_completo_inverso()
        else:
            if self.inscripcion:
                return u"Estudiante: %s" % self.inscripcion.persona.nombre_completo_inverso()
            else:
                return u"Administrativo: %s" % self.administrativo.persona.nombre_completo_inverso()

    def tipoactividad(self):
        if self.profesor:
            return 2
        else:
            if self.inscripcion:
                return 1
            else:
                return 3

    def save(self, *args, **kwargs):
        self.actividad = self.actividad.upper()
        super(IngresoActividadesCrai, self).save(*args, **kwargs)


class FirmasComprobanteBodega(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u'Persona', blank=True, null=True, on_delete=models.CASCADE)
    tipo = models.IntegerField(choices=TIPO_FIRMA, verbose_name=u'Tipo firma', default=1)
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u'Fecha inicio')
    fechafin = models.DateField(blank=True, null=True, verbose_name=u'Fecha fin')
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                           verbose_name=u"Denominaci√≥n Puesto", on_delete=models.CASCADE)

    class Meta:
        verbose_name = u"Firmas para comprobantes de bodega"

    def save(self, *args, **kwargs):
        super(FirmasComprobanteBodega, self).save(*args, **kwargs)


class EvidenciaDocumentalPoa(ModeloBase):
    evidencia = models.TextField(verbose_name=u"Evidencia", default='')
    descripcion = models.TextField(verbose_name=u"Descripci√≥n", default='')
    acciondocumentodetalle = models.ForeignKey(AccionDocumentoDetalle, blank=True, null=True,
                                               verbose_name=u'Acci√≥n documento detalle', on_delete=models.CASCADE)
    evidenciaaprobador = models.TextField(verbose_name=u"Evidencia", default='')
    descripcionaprobador = models.TextField(verbose_name=u"Descripci√≥n", default='')
    personaaprobador = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Persona",
                                         on_delete=models.CASCADE)
    fechaaprobador = models.DateField(verbose_name=u'Fecha aprobador', blank=True, null=True)
    evaluacionperiodo = models.ForeignKey(EvaluacionPeriodoPoa, blank=True, null=True, verbose_name=u"Evaluaci√≥n",
                                          on_delete=models.CASCADE)

    def __str__(self):
        return self.evidencia

    def save(self, *args, **kwargs):
        super(EvidenciaDocumentalPoa, self).save(*args, **kwargs)


class Congreso(ModeloBase):
    tiporubro = models.ForeignKey(TipoOtroRubro, blank=True, null=True, verbose_name=u"Tipo", on_delete=models.CASCADE)
    nombre = models.TextField(blank=True, null=True, verbose_name=u"Nombre")
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u"fecha inicio congreso")
    fechafin = models.DateField(blank=True, null=True, verbose_name=u"fecha fin congreso")
    cupo = models.IntegerField(default=0, verbose_name=u'Cupo')
    visualizar = models.BooleanField(default=False, verbose_name=u"Visualizar")
    fechainicioinscripcion = models.DateField(blank=True, null=True, verbose_name=u"fecha inicio inscripcion")
    fechafininscripcion = models.DateField(blank=True, null=True, verbose_name=u"fecha fin inscripcion")
    imagencertificado = models.FileField(upload_to='certificadocongreso/%Y/%m/%d', blank=True, null=True,
                                         verbose_name=u'Imagen del certificado del congreso')
    archivo = models.FileField(upload_to='archivocongreso', blank=True, null=True,
                               verbose_name=u'Archivo congreso')
    gratuito = models.BooleanField(default=False, verbose_name=u"Es gratuito?")

    def __str__(self):
        return u'%s - [%s]' % (self.nombre, self.cupo)

    class Meta:
        verbose_name = u"Congreso"
        verbose_name_plural = u"Congresos"
        ordering = ('nombre',)

    def download_link(self):
        return self.imagencertificado.url

    def hay_cupo_inscribir(self):
        return True if self.contar_inscripcion_evento_periodo() < self.cupo else False

    def contar_inscripcion_evento_periodo(self):
        return self.inscritocongreso_set.filter(status=True).count()

    def exiten_inscritos(self):
        return self.inscritocongreso_set.filter(status=True).exists()

    def inscripcion_evento_rubro_cancelado(self):
        return self.inscritocongreso_set.filter(participante__rubro__isnull=False, participante__rubro__cancelado=True,
                                                participante__rubro__status=True,
                                                participante__rubro__capeventoperiodoipec=self, status=True).distinct(
            'participante__rubro__persona')

    def contar_inscripcion_evento_rubro_cancelado(self):
        return self.inscripcion_evento_rubro_cancelado().count()

    def total_rubros_cancelados(self):
        return InscritoCongreso.objects.filter(participante__rubro__isnull=False, participante__rubro__congreso=self,
                                               participante__rubro__cancelado=True,
                                               participante__rubro__status=True).count()

    def inscripcion_evento_rubro_pendiente_o_cancelado(self):
        # return self.capinscritoipec_set.filter(participante__rubro__isnull=False, participante__rubro__status=True,participante__rubro__capeventoperiodoipec=self, status=True).distinct('participante__rubro__persona')
        return self.inscritocongreso_set.values('participante__rubro__persona').filter(
            participante__rubro__isnull=False, participante__rubro__status=True,
            participante__rubro__capeventoperiodoipec=self, status=True).distinct()

    def contar_inscripcion_evento_rubro_pendiente_o_cancelado(self):
        return self.inscripcion_evento_rubro_pendiente_o_cancelado().count()

    def inscritos(self):
        return self.inscritocongreso_set.filter(status=True).order_by('participante__apellido1',
                                                                      'participante__apellido2',
                                                                      'participante__nombres') if self.capinscritoipec_set.filter(
            status=True).exists() else []

    def abreviar_fecha(self, fecha):
        meses = ["ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SEP", "OCT", "NOV", "DIC"]
        return str(fecha.day) + " " + meses[fecha.month - 1]

    def evento_esta_vigente(self):
        return True if self.fechafin > datetime.now().date() else False

    def en_uso(self):
        return True if self.inscritocongreso_set.filter(status=True).exists() else False

    def estado_evento(self):
        estado = ''
        if datetime.now().date() >= self.fechainicio and datetime.now().date() <= self.fechafin:
            estado = 'EN CURSO'
        elif datetime.now().date() < self.fechainicio:
            estado = 'PENDIENTE'
        else:
            estado = 'CERRADO'
        return estado

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(Congreso, self).save(*args, **kwargs)


class TipoParticipante(ModeloBase):
    nombre = models.TextField(default='', verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tipo participante"
        verbose_name_plural = u"Tipos participantes"
        ordering = ['nombre']

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper()
        super(TipoParticipante, self).save(*args, **kwargs)


class TipoParticipacionCongreso(ModeloBase):
    tipoparticipante = models.ForeignKey(TipoParticipante, blank=True, null=True, verbose_name=u'Tipo participante',
                                         on_delete=models.CASCADE)
    congreso = models.ForeignKey(Congreso, blank=True, null=True, verbose_name=u'Congreso', on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=30, decimal_places=2, default=0, verbose_name=u'Valor')
    imagencertificado = models.FileField(upload_to='certificadocongreso/%Y/%m/%d', blank=True, null=True,
                                         verbose_name=u'Imagen del certificado del congreso')
    tienetema = models.BooleanField(default=False, verbose_name=u'Tiene Tema Ponencia')

    def __str__(self):
        return u'%s - $ %s' % (self.tipoparticipante, self.valor)

    def nombre(self):
        return u'%s' % (self.tipoparticipante)

    def nombre_completo(self):
        return u'%s - $ %s' % (self.tipoparticipante, self.valor)

    def download_link(self):
        return self.imagencertificado.url

    class Meta:
        verbose_name = u"Tipo participante congreso"
        verbose_name_plural = u"Tipos participantes congresos"
        ordering = ['tipoparticipante']

    def save(self, *args, **kwargs):
        super(TipoParticipacionCongreso, self).save(*args, **kwargs)


class InscritoCongreso(ModeloBase):
    congreso = models.ForeignKey(Congreso, blank=True, null=True, verbose_name=u'Congreso', on_delete=models.CASCADE)
    tipoparticipacion = models.ForeignKey(TipoParticipacionCongreso, blank=True, null=True, verbose_name=u'Tipo participacion', on_delete=models.CASCADE)
    participante = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u'Participante', on_delete=models.CASCADE)
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n')
    emailnotificado = models.BooleanField(default=False, verbose_name=u'Notificar email')
    fecha_emailnotifica = models.DateTimeField(blank=True, null=True)
    persona_emailnotifica = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='+', verbose_name=u'Quien notifica y envia certificado', on_delete=models.CASCADE)
    rutapdf = models.FileField(upload_to='qrcode/certificados', blank=True, null=True, verbose_name=u'Archivo certificado congreso pdf')
    tema = models.TextField(default='', blank=True, null=True, verbose_name=u'Tema de la Ponencia')
    nombreinstitucion = models.TextField(default='', blank=True, null=True, verbose_name=u'Nombre de Institucion')
    orcid = models.TextField(default='', blank=True, null=True, verbose_name=u'ORCID')
    documentoinstitucion = models.FileField(upload_to='congreso/documentoinstitucion', blank=True, null=True,
                                            verbose_name="Documento de la institucion")
    asistio = models.BooleanField(default=False, blank=True, null=True, verbose_name="¬øAsistio?")
    requiere_certificado = models.BooleanField(default=False, blank=True, null=True, verbose_name="¬øRequiere certificado?")
    # rutaurlpdf = models.URLField(blank=True, null=True,  verbose_name=u'Archivo certificado congreso pdf')

    def __str__(self):
        return u'%s' % self.participante

    class Meta:
        verbose_name = u"Inscrito Congreso"
        verbose_name_plural = u"Inscritos congresos"
        ordering = ['participante']

    def download_link(self):
        return self.rutapdf.url

    def es_alumnounemi(self):
        esalumno = False
        if self.participante.inscripcion_set.filter(status=True).exclude(coordinacion_id=9):
            verificainsripcion = self.participante.inscripcion_set.values_list('id').filter(status=True).exclude(
                coordinacion_id=9)
            if Matricula.objects.filter(inscripcion__id__in=verificainsripcion, status=True):
                esalumno = True
            else:
                if RecordAcademico.objects.filter(inscripcion__id__in=verificainsripcion, status=True):
                    esalumno = True
        return esalumno

    def cancelo_rubro(self):
        rubros = Rubro.objects.filter(status=True, persona=self.participante, congreso=self.congreso)
        for ru in rubros:
            if ru.tiene_pagos():
                return True
        return False

    def estado_rubro(self):
        if self.cancelo_rubro():
            pagosactivos = Pago.objects.filter(status=True, rubro__status=True, factura__valida=True,
                                               factura__status=True, rubro__persona=self.participante,
                                               rubro__capeventoperiodoipec=self.capeventoperiodo).count()
            pagosanulados = Pago.objects.filter(status=True, rubro__status=True, factura__valida=False,
                                                factura__status=True, rubro__persona=self.participante,
                                                rubro__capeventoperiodoipec=self.capeventoperiodo).count()

            if pagosactivos == 0:
                return 2
            else:
                return 1
        else:
            return 0

    def valor_rubro(self):
        if Rubro.objects.filter(status=True, persona=self.participante, congreso=self.congreso).exists():
            return Rubro.objects.filter(status=True, persona=self.participante, congreso=self.congreso)[0].valor_total()
        else:
            return 0

    def valor_rubrocursos(self):
        if Rubro.objects.filter(cancelado=True, status=True, persona=self.participante,
                                tipo=self.congreso.tiporubro).exists():
            return Rubro.objects.filter(cancelado=True, status=True, persona=self.participante,
                                        tipo=self.congreso.tiporubro).exclude(pago__factura__valida=False).aggregate(
                valor=Sum('valor'))['valor']
        else:
            return 0

    def pagorubrocurso(self):
        valor = Rubro.objects.filter(persona=self.participante, tipo=self.congreso.tiporubro, cancelado=True,
                                     status=True).exclude(pago__factura__valida=False)
        return valor

    def pagorubrocurso_2(self):
        return Rubro.objects.filter(persona=self.participante, tipo=self.congreso.tiporubro, cancelado=True,
                                    status=True).exclude(pago__factura__valida=False).exists()

    def existerubrocurso(self):
        valor = Rubro.objects.filter(persona=self.participante, tipo=self.congreso.tiporubro, status=True).exclude(
            pago__factura__valida=False)
        return valor

    def existerubrocurso_2(self):
        return Rubro.objects.filter(persona=self.participante, tipo=self.congreso.tiporubro, status=True).exclude(
            pago__factura__valida=False).exists()

    def total_pagado_rubro(self):
        valor = null_to_decimal((self.total_rubros() - self.total_saldo_rubro()), 2)
        return valor

    def total_rubros(self):
        valor = null_to_decimal(
            Rubro.objects.filter(persona=self.participante, tipo=self.congreso.tiporubro, status=True).exclude(
                pago__factura__valida=False).aggregate(valor=Sum('valortotal'))['valor'], 2)
        return valor

    def total_saldo_rubro(self):
        valor = null_to_decimal(
            Rubro.objects.filter(persona=self.participante, tipo=self.congreso.tiporubro, status=True).exclude(
                pago__factura__valida=False).aggregate(valor=Sum('saldo'))['valor'], 2)
        return valor

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(InscritoCongreso, self).save(*args, **kwargs)


# class DetalleTema(ModeloBase):
#     inscritocongreso = models.ForeignKey(InscritoCongreso, blank=True, null=True,verbose_name=u'Insrito Congreso')
#     tema = models.TextField(default='',  blank=True, null=True, verbose_name=u'Tema de la Ponencia')
#     # rutaurlpdf = models.URLField(blank=True, null=True,  verbose_name=u'Archivo certificado congreso pdf')
#
#     def __str__(self):
#         return u'%s' % self.inscritocongreso
#
#     class Meta:
#         verbose_name = u"Detalle Tema"
#         verbose_name_plural = u"Detalle Temas"
#         ordering = ['inscritocongreso']
#
#
#     def save(self, *args, **kwargs):
#         self.tema = self.tema.upper()
#         super(DetalleTema, self).save(*args, **kwargs)

class DirectorResponsableBaja(ModeloBase):
    departamento = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Departamento", on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Responsable",
                                    on_delete=models.CASCADE)
    cargo = models.CharField(default='', max_length=200, blank=True, null=True)
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u'Fecha inicio')
    fechafin = models.DateField(blank=True, null=True, verbose_name=u'Fecha fin')
    actual = models.BooleanField(default=False, verbose_name=u'Actual')
    departamento = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Departamento",
                                     on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % self.responsable


TIPO_INFORME_BAJA = (
    (1, u'TECNOL√ìGICO'),
    (2, u'MANTENIMIENTO'),
)


class InformeActivoBaja(ModeloBase):
    activofijo = models.ForeignKey(ActivoFijo, blank=True, null=True, verbose_name=u"Activo", on_delete=models.CASCADE)
    solicita = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Usuario/Solicita",
                                 on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', related_name="+", blank=True, null=True, verbose_name=u"Responsable",
                                    on_delete=models.CASCADE)
    conclusion = models.TextField(default='', verbose_name=u"Conclusi√≥n")
    estado = models.IntegerField(default=1, choices=ESTADO_BAJA, verbose_name=u'Estado Uso')
    estadoactivo = models.ForeignKey(EstadoProducto, blank=True, null=True, verbose_name=u"Estado del activo", on_delete=models.CASCADE)
    enuso = models.BooleanField(blank=True, null=True, verbose_name=u'¬øEst√° en uso?')
    estadouso = models.IntegerField(default=1, choices=ESTADO_USO, verbose_name=u'Estado')
    bloque = models.ForeignKey(HdBloque, blank=True, null=True, verbose_name=u"Bloque", on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, blank=True, null=True, verbose_name=u"Departamento",
                                     on_delete=models.CASCADE)
    gestion = models.ForeignKey(SeccionDepartamento, blank=True, null=True, verbose_name=u"Gesti√≥n",
                                on_delete=models.CASCADE)
    detallerevision = models.TextField(default='', verbose_name=u"Detalle Revisi√≥n")
    tipoinforme = models.IntegerField(default=1, choices=TIPO_INFORME_BAJA, verbose_name=u'Tipo de informe')

    def actividades_informe_baja(self):
        return self.detalleinformeactivobaja_set.filter(status=True)

    def documento_informe_baja(self):
        return self.documentofirmainformebaja_set.filter(status=True).first()

    def get_condicion_estado(self):
        return ESTADO_BAJA[int(self.estado)-1][1] if self.estado else ''

    def get_estadouso_choice(self):
        return ESTADO_USO[int(self.estadouso) - 1][1] if self.estadouso else ''

    def __str__(self):
        return u"%s" % self.conclusion


class DetalleInformeActivoBaja(ModeloBase):
    informebaja = models.ForeignKey(InformeActivoBaja, blank=True, null=True, verbose_name=u"Informe Baja",
                                    on_delete=models.CASCADE)
    detalle = models.TextField(default='', verbose_name=u"Detalle")

    def __str__(self):
        return u"%s" % self.detalle

    class Meta:
        ordering = ('id',)


class TipoAccion(ModeloBase):
    nombre = models.CharField(default='', max_length=200, blank=True, null=True)

    def __str__(self):
        return u'%s ' % (self.nombre)

    def flexbox_reprhd(self):
        return u"%s " % (self.nombre)

    class Meta:
        verbose_name = u"TipoAccion"
        verbose_name_plural = u"TipoAccions"
        # ordering = ('nombre')


class SecuenciaCapacitacion(ModeloBase):
    descripcion = models.CharField(default='', max_length=200, blank=True, null=True)
    secuencia = models.IntegerField(blank=True, null=True)
    anio = models.IntegerField(blank=True, null=True)
    vigente = models.BooleanField(default=False)

    def __str__(self):
        return u'%s ' % (self.secuencia)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(SecuenciaCapacitacion, self).save(*args, **kwargs)

    class Meta:
        verbose_name = u"SecuenciaCapacitacion"
        verbose_name_plural = u"SecuenciaCapacitacions"


class OpcionSistema(ModeloBase):
    descripcion = models.CharField(default='', max_length=200, blank=True, null=True)
    modulo = models.ForeignKey('sga.Modulo', blank=True, null=True, verbose_name=u"Modulo", on_delete=models.CASCADE)
    visible = models.BooleanField(default=True, verbose_name=u"Visible al usuario")

    def __str__(self):
        return u'%s ' % self.descripcion

    def flexbox_reprhd(self):
        return u"%s - %s" % (self.descripcion, self.modulo.nombre)

    class Meta:
        verbose_name = u"Opci√≥n de Sistema"
        verbose_name_plural = u"Opciones de Sistemas"


class CabCapacitacion(ModeloBase):
    secuencia = models.IntegerField(blank=True, null=True)
    confsecuencia = models.ForeignKey(SecuenciaCapacitacion, blank=True, null=True, verbose_name=u"confsecuencia",
                                      on_delete=models.CASCADE)
    antecedente = models.CharField(default='', max_length=500, blank=True, null=True)
    seccion = models.ForeignKey(SeccionDepartamento, blank=True, null=True, verbose_name=u"C√≥digo de Secci√≥n",
                                on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, verbose_name=u"Departamento", on_delete=models.CASCADE)
    fecha = models.DateField(blank=True, null=True, verbose_name=u"fecha ")
    horainicio = models.TimeField(verbose_name=u'hora inicio')
    horafin = models.TimeField(verbose_name=u'hora fin ')
    tiposistema = models.IntegerField(choices=TIPO_SISTEMA, verbose_name=u'Tipo Sistema', default=1)
    tipocapacitacion = models.IntegerField(choices=TIPO_CAPACITACION, verbose_name=u'Tipo Capacitaci√≥n', default=1)
    # tipoaccion = models.ForeignKey(TipoAccion, blank=True, null=True, verbose_name=u"TipoAccion")
    elaborado = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='+', verbose_name=u"Elaborado",
                                  on_delete=models.CASCADE)
    verificado = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='verificado',
                                   verbose_name=u"Verificado", on_delete=models.CASCADE)
    aprobado = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='aprobado',
                                 verbose_name=u"Aprobado", on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='capacitacion/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')

    def __str__(self):
        return u'%s ' % (self.antecedente)

    class Meta:
        verbose_name = u"CabCapacitacion"
        verbose_name_plural = u"CabCapacitacions"

    def detalle(self):
        return self.detparticipante_set.filter(status=True)

    def tipo(self):
        return TIPO_CAPACITACION[self.tipocapacitacion - 1][1]

    def tiposis(self):
        return TIPO_SISTEMA[self.tiposistema - 1][1]

    def save(self, *args, **kwargs):
        self.antecedente = self.antecedente.upper()
        super(CabCapacitacion, self).save(*args, **kwargs)


class DetResponsable(ModeloBase):
    capacitacion = models.ForeignKey(CabCapacitacion, blank=True, null=True, verbose_name=u"Capacitacion",
                                     on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Responsable",
                                    on_delete=models.CASCADE)

    def __str__(self):
        return u'%s ' % (self.capacitacion)

    class Meta:
        verbose_name = u"DetResponsable"
        verbose_name_plural = u"DetResponsables"


class DetParticipante(ModeloBase):
    capacitacion = models.ForeignKey(CabCapacitacion, blank=True, null=True, verbose_name=u"Capacitacion",
                                     on_delete=models.CASCADE)
    participante = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Participante",
                                     on_delete=models.CASCADE)
    # cargo = models.ForeignKey(DenominacionPuesto, blank=True, null=True, verbose_name=u"Cargo")
    cargo = models.TextField(default='', blank=True, null=True, verbose_name=u"Cargo")

    def __str__(self):
        return u'%s ' % (self.capacitacion)

    class Meta:
        verbose_name = u"DetParticipante"
        verbose_name_plural = u"DetParticipante"


ESTADO_CAPACITACION = (
    (1, u"PENDIENTE"),
    (2, u"EJECUCI√ìN"),
    (3, u"FINALIZADO"),
)


class DetOpcion(ModeloBase):
    capacitacion = models.ForeignKey(CabCapacitacion, blank=True, null=True, verbose_name=u"Capacitacion",
                                     on_delete=models.CASCADE)
    opcion = models.ForeignKey(OpcionSistema, blank=True, null=True, verbose_name=u"Opcion", on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Responsable",
                                    on_delete=models.CASCADE)
    modulo = models.ForeignKey(Modulo, blank=True, null=True, verbose_name=u"Modulo", on_delete=models.CASCADE)
    observacion = models.TextField(default='', blank=True, null=True, verbose_name=u"Opciones")

    def __str__(self):
        return u'%s ' % (self.capacitacion)

    class Meta:
        verbose_name = u"DetParticipante"
        verbose_name_plural = u"DetParticipante"


class DetObservacion(ModeloBase):
    capacitacion = models.ForeignKey(CabCapacitacion, blank=True, null=True, verbose_name=u"Capacitacion",
                                     on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', blank=True, null=True, verbose_name=u"Responsable",
                                    on_delete=models.CASCADE)
    observacion = models.TextField(default='', verbose_name=u"Observaciones")
    fecha = models.DateField(blank=True, null=True, verbose_name=u"fecha ")
    estado = models.IntegerField(default=1, choices=ESTADO_CAPACITACION, verbose_name=u'Estado')

    def __str__(self):
        return u'%s ' % (self.capacitacion)

    class Meta:
        verbose_name = u"DetObservacion"
        verbose_name_plural = u"DetObservacions"

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(DetObservacion, self).save(*args, **kwargs)


class ControlMatriculaMoodle(ModeloBase):
    materia = models.ForeignKey('sga.Materia', verbose_name=u"Materia", on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', verbose_name=u"Persona", on_delete=models.CASCADE)
    materiaasignada = models.ForeignKey('sga.MateriaAsignada', blank=True, null=True, verbose_name=u"Materia Asignada",
                                        on_delete=models.CASCADE)
    error = models.TextField(default='', blank=True, null=True, verbose_name=u'error')


class Formulario107(ModeloBase):
    anio = models.IntegerField(blank=True, null=True)
    persona = models.ForeignKey('sga.Persona', verbose_name=u"Persona", on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='formulario107/%Y', blank=True, null=True, verbose_name=u'Archivo')

    def __str__(self):
        return u'[%s] %s' % (self.anio, self.persona)


class EstadoSolicitud(ModeloBase):
    opcion = models.ForeignKey(OpcionSistema, verbose_name=u"Opci√≥n del Sistema", on_delete=models.CASCADE)
    descripcion = models.CharField(default='', max_length=150, verbose_name=u'Descripci√≥n')
    observacion = models.CharField(blank=True, null=True, max_length=250, verbose_name=u'Observaci√≥n')
    valor = models.IntegerField(default=1, verbose_name=u'Valor que representa el estado')
    clase = models.CharField(default='', max_length=250, blank=True, null=True, verbose_name=u'Clase / estilo')

    def __str__(self):
        return u'%s - %s ' % (self.descripcion, self.valor)

    class Meta:
        verbose_name = u"Estado de Solicitud"
        verbose_name_plural = u"Estados de Solicitudes"
        unique_together = ('opcion', 'descripcion', 'valor',)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        self.observacion = self.observacion.upper()
        super(EstadoSolicitud, self).save(*args, **kwargs)


class TipoArchivoSolicitud(ModeloBase):
    opcion = models.ForeignKey(OpcionSistema, verbose_name=u"Opci√≥n del Sistema", on_delete=models.CASCADE)
    descripcion = models.CharField(default='', max_length=150, verbose_name=u'Descripci√≥n')
    observacion = models.CharField(blank=True, null=True, max_length=250, verbose_name=u'Observaci√≥n')
    valor = models.IntegerField(default=1, verbose_name=u'Valor que representa el tipo de archivo')

    def __str__(self):
        return u'%s - %s ' % (self.descripcion, self.valor)

    class Meta:
        verbose_name = u"Tipo de archivo de Solicitud"
        verbose_name_plural = u"Tipos de archivo de Solicitudes"
        unique_together = ('opcion', 'descripcion', 'valor',)


class CompromisoPagoPosgrado(ModeloBase):
    matricula = models.ForeignKey("sga.Matricula", blank=True, null=True, verbose_name=u'Matricula del estudiante',
                                  on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha emisi√≥n')
    tipo = models.IntegerField(choices=TIPO_COMPROMISO_PAGO, default=1, verbose_name=u'Tipo de compromiso de pago')
    total = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total del compromiso')
    montopagado = models.DecimalField(default=0, max_digits=30, decimal_places=2,
                                      verbose_name=u'Total pagado al momento del contrato')
    archivocompromiso = models.FileField(upload_to='compromisopago/%Y/%m/%d',
                                         verbose_name=u'Archivo del compromiso de pago firmado')
    estadocompromiso = models.IntegerField(choices=MY_ESTADO_REVISION_ARCHIVO, blank=True, null=True,
                                           verbose_name=u'Estado revisi√≥n de archivo de compromiso de pago')
    observacioncompromiso = models.TextField(blank=True, null=True, verbose_name=u'Observacion archivo compromiso')
    numerocontrato = models.IntegerField(blank=True, null=True, verbose_name=u'Numero de contrato')
    fechacontrato = models.DateField(blank=True, null=True, verbose_name=u'Fecha de contrato')
    montocontrato = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monto del contrato')
    archivocontrato = models.FileField(upload_to='compromisopago/%Y/%m/%d',
                                       verbose_name=u'Archivo del contrato firmado')
    estadocontrato = models.IntegerField(choices=MY_ESTADO_REVISION_ARCHIVO, blank=True, null=True,
                                         verbose_name=u'Estado revisi√≥n de archivo de ccontrato')
    observacioncontrato = models.TextField(blank=True, null=True, verbose_name=u'Observacion archivo contrato')
    numeropagare = models.IntegerField(blank=True, null=True, verbose_name=u'N√∫mero de pagar√©')
    fechapagare = models.DateField(blank=True, null=True, verbose_name=u'Fecha de pagar√©')
    montopagare = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Monto del pagar√©')
    fechavencepagare = models.DateField(blank=True, null=True, verbose_name=u'Fecha vencimiento del pagar√©')
    archivopagare = models.FileField(upload_to='compromisopago/%Y/%m/%d', verbose_name=u'Archivo del pagar√©')
    estadopagare = models.IntegerField(choices=MY_ESTADO_REVISION_ARCHIVO, blank=True, null=True,
                                       verbose_name=u'Estado revisi√≥n de archivo de pagar√©')
    observacionpagare = models.TextField(blank=True, null=True, verbose_name=u'Observacion archivo pagar√©')

    archivocomprobante = models.FileField(upload_to='compromisopago/%Y/%m/%d', default='',
                                          verbose_name=u'Archivo del comprobante de pago')
    estadocomprobante = models.IntegerField(choices=MY_ESTADO_REVISION_ARCHIVO, blank=True, null=True,
                                            verbose_name=u'Estado revisi√≥n de archivo de comprobante de pago')
    observacioncomprobante = models.TextField(blank=True, null=True,
                                              verbose_name=u'Observacion archivo comprobante de pago')

    observacion = models.TextField(default='', blank=True, null=True, verbose_name=u'Observacion')
    personarevisa = models.ForeignKey(Persona, verbose_name=u"Persona revisa compromiso", blank=True, null=True,
                                      on_delete=models.CASCADE)
    vigente = models.BooleanField(default=True, verbose_name=u'Se encuentra vigente')
    solicitudrefinanciamiento = models.ForeignKey("sga.SolicitudRefinanciamientoPosgrado", blank=True, null=True,
                                                  verbose_name=u'Solicitud de Refinanciamiento',
                                                  on_delete=models.CASCADE)
    estado = models.ForeignKey(EstadoSolicitud, verbose_name=u"Estado del compromiso", on_delete=models.CASCADE)

    def __str__(self):
        return u'%s - %s - %s' % (self.matricula.inscripcion.persona, self.fecha, self.estado.descripcion)

    class Meta:
        verbose_name = u"Compromiso de Pago"
        verbose_name_plural = u"Compromisos de Pago"
        unique_together = ('matricula', 'tipo',)

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper()
        super(CompromisoPagoPosgrado, self).save(*args, **kwargs)

    def puede_subir_documentos_personales(self):
        # Si no existen documentos pesonales
        if not self.matricula.inscripcion.persona.personadocumentopersonal_set.values("id").exists():
            return True
        else:
            # En caso de estar aprobado cedula y votacion no podra volver a subir caso contrario si
            return not self.matricula.inscripcion.persona.personadocumentopersonal_set.values("id").filter(
                estadocedula=2, estadopapeleta=2).exists()

    def puede_subir_comprobante_pago(self):
        # Si el compromiso de pago no est√° legalizado
        if self.estado.valor != 2:
            return self.estadocomprobante == 3
        else:
            return False

    def puede_agregar_conyuge(self):
        # si el compromiso de pago no esta legalizado
        if self.estado.valor != 2:
            return True
        else:
            return False

    def puede_agregar_garante(self):
        # si el compromiso de pago no esta legalizado
        if self.estado.valor != 2:
            # Si el estudiante no est√° casado
            if self.matricula.inscripcion.persona.estado_civil().id != 2:
                return True
            else:
                # si existe datos del c√≥nyuge si podr√° agregar datos del garante caso contrario no
                return self.compromisopagoposgradogarante_set.values("id").filter(status=True, tipo=1).exists()
        else:
            return False

    def puede_agregar_conyuge_garante(self):
        # si el compromiso de pago no esta legalizado
        if self.estado.valor != 2:
            return self.compromisopagoposgradogarante_set.values("id").filter(status=True, tipo=2,
                                                                              estadocivil=2).exists()
        else:
            return False

    def puede_subir_documentos(self):
        # si se genero el contrato y el pagare
        if self.numerocontrato and self.numeropagare:
            # si no ha sido legalizado el compromiso de pago
            if self.estado.valor != 2:
                return True
            else:
                return False
        else:
            return False

    def datos_conyuge(self):
        if self.compromisopagoposgradogarante_set.values("id").filter(status=True, tipo=1).exists():
            return self.compromisopagoposgradogarante_set.filter(status=True, tipo=1)[0]
        else:
            return None

    def nombre_completo_conyuge(self):
        garante = self.compromisopagoposgradogarante_set.filter(status=True, tipo=1)[0]
        return garante.nombres + ' ' + garante.apellido1 + ' ' + (garante.apellido2 if garante.apellido2 else '')

    def datos_garante(self):
        if self.compromisopagoposgradogarante_set.values("id").filter(status=True, tipo=2).exists():
            return self.compromisopagoposgradogarante_set.filter(status=True, tipo=2)[0]
        else:
            return None

    def cedula_garante(self):
        garante = self.compromisopagoposgradogarante_set.filter(status=True, tipo=2)[0]
        return garante.cedula

    def nombre_completo_garante(self):
        garante = self.compromisopagoposgradogarante_set.filter(status=True, tipo=2)[0]
        return garante.nombres + ' ' + garante.apellido1 + ' ' + (garante.apellido2 if garante.apellido2 else '')

    def datos_conyuge_garante(self):
        if self.compromisopagoposgradogarante_set.values("id").filter(status=True, tipo=3).exists():
            return self.compromisopagoposgradogarante_set.filter(status=True, tipo=3)[0]
        else:
            return None

    def nombre_completo_conyuge_garante(self):
        garante = self.compromisopagoposgradogarante_set.filter(status=True, tipo=3)[0]
        return garante.nombres + ' ' + garante.apellido1 + ' ' + (garante.apellido2 if garante.apellido2 else '')

    def puede_imprimir_compromiso_contrato_pagare(self):
        # Si el alumno tiene documentos personales cargados
        if self.matricula.inscripcion.persona.personadocumentopersonal_set.values("id").exists():
            alumno = self.matricula.inscripcion.persona
            # Si el alumno es SOLTERO
            if alumno.estado_civil().id != 2:
                # Si el compromiso tiene garante asignado
                garante = self.datos_garante()
                if garante:
                    # si garante es soltero
                    if garante.estadocivil.id != 2:
                        return True
                    else:
                        # si hay datos del conyuge del garante
                        if self.datos_conyuge_garante():
                            return True
                        else:
                            return False
                else:
                    return False
            else:
                # Si existen datos del conyuge del alumno
                if self.datos_conyuge():
                    # Si el compromiso tiene garante asignado
                    garante = self.datos_garante()
                    if garante:
                        # si garante es soltero
                        if garante.estadocivil.id != 2:
                            return True
                        else:
                            # si hay datos del conyuge del garante
                            if self.datos_conyuge_garante():
                                return True
                            else:
                                return False
                    else:
                        return False
                else:
                    return False
        else:
            return False

    def puede_cambiar_estado(self):
        if self.estadocompromiso:
            # estado del compromiso de pago, contrato y pagar√©
            estadocompromiso = self.estadocompromiso
            estadocontrato = self.estadocontrato
            estadopagare = self.estadopagare
            estadocomprobante = self.estadocomprobante

            # estado de los documentos personales
            documentospersonales = self.matricula.inscripcion.persona.documentos_personales()
            estadocedula = documentospersonales.estadocedula
            estadopapeleta = documentospersonales.estadopapeleta
            estadootros = 1
            # estados de los demas documentos
            for documento in CompromisoPagoPosgradoGaranteArchivo.objects.filter(garante__compromisopago=self,
                                                                                 status=True):
                if documento.estado == 3:
                    estadootros = 3
                    break

            return estadocomprobante != 3 and estadocompromiso != 3 and estadocontrato != 3 and estadocedula != 3 and estadopapeleta != 3 and estadopagare != 3 and estadootros != 3
        else:
            return False


class CompromisoPagoPosgradoRecorrido(ModeloBase):
    compromisopago = models.ForeignKey(CompromisoPagoPosgrado, verbose_name=u'Compromiso de pago',
                                       on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha')
    observacion = models.TextField(verbose_name=u'Observaci√≥n del recorrido')
    estado = models.ForeignKey(EstadoSolicitud, verbose_name=u"Estado", on_delete=models.CASCADE)

    def __str__(self):
        return u'%s - %s - %s' % (self.compromisopago, self.fecha, self.estado.descripcion)

    class Meta:
        verbose_name = u"Compromiso de Pago Recorrido"
        verbose_name_plural = u"Compromisos de Pago Recorrido"


class RubroRefinanciamiento(ModeloBase):
    compromisopago = models.ForeignKey(CompromisoPagoPosgrado, verbose_name=u'Compromiso de pago',
                                       on_delete=models.CASCADE)
    rubro = models.ForeignKey(Rubro, verbose_name=u'Rubro refinanciado', on_delete=models.CASCADE)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor del rubro')
    fechaemite = models.DateField(verbose_name=u'Fecha emisi√≥n')
    fechavence = models.DateField(verbose_name=u'Fecha vencimiento')
    saldo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Saldo del rubro')
    vencido = models.BooleanField(default=False, verbose_name=u'Pago vencido')
    cancelado = models.BooleanField(default=False, verbose_name=u'Pagado')


class PagoRubroRefinanciamiento(ModeloBase):
    pago = models.ForeignKey(Pago, verbose_name=u'Pago', on_delete=models.CASCADE)
    rubrorefinanciado = models.ForeignKey(RubroRefinanciamiento, verbose_name=u'Rubro Refinanciado',
                                          on_delete=models.CASCADE)


class CompromisoPagoPosgradoGarante(ModeloBase):
    compromisopago = models.ForeignKey(CompromisoPagoPosgrado, verbose_name=u'Compromiso de pago',
                                       on_delete=models.CASCADE)
    tipo = models.IntegerField(choices=TIPO_GARANTE, default=1, verbose_name=u'Tipo de garante')
    personajuridica = models.IntegerField(choices=GARANTE_PERSONA_JURIDICA, default=2,
                                          verbose_name=u'Es persona jur√≠dica')
    cedula = models.CharField(default='', max_length=20, verbose_name=u"N√∫mero de c√©dula")
    nombres = models.CharField(default='', max_length=100, verbose_name=u'Nombres')
    apellido1 = models.CharField(default='', max_length=50, verbose_name=u"1er Apellido")
    apellido2 = models.CharField(default='', max_length=50, verbose_name=u"2do Apellido")
    genero = models.ForeignKey("sga.Sexo", blank=True, null=True, verbose_name=u'G√©nero', on_delete=models.CASCADE)
    estadocivil = models.ForeignKey('sga.PersonaEstadoCivil', blank=True, null=True, verbose_name=u"Estado civil",
                                    on_delete=models.CASCADE)
    direccion = models.CharField(default='', max_length=300, verbose_name=u"Direcci√≥n")
    relaciondependencia = models.IntegerField(choices=GARANTE_RELACION_DEPENDENCIA, blank=True, null=True,
                                              verbose_name=u'Trabaja con relacci√≥n de dependencia')

    def __str__(self):
        return u'%s - %s - %s - %s - %s - %s' % (
        self.compromisopago, self.get_tipo_display(), self.cedula, self.nombres, self.apellido1, self.apellido2)

    class Meta:
        verbose_name = u"Garante Compromiso de Pago"
        verbose_name_plural = u"Garantes Compromisos de Pago"
        unique_together = ('compromisopago', 'tipo',)

    def save(self, *args, **kwargs):
        self.nombres = self.nombres.strip().upper()
        self.apellido1 = self.apellido1.strip().upper()
        self.apellido2 = self.apellido2.strip().upper() if self.apellido2 else ''
        self.direccion = self.direccion.strip().upper()
        super(CompromisoPagoPosgradoGarante, self).save(*args, **kwargs)

    def archivocedulaconyuge(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=1)[0]

    def archivovotacionconyuge(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=2)[0]

    def archivocedulagarante(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=3)[0]

    def archivovotaciongarante(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=4)[0]

    def archivorolpagos(self):
        if self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=5).exists():
            return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=5)[0]
        else:
            return None

    def archivoimpuestopredial(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=6)[0]

    def archivofacturaserviciobasico(self):
        if self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=7).exists():
            return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=7)[0]
        return None

    def archivoriseruc(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=8)[0]

    def archivoconstitucion(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=9)[0]

    def archivoexistencialegal(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=10)[0]

    def archivoimpuestorenta(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=11)[0]

    def archivonombramientorepresentante(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=12)[0]

    def archivojuntaaccionistas(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=13)[0]

    def archivoruc(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=14)[0]

    def archivocedulaconyugegarante(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=15)[0]

    def archivovotacionconyugegarante(self):
        return self.compromisopagoposgradogarantearchivo_set.filter(status=True, tipoarchivo__valor=16)[0]


class CompromisoPagoPosgradoGaranteArchivo(ModeloBase):
    garante = models.ForeignKey(CompromisoPagoPosgradoGarante, verbose_name=u'Garante', on_delete=models.CASCADE)
    tipoarchivo = models.ForeignKey(TipoArchivoSolicitud, verbose_name=u'Tipo de archivo', on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='compromisopago/%Y/%m/%d', verbose_name=u'Archivo de cedula')
    observacion = models.TextField(verbose_name=u"Observaci√≥n", blank=True, null=True)
    estado = models.IntegerField(choices=MY_ESTADO_REVISION_ARCHIVO, blank=True, null=True,
                                 verbose_name=u'Estado revisi√≥n de archivo de archivo')


ESTADO_ARCHIVO = (
    (1, u"DOCENTE"),
    (2, u"TODOS"),
)


class ArchivoDescarga(ModeloBase):
    nombreprograma = models.CharField(blank=True, null=True, max_length=100, verbose_name=u'Nombre programa')
    version = models.CharField(blank=True, null=True, max_length=100, verbose_name=u'Version')
    estado = models.BooleanField(default=True, verbose_name=u'Estado')
    enlacedescarga = models.CharField(blank=True, null=True, max_length=300, verbose_name=u'Enlace descarga')
    estadoacceso = models.IntegerField(choices=ESTADO_ARCHIVO, blank=True, null=True, verbose_name=u'Nivel de Acceso')
    imagen = models.FileField(upload_to='archivodescarga/%Y/%m/%d', blank=True, null=True, verbose_name=u'Imagen')

    def __str__(self):
        return u'%s' % (self.nombreprograma)


class Informes(ModeloBase):
    codigo = models.CharField(blank=True, null=True, max_length=50, verbose_name=u'Codigo')
    departamento = models.ForeignKey('sagest.Departamento', related_name='+', blank=True, null=True,
                                     verbose_name=u'Departamento', on_delete=models.CASCADE)
    fecha = models.DateTimeField(verbose_name=u'Fecha', blank=True, null=True)
    objetivo = models.TextField(default='', blank=True, null=True, verbose_name=u'objetivo')
    archivo = models.FileField(upload_to='informetic/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'archivo del informe')
    responsables = models.ManyToManyField('sga.Persona', related_name='+', verbose_name=u'Responsable')
    experto = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True, verbose_name=u'Experto',
                                on_delete=models.CASCADE)
    director = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True, verbose_name=u'Director',
                                 on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % (self.codigo)

    class Meta:
        verbose_name = u"Informe tic"
        verbose_name_plural = u"Informes Tics"

    def download_link(self):
        return self.archivo.url

    def save(self, *args, **kwargs):
        self.objetivo = self.objetivo.strip().upper()
        self.codigo = self.codigo.strip().upper()
        super(Informes, self).save(*args, **kwargs)


class AnexoInforme(ModeloBase):
    informe = models.ForeignKey(Informes, verbose_name=u"Informe", on_delete=models.CASCADE)
    tipoanexo = models.IntegerField(choices=TIPO_ANEXO_INFORME, verbose_name=u'Tipo Anexo Informe')
    descripcion = models.CharField(max_length=300, verbose_name=u'Descripcion')
    archivo = models.FileField(upload_to='archivo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')

    def download_link(self):
        return self.archivo.url

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(AnexoInforme, self).save(*args, **kwargs)


class BitacoraActividadDiaria(ModeloBase):
    titulo = models.TextField(default='', blank=True, null=True, verbose_name=u'Titulo')
    departamento = models.ForeignKey('sagest.Departamento', related_name='+', blank=True, null=True,
                                     verbose_name=u'Departamento', on_delete=models.CASCADE)
    fecha = models.DateTimeField(verbose_name=u'Fecha', blank=True, null=True)
    persona = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True, verbose_name=u'Persona',
                                on_delete=models.CASCADE)
    descripcion = models.TextField(default='', blank=True, null=True, verbose_name=u'Descripci√≥n')
    link = models.TextField(default='', blank=True, null=True, verbose_name=u'Link')
    tiposistema = models.IntegerField(choices=TIPO_SISTEMA, verbose_name=u'Tipo Sistema', default=1)
    archivo = models.FileField(upload_to='bitacoraactividad/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'archivo de actividad')
    departamento_requiriente = models.ForeignKey('sagest.Departamento', related_name='+', blank=True, null=True,
                                                 verbose_name=u'Departamento requiriente', on_delete=models.CASCADE)
    actividades = models.ForeignKey('pdip.ActividadesPerfil', null=True, blank=True, on_delete=models.CASCADE)
    fechafin = models.DateTimeField(verbose_name=u'Fecha F√≠n', blank=True, null=True)
    tipoactividad = models.IntegerField(choices=TIPO_ACTIVIDAD_BITACORA, verbose_name=u'Tipo de Actividad', default=1,
                                        blank=True, null=True)
    incidenciascrum = models.ForeignKey('bd.IncidenciaSCRUM', blank=True, null=True,
                                         verbose_name=u'Incidencias o actividades scrum', on_delete=models.CASCADE)
    #CAMPO OBSERVACI√ìN PARA A REVISI√ìN DE ACTVIDADES DE POSGRADO
    observacion = models.TextField(blank=True, null=True, verbose_name=u'Observaci√≥n')
    corregida = models.BooleanField(default=False, blank=True, null=True, verbose_name=u'Corregida')

    def __str__(self):
        return u'%s - %s' % (self.persona, self.descripcion)

    class Meta:
        verbose_name = u"Bit√°cora actividad diaria"
        verbose_name_plural = u"Bit√°cora actividades diarias"

    def download_link(self):
        return self.archivo.url

    def type_fancybox(self):
        lista_ext = ['.pdf', '.jpg', '.jpeg', '.png']
        for ext in lista_ext:
            if self.archivo.url.endswith(ext):
                return True
        return False

    def save(self, *args, **kwargs):
        self.titulo = self.titulo.strip() if self.titulo else ''
        self.descripcion = self.descripcion.strip() if self.descripcion else ''
        self.link = self.link.strip() if self.link else ''
        super(BitacoraActividadDiaria, self).save(*args, **kwargs)


# ************plantilla de th ************

NIVEL_TERRITORIAL_TH = (
    (1, u"ZONAL"),
    (2, u"REGIONAL"),
    (3, u"PROVINCIAL"),
    (4, u"DISTRITAL"),
    (5, u"CANTONAL"),
    (6, u"CIRCUITAL"),
    (7, u"PARROQUIAL"),
)

TIPO_ACTIVIDAD_TH = (
    (1, u"GESTI√ìN"),
    (2, u"OPERATIVA"),
)

FRECUENCIA_TH = (
    (1, u"DIARIO ORDINARIO"),
    (2, u"SEMANAL"),
    (3, u"QUINCENAL"),
    (4, u"MENSUAL"),
    (5, u"TRIMESTRAL"),
    (6, u"SEMESTRAL"),
    (7, u"ANUAL"),
)

ESTADOS_PLANTILLA_TH = (
    (1, u'EN PROCESO'),
    (2, u'ENVIADO A DIRECTOR/A'),
    (3, u'ENVIADO A UATH'),
    (4, u'VALIDADO DIRECTOR/A'),
    (5, u'VALIDADO UATH'),
    (6, u'RECHAZADO DIRECTOR/A'),
    (7, u'RECHAZADO UATH'),
)


class ProductoIntermedioTH(ModeloBase):
    descripcion = models.CharField(blank=True, null=True, max_length=550, verbose_name=u'Descripcion')

    def __str__(self):
        return u'%s' % (self.descripcion)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.strip().upper()
        super(ProductoIntermedioTH, self).save(*args, **kwargs)


class PeriodoPlanificacionTH(ModeloBase):
    anio = models.IntegerField(default=0, verbose_name=u"A√±o")
    valorcalculo = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor de Calculo')
    descripcion = models.CharField(blank=True, null=True, max_length=550, verbose_name=u'Descripcion')
    activo = models.BooleanField(default=True, verbose_name=u'Activo')
    institucion = models.ForeignKey('sga.TituloInstitucion', blank=True, null=True, verbose_name=u'Instituci√≥n',
                                    on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True, verbose_name=u'Responsable',
                                    on_delete=models.CASCADE)
    autoridadresponsable = models.ForeignKey('sga.Persona', related_name='a', blank=True, null=True,
                                             verbose_name=u'Autoridad Responsable', on_delete=models.CASCADE)
    cargo = models.TextField(blank=True, null=True, verbose_name=u'Cargo')

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.strip().upper()
        super(PeriodoPlanificacionTH, self).save(*args, **kwargs)

    def __str__(self):
        return u'%s %s' % (self.descripcion, self.anio)

    def direcciones(self):
        return CabPlanificacionTH.objects.filter(periodo=self, status=True).order_by('id')

    def direccionesaprobadas(self):
        return CabPlanificacionTH.objects.filter(periodo=self, status=True, estado=5).order_by('id')

    def totaldireccionesaprobadas(self):
        direcciones = self.direccionesaprobadas()
        tdireccion = 0
        anominadora = 0
        viceministros = 0
        subsecretarios = 0
        coordinadores = 0
        asesor = 0
        coorddesp = 0
        ejeccord = 0
        ejesuper = 0
        ejecucion = 0
        tecnologico = 0
        apoyo = 0
        pdireccion = 0
        panominadora = 0
        pviceministros = 0
        psubsecretarios = 0
        pcoordinadores = 0
        pasesor = 0
        pcoorddesp = 0
        pejeccord = 0
        pejesuper = 0
        pejecucion = 0
        ptecnologico = 0
        papoyo = 0
        for direccion in direcciones:
            tdireccion += direccion.totaldireccion()['valor']
            anominadora += direccion.totalanominadora()['valor']
            viceministros += direccion.totalviceministros()['valor']
            subsecretarios += direccion.totalsubsecretarios()['valor']
            coordinadores += direccion.totalcoordinadores()['valor']
            asesor += direccion.totalasesor()['valor']
            coorddesp += direccion.totalcoorddespacho()['valor']
            ejeccord += direccion.totalejecucioncoord()['valor']
            ejesuper += direccion.totalejecucionsupervision()['valor']
            ejecucion += direccion.totalejecucion()['valor']
            tecnologico += direccion.totalejecucionapoyo()['valor']
            apoyo += direccion.totaltecnico()['valor']
            pdireccion += direccion.totalpdireccion()['valor']
            panominadora += direccion.totalpanominadora()['valor']
            pviceministros += direccion.totalpviceministros()['valor']
            psubsecretarios += direccion.totalpsubsecretarios()['valor']
            pcoordinadores += direccion.totalpcoordinadores()['valor']
            pasesor += direccion.totalpasesor()['valor']
            pcoorddesp += direccion.totalpcoorddespacho()['valor']
            pejeccord += direccion.totalpejecucioncoord()['valor']
            pejesuper += direccion.totalpejecucionsupervision()['valor']
            pejecucion += direccion.totalpejecucion()['valor']
            ptecnologico += direccion.totalpejecucionapoyo()['valor']
            papoyo += direccion.totalptecnico()['valor']
        resultado = {'anominadora': anominadora, 'viceministros': viceministros, 'subsecretarios': subsecretarios,
                     'coordinadores': coordinadores, 'asesor': asesor, 'coorddesp': coorddesp, 'ejeccord': ejeccord,
                     'ejesuper': ejesuper, 'ejecucion': ejecucion, 'tecnologico': tecnologico, 'apoyo': apoyo,
                     'panominadora': panominadora, 'pviceministros': pviceministros, 'psubsecretarios': psubsecretarios,
                     'pcoordinadores': pcoordinadores, 'pasesor': pasesor, 'pcoorddesp': pcoorddesp,
                     'pejeccord': pejeccord,
                     'pejesuper': pejesuper, 'pejecucion': pejecucion, 'ptecnologico': ptecnologico, 'papoyo': papoyo,
                     'direccion': tdireccion, 'pdireccion': pdireccion

                     }
        return resultado

    def totalbrecharol(self, tipo):
        direcciones = self.direccionesaprobadas()
        gobernantes = direcciones.filter(tipoproceso=tipo)
        tdireccion = 0
        anominadora = 0
        viceministros = 0
        subsecretarios = 0
        coordinadores = 0
        asesor = 0
        coorddesp = 0
        ejeccord = 0
        ejesuper = 0
        ejecucion = 0
        tecnologico = 0
        apoyo = 0
        pdireccion = 0
        panominadora = 0
        pviceministros = 0
        psubsecretarios = 0
        pcoordinadores = 0
        pasesor = 0
        pcoorddesp = 0
        pejeccord = 0
        pejesuper = 0
        pejecucion = 0
        ptecnologico = 0
        papoyo = 0
        for direccion in gobernantes:
            tdireccion += direccion.totaldireccion()['valor']
            anominadora += direccion.totalanominadora()['valor']
            viceministros += direccion.totalviceministros()['valor']
            subsecretarios += direccion.totalsubsecretarios()['valor']
            coordinadores += direccion.totalcoordinadores()['valor']
            asesor += direccion.totalasesor()['valor']
            coorddesp += direccion.totalcoorddespacho()['valor']
            ejeccord += direccion.totalejecucioncoord()['valor']
            ejesuper += direccion.totalejecucionsupervision()['valor']
            ejecucion += direccion.totalejecucion()['valor']
            tecnologico += direccion.totalejecucionapoyo()['valor']
            apoyo += direccion.totaltecnico()['valor']
            pdireccion += direccion.totalpdireccion()['valor']
            panominadora += direccion.totalpanominadora()['valor']
            pviceministros += direccion.totalpviceministros()['valor']
            psubsecretarios += direccion.totalpsubsecretarios()['valor']
            pcoordinadores += direccion.totalpcoordinadores()['valor']
            pasesor += direccion.totalpasesor()['valor']
            pcoorddesp += direccion.totalpcoorddespacho()['valor']
            pejeccord += direccion.totalpejecucioncoord()['valor']
            pejesuper += direccion.totalpejecucionsupervision()['valor']
            pejecucion += direccion.totalpejecucion()['valor']
            ptecnologico += direccion.totalpejecucionapoyo()['valor']
            papoyo += direccion.totalptecnico()['valor']
        totalactual = tdireccion + anominadora + viceministros + subsecretarios + coordinadores + asesor + coorddesp + ejeccord + ejesuper + ejecucion + tecnologico + apoyo
        totalpropuesto = pdireccion + panominadora + pviceministros + psubsecretarios + pcoordinadores + pasesor + pcoorddesp + pejeccord + pejesuper + pejecucion + ptecnologico + papoyo
        brecha = totalactual - totalpropuesto
        palabras = 'SERVIDORES EXCEDENTES'
        if brecha < 0:
            brecha = brecha * (-1)
            palabras = 'SERVIDORES REQUERIDOS'
        else:
            if brecha == 0:
                palabras = ''
                brecha = ''

        resultado = {'actual': totalactual, 'propuesto': totalpropuesto, 'brecha': brecha, 'palabras': palabras}
        return resultado

    class Meta:
        verbose_name = 'Periodo Planificacion TH'
        verbose_name_plural = 'Periodo Planificacion TH'
        ordering = ('pk',)


class ReporteBrechasPeriodoTH(ModeloBase):
    periodo = models.ForeignKey(PeriodoPlanificacionTH, blank=True, null=True, verbose_name=u'Periodo planificaci√≥n',
                                on_delete=models.CASCADE)
    totalcodtrabajo = models.IntegerField(default=0, verbose_name=u'Situaci√≥n actual codigo de trabajo')
    totalregespecial = models.IntegerField(default=0, verbose_name=u'Situaci√≥n actual r√©gimen especial')

    ptotalcodtrabajo = models.IntegerField(default=0, verbose_name=u'Situaci√≥n propuesta codigo de trabajo')
    ptotalregespecial = models.IntegerField(default=0, verbose_name=u'Situaci√≥n propuesta r√©gimen especial')

    jerarquico = models.IntegerField(default=0, verbose_name=u'Situaci√≥n actual nivel jer√°rquico')
    pjerarquico = models.IntegerField(default=0, verbose_name=u'Situaci√≥n propuesta nivel jer√°rquico')

    ejecucioncoord = models.IntegerField(default=0, verbose_name=u'Situaci√≥n actual ejecuci√≥n y coordinaci√≥n')
    pejecucioncoord = models.IntegerField(default=0, verbose_name=u'Situaci√≥n propuesta ejecuci√≥n y coordinaci√≥n')

    ejecucionsupervision = models.IntegerField(default=0,
                                               verbose_name=u'Situaci√≥n actual ejecuci√≥n y supervisi√≥n de procesos')
    pejecucionsupervision = models.IntegerField(default=0,
                                                verbose_name=u'Situaci√≥n propuesta ejecuci√≥n y supervisi√≥n de procesos')

    ejecucion = models.IntegerField(default=0, verbose_name=u'Situaci√≥n actual Ejecuci√≥n de procesos')
    pejecucion = models.IntegerField(default=0, verbose_name=u'Situaci√≥n propuesta Ejecuci√≥n de procesos')

    ejecucionapoyo = models.IntegerField(default=0, verbose_name=u'Situaci√≥n actual Ejecuci√≥n de procesos de apoyo')
    pejecucionapoyo = models.IntegerField(default=0, verbose_name=u'Situaci√≥n propuesta Ejecuci√≥n de procesos de apoyo')

    apoyo = models.IntegerField(default=0, verbose_name=u'Situaci√≥n actual apoyo administrativo')
    papoyo = models.IntegerField(default=0, verbose_name=u'Situaci√≥n propuesta Ejecuci√≥n apoyo administrativo')

    gobernante = models.IntegerField(default=0, verbose_name=u'Situaci√≥n actual Gobernante')
    pgobernante = models.IntegerField(default=0, verbose_name=u'Situaci√≥n propuesta Gobernante')

    sustantivo = models.IntegerField(default=0, verbose_name=u'Situaci√≥n actual Sustantivo')
    psustantivo = models.IntegerField(default=0, verbose_name=u'Situaci√≥n propuesta Sustantivo')

    adjetivo = models.IntegerField(default=0, verbose_name=u'Situaci√≥n actual Adjetivo')
    padjetivo = models.IntegerField(default=0, verbose_name=u'Situaci√≥n propuesta Adjetivo')

    def totalproceso(self):
        totalactual = self.gobernante + self.sustantivo + self.adjetivo
        totalpropuesto = self.pgobernante + self.psustantivo + self.padjetivo
        brecha = totalactual - totalpropuesto
        palabras = 'SERVIDORES EXCEDENTES'
        if brecha < 0:
            brecha = brecha * (-1)
            palabras = 'SERVIDORES REQUERIDOS'
        else:
            if brecha == 0:
                palabras = ''
                brecha = ''
        resultado = {'actual': totalactual, 'propuesto': totalpropuesto, 'brecha': brecha, 'palabras': palabras}
        return resultado

    def totalrol(self):
        totalactual = self.jerarquico + self.ejecucioncoord + self.ejecucionsupervision + self.ejecucion + self.ejecucionapoyo + self.apoyo
        totalpropuesto = self.pjerarquico + self.pejecucioncoord + self.pejecucionsupervision + self.pejecucion + self.pejecucionapoyo + self.papoyo
        brecha = totalactual - totalpropuesto
        palabras = 'SERVIDORES EXCEDENTES'
        if brecha < 0:
            brecha = brecha * (-1)
            palabras = 'SERVIDORES REQUERIDOS'
        else:
            if brecha == 0:
                palabras = ''
                brecha = ''
        resultado = {'actual': totalactual, 'propuesto': totalpropuesto, 'brecha': brecha, 'palabras': palabras}
        return resultado


class CabPlanificacionTH(ModeloBase):
    periodo = models.ForeignKey(PeriodoPlanificacionTH, related_name='+', blank=True, null=True,
                                verbose_name=u'Direcci√≥n', on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, related_name='+', blank=True, null=True, verbose_name=u'Direcci√≥n',
                                     on_delete=models.CASCADE)
    fecha = models.DateTimeField(verbose_name=u'Fecha', blank=True, null=True)
    nivelterritorial = models.IntegerField(choices=NIVEL_TERRITORIAL_TH, blank=True, null=True,
                                           verbose_name=u'Nivel territorial')
    tipoproceso = models.IntegerField(choices=TIPO_PROCESO_TH, blank=True, null=True, verbose_name=u'Tipo de proceso')
    estado = models.IntegerField(choices=ESTADOS_PLANTILLA_TH, blank=True, null=True, verbose_name=u'estado de proceso')
    responsable = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True, verbose_name=u'Responsable',
                                    on_delete=models.CASCADE)
    cargo = models.TextField(blank=True, null=True, verbose_name=u'Cargo')

    def __str__(self):
        return u'%s - %s - %s' % (self.departamento, self.proceso(), self.get_nivelterritorial_display())

    def enviarth(self):
        self.gestionplanificacionth_set.objects.filter(status=True)

    def testado(self):
        return ESTADOS_PLANTILLA_TH[self.estado - 1][1]

    def proceso(self):
        return TIPO_PROCESO_TH[self.tipoproceso - 1][1]

    def tterritorial(self):
        return NIVEL_TERRITORIAL_TH[self.nivelterritorial - 1][1]

    def totaldireccion(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('direccion')))
        if suma['valor'] > 1:
            suma = {'valor': 1}
        return suma

    def totalpdireccion(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('pdireccion')))
        if suma['valor'] > 1:
            suma = {'valor': 1}
        return suma

    def totalejecucioncoord(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('ejecucioncoord')))
        return suma

    def totalpejecucioncoord(self):
        suma = null_to_decimal(ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(
            valor=Sum('pejecucioncoord')))
        return suma

    def brechaejecucioncoord(self):
        valor = self.totalejecucioncoord()['valor'] - self.totalpejecucioncoord()['valor']
        letras = ' '
        if valor < 0:
            letras = 'SERVIDORES REQUERIDOS'
            valor = valor * -1
        elif valor > 0:
            letras = 'SERVIDORES EXCEDENTES'

        elif valor == 0:
            valor = ''

        resultado = {'valor': valor, 'letras': letras}
        return resultado

    def totalejecucionsupervision(self):
        suma = null_to_decimal(ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(
            valor=Sum('ejecucionsupervision')))
        return suma

    def totalpejecucionsupervision(self):
        suma = null_to_decimal(ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(
            valor=Sum('pejecucionsupervision')))
        return suma

    def brechaejecucionsupervision(self):
        valor = self.totalejecucionsupervision()['valor'] - self.totalpejecucionsupervision()['valor']
        letras = ' '
        if valor < 0:
            letras = 'SERVIDORES REQUERIDOS'
            valor = valor * -1
        elif valor > 0:
            letras = 'SERVIDORES EXCEDENTES'

        elif valor == 0:
            valor = ''

        resultado = {'valor': valor, 'letras': letras}
        return resultado

    def totalejecucion(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('ejecucion')))
        return suma

    def totalpejecucion(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('pejecucion')))
        return suma

    def brechaejecucion(self):
        valor = self.totalejecucion()['valor'] - self.totalpejecucion()['valor']
        letras = ' '
        if valor < 0:
            letras = 'SERVIDORES REQUERIDOS'
            valor = valor * -1
        elif valor > 0:
            letras = 'SERVIDORES EXCEDENTES'

        elif valor == 0:
            valor = ''

        resultado = {'valor': valor, 'letras': letras}
        return resultado

    def totalejecucionapoyo(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('ejecucionapoyo')))
        return suma

    def totalpejecucionapoyo(self):
        suma = null_to_decimal(ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(
            valor=Sum('pejecucionapoyo')))
        return suma

    def brechaejecucionapoyo(self):
        valor = self.totalejecucionapoyo()['valor'] - self.totalpejecucionapoyo()['valor']
        letras = ' '
        if valor < 0:
            letras = 'SERVIDORES REQUERIDOS'
            valor = valor * -1
        elif valor > 0:
            letras = 'SERVIDORES EXCEDENTES'

        elif valor == 0:
            valor = ''

        resultado = {'valor': valor, 'letras': letras}
        return resultado

    def totaltecnico(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('tecnico')))
        return suma

    def totalptecnico(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('ptecnico')))
        return suma

    def brechatecnico(self):
        valor = self.totaltecnico()['valor'] - self.totalptecnico()['valor']
        letras = ' '
        if valor < 0:
            letras = 'SERVIDORES REQUERIDOS'
            valor = valor * -1
        elif valor > 0:
            letras = 'SERVIDORES EXCEDENTES'

        elif valor == 0:
            valor = ''

        resultado = {'valor': valor, 'letras': letras}
        return resultado

    def totaladministrativo(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('administrativo')))
        return suma

    def totalpadministrativo(self):
        suma = null_to_decimal(ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(
            valor=Sum('padministrativo')))
        return suma

    def totalservicios(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('servicios')))
        return suma

    def totalpservicios(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('pservicios')))
        return suma

    def totalanominadora(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('anominadora')))
        return suma

    def totalviceministros(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('viceministros')))
        return suma

    def totalsubsecretarios(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('subsecretarios')))
        return suma

    def totalcoordinadores(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('coordinadores')))
        return suma

    def totalasesor(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('asesor')))
        return suma

    def totalcoorddespacho(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('coorddespacho')))
        return suma

    def totalpanominadora(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('panominadora')))
        return suma

    def totalpviceministros(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('pviceministros')))
        return suma

    def totalpsubsecretarios(self):
        suma = null_to_decimal(ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(
            valor=Sum('psubsecretarios')))
        return suma

    def totalpcoordinadores(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('pcoordinadores')))
        return suma

    def totalpasesor(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('pasesor')))
        return suma

    def totalpcoorddespacho(self):
        suma = null_to_decimal(
            ReporteBrechasTH.objects.filter(status=True, gestion__cabecera=self).aggregate(valor=Sum('pcoorddespacho')))
        return suma

    def puede_eliminar(self):
        if self.gestionplanificacionth_set.filter(status=True).exists():
            return False
        return True

    def puede_importar(self):
        excluir = GestionPlanificacionTH.objects.values_list('gestion_id').filter(cabecera=self, status=True)
        gestiones = SeccionDepartamento.objects.filter(status=True, departamento=self.departamento).exclude(
            id__in=excluir)
        if gestiones:
            return True
        return False

    def gestiones_producto(self):
        return self.gestionplanificacionth_set.filter(status=True)

class HistorialCabPlanificacionTH(ModeloBase):
    cabecera = models.ForeignKey(CabPlanificacionTH, blank=True, null=True, verbose_name=u'Cabecera',
                                 on_delete=models.CASCADE)
    estado = models.IntegerField(choices=ESTADOS_PLANTILLA_TH, blank=True, null=True, verbose_name=u'estado de gesti√≥n')
    motivo = models.CharField(default='', max_length=300, verbose_name=u'Motivo')

    def testado(self):
        return ESTADOS_PLANTILLA_TH[self.estado - 1][1]


class GestionPlanificacionTH(ModeloBase):
    cabecera = models.ForeignKey(CabPlanificacionTH, blank=True, null=True, verbose_name=u'Cabecera',
                                 on_delete=models.CASCADE)
    gestion = models.ForeignKey(SeccionDepartamento, related_name='+', blank=True, null=True, verbose_name=u'Gesti√≥n',
                                on_delete=models.CASCADE)
    estado = models.IntegerField(choices=ESTADOS_PLANTILLA_TH, blank=True, null=True, verbose_name=u'estado de proceso')
    responsable = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True, verbose_name=u'Responsable',
                                    on_delete=models.CASCADE)
    responsablesubrogante = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True,
                                              verbose_name=u'Responsable Subrogante', on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % (self.gestion)

    def testado(self):
        return ESTADOS_PLANTILLA_TH[self.estado - 1][1]

    # def actividades(self):
    #     return self.actividadsecuencialth_set.filter(status=True).order_by('id')
    def gestion_productos(self):
        return self.gestionproductoservicioth_set.filter(status=True)

    def puede_eliminar(self):
        if self.gestionproductoservicioth_set.filter(status=True).exists():
            producto = self.gestionproductoservicioth_set.filter(status=True)[0]
            if producto.actividadsecuencialth_set.filter(status=True).exists():
                return False
        return True


class GestionProductoServicioTH(ModeloBase):
    producto = models.ForeignKey(ProductoServicioTh, verbose_name=u"Producto/Servicio", on_delete=models.CASCADE)
    productoseccion = models.ForeignKey(ProductoServicioSeccion, verbose_name=u"Producto/Servicio", on_delete=models.CASCADE, blank=True, null=True)
    gestion = models.ForeignKey(GestionPlanificacionTH, verbose_name=u"Gesti√≥n", on_delete=models.CASCADE)
    activoseccion = models.BooleanField(default=False, verbose_name=u'Activo en gestion actual')

    def __str__(self):
        return u"%s - %s" % (self.producto, self.gestion.gestion)

    def actividades(self):
        return self.actividadsecuencialth_set.filter(status=True).order_by('id')


class HistorialGestionPlanificacionTH(ModeloBase):
    gestion = models.ForeignKey(GestionPlanificacionTH, blank=True, null=True, verbose_name=u'Gestion',
                                on_delete=models.CASCADE)
    estado = models.IntegerField(choices=ESTADOS_PLANTILLA_TH, blank=True, null=True, verbose_name=u'estado de gesti√≥n')
    motivo = models.CharField(default='', max_length=300, verbose_name=u'Motivo')

    def save(self, *args, **kwargs):
        self.motivo = self.motivo.strip().upper()
        super(HistorialGestionPlanificacionTH, self).save(*args, **kwargs)

    def testado(self):
        return ESTADOS_PLANTILLA_TH[self.estado - 1][1]


class ActividadSecuencialTH(ModeloBase):
    #-----------------------eliminar------------------------
    # gestion = models.ForeignKey(GestionPlanificacionTH, blank=True, null=True, verbose_name=u'Gestion',
    #                             on_delete=models.CASCADE)
    # -----------------------fin eliminar------------------------
    producto = models.ForeignKey(GestionProductoServicioTH, blank=True, null=True, verbose_name=u'Producto y Seccion',
                                 on_delete=models.CASCADE)
    # -----------------------eliminar------------------------
    # servicio = models.ForeignKey(ProductoServicioSeccion, blank=True, null=True, verbose_name=u'Producto o Servicio',
    #                              on_delete=models.CASCADE)
    # servicios = models.ForeignKey(ProductoServicioTh, blank=True, null=True, verbose_name=u'Producto o Servicio',
    #                               on_delete=models.CASCADE)
    # -----------------------fin eliminar------------------------
    actividad = models.TextField(blank=True, null=True, verbose_name=u'actividad')
    tipoactividad = models.IntegerField(choices=TIPO_ACTIVIDAD_TH, blank=True, null=True,
                                        verbose_name=u'Tipo de actividad')
    productointermedio = models.TextField(blank=True, null=True, verbose_name=u'producto intermedio')
    frecuencia = models.IntegerField(choices=FRECUENCIA_TH, blank=True, null=True, verbose_name=u'Frecuencia')
    volumen = models.IntegerField(default=0, verbose_name=u'Nro de productos intermedios')
    tiempomin = models.IntegerField(default=0, verbose_name=u'tiempo minimo de ejecuci√≥n')
    tiempomax = models.IntegerField(default=0, verbose_name=u'tiempo m√°ximo de ejecuci√≥n')
    pdireccion = models.IntegerField(default=0, verbose_name=u'Porcentaje direcci√≥n')
    pejecucioncoord = models.IntegerField(default=0, verbose_name=u'Porcentaje Ejecuci√≥n y Coordinaci√≥n de procesos')
    pejecucionsupervision = models.IntegerField(default=0,
                                                verbose_name=u'Porcentaje Ejecuci√≥n y Supervisi√≥n de procesos')
    pejecucion = models.IntegerField(default=0, verbose_name=u'Porcentaje Ejecuci√≥n de procesos')
    pejecucionapoyo = models.IntegerField(default=0, verbose_name=u'Porcentaje Ejecuci√≥n de procesos de apoyo')
    ptecnico = models.IntegerField(default=0, verbose_name=u'Porcentaje T√©cnico')

    def productosintermedios(self):
        return self.actividadproductointermedio_set.filter(status=True)

    def ttipoactividad(self):
        return TIPO_ACTIVIDAD_TH[self.tipoactividad - 1][1] if self.tipoactividad else ''

    def tfrecuencia(self):
        return FRECUENCIA_TH[self.frecuencia - 1][1] if self.frecuencia else ''

    def validacion(self):
        return self.pdireccion + self.pejecucioncoord + self.pejecucionsupervision + self.pejecucion + self.pejecucionapoyo + self.ptecnico

    def resulvolumen(self):
        valor = 0
        if self.frecuencia == 1:
            valor = float(self.volumen) * 20
        elif self.frecuencia == 2:
            valor = float(self.volumen) * 4
        elif self.frecuencia == 3:
            valor = float(self.volumen) * 2
        elif self.frecuencia == 4:
            valor = float(self.volumen) * 1
        elif self.frecuencia == 5:
            valor = float(self.volumen) / 3
        elif self.frecuencia == 6:
            valor = float(self.volumen) / 6
        elif self.frecuencia == 7:
            valor = float(self.volumen) / 12
        print(valor)
        return valor

    def resultiempoejecucion(self):
        valor = (float(self.tiempomin) + float(self.tiempomax)) / 2

        print(valor)
        return valor

    def resulminutos(self):
        valor = self.resulvolumen() * self.resultiempoejecucion()
        print(valor)
        return valor

    def resuldireccion(self):
        return (self.resulminutos() * (float(self.pdireccion)) / 100)

    def resulejecucioncoord(self):
        return (self.resulminutos() * (float(self.pejecucioncoord)) / 100)

    def resulejecucionsupervision(self):
        return (self.resulminutos() * (float(self.pejecucionsupervision)) / 100)

    def resulejecucion(self):
        return (self.resulminutos() * (float(self.pejecucion)) / 100)

    def resulejecucionapoyo(self):
        return (self.resulminutos() * (float(self.pejecucionapoyo)) / 100)

    def resultecnico(self):
        return (self.resulminutos() * (float(self.ptecnico)) / 100)

    def resuldireccionper(self):
        valorcalculo = self.cabecera.periodo.valorcalculo if self.cabecera.periodo.valorcalculo else 9225.84096
        valor = round((self.resuldireccion() / float(valorcalculo)), 1)
        return valor

    def resulejecucioncoordper(self):
        valorcalculo = self.cabecera.periodo.valorcalculo if self.cabecera.periodo.valorcalculo else 9225.84096
        valor = round((self.resulejecucioncoord() / float(valorcalculo)), 1)
        return valor

    def resulejecucionsupervisionper(self):
        valorcalculo = self.cabecera.periodo.valorcalculo if self.cabecera.periodo.valorcalculo else 9225.84096
        valor = round((self.resulejecucionsupervision() / float(valorcalculo)), 1)
        return valor

    def resulejecucionper(self):
        valorcalculo = self.cabecera.periodo.valorcalculo if self.cabecera.periodo.valorcalculo else 9225.84096
        valor = round((self.resulejecucion() / float(valorcalculo)), 1)
        return valor

    def resulejecucionapoyoper(self):
        valorcalculo = self.cabecera.periodo.valorcalculo if self.cabecera.periodo.valorcalculo else 9225.84096
        valor = round((self.resulejecucionapoyo() * float(valorcalculo)), 1)
        return valor

    def resultecnicoper(self):
        valorcalculo = self.cabecera.periodo.valorcalculo if self.cabecera.periodo.valorcalculo else 9225.84096
        valor = round((self.resultecnico() * float(valorcalculo)), 1)
        return valor


class ActividadProductoIntermedio(ModeloBase):
    actividad = models.ForeignKey(ActividadSecuencialTH, blank=True, null=True, verbose_name=u'Actividad secuencial',
                                  on_delete=models.CASCADE)
    producto = models.ForeignKey(ProductoIntermedioTH, blank=True, null=True, verbose_name=u'Producto intermedio',
                                 on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % (self.producto.descripcion)


class ReporteBrechasTH(ModeloBase):
    gestion = models.ForeignKey(GestionPlanificacionTH, blank=True, null=True, verbose_name=u'Gesti√≥n configurada',
                                on_delete=models.CASCADE)
    direccion = models.IntegerField(default=0, verbose_name=u'Porcentaje direcci√≥n')
    pdireccion = models.IntegerField(default=0, verbose_name=u'propuesta direcci√≥n')
    ejecucioncoord = models.IntegerField(default=0, verbose_name=u'Porcentaje Ejecuci√≥n y Coordinaci√≥n de procesos')
    pejecucioncoord = models.IntegerField(default=0, verbose_name=u'propuesta Ejecuci√≥n y Coordinaci√≥n de procesos')
    ejecucionsupervision = models.IntegerField(default=0,
                                               verbose_name=u'Porcentaje Ejecuci√≥n y Supervisi√≥n de procesos')
    pejecucionsupervision = models.IntegerField(default=0,
                                                verbose_name=u'propuesta Ejecuci√≥n y Supervisi√≥n de procesos')
    ejecucion = models.IntegerField(default=0, verbose_name=u'Porcentaje Ejecuci√≥n de procesos')
    pejecucion = models.IntegerField(default=0, verbose_name=u'propuesta Ejecuci√≥n de procesos')
    ejecucionapoyo = models.IntegerField(default=0, verbose_name=u'Porcentaje Ejecuci√≥n de procesos de apoyo')
    pejecucionapoyo = models.IntegerField(default=0, verbose_name=u'propuesta Ejecuci√≥n de procesos de apoyo')
    tecnico = models.IntegerField(default=0, verbose_name=u'Porcentaje T√©cnico')
    ptecnico = models.IntegerField(default=0, verbose_name=u'propuesta T√©cnico')
    administrativo = models.IntegerField(default=0, verbose_name=u'Porcentaje administrativo')
    padministrativo = models.IntegerField(default=0, verbose_name=u'propuesta administrativo')
    servicios = models.IntegerField(default=0, verbose_name=u'Porcentaje servicios')
    pservicios = models.IntegerField(default=0, verbose_name=u'propuesta servicios')

    contrato = models.IntegerField(default=0, verbose_name=u'Contrato ocasional')
    provisional = models.IntegerField(default=0, verbose_name=u'Nombramiento provisional')
    permanente = models.IntegerField(default=0, verbose_name=u'Nombramiento permanente')
    njs = models.IntegerField(default=0, verbose_name=u'njs')
    trabajo = models.IntegerField(default=0, verbose_name=u'C√≥digo de trabajo')
    otros = models.IntegerField(default=0, verbose_name=u'Otros reg√≠menes')
    vacantes = models.IntegerField(default=0, verbose_name=u'Vacantes')

    anominadora = models.IntegerField(default=0, verbose_name=u'Autoridad Nominadora')
    viceministros = models.IntegerField(default=0, verbose_name=u'Viceministros')
    subsecretarios = models.IntegerField(default=0, verbose_name=u'Subsecretarios')
    coordinadores = models.IntegerField(default=0, verbose_name=u'Coordinadores')
    asesor = models.IntegerField(default=0, verbose_name=u'asesor')
    coorddespacho = models.IntegerField(default=0, verbose_name=u'Coordinador de despacho')

    panominadora = models.IntegerField(default=0, verbose_name=u'Propuesta Autoridad Nominadora')
    pviceministros = models.IntegerField(default=0, verbose_name=u'Propuesta Viceministros')
    psubsecretarios = models.IntegerField(default=0, verbose_name=u'Propuesta Subsecretarios')
    pcoordinadores = models.IntegerField(default=0, verbose_name=u'Propuesta Coordinadores')
    pasesor = models.IntegerField(default=0, verbose_name=u'Propuesta Asesor')
    pcoorddespacho = models.IntegerField(default=0, verbose_name=u'Propuesta Coordinador de despacho')

    def totaldireccionreal(self):
        return self.direccion - self.pdireccion

    def totalloes(self):
        return self.contrato + self.provisional + self.permanente + self.njs + self.trabajo + self.otros + self.vacantes

    def totalgob(self):
        return self.anominadora + self.viceministros + self.subsecretarios + self.coordinadores + self.asesor + self.coorddespacho

    def ptotalgob(self):
        return self.panominadora + self.pviceministros + self.psubsecretarios + self.pcoordinadores + self.pasesor + self.pcoorddespacho

    def totalbrechagobreal(self):
        return self.totalgob() - self.ptotalgob()

    def totalbrechagob(self):
        tot = self.totalgob() - self.ptotalgob()
        if tot < 0:
            return (tot * (-1))
        return tot

    def totpalabrasgob(self):
        if self.totalbrechagobreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalbrechagobreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalanominadorareal(self):
        return self.anominadora - self.panominadora

    def totalanominadora(self):
        tot = self.anominadora - self.panominadora
        if tot < 0:
            return (tot * (-1))
        return tot

    def palanominadora(self):
        if self.totalanominadorareal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalanominadorareal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalviceministrosreal(self):
        return self.viceministros - self.pviceministros

    def totalviceministros(self):
        tot = self.viceministros - self.pviceministros
        if tot < 0:
            return (tot * (-1))
        return tot

    def palviceministros(self):
        if self.totalviceministrosreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalviceministrosreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalsubsecretariosreal(self):
        return self.subsecretarios - self.psubsecretarios

    def totalsubsecretarios(self):
        tot = self.subsecretarios - self.psubsecretarios
        if tot < 0:
            return (tot * (-1))
        return tot

    def palsubsecretarios(self):
        if self.totalsubsecretariosreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalsubsecretariosreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalcoordinadoresreal(self):
        return self.coordinadores - self.pcoordinadores

    def totalcoordinadores(self):
        tot = self.coordinadores - self.pcoordinadores
        if tot < 0:
            return (tot * (-1))
        return tot

    def palcoordinadores(self):
        if self.totalcoordinadoresreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalcoordinadoresreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalasesorreal(self):
        return self.asesor - self.pasesor

    def totalasesor(self):
        tot = self.asesor - self.pasesor
        if tot < 0:
            return (tot * (-1))
        return tot

    def palasesor(self):
        if self.totalasesorreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalasesorreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalcoorddespachoreal(self):
        return self.coorddespacho - self.pcoorddespacho

    def totalcoorddespacho(self):
        tot = self.coorddespacho - self.pcoorddespacho
        if tot < 0:
            return (tot * (-1))
        return tot

    def palcoorddespacho(self):
        if self.totalcoorddespachoreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalcoorddespachoreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totaldireccion(self):
        tot = self.direccion - self.pdireccion
        if tot < 0:
            return (tot * (-1))
        return tot

    def paldireccion(self):
        if self.totaldireccionreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totaldireccionreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalejecucioncoordreal(self):
        return self.ejecucioncoord - self.pejecucioncoord

    def totalejecucioncoord(self):
        tot = self.ejecucioncoord - self.pejecucioncoord
        if tot < 0:
            return (tot * (-1))
        return tot

    def palejecucioncoord(self):
        if self.totalejecucioncoordreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalejecucioncoordreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalejecucionsupervisionreal(self):
        return self.ejecucionsupervision - self.pejecucionsupervision

    def totalejecucionsupervision(self):
        tot = self.ejecucionsupervision - self.pejecucionsupervision
        if tot < 0:
            return (tot * (-1))
        return tot

    def palpejecucionsupervision(self):
        if self.totalejecucionsupervisionreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalejecucionsupervisionreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalejecucionreal(self):
        return self.ejecucion - self.pejecucion

    def totalejecucion(self):
        tot = self.ejecucion - self.pejecucion
        if tot < 0:
            return (tot * (-1))
        return tot

    def palejecucion(self):
        if self.totalejecucionreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalejecucionreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalejecucionapoyoreal(self):
        return self.ejecucionapoyo - self.pejecucionapoyo

    def totalejecucionapoyo(self):
        tot = self.ejecucionapoyo - self.pejecucionapoyo
        if tot < 0:
            return (tot * (-1))
        return tot

    def palpejecucionapoyo(self):
        if self.totalejecucionapoyoreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalejecucionapoyoreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totaltecnicoreal(self):
        return self.tecnico - self.ptecnico

    def totaltecnico(self):
        tot = self.tecnico - self.ptecnico
        if tot < 0:
            return (tot * (-1))
        return tot

    def paltecnico(self):
        if self.totaltecnicoreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totaltecnicoreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totaladministrativoreal(self):
        return self.administrativo - self.padministrativo

    def totaladministrativo(self):
        tot = self.administrativo - self.padministrativo
        if tot < 0:
            return (tot * (-1))
        return tot

    def palpadministrativo(self):
        if self.totaladministrativoreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totaladministrativoreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalserviciosreal(self):
        return self.servicios - self.pservicios

    def totalservicios(self):
        tot = self.servicios - self.pservicios
        if tot < 0:
            return (tot * (-1))
        return tot

    def palservicios(self):
        if self.totalserviciosreal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalserviciosreal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''

    def totalpropuesto(self):
        return self.pdireccion + self.pejecucioncoord + self.pejecucionsupervision + self.pejecucion + self.pejecucionapoyo + self.ptecnico + self.padministrativo + self.pservicios

    def totalactual(self):
        return self.direccion + self.ejecucioncoord + self.ejecucionsupervision + self.ejecucion + self.ejecucionapoyo + self.tecnico + self.administrativo + self.servicios

    def totalbrechareal(self):
        return self.totalactual() - self.totalpropuesto()

    def totalbrecha(self):
        tot = self.totalactual() - self.totalpropuesto()
        if tot < 0:
            return (tot * (-1))
        return tot

    def totpalabras(self):
        if self.totalbrechareal() < 0:
            return 'SERVIDORES REQUERIDOS'
        elif self.totalbrechareal() > 0:
            return 'SERVIDORES EXCEDENTES'
        return ''


class TipoVacunaCovid(ModeloBase):
    nombre = models.CharField(blank=True, null=True, max_length=550, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % (self.nombre)

    class Meta:
        verbose_name = u"Tipo de Vacuna"
        verbose_name_plural = u"Tipos de Vacunas"

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        if extra:
            return eval('TipoVacunaCovid.objects.filter(Q(nombre__icontains="%s")).filter(%s).distinct()[:%s]' % (q, extra, limit))
        return TipoVacunaCovid.objects.filter(Q(nombre__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return u'%s' % self.nombre

    def flexbox_alias(self):
        return [self.id, self.nombre.upper()]

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.strip().upper()
        super(TipoVacunaCovid, self).save(*args, **kwargs)


class VacunaCovid(ModeloBase):
    persona = models.ForeignKey('sga.Persona', related_name='+', blank=True, null=True, verbose_name=u'Persona', on_delete=models.CASCADE)
    recibiovacuna = models.BooleanField(default=False, verbose_name=u'¬øRecibi√≥ Vacuna?')
    tipovacuna = models.ForeignKey(TipoVacunaCovid, related_name='+', blank=True, null=True, verbose_name=u'Tipo de Vacuna', on_delete=models.CASCADE)
    recibiodosiscompleta = models.BooleanField(default=False, verbose_name=u'¬øRecibi√≥ Dosis Completa?')
    # fecha_certificado = models.DateField(verbose_name=u'Fecha', blank=True, null=True)
    certificado = models.FileField(upload_to='certificado/%Y/%m/%d', blank=True, null=True, verbose_name=u'Certificado de Actividad')
    deseavacunarse = models.BooleanField(default=False, verbose_name=u'¬øDesea Vacunarse?')

    def __str__(self):
        return u'%s - %s' % (self.persona, self.recibiovacuna)

    class Meta:
        verbose_name = u"Vacuna Covid Persona"
        verbose_name_plural = u"Vacunas Covid Personas"

    def get_recibio(self):
        if self.recibiovacuna:
            return 'fa fa-check-circle text-success'
        else:
            return 'fa fa-times-circle text-error'

    def get_recibiodosiscompleta(self):
        if self.recibiodosiscompleta:
            return 'fa fa-check-circle text-success'
        else:
            return 'fa fa-times-circle text-error'

    def get_deseavacunarse(self):
        if self.deseavacunarse:
            return 'fa fa-check-circle text-success'
        else:
            return 'fa fa-times-circle text-error'

    def total_dosis(self):
        return VacunaCovidDosis.objects.filter(cabvacuna=self, status=True).count()

    def dosis(self):
        return VacunaCovidDosis.objects.filter(cabvacuna=self, status=True).order_by('numdosis')

    def get_certificado(self):
        if self.certificado:
            return self.certificado.url
        else:
            return None


class VacunaCovidDosis(ModeloBase):
    cabvacuna = models.ForeignKey(VacunaCovid, related_name='+', blank=True, null=True, verbose_name=u'Cabecera', on_delete=models.CASCADE)
    numdosis = models.IntegerField(choices=TIPO_SISTEMA, verbose_name=u'N√∫mero de Dosis', default=0)
    fechadosis = models.DateTimeField(verbose_name=u'Fecha', blank=True, null=True)

    def __str__(self):
        return u'%s - %s' % (self.cabvacuna, self.numdosis)

    class Meta:
        verbose_name = u"Vacuna Covid Dosis Persona"
        verbose_name_plural = u"Vacunas Covid Dosis Personas"


class DepartamentoFirma(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return DepartamentoFirma.objects.filter(Q(nombre__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return "%s - %s" % (self.id, self.nombre)

    def flexbox_alias(self):
        return [self.id, self.nombre, '']

    def tiene_firmas(self):
        return self.personadepartamentofirmas_set.filter(status=True).exists()


class TipoPersonaDepartamentoFirma(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')

    def __str__(self):
        return u'%s' % self.nombre

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return TipoPersonaDepartamentoFirma.objects.filter(Q(nombre__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return "%s - %s" % (self.id, self.nombre)

    def flexbox_alias(self):
        return [self.id, self.nombre, '']

    def tiene_firmas(self):
        return self.personadepartamentofirmas_set.filter(status=True).exists()


class TipoSubrogante(ModeloBase):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')
    abreviatura = models.CharField(max_length=10, blank=True, null=True, verbose_name=u'Abreviatura')

    def __str__(self):
        return u'%s' % self.nombre

    @staticmethod
    def flexbox_query(q, extra=None, limit=25):
        return TipoSubrogante.objects.filter(Q(nombre__icontains=q)).distinct()[:limit]

    def flexbox_repr(self):
        return "%s - %s" % (self.id, self.abreviatura)

    def flexbox_alias(self):
        return [self.id, self.nombre, self.abreviatura]


class PersonaDepartamentoFirmas(ModeloBase):
    personadepartamento = models.ForeignKey(Persona, verbose_name=u"Firma persona", on_delete=models.CASCADE)
    tipopersonadepartamento = models.ForeignKey(TipoPersonaDepartamentoFirma, null=True, blank=True,
                                                verbose_name="Tipo Persona Deppartamento", on_delete=models.CASCADE)
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, null=True, blank=True,
                                           verbose_name="Denominacion puesto", on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, null=True, blank=True, verbose_name="Denominacion puesto",
                                     on_delete=models.CASCADE)
    departamentofirma = models.ForeignKey(DepartamentoFirma, null=True, blank=True, verbose_name="Departamento Firma",
                                          on_delete=models.CASCADE)
    tiposubrogante = models.ForeignKey(TipoSubrogante, null=True, blank=True, verbose_name="Tipo Subrogante",
                                       on_delete=models.CASCADE)
    activo = models.BooleanField(default=False, verbose_name=u'Activo')
    actualidad = models.BooleanField(default=False, verbose_name=u'Actualidad')
    fechainicio = models.DateField(verbose_name=u'Fecha Inicio', blank=True, null=True)
    fechafin = models.DateField(verbose_name=u'Fecha Fin', blank=True, null=True)

    def __str__(self):
        return u'%s' % self.personadepartamento


# Perfil de puesto TH

class PerfilPuestoTh(ModeloBase):
    codigo = models.CharField(max_length=100, blank=True, null=True, verbose_name=u"C√≥digo")
    denominacionpuesto = models.ForeignKey(DenominacionPuesto, blank=True, null=True,
                                           verbose_name=u"Denominaci√≥n de puesto", on_delete=models.CASCADE)
    denominacionperfil = models.ForeignKey(PuestoDenominacion, related_name='+', blank=True, null=True,
                                           verbose_name=u"Denominaci√≥n de perfil", on_delete=models.CASCADE)
    nivel = models.IntegerField(choices=NIVEL_PERFIL_PUESTO, blank=True, null=True, verbose_name=u'Nivel')
    direccion = models.ForeignKey(DireccionPerfilPuesto, related_name='+', blank=True, null=True,
                                  verbose_name=u"Direcci√≥n de perfil", on_delete=models.CASCADE)
    secciondepartamento = models.ForeignKey(SeccionDepartamento, blank=True, null=True,
                                            verbose_name=u"Seccion de departamento", on_delete=models.CASCADE)
    escala = models.ForeignKey(EscalaSalarial, blank=True, null=True, verbose_name=u"Escala salarial",
                               on_delete=models.CASCADE)
    mision = models.TextField(default='', verbose_name=u'Misi√≥n', blank=True)
    especificidadexperiencia = models.TextField(default='', verbose_name=u'Expecificidad de la experiencia', blank=True)
    notaextra = models.TextField(default='', verbose_name=u'Pide de pagina descripcion y perfil de puesto th',
                                 blank=True)
    interfaz = models.TextField(default='', verbose_name=u'Campo Interfaz', blank=True)
    capacitacionrequerida = models.TextField(default='', verbose_name=u'Capacitacion Requerido', blank=True)

    def __str__(self):
        return u'%s' % self.denominacionperfil

    def areas_de_conocimiento(self):
        return self.areaconocimientoperfilpuesto_set.filter(status=True)

    def actividadesesenciales(self):
        return self.actividadesesencialesperfilpuesto_set.filter(status=True)

    def competncias_tecnicas(self):
        return self.competenciasperfilpuesto_set.filter(status=True, competencia__competencia__tipo__id=1).order_by(
            'fecha_creacion')

    def competncias_conductual(self):
        return self.competenciasperfilpuesto_set.filter(status=True, competencia__competencia__tipo__id=2).order_by(
            'fecha_creacion')

    def en_uso(self):
        return self.competenciasperfilpuesto_set.filter(status=True).exists()


class ActividadesEsencialesPerfilPuesto(ModeloBase):
    perfilpuesto = models.ForeignKey(PerfilPuestoTh, blank=True, null=True, verbose_name=u"Perfil Puesto th",
                                     on_delete=models.CASCADE)
    actividad = models.TextField(default='', verbose_name=u'Actividad esencial', blank=True)
    conocimientoadicional = models.TextField(default='', verbose_name=u'Conocimiento Adicional', blank=True)

    def __str__(self):
        return u"%s" % self.actividad

    def save(self, *args, **kwargs):
        self.actividad = self.actividad.strip()
        self.conocimientoadicional = self.conocimientoadicional.strip()
        super(ActividadesEsencialesPerfilPuesto, self).save(*args, **kwargs)


class AreaConocimientoPerfilPuesto(ModeloBase):
    perfil = models.ForeignKey(PerfilPuestoTh, blank=True, null=True, verbose_name=u"Cabecera de perfil",
                               on_delete=models.CASCADE)
    areaconocimiento = models.ForeignKey(SubAreaEspecificaConocimientoTitulacion, blank=True, null=True,
                                         verbose_name=u"Area de conocimiento", on_delete=models.CASCADE)

    def __str__(self):
        return u"%s" % (self.areaconocimiento)


#
# class CapacitacionPerfilPuesto(ModeloBase):
#     perfil = models.ForeignKey(PerfilPuesto, blank=True, null=True, verbose_name=u"Cabecera de perfil")
#     #instruccion = models.ForeignKey(DenominacionPerfilPuesto, blank=True, null=True, verbose_name=u"Perfil con instrucci√≥n")
#
class CompetenciasPerfilPuesto(ModeloBase):
    perfil = models.ForeignKey(PerfilPuestoTh, blank=True, null=True, verbose_name=u"Cabecera de perfil",
                               on_delete=models.CASCADE)
    competencia = models.ForeignKey(DetalleCompetenciaLaboral, blank=True, null=True,
                                    verbose_name=u"Competencia Laboral", on_delete=models.CASCADE)


#     #aqui va el diario de competencias
#     #instruccion = models.ForeignKey(DenominacionPerfilPuesto, blank=True, null=True, verbose_name=u"Perfil con instrucci√≥n")

class RegistroRubro(ModeloBase):
    rubro = models.ForeignKey(Rubro, verbose_name=u'Rubro', on_delete=models.CASCADE)
    cuentabanco = models.ForeignKey(CuentaBanco, blank=True, null=True, verbose_name=u'Tipo cuenta',
                                    on_delete=models.CASCADE)
    formapago = models.ForeignKey(FormaDePago, blank=True, null=True, verbose_name=u'Forma de pago',
                                  on_delete=models.CASCADE)
    fechadeposito = models.DateField(verbose_name=u'Fecha')
    valortotal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor total')
    archivo = models.FileField(upload_to='comprobantepago/%Y/%m/%d', blank=True, null=True, verbose_name=u'Comprobante')

    def __str__(self):
        return u'%s' % self.rubro


class ComprobanteAlumno(ModeloBase):
    persona = models.ForeignKey('sga.Persona', blank=True, null=True, on_delete=models.CASCADE)
    rubro = models.ForeignKey(Rubro, blank=True, null=True, on_delete=models.CASCADE)
    telefono = models.TextField(verbose_name='Tel√©fono', blank=True, null=True, max_length=1000)
    email = models.TextField(verbose_name='Email', blank=True, null=True, max_length=1000)
    curso = models.TextField(verbose_name='Curso', blank=True, null=True, max_length=1000)
    carrera = models.TextField(verbose_name='Carrera', blank=True, null=True, max_length=1000)
    cuentadeposito = models.TextField(verbose_name='Cuenta dep√≥sito', blank=True, null=True, max_length=1000)
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor')
    fechapago = models.DateField(verbose_name=u'Fecha Pago', blank=True, null=True)
    observacion = models.TextField(verbose_name='Observaci√≥n', blank=True, null=True)
    tipocomprobante = models.IntegerField(choices=TIPO_COMPROBANTE, default=1, null=True, blank=True,
                                          verbose_name=u"Tipo de Comprobante")
    comprobantes = models.ImageField(upload_to='comprobantepago/%Y/%m/%d', verbose_name='Archivo', null=True,
                                     blank=True)
    idcomprobanteepunemi = models.IntegerField(default=0, verbose_name=u'codigo del comprobante de epunemi')
    matricula = models.ForeignKey('sga.Matricula', blank=True, null=True, on_delete=models.CASCADE)
    estados = models.IntegerField(choices=ESTADOS_COMPROBANTES, default=1, null=True, blank=True,
                                  verbose_name=u"Estado")
    tiporegistro = models.IntegerField(choices=TIPO_REGISTRO_COMPROBANTE, default=1, null=True, blank=True,
                                       verbose_name=u"Si es comprobante pago o comprobante anticipo")
    inscripcioncohorte = models.ForeignKey('posgrado.InscripcionCohorte', blank=True, null=True,
                                           on_delete=models.CASCADE)
    fechavalidacion = models.DateField(verbose_name=u'Fecha validacion', blank=True, null=True)
    cuentabancaria = models.ForeignKey(CuentaBanco, verbose_name="Cuenta bancaria", null=True, blank=True,
                                       on_delete=models.CASCADE)
    asesor = models.ForeignKey('posgrado.AsesorComercial', blank=True, null=True, verbose_name=u'Asesor Comercial',
                               on_delete=models.CASCADE)
    referenciapapeleta = models.CharField(verbose_name=u'Referencia papeleta', max_length=100,null=True,blank=True)
    # DATOS FACTURACION
    activofacturacionotros = models.BooleanField(verbose_name=u'Activo para datos de facturacion', null=True,
                                                 blank=True)
    nombres = models.CharField(max_length=600, verbose_name=u'Nombres factura', null=True, blank=True)
    apellidos = models.CharField(max_length=600, verbose_name=u'Apellidos factura', null=True, blank=True)
    identificacion = models.CharField(max_length=14, verbose_name=u'Identificacion factura', null=True, blank=True)
    correo = models.CharField(max_length=100, verbose_name=u'Correo factura', null=True, blank=True)
    telefonofactura = models.CharField(max_length=100, verbose_name=u'Telefono factura', null=True, blank=True)
    direccion = models.TextField(verbose_name=u'Telefono factura', null=True, blank=True)

    def typefile(self):
        if self.comprobantes:
            return self.comprobantes.name[self.comprobantes.name.rfind("."):]
        else:
            return None

    def get_tipocomprobante(self):
        return dict(TIPO_COMPROBANTE)[self.tipocomprobante]

    def rubroscomprobantealumno(self):
        return self.comprobantealumnorubros_set.filter(status=True)

    def esta_aprobado_epunemi(self):
        from django.db import connections
        estado = False
        cursor = connections['epunemi'].cursor()

        sql = """SELECT comp.estados FROM sagest_comprobantealumno AS comp WHERE comp.idcomprobanteunemi=%s AND comp.status=TRUE;  """ % (
            self.id)
        cursor.execute(sql)

        idcomp = cursor.fetchone()

        if idcomp is not None:
            if int(idcomp[0]) == 2:
                estado = True
        return estado

    def saldototalrubro(self):
        valortotal = 0.00
        for valor in self.rubroscomprobantealumno():
            valortotal += valor.rubro.valor_total_relacionados()
        return valortotal

    def diasingresado(self):
        fechaactual = date.today()
        x = fechaactual - self.fecha_creacion.date()
        return x.days

    def estado_epunemi(self):
        cursor = connections['epunemi'].cursor()
        sql = """SELECT comp.estados FROM sagest_comprobantealumno comp INNER JOIN sga_persona per ON comp.persona_id = per.id WHERE comp.status = TRUE AND per.cedula = '%s'""" % (self.persona.cedula)
        cursor.execute(sql)
        regi = cursor.fetchone()
        return regi[0]

    def valor_rubros_asignados(self):
        comprobante = self.comprobantealumnorubros_set.filter(status=True).aggregate(Sum('rubro__valortotal'))['rubro__valortotal__sum']
        return comprobante

    def __str__(self):
        return "%s - %s" % (self.persona, self.observacion)

    class Meta:
        verbose_name = "Comprobante alumno"
        verbose_name_plural = "Comprobantes alumnos"
        ordering = ['id']


class HistorialGestionComprobanteAlumno(ModeloBase):
    comprobante = models.ForeignKey(ComprobanteAlumno, verbose_name=u"Comprobante del alumno", on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona, verbose_name=u"Persona quien cambia estado del comprobante",
                                on_delete=models.CASCADE)
    estado = models.IntegerField(choices=ESTADOS_COMPROBANTES, default=1, null=True, blank=True, verbose_name=u"Estado")
    fecha = models.DateTimeField(verbose_name=u"Fecha")
    observacion = models.TextField(verbose_name=u"Observaci√≥n", null=True, blank=True)

    def __str__(self):
        return "%s - %s" % (self.comprobante, self.get_estado_display())

    class Meta:
        verbose_name = "Historial gestion comprobante pago"
        verbose_name_plural = "Historial de gestiones de comprobantes de pagos"
        ordering = ['id']


class ComprobanteAlumnoRubros(ModeloBase):
    rubro = models.ForeignKey(Rubro, verbose_name=u'Rubro', on_delete=models.CASCADE)
    comprobantealumno = models.ForeignKey(ComprobanteAlumno, verbose_name=u'Comprobante Alumno',
                                          on_delete=models.CASCADE)

    def __str__(self):
        return u"%s - %s" % (self.comprobantealumno, self.rubro)

    class Meta:
        verbose_name = u"Comprobante alumno rubro"
        verbose_name_plural = u"Comprobantes alumnos rubros"
        ordering = ['id']


# detalle de marcadas y actividad
class MarcadaActividad(ModeloBase):
    logmarcada = models.ForeignKey(LogMarcada, blank=True, null=True, on_delete=models.CASCADE)
    claseactividad = models.ForeignKey('sga.ClaseActividad', blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return u'%s' % self.logmarcada

    class Meta:
        verbose_name = u"Log Marcada Actividad"
        verbose_name_plural = u"Logs Marcadas Actividades"
        ordering = ['id']


ESTADOS_ARCHIVO_CONTRATO_PERSONAL = (
    (1, u'EN PROCESO'),
    (2, u'ENVIADO A DIRECTOR/A'),
    (3, u'FINALIZADO'),
    (4, u'RECHAZADO DIRECTOR/A'),
    (5, u'CORREGIR'),
)


class HistorialArchivosContratos(ModeloBase):
    personacontrato = models.ForeignKey(PersonaContratos, blank=True, null=True, verbose_name=u'Contratos',
                                        on_delete=models.CASCADE)
    estado_archivo = models.IntegerField(choices=ESTADOS_ARCHIVO_CONTRATO_PERSONAL, blank=True, null=True,
                                         verbose_name=u'estado de gesti√≥n')
    archivo = models.FileField(upload_to='contratos/historialcontraper/%Y/%m/%d', blank=True, null=True,
                               verbose_name=u'Archivo')
    observacion = models.TextField(verbose_name=u"Observaci√≥n", blank=True, null=True)

    def __str__(self):
        return u'%s - %s' % (self.personacontrato)

    class Meta:
        verbose_name = u"Historial Archivo Contrato Persona"
        verbose_name_plural = u"Historial Archivo Contrato Persona"

    def save(self, *args, **kwargs):
        super(HistorialArchivosContratos, self).save(*args, **kwargs)


class CategoriaTipoPermiso(ModeloBase):
    tipopermiso = models.ForeignKey(TipoPermiso, verbose_name="Permiso", on_delete=models.CASCADE)
    descripcion = models.TextField(verbose_name='Categoria', blank=True, null=True, max_length=1000)

    def __str__(self):
        return u'%s' % (self.descripcion.upper())

    def en_uso(self):
        return self.permisoinstitucional_set.filter(status=True).exists()

    class Meta:
        verbose_name = u"Subcategoria de Permisos"
        verbose_name_plural = u"Subcategorias de Permisos"
        ordering = ['id']


ESTADOS_JUSTIFICACION_MARCADA = (
    (1, 'Solicitado'),
    (2, 'Pendiente'),
    (3, 'Aprobado'),
    (4, 'Cerrado'),
    (5, 'Rechazado'),
)

TIPO_SOLICITUD_JUST_MARCADA = (
    (1, 'Omisi√≥n'),
    (2, 'Retraso'),
)

TIPO_SECUENCIA_MARCADA = (
    (1, 'Entrada'),
    (2, 'Entrada almuerzo'),
    (3, 'Salida almuerzo'),
    (4, 'Salida'),
)


class SolicitudJustificacionMarcada(ModeloBase):
    solicita = models.ForeignKey("sga.Persona", verbose_name=u'Persona', on_delete=models.CASCADE)
    estado = models.IntegerField(verbose_name=u'Estado solicitud', choices=ESTADOS_JUSTIFICACION_MARCADA)
    observacion = models.TextField(verbose_name=u"Observaci√≥n", blank=True, null=True)
    fecha = models.DateTimeField(verbose_name=u'Fecha Solicitud')
    documento = models.FileField(upload_to='justificamarcada/', verbose_name='Evidencia', blank=True, null=True)

    class Meta:
        verbose_name = u"Justificacion Marcada"
        verbose_name_plural = u"Justificacion de Marcadas"
        ordering = ['id']

    def __str__(self):
        return "%s - %s" % (self.solicita, self.observacion)


class DetalleSolicitudJustificacionMarcada(ModeloBase):
    solicitud = models.ForeignKey(SolicitudJustificacionMarcada, verbose_name=u'Solicitud Justificacion',
                                  on_delete=models.CASCADE)
    dia = models.ForeignKey(LogDia, verbose_name=u'Log Dia', on_delete=models.CASCADE)
    marcada = models.ForeignKey(LogMarcada, verbose_name=u'Log Marcada', on_delete=models.CASCADE, null=True,
                                blank=True)
    hora = models.DateTimeField(blank=True, null=True, verbose_name=u'Marcada en tiempo')
    secuencia = models.IntegerField(verbose_name=u'Tipo marcada', choices=TIPO_SECUENCIA_MARCADA)
    tiposolcitud = models.IntegerField(verbose_name=u'Tipo solicitu', choices=TIPO_SOLICITUD_JUST_MARCADA)

    class Meta:
        verbose_name = u"Detalle Justificacion Marcada"
        verbose_name_plural = u"Detalle Justificacion de Marcadas"
        ordering = ['id']

    def __str__(self):
        return "%s - %s %s" % (self.solicitud, self.dia, self.hora)


class HistorialSolicitudJustificacionMarcada(ModeloBase):
    solicitud = models.ForeignKey(SolicitudJustificacionMarcada, verbose_name=u'Solicitud Justificacion',
                                  on_delete=models.CASCADE)
    observacion = models.TextField(verbose_name=u"Observaci√≥n", blank=True, null=True)
    estado = models.IntegerField(verbose_name=u'Estado solicitud', choices=ESTADOS_JUSTIFICACION_MARCADA)
    fecha = models.DateTimeField(verbose_name=u'Fecha historial')
    persona = models.ForeignKey("sga.Persona", verbose_name=u'Persona', on_delete=models.CASCADE)

    class Meta:
        verbose_name = u"Historial Justificacion Marcada"
        verbose_name_plural = u"Historial Justificacion de Marcadas"
        ordering = ['id']

    def __str__(self):
        return "%s - %s %s" % (self.solicitud, self.observacion, self.persona)


class SolicitudTraspasoActivos(ModeloBase):
    solicitante = models.ForeignKey(Persona, related_name='Solicitante', blank=True, null=True,
                                    verbose_name=u'Solicitante', on_delete=models.CASCADE)
    traspasoactivofijo = models.ForeignKey(TraspasoActivo, related_name='TraspasoActivoFijo', blank=True, null=True,
                                           verbose_name=u'Traspaso Activo Fijo', on_delete=models.CASCADE)
    fecha = models.DateField(verbose_name=u'Fecha traspaso', blank=True, null=True)
    usuarioentrega = models.ForeignKey(Persona, related_name='Usuarioentrega', blank=True, null=True,
                                       verbose_name=u'Usuarioentrega', on_delete=models.CASCADE)
    custodioentrega = models.ForeignKey(Persona, related_name='Custodioentrega', blank=True, null=True,
                                        verbose_name=u'Custodioentrega', on_delete=models.CASCADE)
    usuariorecibe = models.ForeignKey(Persona, related_name='Usuariorecibe', blank=True, null=True,
                                      verbose_name=u'Usuariorecibe', on_delete=models.CASCADE)
    custodiorecibe = models.ForeignKey(Persona, related_name='Custodiorecibe', blank=True, null=True,
                                       verbose_name=u'Custodiorecibe', on_delete=models.CASCADE)
    ubicacionentrega = models.ForeignKey(Ubicacion, related_name='Ubicacionentrega', blank=True, null=True,
                                         verbose_name=u'Ubicacionentrega', on_delete=models.CASCADE)
    ubicacionrecibe = models.ForeignKey(Ubicacion, related_name='Ubicacionrecibe', blank=True, null=True,
                                        verbose_name=u'Ubicacionrecibe', on_delete=models.CASCADE)
    estado = models.IntegerField(choices=ESTADO_SOLICITUD_TRASPASO, default=1, verbose_name=u'Estado')
    quiensolicita = models.IntegerField(choices=QUIEN_SOLICITA_TRASPASO, default=1, verbose_name=u'QuienSolicita')
    activos = models.TextField(default='', verbose_name=u'Activos', blank=True)
    observacion = models.TextField(default='', max_length=1000, verbose_name=u"Observaci√≥n")
    puedefirmar = models.BooleanField(default=False, verbose_name=u'Permite firmar')
    procesofirmacompletado = models.BooleanField(default=False, verbose_name=u'Proceso firma')
    firmaresponsable = models.BooleanField(default=False, verbose_name=u'Firma responsable')
    firmafuturoresponsable = models.BooleanField(default=False, verbose_name=u'Firma futuro responsable')
    firmaactivofijo = models.BooleanField(default=False, verbose_name=u'Firma activo fijo')
    firmacustodiorecibe = models.BooleanField(default=False, verbose_name=u'Firma custodio recibe')
    firmacustodioentrega = models.BooleanField(default=False, verbose_name=u'Firma custodio entrega')

    class Meta:
        verbose_name = u"Solicitud traspaso activo"
        verbose_name_plural = u"Solicitud traspaso activos"

    def save(self, *args, **kwargs):
        super(SolicitudTraspasoActivos, self).save(*args, **kwargs)

    def persona_verificafirmasolicitud(self, idpersona):
        puedefirmarsolicitud = False

        if self.usuarioentrega_id == idpersona and self.custodioentrega_id == idpersona:
            if self.firmaresponsable == False or self.firmacustodioentrega == False:
                puedefirmarsolicitud = True
        else:
            if self.usuariorecibe_id == idpersona and self.custodiorecibe_id == idpersona:
                if self.firmafuturoresponsable == False or self.firmacustodiorecibe == False:
                    puedefirmarsolicitud = True
            else:
                if self.usuarioentrega_id == idpersona:
                    if self.firmaresponsable == False:
                        puedefirmarsolicitud = True

                elif self.usuariorecibe_id == idpersona:
                    if self.firmafuturoresponsable == False:
                        puedefirmarsolicitud = True

                elif self.custodioentrega_id == idpersona:
                    if self.firmacustodioentrega == False:
                        puedefirmarsolicitud = True

                elif self.custodiorecibe_id == idpersona:
                    if self.firmacustodiorecibe == False:
                        puedefirmarsolicitud = True

                elif idpersona == 1204:
                    if self.firmaactivofijo == False:
                        puedefirmarsolicitud = True
        return puedefirmarsolicitud

    def consultar_custodio_entrega(self, idpersona):
        persona_es_custodio_entrega = False
        if (self.custodioentrega_id == idpersona and self.usuarioentrega_id != idpersona):
            persona_es_custodio_entrega = True
        return persona_es_custodio_entrega

    def puede_descargar_acta_firmada(self):
        puededescargar = False
        if self.firmaresponsable == True and self.firmafuturoresponsable == True and self.firmaactivofijo == True and self.firmacustodioentrega == True and self.firmacustodiorecibe == True:
            puededescargar = True
        return puededescargar

    def extraer_archivoactatraspaso(self):
        traspasoactivo = TraspasoActivo.objects.get(id=self.traspasoactivofijo_id)
        return traspasoactivo.traspasoactivofirma

    def persona_es_custodio_recibe(self, idpersona):
        es_custodio_recibe = False
        if self.custodiorecibe != self.usuariorecibe:
            if self.custodiorecibe_id == idpersona:
                es_custodio_recibe = True
        return es_custodio_recibe

    def persona_es_usuario_recibe(self, idpersona):
        es_custodio_recibe = False
        if self.custodiorecibe != self.usuariorecibe:
            if self.usuariorecibe_id == idpersona:
                es_custodio_recibe = True
        return es_custodio_recibe

    def solicitudcorregida(self):
        solicitud_corregida = False
        seguimiento = SeguimientoSolicitudTraspaso.objects.filter(status=True, solicitudtraspaso=self)
        if seguimiento:
            if seguimiento.last().estado == 21:
                solicitud_corregida = True
        return solicitud_corregida

    def seguimientos_solicitud(self):
        seguimientos = None
        seguimiento = SeguimientoSolicitudTraspaso.objects.filter(status=True, solicitudtraspaso=self)
        if seguimiento:
            seguimientos = seguimiento.last()
        return seguimientos


class SeguimientoSolicitudTraspaso(ModeloBase):
    solicitudtraspaso = models.ForeignKey(SolicitudTraspasoActivos, related_name='SolicitudTraspaso', blank=True,
                                          null=True, verbose_name=u'Solicitud traspaso', on_delete=models.CASCADE)
    estado = models.IntegerField(choices=ESTADO_SOLICITUD_TRASPASO, default=1, verbose_name=u'Estado')

    class Meta:
        verbose_name = u"Seguimiento solicitud traspaso activo"
        verbose_name_plural = u"Seguimiento solicitud traspaso activos"

    def save(self, *args, **kwargs):
        super(SeguimientoSolicitudTraspaso, self).save(*args, **kwargs)

    def verificar_tipo_estado(self):
        tipo_estado = False
        if self.estado == 2 or self.estado == 4 or self.estado == 6 or self.estado == 9 or self.estado == 12 or self.estado == 13 or self.estado == 14 or self.estado == 15 or self.estado == 16 or self.estado == 17:
            tipo_estado = True
        return tipo_estado


class CorreccionesSolicitudTraspasoActivos(ModeloBase):
    solicitudtraspaso = models.ForeignKey(SolicitudTraspasoActivos, related_name='CorreccionSolicitudTraspaso',
                                          blank=True, null=True, verbose_name=u'Correcci√≥n solicitud traspaso',
                                          on_delete=models.CASCADE)
    observacion = models.TextField(default='', max_length=1000, verbose_name=u"Observaci√≥n")
    estado = models.IntegerField(choices=ESTADO_SOLICITUD_TRASPASO, default=1, verbose_name=u'Estado')

    class Meta:
        verbose_name = u"Correccion solicitud traspaso activo"
        verbose_name_plural = u"Correcciones solicitud traspaso activos"

    def save(self, *args, **kwargs):
        super(CorreccionesSolicitudTraspasoActivos, self).save(*args, **kwargs)


class PersonaRespuestaChatBot(ModeloBase):
    persona = models.ForeignKey('sga.Persona', verbose_name=u"Persona", on_delete=models.CASCADE)
    resp1 = models.CharField(max_length=1000, verbose_name='Respuesta 1', blank=True, null=True)
    resp2 = models.CharField(max_length=1000, verbose_name='Respuesta 2', blank=True, null=True)
    resp3 = models.CharField(max_length=1000, verbose_name='Respuesta 3', blank=True, null=True)
    finalizada = models.BooleanField(default=False, verbose_name='Finalizada')

    def __str__(self):
        return f'{self.persona}'

    class Meta:
        verbose_name = u'Persona Respuesta Chat Bot'
        verbose_name_plural = u'Persona Respuesta Chat Bot'
        ordering = ('persona',)
TIPO_ASIENTO = (
    (1, 'DEBITO'),
    (2, 'CREDITO'),
)

TIPO_IMPUESTO = (
    (0, 'NINGUNO'),
    (1, u'IVA'),
)


class Impuesto(ModeloBase):
    cuentacontable = models.ForeignKey(CuentaContable, on_delete=models.PROTECT, blank=True, null=True)
    descripcion = models.CharField(max_length=200, verbose_name=u'descripcion')
    tipo = models.IntegerField(choices=TIPO_IMPUESTO, default=0, verbose_name=u'Tipo Impuesto')
    porcentaje = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    predeterminado = models.BooleanField(default=True, verbose_name=u'Activa')
    codigosri = models.CharField(max_length=10, default='', verbose_name=u'C√≥digo Sri')

    def __str__(self):
        return u'%s - %s -%s' % (self.descripcion, self.get_tipo_display(), self.porcentaje)

    class Meta:
        verbose_name = 'Impuesto'
        verbose_name_plural = 'Impuestos'
        ordering = ['descripcion', 'tipo', 'porcentaje']

    def puedeeliminar(self):
        if self.cuentasporpagar_set.exists():
            return False
        else:
            return True

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(Impuesto, self).save(*args, **kwargs)


class TipoRetenciones(ModeloBase):
    cuentacontable = models.ForeignKey(CuentaContable, on_delete=models.PROTECT, blank=True, null=True)
    codigosri = models.CharField(max_length=10, verbose_name=u'C√≥digo Sri')
    descripcion = models.CharField(max_length=500, verbose_name=u'Descripci√≥n')
    porcentaje = models.FloatField(default=0, verbose_name=u'Porcentaje')
    fuentebienes = models.BooleanField(verbose_name=u'Aplica Fuente Bienes', default=False)
    fuenteservicio = models.BooleanField(verbose_name=u'Aplica Fuente Servicios', default=False)
    iva = models.BooleanField(verbose_name=u'Aplica Iva', default=False)
    manual = models.BooleanField(default=False, verbose_name=u"Manual")

    def __str__(self):
        return u'%s - %s [%s]' % (self.descripcion, self.codigosri, self.porcentaje)

    class Meta:
        verbose_name = 'Tipo Retenciones'
        verbose_name_plural = 'Tipo de Retenciones'
        ordering = ['descripcion']

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper()
        super(TipoRetenciones, self).save(*args, **kwargs)

    def codigosri_entero(self):
        codigo_sri = self.codigosri
        lista_numeros = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
        if codigo_sri in lista_numeros:
            codigo_sri = '00' + str(self.codigosri)
        return codigo_sri

#Liquidaci√≥n de compras o servicios
class ProcesoLiquidacion(ModeloBase):
    nombre = models.TextField(default='', verbose_name=u'nombre')
    anio = models.IntegerField(default=0, verbose_name=u"Anio")
    activo = models.BooleanField(default=False, verbose_name=u'Activo')

    class Meta:
        verbose_name = 'Proceso de Liquidaci√≥n'
        verbose_name_plural = 'Procesos de Liquidaci√≥n'

    def __str__(self):
        return u'%s' % (self.nombre)

    def requisitos(self):
        return self.requisitoliquidacion_set.filter(status=True, activo=True).order_by('nombre')

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper() if self.nombre else ''
        super(ProcesoLiquidacion, self).save(*args, **kwargs)

    def en_uso(self):
        if self.requisitoliquidacion_set.filter(status=True).exists():
            return True
        if  self.solicitudliquidacion_set.filter(status=True).exists():
            return True
        return False


    def requisito_str(self):
        requisito = self.requisitoliquidacion_set.filter(status=True, activo=True).exists()
        return 'fa fa-check-circle text-success' if requisito else 'fa fa-times-circle text-error'

    def cant_requisito(self):
        return self.requisitoliquidacion_set.filter(status=True, activo=True).count()

    def activo_str(self):
        return 'fa fa-check-circle text-success' if self.activo else 'fa fa-times-circle text-error'


class RequisitoLiquidacion(ModeloBase):
    proceso = models.ForeignKey(ProcesoLiquidacion, on_delete=models.PROTECT, verbose_name=u'Proceso de liquidaci√≥n')
    nombre = models.TextField(default='', verbose_name=u'nombre')
    activo = models.BooleanField(default=False, verbose_name=u'Activo')
    archivo = models.FileField(upload_to='liquidacion/%Y/%m/%d', blank=True, null=True, verbose_name=u'formato')
    leyenda = models.TextField(default='', verbose_name=u'Leyenda')
    requerido = models.BooleanField(default=False, verbose_name='¬øEs Requerido?')

    class Meta:
        verbose_name = 'Requisitos Proceso de Liquidaci√≥n'
        verbose_name_plural = 'Requisitos Procesos de Liquidaci√≥n'

    def nombre_input(self):
        return remover_caracteres_especiales_unicode(self.nombre).lower().replace(' ','_')

    def __str__(self):
        return u'%s - %s' % (self.nombre, self.activo)

    def en_uso(self):
        return self.requisitosolicitud_set.filter(status=True).exists()

    def activo_str(self):
        return 'fa fa-check-circle text-success' if self.activo else 'fa fa-times-circle text-error'

    def requerido_str(self):
        return 'fa fa-check-circle text-success' if self.requerido else 'fa fa-times-circle text-error'

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.upper() if self.nombre else ''
        self.leyenda = self.leyenda.upper() if self.leyenda else ''
        super(RequisitoLiquidacion, self).save(*args, **kwargs)


ESTADO_LIQUIDACION = (
    (1, u'SOLICITADO'),
    (2, u'VALIDANDO REQUISITOS'),
    (3, u'EN TR√ÅMITE'),
    (4, u'APROBADO'),
    (5, u'RECHAZADO'),
)

ESTADO_REQUISITO_LIQUIDACION = (
    (1, u'PENDIENTE'),
    (2, u'RECHAZADO'),
    (3, u'APROBADO'),
    (4, u'CORREGIDO'),
)

TIPO_ACUMULACION_DECIMOS = (
    (1, u'MENSUALIZADOS'),
    (2, u'ACUMULADOS')
)


class SolicitudLiquidacion(ModeloBase):
    proceso = models.ForeignKey(ProcesoLiquidacion, on_delete=models.PROTECT, verbose_name=u'Proceso de liquidaci√≥n')
    solicitante = models.ForeignKey('sga.Persona', on_delete=models.PROTECT,  blank=True, null=True, verbose_name=u'Persona que solicita liquidacion')
    codigo = models.CharField(max_length=50, default="", verbose_name=u"C√≥digo")
    estado = models.IntegerField(default=1, choices=ESTADO_LIQUIDACION, verbose_name=u'Estado de liquidacion')
    descripcion = models.TextField(default='', verbose_name=u'Descripci√≥n')
    fechainicio = models.DateField(blank=True, null=True, verbose_name=u'Fecha inicio')
    fechafin = models.DateField(blank=True, null=True, verbose_name=u'Fecha fin')
    rmu = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'RMU')
    descuentos = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Descuentos')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor a pagar')
    tipo_decimos = models.IntegerField(default=1, choices=TIPO_ACUMULACION_DECIMOS, blank=True, null=True, verbose_name=u'Tipo de Acumulaci√≥n Decimos')
    vacaciones_gozadas = models.IntegerField(default=0, verbose_name='Vacaciones Gozadas (D√≠as)')
    vacaciones_no_gozadas = models.IntegerField(default=0, verbose_name='Vacaciones NO Gozadas (D√≠as)')
    departamento_asignado = models.ForeignKey('sagest.Departamento', on_delete=models.PROTECT, related_name='+', blank=True, null=True, verbose_name=u'Departamento Asignado')

    def requisitos_aprobados(self):
        return self.requisitosolicitudliquidacion_set.values('id').filter(status=True, estado=3).exists()

    def detalle_requisitos(self):
        pendientes, aprobados, rechazados = 0, 0, 0
        qsbase = self.requisitosolicitudliquidacion_set.values('id').filter(status=True)
        pendientes = qsbase.filter(estado=1).count()
        rechazados = qsbase.filter(estado=2).count()
        aprobados = qsbase.filter(estado=3).count()
        return {'pendientes': pendientes, 'rechazados': rechazados, 'aprobados': aprobados}

    def pendiente_validacion(self):
        return self.requisitosolicitudliquidacion_set.values('id').filter(status=True, estado__in=[1,2,4]).exists()

    def pendiente_correccion(self):
        return self.requisitosolicitudliquidacion_set.values('id').filter(status=True, estado__in=[2]).exists()

    def tiempo_laborando(self):
        try:
            return str(self.fechafin - self.fechainicio).replace('day','dia').split(',')[0]
        except Exception as ex:
            return '0 Meses'

    def __str__(self):
        return u'%s - %s' % (self.pk, self.solicitante)

    def color_estado(self):
        label = 'label label-default'
        if self.estado == 1:
            label = 'label label-default'
        elif self.estado == 2:
            label = 'label label-warning'
        elif self.estado == 3:
            label = 'label label-info'
        elif self.estado == 4:
            label = 'label label-success'
        elif self.estado == 5:
            label = 'label label-important'
        return label

    def historia(self):
        return self.historialsolicitudliquidacion_set.filter(status=True).order_by('-pk')

    def paso_actual(self):
        return self.historialsolicitudliquidacion_set.filter(status=True).order_by('-pk').last()

    class Meta:
        verbose_name = 'Solicitud de Liquidaci√≥n'
        verbose_name_plural = 'Solicitudes de liquidaci√≥n'


class RequisitoSolicitudLiquidacion(ModeloBase):
    solicitud = models.ForeignKey(SolicitudLiquidacion, on_delete=models.PROTECT, verbose_name=u'Solicitud de liquidacion')
    requisito = models.ForeignKey(RequisitoLiquidacion, on_delete=models.PROTECT, verbose_name=u'Requisito')
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n')
    estado = models.IntegerField(default=1, choices=ESTADO_REQUISITO_LIQUIDACION, verbose_name=u'Estado de requisito')
    archivo = models.FileField(upload_to='solicitud/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')

    def color_estado(self):
        label = 'label label-default'
        if self.estado == 1:
            label = 'label label-default'
        elif self.estado == 2:
            label = 'label label-important'
        elif self.estado == 3:
            label = 'label label-success'
        elif self.estado == 4:
            label = 'label label-warning'
        return label

    class Meta:
        verbose_name = 'Requisitos de Solicitud Liquidaci√≥n'
        verbose_name_plural = 'Requisitos de Solicitud Liquidaci√≥n'


class HistorialSolicitudLiquidacion(ModeloBase):
    solicitud = models.ForeignKey(SolicitudLiquidacion, on_delete=models.PROTECT, verbose_name=u'Solicitud de liquidacion')
    personaenvia = models.ForeignKey('sga.Persona', on_delete=models.PROTECT, related_name='+', blank=True, null=True, verbose_name=u'Persona que remite solicitud')
    departamento_asignado = models.ForeignKey('sagest.Departamento', on_delete=models.PROTECT, related_name='+', blank=True, null=True, verbose_name=u'Departamento que recibe solicitud')
    estado = models.IntegerField(default=1, choices=ESTADO_LIQUIDACION, verbose_name=u'Estado de liquidacion')
    observacion = models.TextField(default='', verbose_name=u'Observaci√≥n')
    archivo = models.FileField(upload_to='solicitud/%Y/%m/%d', blank=True, null=True, verbose_name=u'Solicitud')

    def color_estado(self):
        label = 'label label-default'
        if self.estado == 1:
            label = 'label label-default'
        elif self.estado == 2:
            label = 'label label-warning'
        elif self.estado == 3:
            label = 'label label-info'
        elif self.estado == 4:
            label = 'label label-success'
        elif self.estado == 5:
            label = 'label label-important'
        return label

    def typefile(self):
        if self.archivo:
            return self.archivo.name[self.archivo.name.rfind("."):]
        else:
            return None

    class Meta:
        verbose_name = 'Historial de Solicitud Liquidaci√≥n'
        verbose_name_plural = 'Historiales de Solicitud Liquidaci√≥n'

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.upper() if self.observacion else ''
        super(HistorialSolicitudLiquidacion, self).save(*args, **kwargs)


class ServicioModelo(ModeloBase):
    descripcion = models.TextField(default='', verbose_name=u'Descripcion')

    def __str__(self):
        return '{}'.format(self.descripcion)

    def en_uso(self):
        return self.serviciocompra_set.filter(status=True).exists()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper() if self.descripcion else ''
        super(ServicioModelo, self).save(*args, **kwargs)


class ServicioCompra(ModeloBase):
    tiposervicio = models.ForeignKey(ServicioModelo, on_delete=models.PROTECT, verbose_name=u'Tipo Servicio' )
    descripcion = models.TextField(default='', verbose_name=u'Descripcion')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor servicio')

    def __str__(self):
        return '{} - {} - {}'.format(self.tiposervicio, self.descripcion, self.valor)

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.upper() if self.descripcion else ''
        super(ServicioCompra, self).save(*args, **kwargs)

    def en_uso(self):
        return self.detalleliquidacioncompra_set.filter(status=True).exists()

    def nombre_completo(self):
        return '{} {}'.format(self.tiposervicio.descripcion, self.descripcion)

    def subtotal_sin_iva(self, porcientoiva=12):
        porcien = porcientoiva/100
        masuno = 1 + porcien
        return round(float(self.valor) / float(masuno), 2)

    def valor_iva(self, porcientoiva=12):
        porcien = porcientoiva / 100
        masuno = 1 + porcien
        return round(float(self.subtotal_sin_iva(porcientoiva)) * float(porcientoiva), 2)

    def valor_total(self, porcientoiva=12):
        return round(float(self.valor_iva(porcientoiva)) + float(self.subtotal_sin_iva(porcientoiva)), 2)

    def convertir_json(self):
        from django.forms.models import model_to_dict
        serv_dict = model_to_dict(self)
        serv_dict['value'] = f'{self.tiposervicio} - {self.descripcion} - ${self.valor}'
        serv_dict['nombre'] = self.nombre_completo()
        serv_dict['cantidad'] = 1
        serv_dict['subtotal'] = 1 * self.valor
        serv_dict['iva'] = 0
        serv_dict['total'] = 1 * self.valor
        serv_dict['tipo_model'] = model_to_dict(self.tiposervicio)
        return serv_dict


class LiquidacionCompra(ModeloBase):
    puntoventa = models.ForeignKey(PuntoVenta, on_delete=models.PROTECT, verbose_name=u"Punto Venta", null=True, blank=True)
    numero = models.IntegerField(default=0, verbose_name=u"Numero")
    numerocompleto = models.CharField(default='', max_length=20, verbose_name=u"Numero Completo")
    nombre = models.CharField(default='', max_length=300)
    proveedor = models.ForeignKey(Proveedor, on_delete=models.PROTECT, verbose_name=u'Proveedor')
    fecha = models.DateField(blank=True, null=True, verbose_name=u'Fecha liquidacion')
    identificacion = models.CharField(default='', max_length=20, verbose_name=u"Identificaci√≥n")
    tipo = models.IntegerField(choices=MY_TIPOS_IDENTIFICACION, default=1, verbose_name=u"Tipo de identificaci√≥n")
    direccion = models.TextField(default='', verbose_name=u'direccion')
    telefono = models.CharField(blank=True, null=True, verbose_name=u'Telefono', max_length=10)
    email = models.CharField(default='', max_length=100, verbose_name=u"Email")
    valida = models.BooleanField(default=True, verbose_name=u"Valida")
    impresa = models.BooleanField(default=False, verbose_name=u"Impresa")
    electronica = models.BooleanField(default=False, verbose_name=u"Electr√≥nica")
    ivaaplicado = models.ForeignKey(IvaAplicado, on_delete=models.PROTECT, blank=True, null=True, verbose_name=u"Iva Aplicado")
    subtotal_base_iva = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    subtotal_base0 = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total_descuento = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total_iva = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    total = models.DecimalField(max_digits=30, decimal_places=2, default=0)
    pagada = models.BooleanField(default=True, verbose_name=u"Pagada")
    firmada = models.BooleanField(default=False, verbose_name=u"Firmada")
    tipoemision = models.IntegerField(default=1, verbose_name=u'Tipo Emision')
    estado = models.IntegerField(choices=ESTADO_COMPROBANTE, default=1, verbose_name=u'Estado Factura')
    observacion = models.TextField(default='', blank=True, null=True, verbose_name=u'Observaci√≥n')
    enviadasri = models.BooleanField(default=False, verbose_name=u"Enviada SRI")
    falloenviodasri = models.BooleanField(default=False, verbose_name=u"Fallo de Envio SRI")
    mensajeenvio = models.TextField(blank=True, null=True, verbose_name=u"Mensaje de Envio SRI")
    falloautorizacionsri = models.BooleanField(default=False, verbose_name=u"Fallo de Autorizaci√≥n SRI")
    mensajeautorizacion = models.TextField(blank=True, null=True, verbose_name=u"Mensaje de Autorizaci√≥n")
    autorizada = models.BooleanField(default=False, verbose_name=u"Autorizada")
    enviadacliente = models.BooleanField(default=False, verbose_name=u"Enviada por correo")
    xmlgenerado = models.BooleanField(default=False, verbose_name=u"XML Generado")
    xml = models.TextField(blank=True, null=True, verbose_name=u'XML')
    xmlfirmado = models.TextField(blank=True, null=True, verbose_name=u'XML Firmado')
    xmlarchivo = models.FileField(upload_to='comprobantes/liquidaciones/', blank=True, null=True, verbose_name=u'XML Archivo')
    pdfarchivo = models.FileField(upload_to='comprobantes/liquidaciones/', blank=True, null=True, verbose_name=u'XML Archivo')
    fechaautorizacion = models.DateTimeField(verbose_name=u"Fecha autorizacion", blank=True, null=True)
    autorizacion = models.TextField(verbose_name=u'Autorizacion')
    weburl = models.CharField(max_length=32)
    claveacceso = models.CharField(max_length=49, verbose_name=u'Clave de Acceso')
    tipoambiente = models.IntegerField(default=1, verbose_name=u'Tipo Ambiente')
    formapago = models.ForeignKey(CuentaBanco, on_delete=models.PROTECT, blank=True, null=True, verbose_name=u'Forma de Pago')
    #ctaporpagar = models.ForeignKey(CuentasPorPagar, on_delete=models.PROTECT, blank=True, null=True, verbose_name=u'Cuenta por pagar')

    class Meta:
        verbose_name = 'Liquidaci√≥n compra'
        verbose_name_plural = 'Liquidaciones compras'

    def __str__(self):
        return f'{self.proveedor.__str__()} - {self.numerocompleto}'

    def save(self, *args, **kwargs):
        self.tipoambiente =  1 if DEBUG else 2
        return super(LiquidacionCompra, self).save(*args, **kwargs)

    def numero_completo_full(self):
       if self.ctaporpagar:
           return '{}'.format(self.ctaporpagar.numerodocumento)
       return '0000000000000000'

    def genera_clave_acceso_liquidacion(self):
        hoy = self.fecha
        numero = self.numero
        return self.generar_clave_acceso(hoy, numero, '03')

    def generar_clave_acceso(self, fecha, numero, codigo):
        from sga.models import miinstitucion
        institucion = miinstitucion()
        hoy = fecha
        codigonumerico = str(Decimal('%02d%02d%04d' % (hoy.day, hoy.month, hoy.year)) + Decimal(institucion.ruc) + Decimal('%3s%3s%9s' % (self.puntoventa.establecimiento, self.puntoventa.puntoventa, str(numero).zfill(9))))[:8]
        parcial = "%02d%02d%04d%2s%13s%1d%3s%3s%9s%8s%1d" % (hoy.day, hoy.month, hoy.year, codigo, institucion.ruc,
                                                             self.tipoambiente, self.puntoventa.establecimiento,
                                                             self.puntoventa.puntoventa, str(numero).zfill(9),
                                                             codigonumerico, self.tipoemision)
        digitoverificador = self.generar_digito_verificador(parcial)
        return parcial + str(digitoverificador)

    def tipo_identificacion(self):
        from sga.models import TIPOS_IDENTIFICACION
        return TIPOS_IDENTIFICACION[self.tipo - 1][1]

    # def generar_clave_acceso_new(self, codigo = '03'):
    #     from sga.models import miinstitucion
    #     fecha_formato = self.fecha.strftime('%d%m%Y')
    #     numero_comprobante =  self.numerocompleto.replace('-', '')
    #     institucion = miinstitucion()
    #     tipo_ambiente = str(self.tipoambiente).zfill(2)
    #     parcial = f'{fecha_formato}{codigo}{institucion.ruc}{tipo_ambiente}{numero_comprobante}{self.tipoemision}'
    #     digitoverificador = self.generar_digito_verificador(parcial)
    #     return f''

    def generar_digito_verificador(self, cadena):
        basemultiplicador = 7
        aux = [0 for i in cadena]
        multiplicador = 2
        total = 0
        verificador = 0
        for i in range(len(cadena) - 1, -1, -1):
            aux[i] = int(cadena[i]) * multiplicador
            multiplicador += 1
            if multiplicador > basemultiplicador:
                multiplicador = 2
            total += aux[i]
        if total == 0 or total == 1:
            verificador = 0
        else:
            verificador = 0 if (11 - (total % 11)) == 11 else 11 - (total % 11)
        if verificador == 10:
            verificador = 1
        return verificador

    def numero_secuencial(self):
        return str(self.numero).zfill(9)

    @staticmethod
    def genera_secuencial():
        secuencial = SecuencialRecaudaciones.objects.filter(status=True).first()
        return secuencial.liquidacioncompra + 1 if secuencial.liquidacioncompra > 0 else 1

    @staticmethod
    def genera_secuencial_comprobante():
        puntoventa = PuntoVenta.objects.get(id=1)
        secuencial = str(LiquidacionCompra.genera_secuencial()).zfill(9)
        return f'{puntoventa.establecimiento}-{puntoventa.puntoventa}-{secuencial}'

    def puede_enviar_email_liquidacion_compra(self):
        return self.pagada and self.xmlgenerado and self.firmada and self.enviadasri and self.autorizada and not self.enviadacliente and self.email

    def enviar_comprobante_liquidacion_a_cliente(self, request, data={}):
        import subprocess
        from sga.tasks import send_html_mail
        from sga.models import miinstitucion, Reporte
        data['sistema'] = u'Sistema de Gesti√≥n Administrativa',
        data['liquidacion'] = self
        data['t'] = miinstitucion()
        direccion = os.path.join(SITE_STORAGE, 'media', 'comprobantes', 'liquidaciones')
        if not self.xmlarchivo:
            xmlname = generar_nombre('LiquidacionCompra', 'fichero.xml')
            filename_xml = os.path.join(direccion, xmlname)
            os.makedirs(direccion, exist_ok=True)
            f = open(filename_xml, "wb")#"wb"
            f.write(self.xmlfirmado.encode('utf-8'))
            f.close()
            self.xmlarchivo.name = 'comprobantes/liquidaciones/%s' % xmlname

        if not self.pdfarchivo:
            try:
                pdfname = generar_nombre('LiquidacionCompra', 'fichero')
                filename_pdf = os.path.join(direccion, pdfname)
                reporte_id = variable_valor('REPORTE_PDF_LIQUIDACIONCOMPRA_ID')
                reporte = Reporte.objects.get(pk=reporte_id)
                tipo = 'pdf'
                runjrcommand = [JR_JAVA_COMMAND, '-jar',
                                os.path.join(JR_RUN, 'jasperstarter.jar'),
                                'pr', reporte.archivo.file.name,
                                '--jdbc-dir', JR_RUN,
                                '-f', tipo,
                                '-t', 'postgres',
                                '-H', DATABASES['sga_select']['HOST'],
                                '-n', DATABASES['sga_select']['NAME'],
                                '-u', DATABASES['sga_select']['USER'],
                                '-p', f"'{DATABASES['sga_select']['PASSWORD']}'",
                                '-o', filename_pdf]
                mensaje = ''
                for m in runjrcommand:
                    mensaje += ' ' + m
                mensaje += ' -P id=' + str(self.id)
                if DEBUG:
                    runjr = subprocess.run(mensaje, shell=True, check=True)
                else:
                    runjr = subprocess.call(mensaje.encode("latin1"), shell=True)
                sp = os.path.split(reporte.archivo.file.name)
                self.pdfarchivo.name = 'comprobantes/liquidaciones/%s.pdf' % pdfname
            except Exception as ex:
                # print(ex.__str__())
                raise NameError(ex.__str__())

        if self.puede_enviar_email_liquidacion_compra():
            send_html_mail("Comprobante Electronico",
                           "adm_liquidacioncompras/emails/comprobanteelectronico_liquidacioncompra.html",
                           data, [self.email],
                           [], cuenta=MY_CUENTAS_CORREOS[0][1])
            self.enviadacliente = True
            self.estado = 2
            self.save()

class DetalleLiquidacionCompra(ModeloBase):
    liquidacion = models.ForeignKey(LiquidacionCompra, on_delete=models.PROTECT, verbose_name=u'Liquidacion de Compra')
    servicio = models.ForeignKey(ServicioCompra, on_delete=models.PROTECT, verbose_name=u'Servicio')
    valor = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Valor servicio')
    cantidad = models.IntegerField(default=1, verbose_name=u'Cantidad')
    subtotal = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Subtotal')
    iva = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Iva')
    total = models.DecimalField(default=0, max_digits=30, decimal_places=2, verbose_name=u'Total')

class ContratoAT(ModeloBase):
    proveedor = models.ForeignKey(Proveedor,blank=True, null=True, on_delete=models.CASCADE, verbose_name=u"Proveedor de activos")
    numerocontrato = models.CharField(default='', max_length=20, blank=True, null=True, verbose_name=u"N√∫mero de contrato")
    titulo=models.CharField(default='', max_length=50,blank=True, null=True,verbose_name="T√≠tulo del contrato")
    descripcion=models.TextField(default='',blank=True, null=True, verbose_name="Descripci√≥n del contrato")
    fechainicio=models.DateTimeField(blank=True, null=True,verbose_name="Fecha que inicia el contrato")
    fechafin=models.DateTimeField(blank=True, null=True,verbose_name="Fecha que finaliza el contrato")

    def __str__(self):
        return f'{self.numerocontrato}-{self.titulo}'

    class Meta:
        verbose_name = u'Contrato activo tecnol√≥gico'
        verbose_name_plural = u'Contratos activos tecnol√≥gicos'
        ordering = ('numerocontrato',)

class ComprobanteAT(ModeloBase):
    proveedor = models.ForeignKey(Proveedor,blank=True, null=True, on_delete=models.CASCADE, verbose_name=u"Proveedor de activos")
    contrato = models.ForeignKey(ContratoAT,blank=True, null=True, on_delete=models.CASCADE, verbose_name=u"Contrato de activos tecnol√≥gicos")
    origeningreso = models.ForeignKey(OrigenIngreso,blank=True, null=True, verbose_name=u"Origen de ingreso", on_delete=models.CASCADE)
    tipocomprobante = models.ForeignKey(TipoDocumento, blank=True, null=True, verbose_name=u"Tipo Comprobante", on_delete=models.CASCADE)
    numerocomprobante = models.CharField(default='', max_length=30, blank=True, null=True, verbose_name=u"N√∫mero Comprobante")
    fechacompra=models.DateField(blank=True, null=True,verbose_name="Fecha de compra")
    cantidad = models.IntegerField(default=0, verbose_name=u"Cantidad de productos cargados en el comprobante")
    descripcion = models.TextField(default='', blank=True, null=True, verbose_name="Descripci√≥n del comrpobante")

    def __str__(self):
        return f'{self.tipocomprobante} - {self.numerocomprobante}'

    def total_activos(self):
        return len(ActivoTecnologico.objects.filter(status=True, activotecnologico__numerocomprobante=self.numerocomprobante))

    class Meta:
        verbose_name = u'Comprobante activo tecnol√≥gico'
        verbose_name_plural = u'Comprobantes Proveedor'
        ordering = ('numerocomprobante','tipocomprobante_id')

class DocumentoFirmaInformeBaja(ModeloBase):
    informe = models.ForeignKey(InformeActivoBaja, blank=True, null=True, on_delete=models.CASCADE, verbose_name=u'Informe activo al cual esta siendo firmado')
    director = models.ForeignKey(DirectorResponsableBaja, blank=True, null=True, on_delete=models.CASCADE, verbose_name=u'Director a cargo del documento a firmar')
    responsablefirma = models.ForeignKey(PersonaDepartamentoFirmas, blank=True, null=True, on_delete=models.CASCADE, verbose_name=u'Director a cargo del documento a firmar de mantenimiento')
    archivo = models.FileField(upload_to='archivo_activo_baja/documento_firma_ib/', blank=True, null=True, verbose_name=u'Archivo firmado', max_length=300)
    firmadirector = models.BooleanField(default=False, verbose_name="Firmo el director del departamento")
    estadofirma = models.IntegerField(choices=MY_ESTADO_FIRMA_INFORME_BAJA, blank=True, null=True, verbose_name=u'Estado')


    def ultimo_dcoumento(self):
        director = self.director.responsable if self.director else None
        responsablefirma = self.responsablefirma.personadepartamento if self.responsablefirma else None
        return self.historialdocumentoinformebaja_set.filter(status=True).exclude(Q(persona=director) | Q(persona=responsablefirma)).last()

    def historial_firmas(self):
        return self.historialdocumentoinformebaja_set.filter(status=True).order_by('-fecha_creacion')

    def firmo_responsable_informebaja(self):
        if self.firmadirector:
            return True
        else:
            historial = self.historialdocumentoinformebaja_set.filter(status=True, persona=self.informe.responsable).last()
            return historial.estadofirma in [2, 3]

    def responsable_director(self):
        director = PersonaDepartamentoFirmas.objects.filter(status=True, tipopersonadepartamento_id=1, departamentofirma_id=2)
        if director.filter(fechafin__gte=self.informe.fecha_creacion.date(), fechainicio__lte=self.informe.fecha_creacion.date()):
            director = director.filter(fechafin__gte=self.informe.fecha_creacion.date(), fechainicio__lte=self.informe.fecha_creacion.date()).first()
        elif director.filter(actualidad=True):
            director = director.filter(actualidad=True).first()
        return director

    def estado_color(self):
        if self.firmadirector:
            return {'text': 'Firmado', 'color': 'btn-success'}
        else:
            return {'text': 'Pendiente', 'color': 'btn-secondary'}

    def color_estado(self):
        if self.estadofirma == 2:
            return 'info'
        elif self.estadofirma == 3:
            return 'success'
        else:
            return 'secondary'

    def __str__(self):
        return u'%s' % (self.informe)

    class Meta:
        verbose_name = u'Documento firma de informe de baja'
        verbose_name_plural = u'Documentos de firma de informe de baja'
        ordering = ('-fecha_creacion',)

class HistorialDocumentoInformeBaja(ModeloBase):
    documentoinforme = models.ForeignKey(DocumentoFirmaInformeBaja,blank=True, null=True, on_delete=models.CASCADE, verbose_name=u'Documento principal de informe de baja')
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u'Persona que firmo el documento', on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='archivo_activo_baja/documento_firma_ib/', blank=True, null=True, verbose_name=u'Archivo firmado')
    estadofirma = models.IntegerField(choices=MY_ESTADO_FIRMA_INFORME_BAJA_HISTORIAL, blank=True, null=True, verbose_name=u'Estado')

    def __str__(self):
        return u'%s' % (self.persona)

    def color_estado(self):
        if self.estadofirma == 2:
            return 'info'
        elif self.estadofirma == 3:
            return 'success'
        else:
            return 'secondary'

    class Meta:
        verbose_name = u'Historial de informe de baja'
        verbose_name_plural = u'Historial de informes de baja'
        ordering = ('fecha_creacion',)

class PeriodoGarantiaMantenimientoAT(ModeloBase):
    nombre = models.CharField(default='', max_length=150, verbose_name=u"Nombre Periodo")
    fechainicio = models.DateField(blank=True, null=True)
    fechafin = models.DateField(blank=True, null=True)
    activo=models.BooleanField(default=False,verbose_name="¬øPeriodo activo?")
    detalle = models.CharField(default='', max_length=150, verbose_name=u"Detalle Periodo")
    comprobantes = models.ManyToManyField(ComprobanteAT, verbose_name=u"Comprobantes de activos")

    def __str__(self):
        return u"%s - Fec. Inicio %s - Fec. Fin %s" % (self.nombre, self.fechainicio, self.fechafin)

    def save(self, *args, **kwargs):
        self.nombre= self.nombre.capitalize().strip()
        super(PeriodoGarantiaMantenimientoAT, self).save(*args, **kwargs)



    class Meta:
        verbose_name = u'Periodo Garantia de  Mantenimiento'
        verbose_name_plural = u'Periodos Garantia de Mantenimiento'

#CRAI CONTROL DE ACCESO A CUBICULOS
class PisosChoice(models.IntegerChoices):
    PLANTABAJA = 0, 'Planta baja'
    PISO1 = 1, 'Piso 1'
    PISO2 = 2, 'Piso 2'
    PISO3 = 3, 'Piso 3'

class CubiculoCrai(ModeloBase):
    nombre = models.CharField(default='', max_length=150, verbose_name=u"Nombre de cub√≠culo")
    activo = models.BooleanField(default=False, verbose_name="¬øCub√≠culo activo?")
    numero = models.IntegerField(default=0, verbose_name=u"N√∫mero de cub√≠culo")
    piso = models.IntegerField(default=0, choices=PisosChoice.choices, verbose_name=u"Ubicaci√≥n de cub√≠culo")
    tiempo = models.TimeField(blank=True, null=True, verbose_name=u"Tiempo maximo de estadia")

    def __str__(self):
        return f'Cub√≠culo #{self.numero}'

    class Meta:
        verbose_name = u'Cub√≠culo Crai'
        verbose_name_plural = u'Cubiculos Crai'

#PAZ Y SALVO
class FormatoPazSalvo(ModeloBase):
    titulo = models.CharField(default='', max_length=150, verbose_name=u"Titulo del formato")
    activo = models.BooleanField(default=False, verbose_name="¬øFormato activo?")
    descripcion = models.CharField(default='', max_length=150, verbose_name=u"Descripci√≥n del formato")
    htmlformato = models.TextField(default='',verbose_name=u"Html de formato.")

    def __str__(self):
        return self.titulo

    def esta_enuso(self):
        return self.pazsalvo_set.filter(status=True, estado=2).exists()

    def direcciones(self):
        return self.direccionformatops_set.filter(status=True).order_by('orden')

    def responsables_direccion(self):
        return self.direcciones().values_list('departamento__responsable_id', flat=True).distinct()

    def preguntas_cargo(self, cargo):
        return DetalleDireccionFormatoPS.objects.filter(Q(formato_id=self.id) | Q(direccionformato__formato_id=self.id), status=True, cargo=cargo)

    def preguntas_jefe(self):
        return DetalleDireccionFormatoPS.objects.filter(Q(formato_id=self.id) | Q(direccionformato__formato_id=self.id), status=True, cargo=None)

    def responsables_dp(self):
        ids_cargo = DetalleDireccionFormatoPS.objects.filter(Q(direccionformato__formato=self) | Q(formato=self), status=True).values_list('cargo_id', flat=True).distinct()
        distributivo_p = DistributivoPersona.objects.filter(status=True, denominacionpuesto_id__in=ids_cargo, unidadorganica_id__in=self.direcciones().values_list('departamento_id', flat=True))
        return distributivo_p

    def cargos_formato(self):
        cargos_id=list(self.responsables_dp().values_list('denominacionpuesto_id', flat=True))
        for direccion in self.direcciones():
            cargo_director = direccion.departamento.responsable.mi_cargo_administrativo()
            cargos_id.append(cargo_director.id)
        return cargos_id

    def cargos_preguntas(self):
        return self.responsables_dp().values_list('denominacionpuesto_id', flat=True)

    def jefes_inmediatos(self):
        return self.pazsalvo_set.filter(status=True).values_list('jefeinmediato_id', flat=True).distinct()

    def pazsalvos(self):
        return self.pazsalvo_set.filter(status=True)

    def t_pazsalvo_sin_certificado(self):
        cont=0
        pazsalvos=self.pazsalvo_set.filter(status=True)
        for pazsalvo in pazsalvos:
            if pazsalvo.estado == 1 and pazsalvo.respondio_all():
                cont+=1
        return cont

    def certificados_por_firmar(self, idpersona):
        return len(ResponsableFirmaPS.objects.filter(status=True, certificado__pazsalvo__formato=self, persona_id=idpersona, certificado__pazsalvo__estado=2, firmado=False).values_list('certificado_id', flat=True))

    def certificados_por_llenar(self, distributivo):
        cargo = distributivo.denominacionpuesto
        # pazsalvos=PazSalvo.objects.filter(status=True, estado=1).exclude(detallepazsalvo__pregunta__cargo=cargo)
        pazsalvos=self.pazsalvos().filter(estado=1, formato=self).exclude(detallepazsalvo__persona=distributivo.persona)
        cont = 0
        for ps in pazsalvos:
            cont += 1 if not ps.respuestas(cargo) else 0
        return cont

    def pendiente_llenar_persona(self, cargo, es_jefe=False):
        from django.db.models import Count, Case, When, IntegerField

        filtro = Q(detallepazsalvo__pregunta__cargo=cargo) if not es_jefe else Q(detallepazsalvo__pregunta__cargo=cargo) | Q(detallepazsalvo__pregunta__cargo=None)

        pazsalvos_con_respuestas = self.pazsalvos().filter(estado=1, formato=self).exclude(filtro)
            # .annotate(num_respuestas=Count(Case(When(detallepazsalvo__pregunta__cargo=cargo, detallepazsalvo__status=True, then=1), default=0, output_field=IntegerField())))
        cont = 0
        for ps in pazsalvos_con_respuestas:
            cont += 1 if not ps.respuestas(cargo.id) else 0
        return cont

    def certificados_por_llenar_jefe(self, idpersona):
        pazsalvos=self.pazsalvos().filter(estado=1, jefeinmediato_id=idpersona, formato=self)
        cont=0
        for ps in pazsalvos:
            cont+=1 if not ps.respuestas_jefe() else 0
        return cont

    class Meta:
        verbose_name = u'Formato paz y salvo'
        verbose_name_plural = u'Formatos de paz y salvo'

class DireccionFormatoPS(ModeloBase):
    formato = models.ForeignKey(FormatoPazSalvo, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Formato de paz y salvo")
    departamento = models.ForeignKey(Departamento, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Departamento")
    orden = models.IntegerField(default=0, verbose_name=u'Orden de aparici√≥n en el certificado')

    def __str__(self):
        return f'{self.formato.titulo} - {self.departamento.nombre}'

    def preguntas(self):
        return self.detalledireccionformatops_set.filter(status=True).order_by('cargo_id')

    def preguntas_cargo(self, cargo):
        return self.detalledireccionformatops_set.filter(status=True, cargo_id=cargo)

    def cargos(self):
        return self.detalledireccionformatops_set.filter(status=True).values_list('cargo_id','cargo__descripcion').distinct()

    def en_uso(self):
        return self.detalledireccionformatops_set.filter(status=True).exists()

    def puede_eliminar(self):
        return DetallePazSalvo.objects.filter(pazsalvo__status=True, status=True, pregunta__direccionformato=self, pazsalvo__estado=2).exists()

    def responsable_administrativo(self):
        if self.departamento.responsable.mi_cargo_administrativo():
            return self.departamento.responsable.mi_cargo_administrativo().id
        return None


    class Meta:
        verbose_name = u'Direcci√≥n formato'
        verbose_name_plural = u'Direcciones formato'

class DetalleDireccionFormatoPS(ModeloBase):
    direccionformato = models.ForeignKey(DireccionFormatoPS, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Direcci√≥n formato de paz y salvo")
    formato = models.ForeignKey(FormatoPazSalvo, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Formato de paz y salvo")
    cargo = models.ForeignKey(DenominacionPuesto, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Cargo del usuario que va a firmar ")
    descripcion = models.CharField(default='', max_length=150, verbose_name=u"Pregunta de la direcci√≥n")
    logicamodelo = models.TextField(default='', verbose_name=u'logica')
    obligatorio = models.BooleanField(default=True, verbose_name='Pregunta obligatoria')

    def __str__(self):
        return self.descripcion

    def respuesta(self, pazsalvo):
        return self.detallepazsalvo_set.filter(status=True, pazsalvo=pazsalvo, respondio=True).first()

    def en_uso(self):
        return self.detallepazsalvo_set.filter(status=True, pazsalvo__status=True, pazsalvo__estado=2, respondio=True).exists()

    class Meta:
        verbose_name = u'Detalle Direcci√≥n formato'
        verbose_name_plural = u'Detalles Direccion formato'

ESTADOS_DOCUMENTOS_PAZ_SALVO = (
    (0, u'Pendiente'),
    (1, u'Aprobado'),
    (2, u'Corregir'),
    (3, u'Corregido'),
    (4, u'Rechazado'),
)

class PazSalvo(ModeloBase):
    formato = models.ForeignKey(FormatoPazSalvo, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Formato de paz y salva")
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u'Persona que renuncia', on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Departamento al que pertenec√≠a")
    cargo = models.ForeignKey(DenominacionPuesto, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Cargo que ocupaba el usuario")
    tiporelacion = models.IntegerField(choices=TIPO_RELACION_LABORAL, null=True, blank=True, verbose_name=u"Cargo que ocupaba el usuario")
    jefeinmediato = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u'Persona que fue su jefe inmediato', on_delete=models.CASCADE, related_name="+")
    estado = models.IntegerField(choices=ESTADO_PAZ_SALVO,null=True, blank=True, verbose_name=u'Estado del tramite')
    observacion = models.CharField(default='', max_length=150, verbose_name=u"Observaci√≥n del jefe inmediato")
    ultimaremuneracion = models.FloatField(default=0, verbose_name=u"Ultima remuneraci√≥n percibida")
    fecha = models.DateField(blank=True, null=True, verbose_name=u'Fecha de salida')
    motivosalida = models.IntegerField(choices=MOTIVO_SALIDA,null=True, blank=True, verbose_name=u'Motivo de salida')
    estado_requisito = models.IntegerField(choices=ESTADOS_DOCUMENTOS_PAZ_SALVO, default=0, verbose_name=u'Estados')
    estado_tramite = models.IntegerField(choices=ESTADO_TRAMITE_PAGO_PAZ_SALVO, default=1, verbose_name=u'Estado tramite de pago')

    def __str__(self):
        return f'{self.persona}'

    def estado_documentos(self):
        documentos = self.documentopazsalvo_set.filter(status=True, obligatorio=True)
        if documentos.filter(estados=0):
            return  '<span class="text-default">Pendiente</span>'
        elif documentos.filter(estados=2):
            return '<span class="text-warning">Corregir</span>'
        elif documentos.filter(estados=3):
            return '<span class="text-primary">Corregido</span>'
        elif documentos.filter(estados=4):
            return '<span class="text-danger">Rechazado</span>'
        else:
            return '<span class="text-success">Aprobado</span>'

    def color_estado_requisito(self):
        color = 'text-default'
        if self.estado_requisito == 1:
            color = "text-success"
        elif self.estado_requisito == 2:
            color = "text-warning"
        elif self.estado_requisito == 3:
            color = "text-primary"
        elif self.estado_requisito == 4:
            color = "text-danger"
        return color

    def doc_validacion(self):
        documentos = self.documentopazsalvo_set.filter(status=True, obligatorio=True)
        if documentos.filter(estados=0):
            return 0
        elif documentos.filter(estados=2):
            return 2
        elif documentos.filter(estados=3):
            return 3
        elif documentos.filter(estados=4):
            return 4
        else:
            return 1

    def totales(self):
        documentos = self.documentos_subidos()
        pendientes = len(RequisitoPazSalvo.objects.filter(status=True, mostrar=True, opcional=False).values_list('id',flat=True))
        corregir, corregidos, aprobados, rechazados, sinarchivos = 0,0,0,0, True
        if documentos:
            sinarchivos=False
            pendientes=len(documentos.filter(archivo='').values_list('id',flat=True))
            aprobados = len(documentos.filter(estados=1).exclude(archivo='').values_list('id',flat=True))
            corregir = len(documentos.filter(estados=2).exclude(archivo='').values_list('id',flat=True))
            corregidos = len(documentos.filter(estados=3).exclude(archivo='').values_list('id',flat=True))
            rechazados = len(documentos.filter(estados=4).exclude(archivo='').values_list('id',flat=True))
        return {'corregir':corregir, 'aprobados': aprobados,'pendientes':pendientes,'corregidos':corregidos, 'rechazados':rechazados, 'sinarchivos':sinarchivos}

    def documentos_subidos(self):
        return self.documentopazsalvo_set.filter(status=True).order_by('-requisito_id')

    def documento(self):
        return self.certificadofirmaps_set.filter(status=True).first()

    def es_jefe(self, persona):
        return persona == self.jefeinmediato

    def direccion_persona(self, persona):
        return DireccionFormatoPS.objects.filter(status=True, formato=self.formato, departamento__responsable=persona).first()

    def es_responsable_direccion(self, idcargo):
        return idcargo in self.cargos_director_id()

    def cargos_director_id(self):
        cargos = []
        for direccion in self.formato.direcciones():
            cargo_director = direccion.departamento.responsable.mi_cargo_administrativo()
            cargos.append((cargo_director.id, cargo_director.descripcion))
        return [numero for numero, _ in cargos]

    def cargos_id(self):
        cargos = []
        for direccion in self.formato.direcciones():
            cargos += direccion.cargos()
            cargo_director = direccion.departamento.responsable.mi_cargo_administrativo()
            cargos.append((cargo_director.id, cargo_director.descripcion))
        return [numero for numero, _ in cargos]

    def preguntas(self, cargo=None, es_jefe=False, solo_jefe=False):
        if not solo_jefe:
            filtro = Q(cargo_id=cargo) if not es_jefe else Q(cargo_id=cargo) | Q(cargo=None)
        else:
            filtro=Q(cargo=None)
        return DetalleDireccionFormatoPS.objects.filter(Q(formato=self.formato) | Q(direccionformato__formato=self.formato), filtro, status=True)

    def preguntas_all(self):
        return DetalleDireccionFormatoPS.objects.filter(Q(formato=self.formato) | Q(direccionformato__formato=self.formato), status=True)

    def respuestas(self, cargo, es_jefe=False):
        filtro = Q(pregunta__cargo_id=cargo) if not es_jefe else (Q(pregunta__cargo_id=cargo) | Q(pregunta__cargo=None) | Q(persona=self.jefeinmediato))
        return self.detallepazsalvo_set.filter(filtro, status=True, respondio=True)

    def respuestas_jefe(self):
        return self.detallepazsalvo_set.filter(pregunta__cargo=None, status=True, respondio=True)

    def respuestas_all(self):
        # return self.detallepazsalvo_set.filter(status=True, marcado=True)
        return self.detallepazsalvo_set.filter(status=True, respondio=True)

    def cumplimiento(self, cargo=None, es_jefe=False, persona=None):
        try:
            respondio = firmo = self.estado in [3,4]
            if cargo and not respondio:
                t_preguntas = len(self.preguntas(cargo, es_jefe))
                # t_respuestas = len(self.respuestas(cargo, es_jefe).filter(marcado=True))
                respuestas = self.respuestas(cargo, es_jefe)
                t_respuestas = len(respuestas) - len(respuestas.filter(pregunta__obligatorio=True, marcado=False))
                certificado = self.documento()
                t_firmado = 0
                if certificado:
                    ultimo_generado = certificado.ultimo_archivo_generado()
                    fecha = ultimo_generado.fecha_creacion
                    filtro = Q(fecha_creacion__gt=fecha)
                    if persona:
                        filtro = filtro & Q(persona=persona)
                    else:
                        if es_jefe:
                            filtro = filtro & (Q(persona=self.jefeinmediato) | Q(
                                cargo=self.jefeinmediato.mi_cargo_administrativo()))
                        else:
                            filtro = filtro & Q(cargo_id=cargo)
                    historial = certificado.historial_firmados().filter(filtro)
                    if historial:
                        t_firmado = historial.aggregate(total_firmas=Sum('cantidadfirmas'))['total_firmas']
                respondio = t_preguntas <= t_respuestas or self.estado > 1
                firmo = t_firmado > 0 and respondio and self.estado > 1
            return {'respondio': respondio, 'firmo': firmo, 'exiteresponsable': cargo}
        except Exception as ex:
            print(ex)

    def respondio_all(self):
        return len(self.preguntas_all()) <= len(self.respuestas_all())

    def color_estado(self):
        color='text-primary'
        if self.estado==2:
            color='text-success'
        elif self.estado==3:
            color = 'text-secondary'
        return color

    def btn_estado(self):
        color='btn-secondary'
        if self.estado == 2:
            color='btn-primary'
        elif self.estado == 3:
            color = 'btn-success'
        elif self.estado == 4:
            color = 'btn-primary-old'
        return color

    def puede_editar(self):
        certificado = self.documento()
        firmas_exists = False
        if certificado and self.estado > 1:
            firmas_exists = self.documento().historial_firmados().exists()
        return self.estado in [1, 2] and not firmas_exists

    def cargo_director_unico(self, unidad):
        idcargo = unidad.departamento.responsable.mi_cargo_administrativo().id
        cargos = list(DetalleDireccionFormatoPS.objects.filter(status=True, direccionformato=unidad).values_list('cargo_id', flat=True).distinct())
        cargos.append(idcargo)
        cargos = list(set(cargos))
        return len(cargos) == 1 and idcargo in self.cargos_director_id()

    def responsables(self):
        return ResponsableFirmaPS.objects.filter(status=True, certificado__pazsalvo=self)

    def get_responsable_firmar(self, persona):
        return ResponsableFirmaPS.objects.filter(status=True, certificado__pazsalvo=self, persona=persona).first()

    def puede_firmar(self, idpersona):
        firma_pendiente=ResponsableFirmaPS.objects.filter(status=True, persona_id=idpersona, certificado__pazsalvo=self, certificado__pazsalvo__estado=2, firmado=False).exists()
        return self.respondio_all() and firma_pendiente

    def cargos_extras(self):
        return self.persona.mis_cargos().exclude(denominacionpuesto=self.cargo).values_list('denominacionpuesto__descripcion', flat=True)

    def cargo_jefe(self):
        mi_cargo = self.jefeinmediato.mi_cargo_administrativo()
        return mi_cargo if mi_cargo else self.jefeinmediato.mi_cargo()

    def observaciones(self):
        return self.observacionpazsalvo_set.filter(status=True)

    class Meta:
        verbose_name = u'Formato paz y salva'
        verbose_name_plural = u'Formatos de paz y salva'

class DetallePazSalvo(ModeloBase):
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u'Funcionario que marca la respuesta', on_delete=models.CASCADE)
    pazsalvo = models.ForeignKey(PazSalvo, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Paz y salvo del usuario")
    pregunta = models.ForeignKey(DetalleDireccionFormatoPS, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Pregunta de paz y salvo")
    marcado = models.BooleanField(default=False, verbose_name="¬øMarcado?")
    respondio = models.BooleanField(default=False, verbose_name="¬øRespondi√≥ la pregunta?")
    observacion = models.CharField(default='', max_length=150, verbose_name=u"Observaci√≥n del usuario")

    def __str__(self):
        return f'{self.pazsalvo} - {self.pregunta}'

    class Meta:
        verbose_name = u'Detalle paz salvo'
        verbose_name_plural = u'Detalles paz salvo'

class CertificadoFirmaPS(ModeloBase):
    pazsalvo = models.ForeignKey(PazSalvo,blank=True, null=True, on_delete=models.CASCADE, verbose_name=u'Informe activo al cual esta siendo firmado')
    responsables = models.ManyToManyField(Persona, verbose_name=u'Responsables a cargo de firmar el certificado')
    archivo = models.FileField(upload_to='talento_humano/certificado_firma/', blank=True, null=True, verbose_name=u'Archivo firmado')
    firmafinal = models.BooleanField(default=False, verbose_name="Firma final")

    def __str__(self):
        return u'%s' % (self.pazsalvo)

    def ultimo_archivo_con_exclusion(self, persona):
        return self.historialcertificadofirmaps_set.filter(status=True).exclude(persona=persona, estado=2).last()

    def ultimo_archivo(self):
        return self.historialcertificadofirmaps_set.filter(status=True).last()

    def historial_firmados(self):
        return self.historialcertificadofirmaps_set.filter(status=True, estado=2)

    def historial_firmas_all(self):
        return self.historialcertificadofirmaps_set.filter(status=True)

    def ultimo_archivo_generado(self):
        return self.historialcertificadofirmaps_set.filter(status=True, estado=1).last()

    def responsable_firma(self, persona):
        return self.responsablefirmaps_set.filter(status=True, persona=persona).first()

    def firmado_all(self):
        for r_firma in self.responsablefirmaps_set.filter(status=True):
            if not r_firma.total_firmado() >= r_firma.cantidadfirmas:
                return False
        return True

    class Meta:
        verbose_name = u'Certificado firma de paz y salvo'
        verbose_name_plural = u'Certificados firmados de paz y salvo'
        ordering = ('-fecha_creacion',)

class ResponsableFirmaPS(ModeloBase):
    certificado = models.ForeignKey(CertificadoFirmaPS,blank=True, null=True, on_delete=models.CASCADE, verbose_name=u'Certificado de paz y salvo')
    persona = models.ForeignKey(Persona,blank=True, null=True, on_delete=models.CASCADE, verbose_name=u'Responsables a cargo de firmar el certificado')
    cargo = models.ForeignKey(DenominacionPuesto, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Cargo con el que se registro")
    cantidadfirmas = models.IntegerField(default=0, verbose_name=u'Cantidad de firmas por colocar')
    firmado = models.BooleanField(default=False, verbose_name="Firmo todos sus campos")
    orden = models.IntegerField(default=0, verbose_name=u'Orden de firmar el certificado.')

    def __str__(self):
        return u'%s' % (self.persona)

    def total_firmado(self):
        es_jefe = self.certificado.pazsalvo.jefeinmediato == self.persona
        ultimo_generado = self.certificado.ultimo_archivo_generado()
        fecha = ultimo_generado.fecha_creacion
        filtro = Q(fecha_creacion__gt=fecha, persona=self.persona)
        # if es_jefe:
        #     filtro = filtro & (Q(persona=self.persona) | Q(cargo=self.get_cargo()))
        # else:
        #     filtro = filtro & Q(cargo=self.get_cargo())
        historial = self.certificado.historial_firmados().filter(filtro)
        return historial.aggregate(total_firmas=Sum('cantidadfirmas'))['total_firmas'] if historial else 0

    def get_cargo(self):
        if self.cargo:
            return self.cargo
        else:
            return self.persona.mi_cargo_administrativo()

    class Meta:
        verbose_name = u'Responsable Firma '
        verbose_name_plural = u'Responsables de firmar '
        ordering = ('fecha_creacion',)

class HistorialCertificadoFirmaPS(ModeloBase):
    certificadosalida = models.ForeignKey(CertificadoFirmaPS,blank=True, null=True, on_delete=models.CASCADE, verbose_name=u'Certificado de salida de paz y salvo')
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u'Persona que firmo el documento', on_delete=models.CASCADE)
    cargo = models.ForeignKey(DenominacionPuesto, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Cargo del que firma el documento ")
    archivo = models.FileField(upload_to='talento_humano/certificado_firma/', blank=True, null=True, verbose_name=u'Archivo firmado')
    # firmado = models.BooleanField(default=True, verbose_name="Documento firmado o solo se genero")
    cantidadfirmas = models.IntegerField(default=0, verbose_name=u'Cantidad de firmas colocadas')
    estado = models.IntegerField(choices=ESTADO_HISTORIAL_PS,null=True, blank=True, verbose_name=u'Estado del del documento')

    def __str__(self):
        return u'%s' % (self.persona)

    def color_estado(self):
        color='text-primary'
        if self.estado==2:
            color='text-success'
        elif self.estado==3:
            color = 'text-warning'
        return color

    class Meta:
        verbose_name = u'Historial de certificado firmado'
        verbose_name_plural = u'Historial de certificados firmados'
        ordering = ('fecha_creacion',)

class RequisitoPazSalvo(ModeloBase):
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    descripcion = models.CharField(default='', max_length=5000, verbose_name=u'Descripci√≥n')
    link = models.CharField(default='', max_length=5000, verbose_name=u'Link de leyenda')
    mostrar = models.BooleanField(default=False, verbose_name=u'Mostrar')
    opcional = models.BooleanField(default=False, verbose_name='Requisito opcional')
    archivo = models.FileField(upload_to='pazsalvo/requisitos', blank=True, null=True, verbose_name=u'Formato de requisito')

    def __str__(self):
        return u'%s' % (self.nombre)

    def documentos_subidos(self):
        return self.documentopazsalvo_set.filter(status=True).order_by('-id')

    def documento_pazsalvo(self, pazsalvo):
        return self.documentopazsalvo_set.filter(status=True, pazsalvo=pazsalvo).last()

    def en_uso(self):
        return self.documentopazsalvo_set.filter(status=True).exists()

    class Meta:
        verbose_name = 'Requisito Paz y Salvo'
        verbose_name_plural = 'Requisitos Paz y Salvo'
        ordering = ('-id',)

class ObservacionPazSalvo(ModeloBase):
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u'Funcionario que marca la respuesta', on_delete=models.CASCADE)
    pazsalvo = models.ForeignKey(PazSalvo, null=True, blank=True, on_delete=models.CASCADE, verbose_name=u"Paz y salvo del usuario")
    observacion = models.TextField(default='', verbose_name=u"Observaci√≥n del usuario")

    def __str__(self):
        return f'{self.observacion}'

    class Meta:
        verbose_name = u'Observaci√≥n de Paz y Salvo'
        verbose_name_plural = u'Observaciones de Paz y Salvo'
        ordering = ('-fecha_creacion',)


class DocumentoPazSalvo(ModeloBase):
    pazsalvo = models.ForeignKey(PazSalvo, blank=True, null=True, verbose_name=u"Paz y salvo",on_delete=models.CASCADE)
    requisito = models.ForeignKey(RequisitoPazSalvo, blank=True, null=True, verbose_name=u"Documento",on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='pazsalvo/requisitos', blank=True, null=True, verbose_name=u'Archivo')
    estados = models.IntegerField(choices=ESTADOS_DOCUMENTOS_PAZ_SALVO, default=0, verbose_name=u'Estados')
    observacion = models.TextField(default='', blank=True, null=True, verbose_name='Observaci√≥n')
    f_validacion = models.DateTimeField(blank=True, null=True, verbose_name='Fecha de validaci√≥n de documento')
    f_correccion = models.DateTimeField(blank=True, null=True, verbose_name='Fecha de correcci√≥n de documento')
    obligatorio = models.BooleanField(default=False, verbose_name='Documento Obligatorio')

    def typefile(self):
        if self.archivo:
            return self.archivo.name[self.archivo.name.rfind("."):]
        else:
            return None

    def requerido(self):
        if not self.archivo and self.obligatorio:
            return 'required'
        elif self.estados == 2 and self.obligatorio:
            return 'required'
        return ''

    def puede_subir(self):
        return  not self.archivo or self.estados in [2, 0, 3]

    def color_estado(self):
        color = 'bg-default'
        if self.estados == 1:
            color = "bg-success"
        elif self.estados == 2:
            color = "bg-warning"
        elif self.estados == 3:
            color = "bg-primary"
        elif self.estados == 4:
            color = "bg-danger"
        return color

    def __str__(self):
        return u'%s %s' % (self.pazsalvo.persona, self.requisito)

class PeriodoConstatacionAF(ModeloBase):
    nombre = models.CharField(default='', max_length=150, verbose_name=u"Nombre Periodo de constataci√≥n de activos fijos")
    fechainicio = models.DateField(blank=True, null=True)
    fechafin = models.DateField(blank=True, null=True)
    fechafinprorroga = models.DateField(blank=True, null=True, verbose_name=u'Fecha hasta donde se puede extender las constataciones')
    cerrado = models.BooleanField(default=False, verbose_name=u"Periodo cerrado o finalizado")
    fechacierre = models.DateField(blank=True, null=True)
    anio = models.IntegerField(blank=True, null=True, verbose_name=u'A√±o para actas')
    totalactivos = models.IntegerField(blank=True, null=True, verbose_name=u'Total de activos que entraron a constataci√≥n')
    totalconstatados = models.IntegerField(blank=True, null=True, verbose_name=u'Cantidad total de activos constatados al finalizar')
    totalpendientes = models.IntegerField(blank=True, null=True, verbose_name=u'Cantidad total de activos pendientes al finalizar')
    detalle = models.CharField(default='', max_length=150, verbose_name=u"Detalle Periodo")
    baselegal = models.TextField(default='', verbose_name=u"Base legal")
    activo = models.BooleanField(default=False, verbose_name=u"Periodo activo")

    def __str__(self):
        return u"%s - Inicio %s - Fin %s" % (self.nombre, self.fechainicio, self.fechafin)

    def vigente(self):
        hoy=datetime.now().date()
        return self.fechainicio <= hoy and self.fechafin >= hoy

    def en_uso(self):
        return self.constatacionfisica_set.filter(status=True).exists()

    def detalle_constatacion(self):
        return DetalleConstatacionFisica.objects.filter(status=True, codigoconstatacion__periodo=self)

    def total_constatados(self):
        filtro = Q(status=True, activo__statusactivo=1)
        if self.cerrado:
            filtro &= Q(activo__fecha_creacion__lte=self.fechacierre)
        return len(self.detalle_constatacion().filter(filtro).values_list('id'))

    def total_activos(self):
        filtro = Q(status=True, statusactivo=1)
        if self.cerrado:
            filtro &= Q(fecha_creacion__lte=self.fechacierre)
        return len(ActivoFijo.objects.filter(filtro).values_list('id'))

    def total_pendientes(self):
        return self.total_activos()-self.total_constatados()

    def total_proceso_baja(self):
        total_baja=len(ActivoFijo.objects.filter(status=True, statusactivo=1, procesobaja=True).values_list('id'))
        return self.total_activos()-total_baja

    def totales(self):
        filtro = Q(status=True, statusactivo=1)
        filtro_cons = Q(activo__statusactivo=1)
        if self.cerrado:
            filtro &= Q(fecha_creacion__lte=self.fechacierre)
            filtro_cons &= Q(activo__fecha_creacion__lte=self.fechacierre)
        t_activos = len(ActivoFijo.objects.filter(filtro).values_list('id'))
        t_constatados = len(self.detalle_constatacion().filter(filtro_cons).values_list('id'))
        t_pendientes= t_activos-t_constatados
        t_procesobaja = len(ActivoFijo.objects.filter(filtro, procesobaja=True).values_list('id'))
        context={'t_activos':t_activos,
                 't_constatados':t_constatados,
                 't_procesobaja':t_procesobaja,
                 't_pendientes':t_pendientes}
        return context

    def constatadores(self):
        constatadores = DetalleConstatacionFisica.objects.filter(status=True, codigoconstatacion__periodo=self, responsable__isnull=False).values_list('responsable_id', 'responsable__nombres', 'responsable__apellido1', 'responsable__apellido2').order_by('responsable_id').distinct()
        return constatadores

    class Meta:
            verbose_name = u'Periodo de Constatacion'
            verbose_name_plural = u'Periodos de Constataciones'

class ArchivoConstatacionAF(ModeloBase):
    periodo = models.ForeignKey(PeriodoConstatacionAF, on_delete=models.CASCADE, verbose_name='Periodo de constataci√≥n')
    cantidad = models.IntegerField(default=0, verbose_name=u'Cantidad de firmar en el documento')
    responsables = models.ManyToManyField('sga.Persona', verbose_name='Responsables de firmar el documento')
    archivo = models.FileField(upload_to='archivofesigef/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo csv')

    def __str__(self):
        return u'%s - %s' % (self.inicio, self.fin)

    class Meta:
        verbose_name = u"Archivo constatacion"
        verbose_name_plural = u"Archivos de constataciones"
        ordering = ('-periodo__fechainicio',)

class ArchivoFacturaEsigef(ModeloBase):
    fecha = models.DateField(verbose_name=u'Fecha')
    cantidad = models.IntegerField(default=0, verbose_name=u'Cantidad de facturas en el archivo')
    archivo = models.FileField(upload_to='archivofesigef/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo csv')

    def __str__(self):
        return u'%s - %s' % (self.fecha, self.cantidad)

    class Meta:
        verbose_name = u"Archivo Factura eSigef"
        verbose_name_plural = u"Archivos Facturas eSigef"
        ordering = ['fecha']


class ArchivoFacturaEsigefDetalle(ModeloBase):
    archivoesigef = models.ForeignKey(ArchivoFacturaEsigef, on_delete=models.CASCADE, verbose_name=u'Archivo eSigef')
    factura = models.ForeignKey(Factura, on_delete=models.CASCADE, verbose_name=u'Factura')

    def __str__(self):
        return u'%s' % (self.factura.numerocompleto)

    class Meta:
        verbose_name = u"Detalle Archivo Factura eSigef"
        verbose_name_plural = u"Detalles Archivos Facturas eSigef"

SELECCION_REGISTRO_DECIMO = (
    (1, u"ACUMULA"),
    (2, u"MENSUALIZA"),
)

class ConfiguraDecimo(ModeloBase):
    fechainicio = models.DateField(null=True, blank=True, verbose_name=u'Fecha')
    fechafin = models.DateField(null=True, blank=True, verbose_name=u'Fecha')

    def detalles(self):
        return self.detalleconfiguradecimo_set.filter(status=True)

    class Meta:
        verbose_name = u"Configuraci√≥n de d√©cimo"
        verbose_name_plural = u"Configuraciones de d√©cimo"

#Configura las restricciones a elegir por regimen y modalidad
class DetalleConfiguraDecimo(ModeloBase):
    configuracion = models.ForeignKey(ConfiguraDecimo, blank=True, null=True, verbose_name=u'Configuraci√≥n', on_delete=models.CASCADE)
    regimenlaboral = models.ForeignKey(OtroRegimenLaboral, blank=True, null=True, verbose_name=u'Regimen laboral', on_delete=models.CASCADE)
    modalidadlaboral = models.ManyToManyField(ModalidadLaboral,verbose_name=u'Regimen laboral')
    seleccion = models.IntegerField(choices=SELECCION_REGISTRO_DECIMO,null=True, blank=True, verbose_name=u'Selecci√≥n de d√©cimo')

class RegistroDecimo(ModeloBase):
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u'Persona que registra', on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='talento_humano/decimo/', blank=True, null=True, verbose_name=u'Archivo firmado')
    estado = models.IntegerField(choices=ESTADO_IMPORTACION,null=True, blank=True, verbose_name=u'Estado del del documento')
    seleccion = models.IntegerField(choices=SELECCION_REGISTRO_DECIMO,null=True, blank=True, verbose_name=u'Selecci√≥n de d√©cimo')
    fechainicio = models.DateField(null=True, blank=True, verbose_name=u'Fecha')
    fechafin = models.DateField(null=True, blank=True, verbose_name=u'Fecha')
    activo = models.BooleanField(default=True, verbose_name="Registro actual")

    def __str__(self):
        return f'{self.persona} - {self.get_estado_display()}'

    def color_estado(self):
        if self.estado == 1:
            return 'text-warning'
        elif self.estado == 2:
            return 'text-success'

    class Meta:
        verbose_name = u"Registro de d√©cimo"
        verbose_name_plural = u"Registros de d√©cimo"

class ConfiguraPeriodotthh(ModeloBase):
    nombre = models.CharField(max_length=100, null=True, blank=True, verbose_name=u'Nombre')
    fechainicio = models.DateField(null=True, blank=True, verbose_name=u'Fecha')
    fechafin = models.DateField(null=True, blank=True, verbose_name=u'Fecha')
    activo = models.BooleanField(default=True, verbose_name=u'periodo activo')

    def __str__(self):
        return u'%s' % (self.nombre)

    def listadorequisitos(self):
        return self.requisitoperiodotthh_set.filter(status=True)

    def listadopersonas(self):
        return self.personaperiodotthh_set.filter(status=True)

    class Meta:
        verbose_name = u"Configuraci√≥n periodo tthh"
        verbose_name_plural = u"Configuraciones periodo tthh"

class RequisitoPeriodotthh(ModeloBase):
    periodotthh = models.ForeignKey(ConfiguraPeriodotthh, blank=True, null=True, verbose_name=u'Periodo tthh', on_delete=models.CASCADE)
    nombre = models.CharField(max_length=100, verbose_name=u'Nombre')
    descripcion = models.CharField(default='', max_length=5000, verbose_name=u'Descripci√≥n')
    link = models.CharField(default='', max_length=5000, verbose_name=u'Link de leyenda')
    mostrar = models.BooleanField(default=False, verbose_name=u'Mostrar')
    opcional = models.BooleanField(default=False, verbose_name='Requisito opcional')
    archivo = models.FileField(upload_to='periodotthh/requisitos', blank=True, null=True, verbose_name=u'Formato de requisito')

    def __str__(self):
        return u'%s' % (self.nombre)

    class Meta:
        verbose_name = u"Requisito de periodo tthh"
        verbose_name_plural = u"Requisitos de periodos de tthh"

ESTADOS_DOCUMENTOS_REQUISITOS = (
    (0, u'Pendiente'),
    (1, u'Aprobado'),
    (2, u'Corregir'),
    (3, u'Corregido'),
    (4, u'Rechazado'),
)

class PersonaPeriodotthh(ModeloBase):
    periodotthh = models.ForeignKey(ConfiguraPeriodotthh, blank=True, null=True, verbose_name=u'Periodo tthh', on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona, blank=True, null=True, verbose_name=u'Persona tthh', on_delete=models.CASCADE)
    estado_requisito = models.IntegerField(choices=ESTADOS_DOCUMENTOS_REQUISITOS, default=0, verbose_name=u'Estados')

    def __str__(self):
        return u'%s' % (self.persona)

    def documentos_subidos(self):
        return self.documentopersonaperiodotthh_set.filter(status=True).order_by('-requisito_id')

    def estado_documentos(self):
        documentos = self.documentopersonaperiodotthh_set.filter(status=True, obligatorio=True)
        if documentos.filter(estados=0):
            return  '<span class="text-default">Pendiente</span>'
        elif documentos.filter(estados=2):
            return '<span class="text-warning">Corregir</span>'
        elif documentos.filter(estados=3):
            return '<span class="text-primary">Corregido</span>'
        elif documentos.filter(estados=4):
            return '<span class="text-danger">Rechazado</span>'
        else:
            return '<span class="text-success">Aprobado</span>'

    def color_estado_requisito(self):
        color = 'text-default'
        if self.estado_requisito == 1:
            color = "text-success"
        elif self.estado_requisito == 2:
            color = "text-warning"
        elif self.estado_requisito == 3:
            color = "text-primary"
        elif self.estado_requisito == 4:
            color = "text-danger"
        return color

    def doc_validacion(self):
        documentos = self.documentopersonaperiodotthh_set.filter(status=True, obligatorio=True)
        if documentos.filter(estados=0):
            return 0
        elif documentos.filter(estados=2):
            return 2
        elif documentos.filter(estados=3):
            return 3
        elif documentos.filter(estados=4):
            return 4
        else:
            return 1

    def totales(self):
        documentos = self.documentos_subidos()
        pendientes, corregir, corregidos, aprobados, rechazados, sinarchivos = 0, 0, 0, 0, 0, True
        if documentos:
            sinarchivos = False
            pendientes = len(documentos.filter(archivo='').values_list('id', flat=True))
            aprobados = len(documentos.filter(estados=1).exclude(archivo='').values_list('id', flat=True))
            corregir = len(documentos.filter(estados=2).exclude(archivo='').values_list('id', flat=True))
            corregidos = len(documentos.filter(estados=3).exclude(archivo='').values_list('id', flat=True))
            rechazados = len(documentos.filter(estados=4).exclude(archivo='').values_list('id', flat=True))
        return {'corregir': corregir, 'aprobados': aprobados, 'pendientes': pendientes, 'corregidos': corregidos, 'rechazados': rechazados, 'sinarchivos': sinarchivos}

    class Meta:
        verbose_name = u"Persona de periodo tthh"
        verbose_name_plural = u"Personas de periodos de tthh"

class DocumentoPersonaPeriodotthh(ModeloBase):
    personaperiodotthh = models.ForeignKey(PersonaPeriodotthh, blank=True, null=True, verbose_name=u"Persona periodo tthh",on_delete=models.CASCADE)
    requisito = models.ForeignKey(RequisitoPeriodotthh, blank=True, null=True, verbose_name=u"Documento",on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='periodotthh/requisitospersona', blank=True, null=True, verbose_name=u'Archivo')
    estados = models.IntegerField(choices=ESTADOS_DOCUMENTOS_REQUISITOS, default=0, verbose_name=u'Estados')
    observacion = models.TextField(default='', blank=True, null=True, verbose_name='Observaci√≥n')
    f_validacion = models.DateTimeField(blank=True, null=True, verbose_name='Fecha de validaci√≥n de documento')
    f_correccion = models.DateTimeField(blank=True, null=True, verbose_name='Fecha de correcci√≥n de documento')
    obligatorio = models.BooleanField(default=False, verbose_name='Documento Obligatorio')

    def __str__(self):
        return u'%s' % (self.personaperiodotthh)

    def typefile(self):
        if self.archivo:
            return self.archivo.name[self.archivo.name.rfind("."):]
        else:
            return None
    
    def requerido(self):
        if not self.archivo and self.obligatorio:
            return 'required'
        elif self.estados == 2 and self.obligatorio:
            return 'required'
        return ''

    def puede_subir(self):
        return not self.archivo or self.estados in [2, 0, 3]

    def color_estado(self):
        color = 'bg-default'
        if self.estados == 1:
            color = "bg-success"
        elif self.estados == 2:
            color = "bg-warning"
        elif self.estados == 3:
            color = "bg-primary"
        elif self.estados == 4:
            color = "bg-danger"
        return color


class TerminosCondicionesEquipoComputo(ModeloBase):
    titulo = models.TextField(blank=True, null=True, verbose_name='T√≠tulo')
    descripcion = models.TextField(blank=True, null=True, verbose_name='Descripci√≥n')
    activo = models.BooleanField(default=False, verbose_name=u'¬øActivo?')

    def __str__(self):
        return "%s" % self.titulo


class ConfiguracionEquipoComputo(ModeloBase):
    titulo = models.CharField(default='', max_length=150, verbose_name=u"Titulo de la configuraci√≥n")
    descripcion = models.CharField(default='', max_length=150, verbose_name=u"Descripci√≥n de la configuraci√≥n")
    fechainicio = models.DateField(null=True, blank=True, verbose_name=u'Fecha inicio')
    horainiciouso = models.TimeField(null=True, blank=True, verbose_name=u'Hora inicio')
    fechafin = models.DateField(null=True, blank=True, verbose_name=u'Fecha fin')
    horafinuso = models.TimeField(null=True, blank=True, verbose_name=u'Hora fin')
    activo = models.BooleanField(default=False, verbose_name=u'Activo')
    tiempolimite = models.TimeField(null=True, blank=True, verbose_name=u'Tiempo limite de uso')


    def __str__(self):
        return "%s" % self.titulo

    def obtener_otra_configuracion_activa(self):
        configuracion = ConfiguracionEquipoComputo.objects.filter(status=True, activo=True).exclude(id=self.id)
        return configuracion.first() if configuracion else None


class EquipoComputo(ModeloBase):
    equipo = models.ForeignKey(ActivoTecnologico, blank=True, null=True, verbose_name=u"Equipo de C√≥mputo", on_delete=models.CASCADE)
    activo = models.BooleanField(default=False, verbose_name=u'¬øActivo?')
    estado = models.IntegerField(choices=MY_ESTADO_EQUIPO_COMPUTO, default=1, verbose_name=u'Estado de Solicitud')


    def __str__(self):
        return u"%s - Cod.Inv. %s - Cod.Gob. %s " % (self.get_activofijo().descripcion, self.get_activofijo().codigointerno, self.get_activofijo().codigogobierno)

    def get_activofijo(self):
        return self.equipo.activotecnologico

class SolicitudEquipoComputo(ModeloBase):
    configuracion = models.ForeignKey(ConfiguracionEquipoComputo, blank=True, null=True, verbose_name=u"Configuraci√≥n de equipos de computo", on_delete=models.CASCADE)
    terminos = models.ForeignKey(TerminosCondicionesEquipoComputo, blank=True, null=True, verbose_name=u"T√©rminos y Condiciones", on_delete=models.CASCADE)
    solicitante = models.ForeignKey('sga.Persona', related_name='solicitanteequipocomputo', verbose_name=u"Solicitante del equipo",
                                    blank=True, null=True, on_delete=models.CASCADE)
    responsable = models.ForeignKey('sga.Persona', related_name='responsableequipocomputo', verbose_name=u"Responsable del equipo",
                                    blank=True, null=True, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, verbose_name=u'Inscripci√≥n del solicitante', on_delete=models.CASCADE, null=True, blank=True)
    estadosolicitud = models.IntegerField(choices=MY_ESTADO_SOLICITUD_EQUIPO_COMPUTO, default=0, verbose_name=u'Estado de Solicitud')
    motivo = models.TextField(default='', blank=True, null=True, verbose_name='Motivo')
    horainicio = models.TimeField(null=True, blank=True, verbose_name=u'Hora de inicio solicitada')
    horafin = models.TimeField(null=True, blank=True, verbose_name=u'Hora fin solicitada')
    horainiciouso = models.TimeField(null=True, blank=True, verbose_name=u'Hora inicio de uso')
    horafinuso = models.TimeField(null=True, blank=True, verbose_name=u'Hora fin de uso')
    fechauso = models.DateField(blank=True, null=True, verbose_name=u'Fecha de uso del equipo')
    codigo = models.CharField(max_length=100, blank=True, null=True, verbose_name=u"C√≥digo solicitud")
    tipodocumento = models.IntegerField(choices=MY_TIPO_DOCUMENTO_EQUIPO_COMPUTO, blank=True, null=True, verbose_name=u'Tipo de documento')
    descripciondocumento = models.TextField(default='', blank=True, null=True, verbose_name='Descripci√≥n del documento')


    def __str__(self):
        return u"%s - Estado: %s" % (self.equipocomputo.equipo.descripcion, self.estadosolicitud)

    def get_tipodocumento(self):
        if self.tipodocumento != 5:
            return self.get_tipodocumento_display()
        else:
            return self.descripciondocumento

    def color_estado(self):
        if self.estadosolicitud == 1:
            return 'secondary'
        elif self.estadosolicitud == 2:
            return 'success'
        elif self.estadosolicitud == 3:
            return 'primary'
        elif self.estadosolicitud == 4:
            return 'primary-old'
        else:
            return 'danger'

    def get_equipoprestado(self):
        equipoprestado = self.equipoprestado_set.filter(status=True).first()
        return equipoprestado.equipocomputo.get_activofijo().descripcion if equipoprestado else None

    def puede_editar_solicitud(self):
        return self.estadosolicitud == 1

    def get_preguntasestadoentrega(self):
        return self.estadoentregaec_set.filter(status=True).order_by('-id')

    def get_preguntasestadodevuelve(self):
        return self.estadodevuelveec_set.filter(status=True).order_by('-estadoentrega__id')


class EquipoPrestado(ModeloBase):
    equipocomputo = models.ForeignKey(EquipoComputo, blank=True, null=True, verbose_name=u"Equipo de C√≥mputo", on_delete=models.CASCADE)
    solicitudec = models.ForeignKey(SolicitudEquipoComputo,  blank=True, null=True, verbose_name=u"Solicitud de equipo", on_delete=models.CASCADE)
    persona = models.ForeignKey('sga.Persona', verbose_name=u"Persona que tiene el equipo",
                                    blank=True, null=True, on_delete=models.CASCADE)


class HistorialSolicitudEC(ModeloBase):
    solicitudec = models.ForeignKey(SolicitudEquipoComputo, blank=True, null=True, verbose_name=u"Solicitud Equipo de C√≥mputo", on_delete=models.CASCADE)
    estadosolicitud = models.IntegerField(choices=MY_ESTADO_SOLICITUD_EQUIPO_COMPUTO, default=0, verbose_name=u'Estado de Solicitud')
    observacion = models.CharField(max_length=2000,  verbose_name=u'Observaci√≥n', default='')
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, verbose_name=u'Persona', blank=True, null=True)

    def __str__(self):
        return u"%s - Estado: %s" % (self.solicitudec.equipocomputo.equipo.descripcion, self.estadosolicitud)

    def color_estado(self):
        if self.estadosolicitud == 1:
            return 'secondary'
        elif self.estadosolicitud == 2:
            return 'success'
        elif self.estadosolicitud == 3:
            return 'primary'
        elif self.estadosolicitud == 4:
            return 'primary-old'
        else:
            return 'danger'


class PreguntaEstadoEC(ModeloBase):
    descripcion = models.TextField(default='', blank=True, null=True, verbose_name='Descripci√≥n')
    activo = models.BooleanField(default=False, verbose_name=u'¬øActivo?')

    def __str__(self):
        return u"%s" % (self.descripcion)


class EstadoEntregaEC(ModeloBase):
    solicitudec = models.ForeignKey(SolicitudEquipoComputo, blank=True, null=True, verbose_name=u"Solicitud Equipo de C√≥mputo", on_delete=models.CASCADE)
    preguntaestado = models.ForeignKey(PreguntaEstadoEC, blank=True, null=True, verbose_name=u"Pregunta Estado Equipo C√≥mputo", on_delete=models.CASCADE)
    acepto = models.BooleanField(default=False, verbose_name=u'¬øAcept√≥?')

    def __str__(self):
        return u"%s - ¬øAcept√≥?: %s" % (self.solicitudec.equipocomputo.equipo.descripcion, self.acepto)


class EstadoDevuelveEC(ModeloBase):
    solicitudec = models.ForeignKey(SolicitudEquipoComputo, blank=True, null=True, verbose_name=u"Solicitud Equipo de C√≥mputo", on_delete=models.CASCADE)
    estadoentrega = models.ForeignKey(EstadoEntregaEC, blank=True, null=True, verbose_name=u"Estado Equipo de C√≥mputo", on_delete=models.CASCADE)
    acepto = models.BooleanField(default=False, verbose_name=u'¬øAcept√≥?')

    def __str__(self):
        return u"%s - ¬øAcept√≥?: %s" % (self.solicitudec.equipocomputo.equipo.descripcion, self.acepto)

    def get_preguntaestado(self):
        return self.estadoentrega.preguntaestado


class ProcesoEleccion(ModeloBase):
    descripcion = models.CharField(max_length=1000, blank=True, null=True, verbose_name='Descripci√≥n')
    periodoacademico = models.ForeignKey('sga.Periodo', blank=True, null=True, on_delete=models.PROTECT, verbose_name=u"Periodo")
    activo = models.BooleanField(default=False, verbose_name='¬øActivo?')

    def __str__(self):
        return self.descripcion

    def tota_estados(self):
        context = {}
        instancia = self.solicitudjustificacionpe_set.filter(status=True)
        context['pendientes'] = len(instancia.filter(estado=1))
        context['aprobados'] = len(instancia.filter(estado=2))
        context['rechazados'] = len(instancia.filter(estado=3))
        context['total'] = len(instancia)
        return context

    class Meta:
        verbose_name = u"Proceso de elecci√≥n "
        verbose_name_plural = u"Procesos de elecciones"
        ordering = ('-fecha_creacion',)

class SolicitudJustificacionPE(ModeloBase):
    proceso = models.ForeignKey(ProcesoEleccion, blank=True, null=True, on_delete=models.CASCADE, verbose_name=u"Proceso de elecci√≥n")
    persona = models.ForeignKey('sga.Persona', blank=True, null=True, on_delete=models.PROTECT, verbose_name=u"Persona")
    motivo = models.CharField(max_length=2000, default='', verbose_name='Motivo de la justificaci√≥n')
    archivo = models.FileField(upload_to='archivojustifiacion', blank=True, null=True, verbose_name=u'Archivo')
    estado = models.IntegerField(choices=ESTADO_JUSTIFICACION_PROCESO, default=1, verbose_name=u'Estado')
    responsable_valida = models.ForeignKey('sga.Persona', blank=True, null=True, related_name='responsable_valida_set',on_delete=models.CASCADE, verbose_name=u"Responsable de validacion de la solicitud")
    fecha_valida = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha que valido')
    observacion = models.CharField(max_length=2000, default='', verbose_name='Observaci√≥n de la validaci√≥n')

    def __str__(self):
        return f'{self.persona}'

    def color_estado(self):
        if self.estado == 2:
            return 'text-success'
        elif self.estado == 3:
            return 'text-danger'
        return 'text-secondary'

    class Meta:
        verbose_name = u"Solicitud Justificacion"
        verbose_name_plural = u"Solicitudes de Justificaciones"
        ordering = ('-fecha_creacion',)

class HistorialValidacionJustificacion(ModeloBase):
    solicitud = models.ForeignKey(SolicitudJustificacionPE,blank=True, null=True, on_delete=models.CASCADE, verbose_name="Solicitud de justificaci√≥n")
    responsable_valida = models.ForeignKey('sga.Persona',blank=True, null=True, on_delete=models.CASCADE, verbose_name="reponsable que valida la solicitud")
    estado = models.IntegerField(choices=ESTADO_JUSTIFICACION_PROCESO,default=1, verbose_name="Estado")
    observacion = models.CharField(max_length=2000, blank=True, null=True, verbose_name='Observaci√≥n de la revisi√≥n')

    def __str__(self):
        return f'Revisi√≥n de {self.solicitud} por {self.responsable_valida}'

    class Meta:
        verbose_name = "Historial de Revisi√≥n"
        verbose_name_plural = "Historiales de Revisi√≥n"
        ordering = ('-fecha_creacion',)


class BodegaVirtual(ModeloBase):
    activo = models.ForeignKey(ActivoFijo, verbose_name=u"Activo fijo", on_delete=models.CASCADE, blank=True, null=True)
    responsable = models.ForeignKey('sga.Persona', related_name='responsable_activo', verbose_name=u"Responsable",
                                    blank=True, null=True, on_delete=models.CASCADE)
    custodio = models.ForeignKey('sga.Persona', related_name='custodio_activo', verbose_name=u"Custodio", blank=True,
                                 null=True, on_delete=models.CASCADE)
    estado = models.IntegerField(default=1, choices=MY_ESTADO_BODEGA_VIRTUAL, verbose_name=u'Estado')
    observacion = models.CharField(default='', max_length=250, blank=True, null=True, verbose_name=u"Observaci√≥n")
    solicitante = models.ForeignKey('sga.Persona', related_name='solicitante_activo', verbose_name=u"Solicitante",
                                    blank=True, null=True, on_delete=models.CASCADE)
    foto = models.FileField(upload_to='bodegavirtual/%Y/%m', blank=True, null=True, verbose_name=u'Foto del activo')

    def __str__(self):
        return f'Activo: {self.activo} publicado por: {self.responsable}'

    class Meta:
        verbose_name = "Activo en Bodega virtual"
        verbose_name_plural = "Activos en Bodega virtual"
        ordering = ('-fecha_creacion',)
