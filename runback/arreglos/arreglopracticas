#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys

# import winsound
# import xlrd
import xlrd
import xlwt

from xlwt import easyxf


from settings import *
from django.db import transaction

# SITE_ROOT = os.path.dirname(os.path.realpath(__file__))
YOUR_PATH = os.path.dirname(os.path.realpath(__file__))
# print(f"YOUR_PATH: {YOUR_PATH}")
SITE_ROOT = os.path.dirname(os.path.dirname(YOUR_PATH))
SITE_ROOT = os.path.join(SITE_ROOT, '')
# print(f"SITE_ROOT: {SITE_ROOT}")
your_djangoproject_home = os.path.split(SITE_ROOT)[0]
# print(f"your_djangoproject_home: {your_djangoproject_home}")
sys.path.append(your_djangoproject_home)

from django.core.wsgi import get_wsgi_application
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
application = get_wsgi_application()

from sga.models import *
from sagest.models import *
from sga.funciones import *

from posgrado.models import InscripcionCohorte

# def alerta(tipo):
#     try:
#         f = 0
#         frequency = 2500  # Set Frequency To 2500 Hertz
#         duration = 1000  # Set Duration To 1000 ms == 1 second
#         if tipo == 'E':
#             while f <= 10:
#                 winsound.Beep(2500, duration)
#                 winsound.Beep(1700, duration)
#                 f += 1
#         else:
#             while True or f < 20:
#                 winsound.Beep(1500, duration)
#                 f += 1
#                 if f == 60:
#                     break
#
#     except KeyboardInterrupt:
#         print("Presiono tecla...")
#         pass
#     except Exception as ex:
#         msg = ex.__str__()
#         print(msg)
#
# def alerta_corta():
#     duration = 200
#     winsound.Beep(5500, duration)
#
#

def arreglo_practicas():
    try:
        # PROCESO EJECUTADO EL 07 DE AGOSTO DEL 2019
        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'postgrado'))
        #
        # fuentecabecera = easyxf('font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        # fuentenormal = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        #
        # libro = xlwt.Workbook()
        # libro1 = libro.add_sheet("Listado")
        #
        # fil = 0
        # col = 0
        #
        # columnas = [
        #     (u"IDPractica", 5000),
        #     (u"Cédula", 5000),
        #     (u"Alumno", 10000),
        #     (u"IdInscripcion Incorrecta", 5000),
        #     (u"IdInscripcion Correcta", 5000)
        # ]
        #
        # for col_num in range(len(columnas)):
        #     libro1.write(fil, col_num, columnas[col_num][0], fuentecabecera)
        #     libro1.col(col_num).width = columnas[col_num][1]
        #
        # inscripcion = Inscripcion.objects.filter(inscripcionold__isnull=False).order_by('persona__apellido1','persona__apellido2','persona__nombres')
        # linea = 1
        # fil = 1
        #
        # for ins in inscripcion:
        #     persona = ins.persona
        #
        #     prac = PracticasPreprofesionalesInscripcion.objects.filter(inscripcion__persona=persona)
        #
        #     for p in prac:
        #         if p.inscripcion.id != ins.id:
        #             print("Registro "+str(linea))
        #             print("IDPractica: " + str(p.id) + " Cédula: " + persona.cedula + " - Nombres: " + str(persona) + " - Inscripcion: " + str(p.inscripcion.id) + " - InscripcionReal: "+ str(ins.id))
        #
        #             regprac = PracticasPreprofesionalesInscripcion.objects.get(pk=p.id)
        #             regprac.inscripcion_id = ins.id
        #             regprac.save()
        #
        #             libro1.write(fil, 0, p.id, fuentenormal)
        #             libro1.write(fil, 1, persona.cedula, fuentenormal)
        #             libro1.write(fil, 2, str(persona), fuentenormal)
        #             libro1.write(fil, 3, p.inscripcion.id, fuentenormal)
        #             libro1.write(fil, 4, ins.id, fuentenormal)
        #
        #             linea += 1
        #             fil += 1
        #
        # libro.save(output_folder+"/registro_practicas_arregladas.xls")
        print("EL proceso ya fue ejecutado...")
    except Exception as ex:
        print('error: %s' % ex)


def consulta_inscripciones():
    try:
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        liborigen = xlrd.open_workbook(output_folder + '/MATRIZ04122019.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"Cédula", 5000),
            (u"Carrera", 5000),
            (u"Inscripción", 5000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)
                cedula = cols[1].strip()
                carrera = int(cols[3])
                inscripcion = Inscripcion.objects.get(carrera_id=carrera, persona__cedula=cedula)
                inscripcion = inscripcion.id

                hojadestino.write(fila, 0, cedula, fuentenormal)
                hojadestino.write(fila, 1, carrera, fuentenormal)
                hojadestino.write(fila, 2, inscripcion, fuentenormal)

                print("Procesada fila # " + str(fila))

        libdestino.save(output_folder + "/MATRIZ04122019_INSCRIPCIONES.xls")

        print("Proceso terminado...")
    except Exception as ex:
        print('error: %s' % ex)


def quitar_deudas_maestria():
    try:
        # Procesado el 20/08/2019
        fuentecabecera = easyxf('font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))
        liborigen = xlrd.open_workbook(output_folder + '/MAESTRIAS ANTIGUAS.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"Cédula", 5000),
            (u"Programa", 5000),
            (u"Nombre", 8000),
            (u"Valor a Anular", 5000),
            (u"Valor Anulado", 5000),
            (u"Cantidad Rubros anulados", 5000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        # Hoja: DAR DE BAJA
        sheet = liborigen.sheet_by_index(1)

        totcv = totncv = 0
        sumatotalxanular = sumatotalanulado = Decimal(0)
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)
                cedula = cols[0].strip()
                programa = cols[1].strip()
                nombres = cols[2].strip()
                valor = Decimal(cols[5]).quantize(Decimal('.01'))

                if cedula != 'FIN':
                    # Consulto la suma total de rubros de la persona
                    sumarubros = Decimal(null_to_decimal(Rubro.objects.filter(persona__cedula=cedula,
                                                                              cancelado=False,
                                                                              status=True,
                                                                              nombre__icontains='POSTGRADO').
                                                         aggregate(totalrubros=Sum('saldo'))['totalrubros'],2)).quantize(Decimal('.01'))

                    # Consulto el numero de rubros de la persona
                    numerorubros = Rubro.objects.filter(persona__cedula=cedula,
                                                        cancelado=False,
                                                        status=True,
                                                        nombre__icontains='POSTGRADO').aggregate(numerorubros=Count('id'))['numerorubros']

                    #Anulo los rubros de la persona
                    Rubro.objects.filter(persona__cedula=cedula,
                                         cancelado=False,
                                         status=True,
                                         nombre__icontains='POSTGRADO').update(status=False,
                                                                               observacion='ANULADO SEGUN MEMO # UNEMI-VICEADM-2019-0363-MEM DEL 16 DE AGOSTO DEL 2019. INFORME TECNICO ITI-DAF-T-001-2019 DEL 10/07/2019. LISTADO ARCHIVO EXCEL MAESTRIAS ANTIGUAS'
                                                                               )

                    hojadestino.write(fila, 0, cedula, fuentenormal)
                    hojadestino.write(fila, 1, programa, fuentenormal)
                    hojadestino.write(fila, 2, nombres, fuentenormal)
                    hojadestino.write(fila, 3, valor, fuentenormal)
                    hojadestino.write(fila, 4, sumarubros, fuentenormal)
                    hojadestino.write(fila, 5, numerorubros, fuentenormal)

                    print("Procesada fila # " + str(fila))
                    print(cedula)
                    print(valor)
                    print(sumarubros)

                    sumatotalxanular += valor
                    sumatotalanulado += sumarubros

                    if valor == sumarubros:
                        totcv += 1
                    else:
                        totncv += 1
                        print("ATENCION: NO COINCIDEN TOTALES")
                else:
                    break

        libdestino.save(output_folder + "/DEUDAS_BAJA_GRUPO1.xls")

        print("Total Registros que coinciden valores: " + str(totcv))
        print("Total Registros que NO coinciden valores: " + str(totncv))
        print("Total Registros procesados: " + str(fila - 1))
        print("Total Monto por anular: " + str(sumatotalxanular))
        print("Total Monto anulado real: " + str(sumatotalanulado))

        print("Proceso terminado...")
    except Exception as ex:
        print('error: %s' % ex)


def ajustar_valores_rubros_maestria(nprograma):
    try:
        # Procesado el 22/08/2019
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))
        liborigen = xlrd.open_workbook(output_folder + '/MAESTRIAS ANTIGUAS.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"Cédula", 3000),
            (u"Programa", 5000),
            (u"Nombre", 8000),
            (u"Valor Original Deuda", 5000),
            (u"Nuevo Valor Deuda", 5000),
            (u"IdRubro", 3000),
            (u"Rubro", 5500),
            (u"Valor Original", 5000),
            (u"Valor Ajustado/Registrado", 5000),
            (u"Accion Realizada", 5000) # AUMENTO O DISMINUCION
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        if nprograma == 'GEREDU':
            indice = 2
        elif nprograma == 'PYMES':
            indice = 3
        else:
            indice = 4

        sheet = liborigen.sheet_by_index(indice)
        filan = 1
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)
                cedula = cols[0].strip()
                programa = cols[1].strip()
                nombres = cols[2].strip()
                nuevovalor = Decimal(cols[4]).quantize(Decimal('.01'))
                valororiginal = Decimal(cols[5]).quantize(Decimal('.01'))
                diferencia = Decimal(cols[6]).quantize(Decimal('.01'))
                accion = cols[7].strip()

                if cedula != 'FIN':
                    if accion == 'REGISTRAR':
                        persona = Persona.objects.get(cedula=cedula, status=True)
                        tiporubro = TipoOtroRubro.objects.get(pk=2845)

                        rubro = Rubro(status=True,
                                      tipo=tiporubro,
                                      persona=persona,
                                      nombre="MATRICULA DE POSTGRADO",
                                      cuota=1,
                                      fecha="2013-10-17",
                                      fechavence="2015-05-18",
                                      valor=nuevovalor,
                                      iva_id=1,
                                      valoriva=0.00,
                                      valortotal=nuevovalor,
                                      saldo=nuevovalor,
                                      cancelado=False,
                                      observacion="CREADO SEGUN MEMO # UNEMI-VICEADM-2019-0363-MEM DEL 16 DE AGOSTO DEL 2019. INFORME TECNICO ITI-DAF-T-001-2019 DEL 10/07/2019. LISTADO ARCHIVO EXCEL MAESTRIAS ANTIGUAS",
                                      tipocuota=3,
                                      epunemi=False)
                        rubro.save()

                        hojadestino.write(filan, 0, cedula, fuentenormal)
                        hojadestino.write(filan, 1, programa, fuentenormal)
                        hojadestino.write(filan, 2, nombres, fuentenormal)
                        hojadestino.write(filan, 3, "-", fuentenormal)
                        hojadestino.write(filan, 4, nuevovalor, fuentenormal)
                        hojadestino.write(filan, 5, rubro.id, fuentenormal)
                        hojadestino.write(filan, 6, rubro.nombre, fuentenormal)
                        hojadestino.write(filan, 7, "-", fuentenormal)
                        hojadestino.write(filan, 8, rubro.saldo, fuentenormal)
                        hojadestino.write(filan, 9, "REGISTRADO", fuentenormal)

                        filan += 1
                    elif accion == "REGULAR":

                        hojadestino.write(filan, 0, cedula, fuentenormal)
                        hojadestino.write(filan, 1, programa, fuentenormal)
                        hojadestino.write(filan, 2, nombres, fuentenormal)
                        hojadestino.write(filan, 3, valororiginal, fuentenormal)
                        hojadestino.write(filan, 4, nuevovalor, fuentenormal)

                        # Consulto el numero de rubros de la persona
                        numerorubros = Rubro.objects.filter(persona__cedula=cedula,
                                                            cancelado=False,
                                                            status=True,
                                                            nombre__icontains='POSTGRADO').aggregate(numerorubros=Count('id'))['numerorubros']

                        accionrealizada = "AUMENTO" if diferencia > 0 else "DISMINUCION"

                        valorcuotas = Decimal(nuevovalor/numerorubros).quantize(Decimal('.01'))
                        subtotalcuotas = valorcuotas * (numerorubros-1)
                        ultimacuota = nuevovalor - subtotalcuotas

                        rubrospersona = Rubro.objects.filter(persona__cedula=cedula,
                                                            cancelado=False,
                                                            status=True,
                                                            nombre__icontains='POSTGRADO').order_by('cuota')
                        ncuotas = 1
                        for r in rubrospersona:
                            valorsaldocuota = r.saldo
                            valororiginalcuota = r.valor
                            pagado = valororiginalcuota - valorsaldocuota
                            if ncuotas < numerorubros:
                                valornuevacuota = valorcuotas
                            else:
                                valornuevacuota = ultimacuota

                            valornuevacuota2 = valornuevacuota

                            if pagado == 0:
                                r.valor = valornuevacuota
                                r.valortotal = valornuevacuota
                                r.saldo = valornuevacuota
                            else:
                                valornuevacuota = pagado
                                r.valor = pagado
                                r.valortotal = pagado
                                r.saldo = 0
                                r.cancelado = True

                            r.observacion = "VALOR AJUSTADO: " + (accionrealizada if pagado == 0 else "RUBRO ESTABLECIDO COMO CANCELADO") + ", SEGUN MEMO # UNEMI-VICEADM-2019-0363-MEM DEL 16 DE AGOSTO DEL 2019. INFORME TECNICO ITI-DAF-T-001-2019 DEL 10/07/2019. LISTADO ARCHIVO EXCEL MAESTRIAS ANTIGUAS"
                            r.save()

                            hojadestino.write(filan, 5, r.id, fuentenormal)
                            hojadestino.write(filan, 6, r.nombre, fuentenormal)
                            hojadestino.write(filan, 7, valororiginalcuota, fuentenormal)
                            hojadestino.write(filan, 8, valornuevacuota, fuentenormal)
                            hojadestino.write(filan, 9, accionrealizada if pagado == 0 else "RUBRO ESTABLECIDO COMO CANCELADO", fuentenormal)

                            filan += 1

                            if pagado > 0:
                                persona = Persona.objects.get(cedula=cedula, status=True)
                                tiporubro = TipoOtroRubro.objects.get(pk=2845)

                                rubro = Rubro(status=True,
                                              tipo=tiporubro,
                                              persona=persona,
                                              nombre="MATRICULA DE POSTGRADO",
                                              cuota=1,
                                              fecha="2013-10-17",
                                              fechavence="2015-05-18",
                                              valor=valornuevacuota2,
                                              iva_id=1,
                                              valoriva=0.00,
                                              valortotal=valornuevacuota2,
                                              saldo=valornuevacuota2,
                                              cancelado=False,
                                              observacion="CREADO SEGUN MEMO # UNEMI-VICEADM-2019-0363-MEM DEL 16 DE AGOSTO DEL 2019. INFORME TECNICO ITI-DAF-T-001-2019 DEL 10/07/2019. LISTADO ARCHIVO EXCEL MAESTRIAS ANTIGUAS",
                                              tipocuota=3,
                                              epunemi=False)
                                rubro.save()

                                hojadestino.write(filan, 5, rubro.id, fuentenormal)
                                hojadestino.write(filan, 6, rubro.nombre, fuentenormal)
                                hojadestino.write(filan, 7, "-", fuentenormal)
                                hojadestino.write(filan, 8, rubro.saldo, fuentenormal)
                                hojadestino.write(filan, 9, "REGISTRADO", fuentenormal)

                                filan += 1


                            ncuotas += 1


                    print("Procesada fila # " + str(fila))
                    print(cedula)
                    print(nuevovalor)
                    print(diferencia)
                    print(accion)
                else:
                    break


        libdestino.save(output_folder + "/AJUSTES_"+ nprograma +".xls")

        print("Total Registros procesados: " + str(fila - 1))
        print("Proceso terminado...")
    except Exception as ex:
        print('error: %s' % ex)

def actualizar_rubro_maestria_a_epunemi():
    try:
        # Proceso ejecutado el 26/08/2019, 02/09/2019
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"Periodo", 5000),
            (u"Programa", 5000),
            (u"Cédula", 3000),
            (u"Maestrante", 8000),
            (u"Total Rubros afectados", 5000),
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        lista_periodos = Periodo.objects.filter(tipo__id__in=[3, 4], nivel__matricula__retiradomatricula=False).order_by('inicio','fin').distinct()

        filan = 1

        for per in lista_periodos:
            lista_carreras = Carrera.objects.filter(inscripcion__matricula__nivel__periodo=per).order_by('nombre').distinct()

            for car in lista_carreras:

                matriculas = Matricula.objects.filter(nivel__periodo=per, inscripcion__carrera=car).order_by('inscripcion__persona__apellido1','inscripcion__persona__apellido2')

                for mat in matriculas:

                    totalrubros = Rubro.objects.filter(cancelado=False, matricula=mat, status=True, fechavence__gte='2016-01-01').aggregate(total=Count('id'))['total']

                    if totalrubros > 0:
                        Rubro.objects.filter(cancelado=False, matricula=mat, status=True, fechavence__gte='2016-01-01').update(epunemi=True)
                        # hojadestino.write(filan, 0, per.nombre, fuentenormal)
                        # hojadestino.write(filan, 1, car.nombre, fuentenormal)
                        # hojadestino.write(filan, 2, mat.inscripcion.persona.cedula, fuentenormal)
                        # hojadestino.write(filan, 3, mat.inscripcion.persona.apellido1 + " " + mat.inscripcion.persona.apellido2 + " " + mat.inscripcion.persona.nombres , fuentenormal)
                        # hojadestino.write(filan, 4, totalrubros, fuentenormal)

                        print("Registro procesado # " + str(filan))

                        filan += 1

        #libdestino.save(output_folder + "/RUBROS_ACTUALIZADOS_IPEC.xls")
        print("Proceso terminado...")
    except Exception as ex:
        print('error: %s' % ex)

def genera_archivo_becasexternas():
    try:
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        liborigen = xlrd.open_workbook(output_folder + '/BECADOSIFTHUNEMI.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"IdPersona", 5000),
            (u"Cedula", 5000),
            (u"Apellidos", 5000),
            (u"Nombres", 5000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)
                cedula = str(int(cols[0])).strip()
                if len(cedula) < 10:
                    cedula = cedula.zfill(10)
                apellidos = cols[2].strip()
                nombres = cols[3].strip()
                idpersona = None
                if Persona.objects.filter(cedula=cedula).exists():
                    persona = Persona.objects.get(cedula=cedula)
                    idpersona = persona.id

                    becaper = BecaPersona(persona_id=idpersona,
                                          tipoinstitucion=1,
                                          institucion_id=2,
                                          fechainicio=datetime.now().date(),
                                          fechafin=None,
                                          observacion='BASADO EN ARCHIVO FACILITADO POR MSC. DIANA AGUILAR',
                                          verificado=False
                    )
                    becaper.save()


                hojadestino.write(fila, 0, idpersona, fuentenormal)
                hojadestino.write(fila, 1, cedula, fuentenormal)
                hojadestino.write(fila, 2, apellidos, fuentenormal)
                hojadestino.write(fila, 3, nombres, fuentenormal)
                hojadestino.write(fila, 4, "NO EXISTE PERSONA" if not idpersona else '', fuentenormal)

                print("Procesada fila # " + str(fila))

        libdestino.save(output_folder + "/LISTADOPERSONASCODIGOBECAEXTERNA.xls")

        print("Proceso terminado...")
    except Exception as ex:
        print('error: %s' % ex)

def llena_recorrido_solicitud_becas():
    try:
        i = 1
        solicitudes = BecaSolicitud.objects.filter(status=True, periodo_id=110).order_by('fecha_creacion')
        for sol in solicitudes:
            print("Linea # ", i)
            print(sol)
            det = BecaSolicitudRecorrido(
                                        solicitud=sol,
                                        observacion='SOLICITADO POR ESTUDIANTE',
                                        estado=1
            )
            det.save()

            BecaDetalleSolicitud.objects.filter(solicitud=sol).exclude(requisito_id__in=[15, 16]).update(estado=2, observacion='APROBACIÓN AUTOMÁTICA',fechaaprueba=sol.fecha_creacion, personaaprueba=sol.inscripcion.persona)

            i += 1
        print("Proceso finalizado...")
    except Exception as ex:
        print('error: %s' % ex)

def alumnos_categoriaD():
    try:
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentenumerodecimal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
            num_format_str='#,##0.00')
        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        liborigen = xlrd.open_workbook(output_folder + '/LISTADOONLINEGRUPOCD.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"FACULTAD", 7000),
            (u"CARRERA", 7000),
            (u"MODALIDAD", 7000),
            (u"NIVEL ACTUAL", 7000),
            (u"IDENTIFICACIÓN", 5000),
            (u"NOMBRES COMPLETOS", 10000),
            (u"FECHA NACIMIENTO", 3000),
            (u"E-MAIL PERSONAL", 7000),
            (u"E-MAIL UNEMI", 7000),
            (u"CELULAR", 7000),
            (u"CONVECIONAL", 7000),
            (u"PROVINCIA", 5000),
            (u"CANTÓN", 5000),
            (u"DIRECCIÓN", 20000),

            (u"ECUATORIANO/EXTRANJERO RESIDENTE", 3000),
            (u"MATRICULADO PERIODO ACTUAL", 3000),
            (u"ESTUDIANTE REGULAR", 3000),
            (u"RECIBIÓ SANCIONES", 3000),
            (u"TODAS MATERIAS APROBADAS NIVEL ANTERIOR", 3000),
            (u"RECIBE BECAS EXTERNAS", 3000),
            (u"PROMEDIO ANTERIOR", 3000),
            (u"ASISTENCIA ANTERIOR", 3000),
            (u"CÓDIGO GRUPO", 5000),
            (u"GRUPO SOCIOECONOMICO", 5000),
            (u"SEMESTRE ANTERIOR", 4000),
            (u"ELEGIBLE PARA BECA", 4000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        periodoactual = Periodo.objects.get(pk=110)

        filalista = 1
        totalelegibles = 0
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)

                idinscripcion = str(int(cols[0])).strip()
                idpersona = str(int(cols[2])).strip()
                idmatricula = str(int(cols[1])).strip()

                cedula = cols[7]


                if Matricula.objects.filter(pk=idmatricula).exists():

                    if cedula == '0923711170':
                        print("Gholl")

                    procesar = True
                    matriculaactual = Matricula.objects.get(pk=idmatricula)

                    persona = Persona.objects.get(pk=idpersona)
                    inscripcion = Inscripcion.objects.get(id=idinscripcion)
                    inscripcion_old = None

                    totalmatriculas = Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona,
                                                                                           status=True,
                                                                                           estado_matricula__in=[2,3],
                                                                                           nivel__periodo__activo=True).exclude(inscripcion__coordinacion_id=9).count()
                    if Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona, status=True,
                                                                            estado_matricula__in=[2,3],
                                                                            nivel__periodo__activo=True).exclude(inscripcion__coordinacion_id=9).count() > 1:
                        periodomatriculaanterior = \
                        Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona, status=True,
                                                                             estado_matricula__in=[2,3],
                                                                             nivel__periodo__activo=True).exclude(inscripcion__coordinacion_id=9).order_by(
                            '-nivel__periodo__fin')[1]


                        ##### SOLO TEMPORAL PARA ON LINE POR CIERTOS CASOS QUE TIENE 2 MATRICULAS EN PERIODO 110
                        if periodomatriculaanterior['nivel__periodo_id'] == 110:
                            periodomatriculaanterior = \
                                Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona,
                                                                                     status=True,
                                                                                     estado_matricula__in=[2,3],
                                                                                     nivel__periodo__activo=True).exclude(
                                    inscripcion__coordinacion_id=9).order_by(
                                    '-nivel__periodo__fin')[2]
                        ##### SOLO TEMPORAL PARA ON LINE POR CIERTOS CASOS QUE TIENE 2 MATRICULAS EN PERIODO 110



                        matriculaanterior = Matricula.objects.get(~Q(inscripcion__coordinacion_id=9),
                                                                  inscripcion__persona=persona,
                                                                  estado_matricula__in=[2,3],
                                                                  nivel__periodo_id=periodomatriculaanterior[
                                                                      'nivel__periodo_id'], status=True)

                        if matriculaanterior.mis_materias_sin_retiro().count() == 0:
                            if totalmatriculas >= 3:
                                periodomatriculaanterior = \
                                Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona,
                                                                                     status=True, estado_matricula__in=[2,3],
                                                                                     nivel__periodo__activo=True).exclude(inscripcion__coordinacion_id=9).order_by(
                                    '-nivel__periodo__fin')[2]
                                matriculaanterior = Matricula.objects.get(~Q(inscripcion__coordinacion_id=9),
                                                                         inscripcion__persona=persona,
                                                                          estado_matricula__in=[2,3],
                                                                          nivel__periodo_id=periodomatriculaanterior[
                                                                              'nivel__periodo_id'], status=True)
                            else:
                                procesar = False
                    else:
                        procesar = False

                if procesar:
                        facultad = cols[4].strip()
                        carrera = cols[5].strip()
                        modalidad = cols[6].strip()
                        cedula = cols[7]
                        nivelactual = cols[8].strip()
                        apellido1 = cols[9].strip()
                        apellido2 = cols[10].strip()
                        nombres = cols[11].strip()
                        direccion1 = cols[12].strip()
                        direccion2 = cols[13].strip()
                        emailpersonal = cols[14].strip()
                        emailunemi = cols[15].strip()
                        celular = cols[16].strip()
                        convencional = cols[17].strip()
                        codigogrupo = cols[18].strip()
                        gruposocioeconomico = cols[19].strip()

                        print("Último registro por ejecutar: " +cedula)


                        hojadestino.write(filalista, 0, facultad, fuentenormal)
                        hojadestino.write(filalista, 1, carrera, fuentenormal)
                        hojadestino.write(filalista, 2, modalidad, fuentenormal)
                        hojadestino.write(filalista, 3, nivelactual, fuentenormal)
                        hojadestino.write(filalista, 4, cedula, fuentenormal)
                        hojadestino.write(filalista, 5, apellido1 + " " + apellido2 + " " + nombres, fuentenormal)
                        hojadestino.write(filalista, 6, str(persona.nacimiento)[:10], fuentenormal)
                        hojadestino.write(filalista, 7, emailpersonal, fuentenormal)
                        hojadestino.write(filalista, 8, emailunemi, fuentenormal)
                        hojadestino.write(filalista, 9, celular, fuentenormal)
                        hojadestino.write(filalista, 10, convencional, fuentenormal)
                        hojadestino.write(filalista, 11, persona.provincia.nombre if persona.provincia else '',
                                          fuentenormal)
                        hojadestino.write(filalista, 12, persona.canton.nombre if persona.canton else '', fuentenormal)
                        hojadestino.write(filalista, 13, direccion1 + " - " + direccion2, fuentenormal)

                        cumple_todos = True

                        # ECUATORIANO O EXTRANJERO RESIDENTE ECUADOR
                        cumple = True
                        if persona.paisnacimiento_id == 1:
                            cumple = True
                        else:
                            if persona.paisnacimiento_id is not None:
                                if persona.pais_id == 1:
                                    cumple = True
                                else:
                                    cumple = False
                                    cumple_todos = False
                            else:
                                cumple = False
                                cumple_todos = False

                        hojadestino.write(filalista, 14, "SI" if cumple else "NO", fuentenormal)

                        # MATRICULADO EN EL PERIODO ACTUAL
                        cumple = True
                        if not inscripcion.matriculado_periodo(periodoactual):
                            cumple = False
                            cumple_todos = False

                        hojadestino.write(filalista, 15, "SI" if cumple else "NO", fuentenormal)

                        # ESTUDIANTE REGULAR
                        cumple = True
                        if matriculaactual.tipomatriculalumno() != 'REGULAR':
                            cumple = False
                            cumple_todos = False

                        hojadestino.write(filalista, 16, "SI" if cumple else "NO", fuentenormal)

                        # NO SER SANCIONADO
                        cumple = True
                        if inscripcion.tiene_sancion():
                            cumple = False
                            cumple_todos = False

                        hojadestino.write(filalista, 17, "NO" if cumple else "SI", fuentenormal)

                        # NO HABER REPROBADO MATERIAS NIVEL ANTERIOR
                        cumple = True

                        if not matriculaanterior.materias_aprobadas_todas():
                            cumple = False
                            cumple_todos = False

                        hojadestino.write(filalista, 18, "SI" if cumple else "NO", fuentenormal)

                        # NO TENER BECAS EXTERNAS
                        cumple = True
                        if persona.tiene_becas_externas_activas():
                            cumple = False
                            cumple_todos = False

                        hojadestino.write(filalista, 19, "NO" if cumple else "SI", fuentenormal)

                        # PROMEDIO PERIODO ANTERIOR >= 70
                        promedioanterior = matriculaanterior.promedio_nota_dbu()
                        if matriculaanterior.promedio_nota_dbu() < Decimal("70.00"):
                            cumple_todos = False


                        # ASISTENCIA PERIDO ANTERIOR >= 70 %
                        asistenciaanterior = matriculaanterior.promedio_asistencias_dbu()
                        if matriculaanterior.promedio_asistencias_dbu() < Decimal("70.00"):
                            cumple_todos = False

                        hojadestino.write(filalista, 20, promedioanterior, fuentenumerodecimal)
                        hojadestino.write(filalista, 21, asistenciaanterior, fuentenumerodecimal)
                        hojadestino.write(filalista, 22, codigogrupo, fuentenormal)
                        hojadestino.write(filalista, 23, gruposocioeconomico, fuentenormal)
                        nivelanterior = matriculaanterior.nivelmalla.nombre
                        hojadestino.write(filalista, 24, nivelanterior, fuentenormal)
                        hojadestino.write(filalista, 25, "SI" if cumple_todos else "NO", fuentenormal)

                        filalista += 1

                        if cumple_todos:
                            totalelegibles += 1

                print("Registro procesado # " + str(fila) + " / Elegibles para beca: " +str(totalelegibles))
                fila += 1


        libdestino.save(output_folder + "/ELEGIBLESONLINECD.xls")

        print("Proceso terminado...")
    except Exception as ex:
        libdestino.save(output_folder + "/AUXILIARONLINECD.xls")
        print('error: %s' % ex)


def alumnos_discapacidad():
    try:
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentenumerodecimal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
            num_format_str='#,##0.00')
        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        liborigen = xlrd.open_workbook(output_folder + '/LISTADODISCAPACIDAD.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"FACULTAD", 7000),
            (u"CARRERA", 7000),
            (u"MODALIDAD", 7000),
            (u"NIVEL ACTUAL", 7000),
            (u"IDENTIFICACIÓN", 5000),
            (u"NOMBRES COMPLETOS", 10000),
            (u"FECHA NACIMIENTO", 3000),
            (u"E-MAIL PERSONAL", 7000),
            (u"E-MAIL UNEMI", 7000),
            (u"CELULAR", 7000),
            (u"CONVECIONAL", 7000),
            (u"PROVINCIA", 5000),
            (u"CANTÓN", 5000),
            (u"DIRECCIÓN", 20000),

            (u"ECUATORIANO/EXTRANJERO RESIDENTE", 3000),
            (u"MATRICULADO PERIODO ACTUAL", 3000),
            (u"ESTUDIANTE REGULAR", 3000),
            (u"RECIBIÓ SANCIONES", 3000),
            (u"TODAS MATERIAS APROBADAS NIVEL ANTERIOR", 3000),
            (u"RECIBE BECAS EXTERNAS", 3000),
            (u"PROMEDIO ANTERIOR", 3000),
            (u"ASISTENCIA ANTERIOR", 3000),

            (u"DISCAPACIDAD", 5000),
            (u"%", 5000),

            (u"SEMESTRE ANTERIOR", 4000),
            (u"ELEGIBLE PARA BECA", 4000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        periodoactual = Periodo.objects.get(pk=110)

        filalista = 1
        totalelegibles = 0
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)

                # if fila > 20:
                #     break

                idinscripcion = str(int(cols[0])).strip()
                idpersona = str(int(cols[2])).strip()
                idmatricula = str(int(cols[1])).strip()


                if Matricula.objects.filter(pk=idmatricula).exists():
                    procesar = True
                    matriculaactual = Matricula.objects.get(pk=idmatricula)

                    persona = Persona.objects.get(pk=idpersona)
                    inscripcion = Inscripcion.objects.get(id=idinscripcion)
                    inscripcion_old = None

                    totalmatriculas = Matricula.objects.values('nivel__periodo_id').filter(inscripcion=inscripcion,
                                                                                           status=True,
                                                                                           estado_matricula__in=[2,3],
                                                                                           nivel__periodo__activo=True).count()
                    if Matricula.objects.values('nivel__periodo_id').filter(inscripcion=inscripcion, status=True,
                                                                            estado_matricula__in=[2,3],
                                                                            nivel__periodo__activo=True).count() > 1:
                        # x = Matricula.objects.values('nivel__periodo_id').filter(inscripcion=inscripcion, status=True, estado_matricula__in=[2,3], nivel__periodo__activo=True)
                        # print(x.query)
                        periodomatriculaanterior = \
                        Matricula.objects.values('nivel__periodo_id').filter(inscripcion=inscripcion, status=True,
                                                                             estado_matricula__in=[2,3],
                                                                             nivel__periodo__activo=True).order_by(
                            '-nivel__periodo__fin')[1]
                        matriculaanterior = Matricula.objects.get(inscripcion=inscripcion,
                                                                  nivel__periodo_id=periodomatriculaanterior[
                                                                      'nivel__periodo_id'], status=True)

                        if matriculaanterior.mis_materias_sin_retiro().count() == 0:
                            if totalmatriculas >= 3:
                                periodomatriculaanterior = \
                                    Matricula.objects.values('nivel__periodo_id').filter(inscripcion=inscripcion,
                                                                                         status=True,
                                                                                         estado_matricula__in=[2,3],
                                                                                         nivel__periodo__activo=True).order_by(
                                        '-nivel__periodo__fin')[2]
                                matriculaanterior = Matricula.objects.get(inscripcion=inscripcion,
                                                                          nivel__periodo_id=periodomatriculaanterior[
                                                                              'nivel__periodo_id'], status=True)

                    else:
                        if Matricula.objects.values('id', 'inscripcion_id').filter(inscripcion__persona=persona,
                                                                                   status=True, estado_matricula__in=[2,3],
                                                                                   nivel__periodo__activo=True).count() > 1:
                            matriculas = \
                            Matricula.objects.values('id', 'inscripcion_id').filter(inscripcion__persona=persona,
                                                                                    status=True, estado_matricula__in=[2,3],
                                                                                    nivel__periodo__activo=True).order_by(
                                '-nivel__periodo__fin')[1]
                            inscripcion_old = Inscripcion.objects.get(pk=matriculas['inscripcion_id'])
                            matriculaanterior = Matricula.objects.get(pk=matriculas['id'])
                        else:
                            procesar = False

                    if procesar:
                        facultad = cols[4].strip()
                        carrera = cols[5].strip()
                        modalidad = cols[6].strip()
                        cedula = cols[7]
                        nivelactual = cols[8].strip()
                        apellido1 = cols[9].strip()
                        apellido2 = cols[10].strip()
                        nombres = cols[11].strip()
                        direccion1 = cols[12].strip()
                        direccion2 = cols[13].strip()
                        emailpersonal = cols[14].strip()
                        emailunemi = cols[15].strip()
                        celular = cols[16].strip()
                        convencional = cols[17].strip()

                        tipodiscapacidad = cols[19].strip()
                        porcentaje = cols[20].strip()

                        print("Último registro por ejecutar: " +cedula)


                        hojadestino.write(filalista, 0, facultad, fuentenormal)
                        hojadestino.write(filalista, 1, carrera, fuentenormal)
                        hojadestino.write(filalista, 2, modalidad, fuentenormal)
                        hojadestino.write(filalista, 3, nivelactual, fuentenormal)
                        hojadestino.write(filalista, 4, cedula, fuentenormal)
                        hojadestino.write(filalista, 5, apellido1 + " " + apellido2 + " " + nombres, fuentenormal)
                        hojadestino.write(filalista, 6, str(persona.nacimiento)[:10], fuentenormal)
                        hojadestino.write(filalista, 7, emailpersonal, fuentenormal)
                        hojadestino.write(filalista, 8, emailunemi, fuentenormal)
                        hojadestino.write(filalista, 9, celular, fuentenormal)
                        hojadestino.write(filalista, 10, convencional, fuentenormal)
                        hojadestino.write(filalista, 11, persona.provincia.nombre if persona.provincia else '',
                                          fuentenormal)
                        hojadestino.write(filalista, 12, persona.canton.nombre if persona.canton else '', fuentenormal)
                        hojadestino.write(filalista, 13, direccion1 + " - " + direccion2, fuentenormal)

                        cumple_todos = True


                        # ECUATORIANO O EXTRANJERO RESIDENTE ECUADOR
                        cumple = True
                        if persona.paisnacimiento_id == 1:
                            cumple = True
                        else:
                            if persona.paisnacimiento_id is not None:
                                if persona.pais_id == 1:
                                    cumple = True
                                else:
                                    cumple = False
                                    cumple_todos = False
                            else:
                                cumple = False
                                cumple_todos = False

                        hojadestino.write(filalista, 14, "SI" if cumple else "NO", fuentenormal)

                        # MATRICULADO EN EL PERIODO ACTUAL
                        cumple = True
                        if not inscripcion.matriculado_periodo(periodoactual):
                            cumple = False
                            cumple_todos = False

                        hojadestino.write(filalista, 15, "SI" if cumple else "NO", fuentenormal)

                        # ESTUDIANTE REGULAR
                        cumple = True
                        if matriculaactual.tipomatriculalumno() != 'REGULAR':
                            cumple = False
                            cumple_todos = False

                        hojadestino.write(filalista, 16, "SI" if cumple else "NO", fuentenormal)

                        # NO SER SANCIONADO
                        cumple = True
                        if inscripcion.tiene_sancion():
                            cumple = False
                            cumple_todos = False

                        hojadestino.write(filalista, 17, "NO" if cumple else "SI", fuentenormal)

                        # NO HABER REPROBADO MATERIAS NIVEL ANTERIOR
                        cumple = True

                        if not matriculaanterior.materias_aprobadas_todas():
                            cumple = False
                            cumple_todos = False

                        # if inscripcion_old is None:
                        #     # codigomateria = [ma.materia.asignatura_id for ma in matriculaanterior.mis_materias_sin_retiro()]
                        #     # if inscripcion.recordacademico_set.values('id').filter(aprobada=False, valida=True,
                        #     #                                                        asignatura_id__in=codigomateria).exists():
                        #     #     cumple = False
                        #     #     cumple_todos = False
                        #     #
                        #     if matriculaanterior.total_materias_reprobadas_periodo() > 0:
                        #         cumple = False
                        #         cumple_todos = False
                        #
                        # else:
                        #     # codigomateria = [ma.materia.asignatura_id for ma in matriculaanterior.mis_materias_sin_retiro()]
                        #     # if inscripcion_old.recordacademico_set.values('id').filter(aprobada=False, valida=True,
                        #     #                                                        asignatura_id__in=codigomateria).exists():
                        #     #     cumple = False
                        #     #     cumple_todos = False
                        #     #
                        #     if matriculaanterior.total_materias_reprobadas_periodo() > 0:
                        #         cumple = False
                        #         cumple_todos = False


                        hojadestino.write(filalista, 18, "SI" if cumple else "NO", fuentenormal)

                        # NO TENER BECAS EXTERNAS
                        cumple = True
                        if persona.tiene_becas_externas_activas():
                            cumple = False
                            cumple_todos = False

                        hojadestino.write(filalista, 19, "NO" if cumple else "SI", fuentenormal)

                        # PROMEDIO PERIODO ANTERIOR >= 70
                        promedioanterior = matriculaanterior.promedio_nota()
                        if matriculaanterior.promedio_nota() < Decimal("70.00"):
                            cumple_todos = False


                        # ASISTENCIA PERIDO ANTERIOR >= 70 %
                        asistenciaanterior = matriculaanterior.promedio_asistencias()
                        if matriculaanterior.promedio_asistencias() < Decimal("70.00"):
                            cumple_todos = False

                        hojadestino.write(filalista, 20, promedioanterior, fuentenumerodecimal)
                        hojadestino.write(filalista, 21, asistenciaanterior, fuentenumerodecimal)
                        hojadestino.write(filalista, 22, tipodiscapacidad, fuentenormal)
                        hojadestino.write(filalista, 23, porcentaje, fuentenormal)
                        nivelanterior = matriculaanterior.nivelmalla.nombre
                        hojadestino.write(filalista, 24, nivelanterior, fuentenormal)
                        hojadestino.write(filalista, 25, "SI" if cumple_todos else "NO", fuentenormal)

                        filalista += 1

                        if cumple_todos:
                            totalelegibles += 1

                print("Registro procesado # " + str(fila) + " / Elegibles para beca: " +str(totalelegibles))
                fila += 1


        libdestino.save(output_folder + "/MAYOSEPTIEMBRE2020DISCAPACIDADFINAL.xls")

        print("Proceso terminado...")
    except Exception as ex:
        libdestino.save(output_folder + "/ESTUDIANTESCYDGRUPO1000.xls")
        print('error: %s' % ex)


def migrar_necesidades_tecnologica():
    solicitudes = BecaSolicitud.objects.filter(periodo=110,
                                               inscripcion__persona__confirmacapacidadtecnologica__status=True,
                                               inscripcion__persona__confirmacapacidadtecnologica__aplicabeca=True).order_by('id')
    c = 1
    ttd = 0
    td = 0
    for sol in solicitudes:
        print("Solicitud # ",c)

        confirma = ConfirmaCapacidadTecnologica.objects.get(persona=sol.inscripcion.persona, status=True, aplicabeca=True)
        if confirma.necesitaequipo and confirma.necesitainternet:
            ttd += 1
            necesidad = BecaSolicitudNecesidad(solicitud=sol, necesidad=1)
        elif confirma.necesitaequipo and not confirma.necesitainternet:
            ttd +=1
            necesidad = BecaSolicitudNecesidad(solicitud=sol, necesidad=1)
        else:
            td += 1
            necesidad = BecaSolicitudNecesidad(solicitud=sol, necesidad=2)

        necesidad.save()
        c += 1

    print("Fin de proceso")
    print("TABLET + PLAN DE DATOS:" , ttd)
    print("PLAN DE DATOS: ", td)


def actualizar_necesidad_beca():
    solicitudes = BecaSolicitud.objects.filter(periodo=110).exclude(estado=5).order_by('id')
    c = 1
    ttd = 0
    td = 0
    for sol in solicitudes:
        print("Solicitud # ", c)

        nec = BecaSolicitudNecesidad.objects.get(solicitud=sol)

        if sol.inscripcion.modalidad_id == 3:
            nec.necesidad = 2
            td += 1
        else:
            nec.necesidad = 1
            ttd += 1

        nec.save()
        c += 1

    print("Fin de proceso")
    print("TABLET + PLAN DE DATOS:" , ttd)
    print("PLAN DE DATOS: ", td)


def revisionsolicitudes():
    try:
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentenumerodecimal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
            num_format_str='#,##0.00')
        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        liborigen = xlrd.open_workbook(output_folder + '/VERIFICAR2020.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"IDSOLICITUD", 7000),
            (u"IDINSCRIPCION", 7000),
            (u"IDPERSONA", 7000),
            (u"CEDULA", 7000),
            (u"NOMBRES COMPLETOS", 10000),
            (u"ID PERIODO GRABADO", 3000),
            (u"ID PERIODO CORRECTO", 7000),
            (u"TODAS APROBADAS", 7000),
            (u"PROMEDIO", 7000),
            (u"ASISTENCIA", 5000),
            (u"NIVEL ANTERIOR", 5000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        periodoactual = Periodo.objects.get(pk=110)

        filalista = 1
        totalelegibles = 0
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)

                # if fila > 20:
                #     break

                idsolicitud = str(int(cols[0])).strip()
                idinscripcion = str(int(cols[1])).strip()
                idpersona = str(int(cols[2])).strip()
                cedula = cols[3].strip()
                nombres = cols[4].strip()+ " " + cols[5].strip() + " " + cols[6].strip()
                idperiodograbado = cols[7].strip()

                persona = Persona.objects.get(pk=idpersona)

                totalmatriculas = Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona,status=True,estado_matricula__in=[2,3],nivel__periodo__activo=True).count()
                if Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona, status=True,estado_matricula__in=[2,3],nivel__periodo__activo=True).count() > 1:
                    periodomatriculaanterior = Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona, status=True,estado_matricula__in=[2,3],nivel__periodo__activo=True).order_by('-nivel__periodo__fin')[1]
                    matriculaanterior = Matricula.objects.get(inscripcion__persona=persona,nivel__periodo_id=periodomatriculaanterior['nivel__periodo_id'], status=True)

                    if matriculaanterior.mis_materias_sin_retiro().count() == 0:
                        if totalmatriculas >= 3:
                            periodomatriculaanterior = Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona,status=True,estado_matricula__in=[2,3],nivel__periodo__activo=True).order_by('-nivel__periodo__fin')[2]
                            matriculaanterior = Matricula.objects.get(inscripcion__persona=persona,nivel__periodo_id=periodomatriculaanterior['nivel__periodo_id'], status=True)

                # NO HABER REPROBADO MATERIAS NIVEL ANTERIOR
                cumple = True

                if not matriculaanterior.materias_aprobadas_todas():
                    aprobadas = "NO"
                else:
                    aprobadas = "SI"

                # PROMEDIO PERIODO ANTERIOR >= 70
                promedioanterior = matriculaanterior.promedio_nota_dbu()

                # ASISTENCIA PERIDO ANTERIOR >= 70 %
                asistenciaanterior = matriculaanterior.promedio_asistencias_dbu()

                hojadestino.write(filalista, 0, idsolicitud, fuentenormal)
                hojadestino.write(filalista, 1, idinscripcion, fuentenormal)
                hojadestino.write(filalista, 2, idpersona, fuentenormal)
                hojadestino.write(filalista, 3, cedula, fuentenormal)
                hojadestino.write(filalista, 4, nombres, fuentenormal)
                hojadestino.write(filalista, 5, idperiodograbado, fuentenormal)

                hojadestino.write(filalista, 6, periodomatriculaanterior['nivel__periodo_id'], fuentenormal)

                hojadestino.write(filalista, 7, aprobadas, fuentenormal)
                hojadestino.write(filalista, 8, promedioanterior, fuentenumerodecimal)
                hojadestino.write(filalista, 9, asistenciaanterior, fuentenumerodecimal)
                hojadestino.write(filalista, 10, matriculaanterior.nivelmalla.nombre, fuentenormal)

                filalista += 1


                print("Registro procesado # " + str(fila))
                fila += 1


        libdestino.save(output_folder + "/RESULTADO2020.xls")

        print("Proceso terminado...")
    except Exception as ex:
        libdestino.save(output_folder + "/ESTUDIANTESCYDGRUPO1000.xls")
        print('error: %s' % ex)

def encuestaalumnos():
    # SELECT rc.inscripcionencuesta_id from sga_respuestacuadriculaencuestagrupoestudiantes AS rc
    # GROUP BY rc.inscripcionencuesta_id
    # HAVING COUNT(*) < 6;

    try:
        inscripciones = RespuestaCuadriculaEncuestaGrupoEstudiantes.objects.values('inscripcionencuesta_id').annotate(cnt=models.Count('id')).filter(cnt__lte=5)
        opciones = OpcionCuadriculaEncuestaGrupoEstudiantes.objects.filter(tipoopcion=1, status=True).order_by('orden')
        c=1
        for ins in inscripciones:
            reg = ins['inscripcionencuesta_id']
            print("ID: ", reg)
            for op in opciones:
                if not RespuestaCuadriculaEncuestaGrupoEstudiantes.objects.filter(inscripcionencuesta_id=reg, opcioncuadricula=op, status=True).exists():
                    print("agregar item" + str(op))
                    resp = RespuestaCuadriculaEncuestaGrupoEstudiantes(inscripcionencuesta_id=reg,
                                                                       pregunta_id=18,
                                                                       opcioncuadricula=op,
                                                                       respuesta='0'
                    )
                    resp.save()

            print("PROCESADO # ", c)
            c += 1
    except Exception as ex:
        print('error: %s' % ex)


def crearsolicitudesbeca2020virtual():
    try:
        print(your_djangoproject_home)
        # fuentecabecera = easyxf(
        #     'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        # fuentenormal = easyxf(
        #     'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        # fuentenumerodecimal = easyxf(
        #     'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
        #     num_format_str='#,##0.00')
        # # output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'arreglos'))
        #
        # # liborigen = xlrd.open_workbook(output_folder + '/I-NOMINA MODALIDAD EN LINEA - AGREGAR - P2.xlsx')
        # liborigen = xlrd.open_workbook('AGREGARONLINEP3.xlsx')
        # libdestino = xlwt.Workbook()
        # hojadestino = libdestino.add_sheet("Listado")
        #
        # fil = 0
        #
        # columnas = [
        #     (u"CEDULA", 7000),
        #     (u"NOMBRES COMPLETOS", 10000),
        #     (u"OBSERVACIONES", 10000)
        # ]
        #
        # for col_num in range(len(columnas)):
        #     hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
        #     hojadestino.col(col_num).width = columnas[col_num][1]
        #
        # sheet = liborigen.sheet_by_index(0)
        # creadas = 0
        # periodo = Periodo.objects.get(pk=110)
        # personaapruebarechaza = Persona.objects.get(pk=1)
        #
        # requisitos = BecaRequisitos.objects.filter(Q(becatipo__isnull=True) | Q(becatipo_id=18), periodo_id=90, status=True, vigente=True).exclude(numero=7).order_by('numero')
        #
        # filalista = 1
        # enviarcorreo = True
        # for fila in range(sheet.nrows):
        #     if fila >= 1:
        #         cols = sheet.row_values(fila)
        #         cedula = cols[5].strip()
        #         nombres = cols[6].strip()
        #         carr = cols[2].strip()
        #
        #         persona = Persona.objects.get(cedula=cedula)
        #         carrera = Carrera.objects.get(nombre=carr)
        #         inscripcion = Inscripcion.objects.get(persona=persona, carrera=carrera)
        #
        #         print("Procesando Cédula: ", cedula)
        #
        #         if not inscripcion.matriculado_periodo(periodo):
        #             hojadestino.write(filalista, 0, cedula, fuentenormal)
        #             hojadestino.write(filalista, 1, nombres, fuentenormal)
        #             hojadestino.write(filalista, 2, "NO ESTÁ MATRICULADO EN EL PERIODO ACTUAL", fuentenormal)
        #             filalista += 1
        #         else:
        #             matriculaactual = Matricula.objects.get(inscripcion=inscripcion, nivel__periodo=periodo, status=True)
        #
        #             if matriculaactual.tipomatriculalumno() != 'REGULAR':
        #                 hojadestino.write(filalista, 0, cedula, fuentenormal)
        #                 hojadestino.write(filalista, 1, nombres, fuentenormal)
        #                 hojadestino.write(filalista, 2, "NO ESTÁ MATRICULADO EN EL PERIODO ACTUAL", fuentenormal)
        #                 filalista += 1
        #             else:
        #                 totalmatriculas = Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona, status=True, estado_matricula__in=[2,3], nivel__periodo__activo=True).count()
        #                 if Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona, status=True, estado_matricula__in=[2,3], nivel__periodo__activo=True).count() > 1:
        #                     periodomatriculaanterior = Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona, status=True, estado_matricula__in=[2,3], nivel__periodo__activo=True).order_by('-nivel__periodo__fin')[1]
        #                     matriculaanterior = Matricula.objects.get(inscripcion__persona=persona, nivel__periodo_id=periodomatriculaanterior['nivel__periodo_id'], status=True)
        #
        #                     if matriculaanterior.mis_materias_sin_retiro().count() == 0:
        #                         if totalmatriculas >= 3:
        #                             periodomatriculaanterior = Matricula.objects.values('nivel__periodo_id').filter(inscripcion__persona=persona, status=True, estado_matricula__in=[2,3], nivel__periodo__activo=True).order_by('-nivel__periodo__fin')[2]
        #                             matriculaanterior = Matricula.objects.get(inscripcion__persona=persona, nivel__periodo_id=periodomatriculaanterior['nivel__periodo_id'], status=True)
        #                         else:
        #                             procesar = False
        #                 else:
        #                     procesar = False
        #
        #                 periodovalida = periodomatriculaanterior['nivel__periodo_id']
        #                 tipobeca = 18 # SITUACION ECONOMICA
        #                 necesidad = 2 # PLAN DE DATOS
        #
        #                 beca = BecaSolicitud(inscripcion=inscripcion,
        #                                      becatipo_id=tipobeca,
        #                                      periodo=periodo,
        #                                      periodocalifica_id=periodovalida,
        #                                      estado=1,
        #                                      observacion='SEMESTRE MAYO - SETIEMBRE 2020 V2  - MODALIDAD VIRTUAL'
        #                                      )
        #                 beca.save()
        #
        #                 for r in requisitos:
        #                     if r.numero == 1 or r.numero == 2:
        #                         if r.numero == 1:
        #                             if persona.paisnacimiento_id == 1:
        #                                 detalle = BecaDetalleSolicitud(solicitud=beca,
        #                                                                requisito_id=r.id,
        #                                                                cumple=True,
        #                                                                archivo=None,
        #                                                                estado=2,
        #                                                                observacion='APROBACIÓN AUTOMÁTICA',
        #                                                                personaaprueba=None,
        #                                                                fechaaprueba=None)
        #                                 detalle.save()
        #                         else:
        #                             if persona.paisnacimiento_id != 1:
        #                                 detalle = BecaDetalleSolicitud(solicitud=beca,
        #                                                                requisito_id=r.id,
        #                                                                cumple=True,
        #                                                                archivo=None,
        #                                                                estado=2,
        #                                                                observacion='APROBACIÓN AUTOMÁTICA',
        #                                                                personaaprueba=None,
        #                                                                fechaaprueba=None)
        #                                 detalle.save()
        #                     else:
        #                         detalle = BecaDetalleSolicitud(solicitud=beca,
        #                                                        requisito_id=r.id,
        #                                                        cumple=True,
        #                                                        archivo=None,
        #                                                        estado=1 if r.id in [15, 16] else 2,
        #                                                        observacion='' if r.id in [15, 16] else 'APROBACIÓN AUTOMÁTICA',
        #                                                        personaaprueba=None,
        #                                                        fechaaprueba=None)
        #                         detalle.save()
        #
        #                 necesidadsolicitud = BecaSolicitudNecesidad(solicitud=beca, necesidad=necesidad)
        #                 necesidadsolicitud.save()
        #
        #                 recorrido = BecaSolicitudRecorrido(solicitud=beca,
        #                                                    observacion="SOLICITUD AUTOMÁTICA",
        #                                                    estado=1
        #                                                    )
        #                 recorrido.save()
        #
        #                 tituloemail = "Registro de Solicitud de Beca - Semestre MAYO - SEPTIEMBRE 2020 V2"
        #                 tipobeca = beca.becatipo.nombre.upper()
        #
        #                 if enviarcorreo:
        #                     send_html_mail(tituloemail,
        #                                    "emails/solicitudbecaestudiante.html",
        #                                    {'sistema': u'SGA - UNEMI',
        #                                     'tipo': 'SOL',
        #                                     'tipobeca': tipobeca,
        #                                     'fecha': datetime.now().date(),
        #                                     'hora': datetime.now().time(),
        #                                     'estudiante': persona,
        #                                     'autoridad2': '',
        #                                     't': miinstitucion()
        #                                     },
        #                                    persona.lista_emails_envio(),
        #                                    [],
        #                                    cuenta=variable_valor('CUENTAS_CORREOS')[0]
        #                                    )
        #
        #                 # REGISTRO EN ESTADO DE REVISION
        #                 beca.estado = 4
        #                 beca.save()
        #
        #                 recorrido = BecaSolicitudRecorrido(solicitud=beca,
        #                                                    observacion="EN REVISION",
        #                                                    estado=4
        #                                                    )
        #                 recorrido.save()
        #
        #                 # Envio de e-mail de notificación al solicitante
        #                 tituloemail = "Solicitud de Beca en Revisión"
        #                 tipobeca = beca.becatipo.nombre.upper()
        #
        #                 if enviarcorreo:
        #                     send_html_mail(tituloemail,
        #                                    "emails/notificarestadosolicitudbeca.html",
        #                                    {'sistema': u'SGA - UNEMI',
        #                                     'fase': 'REV',
        #                                     'tipobeca': tipobeca,
        #                                     'fecha': datetime.now().date(),
        #                                     'hora': datetime.now().time(),
        #                                     'saludo': 'Estimada' if beca.inscripcion.persona.sexo_id == 1 else 'Estimado',
        #                                     'estudiante': beca.inscripcion.persona.nombre_completo_inverso(),
        #                                     'autoridad2': '',
        #                                     't': miinstitucion()
        #                                     },
        #                                    beca.inscripcion.persona.lista_emails_envio(),
        #                                    [],
        #                                    cuenta=variable_valor('CUENTAS_CORREOS')[0]
        #                                    )
        #
        #                 # APROBAR DETALLES
        #                 detalles = BecaDetalleSolicitud.objects.filter(solicitud=beca, requisito_id__in=[15, 16])
        #                 for detalle in detalles:
        #                     detalle.cumple = True
        #                     detalle.estado = 2
        #                     detalle.observacion = "APROBACIÓN AUTOMÁTICA"
        #                     detalle.fechaaprueba = datetime.now()
        #                     detalle.personaaprueba = personaapruebarechaza
        #                     detalle.save()
        #
        #                 # APROBAR SOLICITUD
        #                 estado = 2
        #                 beca.estado = estado
        #                 beca.becaaceptada = 1
        #                 beca.save()
        #
        #                 recorrido = BecaSolicitudRecorrido(solicitud=beca,
        #                                                    estado=estado,
        #                                                    observacion="APROBACIÓN AUTOMÁTICA")
        #                 recorrido.save()
        #
        #                 tipobeca = beca.becatipo.nombre.upper()
        #                 if enviarcorreo:
        #                     send_html_mail(tituloemail,
        #                                    "emails/notificarestadosolicitudbeca.html",
        #                                    {'sistema': u'SGA - UNEMI',
        #                                     'fase': 'AR',
        #                                     'tipobeca': tipobeca,
        #                                     'fecha': datetime.now().date(),
        #                                     'hora': datetime.now().time(),
        #                                     'saludo': 'Estimada' if beca.inscripcion.persona.sexo_id == 1 else 'Estimado',
        #                                     'estado': 'APROBADA' if estado == 2 else "RECHAZADA",
        #                                     'estudiante': beca.inscripcion.persona.nombre_completo_inverso(),
        #                                     'autoridad2': '',
        #                                     'observaciones': '',
        #                                     't': miinstitucion()
        #                                     },
        #                                    beca.inscripcion.persona.lista_emails_envio(),
        #                                    [],
        #                                    cuenta=variable_valor('CUENTAS_CORREOS')[0]
        #                                    )
        #
        #                 creadas += 1
        #
        #         print("Registro procesado # " + str(fila))
        #         fila += 1
        #
        #
        # print("Solicitudes creadas/aprobadas: ", creadas)
        #
        # # libdestino.save(output_folder + "/NOPROCESADOS1.xls")
        print("Proceso terminado...")
    except Exception as ex:
        print('error: %s' % ex)


def aprobarsolicitudesbeca2020virtual():
    try:
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentenumerodecimal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
            num_format_str='#,##0.00')
        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        # liborigen = xlrd.open_workbook(output_folder + '/V-LISTADO (APROBADO).xlsx')
        liborigen = xlrd.open_workbook('APROBADOSP2.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"SOLICITUD", 4000),
            (u"CEDULA", 7000),
            (u"NOMBRES COMPLETOS", 10000),
            (u"OBSERVACIONES", 10000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        aprobadas = 0
        desistidas = 0
        filalista = 1
        personaapruebarechaza = Persona.objects.get(pk=1)
        enviarcorreo = True
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)
                if cols[1].strip() == '':
                    break

                nsolicitud = int(cols[1].strip())
                cabecera = BecaSolicitud.objects.get(pk=nsolicitud)
                persona = Persona.objects.get(pk=cabecera.inscripcion.persona.id)

                print("Procesando Cédula: ", persona.cedula)

                if cabecera.estado != 8:# SI NO HA SIDO DESISTIDA
                    # REGISTRO EN ESTADO DE REVISION
                    cabecera.estado = 4
                    cabecera.save()

                    recorrido = BecaSolicitudRecorrido(solicitud=cabecera,
                                                       observacion="EN REVISION",
                                                       estado=4
                                                       )
                    recorrido.save()

                    # Envio de e-mail de notificación al solicitante
                    tituloemail = "Solicitud de Beca en Revisión"
                    tipobeca = cabecera.becatipo.nombre.upper()

                    if enviarcorreo:
                        send_html_mail(tituloemail,
                                       "emails/notificarestadosolicitudbeca.html",
                                       {'sistema': u'SGA - UNEMI',
                                        'fase': 'REV',
                                        'tipobeca': tipobeca,
                                        'fecha': datetime.now().date(),
                                        'hora': datetime.now().time(),
                                        'saludo': 'Estimada' if cabecera.inscripcion.persona.sexo_id == 1 else 'Estimado',
                                        'estudiante': cabecera.inscripcion.persona.nombre_completo_inverso(),
                                        'autoridad2': '',
                                        't': miinstitucion()
                                        },
                                       cabecera.inscripcion.persona.lista_emails_envio(),
                                       [],
                                       coneccion=variable_valor('CUENTAS_CORREOS')[0]
                                       )

                    # APROBAR DETALLES
                    detalles = BecaDetalleSolicitud.objects.filter(solicitud=cabecera, requisito_id__in=[15, 16])
                    for detalle in detalles:
                        detalle.cumple = True
                        detalle.estado = 2
                        detalle.observacion = "APROBACIÓN AUTOMÁTICA"
                        detalle.fechaaprueba = datetime.now()
                        detalle.personaaprueba = personaapruebarechaza
                        detalle.save()

                    # APROBAR SOLICITUD
                    estado = 2
                    cabecera.estado = estado
                    cabecera.becaaceptada = 1
                    cabecera.save()

                    recorrido = BecaSolicitudRecorrido(solicitud=cabecera,
                                                       estado=estado,
                                                       observacion="APROBACIÓN AUTOMÁTICA")
                    recorrido.save()

                    tipobeca = cabecera.becatipo.nombre.upper()
                    if enviarcorreo:
                        send_html_mail(tituloemail,
                                       "emails/notificarestadosolicitudbeca.html",
                                       {'sistema': u'SGA - UNEMI',
                                        'fase': 'AR',
                                        'tipobeca': tipobeca,
                                        'fecha': datetime.now().date(),
                                        'hora': datetime.now().time(),
                                        'saludo': 'Estimada' if cabecera.inscripcion.persona.sexo_id == 1 else 'Estimado',
                                        'estado': 'APROBADA' if estado == 2 else "RECHAZADA",
                                        'estudiante': cabecera.inscripcion.persona.nombre_completo_inverso(),
                                        'autoridad2': '',
                                        'observaciones': '',
                                        't': miinstitucion()
                                        },
                                       cabecera.inscripcion.persona.lista_emails_envio(),
                                       [],
                                       cuenta=variable_valor('CUENTAS_CORREOS')[0]
                                       )
                    aprobadas += 1
                else:
                    hojadestino.write(filalista, 0, nsolicitud, fuentenormal)
                    hojadestino.write(filalista, 1, persona.cedula, fuentenormal)
                    hojadestino.write(filalista, 2, persona.nombre_completo_inverso(), fuentenormal)
                    hojadestino.write(filalista, 3, "SOLICITUD DESISTIDA PREVIAMENTE", fuentenormal)
                    desistidas += 1
                    filalista += 1

                print("Registro procesado # " + str(fila))
                fila += 1


        print("Solicitudes aprobadas: ", aprobadas)
        print("Solicitudes desistidas: ", desistidas)

        libdestino.save("NOPROCESADASAPROBAR2.xls")
        print("Proceso terminado...")
    except Exception as ex:
        print('error: %s' % ex)

def rechazarsolicitudesbeca2020virtual():
    try:
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentenumerodecimal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
            num_format_str='#,##0.00')
        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        # liborigen = xlrd.open_workbook(output_folder + '/IV-LISTADO (RECHAZADO X VEEDURIA ESTUDIANTIL.xlsx')
        liborigen = xlrd.open_workbook('RECHAZADOSP5.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"SOLICITUD", 4000),
            (u"CEDULA", 7000),
            (u"NOMBRES COMPLETOS", 10000),
            (u"OBSERVACIONES", 10000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        rechazadas = 0
        desistidas = 0
        filalista = 1
        personaapruebarechaza = Persona.objects.get(pk=1)
        enviarcorreo = True
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)
                nsolicitud = int(cols[1].strip())
                observacion = cols[6].strip().upper()
                cabecera = BecaSolicitud.objects.get(pk=nsolicitud)
                persona = Persona.objects.get(pk=cabecera.inscripcion.persona.id)

                print("Procesando Cédula: ", persona.cedula)

                if cabecera.estado != 8:# SI NO HA SIDO DESISTIDA
                    # REGISTRO EN ESTADO DE REVISION
                    cabecera.estado = 4
                    cabecera.save()

                    recorrido = BecaSolicitudRecorrido(solicitud=cabecera,
                                                       observacion="EN REVISION",
                                                       estado=4
                                                       )
                    recorrido.save()

                    # Envio de e-mail de notificación al solicitante
                    tituloemail = "Solicitud de Beca en Revisión"
                    tipobeca = cabecera.becatipo.nombre.upper()

                    if enviarcorreo:
                        send_html_mail(tituloemail,
                                       "emails/notificarestadosolicitudbeca.html",
                                       {'sistema': u'SGA - UNEMI',
                                        'fase': 'REV',
                                        'tipobeca': tipobeca,
                                        'fecha': datetime.now().date(),
                                        'hora': datetime.now().time(),
                                        'saludo': 'Estimada' if cabecera.inscripcion.persona.sexo_id == 1 else 'Estimado',
                                        'estudiante': cabecera.inscripcion.persona.nombre_completo_inverso(),
                                        'autoridad2': '',
                                        't': miinstitucion()
                                        },
                                       cabecera.inscripcion.persona.lista_emails_envio(),
                                       [],
                                       cuenta=variable_valor('CUENTAS_CORREOS')[0]
                                       )

                    # APROBAR DETALLES
                    # detalles = BecaDetalleSolicitud.objects.filter(solicitud=cabecera, requisito_id__in=[15, 16])
                    # for detalle in detalles:
                    #     detalle.cumple = True
                    #     detalle.estado = 2
                    #     detalle.observacion = "APROBACIÓN AUTOMÁTICA"
                    #     detalle.fechaaprueba = datetime.now()
                    #     detalle.personaaprueba = personaapruebarechaza
                    #     detalle.save()

                    # RECHAZAR SOLICITUD
                    estado = 3
                    cabecera.estado = estado
                    cabecera.becaaceptada = 1
                    cabecera.save()

                    recorrido = BecaSolicitudRecorrido(solicitud=cabecera,
                                                       estado=estado,
                                                       observacion=observacion)
                    recorrido.save()

                    tipobeca = cabecera.becatipo.nombre.upper()
                    if enviarcorreo:
                        send_html_mail(tituloemail,
                                       "emails/notificarestadosolicitudbeca.html",
                                       {'sistema': u'SGA - UNEMI',
                                        'fase': 'AR',
                                        'tipobeca': tipobeca,
                                        'fecha': datetime.now().date(),
                                        'hora': datetime.now().time(),
                                        'saludo': 'Estimada' if cabecera.inscripcion.persona.sexo_id == 1 else 'Estimado',
                                        'estado': 'APROBADA' if estado == 2 else "RECHAZADA",
                                        'estudiante': cabecera.inscripcion.persona.nombre_completo_inverso(),
                                        'autoridad2': '',
                                        'observaciones': observacion,
                                        't': miinstitucion()
                                        },
                                       cabecera.inscripcion.persona.lista_emails_envio(),
                                       [],
                                       cuenta=variable_valor('CUENTAS_CORREOS')[0]
                                       )
                    rechazadas += 1
                else:
                    hojadestino.write(filalista, 0, nsolicitud, fuentenormal)
                    hojadestino.write(filalista, 1, persona.cedula, fuentenormal)
                    hojadestino.write(filalista, 2, persona.nombre_completo_inverso(), fuentenormal)
                    hojadestino.write(filalista, 3, "SOLICITUD DESISTIDA PREVIAMENTE", fuentenormal)
                    filalista += 1
                    desistidas += 1

                print("Registro procesado # " + str(fila))
                fila += 1


        print("Solicitudes rechazadas: ", rechazadas)
        print("Solicitudes desistidas: ", desistidas)

        libdestino.save("NOPROCESADOSRECHAZO01072020.xls")
        print("Proceso terminado...")
    except Exception as ex:
        print('error: %s' % ex)

def mensajeprueba():
    fuentecabecera = easyxf(
        'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
    libdestino = xlwt.Workbook()
    hojadestino = libdestino.add_sheet("Listado")

    fil = 0

    columnas = [
        (u"SOLICITUD", 4000),
        (u"CEDULA", 7000),
        (u"NOMBRES COMPLETOS", 10000),
        (u"OBSERVACIONES", 10000)
    ]

    for col_num in range(len(columnas)):
        hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
        hojadestino.col(col_num).width = columnas[col_num][1]

    hojadestino.write(5, 0, 12345, fuentecabecera)
    libdestino.save("TESTIMSM.xls")
    print("Este es una mensaje de prueba")

def agregar_recorrido_becas_alumno():

    becas = BecaAsignacion.objects.filter(solicitud__periodo_id=110,
                                          solicitud__inscripcion__persona__personadocumentopersonal__estadocedula=1)

    x = becas.count()
    total = 0
    cont = 0
    for b in becas:
        total += 1
        print("Procesando # ", total)
        print("Persona # ", b.solicitud.inscripcion.persona)
        print("Solicitud: ", b.solicitud.id)
        print("Monto : ", b.montobeneficio)

        becario = b.solicitud.inscripcion.persona
        docs = becario.documentos_personales()
        if docs:
            fecha = docs.fecha_creacion
            usu = docs.usuario_creacion
            print("Fecha de ingreso de documentos: ", fecha)

            recorrido = BecaSolicitudRecorrido(solicitud=b.solicitud,
                                               observacion="DOCUMENTOS PERSONALES CARGADOS",
                                               estado=9,
                                               fecha_creacion=fecha,
                                               usuario_creacion=usu)
            recorrido.save()

            recorrido = BecaSolicitudRecorrido(solicitud=b.solicitud,
                                               observacion="CERTIFICADO BANCARIO CARGADO",
                                               estado=13,
                                               fecha_creacion=fecha,
                                               usuario_creacion=usu)

            recorrido.save()
            cont += 1
        print("-----------------")

    print("Registros procesados: ", total)
    print("Registros actualizados: ", cont)

def agregar_recorrido_becas_bienestar():
    becas = BecaAsignacion.objects.filter(solicitud__periodo_id=110,
                                          solicitud__inscripcion__persona__personadocumentopersonal__estadocedula__in=[2, 3])
    total = 0
    cont = 0
    for b in becas:
        total += 1
        print("Procesando # ", total)


        becario = b.solicitud.inscripcion.persona
        docs = becario.documentos_personales()
        if docs:
            estadocedula = docs.estadocedula

            if estadocedula != 1:
                print("Persona # ", b.solicitud.inscripcion.persona)
                print("Solicitud: ", b.solicitud.id)
                print("Monto : ", b.montobeneficio)

                fecha = docs.fecha_modificacion
                usu = docs.usuario_modificacion
                print("Fecha de modificación: ", fecha)
                print("Usuario de modifiacion: ", usu)
                cont += 1


                recorrido = BecaSolicitudRecorrido(solicitud=b.solicitud,
                                               observacion="DOCUMENTOS PERSONALES EN REVISIÓN",
                                               estado=10,
                                               fecha_creacion=fecha,
                                               usuario_creacion=usu)
                recorrido.save()

                recorrido = BecaSolicitudRecorrido(solicitud=b.solicitud,
                                                   observacion="DOCUMENTOS PERSONALES VALIDADOS",
                                                   estado=11,
                                                   fecha_creacion=fecha,
                                                   usuario_creacion=usu)
                recorrido.save()

        print("-----------------")

    print("Registros procesados: ", total)
    print("Registros actualizados: ", cont)

def rechazar_becas_no_aceptadas():
    solicitudes = BecaSolicitud.objects.filter(status=True, periodo_id=110, estado=2, becaaceptada=1)

    totalrec = 0
    for solicitud in solicitudes:
        print("Procesando registro # ", totalrec +1)
        print(solicitud, " - ", solicitud.inscripcion.persona.cedula)

        solicitud.becaaceptada = 3
        solicitud.save()

        recorrido = BecaSolicitudRecorrido(solicitud=solicitud,
                                           estado=7,
                                           observacion='BECA RECHAZADA AUTOMÁTICAMENTE POR NO ACEPTARLA EN EL PLAZO ESTABLECIDO')
        recorrido.save()

        totalrec += 1
    print("==================================")
    print("Total Becas Rechazadas: ", totalrec)

def actualizar_tipo_beca():
    ### COMENTAR EN funciones.py para que no guarde usuario y fecha actual
    ### OJOOOOOOOOOOOOOOOOOOOOOOOOOO
    ####3♣35
    solicitudes = BecaSolicitud.objects.filter(periodo_id=110).order_by('id')
    cont = 0
    for solicitud in solicitudes:
        print("Procesando Registro: ", cont + 1)
        print(solicitud)
        print("Actualizando tipo de beca...")

        fcrea = solicitud.fecha_creacion
        ucrea = solicitud.usuario_creacion
        fmodi = solicitud.fecha_modificacion
        umodi = solicitud.usuario_modificacion
        paprueba = solicitud.inscripcion.persona
        faprueba = fcrea


        solicitud.becatipo_id = 23
        solicitud.save()

        print("Eliminado requisitos anteriores")
        BecaDetalleSolicitud.objects.filter(solicitud=solicitud).update(status=False)

        print("Insertando nuevos requisitos")
        detalle = BecaDetalleSolicitud(solicitud=solicitud,
                                       requisito_id=45,
                                       cumple=True,
                                       estado=2,
                                       observacion="APROBACIÓN AUTOMÁTICA",
                                       personaaprueba=paprueba,
                                       fechaaprueba=faprueba,
                                       fecha_creacion=fcrea,
                                       usuario_creacion=ucrea)
        detalle.save()

        detalle = BecaDetalleSolicitud(solicitud=solicitud,
                                       requisito_id=46,
                                       cumple=True,
                                       estado=2,
                                       observacion="APROBACIÓN AUTOMÁTICA",
                                       personaaprueba=paprueba,
                                       fechaaprueba=faprueba,
                                       fecha_creacion=fcrea,
                                       usuario_creacion=ucrea)
        detalle.save()

        detalle = BecaDetalleSolicitud(solicitud=solicitud,
                                       requisito_id=47,
                                       cumple=True,
                                       estado=2,
                                       observacion="APROBACIÓN AUTOMÁTICA",
                                       personaaprueba=paprueba,
                                       fechaaprueba=faprueba,
                                       fecha_creacion=fcrea,
                                       usuario_creacion=ucrea)
        detalle.save()

        print("======Registro procesado========")

        cont += 1

    print("========FIN DE PROCESO=========")
    print("Total solicitudes procesadas: ", cont)

def darbajaprocesobeca():
    cedula = '0604663427'
    persona = Persona.objects.get(cedula=cedula)
    periodo = Periodo.objects.get(pk=110)

    solicitud = BecaSolicitud.objects.get(periodo=periodo, inscripcion__persona=persona)
    beca = BecaAsignacion.objects.get(solicitud=solicitud)
    # SE ASIGNA ESTADO DADO DE BAJA A LA BECA
    beca.estadobeca = 3
    beca.status = False
    beca.save()
    # SE ASIGNA ESTADO BECA RECHAZADA A LA SOLICITUD
    solicitud.becaaceptada = 3
    solicitud.save()
    # SE AGREGA DETALLE DE RECORRIDO A LA SOLICITUD
    detalle = BecaSolicitudRecorrido(solicitud=solicitud,
                                     estado=7,
                                     observacion='BAJA SOLICITADA EL 06/07/2020 VIA E-MAIL'
                                     )
    detalle.save()

    print("Registro actualizado")

def revisabecados2019altopromedio():
    try:
        horainicio = datetime.now()
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentenumerodecimal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
            num_format_str='#,##0.00')
        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        # liborigen = xlrd.open_workbook(output_folder + '/IV-LISTADO (RECHAZADO X VEEDURIA ESTUDIANTIL.xlsx')
        liborigen = xlrd.open_workbook('BECA20192020ALTOPROM.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"#", 1500),
            (u"CEDULA", 7000),
            (u"NOMBRES COMPLETOS", 10000),
            (u"CARRERA", 10000),
            (u"ESTADO", 7000),
            (u"TIPO DE BECA", 7000),
            (u"ID MATRICULA", 5000),
            (u"ID INSCRIPCION", 5000),
            (u"NIVEL", 5000),
            (u"ASISTENCIA", 5000),
            (u"ASIS.NOV", 5000),
            (u"ASIS.DIC", 5000),
            (u"ASIS.ENE", 5000),
            (u"ASIS.FEB", 5000),
            (u"ECUATOR/EXTR.RESI", 5000),
            (u"EST.REGULAR", 5000),
            (u"SANCIONADO", 5000),
            (u"REPROBO MATERIAS", 5000),
            (u"RECIBE BECA EXTERNA", 5000),
            (u"PROMEDIO", 5000),
            (u"CUMPLE MIN. PROMEDIO", 5000),
            (u"CUMPLE MIN. ASISTENCIA", 5000),
            (u"OBSERVACIONES", 10000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        # 85 - MAYO A SEPTIEMBRE 2020
        # 90 - NOVIEMBRE 2019 MARZO 2020
        idperiodo = 90
        # idperiodo = 85
        periodo = Periodo.objects.get(pk=idperiodo)

        print("====Revisión de Becas Alto Rendimiento Académico====")

        limite = 814
        matriculados = 0
        nomatriculados = 0
        procesados = 0
        cumplen = nocumplen = 0
        filalista = 1
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)
                secuencia = cols[0]
                cedula = cols[1].strip()
                nombre = cols[2].strip()
                carrera = cols[3].strip()
                estado = cols[4].strip()
                tipobeca = cols[5].strip()

                procesados += 1

                persona = Persona.objects.get(cedula=cedula)

                print("Procesando " , procesados, " de ", limite)
                print("Procesando Cédula: ", persona.cedula)

                hojadestino.write(filalista, 0, secuencia, fuentenormal)
                hojadestino.write(filalista, 1, cedula, fuentenormal)
                hojadestino.write(filalista, 2, nombre, fuentenormal)
                hojadestino.write(filalista, 3, carrera, fuentenormal)
                hojadestino.write(filalista, 4, estado, fuentenormal)
                hojadestino.write(filalista, 5, tipobeca, fuentenormal)
                matricula = Matricula.objects.filter(inscripcion__persona=persona, nivel__periodo=periodo, status=True, estado_matricula__in=[2,3])
                if matricula:
                    matricula = matricula[0]
                    hojadestino.write(filalista, 6, matricula.id, fuentenormal)
                    hojadestino.write(filalista, 7, matricula.inscripcion.id, fuentenormal)

                    if persona.paisnacimiento_id == 1:
                        cumple = True
                        cumplenacionalidad = "SI"
                    else:
                        if persona.paisnacimiento_id is not None:
                            if persona.pais_id == 1:
                                cumple = True
                                cumplenacionalidad = "SI"
                            else:
                                cumple = False
                                cumplenacionalidad = "NO"
                        else:
                            cumple = False
                            cumplenacionalidad = "NO"
                    # ESTUDIANTE REGULAR
                    estregular = "SI"
                    if matricula.tipomatriculalumno() != 'REGULAR':
                        cumple = False
                        estregular = "NO"
                    # SANCION
                    sancionado = "NO"
                    if matricula.inscripcion.tiene_sancion():
                        cumple = False
                        sancionado = "SI"
                    # NO HABER REPROBADO MATERIAS NIVEL ANTERIOR
                    cumple = True
                    reprobo = "NO"
                    if not matricula.materias_aprobadas_todas():
                        reprobo = "SI"
                        cumple = False
                    # NO TENER BECAS EXTERNAS
                    tienebecaexterna = "NO"
                    if persona.tiene_becas_externas_activas():
                        cumple = False
                        tienebecaexterna = "SI"
                    # PROMEDIO PERIODO ANTERIOR >= 70
                    promedioanterior = matricula.promedio_nota_dbu()
                    promediominimo = "SI"
                    if promedioanterior < 85:
                        cumple = False
                        promediominimo = "NO"
                    # ASISTENCIA PERIDO ANTERIOR >= 70 %
                    asistenciaanterior = null_to_decimal(matricula.promedio_asistencias_dbu(), 0)
                    cumpleasistencia = "SI"
                    if asistenciaanterior < 70:
                        cumple = False
                        cumpleasistencia = "NO"

                    # asistencia mes 1
                    print("Consultando asistencia mensual...")
                    desde = datetime.strptime('2019-11-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2019-11-30', '%Y-%m-%d').date()
                    porcmes1 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 2
                    desde = datetime.strptime('2019-12-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2019-12-31', '%Y-%m-%d').date()
                    porcmes2 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 3
                    desde = datetime.strptime('2020-01-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2020-01-31', '%Y-%m-%d').date()
                    porcmes3 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 4
                    desde = datetime.strptime('2020-02-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2020-02-29', '%Y-%m-%d').date()
                    porcmes4 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)

                    if cumple:
                        cumplen += 1
                    else:
                        nocumplen += 1

                    hojadestino.write(filalista, 8, matricula.nivelmalla.nombre, fuentenormal)
                    hojadestino.write(filalista, 9, asistenciaanterior, fuentenumerodecimal)

                    hojadestino.write(filalista, 10, porcmes1, fuentenumerodecimal)
                    hojadestino.write(filalista, 11, porcmes2, fuentenumerodecimal)
                    hojadestino.write(filalista, 12, porcmes3, fuentenumerodecimal)
                    hojadestino.write(filalista, 13, porcmes4, fuentenumerodecimal)

                    hojadestino.write(filalista, 14, cumplenacionalidad, fuentenormal)
                    hojadestino.write(filalista, 15, estregular, fuentenormal)
                    hojadestino.write(filalista, 16, sancionado, fuentenormal)
                    hojadestino.write(filalista, 17, reprobo, fuentenormal)
                    hojadestino.write(filalista, 18, tienebecaexterna, fuentenormal)
                    hojadestino.write(filalista, 19, promedioanterior, fuentenumerodecimal)
                    hojadestino.write(filalista, 20, promediominimo, fuentenormal)
                    hojadestino.write(filalista, 21, cumpleasistencia, fuentenormal)

                    hojadestino.write(filalista, 22, "SI CUMPLE" if cumple else "NO CUMPLE", fuentenormal)

                    matriculados += 1
                else:
                    hojadestino.write(filalista, 23, "NO TIENE MATRICULA", fuentenormal)
                    nomatriculados += 1
                    alerta_corta()

                filalista += 1

                fila += 1

        print("=========================================")
        print("Registros procesados: ", procesados)
        print("Matriculados: ", matriculados)
        print("No Matriculados: ", nomatriculados)
        print("Cumplen con requisitos: ", cumplen)
        print("NO Cumplen con requisitos: ", nocumplen)

        print("Inicio: ", horainicio)
        print("Fin: ", datetime.now())

        libdestino.save("REVISIONBECASALTOPROMEDIO.xls")
        # libdestino.save("RESULTADOBECAS1920.xls")
        print("Proceso terminado...")
        alerta('OK')
    except Exception as ex:
        msg = ex.__str__()
        print(msg)
        alerta('E')


def revisabecados2019primernivel():
    try:
        horainicio = datetime.now()
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentenumerodecimal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
            num_format_str='#,##0.00')
        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        # liborigen = xlrd.open_workbook(output_folder + '/IV-LISTADO (RECHAZADO X VEEDURIA ESTUDIANTIL.xlsx')
        liborigen = xlrd.open_workbook('BECA20192020PRIMERNIVEL.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"#", 1500),
            (u"CEDULA", 7000),
            (u"NOMBRES COMPLETOS", 10000),
            (u"CARRERA", 10000),
            (u"ESTADO", 7000),
            (u"TIPO DE BECA", 7000),
            (u"ID MATRICULA", 5000),
            (u"ID INSCRIPCION", 5000),
            (u"NIVEL", 5000),
            (u"ASISTENCIA", 5000),
            (u"ASIS.NOV", 5000),
            (u"ASIS.DIC", 5000),
            (u"ASIS.ENE", 5000),
            (u"ASIS.FEB", 5000),
            (u"ECUATOR/EXTR.RESI", 5000),
            (u"EST.REGULAR", 5000),
            (u"SANCIONADO", 5000),
            (u"REPROBO MATERIAS", 5000),
            (u"RECIBE BECA EXTERNA", 5000),
            (u"PROMEDIO", 5000),
            (u"CUMPLE MIN. PROMEDIO", 5000),
            (u"CUMPLE MIN. ASISTENCIA", 5000),
            (u"OBSERVACIONES", 10000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        # 85 - MAYO A SEPTIEMBRE 2020
        # 90 - NOVIEMBRE 2019 MARZO 2020
        idperiodo = 90
        # idperiodo = 85
        periodo = Periodo.objects.get(pk=idperiodo)

        print("===Revisión de Becas Primer Nivel===")

        limite = 83
        matriculados = 0
        nomatriculados = 0
        procesados = 0
        cumplen = nocumplen = 0
        filalista = 1
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)
                secuencia = cols[0]
                cedula = cols[1].strip()
                nombre = cols[2].strip()
                carrera = cols[3].strip()
                estado = cols[4].strip()
                tipobeca = cols[5].strip()

                procesados += 1

                persona = Persona.objects.get(cedula=cedula)

                print("Procesando " , procesados, " de ", limite)
                print("Procesando Cédula: ", persona.cedula)

                hojadestino.write(filalista, 0, secuencia, fuentenormal)
                hojadestino.write(filalista, 1, cedula, fuentenormal)
                hojadestino.write(filalista, 2, nombre, fuentenormal)
                hojadestino.write(filalista, 3, carrera, fuentenormal)
                hojadestino.write(filalista, 4, estado, fuentenormal)
                hojadestino.write(filalista, 5, tipobeca, fuentenormal)
                matricula = Matricula.objects.filter(inscripcion__persona=persona, nivel__periodo=periodo, status=True, estado_matricula__in=[2,3])
                if matricula:
                    matricula = matricula[0]
                    hojadestino.write(filalista, 6, matricula.id, fuentenormal)
                    hojadestino.write(filalista, 7, matricula.inscripcion.id, fuentenormal)

                    if persona.paisnacimiento_id == 1:
                        cumple = True
                        cumplenacionalidad = "SI"
                    else:
                        if persona.paisnacimiento_id is not None:
                            if persona.pais_id == 1:
                                cumple = True
                                cumplenacionalidad = "SI"
                            else:
                                cumple = False
                                cumplenacionalidad = "NO"
                        else:
                            cumple = False
                            cumplenacionalidad = "NO"
                    # ESTUDIANTE REGULAR
                    estregular = "SI"
                    if matricula.tipomatriculalumno() != 'REGULAR':
                        cumple = False
                        estregular = "NO"
                    # SANCION
                    sancionado = "NO"
                    if matricula.inscripcion.tiene_sancion():
                        cumple = False
                        sancionado = "SI"
                    # NO HABER REPROBADO MATERIAS NIVEL ANTERIOR
                    cumple = True
                    reprobo = "NO"
                    if not matricula.materias_aprobadas_todas():
                        reprobo = "SI"
                        cumple = False
                    # NO TENER BECAS EXTERNAS
                    tienebecaexterna = "NO"
                    if persona.tiene_becas_externas_activas():
                        cumple = False
                        tienebecaexterna = "SI"
                    # PROMEDIO PERIODO ANTERIOR >= 70
                    promedioanterior = matricula.promedio_nota_dbu()
                    promediominimo = "SI"
                    if promedioanterior < 85:
                        cumple = False
                        promediominimo = "NO"
                    # ASISTENCIA PERIDO ANTERIOR >= 70 %
                    asistenciaanterior = null_to_decimal(matricula.promedio_asistencias_dbu(), 0)
                    cumpleasistencia = "SI"
                    if asistenciaanterior < 70:
                        cumple = False
                        cumpleasistencia = "NO"

                    # asistencia mes 1
                    print("Consultando asistencia mensual...")
                    desde = datetime.strptime('2019-11-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2019-11-30', '%Y-%m-%d').date()
                    porcmes1 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 2
                    desde = datetime.strptime('2019-12-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2019-12-31', '%Y-%m-%d').date()
                    porcmes2 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 3
                    desde = datetime.strptime('2020-01-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2020-01-31', '%Y-%m-%d').date()
                    porcmes3 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 4
                    desde = datetime.strptime('2020-02-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2020-02-29', '%Y-%m-%d').date()
                    porcmes4 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)

                    if cumple:
                        cumplen += 1
                    else:
                        nocumplen += 1

                    hojadestino.write(filalista, 8, matricula.nivelmalla.nombre, fuentenormal)
                    hojadestino.write(filalista, 9, asistenciaanterior, fuentenumerodecimal)

                    hojadestino.write(filalista, 10, porcmes1, fuentenumerodecimal)
                    hojadestino.write(filalista, 11, porcmes2, fuentenumerodecimal)
                    hojadestino.write(filalista, 12, porcmes3, fuentenumerodecimal)
                    hojadestino.write(filalista, 13, porcmes4, fuentenumerodecimal)

                    hojadestino.write(filalista, 14, cumplenacionalidad, fuentenormal)
                    hojadestino.write(filalista, 15, estregular, fuentenormal)
                    hojadestino.write(filalista, 16, sancionado, fuentenormal)
                    hojadestino.write(filalista, 17, reprobo, fuentenormal)
                    hojadestino.write(filalista, 18, tienebecaexterna, fuentenormal)
                    hojadestino.write(filalista, 19, promedioanterior, fuentenumerodecimal)
                    hojadestino.write(filalista, 20, promediominimo, fuentenormal)
                    hojadestino.write(filalista, 21, cumpleasistencia, fuentenormal)

                    hojadestino.write(filalista, 22, "SI CUMPLE" if cumple else "NO CUMPLE", fuentenormal)

                    matriculados += 1
                else:
                    hojadestino.write(filalista, 23, "NO TIENE MATRICULA", fuentenormal)
                    nomatriculados += 1
                    alerta_corta()

                filalista += 1

                fila += 1

        print("=========================================")
        print("Registros procesados: ", procesados)
        print("Matriculados: ", matriculados)
        print("No Matriculados: ", nomatriculados)
        print("Cumplen con requisitos: ", cumplen)
        print("NO Cumplen con requisitos: ", nocumplen)
        print("Inicio: ", horainicio)
        print("Fin: ", datetime.now())

        libdestino.save("REVISIONBECASPRIMERNIVEL.xls")
        # libdestino.save("RESULTADOBECAS1920.xls")
        print("Proceso terminado...")
        alerta('OK')
    except Exception as ex:
        msg = ex.__str__()
        print(msg)
        alerta('E')


def revisabecados2019situacioneconomica():
    try:
        horainicio = datetime.now()
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentenumerodecimal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
            num_format_str='#,##0.00')
        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        # liborigen = xlrd.open_workbook(output_folder + '/IV-LISTADO (RECHAZADO X VEEDURIA ESTUDIANTIL.xlsx')
        liborigen = xlrd.open_workbook('BECA20192020SITUACIONECON.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"#", 1500),
            (u"CEDULA", 7000),
            (u"NOMBRES COMPLETOS", 10000),
            (u"CARRERA", 10000),
            (u"ESTADO", 7000),
            (u"TIPO DE BECA", 7000),
            (u"ID MATRICULA", 5000),
            (u"ID INSCRIPCION", 5000),
            (u"NIVEL", 5000),
            (u"ASISTENCIA", 5000),
            (u"ASIS.NOV", 5000),
            (u"ASIS.DIC", 5000),
            (u"ASIS.ENE", 5000),
            (u"ASIS.FEB", 5000),
            (u"ECUATOR/EXTR.RESI", 5000),
            (u"EST.REGULAR", 5000),
            (u"SANCIONADO", 5000),
            (u"REPROBO MATERIAS", 5000),
            (u"RECIBE BECA EXTERNA", 5000),
            (u"PROMEDIO", 5000),
            (u"CUMPLE MIN. PROMEDIO", 5000),
            (u"CUMPLE MIN. ASISTENCIA", 5000),
            (u"GRUPO SOCIOECONOMICO", 5000),
            (u"CUMPLE GRUPO SOCIOE.", 5000),
            (u"OBSERVACIONES", 10000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        # 85 - MAYO A SEPTIEMBRE 2020
        # 90 - NOVIEMBRE 2019 MARZO 2020
        idperiodo = 90
        # idperiodo = 85
        periodo = Periodo.objects.get(pk=idperiodo)

        print("===Revisión de Becas Situación Económica===")

        limite = 165
        matriculados = 0
        nomatriculados = 0
        procesados = 0
        cumplen = nocumplen = 0
        filalista = 1
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)
                secuencia = cols[0]
                cedula = cols[1].strip()
                nombre = cols[2].strip()
                carrera = cols[3].strip()
                estado = cols[4].strip()
                tipobeca = cols[5].strip()

                procesados += 1

                persona = Persona.objects.get(cedula=cedula)

                print("Procesando " , procesados, " de ", limite)
                print("Procesando Cédula: ", persona.cedula)

                hojadestino.write(filalista, 0, secuencia, fuentenormal)
                hojadestino.write(filalista, 1, cedula, fuentenormal)
                hojadestino.write(filalista, 2, nombre, fuentenormal)
                hojadestino.write(filalista, 3, carrera, fuentenormal)
                hojadestino.write(filalista, 4, estado, fuentenormal)
                hojadestino.write(filalista, 5, tipobeca, fuentenormal)
                matricula = Matricula.objects.filter(inscripcion__persona=persona, nivel__periodo=periodo, status=True, estado_matricula__in=[2,3])
                if matricula:
                    matricula = matricula[0]
                    hojadestino.write(filalista, 6, matricula.id, fuentenormal)
                    hojadestino.write(filalista, 7, matricula.inscripcion.id, fuentenormal)

                    if persona.paisnacimiento_id == 1:
                        cumple = True
                        cumplenacionalidad = "SI"
                    else:
                        if persona.paisnacimiento_id is not None:
                            if persona.pais_id == 1:
                                cumple = True
                                cumplenacionalidad = "SI"
                            else:
                                cumple = False
                                cumplenacionalidad = "NO"
                        else:
                            cumple = False
                            cumplenacionalidad = "NO"
                    # ESTUDIANTE REGULAR
                    estregular = "SI"
                    if matricula.tipomatriculalumno() != 'REGULAR':
                        cumple = False
                        estregular = "NO"
                    # SANCION
                    sancionado = "NO"
                    if matricula.inscripcion.tiene_sancion():
                        cumple = False
                        sancionado = "SI"
                    # NO HABER REPROBADO MATERIAS NIVEL ANTERIOR
                    cumple = True
                    reprobo = "NO"
                    if not matricula.materias_aprobadas_todas():
                        reprobo = "SI"
                        cumple = False
                    # NO TENER BECAS EXTERNAS
                    tienebecaexterna = "NO"
                    if persona.tiene_becas_externas_activas():
                        cumple = False
                        tienebecaexterna = "SI"
                    # PROMEDIO PERIODO ANTERIOR >= 70
                    promedioanterior = matricula.promedio_nota_dbu()
                    promediominimo = "SI"

                    if estado == 'NUEVO':
                        if promedioanterior < 70:
                            cumple = False
                            promediominimo = "NO"
                    else:
                        if promedioanterior < 75:
                            cumple = False
                            promediominimo = "NO"
                    # ASISTENCIA PERIDO ANTERIOR >= 70 %
                    asistenciaanterior = null_to_decimal(matricula.promedio_asistencias_dbu(), 0)
                    cumpleasistencia = "SI"
                    if asistenciaanterior < 70:
                        cumple = False
                        cumpleasistencia = "NO"


                    cumplegrupo = "SI"
                    gruposocio = ""
                    if persona.mi_ficha().grupoeconomico:
                        gruposocio = persona.mi_ficha().grupoeconomico.codigo
                        if not gruposocio in ['C-', 'D']:
                            cumplegrupo = "NO"
                            cumple = False
                    else:
                        cumplegrupo = "NO"
                        cumple = False

                    # asistencia mes 1
                    print("Consultando asistencia mensual...")
                    desde = datetime.strptime('2019-11-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2019-11-30', '%Y-%m-%d').date()
                    porcmes1 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 2
                    desde = datetime.strptime('2019-12-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2019-12-31', '%Y-%m-%d').date()
                    porcmes2 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 3
                    desde = datetime.strptime('2020-01-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2020-01-31', '%Y-%m-%d').date()
                    porcmes3 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 4
                    desde = datetime.strptime('2020-02-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2020-02-29', '%Y-%m-%d').date()
                    porcmes4 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)

                    if cumple:
                        cumplen += 1
                    else:
                        nocumplen += 1

                    hojadestino.write(filalista, 8, matricula.nivelmalla.nombre, fuentenormal)
                    hojadestino.write(filalista, 9, asistenciaanterior, fuentenumerodecimal)

                    hojadestino.write(filalista, 10, porcmes1, fuentenumerodecimal)
                    hojadestino.write(filalista, 11, porcmes2, fuentenumerodecimal)
                    hojadestino.write(filalista, 12, porcmes3, fuentenumerodecimal)
                    hojadestino.write(filalista, 13, porcmes4, fuentenumerodecimal)

                    hojadestino.write(filalista, 14, cumplenacionalidad, fuentenormal)
                    hojadestino.write(filalista, 15, estregular, fuentenormal)
                    hojadestino.write(filalista, 16, sancionado, fuentenormal)
                    hojadestino.write(filalista, 17, reprobo, fuentenormal)
                    hojadestino.write(filalista, 18, tienebecaexterna, fuentenormal)
                    hojadestino.write(filalista, 19, promedioanterior, fuentenumerodecimal)
                    hojadestino.write(filalista, 20, promediominimo, fuentenormal)
                    hojadestino.write(filalista, 21, cumpleasistencia, fuentenormal)
                    hojadestino.write(filalista, 22, gruposocio, fuentenormal)
                    hojadestino.write(filalista, 23, cumplegrupo, fuentenormal)

                    hojadestino.write(filalista, 24, "SI CUMPLE" if cumple else "NO CUMPLE", fuentenormal)

                    matriculados += 1
                else:
                    hojadestino.write(filalista, 25, "NO TIENE MATRICULA", fuentenormal)
                    nomatriculados += 1
                    alerta_corta()

                filalista += 1

                fila += 1

        print("=========================================")
        print("Registros procesados: ", procesados)
        print("Matriculados: ", matriculados)
        print("No Matriculados: ", nomatriculados)
        print("Cumplen con requisitos: ", cumplen)
        print("NO Cumplen con requisitos: ", nocumplen)
        print("Inicio: ", horainicio)
        print("Fin: ", datetime.now())

        libdestino.save("REVISIONBECASSITUACIONECON.xls")
        # libdestino.save("RESULTADOBECAS1920.xls")
        print("Proceso terminado...")
        alerta('OK')
    except Exception as ex:
        msg = ex.__str__()
        print(msg)
        alerta('E')

def revisabecados2019discapacidad():
    try:
        horainicio = datetime.now()
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentenumerodecimal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
            num_format_str='#,##0.00')
        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        # liborigen = xlrd.open_workbook(output_folder + '/IV-LISTADO (RECHAZADO X VEEDURIA ESTUDIANTIL.xlsx')
        liborigen = xlrd.open_workbook('BECA20192020DISCAPACIDAD.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"#", 1500),
            (u"CEDULA", 7000),
            (u"NOMBRES COMPLETOS", 10000),
            (u"CARRERA", 10000),
            (u"ESTADO", 7000),
            (u"TIPO DE BECA", 7000),
            (u"ID MATRICULA", 5000),
            (u"ID INSCRIPCION", 5000),
            (u"NIVEL", 5000),
            (u"ASISTENCIA", 5000),
            (u"ASIS.NOV", 5000),
            (u"ASIS.DIC", 5000),
            (u"ASIS.ENE", 5000),
            (u"ASIS.FEB", 5000),
            (u"ECUATOR/EXTR.RESI", 5000),
            (u"EST.REGULAR", 5000),
            (u"SANCIONADO", 5000),
            (u"REPROBO MATERIAS", 5000),
            (u"RECIBE BECA EXTERNA", 5000),
            (u"PROMEDIO", 5000),
            (u"CUMPLE MIN. PROMEDIO", 5000),
            (u"CUMPLE MIN. ASISTENCIA", 5000),
            (u"DISCAPACIDAD", 5000),
            (u"PORCENTAJE", 5000),
            (u"CUMPLE DISCAP", 5000),
            (u"OBSERVACIONES", 10000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        # 85 - MAYO A SEPTIEMBRE 2020
        # 90 - NOVIEMBRE 2019 MARZO 2020
        idperiodo = 90
        # idperiodo = 85
        periodo = Periodo.objects.get(pk=idperiodo)

        print("===Revisión de Becas por Discapacidad===")

        limite = 17
        matriculados = 0
        nomatriculados = 0
        procesados = 0
        cumplen = nocumplen = 0
        filalista = 1
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)
                secuencia = cols[0]
                cedula = cols[1].strip()
                nombre = cols[2].strip()
                carrera = cols[3].strip()
                estado = cols[4].strip()
                tipobeca = cols[5].strip()

                procesados += 1

                persona = Persona.objects.get(cedula=cedula)

                print("Procesando " , procesados, " de ", limite)
                print("Procesando Cédula: ", persona.cedula)

                hojadestino.write(filalista, 0, secuencia, fuentenormal)
                hojadestino.write(filalista, 1, cedula, fuentenormal)
                hojadestino.write(filalista, 2, nombre, fuentenormal)
                hojadestino.write(filalista, 3, carrera, fuentenormal)
                hojadestino.write(filalista, 4, estado, fuentenormal)
                hojadestino.write(filalista, 5, tipobeca, fuentenormal)
                matricula = Matricula.objects.filter(inscripcion__persona=persona, nivel__periodo=periodo, status=True, estado_matricula__in=[2,3])
                if matricula:
                    matricula = matricula[0]
                    hojadestino.write(filalista, 6, matricula.id, fuentenormal)
                    hojadestino.write(filalista, 7, matricula.inscripcion.id, fuentenormal)

                    if persona.paisnacimiento_id == 1:
                        cumple = True
                        cumplenacionalidad = "SI"
                    else:
                        if persona.paisnacimiento_id is not None:
                            if persona.pais_id == 1:
                                cumple = True
                                cumplenacionalidad = "SI"
                            else:
                                cumple = False
                                cumplenacionalidad = "NO"
                        else:
                            cumple = False
                            cumplenacionalidad = "NO"
                    # ESTUDIANTE REGULAR
                    estregular = "SI"
                    if matricula.tipomatriculalumno() != 'REGULAR':
                        cumple = False
                        estregular = "NO"
                    # SANCION
                    sancionado = "NO"
                    if matricula.inscripcion.tiene_sancion():
                        cumple = False
                        sancionado = "SI"
                    # NO HABER REPROBADO MATERIAS NIVEL ANTERIOR
                    cumple = True
                    reprobo = "NO"
                    if not matricula.materias_aprobadas_todas():
                        reprobo = "SI"
                        cumple = False
                    # NO TENER BECAS EXTERNAS
                    tienebecaexterna = "NO"
                    if persona.tiene_becas_externas_activas():
                        cumple = False
                        tienebecaexterna = "SI"
                    # PROMEDIO PERIODO ANTERIOR >= 70
                    promedioanterior = matricula.promedio_nota_dbu()
                    promediominimo = "SI"

                    if estado == 'NUEVO':
                        if promedioanterior < 70:
                            cumple = False
                            promediominimo = "NO"
                    else:
                        if promedioanterior < 75:
                            cumple = False
                            promediominimo = "NO"
                    # ASISTENCIA PERIDO ANTERIOR >= 70 %
                    asistenciaanterior = null_to_decimal(matricula.promedio_asistencias_dbu(), 0)
                    cumpleasistencia = "SI"
                    if asistenciaanterior < 70:
                        cumple = False
                        cumpleasistencia = "NO"


                    cumplediscapacidad = "SI"
                    discapacidad = ""
                    porcentaje = 0
                    perfil = persona.mi_perfil()
                    if not perfil.tienediscapacidad:
                        cumple = False
                        cumplediscapacidad = "NO"
                    else:
                        discapacidad = perfil.tipodiscapacidad.nombre if perfil.tipodiscapacidad else ''
                        porcentaje = perfil.porcientodiscapacidad if perfil.porcientodiscapacidad else 0

                    # asistencia mes 1
                    print("Consultando asistencia mensual...")
                    desde = datetime.strptime('2019-11-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2019-11-30', '%Y-%m-%d').date()
                    porcmes1 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 2
                    desde = datetime.strptime('2019-12-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2019-12-31', '%Y-%m-%d').date()
                    porcmes2 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 3
                    desde = datetime.strptime('2020-01-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2020-01-31', '%Y-%m-%d').date()
                    porcmes3 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)
                    # asistencia mes 4
                    desde = datetime.strptime('2020-02-01', '%Y-%m-%d').date()
                    hasta = datetime.strptime('2020-02-29', '%Y-%m-%d').date()
                    porcmes4 = null_to_decimal(matricula.porcentaje_asistencia_mensual(desde, hasta), 0)

                    if cumple:
                        cumplen += 1
                    else:
                        nocumplen += 1

                    hojadestino.write(filalista, 8, matricula.nivelmalla.nombre, fuentenormal)
                    hojadestino.write(filalista, 9, asistenciaanterior, fuentenumerodecimal)

                    hojadestino.write(filalista, 10, porcmes1, fuentenumerodecimal)
                    hojadestino.write(filalista, 11, porcmes2, fuentenumerodecimal)
                    hojadestino.write(filalista, 12, porcmes3, fuentenumerodecimal)
                    hojadestino.write(filalista, 13, porcmes4, fuentenumerodecimal)

                    hojadestino.write(filalista, 14, cumplenacionalidad, fuentenormal)
                    hojadestino.write(filalista, 15, estregular, fuentenormal)
                    hojadestino.write(filalista, 16, sancionado, fuentenormal)
                    hojadestino.write(filalista, 17, reprobo, fuentenormal)
                    hojadestino.write(filalista, 18, tienebecaexterna, fuentenormal)
                    hojadestino.write(filalista, 19, promedioanterior, fuentenumerodecimal)
                    hojadestino.write(filalista, 20, promediominimo, fuentenormal)
                    hojadestino.write(filalista, 21, cumpleasistencia, fuentenormal)
                    hojadestino.write(filalista, 22, discapacidad, fuentenormal)
                    hojadestino.write(filalista, 23, porcentaje, fuentenormal)
                    hojadestino.write(filalista, 24, cumplediscapacidad, fuentenormal)

                    hojadestino.write(filalista, 25, "SI CUMPLE" if cumple else "NO CUMPLE", fuentenormal)

                    matriculados += 1
                else:
                    hojadestino.write(filalista, 26, "NO TIENE MATRICULA", fuentenormal)
                    nomatriculados += 1
                    alerta_corta()

                filalista += 1

                fila += 1

        print("=========================================")
        print("Registros procesados: ", procesados)
        print("Matriculados: ", matriculados)
        print("No Matriculados: ", nomatriculados)
        print("Cumplen con requisitos: ", cumplen)
        print("NO Cumplen con requisitos: ", nocumplen)
        print("Inicio: ", horainicio)
        print("Fin: ", datetime.now())

        libdestino.save("REVISIONBECASDISCAPACIDAD.xls")
        # libdestino.save("RESULTADOBECAS1920.xls")
        print("Proceso terminado...")
        alerta('OK')
    except Exception as ex:
        msg = ex.__str__()
        print(msg)
        alerta('E')

@transaction.atomic()
def crear_solicitud_becas_2019_2020():
    try:
        # print(your_djangoproject_home)
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentenumerodecimal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
            num_format_str='#,##0.00')
        # output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'arreglos'))

        # liborigen = xlrd.open_workbook(output_folder + '/I-NOMINA MODALIDAD EN LINEA - AGREGAR - P2.xlsx')
        # liborigen = xlrd.open_workbook('PROCESARBECASNOV2019MAR2020.xlsx')

        liborigen = xlrd.open_workbook('PROCESARBECASNOV2019MAR2020P3.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"CEDULA", 7000),
            (u"NOMBRES COMPLETOS", 10000),
            (u"OBSERVACIONES", 10000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)
        horainicio = datetime.now()
        creadas = 0
        limite = 1
        bap2n = bap1n = bse = bdisc = 0
        nomatriculados = 0
        periodo_destino = Periodo.objects.get(pk=90)
        periodo_valida = Periodo.objects.get(pk=85)
        periodo_valida_online = Periodo.objects.get(pk=82)
        personaapruebarechaza = Persona.objects.get(pk=1)

        requisitos_bap2n = [[requisito.id, requisito.numero] for requisito in BecaRequisitos.objects.filter(Q(becatipo__isnull=True) | Q(becatipo_id=17), periodo_id=90, status=True, vigente=True).order_by('numero')]
        requisitos_bap1n = [[requisito.id, requisito.numero] for requisito in BecaRequisitos.objects.filter(Q(becatipo__isnull=True) | Q(becatipo_id=16), periodo_id=90, status=True, vigente=True).order_by('numero')]
        requisitos_bse = [[requisito.id, requisito.numero] for requisito in BecaRequisitos.objects.filter(Q(becatipo__isnull=True) | Q(becatipo_id=18), periodo_id=90, status=True, vigente=True).order_by('numero')]
        requisitos_disc = [[requisito.id, requisito.numero] for requisito in BecaRequisitos.objects.filter(Q(becatipo__isnull=True) | Q(becatipo_id=19), periodo_id=90, status=True, vigente=True).order_by('numero')]

        filalista = 1
        procesados = 0
        enviarcorreo = True
        for fila in range(sheet.nrows):
            if fila >= 1:
                procesados += 1
                cols = sheet.row_values(fila)

                cedula = cols[1].strip()
                nombres = cols[2].strip()
                carrera = cols[3].strip()
                tiposolicitud = cols[4].strip()
                idtipobeca = cols[7]

                persona = Persona.objects.get(cedula=cedula)
                print("Procesando Registro # ", procesados, " de ", limite)
                print(cedula, " - ", nombres, " - ", carrera)

                if not Matricula.objects.values('id').filter(Q(nivel__periodo=periodo_valida)|Q(nivel__periodo=periodo_valida_online),
                                                             inscripcion__persona=persona).exists():
                    hojadestino.write(filalista, 0, cedula, fuentenormal)
                    hojadestino.write(filalista, 1, nombres, fuentenormal)
                    hojadestino.write(filalista, 2, "NO ESTÁ MATRICULADO EN EL PERIODO ACTUAL", fuentenormal)


                    # alerta_corta()
                    nomatriculados += 1
                    filalista += 1
                else:
                    matricula = Matricula.objects.filter(Q(nivel__periodo=periodo_valida) | Q(nivel__periodo=periodo_valida_online),inscripcion__persona=persona)[0]
                    inscripcion = matricula.inscripcion

                    # SOLICITUD DE BECA
                    beca = BecaSolicitud(inscripcion=inscripcion,
                                         becatipo_id=idtipobeca,
                                         tiposolicitud=1 if tiposolicitud == 'NUEVO' else 2,
                                         periodo=periodo_destino,
                                         periodocalifica=periodo_valida if inscripcion.carrera.modalidad != 3 else periodo_valida_online,
                                         estado=1,
                                         observacion='NOVIEMBRE 2019 - MARZO 2020'
                                         )
                    beca.save()

                    recorrido = BecaSolicitudRecorrido(solicitud=beca,
                                                       observacion="SOLICITUD REGISTRADA",
                                                       estado=1
                                                       )
                    recorrido.save()

                    if idtipobeca == 16:
                        requisitos = requisitos_bap1n
                        bap1n += 1
                    elif idtipobeca == 17:
                        requisitos = requisitos_bap2n
                        bap2n += 1
                    elif idtipobeca == 18:
                        requisitos = requisitos_bse
                        bse += 1
                    else:
                        requisitos = requisitos_disc
                        bdisc += 1

                    # DETALLES DE REQUISITOS DE LA SOLICITUD
                    for req in requisitos:
                        detalle = BecaDetalleSolicitud(solicitud=beca,
                                                      requisito_id=req[0],
                                                      cumple=True,
                                                      archivo=None,
                                                      estado=2,
                                                      observacion='APROBACIÓN AUTOMÁTICA',
                                                      personaaprueba=personaapruebarechaza,
                                                      fechaaprueba=datetime.now())
                        detalle.save()

                    tituloemail = "Registro de Solicitud de Beca - Semestre NOVIEMBRE 2019 - MARZO 2020"
                    tipobeca = beca.becatipo.nombre.upper()

                    # ENVIO DE CORREO DE LA SOLICITUD REGISTRADA
                    if enviarcorreo:
                        cuenta = cuenta_email_disponible()
                        send_html_mail(tituloemail,
                                       "emails/solicitudbecaestudiante.html",
                                       {'sistema': u'SGA - UNEMI',
                                        'tipo': 'SOL',
                                        'tipobeca': tipobeca,
                                        'periodo' : periodo_destino.nombre,
                                        'fecha': datetime.now().date(),
                                        'hora': datetime.now().time(),
                                        'estudiante': persona,
                                        'autoridad2': '',
                                        't': miinstitucion()
                                        },
                                       persona.lista_emails_envio(),
                                       [],
                                       cuenta=CUENTAS_CORREOS[cuenta][1]
                                       )

                    # REGISTRO EN ESTADO DE REVISION
                    beca.estado = 4
                    beca.save()

                    recorrido = BecaSolicitudRecorrido(solicitud=beca,
                                                       observacion="EN REVISION",
                                                       estado=4
                                                       )
                    recorrido.save()

                    # Envio de e-mail de notificación al solicitante
                    tituloemail = "Solicitud de Beca en Revisión"
                    tipobeca = beca.becatipo.nombre.upper()

                    if enviarcorreo:
                        cuenta = cuenta_email_disponible()
                        send_html_mail(tituloemail,
                                       "emails/notificarestadosolicitudbeca.html",
                                       {'sistema': u'SGA - UNEMI',
                                        'fase': 'REV',
                                        'tipobeca': tipobeca,
                                        'periodo': periodo_destino.nombre,
                                        'fecha': datetime.now().date(),
                                        'hora': datetime.now().time(),
                                        'saludo': 'Estimada' if beca.inscripcion.persona.sexo_id == 1 else 'Estimado',
                                        'estudiante': beca.inscripcion.persona.nombre_completo_inverso(),
                                        'autoridad2': '',
                                        't': miinstitucion()
                                        },
                                       beca.inscripcion.persona.lista_emails_envio(),
                                       [],
                                       cuenta=CUENTAS_CORREOS[cuenta][1]
                                       )

                    # APROBAR SOLICITUD
                    estado = 2
                    beca.estado = estado
                    beca.becaaceptada = 1
                    beca.save()

                    recorrido = BecaSolicitudRecorrido(solicitud=beca,
                                                       estado=estado,
                                                       observacion="APROBACIÓN AUTOMÁTICA")
                    recorrido.save()

                    tipobeca = beca.becatipo.nombre.upper()
                    if enviarcorreo:
                        cuenta = cuenta_email_disponible()
                        send_html_mail(tituloemail,
                                       "emails/notificarestadosolicitudbeca.html",
                                       {'sistema': u'SGA - UNEMI',
                                        'fase': 'AR',
                                        'tipobeca': tipobeca,
                                        'periodo': periodo_destino.nombre,
                                        'fecha': datetime.now().date(),
                                        'hora': datetime.now().time(),
                                        'saludo': 'Estimada' if beca.inscripcion.persona.sexo_id == 1 else 'Estimado',
                                        'estado': 'APROBADA' if estado == 2 else "RECHAZADA",
                                        'estudiante': beca.inscripcion.persona.nombre_completo_inverso(),
                                        'autoridad2': '',
                                        'observaciones': '',
                                        't': miinstitucion()
                                        },
                                       beca.inscripcion.persona.lista_emails_envio(),
                                       [],
                                       cuenta=CUENTAS_CORREOS[cuenta][1]
                                       )

                    creadas += 1


                fila += 1

        if nomatriculados > 0:
            libdestino.save("NOMATRICULADOS2020.xls")

        print("Proceso finalizado...")
        print("Inicio: ", horainicio)
        print("Fin: ", datetime.now())
        print("No matriculados:", nomatriculados)
        print("Solicitudes creadas/aprobadas: ", creadas)
        print("Becas Alto Promedio 1er Nivel: ", bap1n)
        print("Becas Alto Promedio Desde 2do Nivel: ", bap2n)
        print("Becas Situación  Socioeconómica: ", bse)
        print("Becas Discapacidad: ", bdisc)
        print("Proceso terminado...")
        # alerta('OK')
    except Exception as ex:
        transaction.set_rollback(True)
        msg = ex.__str__()
        print(msg)
        # alerta('E')

def enviar_correos_acta_grado():
    becas = BecaAsignacion.objects.filter(solicitud__periodo_id=90,
                                          solicitud__becatipo_id=16,
                                          solicitud__inscripcion__persona__personadocumentopersonal__status=True,
                                          solicitud__inscripcion__persona__personadocumentopersonal__estadocedula=2,
                                          solicitud__inscripcion__persona__personadocumentopersonal__estadopapeleta=2,
                                          solicitud__inscripcion__persona__personadocumentopersonal__estadocedularepresentantesol=2,
                                          solicitud__inscripcion__persona__personadocumentopersonal__estadopapeletarepresentantesol=2,
                                          solicitud__inscripcion__persona__personadocumentopersonal__estadoactagrado__isnull=True
                                          )
    for b in becas:
        print(b.solicitud.inscripcion.persona.identificacion(), ' - ', b.solicitud.inscripcion.persona)
    print("Total enviados: ", becas.count())


def enviar_correos_becas_pendientes_aceptar():
    import time

    # solicitudes = BecaSolicitud.objects.filter(status=True, estado=2, becaaceptada=1, periodo_id=90)
    solicitudes = BecaSolicitud.objects.filter(status=True, estado=2, becaaceptada=1, periodo_id=110)

    # tituloemail = "Beca Periodo Noviembre 2019 - Marzo 2020"
    tituloemail = "Ayudas Económicas - Periodo Mayo a Septiembre 2020 V2"

    # periodo_destino = Periodo.objects.get(pk=90)
    periodo_destino = Periodo.objects.get(pk=110)

    enviados = 0
    total = solicitudes.count()
    estado = 2
    for beca in solicitudes:
        enviados += 1
        print("Procesando", enviados," de ", total)
        print(beca.inscripcion.persona.identificacion(), " - ", beca.inscripcion.persona)
        tipobeca = beca.becatipo.nombre.upper()
        cuenta = cuenta_email_disponible()
        send_html_mail(tituloemail,
                       "emails/notificarbecapendienteaceptar.html",
                       {'sistema': u'SGA - UNEMI',
                        'fase': 'AR',
                        'tipobeca': tipobeca,
                        'periodo': periodo_destino.nombre,
                        'fecha': datetime.now().date(),
                        'hora': datetime.now().time(),
                        'saludo': 'Estimada' if beca.inscripcion.persona.sexo_id == 1 else 'Estimado',
                        'estado': 'APROBADA' if estado == 2 else "RECHAZADA",
                        'estudiante': beca.inscripcion.persona.nombre_completo_inverso(),
                        'autoridad2': '',
                        'observaciones': '',
                        't': miinstitucion()
                        },
                       beca.inscripcion.persona.lista_emails_envio(),
                       [],
                       cuenta=CUENTAS_CORREOS[cuenta][1]
                       )
        # Temporizador para evitar que se bloquee el servicion de gmail
        time.sleep(5)

    print("Proceso terminado.....")
    print("E-mails enviados: ", enviados)


def enviar_correos_becas_renovacion():
    import time
    solicitudes = BecaSolicitud.objects.filter(status=True, estado=2, becaaceptada=2, tiposolicitud=2)
    # solicitudes = BecaSolicitud.objects.filter(status=True, estado=2, becaaceptada=2, tiposolicitud=2, inscripcion__persona__cedula='0958060568')
    tituloemail = "Trámite de Becas por Renovación Periodo Noviembre 2019 - Marzo 2020 - VALIDADO"
    periodo_destino = Periodo.objects.get(pk=90)
    enviados = 0
    total = solicitudes.count()
    for beca in solicitudes:
        enviados += 1
        print("Procesando", enviados," de ", total)
        print(beca.inscripcion.persona.identificacion(), " - ", beca.inscripcion.persona)
        tipobeca = beca.becatipo.nombre.upper()
        cuenta = cuenta_email_disponible()
        send_html_mail(tituloemail,
                       "emails/notificarbecarenovacion.html",
                       {'sistema': u'SGA - UNEMI',
                        'tipobeca': tipobeca,
                        'periodo': periodo_destino.nombre,
                        'fecha': datetime.now().date(),
                        'hora': datetime.now().time(),
                        'saludo': 'Estimada' if beca.inscripcion.persona.sexo_id == 1 else 'Estimado',
                        'estudiante': beca.inscripcion.persona.nombre_completo_inverso(),
                        'observaciones': '',
                        't': miinstitucion()
                        },
                       beca.inscripcion.persona.lista_emails_envio(),
                       [],
                       cuenta=CUENTAS_CORREOS[cuenta][1]
                       )
        # Temporizador para evitar que se bloquee el servicion de gmail
        time.sleep(5)

    print("Proceso terminado...")
    print("E-mails enviados: ", enviados)


def revisiondocumentos():
    # becas = BecaAsignacion.objects.filter(solicitud__periodo_id=90, status=True, solicitud__inscripcion__persona__cedula='0955711031')
    becas = BecaAsignacion.objects.filter(solicitud__periodo_id=90, status=True)
    docs = docse = sdoc = renov = 0
    for b in becas:
        print(b.solicitud.inscripcion)
        persona = b.solicitud.inscripcion.persona
        documentos = persona.documentos_personales()
        if documentos:
            if b.tipo == 1:
                if documentos.fecha_creacion >= b.fecha_creacion:
                    docs += 1
                else:
                    docse += 1
                    b.cargadocumento = False
                    b.save()
            else:
                renov += 1
                b.cargadocumento = False
                b.save()
        else:
            if b.tipo == 1:
                sdoc += 1
            else:
                renov += 1
                b.cargadocumento = False
                b.save()

    print("Total becas: ", becas.count())
    print("Total documentos nuevos: ", docs)
    print("Total documentos existentes: ", docse)
    print("Total por renovacion: ", renov)
    print("Total sin documentos: ", sdoc)

def agregar_estado_pago_solicitado():
    solicitudpago = SolicitudPagoBecaDetalle.objects.filter(status=True)
    total = solicitudpago.count()
    p = 1
    for sol in solicitudpago:
        print("Procesando ", p, "de", total)
        beca = sol.asignacion
        fechasol = sol.fecha_creacion
        usuariocrea = sol.usuario_creacion

        observacion = 'SOLICITUD DE PAGO REALIZADA'

        recorrido = BecaSolicitudRecorrido(solicitud=beca.solicitud,
                                           observacion=observacion,
                                           estado=28,
                                           fecha=fechasol,
                                           fecha_creacion=fechasol,
                                           usuario_creacion=usuariocrea
                                           )
        recorrido.save()
        p += 1


def enviar_correos_pagos_realizados():
    import time
    pagos = SolicitudPagoBecaDetalle.objects.filter(asignacion__solicitud__periodo_id=110,
                                                    pagado=True
                                                    )[100:]
    enviados = 0
    total = pagos.count()
    for pago in pagos:
        enviados += 1
        print("Procesando", enviados," de ", total)
        print(pago.asignacion.solicitud.inscripcion.persona.identificacion(), " - ", pago.asignacion.solicitud.inscripcion.persona)
        cuenta = cuenta_email_disponible()
        # Envio de e-mail de notificación al solicitante
        tituloemail = "Proceso de Adjudicación por Ayuda Económica - Concluido"

        send_html_mail(tituloemail,
                       "emails/notificarpagobeca.html",
                       {'sistema': u'SGA - UNEMI',
                        'fecha': datetime.now().date(),
                        'hora': datetime.now().time(),
                        'saludo': 'Estimada' if pago.asignacion.solicitud.inscripcion.persona.sexo_id == 1 else 'Estimado',
                        'estudiante': pago.asignacion.solicitud.inscripcion.persona.nombre_completo_inverso(),
                        'autoridad2': '',
                        'fechapago': pago.fechapago,
                        't': miinstitucion()
                        },
                       pago.asignacion.solicitud.inscripcion.persona.lista_emails_envio(),
                       [],
                       cuenta=CUENTAS_CORREOS[cuenta][1]
                       )

        # Temporizador para evitar que se bloquee el servicion de gmail
        time.sleep(5)

    print("Proceso terminado...")
    print("E-mails enviados: ", enviados)

@transaction.atomic()
def aprobarsolicitudesbeca():
    try:
        import time
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentenumerodecimal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz right',
            num_format_str='#,##0.00')
        # output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'arreglos'))

        # liborigen = xlrd.open_workbook(output_folder + '/I-NOMINA MODALIDAD EN LINEA - AGREGAR - P2.xlsx')
        # liborigen = xlrd.open_workbook('PROCESARBECASNOV2019MAR2020.xlsx')

        # liborigen = xlrd.open_workbook('bancodedatoselegibles11082020ube157.xlsx')
        liborigen = xlrd.open_workbook('bancodedatoselegibles11082020ube157p2.xlsx')
        # liborigen = xlrd.open_workbook('bancodedatoselegibles11082020ube5reg.xlsx')
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"CEDULA", 7000),
            (u"NOMBRES COMPLETOS", 10000),
            (u"OBSERVACIONES", 10000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)
        horainicio = datetime.now()
        creadas = 0
        limite = 52
        noexisten = nomatriculado = 0
        personaapruebarechaza = Persona.objects.get(pk=1)
        periodo = Periodo.objects.get(pk=110)
        sinmatricula = False

        filalista = 1
        procesados = 0
        aprobadas = 0
        enviarcorreo = True
        for fila in range(sheet.nrows):
            if fila >= 1:
                procesados += 1
                cols = sheet.row_values(fila)
                idsolicitud = int(cols[0].strip())
                cedula = cols[4].strip()
                nombres = cols[3].strip()
                persona = Persona.objects.get(cedula=cedula)

                print("Procesando", procesados, " de ", limite)
                print(cedula, " - ", nombres)

                if not Matricula.objects.filter(nivel__periodo=periodo, inscripcion__persona=persona).exists():
                    nomatriculado += 1
                    print(cedula)
                    sinmatricula = True
                    break

                cabecera = BecaSolicitud.objects.get(pk=idsolicitud)
                if cabecera.estado != 8:# SI NO HA SIDO DESISTIDA
                    # REGISTRO EN ESTADO DE REVISION
                    cabecera.estado = 4
                    cabecera.save()

                    recorrido = BecaSolicitudRecorrido(solicitud=cabecera,
                                                       observacion="EN REVISION",
                                                       estado=4,
                                                       fecha=datetime.now().date()
                                                       )
                    recorrido.save()

                    # Envio de e-mail de notificación al solicitante
                    tituloemail = "Solicitud de Beca en Revisión"
                    tipobeca = cabecera.becatipo.nombre.upper()

                    if enviarcorreo:
                        cuenta = cuenta_email_disponible()
                        send_html_mail(tituloemail,
                                       "emails/notificarestadosolicitudbeca.html",
                                       {'sistema': u'SGA - UNEMI',
                                        'fase': 'REV',
                                        'periodo': periodo.nombre,
                                        'tipobeca': tipobeca,
                                        'fecha': datetime.now().date(),
                                        'hora': datetime.now().time(),
                                        'saludo': 'Estimada' if cabecera.inscripcion.persona.sexo_id == 1 else 'Estimado',
                                        'estudiante': cabecera.inscripcion.persona.nombre_completo_inverso(),
                                        'autoridad2': '',
                                        't': miinstitucion()
                                        },
                                       cabecera.inscripcion.persona.lista_emails_envio(),
                                       [],
                                       cuenta=CUENTAS_CORREOS[cuenta][1]
                                       )

                        # Temporizador para evitar que se bloquee el servicion de gmail
                        time.sleep(5)

                    # APROBAR DETALLES
                    detalles = BecaDetalleSolicitud.objects.filter(solicitud=cabecera, requisito_id__in=[15, 16])
                    for detalle in detalles:
                        detalle.cumple = True
                        detalle.estado = 2
                        detalle.observacion = "APROBACIÓN AUTOMÁTICA"
                        detalle.fechaaprueba = datetime.now()
                        detalle.personaaprueba = personaapruebarechaza
                        detalle.save()

                    # APROBAR SOLICITUD
                    estado = 2
                    cabecera.estado = estado
                    cabecera.becaaceptada = 1
                    cabecera.save()

                    recorrido = BecaSolicitudRecorrido(solicitud=cabecera,
                                                       estado=estado,
                                                       fecha=datetime.now().date(),
                                                       observacion="APROBACIÓN AUTOMÁTICA")
                    recorrido.save()

                    tipobeca = cabecera.becatipo.nombre.upper()
                    if enviarcorreo:
                        cuenta = cuenta_email_disponible()
                        send_html_mail(tituloemail,
                                       "emails/notificarestadosolicitudbeca.html",
                                       {'sistema': u'SGA - UNEMI',
                                        'fase': 'AR',
                                        'periodo': periodo.nombre,
                                        'tipobeca': tipobeca,
                                        'fecha': datetime.now().date(),
                                        'hora': datetime.now().time(),
                                        'saludo': 'Estimada' if cabecera.inscripcion.persona.sexo_id == 1 else 'Estimado',
                                        'estado': 'APROBADA' if estado == 2 else "RECHAZADA",
                                        'estudiante': cabecera.inscripcion.persona.nombre_completo_inverso(),
                                        'autoridad2': '',
                                        'observaciones': '',
                                        't': miinstitucion()
                                        },
                                       cabecera.inscripcion.persona.lista_emails_envio(),
                                       [],
                                       cuenta=CUENTAS_CORREOS[cuenta][1]
                                       )
                        # Temporizador para evitar que se bloquee el servicion de gmail
                        time.sleep(5)

                    aprobadas += 1


        print("Proceso finalizado...")
        print("Inicio: ", horainicio)
        print("Fin: ", datetime.now())
        print("Sin matricula: ", noexisten)
        print("Solicitudes aprobadas: ", aprobadas)

    except Exception as ex:
        transaction.set_rollback(True)
        msg = ex.__str__()
        print(msg)


def enviar_correos_acreditacion_realizada():
    import time
    pagos = SolicitudPagoBecaDetalle.objects.filter(asignacion__solicitud__periodo_id=110,
                                                    pagado=True,
                                                    acreditado=True,
                                                    fecha_modificacion__gte='2020-08-01 00:00:00'
                                                    )
    enviados = 0
    total = pagos.count()
    for pago in pagos:
        enviados += 1
        print("Procesando", enviados," de ", total)
        print(pago.asignacion.solicitud.inscripcion.persona.identificacion(), " - ", pago.asignacion.solicitud.inscripcion.persona)

        # cuenta = cuenta_email_disponible()
        cuenta = 22
        print(cuenta)
        print("Correo: ", CUENTAS_CORREOS[cuenta][1])
        # Envio de e-mail de notificación al solicitante
        tituloemail = "Comunicado Dirección de Bienestar Universitario"

        send_html_mail(tituloemail,
                       "emails/notificarsubirfactura.html",
                       {'sistema': u'SGA - UNEMI',
                        'fecha': datetime.now().date(),
                        'hora': datetime.now().time(),
                        'saludo': 'Estimada' if pago.asignacion.solicitud.inscripcion.persona.sexo_id == 1 else 'Estimado',
                        'estudiante': pago.asignacion.solicitud.inscripcion.persona.nombre_completo_inverso(),
                        'autoridad2': '',
                        'fechapago': pago.fechapago,
                        't': miinstitucion()
                        },
                       pago.asignacion.solicitud.inscripcion.persona.lista_emails_envio(),
                       [],
                       cuenta=CUENTAS_CORREOS[cuenta][1]
                       )

        # Temporizador para evitar que se bloquee el servicion de gmail
        time.sleep(5)

    print("Proceso terminado...")
    print("E-mails enviados: ", enviados)

@transaction.atomic()
def agregarbasesindexadasarevistas():
    try:
        articulos = ArticuloInvestigacion.objects.filter(status=True).order_by("id")
        total = articulos.count()
        procesa = 1
        for articulo in articulos:
            print("Procesando", procesa, " de ", total)
            print(articulo)
            basesarticulo = ArticulosBaseIndexada.objects.filter(articulo=articulo, status=True)
            if basesarticulo:
                revista = articulo.revista
                for basearticulo in basesarticulo:
                    print("Revista:", revista.nombre)
                    basesrevista = [base.baseindexada.id for base in revista.revistainvestigacionbase_set.filter(status=True).order_by('baseindexada__nombre')]
                    # basesrevista = [base.id for base in revista.baseindexada.all().order_by('nombre')]
                    if basesrevista:
                        if not basearticulo.baseindexada.id in basesrevista:
                            revistabase = RevistaInvestigacionBase(revista=revista,
                                                                   baseindexada_id=basearticulo.baseindexada.id,
                                                                   documentoindexacion=None
                                                                   )
                            revistabase.save()
                            # revista.baseindexada.add(basearticulo.baseindexada)
                            print("Base indexada agregada", basearticulo.baseindexada.nombre)
                    else:
                        revistabase = RevistaInvestigacionBase(revista=revista,
                                                               baseindexada_id=basearticulo.baseindexada.id,
                                                               documentoindexacion=None
                                                               )
                        revistabase.save()
                        # revista.baseindexada.add(basearticulo.baseindexada)
                        print("Base indexada agregada", basearticulo.baseindexada.nombre)

            procesa += 1

        print("Proceso finalizado...")
    except Exception as ex:
        transaction.set_rollback(True)
        msg = ex.__str__()
        print(msg)

@transaction.atomic()
def agregarbasesindexadasarevistas2():
    try:
        revistas = RevistaInvestigacion.objects.filter(status=True).order_by('id')
        total = revistas.count()
        c = 0
        for revista in revistas:
            c += 1
            print("Procesando", c, " de", total)
            print("Revista: ", revista.nombre)
            bases = revista.baseindexada.all()
            for base in bases:
                print("Base:", base)
                revistabase = RevistaInvestigacionBase(revista=revista,
                                                       baseindexada=base,
                                                       documentoindexacion=None,
                                                       status=True)
                revistabase.save()

        print("Proceso finalizado...")
    except Exception as ex:
        transaction.set_rollback(True)
        msg = ex.__str__()
        print(msg)


def actualizacampopublicadosolicitud():
    solicitudes = SolicitudPublicacion.objects.filter(tiposolicitud=1, status=True)
    for solicitud in solicitudes:
        print("Procesando...", solicitud.nombre)
        if solicitud.volumen.strip() != '' or solicitud.numero.strip() != '' or solicitud.paginas != '' or solicitud.enlace.strip() != '':
            solicitud.estadopublicacion = 1
        else:
            solicitud.estadopublicacion = 2

        solicitud.save()

@transaction.atomic()
def llenar_tabla_comprobante_revision():
    try:
        comprobantes = BecaComprobanteVenta.objects.filter(status=True).order_by('id')
        total = comprobantes.count()
        c = 0

        for comprobante in comprobantes:
            c += 1
            print("Procesando", c, " de ", total)
            print("Beca:", comprobante.asignacion.solicitud.inscripcion.persona)
            revision = BecaComprobanteRevision(asignacion=comprobante.asignacion,
                                               estado=comprobante.estado,
                                               personarevisadbu=comprobante.personarevisadbu,
                                               estadorevisiondbu=comprobante.estadorevisiondbu,
                                               observaciondbu=comprobante.observaciondbu,
                                               personarevisafin=comprobante.personarevisafin,
                                               estadorevisionfin=comprobante.estadorevisionfin,
                                               observacionfin=comprobante.observacionfin,
                                               fecha_creacion=comprobante.fecha_creacion,
                                               usuario_creacion=comprobante.usuario_creacion,
                                               fecha_modificacion=comprobante.fecha_modificacion,
                                               usuario_modificacion=comprobante.usuario_modificacion)
            revision.save()

            comprobante.revision = revision
            comprobante.save()

        print("Proceso finalizado...")
    except Exception as ex:
        transaction.set_rollback(True)
        msg = ex.__str__()
        print(msg)


def enviar_correo_articulo():
    import time

    cuenta = cuenta_email_disponible()
    # cuenta = 22
    print(cuenta)
    print("Correo: ", CUENTAS_CORREOS[cuenta][1])
    # Envio de e-mail de notificación al solicitante
    tituloemail = "Artículo Registrado y Aprobado"

    solicitante = Persona.objects.get(cedula='0923704928')
    articulo = "Diagnóstico del potencial turístico para el diseño de senderos ecoturísticos. Caso Bosque Protector Cerro Blanco, Guayas, Ecuador"

    integrantes = []
    integrantes.append(['ORTIZ ZURITA MARIA JOSE','AUTOR'])
    integrantes.append(['TORRES JARA GABRIELA NATALIA','COAUTOR'])
    integrantes.append(['PEÑAFIEL LEON JAZMIN JESSENIA','COAUTOR'])

    categoria = "ARTÍCULO CIENTÍFICO"
    origen = "INTERNO"

    send_html_mail(tituloemail,
                   "emails/aprobacionarticulo.html",
                   {'sistema': u'SGA - UNEMI',
                    'fecha': datetime.now().date(),
                    'hora': datetime.now().time(),
                    'saludo': 'Estimada',
                    'solicitante': 'ORTIZ ZURITA MARIA JOSE',
                    'articulo': articulo,
                    'integrantes': integrantes,
                    'categoria': categoria,
                    'origen': origen,
                    't': miinstitucion()
                    },
                   solicitante.lista_emails_envio(),
                   [],
                   cuenta=CUENTAS_CORREOS[cuenta][1]
                   )

    # Temporizador para evitar que se bloquee el servicion de gmail
    time.sleep(5)

    print("Proceso terminado...")

def arreglar_muestra_encuesta_admision():
    horainicio = datetime.now()
    personas = MuestraEncuesta.objects.values('persona_id').filter(status=True, encuesta_id=76).distinct().order_by('persona_id')
    c = 0
    total = personas.count()
    for persona in personas:
        c += 1
        print("Procesando", c, " de ", total)
        print("Persona", persona['persona_id'])
        muestra = MuestraEncuesta.objects.filter(encuesta_id=76, persona_id=persona['persona_id']).order_by('id')
        print("Total Filas:", muestra.count())

        if muestra.count() > 1:
            print("Eliminar duplicados...")
            id1 = muestra[0].id
            MuestraEncuesta.objects.filter(encuesta_id=76, persona_id=persona['persona_id']).exclude(pk=id1).update(status=False)


    print("Proceso finalizado...")
    print("Inicio: ", horainicio)
    print("Fin: ", datetime.now())


def asignar_estado_aprobado_articulos_existentes():
    horainicio = datetime.now()
    articulos = ArticuloInvestigacion.objects.filter(status=True).order_by('id')
    c = 0
    total = articulos.count()
    for articulo in articulos:
        c += 1
        print("Procesando", c, " de ", total)

        if articulo.numeroevidenciasarticulos() > 0 and articulo.numeroparticipantesarticulo() > 0:
            articulo.aprobado = True
        else:
            articulo.aprobado = False

        articulo.save()

        if c == 376:
            print("Hola")

        if articulo.aprobado:
            basesarticulo = articulo.basesarticuloscategoria()
            if basesarticulo:
                categoria = basesarticulo[0].baseindexada.categoria.id
                articulo.categoria = categoria
            else:
                articulo.categoria = None

            articulo.save()


    print("Proceso finalizado...")
    print("Inicio: ", horainicio)
    print("Fin: ", datetime.now())


def carteravencidapormes():
    horainicio = datetime.now().time()
    # periodos = Periodo.objects.values('id').filter(pk=86, nivel__matricula__rubro__saldo__gt=0, nivel__matricula__rubro__fechavence__lt=datetime.now().date(), tipo__id__in=[3, 4]).distinct().order_by('id')
    periodos = Periodo.objects.values('id').filter(nivel__matricula__rubro__saldo__gt=0, nivel__matricula__rubro__fechavence__lt=datetime.now().date(), tipo__id__in=[3, 4]).distinct().order_by('id')
    # periodos = Periodo.objects.filter(nivel__matricula__rubro__saldo__gt=0, nivel__matricula__rubro__fechavence__lt=datetime.now().date(), tipo__id__in=[3, 4]).distinct().order_by('id')
    print(periodos)
    anio = 2020
    cedula = '0923360093'
    for pmaestria in periodos:
        periodomaestria = Periodo.objects.get(pk=pmaestria['id'])
        print(periodomaestria)

        # programas = Carrera.objects.values('id').filter(pk=113, inscripcion__matricula__rubro__saldo__gt=0, inscripcion__matricula__rubro__fechavence__lt=datetime.now().date(), inscripcion__matricula__nivel__periodo__id=periodomaestria.id, inscripcion__matricula__nivel__periodo__tipo__id__in=[3,4]).distinct().order_by('nombre')
        programas = Carrera.objects.values('id').filter(inscripcion__matricula__rubro__saldo__gt=0, inscripcion__matricula__rubro__fechavence__lt=datetime.now().date(), inscripcion__matricula__nivel__periodo__id=periodomaestria.id, inscripcion__matricula__nivel__periodo__tipo__id__in=[3,4]).distinct().order_by('nombre')

        for programa in programas:
            programamaestria = Carrera.objects.get(pk=programa['id'])
            print(programamaestria)

            # matricula__retiradomatricula = False
            # valorvencido = Decimal(null_to_decimal(Rubro.objects.filter(matricula__nivel__periodo__id=periodomaestria.id, matricula__inscripcion__carrera__id=programamaestria.id, fechavence__lt=datetime.now().date(), status=True, matricula__inscripcion__persona__cedula=cedula).aggregate(valor=Sum('saldo'))['valor'], 2)).quantize(Decimal('.01'))
            valorvencido = Decimal(null_to_decimal(Rubro.objects.filter(matricula__nivel__periodo__id=periodomaestria.id, matricula__inscripcion__carrera__id=programamaestria.id, fechavence__lt=datetime.now().date(), status=True).aggregate(valor=Sum('saldo'))['valor'], 2)).quantize(Decimal('.01'))
            print("Valor Vencido Total:", valorvencido)

            # totalpagado = Decimal(null_to_decimal(Pago.objects.values_list('valortotal').filter(pagoliquidacion__isnull=True, rubro__matricula__nivel__periodo__id=periodomaestria.id, rubro__matricula__inscripcion__carrera__id=programamaestria.id, status=True, rubro__status=True, rubro__matricula__inscripcion__persona__cedula=cedula).exclude(factura__valida=False).aggregate(valor=Sum('valortotal'))['valor'], 2)).quantize(Decimal('.01'))
            totalpagado = Decimal(null_to_decimal(Pago.objects.values_list('valortotal').filter(pagoliquidacion__isnull=True, rubro__matricula__nivel__periodo__id=periodomaestria.id, rubro__matricula__inscripcion__carrera__id=programamaestria.id, status=True, rubro__status=True).exclude(factura__valida=False).aggregate(valor=Sum('valortotal'))['valor'], 2)).quantize(Decimal('.01'))
            print("Valor pagado total: ", totalpagado)

            mes_actual = mes = datetime.now().month
            vencido_anterior = 0
            # matricula__retiradomatricula = False
            rubros_anio_anterior = Decimal(null_to_decimal(
                Rubro.objects.filter(matricula__nivel__periodo__id=periodomaestria.id,
                                     matricula__inscripcion__carrera__id=programamaestria.id,
                                      fechavence__year__lt=anio,
                                     status=True

                                     ).aggregate(
                    valor=Sum('valortotal'))['valor'], 2)).quantize(
                Decimal('.01'))

            pagos_anio_anterior = Decimal(null_to_decimal(
                Pago.objects.values_list('valortotal').filter(fecha__year__lt=anio,
                                                              pagoliquidacion__isnull=True,
                                                              rubro__fechavence__year__lt=anio,
                                                              rubro__matricula__nivel__periodo__id=periodomaestria.id,
                                                              rubro__matricula__inscripcion__carrera__id=programamaestria.id,
                                                              status=True, rubro__status=True

                                                              ).exclude(
                    factura__valida=False).aggregate(valor=Sum('valortotal'))['valor'], 2)).quantize(Decimal('.01'))

            vencido_anterior = rubros_anio_anterior - pagos_anio_anterior

            print("Rubros año anterior:", rubros_anio_anterior)
            print("Pagos año anterior:", pagos_anio_anterior)
            print("Vencido año anterior:", vencido_anterior)
            for mes in range(1, mes_actual + 1):
                # matricula__retiradomatricula = False,
                valormes = Decimal(null_to_decimal(
                    Rubro.objects.filter(matricula__nivel__periodo__id=periodomaestria.id,
                                         matricula__inscripcion__carrera__id=programamaestria.id,
                                          fechavence__year=anio, fechavence__month=mes,
                                         status=True

                                         ).aggregate(valor=Sum('valortotal'))['valor'], 2)).quantize(
                    Decimal('.01'))


                pagadomes = Decimal(null_to_decimal(Pago.objects.values_list('valortotal').filter(fecha__year=anio, fecha__month=mes, pagoliquidacion__isnull=True, rubro__matricula__nivel__periodo__id=periodomaestria.id, rubro__matricula__inscripcion__carrera__id=programamaestria.id, status=True, rubro__status=True ).exclude(factura__valida=False).aggregate(valor=Sum('valortotal'))['valor'], 2)).quantize(Decimal('.01'))

                valorcobrarmes = vencido_anterior + valormes
                vencidomes = valorcobrarmes - pagadomes
                print("Cuota Mes ", mes, " = ", valormes)
                print("Valor x Cobrar mes", valorcobrarmes)
                print("Pagado mes ", mes, " = ", pagadomes)
                print("Vencido mes", vencidomes)
                print("% Ejecución", (pagadomes / valorcobrarmes) * 100 if valorcobrarmes > 0 else 0 )

                vencido_anterior = vencidomes



    horafin = datetime.now().time()
    print(horainicio)
    print(horafin)


def evidenciasarticulos():
    try:
        import zipfile
        url = '/media/zipav/articulosevi.zip'
        fantasy_zip = zipfile.ZipFile(SITE_STORAGE + url, 'w')
        direccion = os.path.join(SITE_STORAGE, '../../media', 'zipav')

        # articulos = ArticuloInvestigacion.objects.filter(status=True, aprobado=True, pk=1108).order_by('id')
        articulos = ArticuloInvestigacion.objects.filter(status=True, aprobado=True, fecha_creacion__year=2019).order_by('id')
        for articulo in articulos:
            print("Articulo:")
            print(articulo)
            articulo_id = articulo.id

            nombre = "ARTICULO_" + str(articulo_id).zfill(4)
            print(nombre)

            print("Evidencias")
            for evidencia in articulo.detalleevidencias_set.filter(status=True):
                print(evidencia.evidencia.id)
                print(evidencia.evidencia.nombre)
                print(evidencia.archivo)

                ext = evidencia.archivo.__str__()[evidencia.archivo.__str__().rfind("."):]

                if evidencia.evidencia.id == 1:
                    if os.path.exists(SITE_STORAGE + evidencia.archivo.url):
                        fantasy_zip.write(SITE_STORAGE + evidencia.archivo.url, nombre + '_PUBLICACION' + ext.lower())
                    else:
                        print("No existe el archivo")
                elif evidencia.evidencia.id == 3:
                    if os.path.exists(SITE_STORAGE + evidencia.archivo.url):
                        fantasy_zip.write(SITE_STORAGE + evidencia.archivo.url, nombre + '_CARTAACEPTACION' + ext.lower())
                    else:
                        print("No existe el archivo")


        fantasy_zip.close()
    except Exception as ex:
        print('error: %s' % ex)

def evidenciasponencias():
    try:
        import zipfile
        url = '/media/zipav/ponenciasevi.zip'
        fantasy_zip = zipfile.ZipFile(SITE_STORAGE + url, 'w')
        direccion = os.path.join(SITE_STORAGE, '../../media', 'zipav')

        # articulos = ArticuloInvestigacion.objects.filter(status=True, aprobado=True, pk=1108).order_by('id')
        ponencias = PonenciasInvestigacion.objects.filter(status=True, fecha_creacion__year=2019).order_by('id')
        for ponencia in ponencias:
            print("Ponencia:")
            print(ponencia)
            ponencia_id = ponencia.id

            nombre = "PONENCIA_" + str(ponencia_id).zfill(4)
            print(nombre)

            print("Evidencias")
            for evidencia in ponencia.detalleevidencias_set.filter(status=True):
                print(evidencia.evidencia.id)
                print(evidencia.evidencia.nombre)
                print(evidencia.archivo)

                ext = evidencia.archivo.__str__()[evidencia.archivo.__str__().rfind("."):]

                if evidencia.evidencia.id == 4:
                    if os.path.exists(SITE_STORAGE + evidencia.archivo.url):
                        fantasy_zip.write(SITE_STORAGE + evidencia.archivo.url, nombre + '_CARTAACEPTACION' + ext.lower())
                    else:
                        print("No existe el archivo")

                elif evidencia.evidencia.id == 5:
                    if os.path.exists(SITE_STORAGE + evidencia.archivo.url):
                        fantasy_zip.write(SITE_STORAGE + evidencia.archivo.url, nombre + '_CERTIFICADO' + ext.lower())
                    else:
                        print("No existe el archivo")

                elif evidencia.evidencia.id == 6:
                    if os.path.exists(SITE_STORAGE + evidencia.archivo.url):
                        fantasy_zip.write(SITE_STORAGE + evidencia.archivo.url, nombre + '_CONTENIDO' + ext.lower())
                    else:
                        print("No existe el archivo")


        fantasy_zip.close()
    except Exception as ex:
        print('error: %s' % ex)

def revisarpagosbanco():
    try:
        procesados = 0
        fuentecabecera = easyxf(
        'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
        'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        nombre_origen = '2 OCTUBRE 2020.xlsx'
        nombre_destino = 'REVBANCO0210.xls'

        liborigen = xlrd.open_workbook(output_folder + "/" + nombre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"Id Rubro", 5000),
            (u"Valor Banco", 5000),
            (u"Valor Unemi", 5000),
            (u"Persona", 5000),
            (u"Cédula", 5000),
            (u"Id Rubro Anterior", 5000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)

                valor_banco = float(cols[3]) if type(cols[3]) == str else cols[3]
                rubro = cols[4][-6:]
                nombre = cols[5].strip()
                cedula = cols[32].strip()

                valor_base = Rubro.objects.get(pk=int(rubro)).valortotal

                hojadestino.write(fila, 0, rubro, fuentenormal)
                hojadestino.write(fila, 1, valor_banco, fuentenormal)
                hojadestino.write(fila, 2, valor_base, fuentenormal)
                hojadestino.write(fila, 3, nombre, fuentenormal)
                hojadestino.write(fila, 4, cedula, fuentenormal)
                hojadestino.write(fila, 5, 12345, fuentenormal)

                print("Procesada fila # " + str(fila))

        libdestino.save(output_folder + "/" + nombre_destino)

        print("Proceso terminado...")

    except Exception as ex:
        print('error: %s' % ex)


def asignar_estado_aprobado_ponencias_existentes():
    horainicio = datetime.now()
    ponencias = PonenciasInvestigacion.objects.filter(status=True).order_by('id')
    c = 0
    total = ponencias.count()
    for ponencia in ponencias:
        c += 1
        print("Procesando", c, " de ", total)

        if ponencia.numeroevidenciasponencias() > 0 and ponencia.numeroparticipantesponencia() > 0:
            ponencia.aprobado = True
        else:
            ponencia.aprobado = False

        ponencia.save()

        if c == 376:
            print("Hola")

        # if articulo.aprobado:
        #     basesarticulo = articulo.basesarticuloscategoria()
        #     if basesarticulo:
        #         categoria = basesarticulo[0].baseindexada.categoria.id
        #         articulo.categoria = categoria
        #     else:
        #         articulo.categoria = None
        #
        #     articulo.save()
        #

    print("Proceso finalizado...")
    print("Inicio: ", horainicio)
    print("Fin: ", datetime.now())

def asignar_categoria_revistas():
    horainicio = datetime.now()
    articulos = ArticuloInvestigacion.objects.filter(status=True).order_by('id')
    c = 0
    total = articulos.count()
    for articulo in articulos:
        c += 1
        print("Procesando", c, " de ", total)

        if articulo.numeroevidenciasarticulos() > 0 and articulo.numeroparticipantesarticulo() > 0:
            articulo.aprobado = True
        else:
            articulo.aprobado = False

        articulo.save()

        if c == 376:
            print("Hola")

        if articulo.aprobado:
            basesarticulo = articulo.basesarticuloscategoria()
            if basesarticulo:
                categoria = basesarticulo[0].baseindexada.categoria.id
                articulo.categoria = categoria
            else:
                articulo.categoria = None

            articulo.save()


    print("Proceso finalizado...")
    print("Inicio: ", horainicio)
    print("Fin: ", datetime.now())

def bloquear_moodle_becados_sin_comprobante():
    import time
    cnmoodle = connections['moodle_db'].cursor()

    periodo = Periodo.objects.get(pk=110)
    t = 0
    asignados = BecaAsignacion.objects.filter(status=True,
                                              solicitud__periodo=periodo,
                                              solicitud__becatipo_id__isnull=False,
                                              becacomprobanterevision__isnull=True,
                                              solicitudpagobecadetalle__isnull=False,
                                              solicitudpagobecadetalle__pagado=True,
                                              solicitudpagobecadetalle__acreditado=True
                                              ).order_by(
        'solicitud__inscripcion__persona__apellido1',
        'solicitud__inscripcion__persona__apellido2', 'solicitud__inscripcion__persona__nombres')

    for beca in asignados:
        beneficiario = beca.solicitud.inscripcion.persona
        tipobeca = beca.solicitud.becatipo.nombre
        print(beneficiario, " - User SGA: ", beneficiario.usuario.username ," - Moodle User Id: ", beneficiario.idusermoodle)

        usermoodle = beneficiario.idusermoodle
        # Consulta en mooc_user
        sql = """Select id, username From mooc_user Where id=%s""" % (usermoodle)
        cnmoodle.execute(sql)
        registro = cnmoodle.fetchall()
        idusuario = registro[0][0]
        username = registro[0][1]

        print("====Moodle=====")
        print("IDUser: ",idusuario," - Usuario Moodle:", username)

        # Asignar estado deleted = 1 para que no pueda acceder
        sql = """Update mooc_user Set deleted=1 Where id=%s""" % (idusuario)
        cnmoodle.execute(sql)

        # Envio de correo
        # cuenta = cuenta_email_disponible()
        # tituloemail = "Acceso Bloqueado al Aula Virtual"
        # send_html_mail(tituloemail,
        #                "emails/notificarbloqueoacceso.html",
        #                {'sistema': u'SGA - UNEMI',
        #                 'fecha': datetime.now().date(),
        #                 'hora': datetime.now().time(),
        #                 'saludo': 'Estimada' if beneficiario.sexo.id == 1 else 'Estimado',
        #                 'estudiante': beneficiario,
        #                 'tipobeca': tipobeca,
        #                 'periodo': periodo.nombre,
        #                 'categoria': '',
        #                 'origen': '',
        #                 't': miinstitucion()
        #                 },
        #                beneficiario.lista_emails_envio(),
        #                [],
        #                cuenta=CUENTAS_CORREOS[cuenta][1]
        #                )
        # # Temporizador para evitar que se bloquee el servicion de gmail
        # time.sleep(5)

        t += 1

    cnmoodle.close()
    print("Total registros:", t)

def desbloqueosgamoodle():
    try:
        procesados = existe = noexiste = bloqueados = nobloqueados = 0
        desbloqueados_av = totalfalse = 0
        periodo = Periodo.objects.get(pk=110)
        fuentecabecera = easyxf(
        'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
        'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        nombre_origen = 'AYUDAS NO ACREDITADAS 08 DE DICIEMBRE DEL 2020.xlsx'
        # nombre_destino = 'REVBANCO0210.xls'

        liborigen = xlrd.open_workbook(output_folder + "/" + nombre_origen)

        # libdestino = xlwt.Workbook()
        # hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        # columnas = [
        #     (u"Id Rubro", 5000),
        #     (u"Valor Banco", 5000),
        #     (u"Valor Unemi", 5000),
        #     (u"Persona", 5000),
        #     (u"Cédula", 5000),
        #     (u"Id Rubro Anterior", 5000)
        # ]

        # for col_num in range(len(columnas)):
        #     hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
        #     hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        cnmoodle = connections['moodle_db'].cursor()

        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)

                cedula = cols[0].strip()

                print("Cédula:", cedula)


                beca = BecaAsignacion.objects.get(status=True,
                                              solicitud__periodo=periodo,
                                              solicitud__becatipo_id__isnull=False,
                                              solicitud__inscripcion__persona__cedula=cedula,
                                              solicitudpagobecadetalle__isnull=False,
                                              solicitudpagobecadetalle__pagado=True
                                              )
                # if beca:
                #     print("Si existe beca")
                #     existe += 1
                # else:
                #     print("No existe beca")
                #     noexiste += 1

                print(beca.solicitud.inscripcion.persona)

                existe += 1

                pago = SolicitudPagoBecaDetalle.objects.get(asignacion=beca)
                print("Pagado: ", pago.pagado)
                print("Acreditado: ", pago.acreditado)

                if pago.acreditado:
                    pago.acreditado = False
                    pago.fechaacredita = None
                    pago.personaacredita = None
                    pago.notificadoacredita = False
                    # pago.save()

                    desbloqueados_av += 1
                    totalfalse += 1

                if BecaSolicitudRecorrido.objects.filter(solicitud=beca.solicitud, estado=30).exists():
                    # BecaSolicitudRecorrido.objects.filter(solicitud=beca.solicitud, estado=30).update(status=False)
                    print("Recorrido actualizado...")

                idum = beca.solicitud.inscripcion.persona.idusermoodle

                # Consulta en mooc_user
                sql = """Select id From mooc_user Where id=%s and deleted = 1 """ % (idum)
                cnmoodle.execute(sql)
                row = cnmoodle.fetchone()
                if row is not None:
                    # Asignar estado deleted = 0 para que pueda acceder
                    sql = """Update mooc_user Set deleted=0 Where id=%s""" % (idum)
                    # cnmoodle.execute(sql)
                    bloqueados += 1
                else:
                    nobloqueados += 1


                print("Procesada fila # " + str(fila))

        # libdestino.save(output_folder + "/" + nombre_destino)
        cnmoodle.close()
        print("Proceso terminado...")
        print("Existen: ", existe)
        print("NO Existen: ", noexiste)
        print("Bloqueados:", bloqueados)
        print("No Bloqueados:", nobloqueados)
        print("Total con estado acreditado actualizado a False:", totalfalse)
        print("Total desbloqueado aula virtual:", desbloqueados_av)

    except Exception as ex:
        print('error: %s' % ex)

def verificar_listado_A1():
    try:
        procesados = existe = noexiste = bloqueados = nobloqueados = 0
        desbloqueados_av = totalfalse = 0
        periodo = Periodo.objects.get(pk=110)
        fuentecabecera = easyxf(
        'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
        'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        nombre_origen = 'AYUDA ECONOMICA ARCHIV 09-12-2020 A1.xlsx'
        # nombre_destino = 'REVBANCO0210.xls'

        liborigen = xlrd.open_workbook(output_folder + "/" + nombre_origen)

        # libdestino = xlwt.Workbook()
        # hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        # columnas = [
        #     (u"Id Rubro", 5000),
        #     (u"Valor Banco", 5000),
        #     (u"Valor Unemi", 5000),
        #     (u"Persona", 5000),
        #     (u"Cédula", 5000),
        #     (u"Id Rubro Anterior", 5000)
        # ]

        # for col_num in range(len(columnas)):
        #     hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
        #     hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        cnmoodle = connections['moodle_db'].cursor()

        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)

                cedula = cols[0].strip()

                print("Cédula:", cedula)


                beca = BecaAsignacion.objects.get(status=True,
                                              solicitud__periodo=periodo,
                                              solicitud__becatipo_id__isnull=False,
                                              solicitud__inscripcion__persona__cedula=cedula,
                                              solicitudpagobecadetalle__isnull=False,
                                              solicitudpagobecadetalle__pagado=True,
                                              solicitudpagobecadetalle__acreditado=True


                                              )
                # if beca:
                #     print("Si existe beca")
                #     existe += 1
                # else:
                #     print("No existe beca")
                #     noexiste += 1

                print(beca.solicitud.inscripcion.persona)

                existe += 1

                pago = SolicitudPagoBecaDetalle.objects.get(asignacion=beca)
                print("Pagado: ", pago.pagado)
                print("Acreditado: ", pago.acreditado)

                # if pago.acreditado:
                #     pago.acreditado = False
                #     pago.fechaacredita = None
                #     pago.personaacredita = None
                #     pago.notificadoacredita = False
                #     pago.save()
                #
                #     desbloqueados_av += 1
                #     totalfalse += 1
                #
                # if BecaSolicitudRecorrido.objects.filter(solicitud=beca.solicitud, estado=30).exists():
                #     BecaSolicitudRecorrido.objects.filter(solicitud=beca.solicitud, estado=30).update(status=False)
                #     print("Recorrido actualizado...")

                idum = beca.solicitud.inscripcion.persona.idusermoodle

                # Consulta en mooc_user
                sql = """Select id From mooc_user Where id=%s and deleted = 1 """ % (idum)
                cnmoodle.execute(sql)
                row = cnmoodle.fetchone()
                if row is not None:
                    # Asignar estado deleted = 0 para que pueda acceder
                    sql = """Update mooc_user Set deleted=0 Where id=%s""" % (idum)
                    # cnmoodle.execute(sql)
                    bloqueados += 1
                else:
                    nobloqueados += 1


                print("Procesada fila # " + str(fila))

        # libdestino.save(output_folder + "/" + nombre_destino)
        cnmoodle.close()
        print("Proceso terminado...")
        print("Existen: ", existe)
        print("NO Existen: ", noexiste)
        print("Bloqueados:", bloqueados)
        print("No Bloqueados:", nobloqueados)
        print("Total con estado acreditado actualizado a False:", totalfalse)
        print("Total desbloqueado aula virtual:", desbloqueados_av)

    except Exception as ex:
        print('error: %s' % ex)


def verifica_carreras():
    try:
        procesados = existe = noexiste = bloqueados = nobloqueados = 0
        desbloqueados_av = totalfalse = 0
        periodo = Periodo.objects.get(pk=110)
        fuentecabecera = easyxf(
        'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
        'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        nombre_origen = 'LISTADOADMISION151PERSONAS.xlsx'
        # nombre_destino = 'REVBANCO0210.xls'

        liborigen = xlrd.open_workbook(output_folder + "/" + nombre_origen)

        # libdestino = xlwt.Workbook()
        # hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        # columnas = [
        #     (u"Id Rubro", 5000),
        #     (u"Valor Banco", 5000),
        #     (u"Valor Unemi", 5000),
        #     (u"Persona", 5000),
        #     (u"Cédula", 5000),
        #     (u"Id Rubro Anterior", 5000)
        # ]

        # for col_num in range(len(columnas)):
        #     hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
        #     hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)


        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)

                carrera = cols[6].strip()

                if Carrera.objects.filter(pk=carrera).exists():
                    print("Existe")
                    existe += 1
                else:
                    print("No existe")
                    noexiste += 1



                fila += 1
                print("Procesada fila # " + str(fila))

        # libdestino.save(output_folder + "/" + nombre_destino)
        print("Proceso terminado...")
        print("Existen:", existe)
        print("NO Existen:", noexiste)

    except Exception as ex:
        print('error: %s' % ex)

def verifica_recaudaciones_banco():
    try:
        procesados = rubrospagados = rubrospendientes = noexiste = relacionados = 0
        confactura = sinfactura = noautorizada = 0
        cfactura = 0
        crecibo = 0
        sdocumento = 0
        sumafactura = sumasaldo = totalpagado = totalpendiente = totalrubropendiente = sumarubrospagados = diferenciarubros = Decimal(0)
        fuentecabecera = easyxf(
        'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
        'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentefecha = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz center',
            num_format_str='dd/mm/yyyy')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        nombre_origen = 'BP-11012021.xlsx'
        nombre_destino = 'RESP-11012021.xls'

        liborigen = xlrd.open_workbook(output_folder + "/" + nombre_origen)

        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"Estado", 5000),
            (u"Moneda", 5000),
            (u"Forma", 5000),
            (u"Valor", 5000),
            (u"cod.tercero", 5000),
            (u"Nom.Terc", 5000),
            (u"Fecha mov", 5000),
            (u"Empresa", 5000),
            (u"Tipo mov", 5000),
            (u"Pais", 5000),
            (u"Banco", 5000),
            (u"Tipo Cta", 5000),
            (u"Num Cta", 5000),
            (u"Fch. Ini Pago", 5000),
            (u"Localidad", 5000),
            (u"Agencia", 5000),
            (u"Referencia", 5000),
            (u"Ord.Emp", 5000),
            (u"Ord.Banco", 5000),
            (u"No.Mov", 5000),
            (u"Estado", 5000),
            (u"Servicio", 5000),
            (u"Tip. Proceso", 5000),
            (u"Nusist", 5000),
            (u"Nu.Ord.Proc", 5000),
            (u"Num.Int.Deb", 5000),
            (u"Param.Eje", 5000),
            (u"Valor Pend", 5000),
            (u"Pag.Parc", 5000),
            (u"Cod Est", 5000),
            (u"Cod.Frmpag", 5000),
            (u"Cod.Tipo", 5000),
            (u"Nuc Adquirente", 5000),
            (u"Fecha Vcto", 5000),
            (u"Rubro1", 5000),
            (u"Rubro2", 5000),
            (u"Rubro3", 5000),
            (u"Rubro4", 5000),
            (u"Rubro5", 5000),
            (u"Rubro6", 5000),
            (u"Rubro7", 5000),
            (u"Rubro8", 5000),
            (u"Rubro9", 5000),
            (u"Rubro10", 5000),
            (u"Rubro11", 5000),
            (u"Rubro12", 5000),
            (u"Canal", 5000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        fila2 = 1
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)

                estado = cols[0].strip()
                moneda = cols[1].strip()
                forma = cols[2].strip()


                rubro = cols[4][6:].strip()
                valor = Decimal(cols[3]).quantize(Decimal('.01'))

                codtercero = cols[4].strip()
                nombtercero = cols[5].strip()
                fechamov = cols[6]
                empresa = cols[7].strip()
                tipomov = cols[8].strip()

                pais = cols[9].strip()
                banco = cols[10].strip()
                tipocuenta = cols[11].strip()

                numcuenta = cols[12]
                finipago = cols[13]

                localidad = cols[14].strip()
                agencia = cols[15]

                referencia = cols[16].strip()
                ordemp = cols[17]
                ordbanco = cols[18]
                nomov = cols[19]

                estado2 = cols[20]
                servicio = cols[21].strip()
                tipoproceso = cols[22].strip()
                nusist = cols[23]


                NuOrdProc = cols[24]
                NumIntDeb = cols[25]
                ParamEje = cols[26]
                ValorPend = cols[27]
                PagParc = cols[28]
                CodEst = cols[29].strip()
                CodFrmpag = cols[30].strip()
                CodTipo = cols[31]
                NucAdquirente = cols[32].strip()
                FechaVcto = cols[33]
                rubro1a12 = 0
                Canal = cols[46].strip()

                if Rubro.objects.filter(pk=int(rubro)).exists():
                    if Rubro.objects.filter(pk=int(rubro), cancelado=True).exists():
                        rubrospagados += 1
                        totalpagado += valor

                        r = Rubro.objects.get(pk=int(rubro))
                        sumarubrospagados += r.valortotal


                        if Rubro.objects.filter(relacionados=r, cancelado=True).exists():
                            for rr in Rubro.objects.filter(relacionados=r, cancelado=True):
                                print("Relacion ID", rr.id, "  - $", rr.valortotal)
                                sumarubrospagados += rr.valortotal
                                sumasaldo += rr.saldo

                        else:
                            # OJO PARECE EN BANCO HAN PAGADO DEMAS
                            if r.valortotal < valor:
                                print("Diferentes ", rubro, "Banco:", valor, " Valor rubro:", r.valortotal)
                                diferenciarubros += r.valortotal

                                hojadestino.write(fila2, 0, estado, fuentenormal)
                                hojadestino.write(fila2, 1, moneda, fuentenormal)
                                hojadestino.write(fila2, 2, forma, fuentenormal)
                                hojadestino.write(fila2, 3, valor, fuentenormal)
                                hojadestino.write(fila2, 4, codtercero, fuentenormal)
                                hojadestino.write(fila2, 5, nombtercero, fuentenormal)
                                hojadestino.write(fila2, 6, fechamov, fuentefecha)
                                hojadestino.write(fila2, 7, empresa, fuentenormal)
                                hojadestino.write(fila2, 8, tipomov, fuentenormal)
                                hojadestino.write(fila2, 9, pais, fuentenormal)
                                hojadestino.write(fila2, 10, banco, fuentenormal)
                                hojadestino.write(fila2, 11, tipocuenta, fuentenormal)
                                hojadestino.write(fila2, 12, numcuenta, fuentenormal)
                                hojadestino.write(fila2, 13, finipago, fuentefecha)
                                hojadestino.write(fila2, 14, localidad, fuentenormal)
                                hojadestino.write(fila2, 15, agencia, fuentenormal)
                                hojadestino.write(fila2, 16, referencia, fuentenormal)
                                hojadestino.write(fila2, 17, ordemp, fuentenormal)
                                hojadestino.write(fila2, 18, ordbanco, fuentenormal)
                                hojadestino.write(fila2, 19, nomov, fuentenormal)
                                hojadestino.write(fila2, 20, estado2, fuentenormal)
                                hojadestino.write(fila2, 21, servicio, fuentenormal)
                                hojadestino.write(fila2, 22, tipoproceso, fuentenormal)
                                hojadestino.write(fila2, 23, nusist, fuentenormal)
                                hojadestino.write(fila2, 24, NuOrdProc, fuentenormal)
                                hojadestino.write(fila2, 25, NumIntDeb, fuentenormal)
                                hojadestino.write(fila2, 26, ParamEje, fuentenormal)
                                hojadestino.write(fila2, 27, ValorPend, fuentenormal)
                                hojadestino.write(fila2, 28, PagParc, fuentenormal)
                                hojadestino.write(fila2, 29, CodEst, fuentenormal)
                                hojadestino.write(fila2, 30, CodFrmpag, fuentenormal)
                                hojadestino.write(fila2, 31, CodTipo, fuentenormal)
                                hojadestino.write(fila2, 32, NucAdquirente, fuentenormal)
                                hojadestino.write(fila2, 33, FechaVcto, fuentefecha)
                                hojadestino.write(fila2, 34, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 35, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 36, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 37, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 38, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 39, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 40, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 41, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 42, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 43, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 44, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 45, rubro1a12, fuentenormal)
                                hojadestino.write(fila2, 46, Canal, fuentenormal)
                                hojadestino.write(fila2, 47, fila, fuentenormal)
                                hojadestino.write(fila2, 48, r.valortotal, fuentenormal)
                                fila2 += 1

                        # for rm in Rubro.objects.filter(cancelado=False, persona=r.persona, tipo__in=[2923,2924]):
                        #     print("Rubro pendiente:", rm.id)
                        #     totalrubropendiente += rm.valortotal

                        if r.tiene_factura():
                            # print(r.id,r.factura())
                            factura = Factura.objects.get(pk=r.factura())
                            sumafactura += factura.total
                            cfactura += 1
                            print(factura.numero)
                        else:
                            print("Rubro sin factura:", r.id)
                            sdocumento += 1

                    else:
                        rubrospendientes += 1
                        totalpendiente += valor

                        print("Rubro pendiente:", codtercero)
                        hojadestino.write(fila2, 0, estado, fuentenormal)
                        hojadestino.write(fila2, 1, moneda, fuentenormal)
                        hojadestino.write(fila2, 2, forma, fuentenormal)
                        hojadestino.write(fila2, 3, valor, fuentenormal)
                        hojadestino.write(fila2, 4, codtercero, fuentenormal)
                        hojadestino.write(fila2, 5, nombtercero, fuentenormal)
                        hojadestino.write(fila2, 6, fechamov, fuentefecha)
                        hojadestino.write(fila2, 7, empresa, fuentenormal)
                        hojadestino.write(fila2, 8, tipomov, fuentenormal)
                        hojadestino.write(fila2, 9, pais, fuentenormal)
                        hojadestino.write(fila2, 10, banco, fuentenormal)
                        hojadestino.write(fila2, 11, tipocuenta, fuentenormal)
                        hojadestino.write(fila2, 12, numcuenta, fuentenormal)
                        hojadestino.write(fila2, 13, finipago, fuentefecha)
                        hojadestino.write(fila2, 14, localidad, fuentenormal)
                        hojadestino.write(fila2, 15, agencia, fuentenormal)
                        hojadestino.write(fila2, 16, referencia, fuentenormal)
                        hojadestino.write(fila2, 17, ordemp, fuentenormal)
                        hojadestino.write(fila2, 18, ordbanco, fuentenormal)
                        hojadestino.write(fila2, 19, nomov, fuentenormal)
                        hojadestino.write(fila2, 20, estado2, fuentenormal)
                        hojadestino.write(fila2, 21, servicio, fuentenormal)
                        hojadestino.write(fila2, 22, tipoproceso, fuentenormal)
                        hojadestino.write(fila2, 23, nusist, fuentenormal)
                        hojadestino.write(fila2, 24, NuOrdProc, fuentenormal)
                        hojadestino.write(fila2, 25, NumIntDeb, fuentenormal)
                        hojadestino.write(fila2, 26, ParamEje, fuentenormal)
                        hojadestino.write(fila2, 27, ValorPend, fuentenormal)
                        hojadestino.write(fila2, 28, PagParc, fuentenormal)
                        hojadestino.write(fila2, 29, CodEst, fuentenormal)
                        hojadestino.write(fila2, 30, CodFrmpag, fuentenormal)
                        hojadestino.write(fila2, 31, CodTipo, fuentenormal)
                        hojadestino.write(fila2, 32, NucAdquirente, fuentenormal)
                        hojadestino.write(fila2, 33, FechaVcto, fuentefecha)
                        hojadestino.write(fila2, 34, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 35, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 36, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 37, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 38, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 39, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 40, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 41, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 42, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 43, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 44, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 45, rubro1a12, fuentenormal)
                        hojadestino.write(fila2, 46, Canal, fuentenormal)
                        hojadestino.write(fila2, 47, fila, fuentenormal)
                        fila2 += 1
                else:
                    noexiste += 1
                    print("No existe ", rubro, " - Valor ", valor)


                fila += 1
                # print("Procesada fila # " + str(fila))

        libdestino.save(output_folder + "/" + nombre_destino)

        print("Proceso terminado...")
        print("Rubros no existentes:", noexiste)
        print("Rubros pagados:", rubrospagados, " ------ Total $: ", totalpagado)
        print("Rubros pendientes:", rubrospendientes, " ------ Total $: ", totalpendiente)
        print("Suma Rubros pagados:", sumarubrospagados)
        print("Total Diferencia Rubros:", diferenciarubros)

        print("Total con factura:", cfactura)
        print("Total con recibo:", crecibo)
        print("Total sin documento:", sdocumento)
        print("Total saldo pendiente:", sumasaldo)
        print("Suma Facturas:", sumafactura)
    except Exception as ex:
        print(fila)
        print('error: %s' % ex)

def crear_listado_pagos_18122020():
    try:
        procesados = rubrospagados = rubrospendientes = noexiste = 0
        totalpagado = totalpendiente = Decimal(0)
        fuentecabecera = easyxf(
        'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
        'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentefecha = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz center',
            num_format_str='dd/mm/yyyy')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        nombre_origen = 'SUBIR18122020.xls'
        nombre_destino = 'LISTADOPAGADOS18122020.xls'

        liborigen = xlrd.open_workbook(output_folder + "/" + nombre_origen)

        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"CÉDULA", 5000),
            (u"ESTUDIANTE", 10000),
            (u"E-MAIL UNEMI", 8000),
            (u"E-MAIL PERSONAL", 8000),
            (u"CELULAR", 5000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        sheet = liborigen.sheet_by_index(0)

        fila2 = 1
        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)

                cedula = cols[32].strip()
                persona = Persona.objects.get(cedula=cedula)

                hojadestino.write(fila, 0, cedula, fuentenormal)
                hojadestino.write(fila, 1, persona.nombre_completo_inverso(), fuentenormal)
                hojadestino.write(fila, 2, persona.emailinst, fuentenormal)
                hojadestino.write(fila, 3, persona.email, fuentenormal)
                hojadestino.write(fila, 4, persona.telefono if persona.telefono else '', fuentenormal)

                fila += 1
                print("Procesada fila # " + str(fila))

        libdestino.save(output_folder + "/" + nombre_destino)

        print("Proceso terminado...")

    except Exception as ex:
        print('error: %s' % ex)

def solicitud_beca_inscripcion_revision():
    try:
        procesados = 0
        fuentecabecera = easyxf(
        'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
        'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentefecha = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz center',
            num_format_str='dd/mm/yyyy')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        # nombre_origen = 'SUBIR18122020.xls'
        nombre_destino = 'SOLICITUDES.xls'

        # liborigen = xlrd.open_workbook(output_folder + "/" + nombre_origen)

        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"CÉDULA", 5000),
            (u"ESTUDIANTE", 10000),
            (u"ID SOLICITUD BECA", 5000),
            (u"ID INSCRIPCION BECA", 5000),
            (u"CARRERA BECA", 5000),
            (u"PERIODO BECA", 5000),
            (u"INSCRIPCIONES ACTIVAS", 5000),
            (u"ID INSCRIPCION ACTIVA", 5000),
            (u"CARRERA ACTIVA", 5000),
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        # sheet = liborigen.sheet_by_index(0)
        # solicitudes = BecaSolicitud.objects.filter(status=True, inscripcion__persona__cedula__in=['0302524996', '0302524996','0927317081','0924019433','0940814643']).order_by('inscripcion__persona__apellido1', 'inscripcion__persona__apellido2', 'inscripcion__persona__nombres', 'id')
        solicitudes = BecaSolicitud.objects.filter(status=True).order_by('inscripcion__persona__apellido1', 'inscripcion__persona__apellido2', 'inscripcion__persona__nombres', 'id')
        totalsoli = solicitudes.count()
        fila = 1
        for solicitud in solicitudes:
            hojadestino.write(fila, 0, solicitud.inscripcion.persona.cedula, fuentenormal)
            hojadestino.write(fila, 1, solicitud.inscripcion.persona.nombre_completo_inverso(), fuentenormal)
            hojadestino.write(fila, 2, solicitud.id, fuentenormal)
            hojadestino.write(fila, 3, solicitud.inscripcion.id, fuentenormal)
            hojadestino.write(fila, 4, solicitud.inscripcion.carrera.nombre, fuentenormal)
            hojadestino.write(fila, 5, solicitud.periodo.nombre, fuentenormal)


            inscripciones = Inscripcion.objects.filter(coordinacion_id__lte=5,
                                                      status=True,
                                                      persona=solicitud.inscripcion.persona,
                                                      perfilusuario__visible=True,
                                                      perfilusuario__status=True
                                                      ).order_by('-id')
            totalins = inscripciones.count()
            hojadestino.write(fila, 6, totalins, fuentenormal)

            # inscripcion2 = inscripciones[0]

            mcol = 7
            for inscripcion2 in inscripciones:
                if not inscripcion2.retiro_carrera():
                    hojadestino.write(fila, mcol, inscripcion2.id, fuentenormal)
                    mcol += 1
                    hojadestino.write(fila, mcol, inscripcion2.carrera.nombre, fuentenormal)
                    mcol += 1

            print("Procesada fila # ", str(fila), " de ", totalsoli)

            fila += 1

        libdestino.save(output_folder + "/" + nombre_destino)

        print("Proceso terminado...")

    except Exception as ex:
        print('error: %s' % ex)

def crear_cliente_factura_recibo_caja():
    try:
        recibos = PagoReciboCaja.objects.filter(status=True).order_by('id')
        total = recibos.count()
        c = 1
        creados = 0
        for recibo in recibos:
            print("Procesando ", c, " de ", total)
            print("Recibo de caja", recibo.id)

            persona = recibo.persona

            if persona.clientefactura_set.values("id").exists():
                clientefactura = persona.clientefactura_set.all()[0]
                if not clientefactura.email:
                    clientefactura.email = persona.email if persona.email else persona.emailinst
                    clientefactura.save()
                    print("Actualizado...")
            else:
                if persona.cedula:
                    tipoidentificacion = 1
                    identificacion = persona.cedula
                elif persona.ruc:
                    tipoidentificacion = 2
                    identificacion = persona.ruc
                else:
                    tipoidentificacion = 3
                    identificacion = persona.pasaporte
                clientefactura = persona.clientefactura_set.create(identificacion=identificacion,
                                                                tipo=tipoidentificacion,
                                                                nombre=persona.nombre_completo(),
                                                                direccion=persona.direccion_corta(),
                                                                telefono=persona.telefono,
                                                                email=persona.email)
                clientefactura.save()
                creados += 1
                print("Creado...")


            c += 1

        print("Proceso finalizado")
        print("Clientes creados: ", creados)
    except Exception as ex:
        print('error: %s' % ex)

def crear_formas_pago_recibos_49():
    try:
        procesados = 1
        fuentecabecera = easyxf(
        'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
        'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        fuentefecha = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz center',
            num_format_str='dd/mm/yyyy')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        nombre_origen = 'RECIBOSCOMPLETAR.xlsx'

        liborigen = xlrd.open_workbook(output_folder + "/" + nombre_origen)

        sheet = liborigen.sheet_by_index(0)

        for fila in range(sheet.nrows):
            if fila >= 1:
                cols = sheet.row_values(fila)

                print("Procesando Recibo # ", procesados)
                codigo = cols[0].strip()[14:]
                formapago = cols[5].strip()
                fechacobro = xlrd.xldate.xldate_as_datetime(cols[6], liborigen.datemode).date()
                tipotransferencia = cols[7].strip()

                if tipotransferencia == '':
                    idtipotransf = None
                elif tipotransferencia == 'TRANSFERENCIA PROPIO BANCO':
                    idtipotransf = 1
                elif tipotransferencia == 'TRANSFERENCIA OTRO BANCO NACIONAL':
                    idtipotransf = 2
                else:
                    idtipotransf = 3

                referencia = cols[8].strip()
                cuenta = CuentaBanco.objects.get(pk=5)
                valor = cols[10]

                recibo = PagoReciboCaja.objects.get(numero=codigo)

                # Creando registro de forma de pago
                formapago = PagoTransferenciaDeposito(deposito=True if formapago == 'DEPOSITO' else False,
                                                      tipotransferencia_id=idtipotransf,
                                                      cuentabanco=cuenta,
                                                      mismobanco=False,
                                                      exterior=False,
                                                      fecha=fechacobro,
                                                      referencia=referencia,
                                                      valor=valor,
                                                      recaudacionventanilla=False)
                formapago.save()
                print("Forma de pago guardada")

                for p in recibo.pagos.all():
                    p.fecha = fechacobro
                    p.save()

                    formapago.pagos.add(p)
                    print("Agregando los pagos")

                procesados += 1
                print("Procesada fila # " + str(fila))
                fila += 1

        print("Proceso terminado...")

    except Exception as ex:
        print('error: %s' % ex)


@transaction.atomic()
def anular_recibos_caja_pagos():
    try:
        recibos = [476, 493]
        observacion = "ANULADO DEBIDO A PAGO REGISTRADO POR ERROR"
        for recibo in recibos:
            recibocajapago = PagoReciboCaja.objects.get(numero=recibo)
            print("==========Recibo de Caja=============")
            print(recibocajapago)

            for pago in recibocajapago.pagos.all():
                print(pago.rubro)
                print(pago.valortotal)
                print(pago.rubro.saldo)

                # Actualizo saldos del rubro
                rubro = Rubro.objects.get(pk=pago.rubro.id)
                rubro.saldo = rubro.saldo + pago.valortotal
                rubro.cancelado = False
                rubro.save()

                # Elimino el pago
                pago.status = False
                pago.save()

            recibocajapago.observacion = observacion
            recibocajapago.anulado = True
            recibocajapago.save()


    except Exception as ex:
        transaction.set_rollback(True)
        msg = ex.__str__()
        print(msg)

def envio_correo_posgrado():
    import time
    solicitud = SolicitudRefinanciamientoPosgrado.objects.get(pk=1)
    persona = solicitud.persona
    # Envio de e-mail de notificacion al solicitante
    # listacuentascorreo = [23, 24, 25, 26, 27]
    listacuentascorreo = [18]
    fechaenvio = datetime.now().date()
    horaenvio = datetime.now().time()
    cuenta = cuenta_email_disponible_para_envio(listacuentascorreo)

    print("Cuenta para envio: ", CUENTAS_CORREOS[cuenta][1])

    tituloemail = "Registro de Solicitud de Refinanciamiento de Deuda de Programas de Posgrado"
    send_html_mail(tituloemail,
                   "emails/notificacion_solicitud_refinanciamiento_posgrado.html",
                   {'sistema': u'Posgrado UNEMI',
                    'fecha': fechaenvio,
                    'hora': horaenvio,
                    'saludo': 'Estimada' if persona.sexo_id == 1 else 'Estimado',
                    'estudiante': persona.nombre_completo_inverso(),
                    'numero': solicitud.id,
                    'destino': 'ESTUDIANTE',
                    't': miinstitucion()
                    },
                   # persona.lista_emails_envio(),
                   ['isaltosm@unemi.edu.ec'],
                   [],
                   cuenta=CUENTAS_CORREOS[cuenta][1]
                   )

    # Temporizador para evitar que se bloquee el servicio de gmail
    time.sleep(5)

    # Envío de e-mail de notificación a Posgrado
    lista_email_posgrado = []

    # lista_email_posgrado.append('dmaciasv@unemi.edu.ec')
    # lista_email_posgrado.append('smendietac@unemi.edu.ec')

    lista_email_posgrado.append('ivan_saltos_medina@hotmail.com')
    lista_email_posgrado.append('ivan.saltos.medina@gmail.com')

    cuenta = cuenta_email_disponible_para_envio(listacuentascorreo)
    tituloemail = "Registro de Solicitud de Refinanciamiento de Deuda de Programas de Posgrado"

    send_html_mail(tituloemail,
                   "emails/notificacion_solicitud_refinanciamiento_posgrado.html",
                   {'sistema': u'Posgrado UNEMI',
                    'fecha': fechaenvio,
                    'hora': horaenvio,
                    'saludo': 'Estimados',
                    'estudiante': persona.nombre_completo_inverso(),
                    'numero': solicitud.id,
                    'destino': 'POSGRADO',
                    't': miinstitucion()
                    },
                   lista_email_posgrado,
                   [],
                   cuenta=CUENTAS_CORREOS[cuenta][1]
                   )
    # Temporizador para evitar que se bloquee el servicio de gmail
    time.sleep(5)

    print("Correo enviado...")

def verifica_unemi_epunemi_posgrado():
    try:
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        fuentefecha = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin; alignment: horiz center',
            num_format_str='dd/mm/yyyy')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'arreglos'))

        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet("Listado")

        fil = 0

        columnas = [
            (u"Programa", 5000),
            (u"Cohorte", 5000),
            (u"Cédula", 5000),
            (u"Alumno", 5000),
            (u"ID RUBRO UNEMI", 5000),
            (u"VALOR RUBRO UNEMI", 5000),
            (u"SALDO RUBRO UNEMI", 5000),
            (u"ID RUBRO EPUNEMI", 5000),
            (u"ID RUBRO UNEMI", 5000),
            (u"VALOR RUBRO UNEMI", 5000),
            (u"SALDO RUBRO UNEMI", 5000),
            (u"ID PAGO UNEMI", 5000),
            (u"FECHA PAGO", 5000),
            (u"VALOR PAGO", 5000),
            (u"EPUNEMI PAGO", 5000),
            (u"ID PAGO EPUNEMI", 5000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        # Consulto los estudiantes de maestria que tienen mas de 2 cuotas vencidas
        cnmoodle = connections['epunemi'].cursor()

        # matriculas = Matricula.objects.filter(nivel__periodo__tipo=3).distinct().order_by('nivel__periodo_id', 'inscripcion__carrera__nombre', 'inscripcion__persona__apellido1', 'inscripcion__persona__apellido2', 'inscripcion__persona__nombres')
        matriculas = Matricula.objects.filter(nivel__periodo__tipo=3, inscripcion__persona__cedula='0941141178').distinct().order_by('nivel__periodo_id', 'inscripcion__carrera__nombre', 'inscripcion__persona__apellido1', 'inscripcion__persona__apellido2', 'inscripcion__persona__nombres')
        total = matriculas.count()
        c = 1
        totalvencidos = 0
        totalsaldodiferente = 0
        totalnoexisten = 0

        fila = 1

        for matricula in matriculas:
            cuotasvencidas = matricula.numero_cuotas_vencidas()
            if cuotasvencidas >= 3 or (cuotasvencidas == 1 and matricula.retiradomatricula):
                print("Revisando ", c, " de ", total)
                print(matricula.inscripcion.carrera, " - ", matricula.inscripcion.persona, " - ", matricula.inscripcion.persona.identificacion())
                valorpagado = matricula.total_pagado_alumno()

                if not matricula.retiradomatricula:
                    valorgenerado = matricula.total_generado_alumno()
                    valorvencido = matricula.vencido_a_la_fechamatricula()
                    valorpendiente = matricula.total_saldo_rubrosinanular()
                else:
                    valorgenerado = matricula.total_generado_alumno_retirado()
                    valorvencido = matricula.total_saldo_alumno_retirado()
                    valorpendiente = valorvencido
                totalvencidos += 1
                print("Total Rubros $: " , valorgenerado, " - Total Pendiente $: ", valorpendiente, " - Total Vencido $: ", valorvencido)

                # Consulto los rubros de maestría ligados a la matrícula del maestrante
                rubros = Rubro.objects.filter(status=True, matricula=matricula, cancelado=False).order_by('fechavence')
                sumasaldoepunemi = 0

                lista_rubros = []

                for rubro in rubros:
                    idrubrounemi = rubro.id
                    print(idrubrounemi)
                    sql = """SELECT ru.id,ru.saldo, ru.valor FROM sagest_rubro AS ru WHERE ru.idrubrounemi=%s AND status=true;""" % (idrubrounemi)
                    cnmoodle.execute(sql)
                    registro = cnmoodle.fetchone()
                    # idusuario = registro[0][0]
                    if registro is not None:
                        idrubroepunemi = registro[0]
                        pendienteepunemi = registro[1]
                        valorepunemi = registro[2]
                        sumasaldoepunemi += pendienteepunemi
                        lista_rubros.append([matricula.inscripcion.carrera.nombre, matricula.nivel.periodo.nombre, matricula.inscripcion.persona.identificacion(), matricula.inscripcion.persona.nombre_completo(), rubro.id, rubro.valor, rubro.saldo, idrubroepunemi, rubro.id, valorepunemi, pendienteepunemi, '', '', '', '', ''])

                        if rubro.saldo < 0:
                            pagos = Pago.objects.filter(pagoliquidacion__isnull=True, rubro=rubro, status=True, rubro__status=True).exclude(factura__valida=False)
                            if pagos:
                                for pago in pagos:
                                    lista_rubros.append(['', '', '', '', '', '', '', '', '', '', '', pago.id, pago.fecha, pago.valortotal, pago.epunemipago, pago.idpagoepunemi])

                    else:
                        pendienteepunemi = 0
                        sumasaldoepunemi += pendienteepunemi
                        totalnoexisten += 1
                        lista_rubros.append([matricula.inscripcion.carrera.nombre, matricula.nivel.periodo.nombre, matricula.inscripcion.persona.identificacion(), matricula.inscripcion.persona.nombre_completo(), rubro.id, rubro.valor, rubro.saldo, 0, 0, 0, 0, '', '', '', '', ''])

                valorpendiente = null_to_decimal(valorpendiente, 2)
                sumasaldoepunemi = null_to_decimal(sumasaldoepunemi, 2)

                if valorpendiente != sumasaldoepunemi:
                    print("DIFERENCIA DE SALDOS: UNEMI $ ", valorpendiente, " - EPUNEMI $ ", sumasaldoepunemi)
                    totalsaldodiferente += 1

                    for dato in lista_rubros:

                        fila += 1

                        hojadestino.write(fila, 0, dato[0], fuentenormal)
                        hojadestino.write(fila, 1, dato[1], fuentenormal)
                        hojadestino.write(fila, 2, dato[2], fuentenormal)
                        hojadestino.write(fila, 3, dato[3], fuentenormal)
                        hojadestino.write(fila, 4, dato[4], fuentenormal)
                        hojadestino.write(fila, 5, dato[5], fuentenormal)
                        hojadestino.write(fila, 6, dato[6], fuentenormal)
                        hojadestino.write(fila, 7, dato[7], fuentenormal)
                        hojadestino.write(fila, 8, dato[8], fuentenormal)
                        hojadestino.write(fila, 9, dato[9], fuentenormal)
                        hojadestino.write(fila, 10, dato[10], fuentenormal)

                        hojadestino.write(fila, 11, dato[11], fuentenormal)

                        hojadestino.write(fila, 12, dato[12], fuentefecha if dato[12] else fuentenormal)

                        hojadestino.write(fila, 13, dato[13], fuentenormal)
                        hojadestino.write(fila, 14, dato[14], fuentenormal)
                        hojadestino.write(fila, 15, dato[15], fuentenormal)


            c += 1

        cnmoodle.close()

        libdestino.save(output_folder + "/RUBROS_UNEMI_EPUNEMI.xls")

        print("Total alumnos con pagos vencidos:", totalvencidos)
        print("Total alumnos con diferencias unemi vs epunemi", totalsaldodiferente)
        print("Total rubros no existen", totalnoexisten)
    except Exception as ex:
        msg = ex.__str__()
        print(msg)

def enviar_correo_notificacion(persona, estado):
    # Envio de e-mail de notificacion al estudiante
    # listacuentascorreo = [23, 24, 25, 26, 27]
    # posgrado1_unemi@unemi.edu.ec
    # posgrado2_unemi@unemi.edu.ec
    # posgrado3_unemi@unemi.edu.ec
    # posgrado4_unemi@unemi.edu.ec
    # posgrado5_unemi@unemi.edu.ec

    listacuentascorreo = [18]  # posgrado@unemi.edu.ec

    fechaenvio = datetime.now().date()
    horaenvio = datetime.now().time()
    cuenta = cuenta_email_disponible_para_envio(listacuentascorreo)

    print("Cuenta para envio: ", CUENTAS_CORREOS[cuenta][1])

    tituloemail = "Carga de Documentos - Compromiso de Pago de Programas de Posgrado"

    send_html_mail(tituloemail,
                   "emails/notificacion_estado_compromisopago.html",
                   {'sistema': u'Posgrado UNEMI',
                    'fecha': fechaenvio,
                    'hora': horaenvio,
                    'saludo': 'Estimada' if persona.sexo.id == 1 else 'Estimado',
                    'estudiante': persona.nombre_completo_inverso(),
                    'estado': estado.valor,
                    'observaciones': '',
                    'destinatario': 'ALUMNO',
                    't': miinstitucion()
                    },
                   # persona.lista_emails_envio(),
                   ['isaltosm@unemi.edu.ec'],
                   [],
                   cuenta=CUENTAS_CORREOS[cuenta][1]
                   )

    # Temporizador para evitar que se bloquee el servicio de gmail
    # pausaparaemail.sleep(1)

    # Envío de e-mail de notificación a Posgrado
    lista_email_posgrado = []

    # lista_email_posgrado.append('dmaciasv@unemi.edu.ec')
    # lista_email_posgrado.append('smendietac@unemi.edu.ec')

    lista_email_posgrado.append('ivan_saltos_medina@hotmail.com')
    lista_email_posgrado.append('ivan.saltos.medina@gmail.com')

    cuenta = cuenta_email_disponible_para_envio(listacuentascorreo)

    print("Cuenta para envio: ", CUENTAS_CORREOS[cuenta][1])

    send_html_mail(tituloemail,
                   "emails/notificacion_estado_compromisopago.html",
                   {'sistema': u'Posgrado UNEMI',
                    'fecha': fechaenvio,
                    'hora': horaenvio,
                    'saludo': 'Estimados',
                    'estudiante': persona.nombre_completo_inverso(),
                    'estado': estado.valor,
                    'genero': 'la' if persona.sexo.id == 1 else 'él',
                    'destinatario': 'POSGRADO',
                    't': miinstitucion()
                    },
                   lista_email_posgrado,
                   [],
                   cuenta=CUENTAS_CORREOS[cuenta][1]
                   )
    # Temporizador para evitar que se bloquee el servicio de gmail
    # pausaparaemail.sleep(1)
    print("Correo enviado . . .")

def simular_pago_posgrado():
    try:
        cedula = '0931131718'
        montopago = 1000
        valorpagar = Decimal(montopago).quantize(Decimal('.01'))

        matricula = Matricula.objects.get(inscripcion__persona__cedula=cedula, nivel__periodo__tipo=3)

        rubros = Rubro.objects.filter(status=True, matricula=matricula, cancelado=False).order_by('fechavence')

        for rubro in rubros:
            print("Disponible", valorpagar)

            if valorpagar == 0:
                break

            print("Rubro Saldo", rubro.saldo)



            saldorubro = rubro.saldo
            if valorpagar >= saldorubro:
                valorpago = saldorubro
                valorpagar -= valorpago
            else:
                valorpago = valorpagar
                valorpagar -= valorpago

            print("Pagado: ", valorpago)

            pagorubro = Pago(fecha=datetime.now().date(),
                         subtotal0=valorpago,
                         subtotaliva=0,
                         iva=0,
                         valordescuento=0,
                         valortotal=valorpago,
                         rubro=rubro,
                         efectivo=True,
                         sesion_id=100)
            pagorubro.save()

            rubro.save()

        print("Pagado con exito")
    except Exception as ex:
        msg = ex.__str__()
        print(msg)

@transaction.atomic()
def pasar_rubros_unemi_a_epunemi():
    # conexión a base de datos EPUNEMI
    conexion = connections['epunemi']
    cnepunemi = conexion.cursor()
    sql = ""
    try:
        matriculas = Matricula.objects.filter(nivel__periodo__tipo=3, inscripcion__persona__cedula='1203342769').distinct().order_by('nivel__periodo_id',
                                                                                          'inscripcion__carrera__nombre',
                                                                                          'inscripcion__persona__apellido1',
                                                                                          'inscripcion__persona__apellido2',
                                                                                          'inscripcion__persona__nombres')
        total = matriculas.count()
        c = 1
        noexisten = 0
        creados = 0
        for matricula in matriculas:
            print("Revisando ", c, " de ", total)
            c += 1

            cuotasvencidas = matricula.numero_cuotas_vencidas()
            if cuotasvencidas >= 3 or (cuotasvencidas == 1 and matricula.retiradomatricula):
                # Consulto los rubros de maestría ligados a la matrícula del maestrante
                rubros = Rubro.objects.filter(status=True, matricula=matricula, cancelado=False, epunemi=True).order_by('fechavence')
                for rubro in rubros:
                    # si el valor total es igual al saldo entonces no tienen pagos
                    if rubro.valortotal == rubro.saldo:
                        # Consulto si existe en EPUNEMI
                        idrubrounemi = rubro.id
                        print(idrubrounemi)
                        sql = """SELECT ru.id,ru.saldo, ru.valor FROM sagest_rubro AS ru WHERE ru.idrubrounemi=%s AND status=true;""" % (idrubrounemi)
                        cnepunemi.execute(sql)
                        registro = cnepunemi.fetchone()
                        # idusuario = registro[0][0]
                        if registro is None:
                            print(rubro.id, " no existe")
                            noexisten += 1

                            # Consulto la persona por cedula en base de epunemi
                            cedula = matricula.inscripcion.persona.cedula

                            sql = """SELECT pe.id FROM sga_persona AS pe WHERE pe.cedula='%s' AND pe.status=TRUE;  """ % (cedula)
                            cnepunemi.execute(sql)
                            registro = cnepunemi.fetchone()
                            codigoalumno = registro[0]

                            rubromaestria = rubro.tipo

                            # Consulto el tipo otro rubro en epunemi
                            sql = """SELECT id FROM sagest_tipootrorubro WHERE idtipootrorubrounemi=%s; """ % (rubromaestria.id)
                            cnepunemi.execute(sql)
                            registro = cnepunemi.fetchone()

                            # Si existe
                            if registro is not None:
                                tipootrorubro = registro[0]
                            else:
                                # Debo crear ese tipo de rubro
                                # Consulto centro de costo
                                sql = """SELECT id FROM sagest_centrocosto WHERE status=True AND unemi=True AND tipo=%s;""" % (rubromaestria.tiporubro)
                                cnepunemi.execute(sql)
                                centrocosto = cnepunemi.fetchone()
                                idcentrocosto = centrocosto[0]

                                # Consulto la cuenta contable
                                cuentacontable = CuentaContable.objects.get(partida=rubromaestria.partida, status=True)

                                # Creo el tipo de rubro en epunemi
                                sql = """ Insert Into sagest_tipootrorubro (status, nombre, partida_id, valor, interface, activo, ivaaplicado_id, nofactura, exportabanco, cuentacontable_id, centrocosto_id, tiporubro, idtipootrorubrounemi, unemi)
                                                        VALUES(TRUE, '%s', %s, %s, FALSE, TRUE, %s, FALSE, TRUE, %s, %s, 1, %s, TRUE); """ % (
                                    rubromaestria.nombre, cuentacontable.partida.id, rubromaestria.valor,
                                    rubromaestria.ivaaplicado.id, cuentacontable.id, idcentrocosto, rubromaestria.id)
                                cnepunemi.execute(sql)

                            # Insertar en base de datos epunemi
                            sql = """ INSERT INTO sagest_rubro (status, usuario_creacion_id, fecha_creacion, cuota, tipocuota, valoriva, tienenotacredito, valornotacredito, valordescuento, anulado, fecha, valor ,valortotal, saldo, persona_id, nombre, tipo_id, cancelado, observacion, iva_id, idrubrounemi, totalunemi, fechavence, compromisopago, bloqueado, refinanciado, bloqueadopornovedad, titularcambiado) 
                                                                                          VALUES (TRUE, 1, NOW(), 0, 3, 0, FALSE, 0, 0, FALSE,'/%s/',                   %s, %s,    %s, %s,     '%s', %s,   FALSE,    '',              1,   %s,        %s,     '/%s/',   %s, FALSE, FALSE, FALSE, FALSE); """ \
                                  % (rubro.fecha, rubro.valor, rubro.valor, rubro.valor, codigoalumno,
                                     rubromaestria.nombre, tipootrorubro, rubro.id, rubro.valor,
                                     rubro.fechavence, 0)
                            cnepunemi.execute(sql)

                            print("Rubro ", rubro.id, " creado en epunemi")

                            creados += 1

        conexion.commit()
        cnepunemi.close()

        print("Finalizado....")
        print("Rubros no existentes: ", noexisten)

        print("Rubros creados:", creados)

    except Exception as ex:
        msg = ex.__str__()
        transaction.set_rollback(True)
        conexion.rollback()
        print(msg)
        print(sql)

@transaction.atomic()
def reversorefinanciamiento():
    from sagest.commonviews import obtener_estado_solicitud
    from sga.models import SolicitudRefinanciamientoPosgrado, SolicitudRefinanciamientoPosgradoRecorrido

    conexion = connections['epunemi']
    cnepunemi = conexion.cursor()
    anuladas = 0
    try:

        solicitudes = SolicitudRefinanciamientoPosgrado.objects.filter(status=True,
                                                                       matricula__inscripcion__persona__cedula__in=['0922666011','0924588692','0922666805'],
                                                                       estado__valor__in=[2, 5, 7, 9, 14]).order_by('id')
        for solicitud in solicitudes:
            # Si la solicitud tiene estado REVISADO
            if solicitud.estado.valor == 2 or solicitud.estado.valor == 5:
                # Consulto la fecha en que se asignó ultimo estado
                recorrido = solicitud.solicitudrefinanciamientoposgradorecorrido_set.filter(status=True).order_by('-id')[0]
                print(solicitud)
                # Si se cumplió el plazo de 5 días
                if (datetime.now().date() - recorrido.fecha).days >= 0 and solicitud.estado.valor == recorrido.estado.valor:
                    # Consulto el estado a asignar
                    estado = obtener_estado_solicitud(1, 24)
                    # print("Plazo finalizado para seguir con el proceso")

                    # Rechazo la solicitud
                    solicitud.estado = estado
                    solicitud.observacion = 'ALUMNO DESISTIÓ DEL PROCESO'
                    solicitud.save()

                    # Creo el recorrido de la solicitud
                    recorrido = SolicitudRefinanciamientoPosgradoRecorrido(solicitud=solicitud,
                                                                           fecha=datetime.now().date(),
                                                                           observacion='RECHAZO AUTOMÁTICO - ALUMNO DESISITIÓ DEL PROCESO',
                                                                           estado=estado
                                                                           )
                    recorrido.save()

                    # Desbloquear los rubros en epunemi para que puedan cobrar
                    for detalle in solicitud.solicitudrefinanciamientoposgradodetalle_set.filter(status=True):
                        print("Rubro desbloqueado : ", detalle.rubro.id)
                        sql = """UPDATE sagest_rubro SET bloqueado=FALSE WHERE idrubrounemi=%s AND status=true""" % (detalle.rubro.id)
                        cnepunemi.execute(sql)

                    anuladas += 1
                    print("Solicitud Rechazada")

        conexion.commit()
        cnepunemi.close()

        print("Total anuladas:", anuladas)
        print("Proceso finalizado...")
    except Exception as ex:
        msg = ex.__str__()
        transaction.set_rollback(True)
        conexion.rollback()
        print(msg)


@transaction.atomic()
def desbloquearrubroepunemi():
    from sagest.commonviews import obtener_estado_solicitud
    from sga.models import SolicitudRefinanciamientoPosgrado, SolicitudRefinanciamientoPosgradoRecorrido

    conexion = connections['epunemi']
    cnepunemi = conexion.cursor()
    try:

        solicitudes = SolicitudRefinanciamientoPosgrado.objects.filter(status=True,
                                                                       matricula__inscripcion__persona__cedula='0301791687',
                                                                       ).order_by('id')
        for solicitud in solicitudes:
            # Desbloquear los rubros en epunemi para que puedan cobrar
            for detalle in solicitud.solicitudrefinanciamientoposgradodetalle_set.filter(status=True):
                print("Rubro : ", detalle.rubro.id)
                sql = """UPDATE sagest_rubro SET bloqueado=FALSE WHERE idrubrounemi=%s AND status=true""" % (
                    detalle.rubro.id)
                cnepunemi.execute(sql)
                print("Desbloqueado")


        conexion.commit()
        cnepunemi.close()

        print("Proceso finalizado...")
    except Exception as ex:
        msg = ex.__str__()
        transaction.set_rollback(True)
        conexion.rollback()
        print(msg)


@transaction.atomic()
def actualizacionepunemi():
    from sagest.commonviews import obtener_estado_solicitud
    from sga.models import SolicitudRefinanciamientoPosgrado, SolicitudRefinanciamientoPosgradoRecorrido

    conexion = connections['epunemi']
    cnepunemi = conexion.cursor()
    try:
        rubros = Rubro.objects.filter(status=True, cancelado=True, refinanciado=True)

        for rubro in rubros:
            print(rubro.id, "-", rubro.nombre, " - ", rubro.valortotal, " - ", rubro.saldo, "- ", rubro.persona, " - ", rubro.persona.cedula)

            sql = """SELECT ru.id,ru.nombre,ru.valor,ru.valortotal,ru.observacion,ru.refinanciado,ru.bloqueado FROM sagest_rubro as ru WHERE ru.status=True  AND ru.idrubrounemi=%s;""" % (rubro.id)
            cnepunemi.execute(sql)
            rubroepunemi = cnepunemi.fetchone()
            if rubroepunemi is not None:
                print(rubroepunemi[0])
                print(rubroepunemi[1])
                print(rubroepunemi[2])
                print(rubroepunemi[3])
                print(rubroepunemi[4])
                print(rubroepunemi[5])

                if rubro.saldo == 0:
                    # Hacer la misma actalizacion en EPUNEMI
                    sql = """UPDATE sagest_rubro SET valor=%s, valortotal=%s, saldo=0.00, cancelado=TRUE, refinanciado=TRUE, observacion = '' WHERE idrubrounemi=%s AND status=true""" % (rubro.valortotal, rubro.valortotal, rubro.id)
                    cnepunemi.execute(sql)

                    print("Actualizado...")


            else:
                print("Aun no esta en epunemi")


        conexion.commit()
        cnepunemi.close()

        print("Proceso finalizado...")
    except Exception as ex:
        msg = ex.__str__()
        transaction.set_rollback(True)
        conexion.rollback()
        print(msg)

def actualizar_coordinacion_propuestalineainvestigacion():
    carreras_lineas = PropuestaLineaInvestigacion_Carrera.objects.filter(status=True).order_by('id')
    ncoord = 0
    for carrera_linea in carreras_lineas:
        carrera = Carrera.objects.get(pk=carrera_linea.carrera.id)
        print("Carrera")
        print(carrera)
        print("Coordinacion")
        print(carrera_linea.coordinacion)
        ncoord = 0
        coordinaciones = carrera.coordinaciones()
        for c in coordinaciones:
            print(c)

            carrera_linea.coordinacion = c
            carrera_linea.save()

            ncoord += 1

        if ncoord > 1:
            print("Tiene mas de una coordinacion")

        print("=======================00")

def copiar_resoluciones_propuestas():
    lineasinvestigacion = PropuestaLineaInvestigacion.objects.filter(status=True).order_by('id')
    c = tr = ntr = la = lna = snr = sfr = sar = 0
    for linea in lineasinvestigacion:
        c += 1
        print(linea)

        if linea.numeroresolucion and linea.fecharesolucion:
            if not PropuestaLineaInvestigacionResolucion.objects.values("id").filter(linea=linea).exists():
                resol = PropuestaLineaInvestigacionResolucion(
                    linea=linea,
                    numero=linea.numeroresolucion,
                    fecha=linea.fecharesolucion,
                    archivo=linea.archivo,
                    vigente=True,
                    tipo=1
                )
                resol.save()
                print("Resolución creada...")
        else:
            print("Resolución no creada...")


    print("Total lineas procesadas: ", c)


def actualizainscripcioncohorte():
    inscripcionescohorte = InscripcionCohorte.objects.filter(status=True).order_by('id')
    c = te = nte = 0
    total = inscripcionescohorte.count()
    for inscohorte in inscripcionescohorte:
        c += 1
        print("Procesado ", c, " de ", total)
        print(inscohorte)

        persona = inscohorte.inscripcionaspirante.persona
        carrera = inscohorte.cohortes.maestriaadmision.carrera

        if Inscripcion.objects.values("id").filter(persona=persona, carrera=carrera).exists():

            inscripcionposgrado = Inscripcion.objects.get(persona=persona, carrera=carrera)
            inscohorte.inscripcion = inscripcionposgrado
            inscohorte.save()

            print("=============Inscripcion Cohorte actualizada================")
            te += 1
        else:
            nte += 1

    print("SI Tienen inscripcion:", te)
    print("NO Tienen inscripcion:", nte)


def agregar_recorrido_becas_posgrado():
    print("Agregar recorrido a becas de posgrado")
    solicitudes = DescuentoPosgradoMatricula.objects.filter(status=True, detalleconfiguraciondescuentoposgrado__configuraciondescuentoposgrado__id=3).order_by('id')
    total = solicitudes.count()
    c = 1
    for solicitud in solicitudes:
        print("Procesando ", c, " de ", total)
        print(solicitud)

        # Si no tiene recorrido entonces crearlo
        if not solicitud.descuentoposgradomatricularecorrido_set.filter(status=True).exists():
            personaaspirante = solicitud.inscripcioncohorte.inscripcionaspirante.persona
            # inscripcioncohorte = solicitud.detalleconfiguraciondescuentoposgrado.inscripcioncohorte_set.filter(status=True)[0]

            # Aqui guardar el recorrido
            recorridobeca = DescuentoPosgradoMatriculaRecorrido(
                descuentoposgradomatricula=solicitud,
                fecha=solicitud.fecha_creacion.date(),
                persona=personaaspirante,
                observacion='SOLICITUD REGISTRADA',
                estado=1
            )
            recorridobeca.save()
            print("Recorrido creado")

        c += 1

    print("Proceso finalizado...")

def mostrarsaldospresupuestobecasposgrado():
    programasmaestria = CohorteMaestria.objects.filter(status=True, presupuestobeca__gt=0).annotate(
        programa=F('maestriaadmision__carrera__nombre'),
        cohorte=F('descripcion'),
        utilizado=Sum('inscripcioncohorte__descuentoposgradomatricula__valordescuento')
    ).values('programa', 'cohorte', 'presupuestobeca', 'utilizado').order_by('programa', 'cohorte')

    print(programasmaestria.query)
    print(programasmaestria)

    for programa in programasmaestria:
        print(programa['programa'])
        print(programa['cohorte'])
        print(programa['presupuestobeca'])
        print(programa['utilizado'])
        print(Decimal(programa['presupuestobeca']).quantize(Decimal('.01'))-programa['utilizado'])
        print("")

def asignar_rubros_maestria_sistemas_informacion():
    carrera = Carrera.objects.get(pk=173)  # MAESTRIA EN SISTEMAS DE INFORMACION
    registro_a_copiar = Matricula.objects.get(status=True, inscripcion__carrera=carrera, inscripcion__persona__cedula='0702773052')
    print("Registro a copiar")
    print(registro_a_copiar, " ID: ", registro_a_copiar.id)
    print("Rubros existentes:")
    rubros_a_copiar = registro_a_copiar.rubro_set.filter(status=True).exclude(tipo_id=2845).order_by('id')
    for rubro in rubros_a_copiar:
        print(rubro, " - ", rubro.tipo.id)
    print("Total rubros: ", rubros_a_copiar.count())

    # output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'arreglos'))
    # liborigen = xlrd.open_workbook(output_folder + '/CREDITOUNEMIBIGDATA.xlsx')

    existen = noexisten = 0
    creados = 0
    # sheet = liborigen.sheet_by_index(0)

    cedulas = ['0925003907', '0926402769', '0918808940', '1714562525', '0926166299', '0914676713', '0918303249',
               '0913826632', '1804360939', '0917388209', '0104509971', '0918845421', '0928734441',
               '0926475971', '1204590283', '0959617713', '1308963105', '0704656537', '0941601189',
               '0941600280', '0917977936', '1206142893', '0926223223', '0704903590', '1208548014', '0105337521',
               '0930508361', '0942117417', '0503527046', '1205109265', '1104181183', '0929093839',
               '0704726322', '0930325451', '0930811914', '0928819465', '1311573867', '0104768015',
               '0503603565', '0927805671', '1205795287', '0930066691', '0915935910', '1205953829',
               '0922280953', '0917447930', '0151876935', '0927699173', '0940121213', '0929394807', '0603972456']

    print("Total a procesar: ", len(cedulas))
    c = 0
    # matricula_no_existe = 0
    for cedula in cedulas:
        c += 1
        print("")
        print("Procesando", c, " de ", len(cedulas))
        print(cedula)

        if Matricula.objects.filter(status=True, inscripcion__persona__cedula=cedula, inscripcion__carrera=carrera).exists():
            matricula = Matricula.objects.get(status=True, inscripcion__persona__cedula=cedula, inscripcion__carrera=carrera)
            print(matricula)
            existen += 1

            # # Consulto el rubro MATRICULA DE POSGRADO
            # if Rubro.objects.filter(status=True, persona=matricula.inscripcion.persona, matricula__isnull=True, tipo_id=2845).exists():
            #     rubromatricula = Rubro.objects.get(status=True, persona=matricula.inscripcion.persona, matricula__isnull=True, tipo_id=2845)
            #     print(rubromatricula, " - ", rubromatricula.tipo.id, " - ", rubromatricula.cancelado)
            # else:
            #     print("Rubro matricula no existe...")
            #     matricula_no_existe += 1
            # print()

            # Asigno id de matricula al rubro: MATRICULA POSGRADO
            # rubromatricula.matricula = matricula
            # rubromatricula.save()

            # Creo los rubros: MAESTRÍA EN SISTEMA DE INFORMACIÓN EN LÍNEA - I COHORTE
            for rubro_a_copiar in rubros_a_copiar:
                # Creo un clon del rubro
                rubro_a_copiar.pk = None
                rubro_a_copiar.save()

                # Asigno la persona y matricula correcta
                rubro_a_copiar.persona = matricula.inscripcion.persona
                rubro_a_copiar.matricula = matricula
                rubro_a_copiar.save()

                print("Creado ", rubro_a_copiar)
                creados += 1

        else:
            noexisten += 1
            print("No existe ", cedula)

    # print("Existen: ", existen)
    # print("No Existen: ", noexisten)
    # print("Rubro matricula no existe:", matricula_no_existe)
    print("Total rubros creados: ", creados)
    print("Proceso finalizado")

# ============= Procesos ya EJECUTADOS ====
# arreglo_practicas()
# consulta_inscripciones()
# quitar_deudas_maestria()
#ajustar_valores_rubros_maestria('GEREDU')
#ajustar_valores_rubros_maestria('PYMES')
#ajustar_valores_rubros_maestria('TICS')
#actualizar_rubro_maestria_a_epunemi()
# ============= Procesos ya EJECUTADOS ====
# consulta_inscripciones()
# genera_archivo_becasexternas()
# llena_recorrido_solicitud_becas()
# alumnos_categoriaD()
# alumnos_discapacidad()
# migrar_necesidades_tecnologica()
# actualizar_necesidad_beca()
# revisionsolicitudes()
# encuestaalumnos()
#alumnos_categoriaD()
# crearsolicitudesbeca2020virtual()
# rechazarsolicitudesbeca2020virtual()
# aprobarsolicitudesbeca2020virtual()
# mensajeprueba()
# agregar_recorrido_becas_alumno()
# agregar_recorrido_becas_bienestar()


# rechazar_becas_no_aceptadas()
#
# actualizar_tipo_beca()


# darbajaprocesobeca()

# revisabecados2019altopromedio()
# revisabecados2019primernivel()
# revisabecados2019situacioneconomica()
# revisabecados2019discapacidad()
# crear_solicitud_becas_2019_2020()
# enviar_correos_acta_grado()
# enviar_correos_becas_pendientes_aceptar()
# revisiondocumentos()
# enviar_correos_becas_renovacion()
# agregar_estado_pago_solicitado()
# enviar_correos_pagos_realizados()
# aprobarsolicitudesbeca()

# crear_solicitud_becas_2019_2020()
# enviar_correos_acreditacion_realizada()
# agregarbasesindexadasarevistas()

# agregarbasesindexadasarevistas()
#  actualizacampopublicadosolicitud()
# llenar_tabla_comprobante_revision()
# enviar_correo_articulo()
# arreglar_muestra_encuesta_admision()
# asignar_estado_aprobado_articulos_existentes()
# carteravencidapormes()
# evidenciasarticulos()
# evidenciasponencias()
# revisarpagosbanco()
# asignar_estado_aprobado_ponencias_existentes()
# asignar_categoria_revistas()
# bloquear_moodle_becados_sin_comprobante()
# desbloqueosgamoodle()
# verificar_listado_A1()
# verifica_carreras()
# verifica_recaudaciones_banco()
# crear_listado_pagos_18122020()
# solicitud_beca_inscripcion_revision()
# crear_cliente_factura_recibo_caja()
# crear_formas_pago_recibos_49()
# anular_recibos_caja_pagos()
# envio_correo_posgrado()



# Consulto el estado DOCUMENTOS CARGADOS
# estado = EstadoSolicitud.objects.get(opcion_id=2, valor=3)
# compromiso = CompromisoPagoPosgrado.objects.get(pk=1)
# enviar_correo_notificacion(compromiso.matricula.inscripcion.persona, estado)

# verifica_unemi_epunemi_posgrado()
# simular_pago_posgrado()
# pasar_rubros_unemi_a_epunemi()
# reversorefinanciamiento()
# desbloquearrubroepunemi()
# actualizacionepunemi()

# actualizar_coordinacion_propuestalineainvestigacion()
# copiar_resoluciones_propuestas()
# actualizainscripcioncohorte()
# agregar_recorrido_becas_posgrado()

# mostrarsaldospresupuestobecasposgrado()

# asignar_rubros_maestria_sistemas_informacion()
