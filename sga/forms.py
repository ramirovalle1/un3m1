# -*- coding: UTF-8 -*-
import os
from datetime import datetime, timedelta
from typing import Union

from ckeditor_uploader.widgets import CKEditorUploadingWidget
from django import forms
from django.contrib.auth.models import Group
from django.db.models import Q
from django.forms import ValidationError
from django.forms.models import ModelForm, ModelChoiceField
from django.forms.widgets import DateTimeInput, CheckboxInput, FileInput
from django.utils.safestring import mark_safe

from inno.models import TipoRecurso, TIPO_ARCHIVO, TIPO_RESPONSABLE, AsignaturaActaAdmision, ResponsableActaAdmision, FormatoPracticaPreprofesionalSalud
from investigacion.models import SubAreaUnesco, AreaUnesco, GrupoInvestigacion
from sagest.models import TipoOtroRubro, TIPO_SOLICITUD_PUBLICACION, SeccionDepartamento, Aseguradora, TipoCuentaBanco, \
    Banco, TIPO_PROYECTO_ARTICULO, Partida, PartidaPrograma, Departamento, TIPO_RUBRO, IvaAplicado, OpcionSistema, \
    GARANTE_RELACION_DEPENDENCIA, GARANTE_PERSONA_JURIDICA, Producto, RegimenLaboral, TipoPersonaDepartamentoFirma, \
    DenominacionPuesto, Departamento, DepartamentoFirma, TipoSubrogante, DistributivoPersona, \
    TIPO_SOLICITUD_PUBLICACION_TH, TIPO_SOLICITUD_TRASPASO_BAJA, \
    Ubicacion, Congreso, TipoParticipacionCongreso, CubiculoCrai
from settings import PROFESORES_GROUP_ID, TIPO_PERIODO_REGULAR, ALUMNOS_GROUP_ID, EMPLEADORES_GRUPO_ID, \
    MATRICULACION_LIBRE, NOMBRE_NIVEL_AUTOMATICO, UTILIZA_GRUPOS_ALUMNOS, CUPO_POR_MATERIA, COSTO_EN_MALLA, \
    EMAIL_INSTITUCIONAL_AUTOMATICO, TITULAR_ID, DEBUG
from sga.funciones import variable_valor
from sga.models import Persona, Canton, Malla, Nivel, Periodo, Materia, Profesor, Turno, Sexo, Provincia, Carrera, \
    Modalidad, Sesion, Especialidad, TipoSangre, Asignatura, Idioma, \
    TiempoDedicacionDocente, CategorizacionDocente, Discapacidad, Grupo, TipoPeriodo, Sede, Aula, NivelMalla, Raza, \
    EstratoSociocultural, TipoBeca, DIAS_CHOICES, TIPO_MATRICULA_NOVEDAD, CodigoEvaluacion, SedeVirtual, \
    TipoIncidencia, Parroquia, Industria, NivelCargo, RangoSalario, TipoActividadExtraCurricular, PERIODICIDAD_CHOICES, \
    TipoActividad, TipoProyecto, CLASIFICACION_PERIODO, \
    Coordinacion, AsignaturaMalla, TipoSolicitudSecretariaDocente, ComoSeInformo, RazonesMotivaron, \
    EmpresaEmpleadora, TIPOS_MOVIMIENTO, ConocimientoHerramienta, NIVEL_CONOCIMIENTO, Relacion, \
    ObservacionSeguimiento, CentroInformacion, Pais, TipoMateria, TipoInscripcion, PersonaEstadoCivil, ModeloEvaluativo, \
    SubTipoComponenteEvaluacionIntegral, AreaConocimiento, TipoGrado, SubLineaInvestigacion, TipoTrabajoTitulacion, \
    ESTADOS_PREPROYECTO, ESTADOS_SOLICITUDCAMBIOPROYECTO, ESTADOS_SUSTENTACION_PROYECTO, ESTADOS_PROYECTO, \
    MatrizEvaluacion, CargoDocente, ESTADOS_PROYECTO_VINCULACION_INVESTIGACION, NivelEscalafonDocente, ModuloMalla, \
    TipoProfesor, DetalleModeloEvaluativo, MESES_NUMBER_CHOICES, TipoRespuesta, TablaPonderacionInstrumento, Colegio, \
    BECA_RECIBE, ProfesorTipo, ESTADO_SOLICITUD, AreaOfertaLaboral, TIPO_COORDINADOR, \
    TIPO_INSTITUCION, SECTOR_ECONOMICO, TIPO_PRACTICA_PP, AreaConocimientoTitulacion, SubAreaConocimientoTitulacion, \
    SubAreaEspecificaConocimientoTitulacion, LineaInvestigacion, AlcanceTerritorial, ProgramasInvestigacion, \
    TIPO_SOLICITUDINCONVENIENTE, TIPO_SOLICITUDDIFERIDO, ParticipantesTipo, NacionalidadIndigena, RevistaInvestigacion, \
    ESTADO_PUBLICACION, TIPO_PARTICIPANTE, BaseIndexadaInvestigacion, TIPO_ARTICULO, TIPO_MOTIVO, \
    TIPO_PARTICIPANTE_INSTITUCION, SagPregunta, SagGrupoPregunta, SagPreguntaTipo, SagPreguntaEncuesta, TipoSolicitud, \
    TIPO_SOLICITUD_PRACTICAPRO, ESTADO_PUBLICACION_PON, TIPO_UNIVERSIDAD, TIPO_NIVEL, InstitucionEducacionSuperior, \
    RecordAcademico, CUARTIL, TipoConvenio, ESTADO_REVISION_APROBAR, TIPO_TITULACION, TipoTitulaciones, \
    PeriodoGrupoTitulacion, ModeloTitulacion, ProfesorMateria, PropuestaLineaInvestigacion, PaeAreas, \
    PropuestaSubLineaInvestigacion, PracticasDepartamento, TIPO_MANTENIMIENTO, SagPeriodo, ProfesoresTitulacion, \
    ComplexivoAsignatura, TIPO_LABORATORIO, LaboratorioAcademia, TipoPublicacion, LineasGrupoInvestigacion, \
    ParticipanteTematica, ComplexivoTematica, SagMuestraPeriodoCarrera, TIPO_OBSEVALUACION, TIPO_INSTRUMENTO, \
    CriterioTipoObservacionEvaluacion, ParticipanteRol, MODULO_COMPLEXIVO, TipoComplexivo, RotacionesMalla, \
    BecaTipo, BecaUtilizacion, DetalleSilaboSemanalTema, TipoArchivo, GraduadoMecanismoTitulacion, \
    CasosJustificacion, TipoColegio, TipoAula, TipoUbicacionAula, ActaFacultad, \
    ESTADO_DOCUMENTO_REVISION, ESTADO_SOLICITUD_PRACTICAS2, ESTADO_TUTOR, NivelTitulacion, Credo, PreferenciaPolitica, \
    PUBLICACION, Utensilios, TIPO_PROYECTO_INSTITUCION, ItinerariosMalla, PARCIAL, TIPO_NUE_RENO, TIPOMATERIA, \
    GruposProfesorMateria, Paralelo, TIPOHORARIO, DetalleSilaboSemanalSubtema, VISIBLE_INSCRITOS, TipoArchivoConvenio, \
    TIEMPOS_DEDICACION, CronogramaEncuestaProcesoEvaluativo, Zona, ObjetivoPlanNacional, \
    EvidenciaPracticasProfesionales, PeriodoEvidenciaPracticaProfesionales, TIPO_MARCO_LOGICO, \
    GRUPO_ACTIVIDAD, LineaProgramasInvestigacion, AreaProgramasInvestigacion, MODALIDAD_CARRERA, CarreraGrupo, \
    TIPO_CARRERA, PreguntaPreInscripcionPracticasPP, ESTADO_PREINSCRIPCIONPPP, TIPO_RECURSOS, \
    EnteAprobadorCarrera, TIPO_ACTIVIDAD, TemaUnidadResultadoProgramaAnalitico, TipoNoticias, TIPO_CRITERIO_ACTIVIDAD, \
    VirtualCausaIncidente, ESTADO_PRIORIDADINCIDENTE, VirtualSoporteUsuario, ProgramaAnaliticoAsignatura, \
    ActividadesMundoCrai, TIPO_MUNDO_CRAI, TIPO_ACTIVIDAD_CRAI, SugerenciaCongreso, TIPO_SEXO_ENCUESTA, \
    MODALIDAD_CAPACITACION, TipoDescuentoMatricula, TipoServicioCrai, \
    TIPO_PRESTAMO, TIPO_COLEGIO, TIPO_REVISTA, TIPO_ACTIVIDAD_SAKAI, PISOS_CRAI, TIPO_SALA_CRAI, SalaCrai, \
    TipoActividadVirtual, EjeFormativo, ITINERARIO_ASIGNATURA_MALLA, MateriaAsignada, Inscripcion, \
    ESTADO_REVISION_PLANIFICACION, TIPO_CAPACITACION_CRAI, TIPO_FIRMA_CRAI, EncuestaCapacitacionesCrai, TipoBuzon, \
    ESTADOS_PLANIFICAR_CAPACITACIONES, NIVEL_PUESTO, SECTORLUGAR, UNICO_ESTUDIANTE, ESTADO_LABORANDO, \
    ESTADO_SOLICITUD_BECAS, MOTIVO_DESCUENTO, ActividadPrincipal, ConvenioEmpresa, AcuerdoCompromiso, \
    ConfiguracionFirmaPracticasPreprofesionales, ESTADO_SOLICITUD_BECAS, MOTIVO_DESCUENTO, TIPO_PERSONA, \
    TIPO_DE_LIBRO, ESTADO_BECA_ASIG, SeguroTipo, MotivoRetiroMatricula, \
    TIPO_DE_SERVICIO, ConfiguracionEvidenciaHomologacionPractica, ActividadAyudantiaCatedra, InformeAyudanteCatedra, \
    AsignacionEmpresaPractica, TIPO_PREGUNTAGRUPO, TIPO_PERFIL, ESTADO_REVISION_ARCHIVO, TIPO_FORO, RecursoAprendizaje, \
    RecursoAprendizajeTipoProfesor, TIPO_CONSOLIDACIONFORO, TIPO_MATERIALADICIONAL, TIPO_RECURSOADICIONAL, Estado, \
    MecanismoTitulacionPosgrado, TIPO_GRABACION, ESTADO_PUBLICACION_ARTICULO, ProyectosInvestigacion, \
    ProyectoInvestigacionExterno, CUARTIL_REVISTA, TIPO_RUBRICA, RubricaTitulacionPosgrado, CategoriaBaseIndexada, \
    DescuentoPosgrado, RequisitosDetalleConfiguracionDescuentoPosgrado, TIPO_REGISTRO_REVISTA, CategoriaIes, \
    TipoFinanciamiento, TipoTramiteRediseno, CarrerasRediseno, VALOR_SI_NO, TipoFormacionRediseno, ComponentesRediseno, \
    OpcionesAprobacion, UnidadOrganizacion, Componente, TIPOFIRMA_EVENTO, AMBIENTE_APRENDIZAJE, UBICACION_APRENDIZAJE, \
    MicrocurricularRedisenoCarrera, TIPOS_TAREA, RubricaMoodle, TIPO_ACTIVIDAD_CONVALIDACION, TIPO_RECURSOSILABO, \
    METODO_NAVEGACION, CarreraRubricaMoodle, TIEMPO_DURACION, VECES_INTENTO, TIPO_RESPUESTA, TIPO_SOLICITUD, \
    RESPUESTAS_SI_NO, TIPO_GRUPOS, TIPO_RUBRICAEVALUACION, TIPO_CLASE, TIPO_INFORMACION, \
    TIPO_SOLICITUDES, CUARTIL_ARTICULO, TIPO_FIRMA_GRUPOTITULACION, CriterioSubirMatrizInscripcion, \
    TituloProcesoSubirMatrizInscripcion, CapPeriodoDocente, CapEventoDocente, ContextoCapacitacion, CapEnfocadaDocente, \
    TipoParticipacion, TipoCertificacion, TipoCapacitacion, CapTurnoDocente, CapInstructorDocente, \
    CapEventoPeriodoDocente, CapClaseDocente, TipoCurso, CAPACITACION_FALICITADORES_TIPO, \
    MOTIVO_REFINANCIAMIENTO_POSGRADO, GEDC_GRUPO, GEDCIndicador, GENEROS_ENCUESTAS, AlternativaTitulacion, TIPO_FIRMAS, \
    BecaTipoConfiguracion, MESES_CHOICES, CabPeriodoEvidenciaPPP, CargoBeneficiario, TIPO_ACTORES, ESTADOS_AGENDA, \
    PracticasPreprofesionalesInscripcion, RubricaTitulacionCab, RequisitosHomologacionPracticas, \
    TIPO_DOCUMENTO_HOMOLOGACION, \
    UnidadOrganizacionCurricular, ItinerarioMallaEspecilidad, ParticipanteGrupoInvestigacion, \
    TIPO_COMPONENTE_PROPUESTA, ConfiguracionTitulacionPosgrado, TIPO_PRODUCCION_CIENTIFICA, \
    ParRevisorProduccionCientifica, MesasPadronElectoral, \
    TIPO_PERSONA_PADRON, DetPersonaPadronElectoral, TIPO_SOLICITUD_VINCULACION_TUTOR, TIPO_PRACTICAS_VINCULACION_TUTOR, \
    GEDCFactores, NotificacionConvenio, GEDC_SENTIDO_INDICADOR, SilaboSemanal, RubricaMoodleHistorial, \
    ESTADOS_INFORMES_AVANCES_VINCULACION, \
    TIPO_CONFIGURACION, TipoLaboratorio, ESTADO_LABORATORIO, RequisitosCambioCarrera, ComplexivoPeriodo, FechaProyectos, \
    AsesoramientoSEETipoTrabajo, MODALIDAD_IMPARTICION, InscripcionActividadConvalidacionPPV, \
    TIPO_CRITERIO_ACTIVIDAD_PRINCIPAL, CLASIFICACION_PERIODO, InstitucionBeca, TIPO_CELULAR, TIPO_BLOQUE, \
    DetalleRequisitoBeca, \
    FUNCIONES_REQUISITOSBECAS_EJECUTAR, RequisitoBeca, Bloque, InstitucionCertificadora, NivelSuficencia, \
    CertificadoIdioma, ESTADO_CERTIFICACION_INGLES, Matricula, Suministro, ModeloEvaluativoPosgrado, ESQUEMA_PREGUNTA, \
    MODALIDAD_SUSTENTACION, TipoEmpresa, TIPO_SOLICITUDRECURSO, TIPO_ACTAGRADUADO, CapModeloEvaluativoDocente, \
    MatriculaTitulacion, ESTADOS_PARTICIPACION, \
    TIPO_PRODUCTOCOMUNICACIONAL, TIPO_FIRMA_ACTA_COMPLEXIVO_POSGRADO, EtapaTemaTitulacionPosgrado, \
    TIPO_RESPONSABLE_HORARIO_EXAMEN, TIPO_MODULO_MALLA, FUNCIONES_DOCUMENTOSBECAS_EJECUTAR, \
    DocumentoBecaTipoConfiguracion, ESTADO_SEGUIMIENTO, CategoriaInsignia, TIPO_INSIGNIA, InsigniaPersona, Insignia, \
    TIPO_REGISTRO_CRAI, LibroKohaProgramaAnaliticoAsignatura, ProgramaEtapaTutoriaPosgrado, CLASIFICACION_ETAPA, \
    DetallePreInscripcionPracticasPP, TIPOSILABOCOMPONENTE, TIPO_PARTICIPANTE_DOCENTE_VINCULACION, \
    TipoSolicitudInformacionPadronElectoral, CabPadronElectoral, CapSolicitudNecesidad, \
    CapSolicitudNecesidadFacilitador, CapCronogramaNecesidad, PreguntaEncuestaGrupoEstudiantes, \
    PreInscripcionPracticasPP, ESTADO_INVENTARIO, TIPO_MATERIALCOMPLEMENTARIO, TIPO_ARCHIVO_PORSGRADO, \
    RegistrarIngresoCrai, CapConfiguracionDocente, EncuestaGrupoEstudiantes

from sga.My_Model.SubirMatrizSENESCYT import My_CriterioSubirMatrizInscripcion, My_TituloProcesoSubirMatrizInscripcion

from core.choices.models.sga import ESTADOS_DEL_PROYECTO

from django.db import models, connection, connections

from voto.models import SedesElectoralesPeriodo, DignidadesElectorales
from core.custom_forms import FormModeloBase

class CheckboxSelectMultipleCustom(forms.CheckboxSelectMultiple):
    def render(self, *args, **kwargs):
        output = super(CheckboxSelectMultipleCustom, self).render(*args, **kwargs)
        return mark_safe(output.replace(u'<ul>', u'<div class="custom-multiselect" style="width: 600px;overflow: scroll"><ul>').replace(u'</ul>', u'</ul></div>').replace(u'<li>', u'').replace(u'</li>', u'').replace(u'<label', u'<div style="width: 900px"><li').replace(u'</label>', u'</li></div>'))


class CarreraModelChoiceField(forms.ModelChoiceField):
    def label_from_instance(self, obj):
        # Aquí puedes personalizar la forma en que se muestra la etiqueta
        return f"{obj.nombre_completo_inscripcion()}"


class ExtFileField(forms.FileField):
    """
    * max_upload_size - a number indicating the maximum file size allowed for upload.
            500Kb - 524288
            1MB - 1048576
            2.5MB - 2621440
            5MB - 5242880
            10MB - 10485760
            20MB - 20971520
            50MB - 5242880
            100MB 104857600
            250MB - 214958080
            500MB - 429916160
    t = ExtFileField(ext_whitelist=(".pdf", ".txt"), max_upload_size=)
    """

    def __init__(self, *args, **kwargs):
        ext_whitelist = kwargs.pop("ext_whitelist")
        self.ext_whitelist = [i.lower() for i in ext_whitelist]
        self.max_upload_size = kwargs.pop("max_upload_size")
        super(ExtFileField, self).__init__(*args, **kwargs)

    def clean(self, *args, **kwargs):
        upload = super(ExtFileField, self).clean(*args, **kwargs)
        if upload:
            size = upload.size
            filename = upload.name
            ext = os.path.splitext(filename)[1]
            ext = ext.lower()
            if size == 0 or ext not in self.ext_whitelist or size > self.max_upload_size:
                raise forms.ValidationError("Tipo de fichero o tamanno no permitido!")


class FixedForm(ModelForm):
    date_fields = []

    def __init__(self, *args, **kwargs):
        super(ModelForm, self).__init__(*args, **kwargs)
        for f in self.date_fields:
            self.fields[f].widget.format = '%d-%m-%Y'
            self.fields[f].input_formats = ['%d-%m-%Y']


def deshabilitar_campo(form, campo):
    form.fields[campo].widget.attrs['readonly'] = True
    form.fields[campo].widget.attrs['disabled'] = True


def habilitar_campo(form, campo):
    form.fields[campo].widget.attrs['readonly'] = False
    form.fields[campo].widget.attrs['disabled'] = False


def campo_modolectura(form, campo, valor):
    form.fields[campo].widget.attrs['readonly'] = valor


def campo_modobloqueo(form, campo, valor):
    form.fields[campo].widget.attrs['disabled'] = valor

class SgaImportarXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 6Mb, en formato xls', ext_whitelist=(".xls", "xlsx"),
                           max_upload_size=6291456)

class PersonaForm(forms.Form):
    nombres = forms.CharField(label=u'Nombres', max_length=100, required=False,
                              widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido1 = forms.CharField(label=u"1er Apellido", max_length=50, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido2 = forms.CharField(label=u"2do Apellido", max_length=50, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-50'}))
    cedula = forms.CharField(label=u"Cédula", max_length=10, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    pasaporte = forms.CharField(label=u"Pasaporte", max_length=15, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    nacimiento = forms.DateField(label=u"Fecha nacimiento", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    paisnacimiento = forms.ModelChoiceField(label=u"País de nacimiento", queryset=Pais.objects.all(), required=False,
                                            widget=forms.Select(attrs={'class': 'imp-75'}))
    provincianacimiento = forms.ModelChoiceField(label=u"Provincia de nacimiento",
                                                 queryset=Provincia.objects.all().order_by('nombre'), required=False,
                                                 widget=forms.Select(attrs={'class': 'imp-75'}))
    cantonnacimiento = forms.ModelChoiceField(label=u"Cantón de nacimiento", queryset=Canton.objects.order_by('nombre'),
                                              required=False, widget=forms.Select(attrs={'class': 'imp-75'}))
    parroquianacimiento = forms.ModelChoiceField(label=u"Parroquia del nacimiento",
                                                 queryset=Parroquia.objects.all().order_by('nombre'), required=False,
                                                 widget=forms.Select(attrs={'class': 'imp-75'}))
    nacionalidad = forms.CharField(label=u"Nacionalidad", max_length=100, required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-75'}))
    sexo = forms.ModelChoiceField(label=u"Sexo", queryset=Sexo.objects.all(),
                                  widget=forms.Select(attrs={'class': 'imp-25'}))
    pais = forms.ModelChoiceField(label=u"País de residencia", queryset=Pais.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-75'}))
    provincia = forms.ModelChoiceField(label=u"Provincia de residencia",
                                       queryset=Provincia.objects.all().order_by('nombre'), required=False,
                                       widget=forms.Select(attrs={'class': 'imp-75'}))
    canton = forms.ModelChoiceField(label=u"Cantón de residencia", queryset=Canton.objects.order_by('nombre'),
                                    required=False, widget=forms.Select(attrs={'class': 'imp-75'}))
    parroquia = forms.ModelChoiceField(label=u"Parroquia de residencia",
                                       queryset=Parroquia.objects.all().order_by('nombre'), required=False,
                                       widget=forms.Select(attrs={'class': 'imp-75'}))
    sector = forms.CharField(label=u"Sector", max_length=100, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-50'}))
    direccion = forms.CharField(label=u"Calle principal", max_length=100, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-75'}))
    direccion2 = forms.CharField(label=u"Calle secundaria", max_length=100, required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-75'}))
    num_direccion = forms.CharField(label=u"Numero residencia", max_length=15, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-number'}))
    telefono = forms.CharField(label=u"Teléfono móvil", max_length=50, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-50'}))
    telefono_conv = forms.CharField(label=u"Teléfono fijo", max_length=50, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-50'}))
    email = forms.CharField(label=u"Correo electrónico", max_length=200, required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-50'}))
    emailinst = forms.CharField(label=u"Correo institucional", max_length=200, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-50'}))
    sangre = forms.ModelChoiceField(label=u"Tipo de sangre", queryset=TipoSangre.objects.all().order_by('sangre'),
                                    required=False, widget=forms.Select(attrs={'class': 'imp-25'}))
    etnia = forms.ModelChoiceField(label=u'Etnia', queryset=Raza.objects, required=False,
                                   widget=forms.Select(attrs={'class': 'imp-50'}))
    estadocivil = forms.ModelChoiceField(label=u'Estado civil', queryset=PersonaEstadoCivil.objects, required=False,
                                         widget=forms.Select(attrs={'class': 'imp-50'}))

    def editar(self, persona):
        deshabilitar_campo(self, 'nombres')
        deshabilitar_campo(self, 'apellido1')
        deshabilitar_campo(self, 'apellido2')
        deshabilitar_campo(self, 'cedula')
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=persona.pais)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=persona.provincia)
        self.fields['parroquia'].queryset = Parroquia.objects.filter(canton=persona.canton)
        self.fields['provincianacimiento'].queryset = Provincia.objects.filter(pais=persona.paisnacimiento)
        self.fields['cantonnacimiento'].queryset = Canton.objects.filter(provincia=persona.provincianacimiento)
        self.fields['parroquianacimiento'].queryset = Parroquia.objects.filter(canton=persona.cantonnacimiento)

    def sin_pasaporte(self):
        deshabilitar_campo(self, 'pasaporte')

    def sin_fechanacimiento(self):
        deshabilitar_campo(self, 'nacimiento')

    def sin_emailinst(self):
        deshabilitar_campo(self, 'emailinst')


class PersonaSubirCedulaForm(forms.Form):
    cedula = ExtFileField(label=u'Cédula de Ciudadanía', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)
    papeleta = ExtFileField(label=u'Papeleta de Votación', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)


class PersonaSubirFotoForm(forms.Form):
    foto = ExtFileField(label=u'Seleccione Imagen', help_text=u'Tamaño Maximo permitido 500Kb, en formato jpg', ext_whitelist=(".jpg",), max_upload_size=524288)


class MallaForm(forms.Form):
    carrera = ModelChoiceField(label=u'Carrera', queryset=Carrera.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '65%'}))
    codigo = forms.CharField(label=u"Código de la Carrera emitido por el CES", max_length=200, required=False, widget=forms.TextInput(attrs={'formwidth': '35%'}))
    modalidad = ModelChoiceField(label=u'Modalidad', queryset=Modalidad.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    vigente = forms.BooleanField(label=u'Vigente', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    nivelsuficiencia = ModelChoiceField(label=u'Nivel de suficiencia', queryset=NivelSuficencia.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    inicio = forms.DateField(label=u"Fecha Vigencia Carrera (Desde)", input_formats=['%d-%m-%Y'], required=False, widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fin = forms.DateField(label=u"Fecha Vigencia Carrera (Hasta)", input_formats=['%d-%m-%Y'], required=False, widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    creditoporhora = forms.FloatField(label=u"Número de horas por Crédito", initial="0.0000", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4', 'formwidth': '50%'}))
    libre_opcion = forms.IntegerField(label=u'Máximas libre opción', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    optativas = forms.IntegerField(label=u'Máximas optativas', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    creditos_completar = forms.FloatField(label=u"Créditos a completar", initial="0.0000", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4', 'formwidth': '50%'}))
    materias_completar = forms.IntegerField(label=u"Materias a completar", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    niveles_regulares = forms.IntegerField(label=u"Periodos Académicos de la Carrera", initial=6, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    porciento_nivel = forms.IntegerField(label=u"Porciento completar nivel", initial=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    creditos_vinculacion = forms.FloatField(label=u"Créditos a completar Vinculación", initial="0.0000", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4', 'formwidth': '50%'}))
    horas_vinculacion = forms.IntegerField(label=u'Horas Vinculación', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    creditos_practicas = forms.FloatField(label=u"Créditos a completar Prácticas PreProfesionales", initial="0.0000", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4', 'formwidth': '50%'}))
    horas_practicas = forms.IntegerField(label=u'Horas Prácticas PreProfesionales', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    creditos_titulacion = forms.FloatField(label=u"Créditos a completar Unidad de Titulación/Integración Curricular", initial="0.0000", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4', 'formwidth': '50%'}))
    horas_titulacion = forms.IntegerField(label=u'Horas Totales Unidad de Titulación/Integración Curricular', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    creditos_computacion = forms.FloatField(label=u"Créditos a completar Computación", initial="0.0000", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4', 'formwidth': '50%'}))
    semanas = forms.IntegerField(label=u"Duración del Periodo Académico (Semanas)", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    misioncarrera = forms.CharField(label=u"Misión de la carrera", widget=forms.Textarea(attrs={'rows': '5'}), required=False)
    perfilprofesional = forms.CharField(label=u"Perfil Profesional de la Carrera", widget=forms.Textarea(attrs={'rows': '5'}), required=False)
    perfilegreso = forms.CharField(label=u"Perfil de Egreso de la Carrera", widget=forms.Textarea(attrs={'rows': '5'}), required=False)
    objetivocarrera = forms.CharField(label=u"Objetivo de la carrera", widget=forms.Textarea(attrs={'rows': '5'}), required=False)
    resolucion = forms.CharField(label=u'Número de la Resolución de Aprobación del CES', max_length=500, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    archivo = ExtFileField(label=u'Archivo PDF Resolución de Aprobación del CES.', required=False, help_text=u'Tamaño Maximo permitido 150Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=153600000)
    archivo_proyecto = ExtFileField(label=u'Archivo PDF Proyecto Final cargado al CES', required=False, help_text=u'Tamaño Maximo permitido 150Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=153600000)
    archivo_proyectorediseñado = ExtFileField(label=u'Archivo PDF Proyecto Rediseñado', required=False, help_text=u'Tamaño Maximo permitido 150Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=153600000)
    tituloobtenidohombre = forms.CharField(label=u"Titulo obtenido de hombre", required=False, max_length=999, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    tituloobtenidomujer = forms.CharField(label=u"Titulo obtenido de mujer", required=False, max_length=999, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    campo_especifico = forms.ModelChoiceField(label=u"Campo específico para prácticas preprofesionales", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=2).order_by('codigo'), required=False, widget=forms.Select())
    maxhoras_contactodocente_matricula = forms.FloatField(label=u'Máximo de horas de contacto docente en matrícula', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%', 'separator2': 'true',  "separatortitle": "PROCESO DE MATRICULACIÓN"}))
    maxhoras_semanal_matricula = forms.FloatField(label=u"Máximo de horas semanales en matrícula", initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'formwidth': '50%'}))

    def editar(self):
        deshabilitar_campo(self, 'carrera')

    def por_miscarreras(self, miscarreras):
        self.fields['carrera'].queryset = miscarreras

    def sin_campo_especifico(self):
        del self.fields['campo_especifico']

    def malla_cerrada(self):
        deshabilitar_campo(self, 'carrera')
        deshabilitar_campo(self, 'codigo')
        deshabilitar_campo(self, 'modalidad')
        deshabilitar_campo(self, 'vigente')
        deshabilitar_campo(self, 'inicio')
        deshabilitar_campo(self, 'fin')
        deshabilitar_campo(self, 'creditoporhora')
        deshabilitar_campo(self, 'libre_opcion')
        deshabilitar_campo(self, 'optativas')
        deshabilitar_campo(self, 'creditos_completar')
        deshabilitar_campo(self, 'materias_completar')
        deshabilitar_campo(self, 'niveles_regulares')
        deshabilitar_campo(self, 'porciento_nivel')
        deshabilitar_campo(self, 'creditos_vinculacion')
        deshabilitar_campo(self, 'horas_vinculacion')
        deshabilitar_campo(self, 'creditos_practicas')
        deshabilitar_campo(self, 'horas_practicas')
        deshabilitar_campo(self, 'creditos_titulacion')
        deshabilitar_campo(self, 'horas_titulacion')
        deshabilitar_campo(self, 'creditos_computacion')
        deshabilitar_campo(self, 'semanas')


class MallaLineaForm(forms.Form):
    lineainvestigacion = forms.CharField(label=u'Linea de investigación', widget=CKEditorUploadingWidget(), required=True)


class RetirarMatriculaForm(forms.Form):
    motivo = ModelChoiceField(label=u'Motivo de retiro', required=True, queryset=MotivoRetiroMatricula.objects.all(), widget=forms.Select({'class': 'validate[required]'}))
    archivo = ExtFileField(label=u'Adjuntar archivo', required=True, help_text=u'Adjunte un archivo que justifique su solicitud de retiro de matrícula. Tamaño Maximo permitido 3Mb, en formato docx, pdf', ext_whitelist=(".pdf", ".doc", ".docx",), max_upload_size=3145728)
    observaciones = forms.CharField(label=u'Observaciones', max_length=10000, widget=forms.Textarea({'row': '2', 'class': 'validate[required]'}))
    materias_asignadas = forms.ModelMultipleChoiceField(label=u'Materias', required=False, queryset=MateriaAsignada.objects.none(), widget=forms.CheckboxSelectMultiple())

    def llenar_materias_asignadas(self, materias, puede_seleccionar=False):
        self.fields['materias_asignadas'].queryset = materias
        if puede_seleccionar:
            self.fields['materias_asignadas'].widget.attrs = {'checked': 'checked', 'readonly': 'readonly', 'style': 'display:none;'}
            self.fields['materias_asignadas'].help_text = ''

    def noingresararchivo(self):
        self.fields['archivo'].required = False


class SolRetMatRevisionesForm(forms.Form):
    observaciones = forms.CharField(label=u'Observaciones', max_length=10000, widget=forms.Textarea({'cols': '40', 'rows': '7', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}))
    estado_solicitud = forms.IntegerField(min_value=1, max_value=2, label=u'Estado (Aprueba o Rechaza)', widget=forms.HiddenInput({'class': 'validate[required]', 'value': '0'}))
    archivo = ExtFileField(label=u'Adjuntar archivo',
                           help_text=u'Tamaño Maximo permitido 3Mb, en formato docx, pdf',
                           ext_whitelist=(".pdf", ".doc", ".docx",), widget=forms.FileInput({'style': 'display:none;', 'class': 'validate[required]'}),
                           max_upload_size=3145728)

    def noingresararchivo(self):
        self.fields['archivo'].required = False
        self.fields['archivo'].widget.attr = {'style': 'display:none;'}


class ArchivoPdfForm(forms.Form):
    # archivo = ExtFileField(required=False ,label=u'Adjuntar archivo',help_text=u'Tamaño Maximo permitido 10Mb, en formato docx, pdf',ext_whitelist=(".pdf", ".doc", ".docx",), widget=forms.FileInput({'style': 'display:none;', 'class': 'validate[required]'}),max_upload_size=10485760)
    archivo = ExtFileField(label=u'Adjuntar archivo', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=10485760)


class ReporteEstudiantesRetiradosForm(forms.Form):
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.filter(status=True).exclude(coordinacion=7), required=False, widget=forms.Select({'class': 'select2'}))
    nivel = forms.ModelChoiceField(Nivel.objects.none(), label=u'Nivel', widget=forms.Select({'class': 'select2'}))
    fecha_desde = forms.DateField(label=u'Fecha desde', initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fecha_hasta = forms.DateField(label=u'Fecha hasta', initial=datetime.now().date() + timedelta(days=1), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class RequisitoMallaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=100)
    cantidad = forms.IntegerField(label=u'Cantidad',
                                  widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    requisitos = forms.ModelMultipleChoiceField(label=u'Requisitos', queryset=Asignatura.objects.all(), required=False)



class CambiomallaForm(forms.Form):
    malla_nueva = ModelChoiceField(label=u'Nueva Malla', queryset=Malla.objects.all())

    def mallas(self, carrera):
        if carrera.coordinacion_carrera().id == 7:
            self.fields['malla_nueva'].queryset = Malla.objects.filter(carrera=carrera, vigente=True)
        else:
            self.fields['malla_nueva'].queryset = Malla.objects.filter(carrera=carrera, validamatricula=True)


class CambionivelmallaForm(forms.Form):
    nuevonivel = ModelChoiceField(label=u'Nuevo Nivel', queryset=NivelMalla.objects.all())


class InscripcionTipoInscripcionForm(forms.Form):
    tipoinscripcion = forms.ModelChoiceField(TipoInscripcion.objects.all(), label=u'Tipo de Inscripción')


class AsignaturaMallaForm(forms.Form):
    ejeformativo = ModelChoiceField(label=u'Eje Formativo', queryset=EjeFormativo.objects.filter(status=True), required=False)
    unidad_organizacion_curricular = ModelChoiceField(label=u'Unidad de Organización Curricular', queryset=UnidadOrganizacionCurricular.objects.filter(status=True), required=False)
    asignatura = ModelChoiceField(label=u'Asignatura', queryset=Asignatura.objects.all(), required=False)
    nivel = ModelChoiceField(label=u'Nivel', queryset=NivelMalla.objects.all(), required=False)
    tipomateria = ModelChoiceField(label=u'Tipo de asignatura', queryset=TipoMateria.objects.all(), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    reemplazo = ModelChoiceField(label=u'Reemplazo', queryset=AsignaturaMalla.objects.all(), required=False)
    identificacion = forms.CharField(label=u'Identificación', max_length=30, required=False, widget=forms.TextInput(attrs={'class': 'imp-50', 'formwidth': '100%'}))
    horas = forms.IntegerField(label=mark_safe(u"<strong>Horas Totales de la asignatura</strong>"), initial=0, widget=forms.TextInput(attrs={'class': 'imp-number', 'formwidth': '50%'}))
    creditos = forms.FloatField(label=u"Créditos ", initial="0.0000", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4', 'formwidth': '50%'}))
    horasacdtotal = forms.FloatField(label=mark_safe(u"<strong>Horas Aprendizaje Contacto Docente (ACD) Totales</strong>"), initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasacdsemanal = forms.FloatField(label=mark_safe(u"<strong>Horas Aprendizaje Contacto Docente Semanales</strong>"), initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horaspresenciales = forms.FloatField(label=u"Horas ACD Presenciales Totales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horaspresencialessemanales = forms.FloatField(label=u"Horas ACD Presenciales Semanales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasvirtualtotal = forms.FloatField(label=u"Horas ACD Virtuales Totales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasvirtualsemanal = forms.FloatField(label=u"Horas ACD Virtuales Semanales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasapetotal = forms.FloatField(label=mark_safe(u"<strong>Horas Aprendizaje Práctico Experimental(APE) Totales</strong>"), initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasapesemanal = forms.FloatField(label=mark_safe(u"<strong>Horas Aprendizaje Práctico Experimental Semanales</strong>"), initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasapeasistotal = forms.FloatField(label=u"Horas APE asistidas Totales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasapeasissemanal = forms.FloatField(label=u"Horas APE asistidas Semanales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasapeautototal = forms.FloatField(label=u"Horas APE no asistidas Totales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasapeautosemanal = forms.FloatField(label=u"Horas APE no asistidas Semanales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasautonomas = forms.FloatField(label=mark_safe(u"<strong>Horas Aprendizaje Autónomo(AA) Totales</strong>"), initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasautonomassemanales = forms.FloatField(label=mark_safe(u"<strong>Horas Aprendizaje Autónomo Semanales</strong>"), initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasvinculaciontotal = forms.FloatField(label=u"Horas Vinculación Totales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasvinculacionsemanal = forms.FloatField(label=u"Horas Vinculación Semanales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasppptotal = forms.FloatField(label=u"Horas Prácticas Pre-profesionales Totales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horaspppsemanal = forms.FloatField(label=u"Horas Prácticas Pre-profesionales semanales", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasteoriatitutotal = forms.FloatField(label=u"Horas Teoría Titulación Totales", initial=0, required=False,widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    porcentajecalificacion = forms.FloatField(label=u'Porcentaje máximo calificación', initial=0, required=False,widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2','formwidth': '50%'}))
    itinerario = forms.ChoiceField(label=u"Itinerario", choices=ITINERARIO_ASIGNATURA_MALLA, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    itinerario_malla_especialidad = ModelChoiceField(label=u'Nombre itinerario', queryset=ItinerarioMallaEspecilidad.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    horaspracticastotales = forms.IntegerField(label=u'Horas de prácticas totales', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horaspracticassemanales = forms.FloatField(label=u'Horas de prácticas semanales', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horasasistidas = forms.IntegerField(label=u'Horas asistidas', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    horascolaborativas = forms.IntegerField(label=u'Horas colaborativas', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))

    costo = forms.FloatField(label=u"Costo", initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '50%'}))
    rectora = forms.BooleanField(label=u'Rectora', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    practicas = forms.BooleanField(label=u'Prácticas', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    opcional = forms.BooleanField(label=u'Opcional', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    vigente = forms.BooleanField(label=u'Vigente', initial=True, required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    validarequisitograduacion = forms.BooleanField(label=u'Tiene requisito graduación', initial=False, required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    afinidaddoctorado = forms.BooleanField(label=u'Tiene Afinidad Doctorado', initial=False, required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))



    areaconocimiento = ModelChoiceField(label=u'Area de formación', queryset=AreaConocimiento.objects.filter(status=True), required=False)
    # formacion = ModelChoiceField(label=u'Formación', queryset=CampoFormacion.objects.filter(status=True), required=False)
    areaconocimientotitulacion = forms.ModelChoiceField(label=u"Area conocimiento - Campo amplio", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False, widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento - Campo específico", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especificaconocimiento - Campo Detallado", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())

    modalidadmalla = forms.CharField(label=u"", widget=forms.HiddenInput())
    nivelsuficiencia = ModelChoiceField(label=u'Nivel de suficiencia', queryset=NivelSuficencia.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    transversal = forms.BooleanField(label=u'Es transversal?', initial=False, required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    asignaturapracticas = forms.BooleanField(label=u'¿Es asignatura de practicas pre profesionales?', initial=False, required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    nohomologa = forms.BooleanField(label=u'¿No tomar en cuenta para homologación?', initial=False, required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


    def sin_reemplazo(self):
        del self.fields['reemplazo']

    def adicionar(self, asignatura, malla):
        self.fields['asignatura'].queryset = Asignatura.objects.all().exclude(id__in=asignatura)
        self.fields['reemplazo'].queryset = AsignaturaMalla.objects.filter(malla=malla)
        if not COSTO_EN_MALLA:
            del self.fields['costo']
        if not malla.carrera.modalidad == 3:
            del self.fields['porcentajecalificacion']
        else:
            self.fields['horaspresenciales'].label = 'Horas ACD Virtuales asincrónicas Totales'
            self.fields['horasvirtualtotal'].label = 'Horas ACD virtuales sincrónicas Totales'
            self.fields['horaspresencialessemanales'].label = 'Horas ACD Virtuales asincrónicas Semanales'
            self.fields['horasvirtualsemanal'].label = 'Horas ACD virtuales sincrónicas Semanales'

        campo_modolectura(self, 'horasacdtotal', True)
        campo_modolectura(self, 'horasacdsemanal', True)
        campo_modolectura(self, 'horasapetotal', True)
        campo_modolectura(self, 'horasapesemanal', True)
        if malla.carrera.mi_coordinacion2() != 7:
            campo_modolectura(self, 'horas', True)
            # campo_modolectura(self, 'creditos', True)
            campo_modolectura(self, 'horaspresenciales', True)
            campo_modolectura(self, 'horasapeasistotal', True)
            campo_modolectura(self, 'horasapeautototal', True)
            campo_modolectura(self, 'horasautonomas', True)
            campo_modolectura(self, 'horasvirtualtotal', True)
            self.fields['itinerario_malla_especialidad'].queryset = ItinerarioMallaEspecilidad.objects.filter(status=True, malla=malla)
        else:
            if malla.modalidad_id == 1:
                campo_modolectura(self, 'horasvirtualtotal', True)
                campo_modolectura(self, 'horasvirtualsemanal', True)
            elif malla.modalidad_id == 3:
                campo_modolectura(self, 'horaspresenciales', True)
                campo_modolectura(self, 'horaspresencialessemanales', True)

        del self.fields['horasasistidas']
        del self.fields['horascolaborativas']
        del self.fields['horaspracticastotales']
        del self.fields['horaspracticassemanales']

        self.fields['modalidadmalla'].initial = malla.modalidad_id

    def editar(self, asignaturamalla):
        deshabilitar_campo(self, 'asignatura')
        # deshabilitar_campo(self, 'itinerario_malla_especialidad')
        # deshabilitar_campo(self, 'ejeformativo')
        self.fields['reemplazo'].queryset = AsignaturaMalla.objects.filter(malla=asignaturamalla.malla)
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=asignaturamalla.areaconocimientotitulacion, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=asignaturamalla.subareaconocimiento, vigente=True)
        if not COSTO_EN_MALLA:
            del self.fields['costo']

        if not asignaturamalla.malla.carrera.modalidad == 3:
            del self.fields['porcentajecalificacion']
        else:
            self.fields['horaspresenciales'].label = 'Horas ACD Virtuales asincrónicas Totales'
            self.fields['horasvirtualtotal'].label = 'Horas ACD virtuales sincrónicas Totales'
            self.fields['horaspresencialessemanales'].label = 'Horas ACD Virtuales asincrónicas Semanales'
            self.fields['horasvirtualsemanal'].label = 'Horas ACD virtuales sincrónicas Semanales'

        campo_modolectura(self, 'horasacdtotal', True)
        campo_modolectura(self, 'horasacdsemanal', True)
        campo_modolectura(self, 'horasapetotal', True)
        campo_modolectura(self, 'horasapesemanal', True)
        # campo_modolectura(self, 'itinerario_malla_especialidad', True)
        if asignaturamalla.malla.carrera.mi_coordinacion2() != 7:
            campo_modolectura(self, 'horaspresenciales', True)
            campo_modolectura(self, 'horasapeasistotal', True)
            campo_modolectura(self, 'horasapeautototal', True)
            campo_modolectura(self, 'horasautonomas', True)
            campo_modolectura(self, 'horasvirtualtotal', True)
            campo_modolectura(self, 'horas', True)

            # deshabilitar_campo(self, 'creditos')
            if asignaturamalla.malla.cerrado:
                deshabilitar_campo(self, 'creditos')
                deshabilitar_campo(self, 'ejeformativo')
                deshabilitar_campo(self, 'nivel')
                deshabilitar_campo(self, 'tipomateria')
                deshabilitar_campo(self, 'identificacion')
                deshabilitar_campo(self, 'itinerario')
                deshabilitar_campo(self, 'itinerario_malla_especialidad')
                deshabilitar_campo(self, 'horaspresencialessemanales')
                deshabilitar_campo(self, 'horasvirtualsemanal')
                deshabilitar_campo(self, 'horasapeasissemanal')
                deshabilitar_campo(self, 'horasapeautosemanal')
                deshabilitar_campo(self, 'horasautonomassemanales')
                deshabilitar_campo(self, 'horasvinculaciontotal')
                deshabilitar_campo(self, 'horasvinculacionsemanal')
                deshabilitar_campo(self, 'horasppptotal')
                deshabilitar_campo(self, 'horaspppsemanal')

            self.fields['itinerario_malla_especialidad'].queryset = ItinerarioMallaEspecilidad.objects.filter(status=True, malla=asignaturamalla.malla)
        else:
            if asignaturamalla.malla.modalidad_id == 1:
                campo_modolectura(self, 'horasvirtualtotal', True)
                campo_modolectura(self, 'horasvirtualsemanal', True)

        if asignaturamalla.malla.carrera.niveltitulacion_id == 4:
            campo_modolectura(self, 'horasvirtualtotal', False)
            campo_modolectura(self, 'horasvirtualsemanal', False)

        # elif asignaturamalla.malla.modalidad_id == 3:
        #     campo_modolectura(self, 'horaspresenciales', True)
        #     campo_modolectura(self, 'horaspresencialessemanales', True)

        del self.fields['horasasistidas']
        del self.fields['horascolaborativas']
        del self.fields['horaspracticastotales']
        del self.fields['horaspracticassemanales']

        self.fields['modalidadmalla'].initial = asignaturamalla.malla.modalidad_id


class CambioAsignaturaMallaForm(forms.Form):
    asignatura = ModelChoiceField(label=u'Asignatura', queryset=Asignatura.objects.all(), required=False)


class AsignaturaMallaPredecesoraForm(forms.Form):
    predecesora = ModelChoiceField(label=u'Asignatura', queryset=AsignaturaMalla.objects.all())

    def for_exclude_asignatura(self, asignaturamalla):
        if asignaturamalla.malla.carrera.coordinacion_carrera():
            if asignaturamalla.malla.carrera.coordinacion_carrera().id == 7:
                self.fields['predecesora'].queryset = asignaturamalla.malla.asignaturamalla_set.filter(status=True)
            else:
                self.fields['predecesora'].queryset = asignaturamalla.malla.asignaturamalla_set.filter(status=True,nivelmalla_id__lt=asignaturamalla.nivelmalla.id)

class AsignaturaMallaModalidadForm(forms.Form):
    modalidad = forms.ChoiceField(label=u"Impartición de Clases", choices=MODALIDAD_IMPARTICION, required=False, widget=forms.Select())


class AsignaturaMallaCoRequisitoForm(forms.Form):
    corequisito = ModelChoiceField(label=u'Asignatura', queryset=AsignaturaMalla.objects.all())

    def select_asignatura(self, asignaturamalla, corequisitos, idasignaturamalla):
        self.fields['corequisito'].queryset = asignaturamalla.malla.asignaturamalla_set.filter(nivelmalla_id=asignaturamalla.nivelmalla.id).exclude(Q(id__in=corequisitos) | Q(id=idasignaturamalla))


class AsignaturaMallaHomologacionForm(forms.Form):
    homologacion = ModelChoiceField(label=u'Asignatura', queryset=AsignaturaMalla.objects.all())

    def select_asignatura(self, asignaturamalla, homologaciones, idasignaturamalla):
        self.fields['homologacion'].queryset = asignaturamalla.malla.asignaturamalla_set.filter(nivelmalla_id=asignaturamalla.nivelmalla.id).exclude(Q(id__in=homologaciones) | Q(id=idasignaturamalla))


class AsignaturaModuloForm(forms.Form):
    asignatura = ModelChoiceField(label=u'Asignatura', queryset=Asignatura.objects.filter(modulo=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    tipo = forms.ChoiceField(label=u"Tipo de Módulo", choices=TIPO_MODULO_MALLA, required=False, widget=forms.Select())
    horas = forms.IntegerField(label=mark_safe(u"<strong>Horas</strong>"), initial=0, widget=forms.TextInput(attrs={'class': 'imp-number', 'formwidth': '50%'}))
    creditos = forms.FloatField(label=mark_safe(u"<strong>Créditos</strong>"), initial="0.0000", widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4', 'formwidth': '50%'}))
    orden = forms.FloatField(label=mark_safe(u"<strong>Orden</strong>"), initial="0", widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))

    def editar(self):
        deshabilitar_campo(self, 'asignatura')

    def clean(self):
        super(AsignaturaModuloForm, self).clean()
        id = self.data.get('id') if 'id' in self.data and self.data.get('id') else None
        if not id:
            self._errors['asignatura'] = self.error_class(['Seleccione una asignatura'])
        return self.cleaned_data


class CarreraForm(forms.Form):
    coordinacion = ModelChoiceField(label=u'Facultad', queryset=Coordinacion.objects.filter(status=True), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    carreragrupo = ModelChoiceField(label=u'Grupo carrera', queryset=CarreraGrupo.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '60%'}))
    tipo = forms.ChoiceField(label=u"Tipo (*)", choices=TIPO_CARRERA, required=False, widget=forms.Select(attrs={'formwidth': '40%'}))
    nombre = forms.CharField(label=u"Nombre (*)", max_length=250, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    mencion = forms.CharField(label=u"Mención", max_length=100, required=False, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    codigo = forms.CharField(label=u"Código (*)", max_length=100, required=True, widget=forms.TextInput(attrs={'formwidth': '50%'}))
    alias = forms.CharField(label=u"Alias", max_length=50, required=False, widget=forms.TextInput(attrs={'formwidth': '50%'}))
    titulootorga = forms.CharField(label=u"Titulo que otorga (*)", required=False, max_length=100, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    activa = forms.BooleanField(initial=True, label=u"Activa", required=False, widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))
    enteaprobadorcarrera = ModelChoiceField(label=u'Ente Aprobador', queryset=EnteAprobadorCarrera.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '35%', 'labelwidth': '95px'}))
    modalidad = forms.ChoiceField(label=u"Modalidad (*)", choices=MODALIDAD_CARRERA, required=False, widget=forms.Select(attrs={'formwidth': '35%', 'labelwidth': '95px'}))
    numeroresolucion = forms.CharField(label=u"Número de resolución del ente que aprobó (*)", required=False,
                                       max_length=250, widget=forms.TextInput(attrs={'formwidth': '40%'}))
    resolucion = ExtFileField(label=u'Resolución ente que aprobó (*)', required=False,
                              help_text=u'Tamaño Maximo permitido 150Mb, en formato pdf', ext_whitelist=(".pdf"),
                              max_upload_size=153600000,
                              widget=forms.FileInput(attrs={'formwidth': '30%', 'labelwidth': '100px'}))
    fechaaprobacion = forms.DateField(label=u"Fecha de aprobación-ente aprobador (*)", input_formats=['%d-%m-%Y'],
                                      required=False, widget=DateTimeInput(format='%d-%m-%Y',
                                                                           attrs={'class': 'selectorfecha',
                                                                                  'formwidth': '30%',
                                                                                  'labelwidth': '100px'}))
    codigoresolucionies = forms.CharField(label=u"Número de resolución IES (*)", required=False, max_length=250,
                                          widget=forms.TextInput(attrs={'formwidth': '40%'}))
    resolucionies = ExtFileField(label=u'Resolución IES (*)', required=False,
                                 help_text=u'Tamaño Maximo permitido 150Mb, en formato pdf', ext_whitelist=(".pdf"),
                                 max_upload_size=153600000,
                                 widget=forms.FileInput(attrs={'formwidth': '30%', 'labelwidth': '100px'}))
    fechacreacioncarrera = forms.DateField(label=u"Fecha de creación IES (*)", input_formats=['%d-%m-%Y'],
                                           required=False, widget=DateTimeInput(format='%d-%m-%Y',
                                                                                attrs={'class': 'selectorfecha',
                                                                                       'formwidth': '30%'}))
    anovigencia = forms.IntegerField(label=u"Años de vigencia", initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '25%', 'separator': 'true'}))
    niveltitulacion = forms.ModelChoiceField(NivelTitulacion.objects.filter(id__in=[3, 4], status=True, tipo=1), label=u'Tipo de nivel',
                                             required=False, widget=forms.Select(attrs={'formwidth': '40%'}))
    archivoproyecto = ExtFileField(label=u'Diseño/Rediseño/Proyecto (*)', required=False,
                                   help_text=u'Tamaño Maximo permitido 150Mb, en formato pdf', ext_whitelist=(".pdf"),
                                   max_upload_size=153600000,
                                   widget=forms.FileInput(attrs={'formwidth': '35%', 'labelwidth': '80px'}))
    misioncarrera = forms.CharField(label=u"Misión de la carrera (*)", widget=forms.Textarea(attrs={'rows': '5'}),
                                    required=False)
    perfilprofesional = forms.CharField(label=u"Perfil profesional (*)", widget=forms.Textarea(attrs={'rows': '5'}),
                                        required=False)
    perfilegreso = forms.CharField(label=u"Perfil egreso (*)", widget=forms.Textarea(attrs={'rows': '5'}),
                                   required=False)
    objetivocarrera = forms.CharField(label=u"Objetivo de la carrera (*)", widget=forms.Textarea(attrs={'rows': '5'}),
                                      required=False)
    campoocupacional = forms.CharField(label=u"Campo ocupacional", widget=forms.Textarea(attrs={'rows': '5'}),
                                       required=False)
    camporotacion = forms.CharField(label=u"Campo rotación", widget=forms.Textarea(attrs={'rows': '5'}), required=False)
    tituloobtenidohombre = forms.CharField(label=u"Titulo obtenido de hombre", required=False, max_length=999,
                                           widget=forms.TextInput(attrs={'class': 'imp-100'}))
    tituloobtenidomujer = forms.CharField(label=u"Titulo obtenido de mujer", required=False, max_length=999, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    abrsustentacion = forms.CharField(label=u"Abreviatura(aparece en acta de sustentación)", required=False, max_length=999, widget=forms.TextInput(attrs={'class': 'imp-100'}))


class EditarNombreCarreraForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre (*)", max_length=250, widget=forms.TextInput(attrs={'class': 'imp-100'}))

    def set_initial(self, eCarrera=None):
        if eCarrera:
            self.fields['nombre'].initial = eCarrera.nombre if not eCarrera.nombrevisualizar else eCarrera.nombrevisualizar


class CarreraPrincipalForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=250, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    activa = forms.BooleanField(initial=True, label=u"Activa", required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


class InstitucionEducacionSuperiorForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=100, widget=forms.TextInput(attrs={'class': 'imp-75'}))
    codigo = forms.CharField(label=u"Codigo", max_length=10, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-75'}))
    pais = forms.ModelChoiceField(label=u"Pais", queryset=Pais.objects.filter(status=True), required=True,
                                  widget=forms.Select(attrs={'formwidth': '75%'}))


class InstitucionesColegioForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=100, widget=forms.TextInput(attrs={'class': 'imp-75'}))
    provincia = forms.ModelChoiceField(label=u"Provincia",
                                       queryset=Provincia.objects.filter(pais_id=1, status=True).order_by('nombre'),
                                       required=True, widget=forms.Select(attrs={'formwidth': '75%'}))
    canton = forms.ModelChoiceField(label=u"Canton", queryset=Canton.objects.filter(status=True).order_by('nombre'),
                                    required=True, widget=forms.Select(attrs={'formwidth': '75%'}))
    tipocolegio = forms.ModelChoiceField(label=u"Tipo Colegio", queryset=TipoColegio.objects.all(), required=True,
                                         widget=forms.Select(attrs={'formwidth': '75%'}))

    def editar(self, colegio):
        self.fields['canton'].queryset = Canton.objects.filter(provincia=colegio.provincia)


class CostoInscripcionCarrera(forms.Form):
    costoinscripcion = forms.FloatField(label=u"Costo inscripción", initial="0.00",
                                        widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))


class ResponsableCarreraForm(forms.Form):
    responsable = forms.ModelChoiceField(label=u"Responsable", queryset=Persona.objects.filter(perfilusuario__profesor__isnull=False).distinct())

    def editar(self):
        self.fields['responsable'].queryset = Persona.objects.filter(perfilusuario__profesor__isnull=False).distinct()


class ResponsableCarrera2Form(forms.Form):
    responsable = forms.ModelChoiceField(label=u"Responsable", queryset=Persona.objects.filter(
        perfilusuario__profesor__isnull=False).distinct())
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_COORDINADOR, widget=forms.Select(attrs={'class': 'imp-50'}))


class GrupoResponsableCarreraForm(forms.Form):
    grupo = forms.ModelChoiceField(label=u"Grupos", queryset=Group.objects.all().exclude(
        id__in=[EMPLEADORES_GRUPO_ID, ALUMNOS_GROUP_ID]).order_by('name'),
                                   widget=forms.Select(attrs={'class': 'imp-75'}))


class CronogramaMatriculacionForm(forms.Form):
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False)
    modalidad = forms.ModelChoiceField(label=u"Modalidad", queryset=Modalidad.objects.all(),
                                       widget=forms.Select(attrs={'class': 'imp-50'}), required=False)
    nivelmalla = forms.ModelChoiceField(label=u"Nivel", queryset=NivelMalla.objects.all(), required=False,
                                        widget=forms.Select(attrs={'class': 'imp-50'}))
    inicio = forms.DateField(label=u"Fecha inicio", input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    prematricula = forms.BooleanField(label=u"Solo prematriculados", initial=False, required=False)
    dias = forms.IntegerField(label=u"Dias Pre-Matricula", initial=0, required=False,
                              widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))

    def editar(self):
        deshabilitar_campo(self, 'carrera')
        deshabilitar_campo(self, 'modalidad')
        deshabilitar_campo(self, 'nivelmalla')


class CronogramaMatriculacionFormPre(forms.Form):
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False)
    modalidad = forms.ModelChoiceField(label=u"Modalidad", queryset=Modalidad.objects.all(),
                                       widget=forms.Select(attrs={'class': 'imp-50'}), required=False)
    nivelmalla = forms.ModelChoiceField(label=u"Nivel", queryset=NivelMalla.objects.all(), required=False,
                                        widget=forms.Select(attrs={'class': 'imp-50'}))
    inicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))

    def editar(self):
        deshabilitar_campo(self, 'carrera')
        deshabilitar_campo(self, 'modalidad')
        deshabilitar_campo(self, 'nivelmalla')


class CronogramaMatriculacionFormModulo(forms.Form):
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False)
    modalidad = forms.ModelChoiceField(label=u"Modalidad", queryset=Modalidad.objects.all(),
                                       widget=forms.Select(attrs={'class': 'imp-50'}), required=False)
    nivelmalla = forms.ModelChoiceField(label=u"Nivel", queryset=NivelMalla.objects.all(), required=False,
                                        widget=forms.Select(attrs={'class': 'imp-50'}))
    inicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))

    def editar(self):
        deshabilitar_campo(self, 'carrera')
        deshabilitar_campo(self, 'modalidad')
        deshabilitar_campo(self, 'nivelmalla')


class PeriodoGrupoSocioEconomicoForm(forms.Form):
    from socioecon.models import GrupoSocioEconomico
    gruposocioeconomico = forms.ModelChoiceField(label=u"Grupo",
                                                 queryset=GrupoSocioEconomico.objects.filter(status=True),
                                                 required=False)
    valor = forms.FloatField(label=u'Valor ', initial="0.00", required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))

    def editar(self):
        deshabilitar_campo(self, 'gruposocioeconomico')


class PeriodoVariablesGrupoSocioEconomicoForm(forms.Form):
    presupuesto = forms.FloatField(label=u'Presupuesto', initial="0.00", required=False, widget=forms.TextInput(
        attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '35%'}))
    totalestudiantes = forms.IntegerField(label=u"Total estudiantes", initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '35%'}))
    semestreanio = forms.IntegerField(label=u"Semestres por año", initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '30%'}))
    limite = forms.IntegerField(label=u"Límite", initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '35%'}))
    nivelmalla = forms.IntegerField(label=u"Niveles de malla", initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '35%'}))
    creditocarrera = forms.IntegerField(label=u"Total creditos carrera", initial=0, required=False,
                                        widget=forms.TextInput(
                                            attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '30%'}))


class NivelForm(forms.Form):
    coordinacion = forms.ModelChoiceField(label=u"Coordinación", queryset=Coordinacion.objects.all(), required=False)
    sede = forms.ModelChoiceField(label=u"Sede", queryset=Sede.objects.all(), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False)
    malla = forms.ModelChoiceField(label=u"Malla", queryset=Malla.objects.all(), required=False)
    modalidad = forms.ModelChoiceField(label=u"Modalidad", queryset=Modalidad.objects.all(), widget=forms.Select(attrs={'class': 'imp-50'}), required=False)
    sesion = forms.ModelChoiceField(label=u"Sesion", queryset=Sesion.objects.filter(status=True), required=False)
    grupo = forms.ModelChoiceField(label=u"Grupo", queryset=Grupo.objects.all(), widget=forms.Select(attrs={'class': 'imp-75'}), required=False)
    nivelmalla = forms.ModelChoiceField(label=u"Nivel", queryset=NivelMalla.objects.all(), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    paralelo = forms.CharField(label=u"Paralelo", max_length=30, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    inicio = forms.DateField(label=u"Fecha inicio", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechainicioagregacion = forms.DateField(label=u"Fecha inicio agregación (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechatopematricula = forms.DateField(label=u"Fecha limite ordinaria (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechatopematriculaext = forms.DateField(label=u"Fecha limite extraordinaria (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechatopematriculaesp = forms.DateField(label=u"Fecha limite especial (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechafinagregacion = forms.DateField(label=u"Fecha fin agregación (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechafinquitar = forms.DateField(label=u"Fecha fin quitar (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    capacidad = forms.IntegerField(label=u"Capacidad", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    nivelgrado = forms.BooleanField(label=u"Costo Fijo", required=False, initial=False)

    def nivellibrecoordinacion(self, periodo):
        del self.fields['sede']
        del self.fields['nivelmalla']
        del self.fields['carrera']
        del self.fields['grupo']
        del self.fields['malla']
        del self.fields['capacidad']
        deshabilitar_campo(self, 'coordinacion')
        if NOMBRE_NIVEL_AUTOMATICO:
            del self.fields['paralelo']
        if periodo.tipo_id == 3:
            self.fields['sesion'].queryset = Sesion.objects.filter(Q(status=True) & Q(nombre__icontains='POSGRADO') & ~Q(pk=19))
        else:
            self.fields['sesion'].queryset = Sesion.objects.filter(Q(status=True) & (~Q(nombre__icontains='POSGRADO') | Q(pk=19)))

    def nivelregular(self, sede, carrera, periodo):
        del self.fields['coordinacion']
        self.fields['grupo'].queryset = Grupo.objects.filter(sede=sede, carrera=carrera)
        self.fields['malla'].queryset = Malla.objects.filter(carrera=carrera)
        if periodo.tipo.id == TIPO_PERIODO_REGULAR:
            self.fields['nivelmalla'].queryset = NivelMalla.objects.filter(nivelacion=False)
        else:
            self.fields['nivelmalla'].queryset = NivelMalla.objects.filter(nivelacion=True)
        deshabilitar_campo(self, 'sede')
        deshabilitar_campo(self, 'carrera')
        if UTILIZA_GRUPOS_ALUMNOS:
            self.con_grupo()
        else:
            self.sin_grupo()

    def sin_grupo(self):
        del self.fields['grupo']

    def con_grupo(self):
        del self.fields['sesion']
        del self.fields['modalidad']


class NoticiaForm(forms.Form):
    desde = forms.DateField(label=u"Desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={
        'class': 'selectorfecha', 'formwidth': '33%'}))
    hasta = forms.DateField(label=u"Hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={
        'class': 'selectorfecha', 'formwidth': '33%'}))
    banerderecho = forms.BooleanField(label=u'Solo Baner derecho?', initial=False, required=False,
                                      widget=forms.CheckboxInput(attrs={'formwidth': '33%', 'class': 'js-switch'}))
    titular = forms.CharField(label=u"Titular", max_length=100)
    imagen = ExtFileField(label=u'Seleccione Imagen', required=False,
                          help_text=u'Tamaño Maximo permitido 2Mb, en formato jpg o png',
                          ext_whitelist=(".jpeg", ".jpg", ".png"), max_upload_size=2097152)
    cuerpo = forms.CharField(label=u"Cuerpo", required=True, widget=CKEditorUploadingWidget())
    tiene_muestra = forms.BooleanField(label=u'Tiene Muestra?', initial=False, required=False,  widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))
    publicacion = forms.ChoiceField(label=u'Publicar en', choices=PUBLICACION, widget=forms.Select(attrs={'class': 'imp-100', 'formwidth': '50%'}))
    tipo = forms.ModelChoiceField(label=u"Filtrar", queryset=TipoNoticias.objects.all(), widget=forms.Select(attrs={'class': 'imp-100 select-multiple-field', 'formwidth': '100%', 'multiple': "multiple"}))


class CargarMuestraForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo solicitud', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xlsx",), max_upload_size=4194304,
                           widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'xlsx'}))


class NivelFormEdit(forms.Form):
    paralelo = forms.CharField(label=u"Paralelo", max_length=30, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    inicio = forms.DateField(label=u"Fecha inicio", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha fin", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechainicioagregacion = forms.DateField(label=u"Fecha inicio agregación (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechatopematricula = forms.DateField(label=u"Fecha limite ordinaria (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechatopematriculaext = forms.DateField(label=u"Fecha limite extraordinaria (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechatopematriculaesp = forms.DateField(label=u"Fecha limite especial (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechafinagregacion = forms.DateField(label=u"Fecha fin agregación (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechafinquitar = forms.DateField(label=u"Fecha fin quitar (Matrícula)", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    capacidad = forms.IntegerField(label=u"Capacidad", required=False, initial=0, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))

    def nivellibrecoordinacion(self):
        del self.fields['capacidad']
        self.fields['paralelo'].label = 'Jornada'


class OtroNivelForm(forms.Form):
    nivel = ModelChoiceField(label=u'Nivel', queryset=Nivel.objects.all(), required=False)

    def sin_minivel(self, nivel):
        self.fields['nivel'].queryset = Nivel.objects.filter(carrera=nivel.carrera, periodo=nivel.periodo,
                                                             sede=nivel.sede).exclude(id=nivel.id)


class MateriaNivelMalla(forms.Form):
    malla = ModelChoiceField(label=u'Malla curricular', queryset=Malla.objects.all(), required=False, widget=forms.Select(attrs={'class':'imp-100', 'col':'12'}))
    modelo = ModelChoiceField(label=u'Modelo evaluativo', queryset=ModeloEvaluativo.objects.filter(activo=True), required=False, widget=forms.Select(attrs={'class': 'imp-50', 'col':'12'}))
    parcial = forms.ChoiceField(label=u"Parcial", choices=PARCIAL, required=False, widget=forms.Select(attrs={'class': 'imp-25', 'col':'12'}))
    paralelo = forms.ModelMultipleChoiceField(label=u'Paralelo', queryset=Paralelo.objects.filter(status=True), required=False, widget=forms.SelectMultiple(attrs={'class': 'imp-100', 'col':'12'}))
    tipomateria = forms.ChoiceField(label=u"Tipo materia", choices=TIPOMATERIA, required=False, widget=forms.Select(attrs={'class': 'imp-50', 'col':'12'}))
    inglesepunemi = forms.BooleanField(label=u'Inglés EPUNEMI', initial=False, required=False, widget=forms.CheckboxInput(attrs={'class':'js-switch', 'col':'12'}))

    def mallas(self, mallaid):
        self.fields['malla'].queryset = Malla.objects.filter(id=mallaid)

    def modeloposgrado(self):
        self.fields['modelo'].queryset = ModeloEvaluativo.objects.filter((Q(pk__in=[13, 16]) | Q(nombre__icontains='POSGRADO')) & Q(activo=True))

    def quitar_inglesepunemi(self):
        del self.fields['inglesepunemi']

    def quitar_parcial(self):
        del self.fields['parcial']


class MateriaNivel(forms.Form):
    asignatura = ModelChoiceField(label=u'Asignatura', queryset=Asignatura.objects.all(), required=False)
    asignaturamalla = ModelChoiceField(label=u'Asignatura', queryset=AsignaturaMalla.objects.all(), required=False)
    alias = forms.CharField(label=u'Alias', required=False, max_length=100)
    modelo = ModelChoiceField(label=u'Modelo evaluativo', queryset=ModeloEvaluativo.objects.filter(activo=True),
                              required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    tipomateria = forms.ChoiceField(label=u"Tipo materia", choices=TIPOMATERIA, required=False,
                                    widget=forms.Select(attrs={'class': 'imp-50'}))
    seevalua = forms.BooleanField(label=u'Se Evalua?', initial=False, required=False)
    horas = forms.IntegerField(label=u"Horas Totales", initial=0, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall ', 'decimal': '0'}))
    creditos = forms.FloatField(label=u"Créditos", initial="0.0000", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4'}))
    horassemanales = forms.IntegerField(label=u"Horas Semanales", initial=0,
                                        widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    cupo = forms.IntegerField(label=u"Cupo", initial=0, required=False,
                              widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    identificacion = forms.CharField(label=u'Identificación', required=False, max_length=30,
                                     widget=forms.TextInput(attrs={'class': 'imp-25'}))
    paralelo = ModelChoiceField(label=u'Paralelo', queryset=Paralelo.objects.filter(status=True), required=False,
                                widget=forms.Select(attrs={'class': 'imp-50'}))
    parcial = forms.ChoiceField(label=u"Parcial", choices=PARCIAL, required=False,
                                widget=forms.Select(attrs={'class': 'imp-25'}))
    inicio = forms.DateField(label=u"Fecha inicio", input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha fin", input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    iniciomatriculacionposgrado = forms.DateField(label=u"Fecha inicio matriculación", input_formats=['%d-%m-%Y'], initial=datetime.now().date(), required=False,
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    finmatriculacionposgrado = forms.DateField(label=u"Fecha fin matriculación", input_formats=['%d-%m-%Y'], initial=datetime.now().date(), required=False,
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    rectora = forms.BooleanField(label=u'Materia general', initial=False, required=False)
    carreras = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.all(), required=False)
    tutoria = forms.BooleanField(label=u'Materia de tutoria', initial=False, required=False,widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    grado = forms.BooleanField(label=u'Materia de Grado', initial=False, required=False,widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    practicas = forms.BooleanField(label=u'Practicas pre-profesionales', initial=False, required=False,widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    validacreditos = forms.BooleanField(label=u'Valida para creditos', initial=True, required=False,widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    validapromedio = forms.BooleanField(label=u'Valida para promedio', initial=True, required=False,widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    esintroductoria = forms.BooleanField(label=u'Es introductoria (Entornos)', initial=False, required=False,widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    aplicamovilidad = forms.BooleanField(label=u'¿Aplica a movilidad interinstitucional?', initial=False, required=False
                                         , widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    inglesepunemi = forms.BooleanField(label=u'Inglés EPUNEMI', initial=False, required=False)
    sinasistencia = forms.BooleanField(label=u'¿Se debe considerar asistencia?', initial=False, required=False)


    def matriculacion_libre(self, mallaid, nivelmallaid):
        if not CUPO_POR_MATERIA:
            del self.fields['cupo']
        del self.fields['asignatura']
        deshabilitar_campo(self, 'horas')
        deshabilitar_campo(self, 'creditos')
        deshabilitar_campo(self, 'identificacion')
        if nivelmallaid:
            self.fields['asignaturamalla'].queryset = AsignaturaMalla.objects.filter(malla__id=mallaid,
                                                                                     nivelmalla__id=nivelmallaid).order_by(
                'asignatura__nombre').distinct()
        else:
            self.fields['asignaturamalla'].queryset = AsignaturaMalla.objects.filter(malla__id=mallaid).order_by('asignatura__nombre').distinct()

    def excluir_modeloactualposgrado(self, modeloevaluativo):
        if modeloevaluativo:
            self.fields['modelo'].queryset = ModeloEvaluativo.objects.filter((Q(pk__in=[13, 16]) | Q(nombre__icontains='POSGRADO')) & Q(activo=True)).exclude(id=modeloevaluativo.id)
        else:
            self.fields['modelo'].queryset = ModeloEvaluativo.objects.filter((Q(pk__in=[13, 16]) | Q(nombre__icontains='POSGRADO')) & Q(activo=True))

    def excluir_fechasmatriculacionposgrado(self):
        del self.fields['iniciomatriculacionposgrado']
        del self.fields['finmatriculacionposgrado']
        del self.fields['sinasistencia']

    def matriculacion_regular(self):
        del self.fields['asignaturamalla']
        del self.fields['paralelo']
        del self.fields['cupo']

    # def modeloposgrado(self):
    #     self.fields['modelo'].queryset = ModeloEvaluativo.objects.filter(pk__in=[13,16],status=True)

    def sin_modelo(self):
        deshabilitar_campo(self, 'modelo')

    def sin_modificarla(self, nivel, asignaturamalla=None):
        deshabilitar_campo(self, 'asignatura')
        deshabilitar_campo(self, 'asignaturamalla')
        deshabilitar_campo(self, 'modelo')
        if not nivel.nivelgrado:
            del self.fields['tutoria']
        if variable_valor('MATRICULACION_LIBRE'):
            # if MATRICULACION_LIBRE:
            if not CUPO_POR_MATERIA:
                del self.fields['cupo']
            del self.fields['asignatura']
            self.fields['asignaturamalla'].queryset = AsignaturaMalla.objects.filter(id=asignaturamalla.id)
            deshabilitar_campo(self, 'horas')
            deshabilitar_campo(self, 'creditos')
            deshabilitar_campo(self, 'identificacion')
            # else:
            del self.fields['paralelo']
            del self.fields['asignaturamalla']
            del self.fields['cupo']
        else:
            self.fields['asignaturamalla'].queryset = AsignaturaMalla.objects.filter(malla__id=asignaturamalla.malla_id).order_by('asignatura__nombre').distinct()

    def quitar_introductoria(self):
        del self.fields['esintroductoria']

    def quitar_inglesepunemi(self):
        del self.fields['inglesepunemi']



class CalificacionDiaForm(forms.Form):
    usaperiodocalificaciones = forms.BooleanField(label=u'Usa cronograma', initial=False, required=False)
    diasactivacioncalificaciones = forms.IntegerField(label=u'Dias para calificar', initial=1, required=False,
                                                      widget=forms.TextInput(
                                                          attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class FechafinAsistenciasForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'], required=False,
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class EvaluacionDiaForm(forms.Form):
    usaperiodoevaluacion = forms.BooleanField(label=u'Usa cronograma', initial=False, required=False)
    diasactivacion = forms.IntegerField(label=u'Dias para evaluar', initial=1, required=False,
                                        widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class AsignaturaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=250)
    precedencia = forms.ModelMultipleChoiceField(label=u'Precedencia', queryset=Asignatura.objects.all(),
                                                 required=False)
    # codigo = forms.CharField(label=u'Codigo', max_length=30, required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    creditos = forms.FloatField(label=u'Créditos', initial="0.0000", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4'}))
    modulo = forms.BooleanField(label=u'Módulo', initial=False, required=False)

    def sin_misma(self, asignatura):
        self.fields['precedencia'].queryset = Asignatura.objects.all().exclude(id=asignatura.id)


class UnificarAsignaturaForm(forms.Form):
    origen = ModelChoiceField(label=u'Asignatura origen', required=False, queryset=Asignatura.objects.all())
    asignatura = ModelChoiceField(label=u'Asignatura final', queryset=Asignatura.objects.all())

    def for_id(self, ida):
        deshabilitar_campo(self, 'origen')
        self.fields['asignatura'].queryset = Asignatura.objects.all().exclude(id=ida)


class MatriculaMultipleForm(forms.Form):
    nivel = ModelChoiceField(label=u'Nivel', queryset=Nivel.objects.filter(periodo__activo=True), required=False)

    def editar(self):
        deshabilitar_campo(self, 'nivel')


class MateriaDividirForm(forms.Form):
    materia = ModelChoiceField(label=u'Materia',
                               queryset=Materia.objects.filter(status=True, nivel__periodo__activo=True, cerrado=False,
                                                               nivel__cerrado=False))

    def desde_materia(self, materia):
        self.fields['materia'].queryset = Materia.objects.filter(status=True, nivel__periodo__activo=True, cerrado=False,
                                                                 nivel__cerrado=False,
                                                                 asignatura=materia.asignatura).exclude(id=materia.id)
    def desde_materia_pregrado(self, materia, periodo):
        self.fields['materia'].queryset = Materia.objects.filter(status=True, nivel__periodo__activo=True, cerrado=False,
                                                                 nivel__cerrado=False, nivel__periodo=periodo,
                                                                 asignatura=materia.asignatura).exclude(id=materia.id)


class MatriculaLibreForm(forms.Form):
    inscripcion = forms.CharField(label=u"Estudiante")


class ClaseTodosturnosForm(forms.Form):
    materia = forms.ModelChoiceField(label=u"Materia", queryset=Materia.objects.filter(status=True), required=False,
                                     widget=forms.Select(attrs={'class': 'imp-100'}))
    aula = forms.ModelChoiceField(label=u"Aula", queryset=Aula.objects.all(),
                                  widget=forms.Select(attrs={'class': 'imp-100'}))
    tipoprofesor = forms.ModelChoiceField(label=u'Tipo', required=False, queryset=TipoProfesor.objects.all(),
                                          widget=forms.Select(attrs={'class': 'imp-100'}))
    profesor = forms.ModelChoiceField(label=u"Profesor", queryset=Profesor.objects.all(), required=False,
                                      widget=forms.Select(attrs={'class': 'imp-100'}))
    turno = forms.ModelChoiceField(label=u"Turno", queryset=Turno.objects.all(), required=False,
                                   widget=forms.Select(attrs={'class': 'imp-100'}))
    dia = forms.ChoiceField(label=u"Dia", choices=DIAS_CHOICES, required=False,
                            widget=forms.Select(attrs={'class': 'imp-25'}))
    tipohorario = forms.ChoiceField(label=u"Tipo horario", choices=TIPOHORARIO, required=False,
                                    widget=forms.Select(attrs={'class': 'imp-25'}))
    grupoprofesor = forms.ModelChoiceField(label=u"Grupo profesor",
                                           queryset=GruposProfesorMateria.objects.filter(status=True), required=False,
                                           widget=forms.Select(attrs={'class': 'imp-75'}))
    inicio = forms.DateField(label=u"Fecha inicio", input_formats=['%d-%m-%Y'], required=False,
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha fin", input_formats=['%d-%m-%Y'], required=False,
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))

    # def adicionartotal(self):
    #     # del self.fields['tipoprofesor']
    #     # del self.fields['aula']

    def adicionar(self, nivel, coordinacion=None, carrera=None, materia=None):
        # if Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion).exists():
        #     self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
        # else:
        self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)
        if carrera:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, asignaturamalla__malla__carrera=carrera,
                                                                     nivel=nivel, cerrado=False)
        else:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, nivel=nivel, cerrado=False)
        if materia:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, id=materia.id, cerrado=False)
        # if coordinacion.id == 1:
        #     self.fields['turno'].queryset = Turno.objects.filter(sesion=nivel.sesion, mostrar=True).order_by('turno')
        # else:
        #     self.fields['turno'].queryset = Turno.objects.filter(sesion=nivel.sesion, status=True, mostrar=True).order_by('turno')
        self.fields['turno'].queryset = Turno.objects.filter(status=True, mostrar=True).order_by('turno')
        dias = list(DIAS_CHOICES)
        if not nivel.sesion.lunes:
            dias.remove((1, 'LUNES'))
        if not nivel.sesion.martes:
            dias.remove((2, 'MARTES'))
        if not nivel.sesion.miercoles:
            dias.remove((3, 'MIERCOLES'))
        if not nivel.sesion.jueves:
            dias.remove((4, 'JUEVES'))
        if not nivel.sesion.viernes:
            dias.remove((5, 'VIERNES'))
        if not nivel.sesion.sabado:
            dias.remove((6, 'SABADO'))
        if not nivel.sesion.domingo:
            dias.remove((7, 'DOMINGO'))
        self.fields['dia'].choices = dias

    def visible_profesor_adicionar(self, periodo):
        # if periodo.id >= 76:
        self.fields['profesor'].queryset = Profesor.objects.filter(persona=None)

    # else:
    #     del self.fields['profesor']
    # def adicionar(self, nivel, coordinacion=None, carrera=None, materia=None):
    #     if Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion).exists():
    #         self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
    #     else:
    #         self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)
    #     if carrera:
    #         self.fields['materia'].queryset = Materia.objects.filter(asignaturamalla__malla__carrera=carrera, nivel=nivel, cerrado=False)
    #     else:
    #         self.fields['materia'].queryset = Materia.objects.filter(nivel=nivel, cerrado=False)
    #     if materia:
    #         self.fields['materia'].queryset = Materia.objects.filter(id=materia.id, cerrado=False)
    #     self.fields['turno'].queryset = nivel.sesion.turnosactivos()
    #     dias = list(DIAS_CHOICES)
    #     if not nivel.sesion.lunes:
    #         dias.remove((1, 'LUNES'))
    #     if not nivel.sesion.martes:
    #         dias.remove((2, 'MARTES'))
    #     if not nivel.sesion.miercoles:
    #         dias.remove((3, 'MIERCOLES'))
    #     if not nivel.sesion.jueves:
    #         dias.remove((4, 'JUEVES'))
    #     if not nivel.sesion.viernes:
    #         dias.remove((5, 'VIERNES'))
    #     if not nivel.sesion.sabado:
    #         dias.remove((6, 'SABADO'))
    #     if not nivel.sesion.domingo:
    #         dias.remove((7, 'DOMINGO'))
    #     self.fields['dia'].choices = dias

    def editar(self, nivel, coordinacion=None, materia=None, carrera=None):
        # if Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion).exists():
        #     self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
        # else:
        self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)

        if carrera:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, asignaturamalla__malla__carrera=carrera,
                                                                     nivel=nivel)
        else:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, nivel=nivel)
        self.fields['materia'].queryset = Materia.objects.filter(status=True, id=materia.id)
        # if coordinacion.id == 1:
        #     self.fields['turno'].queryset = nivel.sesion.turnosnoactivos()
        # else:
        #     self.fields['turno'].queryset = nivel.sesion.turnosactivos()
        turnosfuera = Turno.objects.filter(pk__in=materia.clase_set.values_list("turno_id", flat=True).filter(status=True).distinct()).values_list('id', flat=True)
        self.fields['turno'].queryset = Turno.objects.filter(Q(status=True, mostrar=True) | Q(id__in=turnosfuera)).order_by('turno')
        deshabilitar_campo(self, 'materia')
        # deshabilitar_campo(self, 'turno')
        dias = list(DIAS_CHOICES)
        if not nivel.sesion.lunes:
            dias.remove((1, 'LUNES'))
        if not nivel.sesion.martes:
            dias.remove((2, 'MARTES'))
        if not nivel.sesion.miercoles:
            dias.remove((3, 'MIERCOLES'))
        if not nivel.sesion.jueves:
            dias.remove((4, 'JUEVES'))
        if not nivel.sesion.viernes:
            dias.remove((5, 'VIERNES'))
        if not nivel.sesion.sabado:
            dias.remove((6, 'SABADO'))
        if not nivel.sesion.domingo:
            dias.remove((7, 'DOMINGO'))
        self.fields['dia'] = forms.ChoiceField(choices=dias, widget=forms.Select(attrs={'class': 'imp-25'}))
        # deshabilitar_campo(self, 'dia')

    def cargar_profesores(self, clase, periodo):
        self.fields['profesor'].queryset = clase.materia.profesores_materia_segun_tipoprofesor(clase.tipoprofesor)

    def adicionar_grupoprofesor(self, periodo):
        self.fields['grupoprofesor'].queryset = GruposProfesorMateria.objects.filter(profesormateria=None)

    def cargar_grupoprofesor(self, profesormateria, tipoprofesor, periodo):
        if tipoprofesor and profesormateria:
            if tipoprofesor.id == 2:
                self.fields['grupoprofesor'].queryset = profesormateria.gruposprofesormateria_set.filter(status=True)
            else:
                del self.fields['grupoprofesor']
        else:
            self.fields['grupoprofesor'].queryset = GruposProfesorMateria.objects.filter(profesormateria=None)


class ClaseForm(forms.Form):
    materia = forms.ModelChoiceField(label=u"Materia", queryset=Materia.objects.filter(status=True), required=False,
                                     widget=forms.Select(attrs={'class': 'imp-100'}))
    aula = forms.ModelChoiceField(label=u"Aula", queryset=Aula.objects.filter(status=True),
                                  widget=forms.Select(attrs={'class': 'imp-100'}))
    tipoprofesor = forms.ModelChoiceField(label=u'Tipo', required=False, queryset=TipoProfesor.objects.filter(status=True),
                                          widget=forms.Select(attrs={'class': 'imp-100'}))
    profesor = forms.ModelChoiceField(label=u"Profesor", queryset=Profesor.objects.filter(status=True), required=False,
                                      widget=forms.Select(attrs={'class': 'imp-100'}))
    turno = forms.ModelChoiceField(label=u"Turno", queryset=Turno.objects.filter(status=True), required=False,
                                   widget=forms.Select(attrs={'class': 'imp-100'}))
    dia = forms.ChoiceField(label=u"Dia", choices=DIAS_CHOICES, required=False,
                            widget=forms.Select(attrs={'class': 'imp-25'}))
    tipohorario = forms.ChoiceField(label=u"Tipo horario", choices=TIPOHORARIO, required=False,
                                    widget=forms.Select(attrs={'class': 'imp-25'}))
    grupoprofesor = forms.ModelChoiceField(label=u"Grupo profesor",
                                           queryset=GruposProfesorMateria.objects.filter(status=True), required=False,
                                           widget=forms.Select(attrs={'class': 'imp-75'}))
    inicio = forms.DateField(label=u"Fecha inicio", input_formats=['%d-%m-%Y'], required=False,
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha fin", input_formats=['%d-%m-%Y'], required=False,
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))

    # def adicionartotal(self):
    #     # del self.fields['tipoprofesor']
    #     # del self.fields['aula']

    def adicionar(self, nivel, coordinacion=None, carrera=None, materia=None):
        # if Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion).exists():
        #     self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
        # else:
        self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)
        if carrera:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, asignaturamalla__malla__carrera=carrera,
                                                                     nivel=nivel, cerrado=False)
        else:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, nivel=nivel, cerrado=False)
        if materia:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, id=materia.id, cerrado=False)
        if coordinacion.id == 7:
            self.fields['turno'].queryset = Turno.objects.filter(sesion=nivel.sesion, status=True).order_by('comienza')
        else:
            # self.fields['turno'].queryset = Turno.objects.filter(sesion=nivel.sesion, status=True, mostrar=True).order_by('turno')
            self.fields['turno'].queryset = Turno.objects.filter(status=True, mostrar=True).order_by('comienza')
        dias = list(DIAS_CHOICES)
        if not nivel.sesion.lunes:
            dias.remove((1, 'LUNES'))
        if not nivel.sesion.martes:
            dias.remove((2, 'MARTES'))
        if not nivel.sesion.miercoles:
            dias.remove((3, 'MIERCOLES'))
        if not nivel.sesion.jueves:
            dias.remove((4, 'JUEVES'))
        if not nivel.sesion.viernes:
            dias.remove((5, 'VIERNES'))
        if not nivel.sesion.sabado:
            dias.remove((6, 'SABADO'))
        if not nivel.sesion.domingo:
            dias.remove((7, 'DOMINGO'))
        self.fields['dia'].choices = dias

    def visible_profesor_adicionar(self, periodo):
        # if periodo.id >= 76:
        self.fields['profesor'].queryset = Profesor.objects.filter(persona=None)

    # else:
    #     del self.fields['profesor']
    # def adicionar(self, nivel, coordinacion=None, carrera=None, materia=None):
    #     if Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion).exists():
    #         self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
    #     else:
    #         self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)
    #     if carrera:
    #         self.fields['materia'].queryset = Materia.objects.filter(asignaturamalla__malla__carrera=carrera, nivel=nivel, cerrado=False)
    #     else:
    #         self.fields['materia'].queryset = Materia.objects.filter(nivel=nivel, cerrado=False)
    #     if materia:
    #         self.fields['materia'].queryset = Materia.objects.filter(id=materia.id, cerrado=False)
    #     self.fields['turno'].queryset = nivel.sesion.turnosactivos()
    #     dias = list(DIAS_CHOICES)
    #     if not nivel.sesion.lunes:
    #         dias.remove((1, 'LUNES'))
    #     if not nivel.sesion.martes:
    #         dias.remove((2, 'MARTES'))
    #     if not nivel.sesion.miercoles:
    #         dias.remove((3, 'MIERCOLES'))
    #     if not nivel.sesion.jueves:
    #         dias.remove((4, 'JUEVES'))
    #     if not nivel.sesion.viernes:
    #         dias.remove((5, 'VIERNES'))
    #     if not nivel.sesion.sabado:
    #         dias.remove((6, 'SABADO'))
    #     if not nivel.sesion.domingo:
    #         dias.remove((7, 'DOMINGO'))
    #     self.fields['dia'].choices = dias

    def editar(self, nivel, coordinacion=None, materia=None, carrera=None):
        # if Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion).exists():
        #     self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
        # else:
        self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)

        if carrera:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, asignaturamalla__malla__carrera=carrera,
                                                                     nivel=nivel)
        else:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, nivel=nivel)
        self.fields['materia'].queryset = Materia.objects.filter(status=True, id=materia.id)
        # if coordinacion.id == 1:
        #     # self.fields['turno'].queryset = Turno.objects.filter(sesion=nivel.sesion, mostrar=True).order_by('turno')
        # else:
        #     self.fields['turno'].queryset = Turno.objects.filter(sesion=nivel.sesion, status=True, mostrar=True).order_by('turno')
        turnosfuera = Turno.objects.filter(pk__in=materia.clase_set.values_list("turno_id", flat=True).filter(status=True).distinct()).values_list('id', flat=True)
        self.fields['turno'].queryset = Turno.objects.filter(Q(status=True, mostrar=True) | Q(id__in=turnosfuera) ).order_by('turno')
        deshabilitar_campo(self, 'materia')
        # deshabilitar_campo(self, 'turno')
        dias = list(DIAS_CHOICES)
        if not nivel.sesion.lunes:
            dias.remove((1, 'LUNES'))
        if not nivel.sesion.martes:
            dias.remove((2, 'MARTES'))
        if not nivel.sesion.miercoles:
            dias.remove((3, 'MIERCOLES'))
        if not nivel.sesion.jueves:
            dias.remove((4, 'JUEVES'))
        if not nivel.sesion.viernes:
            dias.remove((5, 'VIERNES'))
        if not nivel.sesion.sabado:
            dias.remove((6, 'SABADO'))
        if not nivel.sesion.domingo:
            dias.remove((7, 'DOMINGO'))
        self.fields['dia'] = forms.ChoiceField(choices=dias, widget=forms.Select(attrs={'class': 'imp-25'}))
        # deshabilitar_campo(self, 'dia')

    def cargar_profesores(self, clase, periodo):
        self.fields['profesor'].queryset = clase.materia.profesores_materia_segun_tipoprofesor(clase.tipoprofesor)

    def adicionar_grupoprofesor(self, periodo):
        self.fields['grupoprofesor'].queryset = GruposProfesorMateria.objects.filter(profesormateria=None)

    def cargar_grupoprofesor(self, profesormateria, tipoprofesor, periodo):
        if tipoprofesor and profesormateria:
            if tipoprofesor.id == 2 or tipoprofesor.id == 13:
                self.fields['grupoprofesor'].queryset = profesormateria.gruposprofesormateria_set.filter(status=True)
            # else:
            #     del self.fields['grupoprofesor']
        else:
            self.fields['grupoprofesor'].queryset = GruposProfesorMateria.objects.filter(profesormateria=None)

class ClaseHorarioForm(forms.Form):
    materia = forms.IntegerField(initial=0, required=False, label=u'Materia',
                                 widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipoprofesor = forms.ModelChoiceField(label=u'Tipo', required=False, queryset=TipoProfesor.objects.filter(status=True),
                                          widget=forms.Select(attrs={'class': 'imp-100'}))
    profesor = forms.ModelChoiceField(label=u"Profesor", queryset=Profesor.objects.filter(status=True), required=False,
                                      widget=forms.Select(attrs={'class': 'imp-100'}))
    sesion = forms.ModelChoiceField(label=u'Sesion',queryset=Sesion.objects.filter(status=True), required=False, widget=forms.Select(attrs={'class': 'imp-100'}))
    turno = forms.ModelChoiceField(label=u"Turno", queryset=Turno.objects.filter(status=True, mostrar=True), required=False,
                                   widget=forms.Select(attrs={'class': 'imp-100'}))
    dia = forms.ChoiceField(label=u"Dia", choices=DIAS_CHOICES, required=False,
                            widget=forms.Select(attrs={'class': 'imp-25'}))
    tipohorario = forms.ChoiceField(label=u"Tipo horario", choices=TIPOHORARIO, required=False,
                                    widget=forms.Select(attrs={'class': 'imp-25'}))
    grupoprofesor = forms.ModelChoiceField(label=u"Grupo profesor",
                                           queryset=GruposProfesorMateria.objects.filter(status=True), required=False,
                                           widget=forms.Select(attrs={'class': 'imp-75'}))
    inicio = forms.DateField(label=u"Fecha inicio", input_formats=['%Y-%m-%d'], required=False,
                             widget=DateTimeInput(format='%Y-%m-%d', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha fin", input_formats=['%Y-%m-%d'], required=False,
                          widget=DateTimeInput(format='%Y-%m-%d', attrs={'class': 'selectorfecha'}))

    # def adicionartotal(self):
    #     # del self.fields['tipoprofesor']
    #     # del self.fields['aula']

    def adicionar(self, nivel, coordinacion=None, carrera=None, materia=None):
        # if Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion).exists():
        #     self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
        # else:
        self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)
        if carrera:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, asignaturamalla__malla__carrera=carrera,
                                                                     nivel=nivel, cerrado=False)
        else:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, nivel=nivel, cerrado=False)
        if materia:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, id=materia.id, cerrado=False)
        # if coordinacion.id == 1:
        #     self.fields['turno'].queryset = Turno.objects.filter(sesion=nivel.sesion, mostrar=True).order_by('turno')
        # else:
        #     self.fields['turno'].queryset = Turno.objects.filter(sesion=nivel.sesion, status=True, mostrar=True).order_by('turno')
        self.fields['turno'].queryset = Turno.objects.filter(status=True, mostrar=True).order_by('turno')
        dias = list(DIAS_CHOICES)
        if not nivel.sesion.lunes:
            dias.remove((1, 'LUNES'))
        if not nivel.sesion.martes:
            dias.remove((2, 'MARTES'))
        if not nivel.sesion.miercoles:
            dias.remove((3, 'MIERCOLES'))
        if not nivel.sesion.jueves:
            dias.remove((4, 'JUEVES'))
        if not nivel.sesion.viernes:
            dias.remove((5, 'VIERNES'))
        if not nivel.sesion.sabado:
            dias.remove((6, 'SABADO'))
        if not nivel.sesion.domingo:
            dias.remove((7, 'DOMINGO'))
        self.fields['dia'].choices = dias

    def visible_profesor_adicionar(self, periodo):
        # if periodo.id >= 76:
        self.fields['profesor'].queryset = Profesor.objects.filter(persona=None)

    # else:
    #     del self.fields['profesor']
    # def adicionar(self, nivel, coordinacion=None, carrera=None, materia=None):
    #     if Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion).exists():
    #         self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
    #     else:
    #         self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)
    #     if carrera:
    #         self.fields['materia'].queryset = Materia.objects.filter(asignaturamalla__malla__carrera=carrera, nivel=nivel, cerrado=False)
    #     else:
    #         self.fields['materia'].queryset = Materia.objects.filter(nivel=nivel, cerrado=False)
    #     if materia:
    #         self.fields['materia'].queryset = Materia.objects.filter(id=materia.id, cerrado=False)
    #     self.fields['turno'].queryset = nivel.sesion.turnosactivos()
    #     dias = list(DIAS_CHOICES)
    #     if not nivel.sesion.lunes:
    #         dias.remove((1, 'LUNES'))
    #     if not nivel.sesion.martes:
    #         dias.remove((2, 'MARTES'))
    #     if not nivel.sesion.miercoles:
    #         dias.remove((3, 'MIERCOLES'))
    #     if not nivel.sesion.jueves:
    #         dias.remove((4, 'JUEVES'))
    #     if not nivel.sesion.viernes:
    #         dias.remove((5, 'VIERNES'))
    #     if not nivel.sesion.sabado:
    #         dias.remove((6, 'SABADO'))
    #     if not nivel.sesion.domingo:
    #         dias.remove((7, 'DOMINGO'))
    #     self.fields['dia'].choices = dias

    def editar(self, nivel, coordinacion=None, materia=None, carrera=None):
        # if Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion).exists():
        #     self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
        # else:
        self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)

        if carrera:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, asignaturamalla__malla__carrera=carrera,
                                                                     nivel=nivel)
        else:
            self.fields['materia'].queryset = Materia.objects.filter(status=True, nivel=nivel)
        self.fields['materia'].queryset = Materia.objects.filter(status=True, id=materia.id)
        # if coordinacion.id == 1:
        #     self.fields['turno'].queryset = Turno.objects.filter(sesion=nivel.sesion, mostrar=True).order_by('turno')
        # else:
        #     self.fields['turno'].queryset = Turno.objects.filter(sesion=nivel.sesion, status=True, mostrar=True).order_by('turno')
        self.fields['turno'].queryset = Turno.objects.filter(status=True, mostrar=True).order_by('turno')
        deshabilitar_campo(self, 'materia')
        # deshabilitar_campo(self, 'turno')
        dias = list(DIAS_CHOICES)
        if not nivel.sesion.lunes:
            dias.remove((1, 'LUNES'))
        if not nivel.sesion.martes:
            dias.remove((2, 'MARTES'))
        if not nivel.sesion.miercoles:
            dias.remove((3, 'MIERCOLES'))
        if not nivel.sesion.jueves:
            dias.remove((4, 'JUEVES'))
        if not nivel.sesion.viernes:
            dias.remove((5, 'VIERNES'))
        if not nivel.sesion.sabado:
            dias.remove((6, 'SABADO'))
        if not nivel.sesion.domingo:
            dias.remove((7, 'DOMINGO'))
        self.fields['dia'] = forms.ChoiceField(choices=dias, widget=forms.Select(attrs={'class': 'imp-25'}))
        # deshabilitar_campo(self, 'dia')

    def cargar_profesores(self, clase, periodo):
        self.fields['profesor'].queryset = clase.materia.profesores_materia_segun_tipoprofesor(clase.tipoprofesor)

    def adicionar_grupoprofesor(self, periodo):
        self.fields['grupoprofesor'].queryset = GruposProfesorMateria.objects.filter(profesormateria=None)

    def cargar_grupoprofesor(self, profesormateria, tipoprofesor, periodo):
        if tipoprofesor and profesormateria:
            if tipoprofesor.id == 2:
                self.fields['grupoprofesor'].queryset = profesormateria.gruposprofesormateria_set.filter(status=True)
            # else:
            #     del self.fields['grupoprofesor']
        else:
            self.fields['grupoprofesor'].queryset = GruposProfesorMateria.objects.filter(profesormateria=None)

class CambiarAulaForm(forms.Form):
    aula = forms.ModelChoiceField(label=u"Aula", queryset=Aula.objects.filter(status=True).order_by('nombre'))

    def excluir_aulas_actuales(self, nivel, coordinacion=None):
        if Aula.objects.values('id').filter(aulacoordinacion__coordinacion=coordinacion).exists():
            self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
        else:
            self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)


class RecordAcademicoForm(forms.Form):
    tipo = forms.ChoiceField(label=u'Tipo', choices=((1, u'ASIGNATURAS DE LA MALLA'), (2, u'TODAS'),), required=False,
                             widget=forms.Select(attrs={'class': 'imp-50'}))
    asignatura = forms.ModelChoiceField(label=u"Asignatura", queryset=Asignatura.objects.filter(status=True),
                                        required=False)
    # asignaturamallahistorico = forms.ModelChoiceField(label=u"Materia Malla Historica",
    #                                                   queryset=AsignaturaMalla.objects.filter(status=True),
    #                                                   required=False, widget=forms.Select())
    creditos = forms.FloatField(label=u"Créditos ", initial="0.0000", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4'}))
    horas = forms.IntegerField(label=u"Horas ", initial=0, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    nota = forms.FloatField(label=u"Nota", initial="0.00",
                            widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    asistencia = forms.IntegerField(label=u"% Asistencia", initial=0, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    fecha = forms.DateField(label=u"Fecha", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    noaplica = forms.BooleanField(label=u"No aplica para matricula?", required=False)
    aprobada = forms.BooleanField(label=u"Aprobada?", required=False)
    convalidacion = forms.BooleanField(label=u"Homologación otra institución", required=False)
    homologada = forms.BooleanField(label=u"Homologación interna", required=False)
    valida = forms.BooleanField(label=u"Valida para creditos", initial=True, required=False)
    validapromedio = forms.BooleanField(label=u"Valida para promedio", initial=True, required=False)
    suficiencia = forms.BooleanField(label=u"Prueba de Suficiencia?", required=False)
    observaciones = forms.CharField(label=u'Observaciones', required=False)

    def solo_mallas_carrera(self, inscripcion, personasesion, request):
        carrera = inscripcion.carrera
        asignaturasmalla = AsignaturaMalla.objects.filter(malla__carrera=carrera)
        asignaturamodulos = ModuloMalla.objects.filter(malla__carrera=carrera)
        # if request.user.has_perm('sga.puede_modificar_ingles'):
        #     asignaturasmalla = AsignaturaMalla.objects.filter(malla__carrera__id=34)
        #     asignaturamodulos = ModuloMalla.objects.filter(malla__carrera__id=34)
        if personasesion.usuario.id in [43139, 43138, 46006]:
            asignaturasmalla = AsignaturaMalla.objects.filter(malla__carrera=carrera)
            asignaturamodulos = ModuloMalla.objects.filter(malla__carrera=carrera)
        # else:
        idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=True).filter(status=True)
        # asignaturasmalla = AsignaturaMalla.objects.filter(malla__carrera=carrera).exclude(asignatura__id__in=idasignatura)
        # asignaturamodulos = ModuloMalla.objects.filter(malla__carrera=carrera)
        idmateriasrecord = RecordAcademico.objects.values_list('asignatura__id', flat=True).filter(status=True,
                                                                                                   inscripcion=inscripcion).exclude(
            asignatura=None)
        self.fields['asignatura'].queryset = Asignatura.objects.filter(
            Q(id__in=[x.asignatura.id for x in asignaturasmalla]) | Q(
                id__in=[x.asignatura.id for x in asignaturamodulos]))
        # self.fields['asignaturamallahistorico'].queryset = AsignaturaMalla.objects.filter(
        #     malla__carrera=carrera).exclude(asignatura__id__in=idmateriasrecord)

    def homologacion(self):
        del self.fields['aprobada']
        del self.fields['noaplica']
        del self.fields['asistencia']
        del self.fields['tipo']


class HistoricoRecordAcademicoForm(forms.Form):
    asignatura = forms.ModelChoiceField(label=u"Asignatura", queryset=Asignatura.objects.all(), required=False)
    creditos = forms.FloatField(label=u"Créditos ", initial="0.0000", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4'}))
    horas = forms.IntegerField(label=u"Horas ", initial=0, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    nota = forms.FloatField(label=u"Nota", initial="0.00", required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    asistencia = forms.IntegerField(label=u"% Asistencia", initial=0, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    fecha = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    noaplica = forms.BooleanField(label=u"No aplica para matricula?", required=False)
    aprobada = forms.BooleanField(label=u"Aprobada?", required=False)
    convalidacion = forms.BooleanField(label=u"Homologación otra institución", required=False)
    homologada = forms.BooleanField(label=u"Homologación interna", required=False)
    valida = forms.BooleanField(label=u"Valida para creditos", initial=True, required=False)
    validapromedio = forms.BooleanField(label=u"Valida para promedio", initial=True, required=False)
    suficiencia = forms.BooleanField(label=u"Prueba de Suficiencia?", required=False)
    observaciones = forms.CharField(label=u'Observaciones', required=False)

    def solo_asignatura(self, idr):
        self.fields['asignatura'].queryset = Asignatura.objects.filter(id=idr)

    def editar(self, historico, pude_editar=False):
        deshabilitar_campo(self, 'asignatura')
        if historico.tiene_acta_nivel():
            if not pude_editar:
                deshabilitar_campo(self, 'nota')
                deshabilitar_campo(self, 'asistencia')


class ConvalidacionInscripcionForm(forms.Form):
    centro = forms.CharField(label=u'Institución', max_length=200, required=False)
    carrera = forms.CharField(label=u'Carrera', max_length=100, required=False)
    asignatura = forms.CharField(label=u'Asignatura', max_length=200, required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-75'}))
    anno = forms.IntegerField(label=u'Año de Aprobación', required=False,
                              widget=forms.TextInput(attrs={'class': 'imp-anio', 'decimal': '0'}))
    nota_ant = forms.CharField(label=u'Calificación', required=False, initial="0.00",
                               widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    nota_act = forms.CharField(label=u'Calificación Equivalente', initial="0.00", required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    creditos = forms.FloatField(label=u'Créditos  Convalidados', initial="0.0000",
                                widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4'}))
    observaciones = forms.CharField(label=u'Observaciones', widget=forms.Textarea, required=False)
    archivo = ExtFileField(label=u'Fichero', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=4194304)


class HomologacionInscripcionForm(forms.Form):
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all())
    modalidad = forms.ModelChoiceField(label=u"Modalidad", required=False, queryset=Modalidad.objects.all(), widget=forms.Select(attrs={'class': 'imp-50'}))
    asignatura = forms.ModelChoiceField(label=u"Asignatura", queryset=Asignatura.objects.all())
    fecha = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    nota_ant = forms.FloatField(label=u'Calificación', initial="0.00", widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    creditos = forms.FloatField(label=u'Créditos ', initial="0.0000", widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4'}))
    observaciones = forms.CharField(widget=forms.Textarea, label=u'Observaciones', required=False)
    archivo = ExtFileField(label=u'Fichero', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"), max_upload_size=4194304)


class EvaluacionObservacionForm(forms.Form):
    observaciones = forms.CharField(widget=forms.Textarea, label=u'Adicionar Observación', required=False)


class InscripcionForm(FormModeloBase):
    nombres = forms.CharField(label=u"Nombres", max_length=200, widget=forms.TextInput(attrs={'class': 'imp-50', 'col': '12'}))
    apellido1 = forms.CharField(label=u"1er Apellido", max_length=50, widget=forms.TextInput(attrs={'col': '6'}))
    apellido2 = forms.CharField(label=u"2do Apellido", max_length=50, required=False, widget=forms.TextInput(attrs={'col': '6'}))
    pasaporte = forms.CharField(label=u"Pasaporte", max_length=15, initial='', required=False, widget=forms.TextInput(attrs={'class': 'imp-cedula', 'col': '6'}))
    cedula = forms.CharField(label=u"Cédula", max_length=10, required=False, widget=forms.TextInput(attrs={'class': 'imp-cedula', 'col': '6'}))
    nacimiento = forms.DateField(label=u"Fecha Nacimiento", initial='', widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha ', 'col': '6'}), required=False)
    sexo = forms.ModelChoiceField(label=u"Sexo", queryset=Sexo.objects.all(), widget=forms.Select(attrs={'class':'form-control','col': '6'}))
    lgtbi = forms.BooleanField(label=u"Pertenece al Grupo LGTBI?", required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '12', 'separator': 'true'}))
    raza = forms.ModelChoiceField(label=u'Etnia', queryset=Raza.objects.all(), required=False, widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    nacionalidadindigena = forms.ModelChoiceField(label=u"Nacionalidad indigena", queryset=NacionalidadIndigena.objects.all(), required=False, widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    ppl = forms.BooleanField(label=u"Persona Privada de Libertad?", required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '12', 'separator': 'true'}))
    fechaingresoppl = forms.DateField(label=u'Fecha de Ingreso', initial=datetime.now().date(), required=False, widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    centrorehabilitacion = forms.CharField(label=u'Centro de Rehabilitación Social', max_length=500, initial='', required=False, widget=forms.TextInput(attrs={'class': 'imp-100','col': '12'}))
    lidereducativo = forms.CharField(label=u'Lider educativo', max_length=500, initial='', required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    correolidereducativo = forms.CharField(label=u'Correo electrónico del lider educativo', max_length=250, initial='', required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    telefonolidereducativo = forms.CharField(label=u'Teléfono del lider educativo', max_length=100, initial='', required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    observacionppl = forms.CharField(label=u"Observación Persona Privada Libertad", max_length=500, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    archivoppl = ExtFileField(label=u'Archivo PPL', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)
    paisnacimiento = forms.ModelChoiceField(label=u"País nacimiento", queryset=Pais.objects.all(), required=False, widget=forms.Select(attrs={'class':'form-control','col': '6'}))
    provincianacimiento = forms.ModelChoiceField(label=u"Provincia de nacimiento", queryset=Provincia.objects.all().order_by('nombre'), required=False, widget=forms.Select(attrs={'col': '6'}))
    # provincianacimiento = forms.ModelChoiceField(label=u"Provincia nacimiento", queryset=Provincia.objects.all(), required=False, widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    cantonnacimiento = forms.ModelChoiceField(label=u"Cantón nacimiento", queryset=Canton.objects.all(), required=False, widget=forms.Select(attrs={'col': '6'}))
    parroquianacimiento = forms.ModelChoiceField(label=u"Parroquia nacimiento", queryset=Parroquia.objects.all(), required=False, widget=forms.Select(attrs={'col': '6'}))
    nacionalidad = forms.CharField(label=u"Nacionalidad", max_length=100, required=False, widget=forms.TextInput(attrs={'col': '6'}))
    pais = forms.ModelChoiceField(label=u"País residencia", queryset=Pais.objects.all(), required=False, widget=forms.Select(attrs={'col': '6'}))
    provincia = forms.ModelChoiceField(label=u"Provincia residencia", queryset=Provincia.objects.all(), required=False, widget=forms.Select(attrs={'col': '6'}))
    canton = forms.ModelChoiceField(label=u"Cantón residencia", queryset=Canton.objects.all(), required=False, widget=forms.Select(attrs={'col': '6'}))
    parroquia = forms.ModelChoiceField(label=u"Parroquia residencia", queryset=Parroquia.objects.all(), required=False, widget=forms.Select(attrs={'col': '6'}))
    sector = forms.CharField(label=u"Sector", max_length=100, required=False, widget=forms.TextInput(attrs={'col': '6'}))
    direccion = forms.CharField(label=u"Calle Principal", max_length=100, required=False, widget=forms.TextInput(attrs={'col': '12'}))
    direccion2 = forms.CharField(label=u"Calle Secundaria", max_length=100, required=False, widget=forms.TextInput(attrs={'col': '12'}))
    num_direccion = forms.CharField(label=u"Numero Domicilio", max_length=15, required=False, widget=forms.TextInput(attrs={'col': '12'}))
    telefono = forms.CharField(label=u"Telefono Movil", max_length=100, required=False, widget=forms.TextInput(attrs={'col': '12'}))
    telefono_conv = forms.CharField(label=u"Telefono Fijo", max_length=100, required=False, widget=forms.TextInput(attrs={'col': '12'}))
    sangre = forms.ModelChoiceField(label=u"Tipo de Sangre", queryset=TipoSangre.objects, required=False, widget=forms.Select(attrs={'col': '12', 'separator': 'true'}))
    email = forms.CharField(label=u"Correo Electronico", max_length=240, required=False, widget=forms.TextInput(attrs={'col': '12'}))
    emailinst = forms.CharField(label=u"Correo Institucional", max_length=200, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    fecha = forms.DateField(label=u'Fecha de Inscripción', initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={'col': '12'}))
    trabaja = forms.BooleanField(label=u'Trabaja?', required=False)
    empresa = forms.CharField(label=u"Empresa donde trabaja", max_length=200, required=False, widget=forms.TextInput(attrs={'col': '12'}))
    ocupacion = forms.CharField(label=u"Ocupación", required=False, widget=forms.TextInput(attrs={'col': '12'}))
    telefono_trabajo = forms.CharField(label=u"Telefono del trabajo", max_length=100, required=False, widget=forms.TextInput(attrs={'col': '12'}))
    fecha_ingreso = forms.DateField(label=u"Comenzo a trabajar", initial=datetime.now().date(), required=False, widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha','col': '12'}))
    grupo = forms.ModelChoiceField(label=u"Grupo", queryset=Grupo.objects, required=False, widget=forms.Select(attrs={'class':'form-control','col': '6'}))
    sede = forms.ModelChoiceField(label=u"Sede", queryset=Sede.objects, required=False, widget=forms.Select(attrs={'class':'form-control','col': '6'}))
    centroinformacion = forms.ModelChoiceField(label=u"Centro de Información", queryset=CentroInformacion.objects, required=False, widget=forms.Select(attrs={'class':'form-control','col': '6'}))
    carrera = CarreraModelChoiceField(label=u"Carrera", queryset=Carrera.objects.filter(status=True), required=False)
    modalidad = forms.ModelChoiceField(label=u"Modalidad", queryset=Modalidad.objects, required=False, widget=forms.Select(attrs={'class':'form-control','col': '6'}))
    sesion = forms.ModelChoiceField(label=u"Sección", queryset=Sesion.objects, required=False, widget=forms.Select(attrs={'class':'form-control','col': '6', 'labelwidth': '100px'}))
    # colegio = forms.CharField(label=u"Colegio", max_length=200, required=False)
    unidadeducativa = forms.IntegerField(initial=0, required=False, label=u'Colegio', widget=forms.TextInput(attrs={'select2search': 'true'}))
    especialidad = forms.ModelChoiceField(label=u"Especialidad", queryset=Especialidad.objects, required=False, widget=forms.Select(attrs={'class': 'imp-75'}))
    identificador = forms.CharField(label=u'Archivador', required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    prenivelacion = forms.BooleanField(label=u"Homologa Pre de IES", required=False)
    observacionespre = forms.CharField(label=u"Observaciones Pre", max_length=100, required=False)
    comoseinformo = forms.ModelChoiceField(label=u"Cómo nos conoció?", queryset=ComoSeInformo.objects, required=False, widget=forms.Select(attrs={}))
    razonesmotivaron = forms.ModelChoiceField(label=u"Razones para inscribirse?", queryset=RazonesMotivaron.objects, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    comoseinformootras = forms.CharField(label=u"Otros", max_length=100, required=False, widget=forms.TextInput(attrs={'class':'form-control','col': '6'}))
    titulo = forms.BooleanField(label=u"Titulo", required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '3', 'separator': 'true'}))
    acta = forms.BooleanField(label=u"Acta de Grado", required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '3'}))
    certificado_estudios = forms.BooleanField(label=u"Certificado de estudios", required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '3'}))
    cedula2 = forms.BooleanField(label=u"Copia de Cedula", required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '3'}))
    votacion = forms.BooleanField(label=u"Copia Papeleta Votación", required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '3'}))
    partida_nac = forms.BooleanField(label=u"Partida Nacimiento", required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '3'}))
    actaconv = forms.BooleanField(label=u"Documento Homologación", required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '3'}))
    fotos = forms.BooleanField(label=u"Fotos", required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '3'}))
    licencia = forms.BooleanField(label=u'Copia de licencia', required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '3'}))
    record = forms.BooleanField(label=u'Certificado de antecedentes personales', required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '3'}))
    certificado_tipo_sangre = forms.BooleanField(label=u'Certificado tipo sanguineo', required=False, widget=forms.CheckboxInput(attrs={'col': '3'}))
    prueba_psicosensometrica = forms.BooleanField(label=u'Certificado de salud', required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '3'}))
    itinerario = forms.ChoiceField(label=u"Itinerario", choices=ITINERARIO_ASIGNATURA_MALLA, required=False, widget=forms.Select(attrs={'class':'form-control','col': '12'}))


    def emailautomatico(self):
        del self.fields['emailinst']

    def sin_trabajo(self):
        del self.fields['trabaja']
        del self.fields['empresa']
        del self.fields['ocupacion']
        del self.fields['telefono_trabajo']
        del self.fields['fecha_ingreso']

    def con_grupos(self, grupos):
        del self.fields['sede']
        del self.fields['carrera']
        del self.fields['modalidad']
        del self.fields['sesion']
        self.fields['grupo'].queryset = grupos

    def sin_grupos(self, miscarreras):
        del self.fields['grupo']

    def sin_itinerario(self):
        del self.fields['itinerario']

    def editar(self, inscripcion):
        del self.fields['ppl']
        del self.fields['observacionppl']
        del self.fields['archivoppl']
        del self.fields['fechaingresoppl']
        del self.fields['centrorehabilitacion']
        del self.fields['lidereducativo']
        del self.fields['correolidereducativo']
        del self.fields['telefonolidereducativo']
        deshabilitar_campo(self, 'cedula')
        deshabilitar_campo(self, 'pasaporte')
        deshabilitar_campo(self, 'carrera')
        self.fields['provincianacimiento'].queryset = Provincia.objects.filter(pais=inscripcion.persona.paisnacimiento)
        self.fields['cantonnacimiento'].queryset = Canton.objects.filter(provincia=inscripcion.persona.provincianacimiento)
        self.fields['parroquianacimiento'].queryset = Parroquia.objects.filter(canton=inscripcion.persona.cantonnacimiento)
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=inscripcion.persona.pais)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=inscripcion.persona.provincia)
        self.fields['parroquia'].queryset = Parroquia.objects.filter(canton=inscripcion.persona.canton)
        if inscripcion.matriculado() or inscripcion.graduado() or inscripcion.egresado():
            if UTILIZA_GRUPOS_ALUMNOS:
                deshabilitar_campo(self, 'grupo')
            else:
                deshabilitar_campo(self, 'sede')
                deshabilitar_campo(self, 'modalidad')

    def nuevo(self):
        self.fields['provincianacimiento'].queryset = Provincia.objects.filter(pais=None)
        self.fields['cantonnacimiento'].queryset = Canton.objects.filter(provincia=None)
        self.fields['parroquianacimiento'].queryset = Parroquia.objects.filter(canton=None)
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=None)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=None)
        self.fields['parroquia'].queryset = Parroquia.objects.filter(canton=None)


class NuevaInscripcionForm(forms.Form):
    sede = forms.ModelChoiceField(label=u"Sede", queryset=Sede.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-50'}))
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False)
    modalidad = forms.ModelChoiceField(label=u"Modalidad", queryset=Modalidad.objects.all(), required=False,
                                       widget=forms.Select(attrs={'class': 'imp-50'}))
    sesion = forms.ModelChoiceField(label=u"Sesion", queryset=Sesion.objects.all(), required=False)
    copiarecord = forms.BooleanField(label=u"Copiar record académico?", required=False)
    fecha = forms.DateField(label=u'Fecha de Inscripción', input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    prenivelacion = forms.BooleanField(label=u"Homologa Pre de IES", required=False)
    observacionespre = forms.CharField(label=u"Institución", max_length=100, required=False)
    titulo = forms.BooleanField(label=u"Titulo", required=False)
    acta = forms.BooleanField(label=u"Acta de Grado", required=False)
    certificado_estudios = forms.BooleanField(label=u"Certificado de estudios", required=False)
    cedula2 = forms.BooleanField(label=u"Copia de Cedula", required=False)
    votacion = forms.BooleanField(label=u"Copia Papeleta Votación", required=False)
    partida_nac = forms.BooleanField(label=u"Partida Nacimiento", required=False)
    actaconv = forms.BooleanField(label=u"Documento Homologación", required=False)
    fotos = forms.BooleanField(label=u"Fotos", required=False)
    licencia = forms.BooleanField(label=u'Copia de licencia?', required=False)
    record = forms.BooleanField(label=u'Certificado de antecedentes personales?', required=False)
    certificado_tipo_sangre = forms.BooleanField(label=u'Certificado tipo sanguineo?', required=False)
    prueba_psicosensometrica = forms.BooleanField(label=u'Prueba psicosensometrica?', required=False)


class InscripcionCextForm(forms.Form):
    cedula = forms.CharField(max_length=13, label=u"Cédula")
    nombres = forms.CharField(max_length=200)
    apellido1 = forms.CharField(max_length=50, label=u"1er Apellido")
    apellido2 = forms.CharField(max_length=50, label=u"2do Apellido", required=False)
    sexo = forms.ModelChoiceField(Sexo.objects)
    provincia = forms.ModelChoiceField(Provincia.objects.order_by('nombre'), label=u"Provincia de residencia",
                                       required=False)
    canton = forms.ModelChoiceField(Canton.objects.order_by('nombre'), label=u"Canton de residencia", required=False)
    direccion = forms.CharField(max_length=100, label=u"Calle Principal", required=False)
    direccion2 = forms.CharField(max_length=100, label=u"Calle Secundaria", required=False)
    sector = forms.CharField(max_length=100, label=u"Sector de Residencia", required=False)
    ciudad = forms.CharField(max_length=50, label=u"Ciudad de Residencia", required=False)
    parroquia = forms.ModelChoiceField(Parroquia.objects.order_by('nombre'), label=u"Parroquia", required=False)
    nacimiento = forms.DateField(input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                 label=u"Fecha Nacimiento", required=False)
    telefono = forms.CharField(max_length=100, label=u"Telefonos Moviles", required=False)
    telefono_conv = forms.CharField(max_length=100, label=u"Telefonos Fijos", required=False)
    email = forms.CharField(max_length=240, label=u"Correos Electronicos", required=False)
    sangre = forms.ModelChoiceField(TipoSangre.objects.order_by('sangre'), label=u"Tipo de Sangre", required=False)


class GraduadoDatosForm(forms.Form):
    nombres = forms.CharField(max_length=200, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido1 = forms.CharField(max_length=50, label=u"1er Apellido", widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido2 = forms.CharField(max_length=50, label=u"2do Apellido", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-50'}))
    cedula = forms.CharField(max_length=13, label=u"Cédula", required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    pasaporte = forms.CharField(max_length=15, label=u"Pasaporte", initial='', required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    provincia = forms.ModelChoiceField(Provincia.objects.order_by('nombre'), label=u"Provincia de residencia",
                                       required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    canton = forms.ModelChoiceField(Canton.objects.order_by('nombre'), label=u"Canton de residencia", required=False,
                                    widget=forms.Select(attrs={'class': 'imp-50'}))
    nacimiento = forms.DateField(input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                 label=u"Fecha Nacimiento", required=False)
    nacionalidad = forms.CharField(max_length=100, required=False, initial='ECUATORIANA',
                                   widget=forms.TextInput(attrs={'class': 'imp-25'}))
    sexo = forms.ModelChoiceField(Sexo.objects, widget=forms.Select(attrs={'class': 'imp-25'}))
    sangre = forms.ModelChoiceField(TipoSangre.objects.order_by('sangre'), label=u"Tipo de Sangre", required=False,
                                    widget=forms.Select(attrs={'class': 'imp-25'}))
    direccion = forms.CharField(max_length=100, label=u"Calle Principal", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-75'}))
    num_direccion = forms.CharField(max_length=15, label=u"Numero Domicilio", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-25'}))
    direccion2 = forms.CharField(max_length=100, label=u"Calle Secundaria", required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-75'}))
    sector = forms.CharField(max_length=100, label=u"Sector de Residencia", required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-50'}))
    ciudad = forms.CharField(max_length=50, label=u"Ciudad de Residencia", required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-50'}))
    parroquia = forms.ModelChoiceField(Parroquia.objects.order_by('nombre'), label=u"Parroquia", required=False,
                                       widget=forms.Select(attrs={'class': 'imp-50'}))
    telefono = forms.CharField(max_length=100, label=u"Telefono Movil", required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-25'}))
    telefono_conv = forms.CharField(max_length=100, label=u"Telefono Fijo", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-25'}))
    email = forms.CharField(max_length=240, label=u"Correo Electronico", required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-50'}))
    emailinst = forms.CharField(max_length=200, label=u"Correo Institucional", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-50'}))


class SolicitudSecretariaDocenteForm(forms.Form):
    tipo = forms.ModelChoiceField(label=u"Tipo", queryset=TipoSolicitudSecretariaDocente.objects.all(),
                                  widget=forms.Select(attrs={'class': 'imp-75'}))
    informacion = forms.CharField(widget=forms.Textarea(attrs={'rows': '3'}), required=False, label=u"Información")
    costo_base = forms.FloatField(label=u'Costo Base', initial="0.00", required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    valor = forms.FloatField(label=u'Valor ', initial="0.00", required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    cantidad = forms.IntegerField(label=u'Cantidad ', initial=0, required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    descripcion = forms.CharField(widget=forms.Textarea, label=u"Detalle")
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, xls, xlsx, pdf, png, jpg',
                           ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".pdf", ".png", ".jpg"),
                           max_upload_size=10485760)

    def editar(self):
        deshabilitar_campo(self, 'valor')
        deshabilitar_campo(self, 'costo_base')
        deshabilitar_campo(self, 'informacion')


class ArchivoSolicitudSecretariaForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, xls, xlsx, pdf, png, jpg',
                           ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".pdf", ".png", ".jpg"),
                           max_upload_size=10485760)


class SolicitudSecretariaForm(forms.Form):
    tipo = forms.ModelChoiceField(label=u"Tipo", queryset=TipoSolicitudSecretariaDocente.objects.all(),
                                  widget=forms.Select(attrs={'class': 'imp-75'}))
    informacion = forms.CharField(widget=forms.Textarea(attrs={'rows': '3'}), required=False, label=u"Información")
    numero_tramite = forms.IntegerField(label=u'Numero de Tramite', required=False,
                                        widget=forms.TextInput(attrs={'class': 'imp-codigo', 'decimal': '0'}))
    costo_base = forms.FloatField(label=u'Costo Base', initial="0.00", required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    valor = forms.FloatField(label=u'Valor ', initial="0.00", required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    cantidad = forms.IntegerField(label=u'Cantidad', initial=0, required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    archivado = forms.CharField(label=u'Archivado en', required=False, max_length=100,
                                widget=forms.TextInput(attrs={'class': 'imp-50'}))
    descripcion = forms.CharField(widget=forms.Textarea, label=u"Detalle")
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, xls, xlsx, pdf, png, jpg',
                           ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".pdf", ".png", ".jpg"),
                           max_upload_size=10485760)

    def tramite_automatico(self):
        del self.fields['numero_tramite']

    def editar(self):
        deshabilitar_campo(self, 'valor')
        deshabilitar_campo(self, 'costo_base')
        deshabilitar_campo(self, 'informacion')


class NumeroTramiteForm(forms.Form):
    numero_tramite = forms.IntegerField(label=u'Numero de Tramite',
                                        widget=forms.TextInput(attrs={'class': 'imp-codigo', 'decimal': '0'}))
    fecha = forms.DateField(label=u"Fecha de Tramite", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), )


class RespuestaSolicitudSecretariaDocenteForm(forms.Form):
    solicitud = forms.CharField(label=u"Solicitud", required=False, widget=forms.Textarea)
    descripcion = forms.CharField(label=u"Respuesta", required=False, widget=forms.Textarea)

    def editar(self, solicitud):
        del self.fields['descripcion']

    def respuesta(self):
        deshabilitar_campo(self, 'solicitud')


class ReasignarSolicitudResponsableForm(forms.Form):
    responsable = forms.ModelChoiceField(label=u"Responsable de Solicitud", queryset=Persona.objects.filter(
        Q(perfilusuario__administrativo__isnull=False) | Q(perfilusuario__profesor__isnull=False)).distinct(),
                                         required=False, widget=forms.Select(attrs={'class': 'imp-100'}))

    def responsables(self, lista):
        self.fields['responsable'].queryset = lista


class ProfesorZoomUrlForm(forms.Form):
    urlzoom = forms.CharField(label=u'Url', max_length=5000, required=False)
    urlzoomdos = forms.CharField(label=u'Url 2', max_length=5000, required=False)


class ProfesorForm(FormModeloBase):
    nombres = forms.CharField(label=u"Nombres", max_length=200, widget=forms.TextInput(attrs={'class': 'imp-50', 'col': '12'}))
    apellido1 = forms.CharField(label=u"1er Apellido", max_length=50, widget=forms.TextInput(attrs={'class': 'imp-50', 'col': '6'}))
    apellido2 = forms.CharField(label=u"2do Apellido", max_length=50, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-50', 'col': '6'}))
    cedula = forms.CharField(label=u"Cédula", max_length=10, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-cedula', 'col': '6'}))
    pasaporte = forms.CharField(label=u"Pasaporte", max_length=15, initial='', required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-cedula', 'col': '6'}))
    nacimiento = forms.DateField(label=u"Fecha Nacimiento", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6'}),
                                 required=False)
    sexo = forms.ModelChoiceField(label=u"Sexo", queryset=Sexo.objects.all(),
                                  widget=forms.Select(attrs={'formwidth': '45%', 'col': '6'}))
    paisnacimiento = forms.ModelChoiceField(label=u"País nacimiento", queryset=Pais.objects.all(), required=False,
                                            widget=forms.Select(attrs={'formwidth': '75%' , 'col': '12'}))
    provincianacimiento = forms.ModelChoiceField(label=u"Provincia nacimiento", queryset=Provincia.objects.all(),
                                                 required=False, widget=forms.Select(attrs={'formwidth': '75%', 'col': '12'}))
    cantonnacimiento = forms.ModelChoiceField(label=u"Canton nacimiento", queryset=Canton.objects.all(), required=False,
                                              widget=forms.Select(attrs={'formwidth': '75%' , 'col': '12'}))
    parroquianacimiento = forms.ModelChoiceField(label=u"Parroquia nacimiento", queryset=Parroquia.objects.all(),
                                                 required=False, widget=forms.Select(attrs={'formwidth': '75%', 'col': '12'}))
    nacionalidad = forms.CharField(label=u"Nacionalidad", max_length=100, required=False,
                                   widget=forms.TextInput(attrs={'formwidth': '50%' , 'col': '12'}))
    pais = forms.ModelChoiceField(label=u"País residencia", queryset=Pais.objects.all(), required=False,
                                  widget=forms.Select(attrs={'formwidth': '75%' , 'col': '12'}))
    provincia = forms.ModelChoiceField(label=u"Provincia residencia", queryset=Provincia.objects.all(), required=False,
                                       widget=forms.Select(attrs={'formwidth': '75%', 'col': '12'}))
    canton = forms.ModelChoiceField(label=u"Canton residencia", queryset=Canton.objects.all(), required=False,
                                    widget=forms.Select(attrs={'formwidth': '75%'  , 'col': '12'}))
    parroquia = forms.ModelChoiceField(label=u"Parroquia residencia", queryset=Parroquia.objects.all(), required=False,
                                       widget=forms.Select(attrs={'formwidth': '75%'}))
    sector = forms.CharField(label=u"Sector", max_length=100, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-50'}))
    direccion = forms.CharField(label=u"Calle Principal", max_length=100, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-75'}))
    direccion2 = forms.CharField(label=u"Calle Secundaria", max_length=100, required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-75'}))
    num_direccion = forms.CharField(label=u"Numero Domicilio", max_length=15, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-25'}))
    telefono = forms.CharField(label=u"Telefono Movil", max_length=100, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-25' , 'col': '6'}))
    telefono_conv = forms.CharField(label=u"Telefono Fijo", max_length=100, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-25', 'col': '6'}))
    email = forms.CharField(label=u"Correo Electronico", max_length=240, required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-50'}))
    emailinst = forms.CharField(label=u"Correo Institucional", max_length=200, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-50'}))
    coordinacion = forms.ModelChoiceField(label=u"Coordinación", queryset=Coordinacion.objects.all(), required=False,
                                          widget=forms.Select(attrs={'class': 'imp-75'}))
    nivelcategoria = forms.ModelChoiceField(label=u'Tipo', queryset=ProfesorTipo.objects.all(), required=False,
                                            widget=forms.Select(attrs={'formwidth': '50%', 'col': '6'}))
    dedicacion = forms.ModelChoiceField(label=u'Tiempo de Dedicación', queryset=TiempoDedicacionDocente.objects.all(),
                                        required=False, widget=forms.Select(attrs={'formwidth': '50%', 'col': '6'}))
    categoria = forms.ModelChoiceField(label=u'Categorización', queryset=CategorizacionDocente.objects.all(),
                                       required=False, widget=forms.Select(attrs={'formwidth': '50%', 'col': '6'}))
    nivelescalafon = forms.ModelChoiceField(label=u'Nivel escalafón', queryset=NivelEscalafonDocente.objects.all(),
                                            required=False, widget=forms.Select(attrs={'formwidth': '50%', 'col': '6'}))
    cargo = forms.ModelChoiceField(label=u'Cargo docente', queryset=CargoDocente.objects.all(), required=False,
                                   widget=forms.Select(attrs={'formwidth': '50%'}))
    contrato = forms.CharField(label=u"Contrato", max_length=50, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-number', 'formwidth': '50%'}))
    fechaingreso = forms.DateField(label=u'Fecha de Ingreso', input_formats=['%d-%m-%Y'],
                                   widget=DateTimeInput(format='%d-%m-%Y',
                                                        attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    asignatura = forms.ModelMultipleChoiceField(label=u'Asignaturas', queryset=Asignatura.objects.filter(status=True), required=False)
    tienetoken = forms.BooleanField(label=u'Tiene token', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))

    def sin_nivelcategoria(self):
        del self.fields['nivelcategoria']

    def minivelcategoria(self, profesor):
        # if profesor.persona.titulacion_set.filter(principal=True).exists():
        # titulacion = profesor.persona.titulacion_set.filter(principal=True)[0]
        self.fields['nivelcategoria'].queryset = ProfesorTipo.objects.all()

    # else:
    #     self.fields['nivelcategoria'].queryset = ProfesorTipo.objects.filter(id=-1)

    def adicionar(self):
        self.fields['provincianacimiento'].queryset = Provincia.objects.filter(pais=None)
        self.fields['cantonnacimiento'].queryset = Canton.objects.filter(provincia=None)
        self.fields['parroquianacimiento'].queryset = Parroquia.objects.filter(canton=None)
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=None)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=None)
        self.fields['parroquia'].queryset = Parroquia.objects.filter(canton=None)
        self.fields['categoria'].queryset = CategorizacionDocente.objects.filter(profesortipo=None)
        if EMAIL_INSTITUCIONAL_AUTOMATICO:
            del self.fields['emailinst']

    def editar(self, persona):
        deshabilitar_campo(self, 'cedula')
        deshabilitar_campo(self, 'pasaporte')
        self.fields['provincianacimiento'].queryset = Provincia.objects.filter(pais=persona.paisnacimiento)
        self.fields['cantonnacimiento'].queryset = Canton.objects.filter(provincia=persona.provincianacimiento)
        self.fields['parroquianacimiento'].queryset = Parroquia.objects.filter(canton=persona.cantonnacimiento)
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=persona.pais)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=persona.provincia)
        self.fields['parroquia'].queryset = Parroquia.objects.filter(canton=persona.canton)
        self.fields['categoria'].queryset = CategorizacionDocente.objects.filter(
            profesortipo=persona.profesor().nivelcategoria)


class AdministrativosForm(FormModeloBase):
    nombres = forms.CharField(label=u"Nombres", max_length=200, widget=forms.TextInput(attrs={'class':'form-control','col': '12'}))
    apellido1 = forms.CharField(label=u"1er Apellido", max_length=50, widget=forms.TextInput(attrs={'class':'form-control', 'col': '6'}))
    apellido2 = forms.CharField(label=u"2do Apellido", max_length=50, required=False,
                                widget=forms.TextInput(attrs={'class':'form-control', 'col': '6'}))
    cedula = forms.CharField(label=u"Cédula", max_length=10, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-cedula form-control', 'col': '6'}))
    pasaporte = forms.CharField(label=u"Pasaporte", max_length=15, initial='', required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-cedula form-control', 'col': '6'}))
    nacimiento = forms.DateField(label=u"Fecha Nacimiento", initial=datetime.now().date(),
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha form-control', 'col': '6'}),
                                 required=False)
    sexo = forms.ModelChoiceField(label=u"Sexo", queryset=Sexo.objects.all(),
                                  widget=forms.Select(attrs={'class':'form-control', 'col': '6'}))
    paisnacimiento = forms.ModelChoiceField(label=u"País nacimiento", queryset=Pais.objects.all(), required=False,
                                            widget=forms.Select(attrs={'class':'form-control', 'col': '12'}))
    provincianacimiento = forms.ModelChoiceField(label=u"Provincia nacimiento", queryset=Provincia.objects.all(),
                                                 required=False, widget=forms.Select(attrs={'class':'form-control', 'col': '12'}))
    cantonnacimiento = forms.ModelChoiceField(label=u"Canton nacimiento", queryset=Canton.objects.all(), required=False,
                                              widget=forms.Select(attrs={'class':'form-control', 'col': '12'}))
    parroquianacimiento = forms.ModelChoiceField(label=u"Parroquia nacimiento", queryset=Parroquia.objects.all(),
                                                 required=False, widget=forms.Select(attrs={'class':'form-control', 'col': '12'}))
    nacionalidad = forms.CharField(label=u"Nacionalidad", max_length=100, required=False,
                                   widget=forms.TextInput(attrs={'class':'form-control', 'col': '12'}))
    pais = forms.ModelChoiceField(label=u"País residencia", queryset=Pais.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class':'form-control', 'col': '12'}))
    provincia = forms.ModelChoiceField(label=u"Provincia residencia", queryset=Provincia.objects.all(), required=False,
                                       widget=forms.Select(attrs={'class':'form-control', 'col': '12'}))
    canton = forms.ModelChoiceField(label=u"Canton residencia", queryset=Canton.objects.all(), required=False,
                                    widget=forms.Select(attrs={'class':'form-control', 'col': '12'}))
    parroquia = forms.ModelChoiceField(label=u"Parroquia residencia", queryset=Parroquia.objects.all(), required=False,
                                       widget=forms.Select(attrs={'class':'form-control', 'col': '12'}))
    sector = forms.CharField(label=u"Sector", max_length=100, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-50 form-control'}))
    direccion = forms.CharField(label=u"Calle Principal", max_length=100, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-75 form-control'}))
    direccion2 = forms.CharField(label=u"Calle Secundaria", max_length=100, required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-75 form-control'}))
    num_direccion = forms.CharField(label=u"Numero Domicilio", max_length=15, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-25 form-control'}))
    telefono = forms.CharField(label=u"Teléfono Movil", max_length=100, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-25 form-control', 'col': '6'}))
    telefono_conv = forms.CharField(label=u"Teléfono Fijo", max_length=100, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-25 form-control', 'col': '6'}))
    email = forms.CharField(label=u"Correo Electronico", max_length=240, required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-50 form-control'}))
    emailinst = forms.CharField(label=u"Correo Institucional", max_length=200, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-50 form-control'}))
    sangre = forms.ModelChoiceField(label=u"Tipo de Sangre", queryset=TipoSangre.objects.all(), required=False,
                                    widget=forms.Select(attrs={'class':'form-control', 'col': '12'}))

    def adicionar(self):
        self.fields['provincianacimiento'].queryset = Provincia.objects.filter(pais=None)
        self.fields['cantonnacimiento'].queryset = Canton.objects.filter(provincia=None)
        self.fields['parroquianacimiento'].queryset = Parroquia.objects.filter(canton=None)
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=None)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=None)
        self.fields['parroquia'].queryset = Parroquia.objects.filter(canton=None)
        if EMAIL_INSTITUCIONAL_AUTOMATICO:
            del self.fields['emailinst']

    def editar(self, persona):
        deshabilitar_campo(self, 'cedula')
        deshabilitar_campo(self, 'pasaporte')
        self.fields['provincianacimiento'].queryset = Provincia.objects.filter(pais=persona.paisnacimiento)
        self.fields['cantonnacimiento'].queryset = Canton.objects.filter(provincia=persona.provincianacimiento)
        self.fields['parroquianacimiento'].queryset = Parroquia.objects.filter(canton=persona.cantonnacimiento)
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=persona.pais)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=persona.provincia)
        self.fields['parroquia'].queryset = Parroquia.objects.filter(canton=persona.canton)


class CambioClaveForm(forms.Form):
    anterior = forms.CharField(label=u'Clave actual', widget=forms.PasswordInput())
    nueva = forms.CharField(label=u'Nueva clave', widget=forms.PasswordInput(attrs={'class': 'validarclave'}))
    repetir = forms.CharField(label=u'Repetir clave', widget=forms.PasswordInput(attrs={'class': 'validarclave'}))


class ArchivoBancaonlineForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo',
                           help_text=u'Tamaño Maximo permitido 40Mb, en formato csv, txt, xls, xlsx',
                           ext_whitelist=(".csv", ".txt", ".xls", ".xlsx"), max_upload_size=41943040)


class ArchivoBancaonlineVerificadoForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo', required=True,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato csv xlsx xls',
                           ext_whitelist=(".csv", ".xlsx", ".xls",), max_upload_size=4194304,
                           widget=forms.FileInput(
                               attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'csv xlsx xls', 'class': 'dropify'}))


class ArchivoSyllabusForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=200)
    archivoword = ExtFileField(label=u'Seleccione Archivo Word',
                               help_text=u'Tamaño Maximo permitido 40Mb, en formato doc, docx',
                               ext_whitelist=(".doc", ".docx"), max_upload_size=41943040)
    archivopdf = ExtFileField(label=u'Seleccione Archivo Pdf',
                              help_text=u'Tamaño Maximo permitido 40Mb, en formato pdf', ext_whitelist=(".pdf",),
                              max_upload_size=41943040)


class ArchivoSyllabusWordForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=200)
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño Maximo permitido 40Mb, en formato doc, docx',
                           ext_whitelist=(".doc", ".docx"), max_upload_size=41943040)


class ArchivoSyllabusPdfForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=200)
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño Maximo permitido 40Mb, en formato pdf',
                           ext_whitelist=(".pdf",), max_upload_size=41943040)


class ArchivoGeneralForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=200)
    grupo = forms.ModelChoiceField(label=u'Grupo', queryset=Group.objects.all().order_by('name'), widget=forms.Select(attrs={'class': 'imp-50'}))
    archivo = ExtFileField(label=u'Seleccione Archivo',
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, xls, xlsx, pdf',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".DOC", ".DOCX", ".XLS", ".XLSX", ".PDF", ".png", ".jpeg", ".jpg", ".html"),
                           max_upload_size=10485760, required=False)
    visible = forms.BooleanField(label=u'Visible', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%', 'separator': 'true'}))
    sga = forms.BooleanField(label=u'SGA', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    sagest = forms.BooleanField(label=u'SAGEST', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    api = forms.BooleanField(label=u'API', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))


class ArchivoSyllabusMallaForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre")
    fecha = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    archivo = ExtFileField(label=u'Seleccione Archivo',
                           help_text=u'Tamaño Maximo permitido 40Mb, en formato doc, docx, xls, xlsx, pdf',
                           ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".pdf"), max_upload_size=41943040,
                           required=False)

    def sin_archivo(self):
        del self.fields['archivo']


class ArchivoDeberForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre")
    archivo = ExtFileField(label=u'Seleccione Archivo',
                           help_text=u'Tamaño Maximo permitido 40Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=41943040)


class ActaFacultadForm(forms.Form):
    estudiante = forms.CharField(label=u"Estudiante")
    actafacultad = forms.ModelChoiceField(label=u"Acta Facultad", queryset=ActaFacultad.objects.all(), required=False,
                                          widget=forms.Select(attrs={'formwidth': '100%'}))

    def adicionar(self):
        deshabilitar_campo(self, 'estudiante')


class GraduadoForm(forms.Form):
    decano = forms.IntegerField(initial=0, required=False, label=u'Decano/a', widget=forms.TextInput(attrs={'select2search': 'true'}))
    subdecano = forms.IntegerField(initial=0, required=False, label=u'Subdecano/a', widget=forms.TextInput(attrs={'select2search': 'true'}))
    directorcarrera = forms.IntegerField(initial=0, required=False, label=u'Director/ra de carrera', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representanteestudiantil = forms.IntegerField(initial=0, required=False, label=u'Representante Principal Estudiantil', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representanteestudiantildos = forms.IntegerField(initial=0, required=False, label=u'Representante Principal Estudiantil 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representantesuplenteestudiantil = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente Estudiantil', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representantesuplenteestudiantildos = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente Estudiantil 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representantedocente = forms.IntegerField(initial=0, required=False, label=u'Representante Principal de Docente', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representantedocentedos = forms.IntegerField(initial=0, required=False, label=u'Representante Principal de Docente 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representantesuplentedocente = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente de Docente', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representantesuplentedocentedos = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente de Docente 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representanteservidores = forms.IntegerField(initial=0, required=False, label=u'Representante Principal de los Servidores y Trabajadores', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representanteservidoresdos = forms.IntegerField(initial=0, required=False, label=u'Representante Principal de los Servidores y Trabajadores 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representantesuplenteservidores = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente de los Servidores y Trabajadores', widget=forms.TextInput(attrs={'select2search': 'true'}))
    representantesuplenteservidoresdos = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente de los Servidores y Trabajadores 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    profesor = forms.IntegerField(initial=0, required=False, label=u'Tutor del Trabajo', widget=forms.TextInput(attrs={'select2search': 'true'}))
    integrantetribunal = forms.IntegerField(initial=0, required=False, label=u'Integrante del Tribunal', widget=forms.TextInput(attrs={'select2search': 'true'}))
    docentesecretario = forms.IntegerField(initial=0, required=False, label=u'Docente Secretario', widget=forms.TextInput(attrs={'select2search': 'true'}))
    docenteevaluador1 = forms.IntegerField(initial=0, required=False, label=u'Evaluador 1', widget=forms.TextInput(attrs={'select2search': 'true', 'class': 'imp-100'}))
    docenteevaluador2 = forms.IntegerField(initial=0, required=False, label=u'Evaluador 2', widget=forms.TextInput(attrs={'select2search': 'true', 'class': 'imp-100'}))
    asistentefacultad = forms.IntegerField(initial=0, required=False, label=u'Asistente de Facultad', widget=forms.TextInput(attrs={'select2search': 'true'}))
    secretariageneral = forms.IntegerField(initial=0, required=False, label=u'Secretaria General', widget=forms.TextInput(attrs={'select2search': 'true'}))
    directoresfacultad = forms.ModelMultipleChoiceField(label=u"Directores de carrera",
                                                        queryset=Persona.objects.filter(Q(perfilusuario__administrativo__isnull=False) | Q(perfilusuario__profesor__isnull=False)).distinct(), required=False,
                                                        widget=forms.SelectMultiple(attrs={'formwidth': '94%'}))
    fechainicioactivo = forms.BooleanField(required=False, label=u'Editar Fecha', widget=CheckboxInput(attrs={'formwidth': '100%'}))
    fechainicio = forms.DateField(label=u"Fecha de Inicio Primer Nivel", required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechaegresadoactivo = forms.BooleanField(required=False, label=u'Editar Fecha', widget=CheckboxInput(attrs={'formwidth': '100%'}))
    fechaegresado = forms.DateField(label=u"Fecha de Egresado", required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechagraduado = forms.DateField(label=u"Fecha Graduación", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    horagraduacion = forms.TimeField(label=u"Hora Graduación", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    horacertificacion = forms.TimeField(label=u"Hora Certificación", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    tematesis = forms.CharField(label=u'Tema de Proyecto', widget=forms.Textarea, required=False)
    notafinal = forms.FloatField(label=u"Promedio 1ro hasta último nivel", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    registro = forms.CharField(label=u'Registro Senescyt', max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    fechaactagrado = forms.DateField(label=u"Fecha Acta Grado", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    numeroactagrado = forms.CharField(label=u'Numero acta de grado', max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    folio = forms.CharField(label=u'Iniciales de la carrera y folio', help_text=u'Ej. 01-LTR-11448-2016 ', max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    fecharefrendacion = forms.DateField(label=u"Fecha Refrendación", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    # mecanismotitulacion = forms.CharField(label=u'Mecanismo de Titulación', max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    codigomecanismotitulacion = forms.ModelChoiceField(label=u"Mecanismo de Titulación", queryset=GraduadoMecanismoTitulacion.objects.filter(status=True), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    horastitulacion = forms.FloatField(label=u"Horas Titulación", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    creditotitulacion = forms.FloatField(label=u"Créditos Titulación", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    creditovinculacion = forms.FloatField(label=u"Créditos Vinculación", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    creditopracticas = forms.FloatField(label=u"Créditos Prácticas Preprofesionales", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    promediotitulacion = forms.FloatField(label=u"Nota Trabajo Titulación", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    notagraduacion = forms.FloatField(label=u"Nota Graduación", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    fechaconsejo = forms.DateField(label=u"Fecha de Consejo Directivo", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    nombretitulo = forms.CharField(label=u'Nombre Título', max_length=200, required=False, widget=forms.TextInput(attrs={'class': ''}))
    estadograduado = forms.BooleanField(required=False, label=u'Aprobado', widget=CheckboxInput(attrs={'formwidth': '100%'}))

    def no_tiene_propuesta(self):
        del self.fields['profesor']
        del self.fields['integrantetribunal']
        del self.fields['docentesecretario']
        del self.fields['tematesis']

    def tiene_propuesta(self):
        del self.fields['docenteevaluador1']
        del self.fields['docenteevaluador2']
        del self.fields['directorcarrera']


class GraduadoIntegracionCurricularForm(forms.Form):
    decano = forms.IntegerField(initial=0, required=False, label=u'Decano/a', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # subdecano = forms.IntegerField(initial=0, required=False, label=u'Subdecano/a', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # directorcarrera = forms.IntegerField(initial=0, required=False, label=u'Director/ra de carrera', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representanteestudiantil = forms.IntegerField(initial=0, required=False, label=u'Representante Principal Estudiantil', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representanteestudiantildos = forms.IntegerField(initial=0, required=False, label=u'Representante Principal Estudiantil 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representantesuplenteestudiantil = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente Estudiantil', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representantesuplenteestudiantildos = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente Estudiantil 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representantedocente = forms.IntegerField(initial=0, required=False, label=u'Representante Principal de Docente', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representantedocentedos = forms.IntegerField(initial=0, required=False, label=u'Representante Principal de Docente 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representantesuplentedocente = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente de Docente', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representantesuplentedocentedos = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente de Docente 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representanteservidores = forms.IntegerField(initial=0, required=False, label=u'Representante Principal de los Servidores y Trabajadores', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representanteservidoresdos = forms.IntegerField(initial=0, required=False, label=u'Representante Principal de los Servidores y Trabajadores 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representantesuplenteservidores = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente de los Servidores y Trabajadores', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # representantesuplenteservidoresdos = forms.IntegerField(initial=0, required=False, label=u'Representante Suplente de los Servidores y Trabajadores 2', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # profesor = forms.IntegerField(initial=0, required=False, label=u'Tutor del Trabajo', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # integrantetribunal = forms.IntegerField(initial=0, required=False, label=u'Integrante del Tribunal', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # docentesecretario = forms.IntegerField(initial=0, required=False, label=u'Docente Secretario', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # docenteevaluador1 = forms.IntegerField(initial=0, required=False, label=u'Evaluador 1', widget=forms.TextInput(attrs={'select2search': 'true', 'class': 'imp-100'}))
    # docenteevaluador2 = forms.IntegerField(initial=0, required=False, label=u'Evaluador 2', widget=forms.TextInput(attrs={'select2search': 'true', 'class': 'imp-100'}))
    asistentefacultad = forms.IntegerField(initial=0, required=False, label=u'Asistente de Facultad', widget=forms.TextInput(attrs={'select2search': 'true'}))
    secretariageneral = forms.IntegerField(initial=0, required=False, label=u'Secretaria General', widget=forms.TextInput(attrs={'select2search': 'true'}))
    directoresfacultad = forms.ModelMultipleChoiceField(label=u"Directores de carrera", queryset=Persona.objects.filter(Q(perfilusuario__administrativo__isnull=False) | Q(perfilusuario__profesor__isnull=False)).distinct(), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '94%'}))
    fechainicioactivo = forms.BooleanField(required=False, label=u'Editar Fecha', widget=CheckboxInput(attrs={'formwidth': '100%'}))
    fechainicio = forms.DateField(label=u"Fecha de Inicio Primer Nivel", required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechaegresadoactivo = forms.BooleanField(required=False, label=u'Editar Fecha', widget=CheckboxInput(attrs={'formwidth': '100%'}))
    fechaegresado = forms.DateField(label=u"Fecha de Egresado", required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechagraduado = forms.DateField(label=u"Fecha Graduación", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    horagraduacion = forms.TimeField(label=u"Hora Graduación", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    horacertificacion = forms.TimeField(label=u"Hora Certificación", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    tematesis = forms.CharField(label=u'Tema de Proyecto', widget=forms.Textarea, required=False)
    notafinal = forms.FloatField(label=u"Promedio 1ro hasta último nivel", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    registro = forms.CharField(label=u'Registro Senescyt', max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    fechaactagrado = forms.DateField(label=u"Fecha Acta Grado", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    numeroactagrado = forms.CharField(label=u'Folio acta de grado', max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    folio = forms.CharField(label=u'# acta de grado', help_text=u'Ej. 01-LTR-11448-2016 ', max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    folioactaconsolidada = forms.CharField(label=u'Folio acta consolidada', max_length=50, required=False,  widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    numeroactaconsolidada = forms.CharField(label=u'# acta consolidada', help_text=u'Ej. LTR-11448-2016 ', max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    fecharefrendacion = forms.DateField(label=u"Fecha Refrendación", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    # mecanismotitulacion = forms.CharField(label=u'Mecanismo de Titulación', max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))
    codigomecanismotitulacion = forms.ModelChoiceField(label=u"Mecanismo de Titulación", queryset=GraduadoMecanismoTitulacion.objects.filter(status=True), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    horastitulacion = forms.FloatField(label=u"Horas Titulación", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    creditotitulacion = forms.FloatField(label=u"Créditos Titulación", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    creditovinculacion = forms.FloatField(label=u"Créditos Vinculación", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    creditopracticas = forms.FloatField(label=u"Créditos Prácticas Preprofesionales", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    promediotitulacion = forms.FloatField(label=u"Nota Trabajo Titulación", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    notagraduacion = forms.FloatField(label=u"Nota Graduación", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'enabled': 'enabled'}))
    fechaconsejo = forms.DateField(label=u"Fecha de Consejo Directivo", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    nombretitulo = forms.CharField(label=u'Nombre Título', max_length=200, required=False, widget=forms.TextInput(attrs={'class': ''}))
    estadograduado = forms.BooleanField(required=False, label=u'Aprobado', widget=CheckboxInput(attrs={'formwidth': '100%'}))

    def no_tiene_propuesta(self):
        del self.fields['profesor']
        del self.fields['integrantetribunal']
        del self.fields['docentesecretario']
        del self.fields['tematesis']

    def tiene_propuesta(self):
        del self.fields['docenteevaluador1']
        del self.fields['docenteevaluador2']
        del self.fields['directorcarrera']

class GraduadoInfoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.TextInput(attrs={'class': 'imp-75'}))
    identificacion = forms.CharField(label=u'Identificación', widget=forms.TextInput(attrs={'class': 'imp-25'}))
    carrera = forms.CharField(label=u'Carrera')
    modalidad = forms.CharField(label=u'Modalidad', widget=forms.TextInput(attrs={'class': 'imp-50'}))
    fechaegresado = forms.CharField(label=u'Fecha egresado',
                                    widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechagraduado = forms.CharField(label=u'Fecha graduado',
                                    widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    telefono_fijo = forms.CharField(label=u'Telefono filjo', widget=forms.TextInput(attrs={'class': 'imp-50'}))
    telefono_movil = forms.CharField(label=u'Telefono movil', widget=forms.TextInput(attrs={'class': 'imp-50'}))
    email = forms.CharField(label=u'Correo electronico', widget=forms.TextInput(attrs={'class': 'imp-50'}))
    empresa = forms.CharField(label=u'Empresa')
    cargo = forms.CharField(label=u'Cargo', widget=forms.TextInput(attrs={'class': 'imp-50'}))
    ejerce = forms.CharField(label=u'Ejerce', widget=forms.TextInput(attrs={'class': 'imp-50'}))
    estudios_post_institucion = forms.CharField(label=u'Estudios posteriores')
    estudios_post_carrera = forms.CharField(label=u'Carrera')
    graduado = forms.BooleanField(label=u'Graduado')


class SeguimientoGraduadoForm(forms.Form):
    empresa = forms.CharField(label=u"Empresa", max_length=200)
    cargo = forms.CharField(label=u"Cargo", max_length=100)
    ocupacion = forms.CharField(label=u"Ocupación", max_length=100)
    telefono = forms.CharField(max_length=50, label=u"Telefonos", required=False)
    email = forms.CharField(max_length=100, label=u"Email Empresa", required=False)
    sueldo = forms.FloatField(label=u"Salario", initial="0.00", required=False,
                              widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    ejerce = forms.BooleanField(label=u'Ejerce la Profesion', required=False)


class EgresadoForm(forms.Form):
    fechaegreso = forms.DateField(input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                  label=u"Fecha Egreso")
    notaegreso = forms.FloatField(label=u"Nota de Egreso",
                                  widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}),
                                  required=False)

    def deshabilitar_notaegreso(self):
        deshabilitar_campo(self, 'notaegreso')


class BecarioForm(forms.Form):
    tipobeca = forms.ModelChoiceField(label=u"Tipo de Beca", queryset=TipoBeca.objects.all(), required=False,
                                      widget=forms.Select(attrs={'class': 'imp-50'}))
    tipobecarecibe = forms.ChoiceField(label=u'Beca Recibe', choices=BECA_RECIBE,
                                       widget=forms.Select(attrs={'class': 'imp-50'}))
    porciento = forms.IntegerField(label=u"Porciento", initial=0, required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    montobeneficio = forms.FloatField(label=u"Monto Total", initial="0.00", required=False,
                                      widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    montomensual = forms.FloatField(label=u"Monto mensual", initial="0.00", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-number'}))
    cantidadmeses = forms.ChoiceField(label=u'Cantidad de meses', required=False, choices=MESES_NUMBER_CHOICES,
                                      widget=forms.Select(attrs={'class': 'input-medium'}))
    motivo = forms.CharField(label=u'Motivo', widget=forms.Textarea, required=False)

    def editar(self, tipobeca):
        if tipobeca.beneficiomonetario:
            deshabilitar_campo(self, 'porciento')
        else:
            deshabilitar_campo(self, 'montobeneficio')
            deshabilitar_campo(self, 'montomensual')
            deshabilitar_campo(self, 'cantidadmeses')


class ConsiderarForm(forms.Form):
    motivo = forms.CharField(label=u"Motivo", max_length=100, required=False)


class LiquidarForm(forms.Form):
    motivo = forms.CharField(label=u"Motivo", max_length=100, required=False)


class DobeInscripcionForm(forms.Form):
    raza = forms.ModelChoiceField(label=u'Etnia', queryset=Raza.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-75'}))
    tienediscapacidad = forms.BooleanField(label=u"Tiene Discapacidad?", required=False)
    tipodiscapacidad = forms.ModelChoiceField(label=u"Tipo de Discapacidad", queryset=Discapacidad.objects.filter(status=True),
                                              required=False, widget=forms.Select(attrs={'class': 'imp-75'}))
    porcientodiscapacidad = forms.IntegerField(label=u'% de Discapacidad', required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    carnetdiscapacidad = forms.CharField(label=u'Carnet Discapacitado', required=False,
                                         widget=forms.TextInput(attrs={'class': 'imp-50'}))


class CargarFotoForm(forms.Form):
    foto = ExtFileField(label=u'Seleccione Imagen', help_text=u'Tamaño Maximo permitido 500Kb, en formato jpg',
                        ext_whitelist=(".jpg",), max_upload_size=524288)


class CronoramaCalificacionesForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=200)


class FechaPeriodoEvaluacionesForm(forms.Form):
    califdesde = forms.DateField(label=u"Fecha inicio", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    califhasta = forms.DateField(label=u"Fecha fin", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class EstudioInscripcionBasicoForm(forms.Form):
    colegio = forms.CharField(label=u"Colegio", max_length=200, required=False)
    especialidad = forms.CharField(label=u"Especialidad", max_length=100, required=False)
    incorporacion = forms.CharField(label=u"Año de Incorporación", max_length=10, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-10'}))


class EstudioInscripcionSuperiorForm(forms.Form):
    superiores = forms.CharField(label=u"Institución", max_length=200, required=False)
    carrera = forms.CharField(label=u"Carrera", max_length=200, required=False)
    titulo = forms.CharField(label=u"Título", max_length=200, required=False)
    anoestudio = forms.IntegerField(label=u"Años de Estudio", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    graduado = forms.BooleanField(label=u"Graduado", required=False)
    posteriores = forms.BooleanField(label=u"Posteriores", required=False)
    incorporacion = forms.CharField(label=u"Año de Incorporación", max_length=10, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-10'}))
    registro = forms.CharField(label=u'Registro SENESCYT', required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-25'}))


class DocumentoInscripcionForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=200)
    tipo = forms.ModelChoiceField(label=u"Tipo Archivo", queryset=TipoArchivo.objects.filter(vigente=True),
                                  required=False, widget=forms.Select(attrs={'class': 'imp-75'}))
    archivo = ExtFileField(label=u'Seleccione Archivo',
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf, jpg, png',
                           ext_whitelist=(".doc", ".docx", ".pdf", ".jpg", ".png"), max_upload_size=4194304)


class ImportarInscripcionForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño Maximo permitido 4Mb, en formato txt, csv',
                           ext_whitelist=(".txt", ".csv"), max_upload_size=4194304)


class ImportarArchivoXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xlsx", ".xls",), max_upload_size=41943040)


class ImportarArchivoObrasXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)


class ImportarArchivoMaterialesXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)


class ImportarArchivoSalariosXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)


class ImportarArchivoMaquinariasXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)


class ImportarArchivoRecursosMaterialesXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)


class ImportarArchivoRecursosSalariosXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)


class ImportarArchivoRecursosMaquinariasXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)


class ImportarEncuestaForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño Maximo permitido 4Mb, en formato csv',
                           ext_whitelist=(".csv", ".txt",), max_upload_size=4194304)

#Nuevos Formularios
class ImportarTipoRecursoXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)

class ImportarAnexoRecursoXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)

class FechaInicioConvalidacionInscripcionForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha", required=False, input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'imp-number'}))


class FechaInicioPrimerNivelInscripcionForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha", required=False, input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'imp-number'}))


class FechaInicioCarreraInscripcionForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha", required=False, input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'imp-number'}))


class CambioFechaAsignacionMateriaForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class PeriodoForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=200)
    inicio = forms.DateField(label=u"Inicio", input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fin", input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    tipo = forms.ModelChoiceField(label=u"Tipo de periodo", queryset=TipoPeriodo.objects.all(),
                                  widget=forms.Select(attrs={'class': 'imp-50'}))
    valida_asistencia = forms.BooleanField(label=u"Validar asistencias", required=False, initial=True)
    visiblehorario = forms.BooleanField(label=u"Visible horario", required=False, initial=True)
    inicio_agregacion = forms.DateField(label=u"Inicio agregaciones", input_formats=['%d-%m-%Y'],
                                        widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    limite_agregacion = forms.DateField(label=u"Limite agregaciones", input_formats=['%d-%m-%Y'],
                                        widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    limite_retiro = forms.DateField(label=u"Limite retiro", input_formats=['%d-%m-%Y'],
                                    widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    porcentaje_gratuidad = forms.IntegerField(label=u"Porcentaje Gratuidad", initial=0, required=False,
                                              widget=forms.TextInput(
                                                  attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    valor_maximo = forms.FloatField(label=u'Valor Maximo', initial="0.00", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    anio = forms.IntegerField(label=u'Año de Periodo', required=False, widget=forms.TextInput(attrs={'class': 'imp-anio', 'decimal': '0'}))
    clasificacion = forms.ChoiceField(choices=CLASIFICACION_PERIODO, required=False, label=u'Clasificación', widget=forms.Select())

    cohorte = forms.IntegerField(label=u"Cohorte", initial=0, required=False,widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))



class ModeloEvaluativoForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=100)
    principal = forms.BooleanField(label=u"Principal", required=False, initial=False)
    activo = forms.BooleanField(label=u"Activo", required=False, initial=True)
    notamaxima = forms.FloatField(label=u"Nota Maxima", initial="0.00", required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    notaaprobar = forms.FloatField(label=u"Nota para Aprobar", initial="0.00", required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    notarecuperacion = forms.FloatField(label=u"Nota para Recup.", initial="0.00", required=False,
                                        widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    asistenciaaprobar = forms.IntegerField(label=u"% Asist. para Aprobar.", initial=0, required=False,
                                           widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    asistenciarecuperacion = forms.IntegerField(label=u"% Asist. para Recup.", initial=0, required=False,
                                                widget=forms.TextInput(
                                                    attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    notafinaldecimales = forms.IntegerField(label=u"Decimales N.Final", initial=0, required=False,
                                            widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    observaciones = forms.CharField(label=u'Observaciones', widget=forms.Textarea, required=False)


class DetalleModeloEvaluativoForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=10, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-25'}))
    alternativa = forms.ModelChoiceField(label=u"Alternativas", queryset=CodigoEvaluacion.objects,
                                         widget=forms.Select(attrs={'class': 'imp-100'}))
    orden = forms.IntegerField(label=u"Orden en Acta", required=False, initial=0,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    notaminima = forms.FloatField(label=u"Nota Minima", initial="0.00", required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    notamaxima = forms.FloatField(label=u"Nota Maxima", initial="0.00", required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    decimales = forms.IntegerField(label=u"Decimales", initial=0, required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    dependiente = forms.BooleanField(label=u"Campo Dependiente?", required=False, initial=False)
    actualizaestado = forms.BooleanField(label=u"Actualiza Estado?", required=False, initial=False)
    determinaestadofinal = forms.BooleanField(label=u"Determina Estado final?", required=False, initial=False)
    dependeasistencia = forms.BooleanField(label=u"Depende de asisencia?", required=False, initial=False)

    def editar(self):
        deshabilitar_campo(self, 'nombre')


class LogicaModeloEvaluativoForm(forms.Form):
    logica = forms.CharField(label=u'Lógica', widget=forms.Textarea(attrs={'rows': '15'}), required=False)


class ActividadesInscripcionForm(forms.Form):
    colegio = forms.CharField(label=u"Colegio", max_length=200, required=False)
    titulo = forms.CharField(label=u"Titulo", max_length=200, required=False)
    incorporacion = forms.CharField(label=u"Ano Incorporación", max_length=10, required=False)
    especialidad = forms.CharField(label=u"Especialidad", max_length=100, required=False)
    universidad = forms.CharField(label=u"Universidad", max_length=200, required=False)
    carrera = forms.CharField(label=u"Carrera", max_length=200, required=False)
    anoestudio = forms.IntegerField(label=u"Anos de Estudio", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    graduado = forms.BooleanField(label=u"Graduado?", required=False)
    razon = forms.CharField(label=u"Razon Social", max_length=200, required=False)
    cargo = forms.CharField(label=u"Cargo", max_length=200, required=False)
    direccion = forms.CharField(label=u"Dirección del Trabajo", max_length=200, required=False)
    telefono = forms.CharField(label=u'Telefono', max_length=200, required=False)
    email = forms.EmailField(label=u"Email Trabajo", required=False)


class PersonaTituloUniversidadForm(forms.Form):
    codigoregistro = forms.CharField(label=u"Codigo Registro", max_length=100)
    fecharegistro = forms.DateField(label=u"Fecha Registro", required=False, input_formats=['%d-%m-%Y'],
                                    widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio Estudios", required=False, input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fecharegresado = forms.DateField(label=u"Fecha Egresado", required=False, input_formats=['%d-%m-%Y'],
                                     widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechaacta = forms.DateField(label=u"Fecha Acta de Grado", required=False, input_formats=['%d-%m-%Y'],
                                widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    universidad = forms.ModelChoiceField(label=u"Universidad", queryset=InstitucionEducacionSuperior.objects.all(),
                                         widget=forms.Select(attrs={'class': 'imp-50'}))
    tipouniversidad = forms.ChoiceField(choices=TIPO_UNIVERSIDAD, required=False, label=u'Tipo Universidad',
                                        widget=forms.Select())
    nombrecarrera = forms.CharField(label=u"Nombre Carrera", max_length=200, required=False)
    tiponivel = forms.ChoiceField(choices=TIPO_NIVEL, required=False, label=u'Tipo Nivel', widget=forms.Select())


class GrupoForm(forms.Form):
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False)
    modalidad = forms.ModelChoiceField(label=u"Modalidad", queryset=Modalidad.objects, required=False,
                                       widget=forms.Select(attrs={'class': 'imp-50'}))
    sesion = forms.ModelChoiceField(label=u"Sesión", queryset=Sesion.objects.all(), required=False)
    nombre = forms.CharField(label=u"Nombre", max_length=40, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    sede = forms.ModelChoiceField(label=u"Sede", queryset=Sede.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-50'}))
    inicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    capacidad = forms.IntegerField(label=u"Capacidad", initial=30,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    costoinscripcion = forms.FloatField(label=u"Costo inscripción", initial=0,
                                        widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    observaciones = forms.CharField(label=u"Observaciones", max_length=200, required=False)

    def editar(self):
        deshabilitar_campo(self, 'carrera')
        deshabilitar_campo(self, 'modalidad')
        deshabilitar_campo(self, 'sesion')
        deshabilitar_campo(self, 'sede')


class PagoNivelForm(forms.Form):
    tipo = forms.ModelChoiceField(TipoOtroRubro.objects.all(), label=u"Tipo Pago", required=False)
    cuota = forms.IntegerField(label=u'Número de cuota', initial=1, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    fecha = forms.DateField(label=u"Fecha", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    valor = forms.FloatField(label=u'Valor', initial="0.00",
                             widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))

    def editar(self):
        deshabilitar_campo(self, 'tipo')
        deshabilitar_campo(self, 'cuota')


class ListaModeloEvaluativoForm(forms.Form):
    modelo = forms.ModelChoiceField(ModeloEvaluativo.objects.all(), label=u"Modelos")

    def excluir_modeloactual(self, modeloevaluativo):
        if modeloevaluativo:
            self.fields['modelo'].queryset = ModeloEvaluativo.objects.filter(activo=True).exclude(id=modeloevaluativo.id)
        else:
            self.fields['modelo'].queryset = ModeloEvaluativo.objects.filter(activo=True)

    def excluir_modeloactualposgrado(self, modeloevaluativo):
        if modeloevaluativo:
            self.fields['modelo'].queryset = ModeloEvaluativo.objects.filter((Q(pk__in=[13, 16]) | Q(nombre__icontains='POSGRADO')) & Q(activo=True)).exclude(id=modeloevaluativo.id)
        else:
            self.fields['modelo'].queryset = ModeloEvaluativo.objects.filter((Q(pk__in=[13, 16]) | Q(nombre__icontains='POSGRADO')) & Q(activo=True))


class MatricularModuloForm(forms.Form):
    materia = forms.ModelChoiceField(Materia.objects.filter(status=True), required=False, label=u"Modelos")

    def materias(self, materiaaux):
        hoy = datetime.now().date()
        nivel = materiaaux.nivel
        # paralelomateria = materiaaux.paralelomateria
        paralelomateria = materiaaux.paralelo
        self.fields['materia'].queryset = Materia.objects.filter(nivel=nivel, status=True, inicio__gte=hoy, paralelo=paralelomateria).exclude(pk=materiaaux.id)


class MateriaParaleloForm(forms.Form):
    valor = forms.IntegerField(label=u'Número', initial=1, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    paralelo = forms.ModelChoiceField(Paralelo.objects.filter(status=True), label=u"Paralelo")

    def paralelo_materia(self, nivel, malla, asignatura, paraleloactual):
        idparalelosmateria = Materia.objects.values_list('paralelomateria_id', flat=True).filter(status=True, asignatura=asignatura, nivel__periodo=nivel.periodo, asignaturamalla__malla=malla, asignaturamalla__status=True).distinct()
        self.fields['paralelo'].queryset = Paralelo.objects.filter(id__in=idparalelosmateria).exclude(pk=paraleloactual.id).distinct()


class MateriaParalelo2Form(forms.Form):
    paralelo = forms.ModelChoiceField(Paralelo.objects.filter(status=True), label=u"Paralelo")
    nivel = forms.ModelChoiceField(Nivel.objects.filter(status=True), label=u'Nuevo Nivel')

    def paralelo_materia(self, nivel, malla, asignatura, paraleloactual):
        materias = Materia.objects.values_list('paralelomateria_id', flat=True).filter(status=True, asignatura=asignatura, nivel__periodo=nivel.periodo, asignaturamalla__malla=malla, asignaturamalla__status=True).distinct()
        self.fields['paralelo'].queryset = Paralelo.objects.filter(id__in=materias.values_list('paralelomateria_id', flat=True)).exclude(pk=paraleloactual.id).distinct()
        self.fields['nivel'].queryset = Nivel.objects.filter(id__in=materias.values_list('nivel_id', flat=True)).distinct()


class PagoCalendarioForm(forms.Form):
    tipo = forms.ModelChoiceField(TipoOtroRubro.objects.all(), label=u"Tipo Pago", required=False)
    cuota = forms.IntegerField(label=u'Número de cuota', initial=1, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    fecha = forms.DateField(label=u"Fecha", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    valor = forms.FloatField(label=u'Valor', initial="0.00",
                             widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))

    def editar(self):
        deshabilitar_campo(self, 'tipo')
        deshabilitar_campo(self, 'cuota')


class RetiradoMatriculaForm(forms.Form):
    motivo = forms.CharField(label=u'Motivo', max_length=200)


class RetiradoMateriaForm(forms.Form):
    motivo = forms.CharField(label=u'Motivo', max_length=150)


class ProfesorMateriaForm(forms.Form):
    tipoprofesor = forms.ModelChoiceField(label=u'Tipo', required=False, queryset=TipoProfesor.objects.all(), widget=forms.Select(attrs={'class': 'imp-50'}))
    segmento = forms.CharField(label=u'Segmento', required=False, max_length=200, widget=forms.TextInput(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    hora = forms.IntegerField(label=u'Número de Horas semanales', initial=0, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    desde = forms.DateField(label=u"Desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    hasta = forms.DateField(label=u"Hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    principal = forms.BooleanField(label=u'Principal?', initial=True, required=False, widget=CheckboxInput(attrs={'formwidth': '50%'}))
    novalidahorario = forms.BooleanField(label=u'No validar horarios?', required=False, widget=CheckboxInput(attrs={'formwidth': '50%'}))
    evalua = forms.BooleanField(label=u'Se evalua?', initial=True, required=False, widget=CheckboxInput(attrs={'formwidth': '50%'}))
    utilizawebex = forms.BooleanField(label=u'Utiliza cisco webex?', required=False, widget=CheckboxInput(attrs={'formwidth': '50%'}))
    subactividadtutorvirtual = forms.BooleanField(label=u'Detalle actividad tutor virtual?', required=False, widget=CheckboxInput(attrs={'formwidth': '50%'}))
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor', widget=forms.TextInput(attrs={'select2search': 'true'}))

    def editar(self):
        deshabilitar_campo(self, 'tipoprofesor')
        # deshabilitar_campo(self, 'profesor')
        deshabilitar_campo(self, 'segmento')

    def editar_tipo(self):
        # deshabilitar_campo(self, 'profesor')
        deshabilitar_campo(self, 'segmento')


class UnirGruposForm(forms.Form):
    fuente = forms.ModelChoiceField(label=u'Desde', queryset=Grupo.objects.all(), required=False)
    destino = forms.ModelChoiceField(label=u'Destino', queryset=Grupo.objects.all())

    def sin_origen(self, grupo):
        self.fields['destino'].queryset = Grupo.objects.filter(carrera=grupo.carrera).exclude(id=grupo.id)
        deshabilitar_campo(self, 'fuente')


class TipoIncidenciaForm(forms.Form):
    tipo = forms.ModelChoiceField(label=u"Reenviar", queryset=TipoIncidencia.objects.all())


class ResponderIncidenciaForm(forms.Form):
    solucion = forms.CharField(label=u'Respuesta', widget=forms.Textarea, )


class RolPerfilProfesorForm(forms.Form):
    chlunes = forms.FloatField(label=u'CxH Lunes', initial="0.00", required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    chmartes = forms.FloatField(label=u'CxH Martes', initial="0.00", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    chmiercoles = forms.FloatField(label=u'CxH Miercoles', initial="0.00", required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    chjueves = forms.FloatField(label=u'CxH Jueves', initial="0.00", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    chviernes = forms.FloatField(label=u'CxH Viernes', initial="0.00", required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    chsabado = forms.FloatField(label=u'CxH Sabado', initial="0.00", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    chdomingo = forms.FloatField(label=u'CxH Domingo', initial="0.00", required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    costomateria = forms.FloatField(label=u'Costo x materia', initial="0.00", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    esfijo = forms.BooleanField(label=u'Es fijo?', required=False)
    horassalario = forms.FloatField(label=u'Horas Salario', initial="0.00", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    salario = forms.FloatField(label=u'Salario', initial="0.00", required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    descuentos = forms.FloatField(label=u'IESS', initial="0.00", required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    salariopercibir = forms.FloatField(label=u'Salario a Percibir', initial="0.00", required=False,
                                       widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))


class PrestamoInstitucionalForm(forms.Form):
    persona = forms.ModelChoiceField(label=u'Persona', queryset=Persona.objects.filter(
        Q(perfilusuario__administrativo__isnull=False) | Q(perfilusuario__profesor__isnull=False)).distinct(),
                                     widget=forms.Select(attrs={'class': 'imp-75'}))
    valor = forms.FloatField(label=u'Valor', initial="0.00",
                             widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    cuota = forms.IntegerField(label=u'Número de Cuotas', initial=1,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    motivo = forms.CharField(label=u'Motivo', widget=forms.Textarea)

    def for_profesor(self):
        self.fields['persona'].queryset = Persona.objects.filter(usuario__groups__in=[PROFESORES_GROUP_ID])


class EncuestaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=200, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    leyenda = forms.CharField(widget=forms.Textarea, label=u'Leyenda', required=True)
    grupos = forms.ModelMultipleChoiceField(label=u'Grupos', required=False,
                                            queryset=Group.objects.all().order_by('name'))
    exclude_grupos = forms.ModelMultipleChoiceField(label=u'Grupos a excluir', required=False,
                                                    queryset=Group.objects.all().order_by('name'))
    porfacultades = forms.BooleanField(label=u'Por Coordinación?', required=False,
                                       widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))
    allfacultades = forms.BooleanField(label=u'Todas las coordinaciones', required=False,
                                       widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))
    facultades = forms.ModelMultipleChoiceField(label=u'Coordinación', required=False,
                                                widget=forms.SelectMultiple(attrs={'formwidth': '100%'}),
                                                queryset=Coordinacion.objects.filter(status=True).order_by('nombre'))
    pordepartamentos = forms.BooleanField(label=u'Por Departamentos?', required=False,
                                          widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))
    alldepartamentos = forms.BooleanField(label=u'Todos los departamentos', required=False,
                                          widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))
    departamentos = forms.ModelMultipleChoiceField(label=u'Departamentos', required=False,
                                                   widget=forms.SelectMultiple(attrs={'formwidth': '100%'}),
                                                   queryset=Departamento.objects.filter(status=True).order_by('nombre'))
    porregimenlaboral = forms.BooleanField(label=u'Por Régimen Laboral?', required=False,
                                           widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))
    regimenlaboral = forms.ModelMultipleChoiceField(label=u'Regimen Laboral', required=False,
                                                    widget=forms.SelectMultiple(attrs={'formwidth': '100%'}),
                                                    queryset=RegimenLaboral.objects.filter(status=True).order_by('descripcion'))
    pindependientes = forms.BooleanField(label=u'Preguntas Independientes?', required=False,
                                         widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))
    labelobservacion = forms.CharField(label=u'Leyenda de la Observación', required=False, max_length=200,
                                       widget=forms.TextInput(attrs={'class': 'imp-100'}))
    tiporespuesta = forms.ModelChoiceField(TipoRespuesta.objects.all(), required=False, label=u'Tipo de Respuesta',
                                           widget=forms.Select(attrs={'class': 'imp-50'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '50%'}), )
    fechafin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                    attrs={
                                                                                                        'class': 'selectorfecha',
                                                                                                        'formwidth': '50%'}), )
    matriculados = forms.BooleanField(label=u'Solo estudiantes matriculados actualmente', required=False,
                                      widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))
    obligatoria = forms.BooleanField(label=u'Obligatoria', required=False,
                                     widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))
    conmuestra = forms.BooleanField(label=u'Buscar en lista definida', required=False,
                                    widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))
    observaciondetallada = forms.BooleanField(label=u'Observación detallada', required=False,
                                              widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))
    observaciongeneral = forms.BooleanField(label=u'Observación General', required=False,
                                            widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))
    muestra = forms.BooleanField(label=u'Trabajar con muestras', required=False,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))
    sexo = forms.ChoiceField(label=u'Sexo', required=False, choices=TIPO_SEXO_ENCUESTA,
                             widget=forms.Select(attrs={'class': 'imp-50'}))


class SeguimientoEstudianteForm(forms.Form):
    empresa = forms.CharField(label=u'Empresa')
    industria = forms.ModelChoiceField(Industria.objects.all(), required=False, label=u'Tipo de industria',
                                       widget=forms.Select(attrs={'class': 'imp-75'}))
    cargo = forms.ModelChoiceField(NivelCargo.objects.all(), required=False, label=u'Cargo',
                                   widget=forms.Select(attrs={'class': 'imp-50'}))
    ocupacion = forms.CharField(required=False, label=u'Ocupación')
    responsabilidades = forms.CharField(widget=forms.Textarea, label=u"Responsabilidades")
    telefono = forms.CharField(required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}), label=u'Telefono')
    email = forms.CharField(required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}),
                            label=u'Correo Electronico')
    sueldo = forms.ModelChoiceField(RangoSalario.objects.all(), required=False, label=u'Rango Salario',
                                    widget=forms.Select(attrs={'class': 'imp-50'}))
    ejerce = forms.BooleanField(required=False, label=u'Ejerce la profesión')
    fecha = forms.DateField(input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                            label=u"Fecha de ingreso")
    labora = forms.BooleanField(required=False, label=u'Trabajo actual')
    fechafin = forms.DateField(input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                               label=u"Fecha de salida", required=False)


class ActextracurricularForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', )
    tipo = forms.ModelChoiceField(label=u'Tipo actividad', queryset=TipoActividadExtraCurricular.objects.all(),
                                  widget=forms.Select(attrs={'class': 'imp-50'}))
    coordinacion = forms.ModelChoiceField(label=u'Coordinación', required=False, queryset=Coordinacion.objects.all(),
                                          widget=forms.Select())
    fechainicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'], initial=datetime.now().date(),
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), )
    fechafin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'], initial=datetime.now().date(),
                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), )
    horas = forms.IntegerField(label=u'Horas', initial=0, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    permiteretirarse = forms.BooleanField(label=u'Permite retirarse', initial=False, required=False)
    periocidad = forms.ChoiceField(label=u'Periocidad de pagos', choices=PERIODICIDAD_CHOICES,
                                   widget=forms.Select(attrs={'class': 'imp-50'}))
    responsable = forms.ModelChoiceField(label=u'Responsable', queryset=Profesor.objects.all(),
                                         widget=forms.Select(attrs={'class': 'imp-75'}))
    cupo = forms.IntegerField(label=u'Cupo', initial=0, required=False,
                              widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    aula = forms.ModelChoiceField(label=u'Aula', queryset=Aula.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-50'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carrera', queryset=Carrera.objects.all(), required=False)
    calificar = forms.BooleanField(label=u'Calificar', initial=False, required=False)
    califmaxima = forms.FloatField(label=u'Calificación Maxima', required=False, initial="0.00",
                                   widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    califminima = forms.FloatField(label=u'Calificación Minima', required=False, initial="0.00",
                                   widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    asistminima = forms.IntegerField(label=u'% Asistencia Minima', initial=0,
                                     widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))

class MatricularCursoEscuelaComplementariaForm(forms.Form):
    registro = forms.IntegerField(initial=0, required=True, label=u'Estudiante',
                                     widget=forms.TextInput(attrs={'select2search': 'true'}))

class CursoEscuelaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=250)
    tema = forms.CharField(label=u'Tema', widget=forms.Textarea, required=False)
    fechainicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'], initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'], initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    sesion = forms.ModelChoiceField(label=u"Sesión", queryset=Sesion.objects.all(), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    paralelo = forms.CharField(label=u"Paralelo", max_length=30, widget=forms.TextInput(attrs={'class': 'imp-25', 'formwidth': '50%'}))
    cupo = forms.IntegerField(label=u'Cupo', required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    archivo = ExtFileField(label=u'Archivo soporte', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%', 'fieldbuttonsright': [{'id': 'viewarchivo', 'tooltiptext': 'Visualizar Archivo cargado', 'btnclasscolor': 'btn-success', 'btnfaicon': 'fa-eye'}]}))


class MateriasCursoEscuelaForm(forms.Form):
    asignatura = forms.ModelChoiceField(label=u"Asignatura", queryset=Asignatura.objects.all())
    profesor = forms.ModelChoiceField(label=u"Profesor", required=False, queryset=Profesor.objects.all(),
                                      widget=forms.Select(attrs={'class': 'imp-75'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'], initial=datetime.now().date(),
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), )
    fechafin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'], initial=datetime.now().date(),
                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), )
    calificar = forms.BooleanField(label=u'Calificar', initial=False, required=False)
    califmaxima = forms.FloatField(label=u'Calificación Maxima', required=False, initial="0.00",
                                   widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    califminima = forms.FloatField(label=u'Calificación aprobado', required=False, initial="0.00",
                                   widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    asistminima = forms.IntegerField(label=u'% Asistencia aprobado', required=False, initial=0,
                                     widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    horas = forms.IntegerField(label=u'Horas', required=False, initial=0,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    creditos = forms.FloatField(label=u'Creditos', required=False, initial="0.0000",
                                widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4'}))
    validacreditos = forms.BooleanField(label=u'Valida para creditos', initial=True, required=False)
    validapromedio = forms.BooleanField(label=u'Valida para promedio', initial=True, required=False)


class PagoCursoEscuelaForm(forms.Form):
    tipo = forms.ModelChoiceField(TipoOtroRubro.objects.all(), label=u"Tipo Pago", required=False)
    cuota = forms.IntegerField(label=u'Número de cuota', required=False, initial=1,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    fecha = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'], initial=datetime.now().date(),
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    valor = forms.FloatField(label=u'Valor', initial="0.00",
                             widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))

    def editar(self):
        deshabilitar_campo(self, 'tipo')
        deshabilitar_campo(self, 'cuota')


class MoverMatriculaNivelForm(forms.Form):
    nivel = forms.ModelChoiceField(Nivel.objects.all(), label=u'Nuevo Nivel')

    def for_nivel(self, matricula):
        self.fields['nivel'].queryset = Nivel.objects.filter(carrera=matricula.inscripcion.carrera, cerrado=False)

    def niveles_activos(self, periodo):
        self.fields['nivel'].queryset = Nivel.objects.filter(periodo=periodo, cerrado=False)


class PeriodosForm(forms.Form):
    periodo = forms.ModelChoiceField(Periodo.objects.all().order_by('tipo', '-fin'), label=u'Periodo')

    def for_periodo(self, periodo):
        self.fields['periodo'].queryset = Periodo.objects.all().exclude(id=periodo).order_by('tipo', '-fin')


class DistributivoAulasForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class ExtenderPrestamoForm(forms.Form):
    horas = forms.IntegerField(label=u'Horas', min_value=1,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class ActividadForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', )
    fechainicio = forms.DateField(input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                  label=u"Fecha Inicio")
    fechafin = forms.DateField(input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                               label=u"Fecha Fin")
    tipo = forms.ModelChoiceField(TipoActividad.objects.all(), label=u'Representación',
                                  widget=forms.Select(attrs={'class': 'imp-50'}))
    lunes = forms.BooleanField(label=u'Lunes', required=False)
    martes = forms.BooleanField(label=u'Martes', required=False)
    miercoles = forms.BooleanField(label=u'Miercoles', required=False)
    jueves = forms.BooleanField(label=u'Jueves', required=False)
    viernes = forms.BooleanField(label=u'Viernes', required=False)
    sabado = forms.BooleanField(label=u'Sabado', required=False)
    domingo = forms.BooleanField(label=u'Domingo', required=False)


class ProgramaVinculacionForm(forms.Form):
    nombre = forms.CharField(label=u'Titulo', max_length=200)
    coordinacion = forms.ModelChoiceField(label=u"Coordinación", queryset=Coordinacion.objects.all(), required=False)
    inicio = forms.DateField(input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                             label=u"Fecha Inicio")
    fin = forms.DateField(input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), label=u"Fecha Fin")
    objetivo = forms.CharField(widget=forms.Textarea, label=u"Objetivo")


class ProyectoVinculacionForm(forms.Form):
    nombre = forms.CharField(label=u'Titulo', max_length=200)
    tipo = forms.ModelMultipleChoiceField(label=u'Tipo de proyecto', queryset=TipoProyecto.objects.all(),
                                          required=False)
    lugar = forms.CharField(label=u"Lugar", max_length=100)
    inicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    carreras = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.all(), required=False)
    materias = forms.ModelMultipleChoiceField(label=u'Materias', queryset=Asignatura.objects.all(), required=False)
    institucion = forms.CharField(label=u'Institución', max_length=100, required=False)
    reponsableinst = forms.CharField(label=u'Responsable Institución', max_length=100, required=False,
                                     widget=forms.TextInput(attrs={'class': 'imp-50'}))
    correoinst = forms.CharField(label=u"Email institución", max_length=200, required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-50'}))
    direccion = forms.CharField(label=u'Dirección Institución', required=False)
    telefono = forms.CharField(label=u'Telefono', required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    celular = forms.CharField(label=u'Celular', required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    institucionasoc = forms.CharField(label=u'Institución asociada', max_length=100, required=False)
    reponsableinstasoc = forms.CharField(label=u'Responsable Institución asociada', max_length=100, required=False,
                                         widget=forms.TextInput(attrs={'class': 'imp-50'}))
    correoinstasoc = forms.CharField(label=u"Email institución asociada", max_length=200, required=False,
                                     widget=forms.TextInput(attrs={'class': 'imp-50'}))
    telefonoinstasoc = forms.CharField(label=u'Telefono asociado', required=False, max_length=15,
                                       widget=forms.TextInput(attrs={'class': 'imp-25'}))
    objetivo = forms.CharField(label=u"Objetivo", widget=forms.Textarea)
    condiciones = forms.CharField(label=u"Condiciones", widget=forms.Textarea, required=False)
    horas = forms.IntegerField(label=u"Horas del proyecto", initial=0,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2'}))
    beneficiariosdirectos = forms.IntegerField(label=u"Beneficiarios directos", initial=0, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '2'}))
    beneficiariosindirectos = forms.IntegerField(label=u"Beneficiarios indirectos", initial=0, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '2'}))
    limiteparticipantes = forms.IntegerField(label=u"Limite de participantes", initial=0,
                                             widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2'}))
    calificar = forms.BooleanField(label=u'Calificar', initial=False, required=False)
    califmaxima = forms.FloatField(label=u'Calificación Maxima', required=False, initial="0.00",
                                   widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    califminima = forms.FloatField(label=u'Calificación Minima', required=False, initial="0.00",
                                   widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    asistminima = forms.IntegerField(label=u'% Asistencia Minima', initial=0,
                                     widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class RegistroProyectosVinculacionForm(forms.Form):
    condiciones = forms.CharField(widget=forms.Textarea, required=False, label=u"Condiciones")

    def solo_lectura(self):
        deshabilitar_campo(self, 'condiciones')


class ProfesorVinculacionForm(forms.Form):
    profesor = forms.ModelChoiceField(Profesor.objects.all(), label=u"Profesor")


class PasantiaForm(forms.Form):
    institucion = forms.CharField(label=u'Institución', max_length=100)
    direccion = forms.CharField(label=u'Dirección Institución')
    telefono = forms.CharField(required=False, max_length=40, widget=forms.TextInput(attrs={'class': 'imp-50'}),
                               label=u'Telefono')
    departamento = forms.CharField(label=u'Departamento', max_length=100,
                                   widget=forms.TextInput(attrs={'class': 'imp-50'}))
    cargoadesempenar = forms.CharField(label=u'Cargo a cubrir', max_length=100,
                                       widget=forms.TextInput(attrs={'class': 'imp-50'}))
    jefeinmediato = forms.CharField(label=u'Jefe inmediato', max_length=100,
                                    widget=forms.TextInput(attrs={'class': 'imp-50'}))
    cargo = forms.CharField(label=u'Cargo', max_length=100, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    correo = forms.CharField(label=u"Email", max_length=200, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-50'}))
    inicio = forms.DateField(input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                             label=u"Fecha Inicio")
    fin = forms.DateField(input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), label=u"Fecha Fin")
    comienza = forms.CharField(label=u'Comienza', widget=forms.TextInput(attrs={'class': 'imp-12'}))
    termina = forms.CharField(label=u'Termina', widget=forms.TextInput(attrs={'class': 'imp-12'}))
    horas = forms.IntegerField(label=u"Horas de pasantia", initial=0,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    calificacion = forms.FloatField(label=u"Calificación", initial="0.00",
                                    widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    faltas = forms.IntegerField(label=u"Faltas", initial=0,
                                widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    atrasos = forms.IntegerField(label=u"Atrasos", initial=0,
                                 widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class PasantiaAprobarForm(forms.Form):
    comentarios_aprobador = forms.CharField(label=u"Observaciones", widget=forms.Textarea)


class PracticaPreProfesionalForm(forms.Form):
    lugar = forms.CharField(label=u'Lugar', max_length=100)
    horas = forms.IntegerField(label=u"Horas de prácticas", initial=1,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    fecha = forms.DateField(label=u"Fecha", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    grupopractica = forms.ModelChoiceField(label=u'Grupo práctica',
                                           queryset=GruposProfesorMateria.objects.filter(status=True), required=False,
                                           widget=forms.Select(attrs={'class': 'imp-100'}))
    objetivo = forms.CharField(label=u"Objetivo", widget=forms.Textarea)
    calificar = forms.BooleanField(label=u'Calificar', initial=False, required=False)
    califmaxima = forms.FloatField(label=u'Calificación Maxima', required=False, initial="0.00",
                                   widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    califminima = forms.FloatField(label=u'Calificación para aprobar', required=False, initial="0.00",
                                   widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))

    def cargargrupoprofesor(self, materia, profesor):
        profesoresmateria = ProfesorMateria.objects.filter(materia=materia, profesor=profesor, tipoprofesor__in=[2])
        if profesoresmateria:
            profesormateria = profesoresmateria[0]
            self.fields['grupopractica'].queryset = profesormateria.grupoprofesormateria()
        else:
            self.fields['grupopractica'].queryset = GruposProfesorMateria.objects.filter(profesormateria=None)

    def deshabilitar_grupopractica(self):
        deshabilitar_campo(self, 'grupopractica')


class AgendaTutoriaForm(forms.Form):
    asunto = forms.CharField(label=u'Asunto', max_length=100)
    fecha = forms.DateField(label=u"Fecha", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    hora_inicio = forms.TimeField(label=u"Hora Inicio", input_formats=['%H:%M'],
                                  widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%'}))
    hora_fin = forms.TimeField(label=u"Hora Fin", input_formats=['%H:%M'],
                               widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    url_reunion = forms.CharField(label=u'Enlace Reunión', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    practica = forms.ModelMultipleChoiceField(label=u'Estudiantes', required=False,
                                              widget=forms.SelectMultiple(attrs={'formwidth': '100%'}),
                                              queryset=PracticasPreprofesionalesInscripcion.objects.filter(status=True).order_by('inscripcion__persona__apellido1'))


class AgendaTutoriaEditForm(forms.Form):
    asunto = forms.CharField(label=u'Asunto', max_length=100)
    # fecha = forms.DateField(label=u"Fecha", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
    #                         widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    hora_inicio = forms.TimeField(label=u"Hora Inicio", input_formats=['%H:%M'],
                                  widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%'}))
    hora_fin = forms.TimeField(label=u"Hora Fin", input_formats=['%H:%M'],
                               widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%'}))
    practica = forms.ModelMultipleChoiceField(label=u'Estudiantes', required=False,
                                              widget=forms.SelectMultiple(attrs={'formwidth': '100%'}),
                                              queryset=PracticasPreprofesionalesInscripcion.objects.filter(status=True).order_by('inscripcion__persona__apellido1'))
    estados_agenda = forms.ChoiceField(choices=ESTADOS_AGENDA, required=False, label=u'Estado Tutoría',
                                       widget=forms.Select())


class CambioGrupoForm(forms.Form):
    grupo = forms.ModelChoiceField(label=u'Grupo', queryset=Grupo.objects, required=False,
                                   widget=forms.Select(attrs={'class': 'imp-100'}))
    carrera = forms.ModelChoiceField(label=u'Carrera', queryset=Carrera.objects, required=False,
                                     widget=forms.Select(attrs={'class': 'imp-100'}))
    modalidad = forms.ModelChoiceField(label=u'Modalidad', queryset=Modalidad.objects, required=False,
                                       widget=forms.Select(attrs={'class': 'imp-50'}))
    sesion = forms.ModelChoiceField(label=u'Sesion', queryset=Sesion.objects, required=False,
                                    widget=forms.Select(attrs={'class': 'imp-50'}))

    def cambio_carrera(self):
        if UTILIZA_GRUPOS_ALUMNOS:
            del self.fields['carrera']
            del self.fields['modalidad']
            del self.fields['sesion']
        else:
            del self.fields['grupo']

    def cambio_grupo(self, inscripcion):
        if UTILIZA_GRUPOS_ALUMNOS:
            del self.fields['carrera']
            del self.fields['modalidad']
            del self.fields['sesion']
            self.fields['grupo'].queryset = Grupo.objects.filter(carrera=inscripcion.carrera)
        else:
            del self.fields['grupo']


class OfertaLaboralForm(forms.Form):
    empleador = forms.ModelChoiceField(label=u'Empresa', queryset=EmpresaEmpleadora.objects.filter(status=True),
                                       required=False)
    cargo = forms.CharField(max_length=200, label=u"Cargo", required=False)
    area = forms.ModelChoiceField(label=u'Área', queryset=AreaOfertaLaboral.objects.filter(status=True), required=False)
    inicio = forms.DateField(label=u"Fecha de inicio", input_formats=['%d-%m-%Y'], required=False,
                             widget=DateTimeInput(format='%d-%m-%Y',
                                                  attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fin = forms.DateField(label=u"Fecha de fin", input_formats=['%d-%m-%Y'], required=False,
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    graduado = forms.BooleanField(label=u'¿Requiere Título?', initial=False, required=False)
    descripcion = forms.CharField(label=u"Perfil", widget=forms.Textarea, required=False)
    tiempo = forms.ChoiceField(choices=TIEMPOS_DEDICACION, required=False, label=u'Tiempo de dedicación',
                               widget=forms.Select())
    salario = forms.CharField(max_length=50, label=u"Rango de salario",
                              widget=forms.TextInput(attrs={'class': 'imp-25'}), required=False)
    canton = forms.ModelChoiceField(Canton.objects.filter(status=True, provincia__pais__id=1), required=False,
                                    widget=forms.Select(attrs={'class': 'imp-25'}))
    lugar = forms.CharField(max_length=100, label=u"Dirección del trabajo", required=False)
    carreras = forms.ModelMultipleChoiceField(label=u'Carreras',
                                              queryset=Carrera.objects.filter(coordinacion__excluir=False),
                                              required=False)
    sexo = forms.ModelChoiceField(Sexo.objects.all(), required=False, widget=forms.Select(attrs={'class': 'imp-25'}))
    plazas = forms.IntegerField(initial=1, required=False, label=u"Vacantes",
                                widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    visibleinscrito = forms.ChoiceField(choices=VISIBLE_INSCRITOS, required=False, label=u'Ver Inscritos',
                                        widget=forms.Select())

    def sin_empleador(self):
        del self.fields['empleador']


class ObservacionesOfertaLaboralForm(forms.Form):
    observacion = forms.CharField(label=u'Observaciones - Comentarios', widget=forms.Textarea, required=False)


class OfertaLaboralBolsaForm(forms.Form):
    empleador = forms.ModelChoiceField(label=u'Empresa', queryset=EmpresaEmpleadora.objects.filter(status=True),
                                       required=False)
    cargo = forms.CharField(max_length=200, label=u"Cargo", required=False)
    area = forms.ModelChoiceField(label=u'Área', queryset=AreaOfertaLaboral.objects.filter(status=True), required=False)
    inicio = forms.DateField(label=u"Fecha de inicio", required=False, input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y',
                                                  attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fin = forms.DateField(label=u"Fecha de fin", required=False, input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    graduado = forms.BooleanField(label=u'¿Requiere Título?', initial=False, required=False)
    descripcion = forms.CharField(label=u"Perfil", widget=forms.Textarea, required=False)
    tiempo = forms.ChoiceField(choices=TIEMPOS_DEDICACION, required=False, label=u'Tiempo de dedicación',
                               widget=forms.Select())
    salario = forms.CharField(max_length=50, label=u"Rango de salario", required=False,
                              widget=forms.TextInput(attrs={'class': 'imp-25'}))
    canton = forms.ModelChoiceField(Canton.objects.filter(status=True, provincia__pais__id=1), required=False,
                                    widget=forms.Select(attrs={'class': 'imp-25'}))
    lugar = forms.CharField(max_length=100, label=u"Dirección del trabajo", required=False)
    # carreras = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.filter(coordinacion__excluir=False), required=False)
    sexo = forms.ModelChoiceField(Sexo.objects.all(), required=False, widget=forms.Select(attrs={'class': 'imp-25'}))
    plazas = forms.IntegerField(initial=1, required=False, label=u"Vacantes",
                                widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))

    def sin_empleador(self):
        del self.fields['empleador']


class AgendarCitaForm(forms.Form):
    horaentrevista = forms.TimeField(label=u"Hora de entrevista", input_formats=['%H:%M'],
                                     widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    fechaentrevista = forms.DateField(label=u"Fecha de entrevista", input_formats=['%d-%m-%Y'],
                                      widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), )
    lugar = forms.CharField(label=u"Lugar", max_length=100)
    personacontacto = forms.CharField(label=u"Contacto", max_length=100)
    telefonocontacto = forms.CharField(label=u"Teléfono de contacto", max_length=100,
                                       widget=forms.TextInput(attrs={'class': 'imp-50'}))


class EmpleadorForm(forms.Form):
    nombre = forms.CharField(label=u'Empresa', max_length=200)
    nombrecorto = forms.CharField(label=u'Nombre corto', max_length=200)
    ruc = forms.CharField(label=u'Ruc', max_length=13, required=False,
                          widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    # tipoempresa = forms.ModelChoiceField(TipoEmpresa.objects.filter(status=True), label=u'Tipo de empresa', required=False,
    #                                  widget=forms.Select(attrs={'class': 'imp-75'}))
    # tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=False, label=u'Tipo Institución',
    #                                     widget=forms.Select())
    sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=False, label=u'Sector Económico',
                                        widget=forms.Select())
    email = forms.CharField(max_length=200, label=u"Email", required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-50'}))
    representante = forms.CharField(max_length=200, label=u"Representante", required=False)
    cargo = forms.CharField(max_length=200, label=u"Cargo", required=False)
    pais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.filter(status=True), required=True,
                                  widget=forms.Select())
    provincia = forms.ModelChoiceField(label=u'Provincia', queryset=Provincia.objects.filter(status=True),
                                       required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    direccion = forms.CharField(label=u'Dirección', max_length=200)
    telefonos = forms.CharField(label=u'Teléfonos móvil', max_length=100, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    telefonoconv = forms.CharField(label=u'Teléfono convencional', required=False, max_length=50, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    #contacto = forms.CharField(label=u'Contacto', max_length=100, required=False)

    observacion = forms.CharField(label=u'Objetivo', widget=forms.Textarea(attrs={'rows': '3'}), required=False)

    def editar(self, pais):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=pais)

    def adicionar(self):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=None)

    # def bloquear(self):
    #     deshabilitar_campo(self, 'tipoconvenio')
    #
    # def desbloquear(self):
    #     habilitar_campo(self, 'tipoconvenio')

class detalleResponsablesInternos(forms.Form):
        cargo = forms.CharField(max_length=30, label=u'Código',
                                 widget=forms.TextInput(attrs={'class': 'imp-50', 'codigo': ''}))




class RetroalimentacionOfertaForm(forms.Form):
    retroalimentacion = forms.CharField(label=u'Retroalimentación', widget=forms.Textarea(attrs={'rows': '3'}),
                                        required=False)


class AreaForm(forms.Form):
    descripcion = forms.CharField(label=u'Nombre area', max_length=50)


class ConfiguracionForm(forms.Form):
    administrativo = forms.IntegerField(initial=0, required=False, label=u'Persona Responsable',
                                        widget=forms.TextInput(attrs={'select2search': 'true'}))


class EmpresaForm(forms.Form):
    # tipoconvenio = forms.ModelChoiceField(required=False,label=u'Tipo Convenio', queryset=TipoConvenio.objects.all(), widget=forms.Select(attrs={'formwidth': '100%'}))
    nombre = forms.CharField(label=u'Empresa')
    ruc = forms.CharField(label=u'Ruc', max_length=13, required=False,
                          widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=False, label=u'Tipo Institución',
                                        widget=forms.Select())
    sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=False, label=u'Sector Económico',
                                        widget=forms.Select())
    fechainicio = forms.DateField(label=u"Fecha Inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                  required=False)
    fechafin = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                               required=False)
    # convenio = forms.BooleanField(label=u'Tiene Convenio?', required=False)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    representante = forms.CharField(max_length=200, label=u"Representante")
    pais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.filter(status=True), required=True,
                                  widget=forms.Select())
    provincia = forms.ModelChoiceField(label=u'Provincia', queryset=Provincia.objects.filter(pais_id=1), required=False,
                                       widget=forms.Select(attrs={'class': 'imp-50'}))
    direccion = forms.CharField(label=u'Dirección', max_length=100)
    telefonos = forms.CharField(label=u'Teléfonos', max_length=100, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    email = forms.CharField(max_length=200, label=u"Email", required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-50'}))

    def editar(self, pais):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=pais)

    def adicionar(self):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=None)

    def bloquear(self):
        deshabilitar_campo(self, 'tipoconvenio')

    def desbloquear(self):
        habilitar_campo(self, 'tipoconvenio')


class EmpleadorPlanPracticaForm(forms.Form):
    nombre = forms.CharField(label=u'Empresa', max_length=200)
    ruc = forms.CharField(label=u'Ruc', max_length=13, required=False,
                          widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=False, label=u'Tipo Institución',
                                        widget=forms.Select())
    sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=False, label=u'Sector Económico',
                                        widget=forms.Select())
    representante = forms.CharField(max_length=200, label=u"Representante", widget=forms.TextInput(attrs={'class': 'normal-input'}))
    pais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.filter(status=True), required=True,
                                  widget=forms.Select())
    # provincia = forms.ModelChoiceField(label=u'Provincia', queryset=Provincia.objects.filter(pais_id=1), widget=forms.Select(attrs={'class': 'imp-50'}))
    provincia = forms.ModelChoiceField(label=u'Provincia', queryset=Provincia.objects.filter(status=True),
                                       required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    direccion = forms.CharField(label=u'Dirección', max_length=200, widget=forms.TextInput(attrs={'class': 'normal-input'}))
    telefonos = forms.CharField(label=u'Teléfonos', max_length=100, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    cargo = forms.CharField(max_length=200, label=u"Cargo")
    email = forms.CharField(max_length=200, label=u"Email", required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-50'}))
    objetivo = forms.CharField(label=u'Objetivo', widget=forms.Textarea(attrs={'rows': '3', 'class': 'normal-input'}), required=False)
    logotipo = ExtFileField(label=u'Logo', required=False,
                            help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png',
                            ext_whitelist=(".jpg", ".jpeg", ".png"), max_upload_size=4194304,
                            widget=FileInput({'accept': ' image/jpeg, image/jpg, image/png'}))

    def editar(self, pais):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=pais)

    def adicionar(self):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=None)


class Empleador2Form(forms.Form):
    nombre = forms.CharField(label=u'Empresa', max_length=50)
    representante = forms.CharField(label=u'Representante', max_length=100)
    provincia = forms.ModelChoiceField(label=u'Provincia', queryset=Provincia.objects.all(),
                                       widget=forms.Select(attrs={'class': 'imp-50'}))
    direccion = forms.CharField(label=u'Dirección', max_length=100)
    telefonos = forms.CharField(label=u'Teléfonos', max_length=100, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    nombres = forms.CharField(label=u'Nombres', max_length=100)
    apellido1 = forms.CharField(label=u'Primer Apellido', max_length=100)
    apellido2 = forms.CharField(label=u'Segundo Apellido', required=False, max_length=100)
    cargo = forms.CharField(max_length=200, label=u"Cargo")
    email = forms.CharField(max_length=200, label=u"Email", widget=forms.TextInput(attrs={'class': 'imp-50'}))

    # Movilidad


class MovilidadSolicitudForm(forms.Form):
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))

    fechafin = forms.DateField(label=u"Fecha fin", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))

    empresa = forms.ModelChoiceField(EmpresaEmpleadora.objects.filter(status=True), label=u'empresa', required=False,
                                     widget=forms.Select(attrs={'class': 'imp-75'}))
    pais = forms.ModelChoiceField(label=u'País', queryset=Pais.objects.all(), widget=forms.Select(attrs={'class': 'imp-50'}))

    ciudad = forms.CharField(max_length=50, label=u"Ciudad", required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-50'}))

    objetivo = forms.CharField(label=u'Objetivo', required=False,
                               widget=forms.Textarea(attrs={'rows': '5'}))
    actividad = forms.CharField(label=u'Actividcades', required=False,
                                widget=forms.Textarea(attrs={'rows': '5'}))
    detallevalor = forms.CharField(label=u'Detalle de presupuesto', required=False,
                                   widget=forms.Textarea(attrs={'rows': '5'}))
    valor = forms.FloatField(label=u'Valor presupuestado', initial="0.00",
                             widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    asignatura = forms.CharField(label=u'Asignatura o curso:', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=False)

    creditos = forms.FloatField(label=u'Créditos', initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '30%'}))


class IdiomaDominaForm(forms.Form):
    idioma = forms.ModelChoiceField(label=u'Idioma', queryset=Idioma.objects.all(),
                                    widget=forms.Select(attrs={'formwidth': '100%'}))
    lenguamaterna = forms.BooleanField(label=u"Lengua Materna?", required=False)
    escritura = forms.IntegerField(label=u"Dominio Escritura (%)", initial=0, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '100%', 'separator': 'true'}))
    lectura = forms.IntegerField(label=u"Dominio Lectura (%)", initial=0, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '100%'}))
    oral = forms.IntegerField(label=u"Dominio Oral (%)", initial=0, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '100%'}))
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png"), max_upload_size=4194304,
                           widget=FileInput({'accept': 'application/pdf, image/jpeg, image/jpg, image/png'}))

class CertificadoIdiomaForm(FormModeloBase):
    institucioncerti = forms.ModelChoiceField(label=u'Institución Certificadora', required=False, queryset=InstitucionCertificadora.objects.all(),
                                         widget=forms.Select(attrs={'col':'6', 'class':'select2'}))
    validainst = forms.BooleanField(label=u'Otra Institución', required=False, widget=CheckboxInput(attrs={'col':'6','data-switchery':True}))
    otrainstitucion = forms.CharField(label=u"Digite Institución", max_length=100, required=False, widget=forms.TextInput(attrs={'col': '6'}))
    idioma = forms.ModelChoiceField(label=u'Idioma', queryset=Idioma.objects.all(),
                                    widget=forms.Select(attrs={'col':'6','class':'select2'}))

    nivelsuficencia = forms.ModelChoiceField(label=u'Nivel de Suficencia', queryset=NivelSuficencia.objects.all(),
                                    widget=forms.Select(attrs={'col':'6','class':'select2'}))
    fechacerti = forms.DateField(label=u"Fecha Certificación", initial=datetime.now().date(),
                            widget=DateTimeInput(format='%d-%m-%Y',
                                                 attrs={'col':'6'}))
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png"), max_upload_size=4194304,
                           widget=FileInput({'accept': 'application/pdf, image/jpeg, image/jpg, image/png','col':'6'}))

class CertificadoTutoriaForm(FormModeloBase):
    institucion = forms.ModelChoiceField(label=u'Institución', required=False, queryset=InstitucionEducacionSuperior.objects.all(),
                                         widget=forms.Select(attrs={'col': '6','class':'select2'}))
    nombreproyecto = forms.CharField(label=u"Nombre del Proyecto", max_length=100, required=False, widget=forms.TextInput(attrs={'col': '6', 'placeholder': 'Describa el nombre del proyecto'}))
    descripcion = forms.CharField(label=u'Descripción', required=False,
                                           widget=forms.Textarea(attrs={'rows': '5'}))
    calificacion = forms.FloatField(label=u"Calificación", initial="0", required=False, widget=forms.TextInput(attrs={'col': '6', 'decimal': '2'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", initial=datetime.now().date(),
                                    widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '3'}))
    fechafin = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(),
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '3'}))
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png"), max_upload_size=4194304,
                           widget=FileInput({'accept': 'application/pdf, image/jpeg, image/jpg, image/png'}))


class ReferenciaPersonaForm(FormModeloBase):
    nombres = forms.CharField(label=u"Nombres", max_length=100, widget=forms.TextInput(attrs={'col': '6'}))
    apellidos = forms.CharField(label=u"Apellidos", max_length=100, widget=forms.TextInput(attrs={'col': '6'}))
    email = forms.CharField(label=u"Correo electrónico", max_length=100,
                            widget=forms.TextInput(attrs={'col': '6'}))
    telefono = forms.CharField(label=u"Teléfonos", max_length=50, widget=forms.TextInput(attrs={'col': '6'}))
    institucion = forms.CharField(label=u"Institución", max_length=100,
                                  widget=forms.TextInput(attrs={'col': '6'}))
    cargo = forms.CharField(label=u"Cargo", max_length=100, widget=forms.TextInput(attrs={'col': '6'}))
    relacion = forms.ModelChoiceField(label=u"Relación", queryset=Relacion.objects.all(),
                                      widget=forms.Select(attrs={'col': '6', 'class':'select2'}))


class SistemaFamiliarForm(forms.Form):
    nombre = forms.CharField(label=u'Nombres y Apellidos', max_length=50)
    parentesco = forms.CharField(label=u'Parentesco', max_length=30)
    nacimiento = forms.DateField(label=u"Fecha nacimiento", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    estadocivil = forms.ModelChoiceField(label=u'Estado Civil', queryset=PersonaEstadoCivil.objects.all(),
                                         widget=forms.Select(attrs={'class': 'imp-50'}))
    instruccion = forms.CharField(label=u'Instrucción', max_length=30)
    ocupacion = forms.CharField(label=u'Ocupación', max_length=50, required=False)
    ingresomensual = forms.FloatField(label=u'Ingreso Mensual', initial="0.00",
                                      widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))


class ObservacionesFichaForm(forms.Form):
    observaciones = forms.CharField(label=u'Observaciones', widget=forms.Textarea, required=False)


class ResumenFichaSocioEconomicaForm(forms.Form):
    prediagnostico = forms.CharField(label=u'Prediagnostico', widget=forms.Textarea, required=False)
    tecnicasaplicarse = forms.CharField(label=u'Tecnicas a Aplicarse', widget=forms.Textarea, required=False)


class IngresoEgresoForm(forms.Form):
    egreso = forms.ChoiceField(label=u'Tipo', choices=TIPOS_MOVIMIENTO, widget=forms.Select(attrs={'class': 'imp-50'}))
    tipo = forms.CharField(label=u'Nombre', max_length=30)
    valor = forms.FloatField(label=u'Valor', initial="0.00",
                             widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))


class AluFichaSocioeconomicaForm(forms.Form):
    raza = forms.ModelChoiceField(Raza.objects.all(), label=u'Raza', required=False,
                                  widget=forms.Select(attrs={'class': 'imp-75'}))
    estrato = forms.ModelChoiceField(EstratoSociocultural.objects.all(), label=u'Estrato Sociocultural', required=False,
                                     widget=forms.Select(attrs={'class': 'imp-75'}))
    tienediscapacidad = forms.BooleanField(label=u"Tiene Discapacidad?", required=False)
    tipodiscapacidad = forms.ModelChoiceField(Discapacidad.objects.filter(status=True), label=u"Tipo de Discapacidad", required=False,
                                              widget=forms.Select(attrs={'class': 'imp-75'}))
    porcientodiscapacidad = forms.IntegerField(label=u'% de Discapacidad', required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    carnetdiscapacidad = forms.CharField(label=u'Carnet Discapacitado', required=False,
                                         widget=forms.TextInput(attrs={'class': 'imp-codigo'}))


class ConocimientoInformaticoForm(forms.Form):
    herramienta = forms.ModelChoiceField(ConocimientoHerramienta.objects.all(), label=u'Herramienta conocida',
                                         widget=forms.Select(attrs={'class': 'imp-100'}))
    descripcion = forms.CharField(max_length=100, label=u'Otra herramienta', required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-75'}))
    nivel = forms.ChoiceField(choices=NIVEL_CONOCIMIENTO, label=u'Nivel', widget=forms.Select(attrs={'class': 'imp-25'}))


class ConocimientoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre del conocimiento', max_length=50,
                             widget=forms.TextInput(attrs={'class': 'imp-50'}))
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea)


class PreInscritoForm(forms.Form):
    nombres = forms.CharField(max_length=100, label=u"Nombres", widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido1 = forms.CharField(max_length=50, label=u"1er Apellido", widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido2 = forms.CharField(max_length=50, label=u"2do Apellido", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-50'}))
    cedula = forms.CharField(max_length=13, label=u"Cedula", required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    sexo = forms.ModelChoiceField(Sexo.objects.all(), label=u"Sexo", widget=forms.Select(attrs={'class': 'imp-25'}))
    telefono_celular = forms.CharField(max_length=50, label=u"Teléfono movil", required=False,
                                       widget=forms.TextInput(attrs={'class': 'imp-25'}))
    telefono_domicilio = forms.CharField(max_length=50, label=u"Teléfono domicilio", required=False,
                                         widget=forms.TextInput(attrs={'class': 'imp-25'}))
    telefono_trabajo = forms.CharField(max_length=50, label=u"Teléfono trabajo", required=False,
                                       widget=forms.TextInput(attrs={'class': 'imp-25'}))
    email = forms.CharField(max_length=240, label=u"Correo Electronico", required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-50'}))
    institucion = forms.ModelChoiceField(Colegio.objects.all(), label=u"Colegio",
                                         widget=forms.Select(attrs={'class': 'imp-100'}))
    pre = forms.BooleanField(label=u"Ingreso al PRE", required=False)
    carrera = forms.ModelChoiceField(Carrera.objects.all(), label=u"Carrera")
    direccion = forms.CharField(max_length=100, label=u"Dirección", required=False)
    ref_direccion = forms.CharField(max_length=100, label=u"Referencia dirección", required=False)
    comoseinformo = forms.ModelChoiceField(ComoSeInformo.objects.all(), label=u"Medio de información",
                                           widget=forms.Select(attrs={'class': 'imp-50'}))
    comoseinformootras = forms.CharField(max_length=100, label=u"Información - otro", required=False,
                                         widget=forms.TextInput())
    presencial = forms.BooleanField(label=u"Registro presencial", required=False)
    observacion = forms.CharField(label=u"Observación", widget=forms.Textarea, required=False)

    def editar(self):
        del self.fields['presencial']
        deshabilitar_campo(self, 'cedula')


class PreInscritoAutoregistroForm(forms.Form):
    nombres = forms.CharField(max_length=100, label=u"Nombres", widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido1 = forms.CharField(max_length=50, label=u"1er Apellido", widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido2 = forms.CharField(max_length=50, label=u"2do Apellido", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-50'}))
    nacimiento = forms.DateField(label=u"Fecha nacimiento", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    cedula = forms.CharField(max_length=13, label=u"Cédula", widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    sexo = forms.ModelChoiceField(Sexo.objects.all(), label=u"Sexo", widget=forms.Select(attrs={'class': 'imp-50'}))
    telefono = forms.CharField(label=u"Telefono Movil", max_length=100, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-25'}))
    telefono_conv = forms.CharField(label=u"Telefono Fijo", max_length=100, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-25'}))
    direccion = forms.CharField(max_length=100, label=u"Dirección", required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-75'}))
    email = forms.CharField(label=u"Correo Electronico", max_length=240, required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-75'}))
    sede = forms.ModelChoiceField(label=u"Sede", queryset=Sede.objects.filter(autoinscripcion=True), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-50'}))
    carrera = forms.ModelChoiceField(Carrera.objects, label=u"Carrera", widget=forms.Select())
    modalidad = forms.ModelChoiceField(label=u"Modalidad", queryset=Modalidad.objects, required=False,
                                       widget=forms.Select(attrs={'class': 'imp-50'}))
    sesion = forms.ModelChoiceField(label=u"Sesión", queryset=Sesion.objects, required=False,
                                    widget=forms.Select(attrs={'class': 'imp-75'}))


class CoordinacionForm(forms.Form):
    sede = forms.ModelChoiceField(label=u"Sede", queryset=Sede.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-50'}))
    nombreantiguo = forms.CharField(max_length=100, label=u"Nombre anterior", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-100'}))
    nombre = forms.CharField(max_length=100, label=u"Nombre", required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.all(), required=False)
    alias = forms.CharField(max_length=50, label=u"Alias", required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-25'}))

    def editar(self):
        deshabilitar_campo(self, 'sede')


class PeriodoSabaticoForm(forms.Form):
    periodosabatico = forms.BooleanField(label=u"Periodo sabatico", required=False)
    fechainicioperiodosabatico = forms.DateField(label=u"Fecha inicio", required=False, input_formats=['%d-%m-%Y'],
                                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                                      attrs={'class': 'selectorfecha'}))
    fechafinperiodosabatico = forms.DateField(label=u"Fecha fin", required=False, input_formats=['%d-%m-%Y'],
                                              widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class ResponsableCoordinacionForm(forms.Form):
    responsable = forms.ModelChoiceField(label=u'Responsable', queryset=Persona.objects.filter(
        Q(perfilusuario__administrativo__isnull=False) | Q(perfilusuario__profesor__isnull=False)).distinct(),
                                         required=False, widget=forms.Select(attrs={'class': 'imp-100'}))
    tipo = forms.ChoiceField(label=u'Tipo Coordinador', choices=TIPO_COORDINADOR,
                             widget=forms.Select(attrs={'class': 'imp-50'}))

    def editar(self):
        self.fields['responsable'].queryset = Persona.objects.filter(
            Q(perfilusuario__administrativo__isnull=False) | Q(perfilusuario__profesor__isnull=False)).distinct()


class SeguimientoPreInscritoForm(forms.Form):
    estado = forms.BooleanField(label=u"Comunicó", required=False)
    observacion = forms.ModelChoiceField(ObservacionSeguimiento.objects.all(), label=u"Observación",
                                         widget=forms.Select(attrs={'class': 'imp-50'}))
    observacionotra = forms.CharField(label=u"Otra observación", widget=forms.Textarea, required=False)
    agendar = forms.BooleanField(label=u"Registrar seguimiento", required=False)
    proximafecha = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'],
                                   widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    proximahora = forms.CharField(label=u"Hora", widget=forms.TextInput(attrs={'class': 'imp-12'}))


class ContenidoAcademicoForm(forms.Form):
    # contenido = forms.CharField(label=u'Tema y Subtema', widget=forms.Textarea, required=False)
    # estrategiasmetodologicas = forms.CharField(label=u'Estrategias Metodologicas', widget=forms.Textarea, required=False)
    observaciones = forms.CharField(label=u'Observaciones', widget=forms.Textarea, required=False)


class CampannaCaptacionForm(forms.Form):
    nombre = forms.CharField(max_length=100, label=u"Nombre de la campaña",
                             widget=forms.TextInput(attrs={'class': 'imp-75'}))
    fecha_fin = forms.DateField(label=u"Fecha de finalización", input_formats=['%d-%m-%Y'],
                                widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class CampannaDifusionForm(forms.Form):
    titulo = forms.CharField(max_length=100, label=u"Título de difusión")
    contenido = forms.CharField(label=u"Contenido del email", widget=forms.Textarea, required=False)
    claqueta = ExtFileField(label=u'Claqueta', help_text=u'Tamaño Maximo permitido 4Mb, en formato jpg',
                            ext_whitelist=(".png",), max_upload_size=4194304)
    link = forms.CharField(max_length=100, label=u"Link para mayor información",
                           widget=forms.TextInput(attrs={'class': 'imp-50'}), required=False)


class CampannaDifusionSendForm(forms.Form):
    carreras = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.all(), required=False)
    inscritos = forms.BooleanField(label=u"Inscritos", initial=False, required=False)
    preinscritos = forms.BooleanField(label=u"Pre inscritos", initial=False, required=False)


class GrupoUsuarioForm(forms.Form):
    grupo = forms.ModelChoiceField(label=u'Grupo', queryset=Group.objects.all().order_by('name'), required=False,
                                   widget=forms.Select(attrs={'class': 'imp-100'}))

    def grupos(self, lista):
        self.fields['grupo'].queryset = lista


class RegistrarCertificadoForm(forms.Form):
    certificado = forms.CharField(label=u'Certificado número', max_length=10,
                                  widget=forms.TextInput(attrs={'class': 'imp-25'}))


class PlanificacionForm(forms.Form):
    descripcion = forms.CharField(label=u"Descripción", max_length=250, required=False)
    tipoevaluacion = forms.ModelChoiceField(label=u"Tipo evaluación", required=False,
                                            queryset=DetalleModeloEvaluativo.objects.all(),
                                            widget=forms.Select(attrs={'class': 'imp-50'}))
    # tipoplanificacion = forms.ModelChoiceField(label=u"Tipo de planificación", queryset=TipoPlanificacion.objects.all(), widget=forms.Select(attrs={'class': 'imp-50'}))
    evaluacion = ExtFileField(label=u'Deber', required=False,
                              help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                              ext_whitelist=(
                                  ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                              max_upload_size=11534336)
    rubricaevaluacion = ExtFileField(label=u'Rubrica', required=False,
                                     help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                                     ext_whitelist=(
                                         ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                                     max_upload_size=4194304)
    desde = forms.DateField(label=u"Desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={
        'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    horadesde = forms.TimeField(label=u"Hora Desde", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '50%'}))
    hasta = forms.DateField(label=u"Hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={
        'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    horahasta = forms.TimeField(label=u'Hora Hasta', required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '50%'}))
    enlinea = forms.BooleanField(label=u'Subir en linea?', initial=True, required=False)
    paraevaluacion = forms.BooleanField(label=u'Para evaluar?', initial=True, required=False)

    def segun_modelo_evaluativo(self, materia, opcion):
        if variable_valor('BLO_DES_TAREA_PRI_PARCIAL'):
            self.fields['tipoevaluacion'].queryset = materia.modeloevaluativo.detallemodeloevaluativo_set.filter(
                (Q(nombre__icontains='N') | Q(nombre__icontains='T')), dependiente=False)
        elif materia.modeloevaluativo.id == 1 and materia.usaperiodocalificaciones:
            self.fields['tipoevaluacion'].queryset = materia.modeloevaluativo.detallemodeloevaluativo_set.filter(
                Q(nombre__contains='N3') | Q(nombre__contains='N4') | Q(nombre__contains='TI') | Q(
                    nombre__contains='TE'), dependiente=False)
        else:
            self.fields['tipoevaluacion'].queryset = materia.modeloevaluativo.detallemodeloevaluativo_set.filter(
                (Q(nombre__icontains='N') | Q(nombre__icontains='T')), dependiente=False)
        # if opcion == 2:
        #     deshabilitar_campo(self, 'tipoevaluacion')
        #     # deshabilitar_campo(self, 'enlinea')
        #     # deshabilitar_campo(self, 'paraevaluacion')


class ArchivoPlanificacionForm(forms.Form):
    archivo = ExtFileField(label=u'Fichero', required=False,
                           help_text=u'Tamaño Maximo permitido 5Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=5194304)


class ImportarPlanificacionForm(forms.Form):
    materia = ModelChoiceField(label=u'Materia', queryset=Materia.objects.filter(status=True), required=False)

    def solo_misma_asignatura(self, asignatura):
        self.fields['materia'].queryset = Materia.objects.filter(status=True, asignatura=asignatura).exclude(
            planificacionmateria=None).distinct()


class DocumentoMateriaForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre")
    observaciones = forms.CharField(widget=forms.Textarea, label=u'Observaciones', required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo',
                           help_text=u'Tamaño Maximo permitido 40Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=41943040)


class ActualizacionDatosForm(forms.Form):
    cedula = forms.CharField(label=u"Cédula", max_length=10, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-cedula'}))


class InstrumentoEvaluacionIntegralForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=100)
    tipo = ModelChoiceField(label=u'Tipo componente', queryset=SubTipoComponenteEvaluacionIntegral.objects.all(),
                            required=False)
    porcientodocencia = forms.IntegerField(label=u'% Docencia', initial=0, required=False,
                                           widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    porcientoinvestigacion = forms.IntegerField(label=u'% Investigación', initial=0, required=False,
                                                widget=forms.TextInput(
                                                    attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    porcientogestion = forms.IntegerField(label=u'% Gestion Academica', initial=0, required=False,
                                          widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))

    def sin_tipo(self):
        del self.fields['tipo']


class MatrizEvaluacionIntegralForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=100)
    matriz = ModelChoiceField(label=u'Matriz', queryset=MatrizEvaluacion.objects.all(), required=False,
                              widget=forms.Select())
    coordinaciones = forms.ModelMultipleChoiceField(label=u'Facultades', queryset=Coordinacion.objects.all(),
                                                    required=False)

    def sin_matriz(self):
        del self.fields['matriz']


class ActivacionInstrumentoEvaluacionIntegralForm(forms.Form):
    desde = forms.DateField(label=u"Desde", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    hasta = forms.DateField(label=u"Hasta", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    obligatorio = forms.BooleanField(initial=True, required=False, label=u'Obligatorio')


class AddVariableForm(forms.Form):
    lista = forms.CharField(label=u"Lista elementos")


class DetalleVariableEvaluacionIntegralForm(forms.Form):
    nombre = forms.CharField(label=u"Detalle", max_length=400)


class PreProyectoGradoForm(forms.Form):
    titulo = forms.CharField(max_length=300, label=u'Nombre proyecto')
    sublineainvestigacion = ModelChoiceField(label=u'Sublinea de investg.',
                                             queryset=SubLineaInvestigacion.objects.all(), required=False)
    palabrasclaves = forms.CharField(label=u'Palabras Claves', max_length=150, required=False, widget=forms.Textarea(
        attrs={'rows': '3', 'placeholder': 'Palabras claves separadas por coma'}))
    fecha = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    tipotrabajotitulacion = ModelChoiceField(label=u'Tipo trabajo', queryset=TipoTrabajoTitulacion.objects.all(),
                                             required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    tutorsugerido = ModelChoiceField(label=u'Tutor', queryset=Persona.objects.filter(usuario__is_active=True,
                                                                                     usuario__groups__in=Group.objects.exclude(
                                                                                         id=ALUMNOS_GROUP_ID)).distinct(),
                                     required=False, widget=forms.Select(attrs={'class': 'imp-75'}))
    tipogrado = ModelChoiceField(label=u'Tipo Grado', queryset=TipoGrado.objects.all(), required=False,
                                 widget=forms.Select(attrs={'class': 'imp-25'}))
    problema = forms.CharField(label=u'Problema', required=False, widget=forms.Textarea(attrs={'rows': '5'}))
    objetivogeneral = forms.CharField(label=u'Objetivo general', required=False,
                                      widget=forms.Textarea(attrs={'rows': '5'}))
    objetivoespecifico = forms.CharField(label=u'Objetivo especifico', required=False,
                                         widget=forms.Textarea(attrs={'rows': '5'}))
    metodo = forms.CharField(label=u'Metodo', required=False, widget=forms.Textarea(attrs={'rows': '5'}))
    descripcionpropuesta = forms.CharField(label=u'Descripción propuesta', required=False,
                                           widget=forms.Textarea(attrs={'rows': '5'}))
    resultadoesperado = forms.CharField(label=u'Resultado esperado', required=False,
                                        widget=forms.Textarea(attrs={'rows': '5'}))
    referencias = forms.CharField(label=u'Referencias', required=False, widget=forms.Textarea(attrs={'rows': '5'}))


class CambioDatosProyectoForm(forms.Form):
    solicitud = forms.CharField(label=u'Solicitud', required=False, widget=forms.Textarea(attrs={'rows': '5'}))
    motivo = forms.CharField(label=u'Motivo', required=False, widget=forms.Textarea(attrs={'rows': '5'}))
    nuevotitulo = forms.CharField(label=u'Nuevo titulo', max_length=300, required=False)
    archivo = ExtFileField(label=u'Archivo', help_text=u'Tamaño Maximo permitido 5Mb, en formato doc, docx, pdf',
                           ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=5242880, required=False)

    def sin_titulo(self):
        del self.fields['nuevotitulo']


class ResponderCambioDatosProyectoForm(forms.Form):
    solicitud = forms.CharField(label=u'Solicitud', required=False,
                                widget=forms.Textarea(attrs={'disabled': 'disabled', 'rows': '5'}))
    motivo = forms.CharField(label=u'Motivo', required=False,
                             widget=forms.Textarea(attrs={'disabled': 'disabled', 'rows': '5'}))
    estado = forms.ChoiceField(label=u'Estado', choices=ESTADOS_SOLICITUDCAMBIOPROYECTO,
                               widget=forms.Select(attrs={'class': 'imp-25'}))
    titulo = forms.CharField(max_length=300, required=False, label=u'Nuevo titulo')
    tutor = ModelChoiceField(label=u'Tutor', queryset=Persona.objects.filter(usuario__is_active=True,
                                                                             usuario__groups__in=Group.objects.exclude(
                                                                                 id=ALUMNOS_GROUP_ID)).distinct(),
                             required=False, widget=forms.Select(attrs={'class': 'imp-75'}))
    respuesta = forms.CharField(label=u'Respuesta', required=False, widget=forms.Textarea(attrs={'rows': '5'}))

    def sin_tutor(self):
        del self.fields['tutor']

    def sin_titulo(self):
        del self.fields['titulo']


class AsignarCalificadorPreProyectoForm(forms.Form):
    profesor = ModelChoiceField(label=u'Calificador',
                                queryset=Profesor.objects.filter(persona__usuario__is_active=True), required=False)
    fecha = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)


class CalificacionDocenteAnteproyectoForm(forms.Form):
    calificacion = forms.FloatField(label=u'Calificación', initial="0.00", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))


class CalificarPreProyectoGradoForm(forms.Form):
    estado = forms.ChoiceField(label=u'Estado', choices=ESTADOS_PREPROYECTO,
                               widget=forms.Select(attrs={'class': 'imp-50'}))
    calificacion = forms.FloatField(label=u'Calificación', initial="0.00", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    fechaaprobacion = forms.DateField(label=u"Fecha aprobación", input_formats=['%d-%m-%Y'],
                                      widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                      required=False)
    fechaconsejo = forms.DateField(label=u"Fecha Consejo", input_formats=['%d-%m-%Y'],
                                   widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                   required=False)
    tutortitular = ModelChoiceField(label=u'Tutor Titular', queryset=Persona.objects.filter(usuario__is_active=True,
                                                                                            usuario__groups__in=Group.objects.exclude(
                                                                                                id=ALUMNOS_GROUP_ID)),
                                    required=False)
    tutorsecundario = ModelChoiceField(label=u'Tutor Secundario',
                                       queryset=Persona.objects.filter(usuario__is_active=True,
                                                                       usuario__groups__in=Group.objects.exclude(
                                                                           id=ALUMNOS_GROUP_ID)), required=False)


class CitaTutoriaForm(forms.Form):
    hora = forms.TimeField(label=u"Hora", input_formats=['%H:%M'],
                           widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    lugar = forms.CharField(label=u'Lugar', required=False)


class ActaAvanceTutoriaForm(forms.Form):
    horainicio = forms.TimeField(label=u"Hora inicio", input_formats=['%H:%M'],
                                 widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    horafin = forms.TimeField(label=u"Hora fin", input_formats=['%H:%M'],
                              widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    porcientoavance = forms.IntegerField(label=u'% Avance', initial=0, required=False,
                                         widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    sugerencia = forms.CharField(label=u'Sugerencias', widget=forms.Textarea, required=False)
    archivo = ExtFileField(label=u'Archivo', help_text=u'Tamaño Maximo permitido 5Mb, en formato doc, docx, pdf',
                           ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=5242880, required=False)

    def sin_archivo(self):
        del self.fields['archivo']


class TribunalProyectoGradoForm(forms.Form):
    presidente = ModelChoiceField(label=u'Presidente', queryset=Persona.objects.filter(usuario__is_active=True,
                                                                                       usuario__groups__in=Group.objects.exclude(
                                                                                           id=ALUMNOS_GROUP_ID)).distinct(),
                                  required=False)
    secretario = ModelChoiceField(label=u'Secretario', queryset=Persona.objects.filter(usuario__is_active=True,
                                                                                       usuario__groups__in=Group.objects.exclude(
                                                                                           id=ALUMNOS_GROUP_ID)).distinct(),
                                  required=False)
    delegado = ModelChoiceField(label=u'Delegado', queryset=Persona.objects.filter(usuario__is_active=True,
                                                                                   usuario__groups__in=Group.objects.exclude(
                                                                                       id=ALUMNOS_GROUP_ID)).distinct(),
                                required=False)
    fechasustentacion = forms.DateField(label=u"Fecha sustentación", input_formats=['%d-%m-%Y'],
                                        widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                        required=False)
    horasustentacion = forms.TimeField(label=u"Hora sustentación", input_formats=['%H:%M'],
                                       widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    lugar = forms.CharField(label=u'Lugar', required=False)


class CalificarProyectoGradoForm(forms.Form):
    calificacion = forms.FloatField(label=u'Calificación', initial="0.00", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    estadosustentacion = forms.ChoiceField(label=u'Estado sustentación', choices=ESTADOS_SUSTENTACION_PROYECTO,
                                           widget=forms.Select(attrs={'class': 'imp-50'}))


class InformacionProyectoGradoForm(forms.Form):
    estado = forms.ChoiceField(label=u'Estado proyecto', choices=ESTADOS_PROYECTO,
                               widget=forms.Select(attrs={'class': 'imp-50'}))
    fechaaprobacion = forms.DateField(label=u"Fecha aprobación", input_formats=['%d-%m-%Y'],
                                      widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                      required=False)
    fechaconsejo = forms.DateField(label=u"Fecha consejo academico", input_formats=['%d-%m-%Y'],
                                   widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                   required=False)
    fechalimite = forms.DateField(label=u"Fecha limite", input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                  required=False)
    porcientoavance = forms.IntegerField(label=u'% Avance', initial=0, required=False,
                                         widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    presidentepredefensa = ModelChoiceField(label=u'Presidente',
                                            queryset=Persona.objects.filter(usuario__is_active=True,
                                                                            usuario__groups__in=Group.objects.exclude(
                                                                                id=ALUMNOS_GROUP_ID)).distinct(),
                                            required=False)
    secretariopredefensa = ModelChoiceField(label=u'Secretario',
                                            queryset=Persona.objects.filter(usuario__is_active=True,
                                                                            usuario__groups__in=Group.objects.exclude(
                                                                                id=ALUMNOS_GROUP_ID)).distinct(),
                                            required=False)
    delegadopredefensa = ModelChoiceField(label=u'Delegado', queryset=Persona.objects.filter(
        usuario__groups__in=Group.objects.exclude(id=ALUMNOS_GROUP_ID)).distinct(), required=False)
    fechapredefensa = forms.DateField(label=u"Fecha sustentación", input_formats=['%d-%m-%Y'],
                                      widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                      required=False)
    horapredefensa = forms.TimeField(label=u"Hora sustentación", input_formats=['%H:%M'],
                                     widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    lugarpredefensa = forms.CharField(label=u'Lugar', required=False)
    calificacionpredefensa = forms.FloatField(label=u'Calificación', initial="0.00", required=False,
                                              widget=forms.TextInput(
                                                  attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    presidentedefensa = ModelChoiceField(label=u'Presidente', queryset=Persona.objects.filter(usuario__is_active=True,
                                                                                              usuario__groups__in=Group.objects.exclude(
                                                                                                  id=ALUMNOS_GROUP_ID)).distinct(),
                                         required=False)
    secretariodefensa = ModelChoiceField(label=u'Secretario', queryset=Persona.objects.filter(usuario__is_active=True,
                                                                                              usuario__groups__in=Group.objects.exclude(
                                                                                                  id=ALUMNOS_GROUP_ID)).distinct(),
                                         required=False)
    delegadodefensa = ModelChoiceField(label=u'Delegado', queryset=Persona.objects.filter(
        usuario__groups__in=Group.objects.exclude(id=ALUMNOS_GROUP_ID)).distinct(), required=False)
    fechadefensa = forms.DateField(label=u"Fecha sustentación", input_formats=['%d-%m-%Y'],
                                   widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                   required=False)
    horadefensa = forms.TimeField(label=u"Hora sustentación", input_formats=['%H:%M'],
                                  widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    lugardefensa = forms.CharField(label=u'Lugar', required=False)
    calificaciondefensa = forms.FloatField(label=u'Calificación', initial="0.00", required=False,
                                           widget=forms.TextInput(
                                               attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    estadosustentacion = forms.ChoiceField(label=u'Estado sustentación', choices=ESTADOS_SUSTENTACION_PROYECTO,
                                           widget=forms.Select(attrs={'class': 'imp-50'}))


class CambiarTutoresProyectoGradoForm(forms.Form):
    tutortitular = ModelChoiceField(label=u'Tutor titular', queryset=Persona.objects.filter(usuario__is_active=True,
                                                                                            usuario__groups__in=Group.objects.exclude(
                                                                                                id=ALUMNOS_GROUP_ID)).distinct(),
                                    required=False, widget=forms.Select(attrs={'class': 'imp-75'}))
    tutorsecundario = ModelChoiceField(label=u'Tutor secundario',
                                       queryset=Persona.objects.filter(usuario__is_active=True,
                                                                       usuario__groups__in=Group.objects.exclude(
                                                                           id=ALUMNOS_GROUP_ID)).distinct(),
                                       required=False, widget=forms.Select(attrs={'class': 'imp-75'}))


class CambiarEstadoProyectoGradoForm(forms.Form):
    estado = forms.ChoiceField(label=u'Estado proyecto', choices=ESTADOS_PROYECTO, widget=forms.Select())


class CriterioArticuloForm(forms.Form):
    nombre = forms.CharField(label=u'Articulo', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    vigente = forms.BooleanField(initial=False, required=False, label=u'Vigente?',
                                 widget=CheckboxInput(attrs={'formwidth': '25%'}))


class ActividadPrincipalForm(FormModeloBase):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    tipocriterio = forms.ChoiceField(label=u'Tipo de criterio', required=False, choices=TIPO_CRITERIO_ACTIVIDAD_PRINCIPAL, widget=forms.Select(attrs={'class': 'imp-50'}))
    vigente = forms.BooleanField(initial=False, required=False, label=u'Vigente?', widget=CheckboxInput(attrs={'formwidth': '25%'}))


class RecursosForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))


class CriterioDocenciaForm(FormModeloBase):
    dedicacion = forms.ModelChoiceField(label=u'Tiempo de Dedicación', queryset=TiempoDedicacionDocente.objects.all(), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    texto = forms.CharField(label=u'Criterio', required=True, max_length=500, widget=forms.Textarea(attrs={'rows': '3'}))
    tipocriterioactividad = forms.ChoiceField(label=u'Tipo de actividad', required=False, choices=TIPO_CRITERIO_ACTIVIDAD, widget=forms.Select(attrs={'class': 'imp-50'}))
    procesotutoriaacademica = forms.BooleanField(initial=False, required=False, label=u'Proceso Tutoria Académica', widget=CheckboxInput(attrs={'formwidth': '50%'}))
    procesoimparticionclase = forms.BooleanField(initial=False, required=False, label=u'Proceso Impartición Clase', widget=CheckboxInput(attrs={'formwidth': '50%'}))
    nombrehtml = forms.CharField(label=u"nombrehtml", required=False, max_length=200)

    def add(self):
        del self.fields['nombrehtml']


class CriterioGestionForm(forms.Form):
    texto = forms.CharField(label=u'Criterio', required=False, max_length=500,
                            widget=forms.Textarea(attrs={'rows': '3'}))
    tipocriterioactividad = forms.ChoiceField(label=u'Tipo de actividad', required=False,
                                              choices=TIPO_CRITERIO_ACTIVIDAD,
                                              widget=forms.Select(attrs={'class': 'imp-50'}))
    nombrehtml = forms.CharField(label=u"nombrehtml", required=False, max_length=200)

    def add(self):
        del self.fields['nombrehtml']


class CriterioVinculacionForm(forms.Form):
    texto = forms.CharField(label=u'Criterio', required=False, max_length=500,
                            widget=forms.Textarea(attrs={'rows': '3'}))
    tipocriterioactividad = forms.ChoiceField(label=u'Tipo de actividad', required=False,
                                              choices=TIPO_CRITERIO_ACTIVIDAD,
                                              widget=forms.Select(attrs={'class': 'imp-50'}))
    vicevinculacion = forms.BooleanField(initial=False, required=False, label=u'Vicerrectorado de Vinculación', widget=CheckboxInput(attrs={'formwidth': '100%'}))
    nombrehtml = forms.CharField(label=u"nombrehtml", required=False, max_length=200)

    def add(self):
        del self.fields['nombrehtml']


class RecursoAprendizajeForm(forms.Form):
    recurso = forms.ModelChoiceField(RecursoAprendizaje.objects.filter(status=True), required=False, label=u'Recurso', widget=forms.Select(attrs={'class': 'imp-100'}))
    tipoprofesor = forms.ModelMultipleChoiceField(label=u'Tipo Profesor', queryset=TipoProfesor.objects.filter(status=True), required=False)
    docencia = forms.BooleanField(initial=False, required=False, label=u'Es docencia?', widget=CheckboxInput(attrs={'formwidth': '100%'}))
    investigacion = forms.BooleanField(initial=False, required=False, label=u'Es investigación?', widget=CheckboxInput(attrs={'formwidth': '100%'}))
    gestion = forms.BooleanField(initial=False, required=False, label=u'Es gestión?', widget=CheckboxInput(attrs={'formwidth': '100%'}))


class RecursoAprendizajeauxForm(forms.Form):
    recurso = forms.ModelChoiceField(RecursoAprendizaje.objects.filter(status=True), required=False, label=u'Recurso', widget=forms.Select(attrs={'class': 'imp-100'}))
    tipoprofesor = forms.ModelChoiceField(label=u'Tipo Profesor', queryset=TipoProfesor.objects.filter(status=True), required=False)
    docencia = forms.BooleanField(initial=False, required=False, label=u'Es docencia?', widget=CheckboxInput(attrs={'formwidth': '100%'}))
    investigacion = forms.BooleanField(initial=False, required=False, label=u'Es investigación?', widget=CheckboxInput(attrs={'formwidth': '100%'}))
    gestion = forms.BooleanField(initial=False, required=False, label=u'Es gestión?', widget=CheckboxInput(attrs={'formwidth': '100%'}))

    def editar(self):
        deshabilitar_campo(self, 'recurso')
        deshabilitar_campo(self, 'tipoprofesor')


class RecursoAprendizajeRangoForm(forms.Form):
    rangodesde = forms.IntegerField(label=u'Rango desde', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    rangohasta = forms.IntegerField(label=u'Rango hasta', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    valor = forms.IntegerField(label=u'Valor', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class ActividadRecursoAprendizajeForm(forms.Form):
    recurso = forms.ModelMultipleChoiceField(label=u'Recurso', queryset=RecursoAprendizajeTipoProfesor.objects.filter(status=True), required=False)
    valor = forms.FloatField(label=u'Valor', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    distributivo = forms.BooleanField(initial=False, required=False, label=u'Es Distributivo', widget=CheckboxInput(attrs={'formwidth': '25%'}))

    def tipo(self, tipo):
        if tipo == '1':
            ra = RecursoAprendizajeTipoProfesor.objects.filter(status=True, docencia=True)
        if tipo == '2':
            ra = RecursoAprendizajeTipoProfesor.objects.filter(status=True, investigacion=True)
        if tipo == '3':
            ra = RecursoAprendizajeTipoProfesor.objects.filter(status=True, gestion=True)
        self.fields['recurso'].queryset = ra


class ActividadRecursoAprendizajeAuxForm(forms.Form):
    recurso = forms.ModelChoiceField(RecursoAprendizajeTipoProfesor.objects.filter(status=True), required=False, label=u'Recurso', widget=forms.Select(attrs={'class': 'imp-100'}))
    valor = forms.FloatField(label=u'Valor', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    distributivo = forms.BooleanField(initial=False, required=False, label=u'Es Distributivo', widget=CheckboxInput(attrs={'formwidth': '25%'}))

    def editar(self, tipo):
        deshabilitar_campo(self, 'recurso')
        if tipo == '1':
            ra = RecursoAprendizajeTipoProfesor.objects.filter(status=True, docencia=True)
        if tipo == '2':
            ra = RecursoAprendizajeTipoProfesor.objects.filter(status=True, investigacion=True)
        if tipo == '3':
            ra = RecursoAprendizajeTipoProfesor.objects.filter(status=True, gestion=True)
        self.fields['recurso'].queryset = ra


class CriterioInvestigacionForm(forms.Form):
    texto = forms.CharField(label=u'Criterio', required=False, max_length=500,
                            widget=forms.Textarea(attrs={'rows': '3'}))
    tipocriterioactividad = forms.ChoiceField(label=u'Tipo de actividad', required=False,
                                              choices=TIPO_CRITERIO_ACTIVIDAD,
                                              widget=forms.Select(attrs={'class': 'imp-50'}))
    nombrehtml = forms.CharField(label=u"nombrehtml", required=False, max_length=200)

    def add(self):
        del self.fields['nombrehtml']


class CriterioDocenciaMinimoMaximoPeriodoForm(forms.Form):
    actividad = forms.ModelChoiceField(ActividadPrincipal.objects.filter(tipocriterioactividadprincipal=1, status=True), label=u'Actividad', widget=forms.Select(attrs={'class': 'imp-100'}))
    minimo = forms.IntegerField(label=u'Mínimo', initial=1, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    maximo = forms.IntegerField(label=u'Máximo', initial=1, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    subirevidencia = forms.BooleanField(initial=True, required=False, label=u'Subir evidencia')
    porcentaje = forms.IntegerField(label=u'Porcentaje', initial=1, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class CriterioInvestigacionMinimoMaximoPeriodoForm(forms.Form):
    actividad = forms.ModelChoiceField(ActividadPrincipal.objects.filter(tipocriterioactividadprincipal=2, status=True),
                                       label=u'Actividad', widget=forms.Select(attrs={'class': 'imp-100'}))
    minimo = forms.IntegerField(label=u'Mínimo', initial=1, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    maximo = forms.IntegerField(label=u'Máximo', initial=1, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    es_actividadmacro = forms.BooleanField(initial=False, required=False, label=u'¿Es actividad macro?')


class CriterioGestionMinimoMaximoPeriodoForm(forms.Form):
    actividad = forms.ModelChoiceField(ActividadPrincipal.objects.filter(tipocriterioactividadprincipal=3, status=True), label=u'Actividad', widget=forms.Select(attrs={'class': 'imp-100'}))
    minimo = forms.IntegerField(label=u'Mínimo', initial=1, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    maximo = forms.IntegerField(label=u'Máximo', initial=1, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class CriterioVinculacionMinimoMaximoPeriodoForm(forms.Form):
    actividad = forms.ModelChoiceField(ActividadPrincipal.objects.filter(tipocriterioactividadprincipal=4, status=True), label=u'Actividad', widget=forms.Select(attrs={'class': 'imp-100'}))
    minimo = forms.IntegerField(label=u'Mínimo', initial=1, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    maximo = forms.IntegerField(label=u'Máximo', initial=1, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    subirevidencia = forms.BooleanField(initial=True, required=False, label=u'Subir evidencia')
    es_actividadmacro = forms.BooleanField(initial=False, required=False, label=u'¿Es actividad macro?')


class HorasCriterioForm(forms.Form):
    horas = forms.ChoiceField(label=u'Horas', choices=tuple([(x, x) for x in range(0, 100)]),
                              widget=forms.Select(attrs={'class': 'imp-50'}))

    def horas_criterio(self, criterio):
        self.fields['horas'].choices = tuple([(x, x) for x in criterio.rango_horas()])


class ActividadCriterioForm(forms.Form):
    texto = forms.CharField(label=u'Actividad', required=False, max_length=500,
                            widget=forms.Textarea(attrs={'rows': '3'}))
    desde = forms.DateField(label=u"Desde", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    hasta = forms.DateField(label=u"Hasta", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    horas = forms.IntegerField(label=u'Horas', initial=1, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))

    def editar(self):
        deshabilitar_campo(self, 'texto')


class DedicacionProfesorForm(forms.Form):
    dedicacion = forms.ModelChoiceField(label=u'Tiempo de Dedicación', queryset=TiempoDedicacionDocente.objects.all(),
                                        required=False)


class PonderacionProfesorForm(forms.Form):
    ponderacion = forms.ModelChoiceField(label=u'Tabla de ponderación',
                                         queryset=TablaPonderacionInstrumento.objects.all(), required=False)


CHOICESTIPO = (
    ('1', 'INCONVENIENTE'),
    ('2', 'DIFERIDO'),
)


class SolicitudAperturaClaseForm(forms.Form):
    # tipoclase = forms.ChoiceField(label=u'Tipo Clase', required=False,
    #                                                choices=TIPO_CLASE,
    #                                                widget=forms.Select(attrs={'class': 'imp-50'}))

    # tipoclase = forms.ChoiceField(label=u'', choices=TIPO_CLASE, widget=forms.RadioSelect(attrs={'formwidth': '50%'}))
    tipo = forms.ChoiceField(label=u'', choices=CHOICESTIPO, widget=forms.RadioSelect(attrs={'formwidth': '50%'}))
    tiposolicitudinconveniente = forms.ChoiceField(label=u'Tipo Solicitud', required=False, choices=TIPO_SOLICITUDINCONVENIENTE, widget=forms.Select(attrs={'class': 'imp-50'}))
    tiposolicituddiferido = forms.ChoiceField(label=u'Tipo Solicitud', required=False, choices=TIPO_SOLICITUDDIFERIDO, widget=forms.Select(attrs={'class': 'imp-50'}))
    fecha = forms.DateField(label=u"Fecha Inasistencia desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    fechahasta = forms.DateField(label=u"Fecha Inasistencia Hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    tipomotivo = forms.ChoiceField(label=u'Tipo Motivo', required=False, choices=TIPO_MOTIVO, widget=forms.Select(attrs={'class': 'imp-50'}))
    especifique = forms.CharField(label=u'Especifique', widget=forms.Textarea, required=False)
    materia = ModelChoiceField(label=u'Materia', queryset=Materia.objects.filter(status=True), required=False)
    aula = ModelChoiceField(label=u'Aula "opcional"', queryset=Aula.objects.filter(status=True), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    motivo = forms.CharField(label=u'Motivo', widget=forms.Textarea, required=False)
    documento = ExtFileField(label=u'Adjunto', required=False, help_text=u'Tamaño Maximo permitido 5Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=5242880)
    fechadiferido = forms.DateField(label=u"Fecha de clase a impartir", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)

    def filtros(self, profesor, periodo):
        fecha = datetime.now().date()
        materias = []
        profesormaterias = ProfesorMateria.objects.filter(profesor=profesor, materia__nivel__periodo=periodo, tipoprofesor_id__in=[1, 5, 6]).distinct().order_by('desde', 'materia__asignatura__nombre')
        for profesormateria in profesormaterias:
            if profesormateria.esta_dia_con_horario(fecha):
                data = profesormateria.asistencia_docente(fecha, fecha, periodo)
                if data['total_asistencias_no_registradas'] > 0:
                    materias.append(profesormateria.materia.id)
        if periodo.tipo.id in [3, 4]:
            self.fields['tiposolicitudinconveniente'].choices = TIPO_SOLICITUDINCONVENIENTE[0:4]
        else:
            self.fields['tiposolicitudinconveniente'].choices = TIPO_SOLICITUDINCONVENIENTE[4:5]
        self.fields['materia'].queryset = Materia.objects.filter(status=True, id__in=materias)


class SolicitudAperturaClaseObservacionForm(forms.Form):
    observacionrevision = forms.CharField(label=u'Validación del area responsable', widget=forms.Textarea,
                                          required=False)
    aprobadorevision = forms.BooleanField(initial=False, required=False, label=u'Aceptado',
                                          widget=CheckboxInput(attrs={'formwidth': '25%'}))
    rechazadorevision = forms.BooleanField(initial=False, required=False, label=u'Rechazado',
                                           widget=CheckboxInput(attrs={'formwidth': '25%'}))


class SolicitudAperturaClaseAsignacionForm(forms.Form):
    aula = ModelChoiceField(label=u'Aula', queryset=Aula.objects.filter(status=True), required=False)
    trabajador = ModelChoiceField(label=u'Trabajador',
                                  queryset=Persona.objects.filter(distributivopersona__regimenlaboral__id=4,
                                                                  status=True), required=False)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class PonderacionAcreditacionForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=100)
    docencia_instrumentohetero = forms.IntegerField(label=u'D. Estudiantes', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    docencia_instrumentoauto = forms.IntegerField(label=u'D. Autoevaluación', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    docencia_instrumentopar = forms.IntegerField(label=u'D. Pares', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    docencia_instrumentodirectivo = forms.IntegerField(label=u'D. Directivos', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    # docencia_instrumentocomision = forms.IntegerField(label=u'D. Comisión', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    docencia_total = forms.IntegerField(label=u'D. Total', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'disabled': 'imp-numbersmall', 'decimal': '0'}))
    investigacion_instrumentohetero = forms.IntegerField(label=u'Inv. Estudiantes', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    investigacion_instrumentoauto = forms.IntegerField(label=u'Inv. Autoevaluación', initial=0, required=False,widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    investigacion_instrumentopar = forms.IntegerField(label=u'Inv. Pares', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    investigacion_instrumentodirectivo = forms.IntegerField(label=u'Inv. Directivos', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    # investigacion_instrumentocomision = forms.IntegerField(label=u'Inv. Comisión', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    investigacion_total = forms.IntegerField(label=u'Inv. Total', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'disabled': 'imp-numbersmall', 'decimal': '0'}))
    gestion_instrumentohetero = forms.IntegerField(label=u'Gst. Estudiantes', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    gestion_instrumentoauto = forms.IntegerField(label=u'Gst. Autoevaluación', initial=0, required=False,widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    gestion_instrumentopar = forms.IntegerField(label=u'Gst. Pares', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    gestion_instrumentodirectivo = forms.IntegerField(label=u'Gst. Directivos', initial=0, required=False,widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    # gestion_instrumentocomision = forms.IntegerField(label=u'Gst. Comisión', initial=0, required=False,widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    gestion_total = forms.IntegerField(label=u'Gst. Total', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'disabled': 'imp-numbersmall', 'decimal': '0'}))
    vincu_instrumentohetero = forms.IntegerField(label=u'Vin. Estudiantes', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    vincu_instrumentoauto = forms.IntegerField(label=u'Vin. Autoevaluación', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    vincu_instrumentopar = forms.IntegerField(label=u'Vin. Pares', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    vincu_instrumentodirectivo = forms.IntegerField(label=u'Vin. Directivos', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    # vincu_instrumentocomision = forms.IntegerField(label=u'Vin. Comisión', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    vincu_total = forms.IntegerField(label=u'Vin. Total', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'disabled': 'imp-numbersmall', 'decimal': '0'}))


class FechaEvaluacionAcreditacionForm(FormModeloBase):
    lugar = forms.CharField(label=u'Lugar:', widget=forms.TextInput(attrs={'class': 'imp-100', 'col': '12'}), required=False)
    fecha = forms.DateField(label=u"Fecha:", initial=datetime.now().date(), required=False, widget=DateTimeInput({'col': '4'}))
    horainicio = forms.TimeField(label=u"Hora Desde:", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'col': '4'}))
    horafin = forms.TimeField(label=u'Hora Hasta:', required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'col': '4'}))
    aplicarpargeneral = forms.BooleanField(label=u'Aplicar a pares generales?', initial=False, required=False)


class ActivacionInstrumentoEvaluacionAcreditacionForm(forms.Form):
    desde = forms.DateField(label=u"Desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', }), required=False)
    hasta = forms.DateField(label=u"Hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', }), required=False)
    activo = forms.BooleanField(initial=True, required=False, label=u'Activo')


class CaracteristicaAcreditacionForm(forms.Form):
    intencionalidad = forms.CharField(widget=forms.Textarea(attrs={'rows': '3', 'maxlength': '400'}), required=False, label=u"Intencionalidad")
    nombre = forms.CharField(widget=forms.Textarea(attrs={'rows': '3', 'maxlength': '400'}), required=False, label=u"Nombre característica")


class PreguntaAcreditacionForm(forms.Form):
    texto = forms.CharField(widget=forms.Textarea(attrs={'rows': '3', 'maxlength': '400'}), required=False, label=u"Texto")


class RubricaAcreditacionForm(FormModeloBase):
    tiporubrica = forms.ChoiceField(label=u"Tipo rúbrica", choices=TIPO_RUBRICAEVALUACION, required=False, widget=forms.Select(attrs={'class':'form-control', 'col': '12'}))
    tipoprofesor = forms.ModelChoiceField(label=u"Tipo Profesor", queryset=TipoProfesor.objects.filter(status=True), required=False, widget=forms.Select(attrs={'class':'form-control', 'col': '12'}))
    nombre = forms.CharField(label=u"Nombre", max_length=300, widget=forms.TextInput(attrs={'class':'form-control', 'col': '12'}))
    descripcion = forms.CharField(widget=forms.Textarea(attrs={'class':'form-control', 'rows': '3', 'maxlength': '400', 'col': '12'}), required=False, label=u"Descripcion")
    para_hetero = forms.BooleanField(initial=True, required=False, label=u'Evaluación estudiantes?', widget=CheckboxInput(attrs={'col': '3'}))
    para_auto = forms.BooleanField(initial=False, required=False, label=u'Autoevaluación?', widget=CheckboxInput(attrs={'col': '3'}))
    para_par = forms.BooleanField(initial=False, required=False, label=u'Evaluación pares?', widget=CheckboxInput(attrs={'col': '3'}))
    para_directivo = forms.BooleanField(initial=False, required=False, label=u'Evaluación directivo?', widget=CheckboxInput(attrs={'col': '3'}))
    # para_materiapractica = forms.BooleanField(initial=False, required=False, label=u'Para materias practicas?', widget=CheckboxInput(attrs={'col': '12'}))
    # para_practicasalud = forms.BooleanField(initial=False, required=False, label=u'Para materias practica salud?', widget=CheckboxInput(attrs={'col': '12'}))
    para_nivelacion = forms.BooleanField(initial=False, required=False, label=u'Para nivelación?', widget=CheckboxInput(attrs={'col': '6'}))
    para_nivelacionvirtual = forms.BooleanField(initial=False, required=False, label=u'Para nivelación virtual?', widget=CheckboxInput(attrs={'col': '6'}))
    # para_semestrevirtual = forms.BooleanField(initial=False, required=False, label=u'Para semestre virtual?', widget=CheckboxInput(attrs={'col': '12'}))
    informativa = forms.BooleanField(initial=False, required=False, label=u'Solo informativa?', widget=CheckboxInput(attrs={'col': '6'}))
    directivos = forms.BooleanField(initial=False, required=False, label=u'Evaluación estudiantes directivos?', widget=CheckboxInput(attrs={'col': '6'}))
    tutores = forms.BooleanField(initial=False, required=False, label=u'Rúbrica especial para tutores?', widget=CheckboxInput(attrs={'col': '6'}))

    # nivelacion_presencial = forms.BooleanField(initial=False, required=False, label=u'Rubrica de nivelación presencial')
    # nivelacion_virtual = forms.BooleanField(initial=False, required=False, label=u'Rubrica de nivelación virtual')
    # semestre_presencial = forms.BooleanField(initial=False, required=False, label=u'Rubrica para semestre presencial')
    # semestre_virtual = forms.BooleanField(initial=False, required=False, label=u'Rubrica de semestre virtual')

    def duplicar(self):
        del self.fields['para_hetero']
        del self.fields['para_auto']
        del self.fields['para_par']
        del self.fields['para_directivo']
        del self.fields['para_materiapractica']
        del self.fields['para_nivelacion']
        del self.fields['informativa']


class ImportarArchivoCSVForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño Maximo permitido 4Mb, en formato txt, csv',
                           ext_whitelist=(".txt", ".csv"), max_upload_size=4194304)


class ImportarArchivoXLSDistributivoForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo solicitud', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png, docx',
                           ext_whitelist=(".xlsx", ".xls"), max_upload_size=8194304,
                           widget=forms.FileInput(
                               attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'xlsx xls'}))


class ImportarListadoAlumnoForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño Maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)


class ImportarListadoAlumnoSoporteForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño Maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)


class ProgramaPrapreForm(forms.Form):
    coordinacion = forms.ModelChoiceField(Coordinacion.objects.all(), label=u"Coordinacion")
    carrera = forms.ModelChoiceField(queryset=Carrera.objects.all(), label=u"Carrera")
    fechaini = forms.DateField(label=u"Facha Inicio", input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                               required=False)
    fechfin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'],
                              widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    descripcion = forms.CharField(label=u'Programa', max_length=200)
    objgeneral = forms.CharField(label=u'Objetivo General', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    objespecifico = forms.CharField(label=u'Objetivos Especificos', widget=forms.Textarea(attrs={'rows': '3'}),
                                    required=False)
    justificacion = forms.CharField(label=u'Justificación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    duracion = forms.CharField(label=u'Duración', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    recurso = forms.CharField(label=u'Recursos', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    cronograma = forms.CharField(label=u'Cronograma', widget=forms.Textarea(attrs={'rows': '3'}), required=False)

    def query(self):
        self.fields['carrera'].queryset = Carrera.objects.filter(pk=None)

    def edita(self, variable):
        listadocar = Coordinacion.objects.get(pk=variable)
        listado = listadocar.carrera.all()
        self.fields['carrera'].queryset = listadocar.carrera.all()


class EvidenciaActividadDetalleDistributivoForm(FormModeloBase):
    desde = forms.DateField(label=u"Fecha desde", widget=DateTimeInput(attrs={'class': 'selectorfecha',  'col': '6', 'readonly': 'true'}), required=False)
    hasta = forms.DateField(label=u"Fecha hasta", widget=DateTimeInput(attrs={'class': 'selectorfecha',  'col': '6', 'readonly': 'true'}), required=False)
    actividad = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivo = ExtFileField(label=u'Evidencia principal', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=20971520)

class AnexoEvidenciaActividadForm(forms.Form):
    observacion = forms.CharField(label=u'Descripción ',  widget=forms.Textarea(attrs={'rows': '1', 'col': '12', 'class':'form-control', 'style': 'width:100%;'}), required=True)
    archivoanexo = ExtFileField(label=u'Anexo', required=True, help_text=u'Tamaño Maximo permitido 20Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=20971520, widget=forms.FileInput(attrs={'col': '12', 'class': 'form-control', 'style': 'width:100%;'}))


class ProgramaAnaliticoMallaForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    fecha = forms.DateField(label=u"Fecha", required=False, input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    archivoword = ExtFileField(label=u'Seleccione Archivo Word', required=False,
                               help_text=u'Tamaño Maximo permitido 4Mb, en formato  doc, docx',
                               ext_whitelist=(".doc", ".docx"), max_upload_size=4194304)
    archivopdf = ExtFileField(label=u'Seleccione Archivo Pdf', required=False,
                              help_text=u'Tamaño Maximo permitido 4Mb, en formato  pdf', ext_whitelist=(".pdf",),
                              max_upload_size=4194304)

    def editar(self):
        deshabilitar_campo(self, 'descripcion')
        deshabilitar_campo(self, 'fecha')


class ProgramaAnaliticoAsignaturaMallaForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    fecha = forms.DateField(label=u"Fecha Aprobación", required=False, input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    archivoword = ExtFileField(label=u'Seleccione Archivo Word', required=False,
                               help_text=u'Tamaño Maximo permitido 4Mb, en formato  doc, docx',
                               ext_whitelist=(".doc", ".docx"), max_upload_size=4194304)
    archivopdf = ExtFileField(label=u'Seleccione Archivo Pdf', required=False,
                              help_text=u'Tamaño Maximo permitido 4Mb, en formato  pdf', ext_whitelist=(".pdf",),
                              max_upload_size=4194304)

    def editar(self):
        deshabilitar_campo(self, 'descripcion')
        deshabilitar_campo(self, 'fecha')


class ProfesorReemplazoForm(forms.Form):
    solicita = ModelChoiceField(label=u'Solicitante',
                                queryset=Profesor.objects.filter(persona__usuario__is_active=True), required=False)
    reemplaza = ModelChoiceField(label=u'Reemplazo', queryset=Profesor.objects.filter(persona__usuario__is_active=True),
                                 required=False)
    desde = forms.DateField(label=u"Fecha Desde", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    hasta = forms.DateField(label=u"Fecha Hasta", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    motivo = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class IpPermitidaForm(forms.Form):
    ip = forms.CharField(label=u"Ip", max_length=20)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    habilitado = forms.BooleanField(label=u'Habilitado', required=False)
    valida_clase = forms.BooleanField(label=u'Valida Clases/Calificaciones', required=False)


class ExamenComplexivoForm(forms.Form):
    carrera = ModelChoiceField(label=u'Carrera', queryset=Carrera.objects.all(), required=False,
                               widget=forms.Select(attrs={'class': 'imp-50'}))

    # egresado = forms.BooleanField(initial=False, required=False, label=u'Es egresado?', widget=CheckboxInput(attrs={'formwidth': '25%'}))
    # telefono = forms.CharField(label=u"Telefono Movil", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    # telefono_conv = forms.CharField(label=u"Telefono Fijo", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    # email = forms.CharField(label=u"Correo Electronico", max_length=240, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    # ultimosemestre = forms.DateField(label=u"Fecha de ultimo semestre aprobado", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    # solicituddecano = ExtFileField(label=u'Petición (Escaneado y Firmado)', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)

    def mis_carrera(self, persona):
        carreras = persona.mis_carreras_inscripcion()
        if not carreras.exists():
            carreras = Carrera.objects.all()
        self.fields['carrera'].queryset = carreras

    def adicionar(self, inscripcion):
        # self.fields['carrera'].value = carrera.id
        carreras = inscripcion.persona.mis_carreras_inscripcion()
        if not carreras.exists():
            carreras = Carrera.objects.all()
        self.fields['carrera'].queryset = carreras
        self.fields['carrera'].initial = inscripcion.carrera.id
        self.fields['carrera'].widget.attrs['value'] = inscripcion.carrera.id

    def editar(self):
        deshabilitar_campo(self, 'carrera')


class ExamenComplexivoAyudantiaForm(forms.Form):
    carrera = ModelChoiceField(label=u'Carrera', queryset=Carrera.objects.all(), required=False,
                               widget=forms.Select(attrs={'class': 'imp-50'}))
    asignatura = ModelChoiceField(label=u'Asignatura', queryset=Asignatura.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-50'}))
    egresado = forms.BooleanField(initial=False, required=False, label=u'Es egresado?',
                                  widget=CheckboxInput(attrs={'formwidth': '25%'}))
    telefono = forms.CharField(label=u"Telefono Movil", max_length=100, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-25'}))
    telefono_conv = forms.CharField(label=u"Telefono Fijo", max_length=100, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-25'}))
    email = forms.CharField(label=u"Correo Electronico", max_length=240, required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-50'}))
    ultimosemestre = forms.DateField(label=u"Fecha de ultimo semestre aprobado", input_formats=['%d-%m-%Y'],
                                     widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                     required=False)
    solicituddecano = ExtFileField(label=u'Petición (Escaneado y Firmado)', required=False,
                                   help_text=u'Tamaño Maximo permitido 4Mb, en formato  pdf', ext_whitelist=(".pdf",),
                                   max_upload_size=4194304)

    def mis_carrera(self, persona):
        carreras = persona.mis_carreras_inscripcion()
        if not carreras.exists():
            carreras = Carrera.objects.all()
        self.fields['carrera'].queryset = carreras

    def mis_asignaturasaprobadas(self, inscripcion):
        asignaturas = RecordAcademico.objects.values('asignatura_id').filter(inscripcion=inscripcion,
                                                                             aprobada=True).order_by('asignatura')
        if asignaturas.exists():
            asignaturas = Asignatura.objects.filter(pk__in=asignaturas)
        else:
            asignaturas = Asignatura.objects.filter(pk=0)
        self.fields['asignatura'].queryset = asignaturas

    def editar(self):
        deshabilitar_campo(self, 'carrera')


class ComplexivoPeriodoForm(forms.Form):
    nombre = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    fecha_inicio = forms.DateField(label=u"Registrar desde", input_formats=['%d-%m-%Y'],
                                   widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                   required=False)
    fecha_fin = forms.DateField(label=u"Registrar hasta", input_formats=['%d-%m-%Y'],
                                widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                required=False)
    cupo = forms.IntegerField(label=u'Cupo', initial=0, required=False,
                              widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    tipocomplexivo = ModelChoiceField(label=u'Tipo', queryset=TipoComplexivo.objects.all(), required=False,
                                      widget=forms.Select(attrs={'class': 'imp-50'}))
    modulo = forms.ChoiceField(choices=MODULO_COMPLEXIVO, required=False, label=u'Modulo',
                               widget=forms.Select(attrs={'class': 'imp-50'}))
    coordinacion = ModelChoiceField(label=u'Coordinación', queryset=Coordinacion.objects.filter(excluir=False),
                                    required=False, widget=forms.Select(attrs={'class': 'imp-100'}))
    carreras = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.filter(status=True),
                                              required=False)
    modalidades = forms.ModelMultipleChoiceField(label=u'Modalidades', queryset=Modalidad.objects.all(), required=False)
    nivel = ModelChoiceField(label=u'Desde nivel', queryset=NivelMalla.objects.filter(status=True), required=False,
                             widget=forms.Select(attrs={'class': 'imp-100'}))
    principal = forms.BooleanField(label=u'Mostrar en página principal?', required=False)
    # ayudantia = forms.BooleanField(initial=False, required=False, label=u'Ayudantia?', widget=CheckboxInput(attrs={'formwidth': '25%'}))


class ApNeExamenComplexivoForm(forms.Form):
    estadosolicitud = forms.ChoiceField(choices=ESTADO_SOLICITUD, required=False, label=u'Estado',
                                        widget=forms.Select(attrs={'disabled': 'True'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    informe = ExtFileField(label=u'Informe', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato  pdf',
                           ext_whitelist=(".pdf",), max_upload_size=4194304)

    def aprobar_rechazar(self):
        self.fields['estadosolicitud'].choices = ((2, u"APROBADA"), (3, u"NEGADA"),)


class ImportarPreinscritoPPForm(forms.Form):
    periodop = forms.ModelChoiceField(label=u"Periodo",
                                            queryset=PreInscripcionPracticasPP.objects.filter(status=True), required=False,
                                            widget=forms.Select({'col': '12', 'class': 'select2'}))
    periodoevidencia = forms.ModelChoiceField(label=u"Periodo evidencia",
                                            queryset=CabPeriodoEvidenciaPPP.objects.filter(status=True), required=False,
                                            widget=forms.Select({'col': '12', 'class': 'select2'}))
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 6Mb, en formato xls', ext_whitelist=(".xls", "xlsx"),
                           max_upload_size=6291456)

class PracticasPreprofesionalesInscripcionForm(forms.Form):
    inscripcion = forms.IntegerField(initial=0, required=False, label=u'Alumno/Carrera',
                                     widget=forms.TextInput(attrs={'select2search': 'true', 'col': '12'}))

    nivelmalla = forms.ModelChoiceField(label=u"Nivel Prácticas", queryset=NivelMalla.objects.filter(status=True).order_by('orden'), required=False, widget=forms.Select(attrs={'width': '50%', 'col': '6'}))
    numerohora = forms.IntegerField(label=u'Número Hora', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0', 'formwidth': '50%', 'col': '6'}))
    # tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PRACTICA_PP, widget=forms.Select(attrs={'class': 'imp-25'}))
    # rotacion = forms.ChoiceField(label=u'Rotación', required=False, initial=0,choices=ESTADO_ROTACION, widget=forms.Select(attrs={'class': 'imp-25'}))
    rotacion = forms.ModelChoiceField(label=u"Rotacion", queryset=RotacionesMalla.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'width': '50%', 'col': '6'}))
    tiposolicitud = forms.ChoiceField(label=u'Tipo Solicitud', choices=TIPO_SOLICITUD_PRACTICAPRO, widget=forms.Select(attrs={'class': 'imp-25', 'style': 'width: 100%!important;', 'col': '6'}), required=False)
    estadopreinscripcion = forms.ChoiceField(label=u'Estado Pre Incripción', choices=ESTADO_PREINSCRIPCIONPPP, widget=forms.Select(attrs={'formwidth': '50%', 'col': '6'}), required=False)
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PRACTICA_PP, widget=forms.Select(attrs={'formwidth': '50%', 'col': '6'}), required=False)
    itinerario = forms.ModelChoiceField(label=u"Itinerario", queryset=ItinerariosMalla.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'col': '12'}))
    fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'formwidth': '50%', 'col': '6'}), required=False)
    fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'formwidth': '50%', 'col': '6'}), required=False)
    periodoevidencia = forms.ModelChoiceField(label=u"Periodo de evidencias", queryset=CabPeriodoEvidenciaPPP.objects.none(), required=False, widget=forms.Select(attrs={'col': '12'}))
    horahomologacion = forms.IntegerField(label=u'Horas Homologación', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0', 'formwidth': '50%', 'col': '6' }))
    tutorempresa = forms.CharField(label=u"Tutor Empresa", max_length=250, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'col': '12'}))
    tutorunemi = forms.ModelChoiceField(label=u"Tutor UNEMI", queryset=Profesor.objects.none(), required=False, widget=forms.Select(attrs={'col': '12'}))
    supervisor = forms.IntegerField(initial=0, required=False, label=u'Supervisor UNEMI', widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '100%', 'col': '12'}))
    # convenio = forms.IntegerField(initial=0, label=u"Convenio de la empresa",widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '100%'}), required=False)
    convenio = forms.ModelChoiceField(label=u"Convenio de la empresa", queryset=ConvenioEmpresa.objects.none(), required=False, widget=forms.Select(attrs={'col': '12'}))
    # acuerdo = forms.IntegerField(initial=0, label=u"Acuerdos de la empresa",widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '100%'}), required=False)
    acuerdo = forms.ModelChoiceField(label=u"Acuerdos de la empresa", queryset=AcuerdoCompromiso.objects.none(), required=False, widget=forms.Select(attrs={'col': '12'}))
    direccionempresa = forms.CharField(label=u"Dirección de la empresa", max_length=250, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'readonly': 'true', 'col': '12'}))
    paispractica = forms.ModelChoiceField(label=u"País de práctica", queryset=Pais.objects.none(), required=False, widget=forms.Select(attrs={'col': '6'}))
    provinciapractica = forms.ModelChoiceField(label=u"Provincia de práctica", queryset=Provincia.objects.none(), required=False, widget=forms.Select(attrs={'col': '6'}))
    lugarpractica = forms.ModelChoiceField(label=u"Lugar de la práctica", queryset=Canton.objects.none(), required=False, widget=forms.Select(attrs={'col': '6'}))
    asignacionempresapractica = forms.ModelChoiceField(label=u"Asignación de empresa", queryset=AsignacionEmpresaPractica.objects.none(), required=False, widget=forms.Select(attrs={'col': '12'}))
    empresaempleadora = forms.ModelChoiceField(label=u"Empresa Empleadora", queryset=EmpresaEmpleadora.objects.none().order_by('nombre'), required=False, widget=forms.Select(attrs={'col': '12'}))
    # otraempresaempleadora = forms.CharField(label=u"Otra Empresa Empleadora", max_length=600, required=False, widget=forms.TextInput(attrs={'disabled': 'disabled','class': 'imp-50'}))
    otraempresaempleadora = forms.CharField(label=u"Otra Empresa Empleadora", max_length=600, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'col': '12'}))
    # institucion = forms.CharField(label=u'Institución', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    departamento = forms.ModelChoiceField(label=u"Departamento Empresa", queryset=PracticasDepartamento.objects.none(), required=False, widget=forms.Select(attrs={'col': '12'}))
    tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=False, label=u'Tipo Institución', widget=forms.Select(attrs={'col': '6'}))
    sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=False, label=u'Sector Económico', widget=forms.Select(attrs={'col': '6'}))
    observacion = forms.CharField(label=u'Observación', required=False, widget=forms.Textarea(attrs={'rows': '5', 'col': '12'}))
    archivo = ExtFileField(label=u'Subir solicitud pdf', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456, widget=forms.FileInput(attrs={'col': '12'}))
    culminada = forms.BooleanField(label=u'Prácticas Culminadas?', required=False, widget=CheckboxInput(attrs={'formwidth': '50%', 'col': '12'}))
    campo_especifico = forms.ModelChoiceField(label=u"Campo específico", queryset=SubAreaConocimientoTitulacion.objects.none(), required=False, widget=forms.Select(attrs={'col': '12'}))

    def editar(self, practicaspreprofesionalesinscripcion):
        del self.fields['estadopreinscripcion']
        deshabilitar_campo(self, 'inscripcion')
        deshabilitar_campo(self, 'campo_especifico')
        self.fields['rotacion'].queryset = RotacionesMalla.objects.filter(malla__carrera=practicaspreprofesionalesinscripcion.inscripcion.carrera)
        # self.fields['tutorunemi'].widget.attrs['descripcion'] = practicaspreprofesionalesinscripcion.tutorunemi.flexbox_repr() if practicaspreprofesionalesinscripcion.tutorunemi else "Sin Tutor"
        # self.fields['tutorunemi'].widget.attrs['value'] = practicaspreprofesionalesinscripcion.tutorunemi.id if practicaspreprofesionalesinscripcion.tutorunemi else ""
        self.fields['supervisor'].widget.attrs['descripcion'] = practicaspreprofesionalesinscripcion.supervisor.flexbox_repr() if practicaspreprofesionalesinscripcion.supervisor else "Sin Supervisor"
        self.fields['supervisor'].widget.attrs['value'] = practicaspreprofesionalesinscripcion.supervisor.id if practicaspreprofesionalesinscripcion.supervisor else ""
        self.fields['inscripcion'].widget.attrs['descripcion'] = practicaspreprofesionalesinscripcion.inscripcion.persona.nombre_completo()
        self.fields['inscripcion'].initial = practicaspreprofesionalesinscripcion.inscripcion.id
        if practicaspreprofesionalesinscripcion.departamento:
            self.fields['departamento'].queryset = PracticasDepartamento.objects.filter(id=practicaspreprofesionalesinscripcion.departamento_id)
            self.fields['departamento'].initial = practicaspreprofesionalesinscripcion.departamento_id
        if practicaspreprofesionalesinscripcion.empresaempleadora:
            self.fields['empresaempleadora'].queryset = EmpresaEmpleadora.objects.filter(id=practicaspreprofesionalesinscripcion.empresaempleadora_id)
            self.fields['empresaempleadora'].initial = practicaspreprofesionalesinscripcion.empresaempleadora_id
        if practicaspreprofesionalesinscripcion.asignacionempresapractica:
            self.fields['asignacionempresapractica'].queryset = AsignacionEmpresaPractica.objects.filter(id=practicaspreprofesionalesinscripcion.asignacionempresapractica_id)
            self.fields['asignacionempresapractica'].initial = practicaspreprofesionalesinscripcion.asignacionempresapractica_id
        else: self.fields['asignacionempresapractica'].queryset = AsignacionEmpresaPractica.objects.filter(status=True)
        if practicaspreprofesionalesinscripcion.lugarpractica:
            self.fields['paispractica'].queryset = Pais.objects.filter(status=True)
            self.fields['paispractica'].initial = practicaspreprofesionalesinscripcion.lugarpractica.provincia.pais_id
            self.fields['provinciapractica'].queryset = Provincia.objects.filter(pais=practicaspreprofesionalesinscripcion.lugarpractica.provincia.pais_id)
            self.fields['provinciapractica'].initial = practicaspreprofesionalesinscripcion.lugarpractica.provincia_id
            self.fields['lugarpractica'].queryset = Canton.objects.filter(provincia=practicaspreprofesionalesinscripcion.lugarpractica.provincia_id)
            self.fields['lugarpractica'].initial = practicaspreprofesionalesinscripcion.lugarpractica_id
        else: self.fields['paispractica'].queryset = Pais.objects.filter(status=True)

        # if practicaspreprofesionalesinscripcion.convenio:
        #     self.fields['convenio'].widget.attrs['descripcion'] = practicaspreprofesionalesinscripcion.convenio.flexbox_repr()
        #     self.fields['convenio'].widget.attrs['value'] = practicaspreprofesionalesinscripcion.convenio.id
        # if practicaspreprofesionalesinscripcion.acuerdo:
        #     self.fields['acuerdo'].widget.attrs['descripcion'] = practicaspreprofesionalesinscripcion.acuerdo.flexbox_repr()
        #     self.fields['acuerdo'].widget.attrs['value'] = practicaspreprofesionalesinscripcion.acuerdo.id
        # deshabilitar_campo(self, 'otraempresaempleadora')
        # deshabilitar_campo(self, 'empresaempleadora')

    def agg_faltantes(self, data):
        provinciapractica = data['provinciapractica'] if 'provinciapractica' in data and not data['provinciapractica'] == '' else 0
        tutorunemi = data['tutorunemi'] if 'tutorunemi' in data and not data['tutorunemi'] == '' else 0
        paispractica = data['paispractica'] if 'paispractica' in data and not data['paispractica'] == '' else 0
        lugarpractica = data['lugarpractica'] if 'lugarpractica' in data and not data['lugarpractica'] == '' else 0
        periodoevidencia = data['periodoevidencia'] if 'periodoevidencia' in data and not data['periodoevidencia'] == '' else 0
        empresaempleadora = data['empresaempleadora'] if 'empresaempleadora' in data and not data['empresaempleadora'] == '' else 0
        departamento = data['departamento'] if 'departamento' in data and not data['departamento'] == '' else 0
        convenio = data['convenio'] if 'convenio' in data and not data['convenio'] == '' else 0
        acuerdo = data['acuerdo'] if 'acuerdo' in data and not data['acuerdo'] == '' else 0
        asignacionempresapractica = data['asignacionempresapractica'] if 'asignacionempresapractica' in data and not data['asignacionempresapractica'] == '' else 0
        self.fields['provinciapractica'].queryset = Provincia.objects.filter(id=provinciapractica)
        self.fields['tutorunemi'].queryset = Profesor.objects.filter(id=tutorunemi)
        self.fields['paispractica'].queryset = Pais.objects.filter(id=paispractica)
        self.fields['periodoevidencia'].queryset = CabPeriodoEvidenciaPPP.objects.filter(id=periodoevidencia)
        self.fields['lugarpractica'].queryset = Canton.objects.filter(id=lugarpractica)
        self.fields['empresaempleadora'].queryset = EmpresaEmpleadora.objects.filter(id=empresaempleadora)
        self.fields['departamento'].queryset = PracticasDepartamento.objects.filter(id=departamento)
        self.fields['asignacionempresapractica'].queryset = AsignacionEmpresaPractica.objects.filter(id=asignacionempresapractica)
        self.fields['convenio'].queryset = ConvenioEmpresa.objects.filter(id=convenio)
        self.fields['acuerdo'].queryset = AcuerdoCompromiso.objects.filter(id=acuerdo)

    def desbloquear(self):
        habilitar_campo(self, 'inscripcion')

    def tiposolicitudcho(self):
        self.fields['tiposolicitud'].choices = ((1, u'NUEVA'), (2, u'EN PROCESO'), (3, u'HOMOLOGACION'))

    def cargaritinerario(self, malla=None, nivel=None):
        if malla and nivel:
            #itinerarios = ItinerariosMalla.objects.filter(malla=malla, nivel__id__lte=nivel.id, status=True).distinct()
            itinerarios = ItinerariosMalla.objects.filter(malla=malla, status=True).distinct()
            if itinerarios:
                self.fields['itinerario'].queryset = itinerarios
            else:
                del self.fields['itinerario']
        else:
            self.fields['itinerario'].queryset = ItinerariosMalla.objects.filter(nivel=None)

    def cargartipopractica(self):
        self.fields['tipo'].choices = ((1, u'PRÁCTICAS'), (2, u'PASANTÍAS'), (4, u'PRÁCTICAS FACS'), (6, u'AYUDANTES DE INVESTIGACIÓN'))
        del self.fields['campo_especifico']

    def vaciartutorunemi(self):
        del self.fields['campo_especifico']
        self.fields['tutorunemi'].queryset = Profesor.objects.filter(persona=None)

    def eliminarempresaempleadora(self):
        del self.fields['empresaempleadora']
        del self.fields['otraempresaempleadora']

    def tiene_itinerario(self, pre):
        if not pre.itinerariomalla:
            del self.fields['itinerario']

    def gestionar_prein_ind(self, pre):
        del self.fields['culminada']
        del self.fields['tutorempresa']
        del self.fields['tiposolicitud']
        del self.fields['rotacion']
        del self.fields['horahomologacion']

        self.fields['inscripcion'].widget.attrs['descripcion'] = pre.inscripcion.persona.nombre_completo()
        self.fields['inscripcion'].itial = pre.inscripcion.id
        deshabilitar_campo(self, 'inscripcion')

    def editgestionar_prein_ind(self, pre):
        del self.fields['culminada']
        del self.fields['tutorempresa']
        del self.fields['tiposolicitud']
        del self.fields['rotacion']
        del self.fields['horahomologacion']

        self.fields['inscripcion'].widget.attrs['descripcion'] = pre.inscripcion.persona.nombre_completo()
        self.fields['inscripcion'].initial = pre.inscripcion.id
        self.fields['supervisor'].widget.attrs['descripcion'] = pre.supervisor.flexbox_repr()() if pre.supervisor else "Sin Supervisor"
        self.fields['supervisor'].widget.attrs['value'] = pre.supervisor.id if pre.supervisor else ""
        deshabilitar_campo(self, 'inscripcion')

    def cargar_estado(self):
        lista = []
        for est in ESTADO_PREINSCRIPCIONPPP:
            if not est[0] == 1:
                lista.append([est[0], est[1]])
        self.fields['estadopreinscripcion'].choices = lista

    def cargar_tipo(self):
        lista = []
        for tip in TIPO_PRACTICA_PP:
            if not tip[0] == 4:
                lista.append([tip[0], tip[1]])
        self.fields['tipo'].choices = lista


class PracticasPreprofesionalesInscripcionMasivoEstudianteForm(FormModeloBase):
    # inscripcion = forms.IntegerField(initial=0, required=False, label=u'Alumno/Carrera',
    #                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    # nivelmalla = forms.ModelChoiceField(label=u"Nivel Prácticas", queryset=NivelMalla.objects.filter(status=True).order_by('orden'), required=False, widget=forms.Select(attrs={'col': '12'}))
    # tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PRACTICA_PP, widget=forms.Select(attrs={'class': 'imp-25'}))
    # rotacion = forms.ChoiceField(label=u'Rotación', required=False, initial=0,choices=ESTADO_ROTACION, widget=forms.Select(attrs={'class': 'imp-25'}))
    # rotacion = forms.ModelChoiceField(label=u"Rotacion", queryset=RotacionesMalla.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    # tiposolicitud = forms.ChoiceField(label=u'Tipo Solicitud', choices=TIPO_SOLICITUD_PRACTICAPRO, widget=forms.Select(attrs={'class': 'imp-25',  'col': '6'}), required=False)
    estadopreinscripcion = forms.ChoiceField(label=u'Estado PreInscripción', choices=ESTADO_PREINSCRIPCIONPPP, widget=forms.Select(attrs={ 'col': '6'}), required=False)
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PRACTICA_PP, widget=forms.Select(attrs={ 'col': '6'}), required=False)
    itinerario = forms.ModelChoiceField(label=u"Itinerario", queryset=ItinerariosMalla.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    inscripciones = forms.ModelChoiceField(label=u"Alumnos", queryset=DetallePreInscripcionPracticasPP.objects.filter(status=True), required=False, empty_label=None, widget=forms.Select(attrs={'multiple': 'multiple'}))
    fechadesde = forms.DateField(label=u"Fecha desde", widget=DateTimeInput(attrs={'class': 'selectorfecha',  'col': '6'}), required=False)
    fechahasta = forms.DateField(label=u"Fecha hasta", widget=DateTimeInput(attrs={'class': 'selectorfecha',  'col': '6'}), required=False)
    numerohora = forms.IntegerField(label=u'Número Hora', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0',  'col': '6'}))
    # horahomologacion = forms.IntegerField(label=u'Horas Homologación', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0',  'col': '6'}))
    # tutorempresa = forms.CharField(label=u"Tutor Empresa", max_length=250, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    tutorunemi = forms.ModelChoiceField(label=u"Tutor UNEMI", queryset=Profesor.objects.filter(status=True), required=False, widget=forms.Select())
    supervisor = forms.IntegerField(initial=0, required=False, label=u'Supervisor UNEMI', widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '100%'}))
    # convenio = forms.IntegerField(initial=0, label=u"Convenio de la empresa",widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '100%'}), required=False)
    convenio = forms.ModelChoiceField(label=u"Convenio de la empresa", queryset=ConvenioEmpresa.objects.filter(status=True), required=False, widget=forms.Select())
    # acuerdo = forms.IntegerField(initial=0, label=u"Acuerdos de la empresa",widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '100%'}), required=False)
    acuerdo = forms.ModelChoiceField(label=u"Acuerdos de la empresa", queryset=AcuerdoCompromiso.objects.filter(status=True, anulado=False), required=False, widget=forms.Select())
    direccionempresa = forms.CharField(label=u"Dirección de la empresa", max_length=250, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'readonly': 'true'}))
    paispractica = forms.ModelChoiceField(label=u"País de práctica", queryset=Pais.objects.all(), required=False, widget=forms.Select())
    provinciapractica = forms.ModelChoiceField(label=u"Provincia de práctica", queryset=Provincia.objects.all(), required=False, widget=forms.Select())
    lugarpractica = forms.ModelChoiceField(label=u"Lugar de la práctica", queryset=Canton.objects.filter(status=True, provincia__pais__nombre__icontains='ECUADOR'), required=False, widget=forms.Select())
    asignacionempresapractica = forms.ModelChoiceField(label=u"Asignación de empresa", queryset=AsignacionEmpresaPractica.objects.filter(status=True), required=False, widget=forms.Select())
    empresaempleadora = forms.ModelChoiceField(label=u"Empresa Empleadora", queryset=EmpresaEmpleadora.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    # otraempresaempleadora = forms.CharField(label=u"Otra Empresa Empleadora", max_length=600, required=False, widget=forms.TextInput(attrs={'disabled': 'disabled','class': 'imp-50'}))
    otraempresaempleadora = forms.CharField(label=u"Otra Empresa Empleadora", max_length=600, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    # institucion = forms.CharField(label=u'Institución', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    departamento = forms.ModelChoiceField(label=u"Departamento Empresa", queryset=PracticasDepartamento.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=False, label=u'Tipo Institución', widget=forms.Select())
    sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=False, label=u'Sector Económico', widget=forms.Select())
    observacion = forms.CharField(label=u'Observación', required=False, widget=forms.Textarea(attrs={'rows': '5'}))
    periodoevidencia = forms.ModelChoiceField(label=u"Periodo de evidencias", queryset=CabPeriodoEvidenciaPPP.objects.all(), required=False, widget=forms.Select())
    archivo = ExtFileField(label=u'Subir solicitud pdf', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456)
    campo_especifico = forms.ModelChoiceField(label=u"Campo específico", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=2).order_by('nombre'), required=False, widget=forms.Select())

    def tiposolicitudcho(self):
        self.fields['tiposolicitud'].choices = ((1, u'NUEVA'), (2, u'EN PROCESO'), (3, u'HOMOLOGACION'))

    def cargaritinerario(self, malla=None, nivel=None):
        if malla and nivel:
            #itinerarios = ItinerariosMalla.objects.filter(malla=malla, nivel__id__lte=nivel.id, status=True).distinct()
            itinerarios = ItinerariosMalla.objects.filter(malla=malla, status=True).distinct()
            if itinerarios:
                self.fields['itinerario'].queryset = itinerarios
            else:
                del self.fields['itinerario']
        else:
            self.fields['itinerario'].queryset = ItinerariosMalla.objects.filter(nivel=None)

    def cargartipopractica(self):
        self.fields['tipo'].choices = ((1, u'PRÁCTICAS'), (2, u'PASANTÍAS'), (4, u'PRÁCTICAS FACS'), (6, u'AYUDANTES DE INVESTIGACIÓN'))
        del self.fields['campo_especifico']

    def vaciartutorunemi(self):
        del self.fields['campo_especifico']
        self.fields['tutorunemi'].queryset = Profesor.objects.filter(persona=None)

    def eliminarempresaempleadora(self):
        del self.fields['empresaempleadora']
        del self.fields['otraempresaempleadora']

    def cargar_estado(self):
        lista = []
        for est in ESTADO_PREINSCRIPCIONPPP:
            if not est[0] == 1:
                lista.append([est[0], est[1]])
        self.fields['estadopreinscripcion'].choices = lista

    def cargar_tipo(self):
        lista = []
        for tip in TIPO_PRACTICA_PP:
            if not tip[0] == 4:
                lista.append([tip[0], tip[1]])
        self.fields['tipo'].choices = lista


class PracticasPreprofesionalesInscripcionMasivoForm(forms.Form):
    estadopreinscripcion = forms.ChoiceField(label=u'Estado PreInscripción', choices=ESTADO_PREINSCRIPCIONPPP,
                                             widget=forms.Select(attrs={'formwidth': '50%'}), required=False)
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PRACTICA_PP, widget=forms.Select(attrs={'formwidth': '50%'}),
                             required=False)
    fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)
    fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)
    empresaempleadora = forms.ModelChoiceField(label=u"Empresa Empleadora",
                                               queryset=EmpresaEmpleadora.objects.filter(status=True).order_by(
                                                   'nombre'), required=False, widget=forms.Select())
    # otraempresaempleadora = forms.CharField(label=u"Otra Empresa Empleadora", max_length=600, required=False, widget=forms.TextInput(attrs={'disabled': 'disabled','class': 'imp-50'}))
    otraempresaempleadora = forms.CharField(label=u"Otra Empresa Empleadora", max_length=600, required=False,
                                            widget=forms.TextInput(attrs={'class': 'imp-100'}))
    # institucion = forms.CharField(label=u'Institución', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=False, label=u'Tipo Institución',
                                        widget=forms.Select())
    sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=False, label=u'Sector Económico',
                                        widget=forms.Select())
    periodoevidencia = forms.ModelChoiceField(label=u"Periodo de evidencias",
                                              queryset=PeriodoEvidenciaPracticaProfesionales.objects.filter(
                                                  status=True), required=False, widget=forms.Select())


class PracticasPreprofesionalesInscripcionMasivoSaludForm(forms.Form):
        estadopreinscripcion = forms.ChoiceField(label=u'Estado PreInscripción', choices=ESTADO_PREINSCRIPCIONPPP,
                                                 widget=forms.Select(attrs={'formwidth': '50%'}), required=False)
        tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PRACTICA_PP, widget=forms.Select(attrs={'formwidth': '50%'}),
                                 required=False)
        fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'],
                                     widget=DateTimeInput(format='%d-%m-%Y',
                                                          attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                     required=False)
        fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'],
                                     widget=DateTimeInput(format='%d-%m-%Y',
                                                          attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                     required=False)
        empresaempleadora = forms.ModelChoiceField(label=u"Plaza de Internado",
                                                   queryset=EmpresaEmpleadora.objects.filter(status=True).order_by(
                                                       'nombre').distinct('nombre'), required=False, widget=forms.Select())
        carreras = forms.ModelChoiceField(label=u"Carreras", queryset=Carrera.objects.filter(status=True), required=False, empty_label=None, widget=forms.Select())
        itinerario = forms.ModelChoiceField(label=u"Itinerario", queryset=ItinerariosMalla.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
        inscripcion = forms.ModelChoiceField(label=u"Alumnos", queryset=Inscripcion.objects.filter(status=True)[:10], required=False, empty_label=None, widget=forms.Select(attrs={'multiple': 'multiple'}))
        # otraempresaempleadora = forms.CharField(label=u"Otra Empresa Empleadora", max_length=600, required=False, widget=forms.TextInput(attrs={'disabled': 'disabled','class': 'imp-50'}))
        otraempresaempleadora = forms.CharField(label=u"Otra Empresa Empleadora", max_length=600, required=False,
                                                widget=forms.TextInput(attrs={'class': 'imp-100'}))
        # institucion = forms.CharField(label=u'Institución', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
        tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=False, label=u'Tipo Institución',
                                            widget=forms.Select())
        sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=False, label=u'Sector Económico',
                                            widget=forms.Select())
        periodoevidencia = forms.ModelChoiceField(label=u"Periodo de evidencias",
                                                  queryset=PeriodoEvidenciaPracticaProfesionales.objects.filter(
                                                      status=True), required=False, widget=forms.Select())

        def cargar_data(self, pre):
            carreras = pre.carreras().values_list('id', flat=True)
            self.fields['carreras'].queryset = Carrera.objects.filter(status=True, id__in=carreras)
            self.fields['inscripcion'].queryset = None
            # inscripciones = pre.detallepreinscripcionpracticaspp_set.filter(status=True).values_list('inscripcion_id', flat=True)
            # self.fields['inscripcion'].queryset = Inscripcion.objects.filter(status=True, id__in=inscripciones)


class CambioCarreraPracticaForm(forms.Form):
    alumno = forms.CharField(label=u'Alumno', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Datos de la Práctica'}), required=False)
    empresa = forms.CharField(label=u'Institución', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly'}), required=False)
    fechainicio = forms.DateField(label=u"Fecha Desde", required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%', 'readonly': 'readonly'}))
    fechahasta = forms.DateField(label=u"Fecha Hasta", required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%', 'readonly': 'readonly'}))
    horas = forms.IntegerField(label=u'Número Horas', required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0', 'formwidth': '33%', 'readonly': 'readonly'}))
    carreraactual = forms.CharField(label=u'Carrera', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Carrera / Itinerario Actual'}), required=False)
    itinerarioactual = forms.CharField(label=u'Itinerario', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly'}), required=False)
    carreradestino = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Carrera / Itinerario Destino'}))
    itinerariodestino = forms.ModelChoiceField(label=u"Itinerario", queryset=ItinerariosMalla.objects.all(), required=False, widget=forms.Select())

    def cargar_otra_carrera(self, practica):
        carreras = Carrera.objects.filter(inscripcion__persona=practica.inscripcion.persona,
                                          inscripcion__status=True,
                                          inscripcion__perfilusuario__status=True,
                                          inscripcion__perfilusuario__visible=True,
                                          coordinacion__id__in=[1, 2, 3, 4, 5]).exclude(pk=practica.inscripcion.carrera.id)

        self.fields['carreradestino'].queryset = carreras


class CambioCarreraPracticaConActividadForm(forms.Form):
    alumno = forms.CharField(label=u'Alumno', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Datos de la Práctica'}), required=False)
    empresa = forms.CharField(label=u'Institución', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly'}), required=False)
    fechainicio = forms.DateField(label=u"Fecha Desde", required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%', 'readonly': 'readonly'}))
    fechahasta = forms.DateField(label=u"Fecha Hasta", required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%', 'readonly': 'readonly'}))
    horas = forms.IntegerField(label=u'Número Horas', required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0', 'formwidth': '33%', 'readonly': 'readonly'}))
    carreraactual = forms.CharField(label=u'Carrera', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Carrera / Itinerario Actual'}), required=False)
    itinerarioactual = forms.CharField(label=u'Itinerario', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly'}), required=False)

    activiades_cargadas = forms.CharField(label=u'Actividad', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Actividad Extracurricular:'}), required=False)

    # activiades_cargadas = forms.ModelChoiceField(label=u"Actividades", queryset=InscripcionActividadConvalidacionPPV.objects.all(), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Actividades Extracurriculares'}))
    carreradestino = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Carrera / Itinerario Destino'}))
    itinerariodestino = forms.ModelChoiceField(label=u"Itinerario", queryset=ItinerariosMalla.objects.all(), required=False, widget=forms.Select())

    def cargar_otra_carrera(self, practica):
        carreras = Carrera.objects.filter(inscripcion__persona=practica.inscripcion.persona,
                                          inscripcion__status=True,
                                          inscripcion__perfilusuario__status=True,
                                          inscripcion__perfilusuario__visible=True,
                                          coordinacion__id__in=[1, 2, 3, 4, 5]).exclude(pk=practica.inscripcion.carrera.id)
        self.fields['carreradestino'].queryset = carreras

    def cargar_actividades(self, participantes):
        activiades = InscripcionActividadConvalidacionPPV.objects.filter(inscripcion__persona=participantes.inscripcion.persona, actividad__tipoactividad=1, status=True)
        self.fields['activiades_cargadas'].queryset = activiades


class RechazarAsignacionPracticaFrom(forms.Form):
    observacion = forms.CharField(label=u'Observación', required=False, widget=forms.Textarea(attrs={'rows': '5'}))


class PracticasPreprofesionalesInscripcionSupervisorForm(forms.Form):
    inscripcion = forms.IntegerField(initial=0, required=False, label=u'Alumno/Carrera',
                                     widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PRACTICA_PP, widget=forms.Select(attrs={'class': 'imp-25'}))
    itinerario = forms.ModelChoiceField(label=u"Itinerario",
                                        queryset=ItinerariosMalla.objects.filter(status=True).order_by('nombre'),
                                        required=False, widget=forms.Select())
    fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                 required=False)
    fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                 required=False)
    numerohora = forms.IntegerField(label=u'Número Hora', initial=0, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0'}))
    tutorempresa = forms.CharField(label=u"Tutor Empresa", max_length=250, required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-50'}))
    empresaempleadora = forms.ModelChoiceField(label=u"Empresa Empleadora",
                                               queryset=EmpresaEmpleadora.objects.filter(status=True).order_by(
                                                   'nombre'), required=False, widget=forms.Select())
    otraempresa = forms.BooleanField(label=u'Otra empresa?', required=False)
    otraempresaempleadora = forms.CharField(label=u"Otra Empresa Empleadora", max_length=600, required=False,
                                            widget=forms.TextInput(attrs={'class': 'imp-50'}))
    departamento = forms.ModelChoiceField(label=u"Departamento Empresa",
                                          queryset=PracticasDepartamento.objects.filter(status=True).order_by('nombre'),
                                          required=False, widget=forms.Select())

    def editar(self, practicaspreprofesionalesinscripcion):
        deshabilitar_campo(self, 'inscripcion')
        self.fields['inscripcion'].widget.attrs[
            'descripcion'] = practicaspreprofesionalesinscripcion.inscripcion.persona.nombre_completo()
        self.fields['inscripcion'].initial = practicaspreprofesionalesinscripcion.inscripcion.id

    def cargaritinerario(self, malla=None, nivel=None):
        if malla and nivel:
            itinerarios = ItinerariosMalla.objects.filter(malla=malla, nivel__id__lte=nivel.id, status=True).distinct()
            if itinerarios:
                self.fields['itinerario'].queryset = itinerarios
            else:
                del self.fields['itinerario']
        else:
            self.fields['itinerario'].queryset = ItinerariosMalla.objects.filter(nivel=None)


class PracticasPreprofesionalesInscripcionSolicitarForm(forms.Form):
    itinerario = forms.ModelChoiceField(label=u"Itinerario",
                                        queryset=ItinerariosMalla.objects.filter(status=True).order_by('nombre'),
                                        required=True, widget=forms.Select())
    tipotrabajo = forms.ChoiceField(choices=TIPO_DOCUMENTO_HOMOLOGACION, required=True, label=u'Tipo Contrato',
                                    widget=forms.Select(attrs={'formwidth': '50%'}))
    # fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'],
    #                              widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}),
    #                              required=False)
    # vigente = forms.BooleanField(label=u'En curso?', required=False)
    # fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'],
    #                              widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}),
    #                              required=False)
    numerohora = forms.IntegerField(label=u'Número Hora', initial=0, required=True,
                                    widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0', 'formwidth': '33%'}))
    # tutorempresa = forms.CharField(label=u"Tutor Empresa", max_length=250, required=False,
    #                                widget=forms.TextInput(attrs={'class': 'imp-50', 'formwidth': '100%'}))
    # tutorunemi = forms.IntegerField(initial=0, required=False, label=u'Tutor UNEMI', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # empresaempleadora = forms.ModelChoiceField(label=u"Institución",
    #                                            queryset=EmpresaEmpleadora.objects.filter(convenio=True,
    #                                                                                      status=True).order_by(
    #                                                'nombre'), required=False, widget=forms.Select())
    # otraempresa = forms.BooleanField(label=u'Otra empresa?', required=False)
    otraempresaempleadora = forms.CharField(label=u"Empresa Empleadora", max_length=1000, required=True,
                                            widget=forms.TextInput(attrs={'formwidth': '100%'}))
    departamento = forms.ModelChoiceField(label=u"Departamento Empresa",
                                          queryset=PracticasDepartamento.objects.filter(status=True).order_by('nombre'),
                                          required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=True, label=u'Tipo Institución',
                                        widget=forms.Select(attrs={'formwidth': '50%'}))
    sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=True, label=u'Sector Económico',
                                        widget=forms.Select(attrs={'formwidth': '50%'}))

    # configuracionevidencia = forms.ModelChoiceField(label=u"Configuración de evidencia",
    #                                     queryset=ConfiguracionEvidenciaHomologacionPractica.objects.filter(status=True).order_by('nombre'),
    #                                     required=False, widget=forms.Select())
    # archivo = ExtFileField(label=u'Subir Archivo Pdf', required=True,
    #                        help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",),
    #                        max_upload_size=6291456)

    def ver_proceso(self):
        deshabilitar_campo(self, 'itinerario')
        deshabilitar_campo(self, 'tipotrabajo')
        deshabilitar_campo(self, 'numerohora')
        deshabilitar_campo(self, 'otraempresaempleadora')
        deshabilitar_campo(self, 'departamento')
        deshabilitar_campo(self, 'tipoinstitucion')
        deshabilitar_campo(self, 'sectoreconomico')

    def bloquear(self):
        deshabilitar_campo(self, 'tutorempresa')

    def bloquear_oferta(self):
        deshabilitar_campo(self, 'fechadesde')
        deshabilitar_campo(self, 'fechahasta')
        deshabilitar_campo(self, 'empresaempleadora')
        deshabilitar_campo(self, 'departamento')
        deshabilitar_campo(self, 'tipoinstitucion')
        deshabilitar_campo(self, 'sectoreconomico')
        deshabilitar_campo(self, 'tipopractica')
        deshabilitar_campo(self, 'numerohora')
        deshabilitar_campo(self, 'otraempresa')
        deshabilitar_campo(self, 'otraempresaempleadora')

    def cargar_itinerario(self, malla, nivel):
        itinerario = ItinerariosMalla.objects.filter(malla=malla, nivel__id__lte=nivel.id, status=True).order_by('nivel__orden')
        if itinerario.exists():
            self.fields['itinerario'].queryset = itinerario
        else:
            # del self.fields['itinerario']
            self.fields['itinerario'].queryset = itinerario

    def cargar_itinerariooferta(self, itinerarios, malla, nivel):
        itinerarios = ItinerariosMalla.objects.filter(pk__in=itinerarios, malla=malla, nivel__id__lte=nivel.id,
                                                      status=True)
        if itinerarios:
            self.fields['itinerario'].queryset = itinerarios
        else:
            del self.fields['itinerario']

    def cargar_tiposolicitud(self):
        self.fields['tiposolicitud'].choices = ((1, u'NUEVA'), (2, u'EN PROCESO'))

    def otraempresa_oferta(self, ofertapracticas):
        if ofertapracticas.otraempresa:
            self.fields['otraempresaempleadora'].initial = ofertapracticas.otraempresaempleadora
            del self.fields['empresaempleadora']
        else:
            self.fields['empresaempleadora'].initial = ofertapracticas.empresa
            del self.fields['otraempresaempleadora']

    def cargar_tipopractica(self, aperturasolicitudpractica):
        if aperturasolicitudpractica:
            self.fields['tipopractica'].choices = [(detalleapertura.tipo, detalleapertura.get_tipo_display()) for
                                                   detalleapertura in
                                                   aperturasolicitudpractica.detalletiposolicitud().distinct(
                                                       'tipo').order_by('tipo')]
        else:
            self.fields['tipopractica'].choices = []

    def cargar_configuracionevidencia(self, carrera):
        configuracionevidencia = ConfiguracionEvidenciaHomologacionPractica.objects.filter(carrera=carrera, status=True)
        if configuracionevidencia.exists():
            self.fields['configuracionevidencia'].queryset = configuracionevidencia
        else:
            del self.fields['configuracionevidencia']

    def eliminar_configuracionevidencia(self):
        del self.fields['configuracionevidencia']


class ReemplazarDocumentoHomologacionForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo solicitud', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png, docx',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png", ".docx"), max_upload_size=8194304,
                           widget=forms.FileInput(
                               attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg docx'}))


class SolicitudEmpresaPreinscripcionForm(forms.Form):
    dirigidoa = forms.CharField(label=u"Dirigido a: (Nombres y Apellidos)", max_length=1000, required=True,
                                widget=forms.TextInput(attrs={'formwidth': '100%', 'class': 'email-input'}))
    cargo = forms.CharField(label=u"Cargo", max_length=1000, required=True,
                            widget=forms.TextInput(attrs={'formwidth': '100%'}))
    empresa = forms.CharField(label=u"Nombre Empresa", max_length=1000, required=True,
                              widget=forms.TextInput(attrs={'formwidth': '100%'}))
    correo = forms.EmailField(label=u"Correo Empresa", max_length=1000, required=True,
                              widget=forms.TextInput(attrs={'formwidth': '100%', 'class': 'email-input'}))
    telefono = forms.CharField(label=u"Teléfono Empresa", max_length=100, required=True,
                               widget=forms.TextInput(attrs={'formwidth': '100%'}))
    direccion = forms.CharField(label=u'Dirección Empresa', widget=forms.Textarea(attrs={'rows': '3', 'class': 'normal-input'}), required=True)


class FinalizarHomologacionForm(forms.Form):
    ESTADO_SOLICITUD_HOMOLOGACION_APROBAR = (
        (1, u'APROBADO/FINALIZADO'),
        (2, u'RECHAZADO'),
    )
    # itinerario = forms.ModelChoiceField(label=u"Itinerario",
    #                                     queryset=ItinerariosMalla.objects.filter(status=True).order_by('nombre'),
    #                                     required=False, widget=forms.Select())
    estados = forms.ChoiceField(choices=ESTADO_SOLICITUD_HOMOLOGACION_APROBAR, required=True, label=u'Estado',
                                widget=forms.Select(attrs={'formwidth': '100%'}))
    tipotrabajo = forms.ChoiceField(choices=TIPO_DOCUMENTO_HOMOLOGACION, required=False, label=u'Tipo Contrato',
                                    widget=forms.Select(attrs={'formwidth': '100%'}))
    numerohora = forms.IntegerField(label=u'Número Hora', initial=0, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0', 'formwidth': '33%'}))
    horas_sugeridas = forms.IntegerField(label=u'Horas Sugeridas', initial=0, required=True, help_text=u'Sugeridas por Vinculación',
                                         widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0', 'formwidth': '33%'}))
    horas_homologadas = forms.IntegerField(label=u'Horas Homologadas', initial=0, required=True, help_text=u'Registradas por Director',
                                           widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0', 'formwidth': '33%'}))
    otraempresaempleadora = forms.CharField(label=u"Empresa Empleadora", max_length=1000, required=True,
                                            widget=forms.TextInput(attrs={'formwidth': '100%'}))
    departamento = forms.ModelChoiceField(label=u"Departamento Empresa",
                                          queryset=PracticasDepartamento.objects.filter(status=True).order_by('nombre'),
                                          required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=True, label=u'Tipo Institución',
                                        widget=forms.Select(attrs={'formwidth': '50%'}))
    sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=True, label=u'Sector Económico',
                                        widget=forms.Select(attrs={'formwidth': '100%'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)

    def cargar_itinerario(self, malla, nivel):
        itinerario = ItinerariosMalla.objects.filter(malla=malla, nivel__id__lte=nivel.id, status=True).order_by('nivel__orden')
        if itinerario.exists():
            self.fields['itinerario'].queryset = itinerario
        else:
            # del self.fields['itinerario']
            self.fields['itinerario'].queryset = itinerario

    def bloquear(self):
        # deshabilitar_campo(self, 'itinerario')
        deshabilitar_campo(self, 'tipotrabajo')
        deshabilitar_campo(self, 'numerohora')


class ValidarSolicitudEmpresaForm(forms.Form):
    ESTADO_SOLICITUD_EMPRESA = (
        (2, u'ACEPTADO'),
        (3, u'RECHAZADO'),
    )
    est_empresas = forms.ChoiceField(choices=ESTADO_SOLICITUD_EMPRESA, required=True, label=u'Estado',
                                     widget=forms.Select(attrs={'formwidth': '100%'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class OfertasPracticasForm(forms.Form):
    tipopractica = forms.ChoiceField(label=u'Tipo Práctica', required=False,
                                     choices=((1, u'PRÁCTICAS'), (2, u'PASANTÍAS'), (6, u'AYUDANTES DE INVESTIGACIÓN')),
                                     widget=forms.Select(attrs={'class': 'imp-25'}))
    empresa = forms.ModelChoiceField(label=u"Empresa",
                                     queryset=EmpresaEmpleadora.objects.filter(convenio=True, status=True).order_by(
                                         'nombre'), required=False, widget=forms.Select())
    otraempresa = forms.BooleanField(label=u'Otra empresa?', required=False)
    otraempresaempleadora = forms.CharField(label=u"Otra Empresa Empleadora", max_length=600, required=False,
                                            widget=forms.TextInput(attrs={'class': 'imp-50'}))
    departamento = forms.ModelChoiceField(label=u"Departamento Empresa",
                                          queryset=PracticasDepartamento.objects.filter(status=True).order_by('nombre'),
                                          required=False, widget=forms.Select())
    numerohora = forms.IntegerField(label=u'Número Hora', initial=0, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0'}))
    horario = forms.CharField(label=u'Horario', required=False, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carreras',
                                             queryset=Carrera.objects.filter(coordinacion__excluir=False),
                                             required=True)
    itinerarios = forms.ModelMultipleChoiceField(label=u'Itinerarios',
                                                 queryset=ItinerariosMalla.objects.filter(status=True), required=False)
    requisito = forms.CharField(label=u'Requisitos', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    habilidad = forms.CharField(label=u'Habilidades y Destrezas', widget=forms.Textarea(attrs={'rows': '3'}),
                                required=False)
    cupos = forms.IntegerField(initial=0, label=u'Cupos', widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '100%'}), required=True)
    tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=False, label=u'Tipo Institución',
                                        widget=forms.Select())
    sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=False, label=u'Sector Económico',
                                        widget=forms.Select())
    inicio = forms.DateField(label=u"Fecha de Inicio Oferta", initial=datetime.now().date(), required=False,
                             input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                              attrs={'class': 'selectorfecha',
                                                                                     'formwidth': '50%'}))
    fin = forms.DateField(label=u"Fecha de Fin Oferta", initial=datetime.now().date(), required=False,
                          input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    iniciopractica = forms.DateField(label=u"Fecha de Inicio Practica", initial=datetime.now().date(), required=False,
                                     input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                      attrs={'class': 'selectorfecha',
                                                                                             'formwidth': '50%'}))
    finpractica = forms.DateField(label=u"Fecha de Fin Practica", initial=datetime.now().date(), required=False,
                                  input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                   attrs={'class': 'selectorfecha',
                                                                                          'formwidth': '50%'}))

    def cargar_itinerario(self, carreras=None):
        if carreras:
            mallas = Malla.objects.filter(carrera__in=carreras)
            self.fields['itinerarios'].queryset = ItinerariosMalla.objects.filter(malla__in=mallas, status=True)
        else:
            self.fields['itinerarios'].queryset = ItinerariosMalla.objects.filter(nivel=None)


class ProgramaAnaliticoAsignaturaForm(forms.Form):
    integranteuno = forms.IntegerField(initial=0, required=False, label=u'ELABORADO POR', widget=forms.TextInput(attrs={'select2search': 'true'}))
    integrantedos = forms.IntegerField(initial=0, required=False, label=u'ELABORADO POR', widget=forms.TextInput(attrs={'select2search': 'true'}))
    integrantetres = forms.IntegerField(initial=0, required=False, label=u'ELABORADO POR', widget=forms.TextInput(attrs={'select2search': 'true'}))
    descripcion = forms.CharField(label=u'Sumilla', widget=forms.Textarea(attrs={'rows': '10'}), required=False)
    compromisos = forms.CharField(label=u'Compromiso', widget=forms.Textarea(attrs={'rows': '10'}), required=False)
    caracterinvestigacion = forms.CharField(label=u' Carácter de investigación', widget=forms.Textarea(attrs={'rows': '10'}), required=False)


class ProgramaAnaliticoAsignaturaPosgradoForm(forms.Form):
    integranteuno = forms.IntegerField(initial=0, required=False, label=u'ELABORADO POR(COORDINADOR DEL PROGRAMA)', widget=forms.TextInput(attrs={'select2search': 'true'}))
    integrantedos = forms.IntegerField(initial=0, required=False, label=u'ELABORADO POR(COORDINACION DE POSGRADO)', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # integrantetres = forms.IntegerField(initial=0, required=False, label=u'ELABORADO POR', widget=forms.TextInput(attrs={'select2search': 'true'}))
    descripcion = forms.CharField(label=u'Sumilla', widget=forms.Textarea(attrs={'rows': '10'}), required=False)
    # compromisos = forms.CharField(label=u'Compromiso', widget=forms.Textarea(attrs={'rows': '10'}), required=False)
    # caracterinvestigacion = forms.CharField(label=u'Lineas de investigación',  widget=forms.Textarea(attrs={'rows': '10'}), required=False)


class ProgramaAnaliticoAsignaturaArchivoForm(forms.Form):
    motivo = forms.CharField(label=u'Motivo/Justificativo', widget=forms.Textarea(attrs={'rows': '5'}), required=False)
    archivoconsejo = ExtFileField(label=u'Consejo directivo de facultad', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456)
    archivocomision = ExtFileField(label=u'Comisión académica', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456)
    archivopafirma = ExtFileField(label=u'Programa analítico firmado', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456)
    actaempresa = ExtFileField(label=u'Actas de reunión con las empresas', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456)
    actagraduado = ExtFileField(label=u'Actas de reunión con  los graduados', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456)
    actadocente = ExtFileField(label=u'Actas de reunión con los docentes', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456)
    informebenchmarking = ExtFileField(label=u'Informe de benchmarking', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456)
    informepractica = ExtFileField(label=u'Informe de prácticas pre-profesionales', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456)


class ProgramaAnaliticoPosgradoAsignaturaArchivoForm(forms.Form):
    motivo = forms.CharField(label=u'Motivo/Justificativo', widget=forms.Textarea(attrs={'rows': '5'}), required=False)
    # archivocomision = ExtFileField(label=u'Comisión académica del programa', required=False,  help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",),  max_upload_size=6291456)
    archivopafirma = ExtFileField(label=u'Programa analítico firmado', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456)
    informepractica = ExtFileField(label=u'Informe de prácticas pre-profesionales-vinculación (* opcional) ', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",), max_upload_size=6291456)


class ResultadoAprendizajeRaiForm(forms.Form):
    detallerai = forms.CharField(label=u'Resultado Rai', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class ResultadoAprendizajeRacForm(forms.Form):
    detallerac = forms.CharField(label=u'Resultado Rac', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class ObjetivoProgramaAnaliticoAsignaturaForm(forms.Form):
    objetivos = forms.CharField(label=u'Objetivo', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class MetodologiaProgramaAnaliticoAsignaturaForm(forms.Form):
    metodologia = forms.CharField(label=u'Metodología', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class BibliografiaProgramaAnaliticoAsignaturaForm(forms.Form):
    bibliografia = forms.IntegerField(initial=0, required=False, label=u'Libro',
                                      widget=forms.TextInput(attrs={'select2search': 'true'}))


class BibliografiaApaProgramaAnaliticoAsignaturaForm(forms.Form):
    bibliografia = forms.CharField(required=True, label=u'Bibliografía', widget=forms.Textarea(attrs={'rows': '3'}))


class ModalidadForm(forms.Form):
    nombre = forms.CharField(required=True, label=u'Nombre', widget=forms.TextInput(attrs={'maxlength': '400', 'formwidth': '100%', 'controlwidth': '100%'}))
    autoinscripcion = forms.BooleanField(initial=False, required=False, label=u'Auto Inscripcion', widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'formwidth': '100%', 'id': 'id_estado', 'name': 'autoinscripcion', 'data-switchery': 'true'}))


class ProgramasInvestigacionForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    fechainicio = forms.DateField(label=u"Fecha de Inicio", initial=datetime.now().date(), required=False,
                                  input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechaplaneado = forms.DateField(label=u"Fecha Planeada", initial=datetime.now().date(), required=False,
                                    input_formats=['%d-%m-%Y'],
                                    widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechareal = forms.DateField(label=u"Fecha Real", initial=datetime.now().date(), required=False,
                                input_formats=['%d-%m-%Y'],
                                widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    lineainvestigacion = forms.ModelChoiceField(label=u"Linea", queryset=LineaInvestigacion.objects.all(),
                                                required=False, widget=forms.Select())
    alcanceterritorial = forms.ModelChoiceField(label=u"Alcance Territorial", queryset=AlcanceTerritorial.objects.all(),
                                                required=False, widget=forms.Select())
    areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento",
                                              queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False,
                                              widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento",
                                                 queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False,
                                                 widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especifica conocimiento",
                                                           queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1),
                                                           required=False, widget=forms.Select())

    def adicionar(self):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)

    def editar(self, programas):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.areaconocimiento, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.subareaconocimiento, vigente=True)


class ProgramasVinculacionForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    tiempoejecucion = forms.CharField(label=u"Tiempo Ejecución", max_length=150, required=False,
                                      widget=forms.TextInput(attrs={'class': 'imp-50'}))
    fechainicio = forms.DateField(label=u"Fecha de Inicio", initial=datetime.now().date(), required=False,
                                  input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechaplaneado = forms.DateField(label=u"Fecha Planeada", initial=datetime.now().date(), required=False,
                                    input_formats=['%d-%m-%Y'],
                                    widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechareal = forms.DateField(label=u"Fecha Real", initial=datetime.now().date(), required=False,
                                input_formats=['%d-%m-%Y'],
                                widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    # lineainvestigacion = forms.ModelChoiceField(label=u"Linea", queryset=LineaInvestigacion.objects.all(), required=False, widget=forms.Select())
    # sublineainvestigacion = forms.ModelChoiceField(label=u"Sub Linea Investigación", queryset=SubLineaInvestigacion.objects.all(), required=False, widget=forms.Select())
    alcanceterritorial = forms.ModelChoiceField(label=u"Alcance Territorial", queryset=AlcanceTerritorial.objects.all(),
                                                required=False, widget=forms.Select())
    # areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento", queryset=AreaConocimientoTitulacion.objects.all(), required=False, widget=forms.Select())
    # subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento", queryset=SubAreaConocimientoTitulacion.objects.all(), required=False, widget=forms.Select())
    # subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especifica conocimiento", queryset=SubAreaEspecificaConocimientoTitulacion.objects.all(), required=False, widget=forms.Select())
    valorpresupuestointerno = forms.FloatField(label=u'Valor Presupuesto Interno', initial="0.00", required=False,
                                               widget=forms.TextInput(
                                                   attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    valorpresupuestoexterno = forms.FloatField(label=u'Valor Presupuesto Externo', initial="0.00", required=False,
                                               widget=forms.TextInput(
                                                   attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    soportedelprograma = forms.CharField(label=u"Soporte del Programa", required=False,
                                         widget=CKEditorUploadingWidget())
    elaboradopor = forms.CharField(label=u"Elaborado por", required=False, widget=CKEditorUploadingWidget())
    perfilbeneficiarios = forms.CharField(label=u"Perfil de los beneficiarios", required=False,
                                          widget=CKEditorUploadingWidget())
    numerobeneficiarios = forms.CharField(label=u"Número de beneficiarios", required=False,
                                          widget=CKEditorUploadingWidget())
    proyectosintegranprograma = forms.CharField(label=u"Proyectos que integran el programa", required=False,
                                                widget=CKEditorUploadingWidget())
    perfildocentesestudiantes = forms.CharField(label=u"Perfil de los docentes y estudiantes", required=False,
                                                widget=CKEditorUploadingWidget())
    planteamientoproblema = forms.CharField(label=u"Planteamiento del problema", required=False,
                                            widget=CKEditorUploadingWidget())
    justificacion = forms.CharField(label=u"Justificación", required=False, widget=CKEditorUploadingWidget())
    pertinencia = forms.CharField(label=u"Pertinencia", required=False, widget=CKEditorUploadingWidget())
    objetivogeneral = forms.CharField(label=u"Objetivo General", required=False, widget=CKEditorUploadingWidget())
    objetivoespecifico = forms.CharField(label=u"Objetivo Especifico", required=False, widget=CKEditorUploadingWidget())
    metodologia = forms.CharField(label=u"Metodología", required=False, widget=CKEditorUploadingWidget())
    recursos = forms.CharField(label=u"Recursos", required=False, widget=CKEditorUploadingWidget())
    cronograma = forms.CharField(label=u"Cronograma", required=False, widget=CKEditorUploadingWidget())
    seguimiento = forms.CharField(label=u"Seguimiento", required=False, widget=CKEditorUploadingWidget())
    evaluacion = forms.CharField(label=u"Evaluación", required=False, widget=CKEditorUploadingWidget())
    bibliografia = forms.CharField(label=u"Bibliografia", required=False, widget=CKEditorUploadingWidget())
    anexos = forms.CharField(label=u"Anexos", required=False, widget=CKEditorUploadingWidget())

    def adicionar(self):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)

    def editar(self, programas):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.areaconocimiento)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.subareaconocimiento)


class ProgramasVinculacionLineaForm(forms.Form):
    lineainvestigacion = forms.ModelChoiceField(label=u"Linea", queryset=LineaInvestigacion.objects.all(),
                                                required=False, widget=forms.Select())
    sublineainvestigacion = forms.ModelChoiceField(label=u"Sub Linea Investigación",
                                                   queryset=SubLineaInvestigacion.objects.all(), required=False,
                                                   widget=forms.Select())


class ProgramasVinculacionAreaForm(forms.Form):
    areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento",
                                              queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False,
                                              widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento",
                                                 queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False,
                                                 widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especifica conocimiento",
                                                           queryset=SubAreaEspecificaConocimientoTitulacion.objects.all(),
                                                           required=False, widget=forms.Select())


class ProyectoInvestigacionForm(forms.Form):
    #programa = forms.ModelChoiceField(label=u"Programas",
    #                                  queryset=ProgramasInvestigacion.objects.filter(status=True).order_by('nombre'),
    #                                  required=False, widget=forms.Select())
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    fechainicio = forms.DateField(label=u"Fecha de Inicio", initial=datetime.now().date(), required=False,
                                  input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    #fechaplaneado = forms.DateField(label=u"Fecha Planeada", initial=datetime.now().date(), required=False,
    #                                input_formats=['%d-%m-%Y'],
    #                                widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechareal = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(), required=False,
                                input_formats=['%d-%m-%Y'],
                                widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    # tipo = forms.ChoiceField(label=u'Tipo Proyecto', choices=TIPO_PROYECTO, widget=forms.Select(attrs={'class': 'imp-50'}))
    estado = forms.ChoiceField(label=u'Estado del Proyecto', choices=ESTADOS_DEL_PROYECTO,
                                           widget=forms.Select(attrs={'class': 'imp-50'}))
    #tipoproinstitucion = forms.ChoiceField(label=u'Tipo Proyecto Institución', choices=TIPO_PROYECTO_INSTITUCION,
    #                                       widget=forms.Select(attrs={'class': 'imp-50'}))
    alcanceterritorial = forms.ModelChoiceField(label=u"Alcance Territorial", queryset=AlcanceTerritorial.objects.all(),
                                                required=False, widget=forms.Select())
    areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento",
                                              queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False,
                                              widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento",
                                                 queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False,
                                                 widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especifica conocimiento",
                                                           queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1),
                                                           required=False, widget=forms.Select())
    lineainvestigacion = forms.ModelChoiceField(label=u"Linea de Investigacion",
                                                queryset=LineaInvestigacion.objects.filter(status=True).order_by(
                                                    'nombre'),
                                                required=False, widget=forms.Select())
    #sublineainvestigacion = forms.ModelChoiceField(label=u"Sublinea de Investigacion",
    #                                            queryset=SubLineaInvestigacion.objects.filter(status=True).order_by(
    #                                                'nombre'), required=False, widget=forms.Select())

    resolucionocs = forms.CharField(label=u"Resolución de aprobación de ocs ", required=False,
                                    widget=forms.TextInput(attrs={'formwidth': '100%'}))
    archivoresolucionocs = ExtFileField(label=u"Resolución de aprobación de ocs ", required=False,
                                        help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                                        ext_whitelist=(".pdf",),
                                        max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    resolucioncierreocs = forms.CharField(label=u"Resolución Cierre OCS", required=False,
                                    widget=forms.TextInput(attrs={'formwidth': '100%'}))
    archivoresolucioncierreocs = ExtFileField(label=u"Subir Resolución Cierre OCS", required=False,
                                        help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                                        ext_whitelist=(".pdf",),
                                        max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%'}))

    archivoactacompromiso = ExtFileField(label=u"Subir Acta de Compromiso", required=False,
                                        help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                                        ext_whitelist=(".pdf",),
                                        max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%'}))

    revisado = forms.BooleanField(label=u'Revisado', initial=True, required=False,
                                         widget=forms.CheckboxInput(attrs={'formwidth': '60%'}))

    def adicionar(self):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)

    def editar(self, programas):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.areaconocimiento, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.subareaconocimiento, vigente=True)


class AprobacionProyecto(forms.Form):
    area = forms.ChoiceField(label=u"Estado Del Proyecto", choices=ESTADOS_PROYECTO_VINCULACION_INVESTIGACION,required=False, widget=forms.Select(attrs={'formwidth': '60%'}))
    nombre = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    # horas = forms.IntegerField(label=u'Horas totales a realizar', initial=0, required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),max_upload_size=10485760)


class ProyectoVinculacion1Form(forms.Form):
    programa = forms.ModelChoiceField(label=u"Programas", queryset=ProgramasInvestigacion.objects.filter(status=True, estado=True).order_by('nombre'), required=False, widget=forms.Select())
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    lineainvestigacion = forms.ModelChoiceField(label=u"Línea", queryset=LineaInvestigacion.objects.filter(status=True, vigente=True), required=False, widget=forms.Select())
    sublineainvestigacion = forms.ModelChoiceField(label=u"Sub Línea Investigación", queryset=SubLineaInvestigacion.objects.all(), required=False, widget=forms.Select())
    tipoproinstitucion = forms.ChoiceField(label=u'Tipo Proyecto Institución', choices=TIPO_PROYECTO_INSTITUCION, required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    areaconocimiento = forms.ModelChoiceField(label=u"Área conocimiento", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False, widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub área conocimiento", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub área específica conocimiento", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    alcanceterritorial = forms.ModelChoiceField(label=u"Alcance Territorial", queryset=AlcanceTerritorial.objects.all(), required=False, widget=forms.Select())
    # fechafin = forms.DateField(label=u"Fecha de finalización", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    # valorpresupuestointerno = forms.FloatField(label=u'Valor Presupuesto Interno', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'formwidth': '50%'}))
    # valorpresupuestoexterno = forms.FloatField(label=u'Valor Presupuesto Externo', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'formwidth': '50%'}))
    # presupuestototal = forms.DecimalField(label=u'Presupuesto Total', widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'formwidth': '100%', 'readonly': 'readonly'}), required=False)
    # carreras = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.filter(status=True), required=False)

    # forms.IntegerField(label="Número De Beneficiario Indirecto", required=True,widget=forms.NumberInput(attrs={'class': 'imp-100'}))
    tiempoejecucion = forms.IntegerField(label=u"Tiempo Ejecución (meses)", required=False, widget=forms.NumberInput(attrs={'class': 'imp-50'}))
    tiempo_duracion_horas = forms.IntegerField(label=u"Tiempo Ejecución (horas)", required=False, widget=forms.NumberInput(attrs={'class': 'imp-50'}))
    fechainicio = forms.DateField(label=u"Fecha de Inicio", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechaPlanificacion = forms.DateField(label=u"Fecha Fin Planificada", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    # institucionbeneficiaria = forms.CharField(label=u"Institución Beneficiaria", widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    # periodoejecucion = forms.CharField(label=u"Periodo Ejecución", max_length=150, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    # objetivoplannacional = forms.ModelChoiceField(label=u"Objetivo plan Nacional", queryset=ObjetivoPlanNacional.objects.filter(status=True), required=False, widget=forms.Select())
    # cupo = forms.IntegerField(label=u'Cupos a Disponer para Estudiantes', initial=0, required=True)
    # archivo = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf, doc, docx', ext_whitelist=(".pdf", ".doc", ".docx",), max_upload_size=20971520)
    objetivos_PND = forms.CharField(label="Objetivos PND", required=False, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    politicas_PND = forms.CharField(label="Politicas PND", required=False, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    linea_accion = forms.CharField(label="Línea de acción", required=False, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    estrategia_desarrollo = forms.CharField(label="Estrategia de Desarrollo", required=False, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    investigacion_institucional = forms.CharField(label="Investigación Institucional", required=False, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    necesidades_sociales = forms.CharField(label="Necesidades Sociales", required=False, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    zona = forms.ModelMultipleChoiceField(label=u"Zona", queryset=Zona.objects.filter(status=True), required=False)
    canton = forms.ModelMultipleChoiceField(label=u"Cantón", queryset=Canton.objects.filter(status=True), required=False)
    distrito = forms.CharField(label=u"Distrito", max_length=150, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    circuito = forms.CharField(label=u"Circuito", max_length=150, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    sectorcoordenada = forms.CharField(label=u"Sector Coordenada", max_length=150, required=False, widget=forms.TextInput(attrs={'class': 'imp-50', 'readonly': 'True'}))  # circuito = forms.CharField(label=u"Circuito", max_length=150, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))

    # soportedelproyecto = forms.CharField(label=u"Soporte del Proyecto", required=False, widget=CKEditorUploadingWidget())
    # datosgeneralesequipo = forms.CharField(label=u"Datos Generales Equipo", required=False, widget=CKEditorUploadingWidget())
    # datosgeneralesestudiante = forms.CharField(label=u"Datos Generales Estudiante", required=False, widget=CKEditorUploadingWidget())
    # contribucionperfil = forms.CharField(label=u"Contribución Perfil", required=False, widget=CKEditorUploadingWidget())
    # datosbeneficiario = forms.CharField(label=u"Datos Beneficiario", required=False, widget=CKEditorUploadingWidget())
    # numerobeneficiarios = forms.CharField(label=u"Número Beneficiarios", required=False, widget=CKEditorUploadingWidget())
    # convenio = forms.CharField(label=u"Convenio", required=False, widget=CKEditorUploadingWidget())
    # antecedente = forms.CharField(label=u"Antecedente", required=False, widget=CKEditorUploadingWidget())
    # descripcionproblema = forms.CharField(label=u"Descripción Problema", required=False, widget=CKEditorUploadingWidget())
    # justificacion = forms.CharField(label=u"Justificación", required=False, widget=CKEditorUploadingWidget())
    # marcologico = forms.CharField(label=u"Marco Lógico", required=False, widget=CKEditorUploadingWidget())
    # pertinencia = forms.CharField(label=u"Pertinencia", required=False, widget=CKEditorUploadingWidget())
    # objetivogeneral = forms.CharField(label=u"Objetivo General", required=False, widget=CKEditorUploadingWidget())
    # objetivoespecifico = forms.CharField(label=u"Objetivo Específico", required=False, widget=CKEditorUploadingWidget())
    # metodologia = forms.CharField(label=u"Metodología", required=False, widget=CKEditorUploadingWidget())
    # cronogramaactividad = forms.CharField(label=u"Cronograma Actividad", required=False, widget=CKEditorUploadingWidget())
    # presupuestos = forms.CharField(label=u"Presupuestos", required=False, widget=CKEditorUploadingWidget())
    # productoresultante = forms.CharField(label=u"Producto Resultante", required=False, widget=CKEditorUploadingWidget())
    # bibliografia = forms.CharField(label=u"Bibliografía", required=False, widget=CKEditorUploadingWidget())
    # anexos = forms.CharField(label=u"Anexos", required=False, widget=CKEditorUploadingWidget())

    def adicionar(self):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)

    def editar(self, programas):
        lineas = LineaProgramasInvestigacion.objects.values_list('lineainvestigacion__id', flat=True).filter(
            status=True, programasinvestigacion=programas.programa).order_by('-id')
        sublineas = LineaProgramasInvestigacion.objects.values_list('sublineainvestigacion__id', flat=True).filter(
            status=True, programasinvestigacion=programas.programa).order_by('-id')
        areas = AreaProgramasInvestigacion.objects.values_list('areaconocimiento__id', flat=True).filter(status=True,
                                                                                                         programasinvestigacion=programas.programa).order_by(
            '-id')
        subareas = AreaProgramasInvestigacion.objects.values_list('subareaconocimiento__id', flat=True).filter(
            status=True, programasinvestigacion=programas.programa).order_by('-id')
        subareaespecificas = AreaProgramasInvestigacion.objects.values_list('subareaespecificaconocimiento__id',
                                                                            flat=True).filter(status=True,
                                                                                              programasinvestigacion=programas.programa).order_by(
            '-id')
        self.fields['lineainvestigacion'].queryset = LineaInvestigacion.objects.filter(id__in=lineas)
        self.fields['sublineainvestigacion'].queryset = SubLineaInvestigacion.objects.filter(id__in=sublineas,
                                                                                             lineainvestigacion=programas.lineainvestigacion)
        self.fields['areaconocimiento'].queryset = AreaConocimientoTitulacion.objects.filter(id__in=areas)
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(id__in=subareas,
                                                                                                   areaconocimiento=programas.areaconocimiento, status=True, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            id__in=subareaespecificas, areaconocimiento=programas.subareaconocimiento, status=True, vigente=True)
        self.fields['canton'].queryset = Canton.objects.filter(zona=programas.zona)


class ProyectoVinculacion2Form(forms.Form):
    investigacioninstitucional = forms.CharField(label=u'Investigación Institucional',
                                                 widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    necesidadessociales = forms.CharField(label=u'Necesidades sociales de la zona de influencia de la UNEMI',
                                          widget=forms.Textarea(attrs={'rows': '5'}), required=False)


class FechaProyectosFrom(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    fechainicio = forms.DateField(label=u"Fecha de inicio", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechafin = forms.DateField(label=u"Fecha de fin", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))



class FechaEntregaProyectoFrom(forms.Form):
    fecha = forms.DateField(label=u"Fecha de entrega", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class FechaFinProyectosFrom(forms.Form):
    fechainicio = forms.DateField(label=u"Fecha de Inicio", initial=datetime.now().date(), required=False,
                                  input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechafin = forms.DateField(label=u"Fecha de Fin", initial=datetime.now().date(), required=False,
                               input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class FechasRegistroHorasForm(forms.Form):
    fechadesde = forms.DateField(label=u"Fecha Desde", initial=datetime.now().date(), required=False,
                                 input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechahasta = forms.DateField(label=u"Fecha Hasta", initial=datetime.now().date(), required=False,
                                 input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class ObservacionDecanoForm(forms.Form):
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class ObservacionDirectorForm(forms.Form):
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class RegistrarHorasViculacionForm(forms.Form):
    horas = forms.IntegerField(label=u"Horas", widget=forms.TextInput(attrs={'class': 'imp-number'}))


class MarcoLogicoForm(forms.Form):
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_MARCO_LOGICO, required=False,
                             widget=forms.Select(attrs={'class': 'imp-50'}))
    resumen = forms.CharField(label=u'Resumen Narrativo de Objetivos', widget=forms.Textarea(attrs={'rows': '2'}),
                              required=False)
    indicadores = forms.CharField(label=u'Indicadores verificables objetivamente',
                                  widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    fuentes = forms.CharField(label=u'Fuentes de verificación', widget=forms.Textarea(attrs={'rows': '2'}),
                              required=False)
    supuestos = forms.CharField(label=u'Supuestos', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    numero = forms.IntegerField(label=u"Meta", initial=0, widget=forms.TextInput(attrs={'class': 'imp-number'}),
                                required=False)

    def editar(self):
        deshabilitar_campo(self, 'tipo')


class EvidenciaForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=10485760)


class AvanceEjecucionForm(forms.Form):
    porcentaje = forms.IntegerField(initial=0, required=False, label=u'Porcentaje', widget=forms.TextInput(attrs={'': ''}))
    fecha = forms.DateField(label=u"Fecha", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    observacion = forms.CharField(label=u'Observaciones', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    evidencia = ExtFileField(label=u'Seleccione Archivo', required=False,
                             help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                             max_upload_size=10485760)


class EvidenciaInformeForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf, jpg, png',
                           ext_whitelist=(".pdf", ".jpg", ".png",), max_upload_size=10485760)


class ConfigurarFechaMasivaPracticaForm(forms.Form):
    aplicarpractica = forms.BooleanField(label=u'Aplicar a prácticas?', initial=True, required=False,
                                         widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    aplicarevidencia = forms.BooleanField(label=u'Aplicar a evidencias?', initial=False, required=False,
                                          widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    periodoevidencia = forms.ModelChoiceField(label=u"Periodo de evidencia",
                                              queryset=CabPeriodoEvidenciaPPP.objects.filter(
                                                  status=True), required=False)
    evidencias = forms.ModelMultipleChoiceField(label=u"Evidencias",
                                                queryset=EvidenciaPracticasProfesionales.objects.filter(status=True),
                                                required=False)
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), required=False,
                                  input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                   attrs={'class': 'selectorfecha',
                                                                                          'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin", initial=datetime.now().date(), required=False,
                               input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                attrs={'class': 'selectorfecha',
                                                                                       'formwidth': '50%'}))

    def configuracion_inicial(self):
        self.fields['evidencias'].queryset = EvidenciaPracticasProfesionales.objects.filter(periodoevidencia=None)


class EvidenciaPracticasForm(forms.Form):
    puntaje = forms.FloatField(label=u"Puntaje", initial="0", required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '2', 'col': '12'}))
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3', 'col': '12'}), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=True, help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=20971520, widget=forms.FileInput(attrs={'col': '12'}))

    def concalificacion(self):
        del self.fields['puntaje']


class RetiroPracticasForm(forms.Form):
    archivoretiro = ExtFileField(label=u'Seleccione Archivo', required=False,
                                 help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                                 max_upload_size=10485760)


class EvidenciaPracticasNormalForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=10485760)


class CargarAdjuntoPracticaForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=10485760)


class PonerFechaLimiteEvidenciaForm(forms.Form):
    fechainicio = forms.DateField(label=u"Fecha Inicio", initial=datetime.now().date(), required=True, input_formats=['%Y-%m-%d'], widget=DateTimeInput(format='%Y-%m-%d', attrs={'class': 'selectorfecha', 'col': 6, 'formwidth': '40%'}))
    fechafin = forms.DateField(label=u"Fecha Finalización", initial=datetime.now().date(), required=True, input_formats=['%Y-%m-%d'], widget=DateTimeInput(format='%Y-%m-%d', attrs={'class': 'selectorfecha', 'col': 6, 'formwidth': '40%'}))


class AprobarRechazarEvidenciaTutorForm(forms.Form):
    estadotutor = forms.ChoiceField(label=u'Estado Revisión Tutor', choices=ESTADO_TUTOR, required=True,
                                    widget=forms.Select(attrs={'class': 'imp-50'}))
    obstutor = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class AprobarRechazarSolicitudPracticaForm(forms.Form):
    estadosolicitud = forms.ChoiceField(label=u'Estado Revisión', choices=ESTADO_SOLICITUD_PRACTICAS2,
                                        widget=forms.Select(attrs={'class': 'imp-50'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    validacion = forms.CharField(label=u'Validación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    fechavalidacion = forms.DateField(label=u"Fecha Validación", initial=datetime.now().date(), required=False,
                                      input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                       attrs={'class': 'selectorfecha',
                                                                                              'formwidth': '30%'}))
    retirado = forms.BooleanField(label=u'Retirado', initial=False, required=False,
                                  widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))
    fechahastapenalizacionretiro = forms.DateField(label=u"Fecha de penalización de retiro",
                                                   initial=datetime.now().date(), required=False,
                                                   input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                    attrs={
                                                                                                        'class': 'selectorfecha',
                                                                                                        'formwidth': '40%'}))


class ArpobarEvidenciaPracticasForm(forms.Form):
    tipo = forms.ChoiceField(label=u'Estado Revisión', choices=ESTADO_REVISION_APROBAR, widget=forms.Select(attrs={'class': 'imp-100', 'col': '12', 'style': 'width:100%'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3', 'col': '12'}), required=False)


class FechaInformeForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha Informe", initial=datetime.now().date(), required=False,
                            input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    # descripcion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=10485760)


class ParticipanteProfesorForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipoparticipante = forms.ModelChoiceField(label=u"Tipo Participante", queryset=ParticipantesTipo.objects.all())
    horas = forms.IntegerField(label=u"Horas", initial=0, widget=forms.TextInput(attrs={'class': 'imp-number'}))

    def adicionar(self, var):
        self.fields['tipoparticipante'].queryset = ParticipantesTipo.objects.filter(tipo=var)


class ParticipanteEstudianteForm(forms.Form):
    inscripcion = forms.IntegerField(initial=0, required=False, label=u'Estudiante',
                                     widget=forms.TextInput(attrs={'select2search': 'true'}))
    horas = forms.IntegerField(label=u"Horas", initial=0, widget=forms.TextInput(attrs={'class': 'imp-number'}))

class CambioCarreraVinculacionForm(forms.Form):
    alumno = forms.CharField(label=u'Alumno', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Datos de la Práctica'}), required=False)
    proyecto = forms.CharField(label=u'Proyecto', widget=forms.Textarea(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'proyec'}), required=False)
    horas = forms.IntegerField(label=u'Número Horas', required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0', 'formwidth': '33%', 'readonly': 'readonly'}))
    carreraactual = forms.CharField(label=u'Carrera actual', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Carrera'}), required=False)
    carreradestino = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Carrera / Itinerario Destino'}))

    def cargar_otra_carrera(self, estudiante):
        carreras = Carrera.objects.filter(inscripcion__persona=estudiante.inscripcion.persona,
                                          inscripcion__status=True,
                                          inscripcion__perfilusuario__status=True,
                                          inscripcion__perfilusuario__visible=True,
                                          coordinacion__id__in=[1, 2, 3, 4, 5]).exclude(pk=estudiante.inscripcion.carrera.id)

        self.fields['carreradestino'].queryset = carreras

class RegistrarHorasVinculacionForm(forms.Form):
    alumno = forms.CharField(label=u'Alumno', widget=forms.TextInput(attrs={'col': '6', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Datos de la Práctica'}), required=False)
    carrera = forms.CharField(label=u'Carrera', widget=forms.TextInput(attrs={'col': '6', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Carrera'}), required=False)
    proyecto = forms.CharField(label=u'Proyecto', widget=forms.Textarea(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'proyec'}), required=False)
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'],widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6'}))
    fechafinalizacion = forms.DateField(label=u"Fecha finalización", initial=datetime.now().date(), required=True,input_formats=['%d-%m-%Y'],widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6'}))
    horas = forms.IntegerField(label=u'Número horas', required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0', 'col': '6'}))
    estado = forms.ChoiceField(label=u'Estado de participación', choices=ESTADOS_PARTICIPACION,widget=forms.Select(attrs={'class': 'imp-50', 'col': '6'}))

    def bloqueo(self, campo):
        campo_modolectura(self, campo, True)
class ParticipanteAdministrativoForm(forms.Form):
    administrativo = forms.IntegerField(initial=0, required=False, label=u'Persona Administrativo',
                                        widget=forms.TextInput(attrs={'select2search': 'true'}))
    horas = forms.IntegerField(label=u"Horas", initial=0, widget=forms.TextInput(attrs={'class': 'imp-number'}))


class CarreraProyectoForm(forms.Form):
    carrera = forms.ModelChoiceField(Carrera.objects.all(), label=u"Carrera")


class PresupuestoProyectoForm(forms.Form):
    anioejecucion = forms.IntegerField(label=u"Año Ejecución", initial=0,
                                       widget=forms.TextInput(attrs={'class': 'imp-number'}))
    planificado = forms.FloatField(label=u"Presupuesto Planificado", initial="0.0000", required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4'}))
    ejecutado = forms.FloatField(label=u"Presupuesto Ejecutado", initial="0.0000", required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4'}))


class ArchivoForm(forms.Form):
    observacion = forms.CharField(label=u"observacion", widget=forms.Textarea)
    aprobado = forms.BooleanField(label=u'Aprobado', initial=False, required=False)


class SilaboForm(forms.Form):
    objetivoaprendizaje = forms.CharField(label=u'Objetivo Aprendizaje', widget=forms.Textarea(attrs={'rows': '3'}),
                                          required=True)
    enfoque = forms.CharField(label=u'Enfoque Metodológico', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    recursos = forms.CharField(label=u'Recursos Didácticos', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    evaluacion = forms.CharField(label=u'Evaluación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    horaspresencial = forms.IntegerField(label=u'Hora presencial',
                                         widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}),
                                         required=False)
    horaautonoma = forms.IntegerField(label=u'Hora autónoma',
                                      widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}),
                                      required=False)

    def editar(self):
        deshabilitar_campo(self, 'horaspresencial')
        deshabilitar_campo(self, 'horaautonoma')


class SilaboSemanalForm(forms.Form):
    # objetivoaprendizaje = forms.CharField(label=u'Objetivo Aprendizaje', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    enfoque = forms.CharField(label=u'Enfoque Inicio', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    enfoquedos = forms.CharField(label=u'Enfoque Desarrollo', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    enfoquetres = forms.CharField(label=u'Enfoque Cierre', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    recursos = forms.CharField(label=u'Recursos Didácticos', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    # evaluacion = forms.CharField(label=u'Evaluación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    horaspresencial = forms.DecimalField(label=u'Hora presencial', widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}), required=False)
    horaautonoma = forms.DecimalField(label=u'Hora autónoma', widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}), required=False)

    # bibliografia = forms.IntegerField(initial=0, required=False, label=u'Bibliografia Complementaria',widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '90%'}))

    def editar(self):
        deshabilitar_campo(self, 'horaspresencial')
        deshabilitar_campo(self, 'horaautonoma')

    def deshabilitar_horas(self):
        deshabilitar_campo(self, 'horaspresencial')
        deshabilitar_campo(self, 'horaautonoma')


class BibliografiaComplementariaForm(forms.Form):
    bibliografia = forms.IntegerField(initial=0, required=False, label=u'Bibliografia Complementaria',
                                      widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '90%'}))


# Practicas de la materia

class GPPracticaFrom(forms.Form):
    temapractica = forms.ModelChoiceField(label=u"Tema de Práctica", queryset=DetalleSilaboSemanalTema.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    subtemapractica = forms.ModelChoiceField(label=u"Sub tema de Práctica", queryset=DetalleSilaboSemanalSubtema.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    numeropractica = forms.IntegerField(initial=0, label=u'Número de Práctica', widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '30%'}), required=False)
    tiempoactividad = forms.TimeField(initial=str("01:00"), label=u"Tiempo asignado para la actividad", required=False, input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%'}))
    individual = forms.BooleanField(required=False, initial=False, label=u'Práctica Individual', widget=forms.CheckboxInput(attrs={'formwidth': '35%'}))
    grupo = forms.BooleanField(required=False, initial=False, label=u'Práctica Grupal', widget=forms.CheckboxInput(attrs={'formwidth': '35%'}))
    cantidadalumnogrupo = forms.IntegerField(initial=0, label=u'Cantidad de Alumnos', widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '30%'}), required=False)
    objetvopactica = forms.CharField(label=u'Objetivo de la práctica', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    instruccionarchivo = ExtFileField(label=u'Instrucciones:', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=4194304)
    instruccionobservacion = forms.CharField(label=u'Instrucciónes', widget=CKEditorUploadingWidget(), required=False)
    actividaddesarrollar = forms.CharField(label=u'Actividades a Desarrollar', widget=CKEditorUploadingWidget(), required=False)
    rubica = forms.CharField(label=u'Rúbrica de Evaluación', widget=CKEditorUploadingWidget(), required=False)
    # laboratorio = forms.ModelChoiceField(label=u"Laboratorio", queryset=LaboratorioAcademia.objects.filter(status=True), required=False,widget=forms.Select(attrs={'formwidth': '100%'}))
    laboratorio = forms.CharField(label=u'Laboratorio', required=False, widget=forms.TextInput(attrs={'formwidth': '100%'}))

    def tiene_subtemas(self):
        del self.fields['subtemapractica']


class GPPracticaRecursoFrom(forms.Form):
    # temapractica = forms.ModelChoiceField(label=u"Tema de Práctica", queryset=DetalleSilaboSemanalTema.objects.filter(status=True), required=False,widget=forms.Select(attrs={'formwidth': '100%'}))
    nombrepractica = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    # subtemapractica = forms.ModelChoiceField(label=u"Sub tema de Práctica", queryset=DetalleSilaboSemanalSubtema.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    numeropractica = forms.IntegerField(initial=0, label=u'Número de Práctica', widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '30%'}), required=False)
    tiempoactividad = forms.TimeField(initial=str("01:00"), label=u"Tiempo asignado para la actividad", required=False, input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%'}))
    individual = forms.BooleanField(required=False, initial=False, label=u'Práctica Individual', widget=forms.CheckboxInput(attrs={'formwidth': '35%'}))
    grupo = forms.BooleanField(required=False, initial=False, label=u'Práctica Grupal', widget=forms.CheckboxInput(attrs={'formwidth': '35%'}))
    cantidadalumnogrupo = forms.IntegerField(initial=0, label=u'Cantidad de Alumnos', widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '30%'}), required=False)
    asistida = forms.BooleanField(required=False, initial=False, label=u'Asistida', widget=forms.CheckboxInput(attrs={'formwidth': '35%'}))
    noasistida = forms.BooleanField(required=False, initial=False, label=u'No asistida', widget=forms.CheckboxInput(attrs={'formwidth': '35%'}))
    # objetvopactica = forms.CharField(label=u'Objetivo de la práctica', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    # instruccionarchivo = ExtFileField(label=u'Instrucciones:', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=4194304)
    instruccionobservacion = forms.CharField(label=u'Instrucciónes/Actividades a Desarrollar', widget=CKEditorUploadingWidget(), required=False)
    # actividaddesarrollar = forms.CharField(label=u'Actividades a Desarrollar', widget=CKEditorUploadingWidget(), required=False)
    rubrica = forms.CharField(label=u'Rúbrica de Evaluación', widget=CKEditorUploadingWidget(), required=False)
    laboratorio = forms.CharField(label=u'Laboratorio', required=False, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    tipoambiente = forms.ChoiceField(choices=AMBIENTE_APRENDIZAJE, label=u'Tipo de ambiente de aprendizaje práctico', required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    nombreambiente = forms.CharField(label=u'Nombre del ambiente de aprendizaje', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    ubicacionambiente = forms.ChoiceField(choices=UBICACION_APRENDIZAJE, label=u'Ubicación del ambiente de aprendizaje', required=False, widget=forms.Select(attrs={'formwidth': '100%'}))

    def tiene_subtemas(self):
        del self.fields['subtemapractica']


class ProfesorTipoForm(forms.Form):
    coordinacion = forms.ModelChoiceField(label=u"Facultad", queryset=Coordinacion.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    tipo = forms.ModelChoiceField(label=u"Tipo", queryset=ProfesorTipo.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    categoria = forms.ModelChoiceField(label=u"Categoría", queryset=CategorizacionDocente.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    escalafon = forms.ModelChoiceField(label=u"Escalafón", queryset=NivelEscalafonDocente.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    dedicacion = forms.ModelChoiceField(label=u"Dedicación", queryset=TiempoDedicacionDocente.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    observacion = forms.CharField(label=u'Observación', required=False, widget=forms.Textarea(attrs={'rows': '5', 'formwidth': '75%'}))
    vercertificado = forms.BooleanField(initial=True, label=u"Puede ver certificado", required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    verinforme = forms.BooleanField(initial=True, label=u"Puede ver informe", required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))

    def editar(self, idcoordinacion):
        facultad = Coordinacion.objects.get(pk=idcoordinacion, status=True)
        self.fields['carrera'].queryset = facultad.carreras()


class ArticulosInvestigacionForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    doy = forms.CharField(label=u'Doi Artículo', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    indexada = forms.BooleanField(required=False, label=u'La revista está indexada',
                                  widget=forms.CheckboxInput(attrs={'separator': 'false'}))
    fecharecepcion = forms.DateField(label=u"Fecha Recepción", initial=datetime.now().date(), required=True,
                                     input_formats=['%d-%m-%Y'],
                                     widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechaaprobacion = forms.DateField(label=u"Fecha Aprobación", initial=datetime.now().date(), required=True,
                                      input_formats=['%d-%m-%Y'],
                                      widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=True,
                                       input_formats=['%d-%m-%Y'],
                                       widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    numero = forms.CharField(label=u'Numero de Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    volumen = forms.CharField(label=u'Volumen de Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    paginas = forms.CharField(label=u'Paginas de la Revista', widget=forms.TextInput(attrs={'rows': '3'}),
                              required=True)
    enlace = forms.CharField(label=u'Enlace', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    revista = forms.ModelChoiceField(label=u"Revista", queryset=RevistaInvestigacion.objects.all().filter(status=True),
                                     required=True, widget=forms.Select())
    estado = forms.ChoiceField(label=u'Estado de Publicación', choices=ESTADO_PUBLICACION,
                               widget=forms.Select(attrs={'class': 'imp-50'}))
    areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento",
                                              queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=True,
                                              widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento",
                                                 queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=True,
                                                 widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especifica conocimiento",
                                                           queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1),
                                                           required=True, widget=forms.Select())
    accesoabierto = forms.BooleanField(required=False, label=u'Acceso Abierto?',
                                       widget=forms.CheckboxInput(attrs={'separator': 'false'}))
    cuartil = forms.ChoiceField(label=u'Cuartil', choices=CUARTIL, widget=forms.Select(attrs={'class': 'imp-50'}))
    jcr = forms.CharField(label=u'JCR', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    sjr = forms.CharField(label=u'SJR', widget=forms.TextInput(attrs={'rows': '3'}), required=False)

    def adicionar(self):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)

    def editar(self, programas):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.areaconocimiento, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.subareaconocimiento, vigente=True)


class ArticulosInvestigacionAuxForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    doy = forms.CharField(label=u'Doi Artículo', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    indexada = forms.BooleanField(required=False, label=u'La revista está indexada',
                                  widget=forms.CheckboxInput(attrs={'separator': 'false'}))
    fecharecepcion = forms.DateField(label=u"Fecha Recepción", initial=datetime.now().date(), required=True,
                                     input_formats=['%d-%m-%Y'],
                                     widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechaaprobacion = forms.DateField(label=u"Fecha Aprobación", initial=datetime.now().date(), required=True,
                                      input_formats=['%d-%m-%Y'],
                                      widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=True,
                                       input_formats=['%d-%m-%Y'],
                                       widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    numero = forms.CharField(label=u'Numero de Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    volumen = forms.CharField(label=u'Volumen de Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    paginas = forms.CharField(label=u'Paginas de la Revista', widget=forms.TextInput(attrs={'rows': '3'}),
                              required=True)
    enlace = forms.CharField(label=u'Enlace', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    revista1 = forms.CharField(label=u'Revista', widget=forms.TextInput(attrs={'rows': '2'}), required=False)
    revista = forms.ModelChoiceField(label=u"Revista", queryset=RevistaInvestigacion.objects.all().filter(status=True),
                                     required=True, widget=forms.Select())
    base = forms.CharField(label=u'Base Indexada', widget=forms.TextInput(attrs={'rows': '2'}), required=False)
    estado = forms.ChoiceField(label=u'Estado de Publicación', choices=ESTADO_PUBLICACION,
                               widget=forms.Select(attrs={'class': 'imp-50'}))
    areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento",
                                              queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=True,
                                              widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento",
                                                 queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=True,
                                                 widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especifica conocimiento",
                                                           queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1),
                                                           required=True, widget=forms.Select())
    accesoabierto = forms.BooleanField(required=False, label=u'Acceso Abierto?',
                                       widget=forms.CheckboxInput(attrs={'separator': 'false'}))
    cuartil = forms.ChoiceField(label=u'Cuartil', choices=CUARTIL, widget=forms.Select(attrs={'class': 'imp-50'}))
    jcr = forms.CharField(label=u'JCR', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    sjr = forms.CharField(label=u'SJR', widget=forms.TextInput(attrs={'rows': '3'}), required=False)

    def adicionar(self):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=None)

    def editar(self, programas):
        deshabilitar_campo(self, 'revista1')
        deshabilitar_campo(self, 'base')
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.areaconocimiento, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.subareaconocimiento, vigente=True)


class ArticulosInvestigacion3Form(forms.Form):
    nombre = forms.CharField(label=u'Título del Artículo', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    resumen = forms.CharField(label=u'Resumen (Asbtract)', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    # motivo = forms.CharField(label=u'Detalle de la publicación', widget=forms.Textarea, required=False)
    revista = forms.CharField(label=u'Revista Solicitud', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Datos de la Revista'}), required=False)
    revista2 = forms.ModelChoiceField(label=u'Revista', queryset=RevistaInvestigacion.objects.filter(status=True, borrador=False).order_by('nombre'), required=False, widget=forms.Select(attrs={'fieldbuttons': [{'id': 'add_revista', 'tooltiptext': 'Agregar', 'btnclasscolor': 'btn-success', 'btnfaicon': 'fa-plus-square'}, {'id': 'edit_revista', 'tooltiptext': 'Editar', 'btnclasscolor': 'btn-warning', 'btnfaicon': 'fa-edit'}]}))
    # revista2 = forms.ModelChoiceField(label=mark_safe(u'<a href="javascript:;" class="btn btn-mini btn-success tu" title="Agregar Revista" id="add_revista"><i class="fa fa-plus-square"></i></a>&nbsp;<a href="javascript:;" class="btn btn-mini btn-warning tu" title="Editar Revista" id="edit_revista"><i class="fa fa-edit"></i></a>&nbsp;Revista'), queryset=RevistaInvestigacion.objects.all().order_by('nombre'), required=False, widget=forms.Select())
    base = forms.CharField(label=u'Base Indexada', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'formwidth': '50%'}), required=False)
    categoriabase = forms.CharField(label=u'Categoría', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'formwidth': '50%'}), required=False)
    estadopublicacion = forms.ChoiceField(label=u'Estado de Publicación', choices=ESTADO_PUBLICACION_ARTICULO, required=False, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '100%', 'separator2': True, 'separatortitle': 'Datos del Artículo'}))
    fecharecepcion = forms.DateField(label=u"Fecha Recepción", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fechaaprobacion = forms.DateField(label=u"Fecha Aprobación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    enlace = forms.CharField(label='Enlace Artículo', widget=forms.TextInput(attrs={'rows': '3', 'style': 'text-transform:lowercase'}), required=False)
    numero = forms.CharField(label=u'Número de Artículo en la Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    volumen = forms.CharField(label=u'Volumen de Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    paginas = forms.CharField(label=u'Páginas en la Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    areaconocimiento = forms.ModelChoiceField(label=u"Campo Amplio", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False, widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Campo Específico", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Campo Detallado", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    lineainvestigacion = forms.ModelChoiceField(label=u"Línea Investigación", queryset=LineaInvestigacion.objects.filter(vigente=True, status=True).order_by('nombre'), required=False, widget=forms.Select())
    sublineainvestigacion = forms.ModelChoiceField(label=u"Sub-Línea Investigación", queryset=SubLineaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    provieneproyecto = forms.BooleanField(label=u"¿Proviene de un proyecto de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    tipoproyecto = forms.ChoiceField(label=u'Tipo de Proyecto', choices=TIPO_PROYECTO_ARTICULO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    proyectointerno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectosInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    proyectoexterno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    pertenecegrupoinv = forms.BooleanField(label=u"¿Pertenece a un Grupo de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    grupoinvestigacion = forms.ModelChoiceField(label=u"Grupo de investigación", queryset=GrupoInvestigacion.objects.filter(status=True, vigente=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    doi = forms.CharField(label=u'DOI Artículo', widget=forms.TextInput(attrs={'rows': '3', 'separator2': True, 'separatortitle': 'Datos Adicionales del Artículo'}), required=False)
    revistaindexada = forms.BooleanField(label=u"Revista Indexada", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    accesoabierto = forms.BooleanField(label=u"Artículo Acceso Abierto", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    cuartilarticulo = forms.ChoiceField(label=u'Cuartil', choices=CUARTIL_ARTICULO, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%'}), required=False)
    sjrarticulo = forms.CharField(label=u'SJR', widget=forms.TextInput(attrs={'rows': '3', 'formwidth': '50%'}), required=False)
    jcrarticulo = forms.CharField(label=u'JCR', widget=forms.TextInput(attrs={'rows': '3', 'formwidth': '50%'}), required=False)
    categoriaconfirmada = forms.ChoiceField(label=u'Categoría Confirmada', choices=RESPUESTAS_SI_NO, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%'}), required=False)
    categoriaarticulo = forms.CharField(label=u'Categoría Artículo', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'formwidth': '50%'}), required=False)
    observacion = forms.CharField(label=u'Observación:', widget=forms.Textarea(attrs={'rows': '3', 'class': 'imp-100'}), required=False)

    def editar(self, solicitud):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=solicitud.areaconocimiento, vigente=True).order_by('nombre')
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=solicitud.subareaconocimiento, vigente=True).order_by('nombre')
        self.fields['sublineainvestigacion'].queryset = SubLineaInvestigacion.objects.filter(lineainvestigacion=solicitud.lineainvestigacion).order_by('nombre')
        if solicitud.provieneproyecto:
            if solicitud.tipoproyecto < 3:
                self.fields['proyectointerno'].queryset = ProyectosInvestigacion.objects.filter(status=True, tipo=solicitud.tipoproyecto).order_by('nombre')
            else:
                self.fields['proyectoexterno'].queryset = ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre')


class ParticipanteProfesorArticuloForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PARTICIPANTE, widget=forms.Select(attrs={'class': 'imp-50'}))
    tipoparticipanteins = forms.ChoiceField(label=u'Tipo participante', choices=TIPO_PARTICIPANTE_INSTITUCION,
                                            widget=forms.Select(attrs={'class': 'imp-50'}))


class DocenteDistributivoForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor', widget=forms.TextInput(attrs={'select2search': 'true'}))


class ParticipanteAdministrativoArticuloForm(forms.Form):
    administrativo = forms.IntegerField(initial=0, required=False, label=u'Profesor',
                                        widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PARTICIPANTE, widget=forms.Select(attrs={'class': 'imp-50'}))
    tipoparticipanteins = forms.ChoiceField(label=u'Tipo participante', choices=TIPO_PARTICIPANTE_INSTITUCION,
                                            widget=forms.Select(attrs={'class': 'imp-50'}))


class ParticipanteInscripcionArticuloForm(forms.Form):
    inscripcion = forms.IntegerField(initial=0, required=False, label=u'Estudiante',
                                     widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PARTICIPANTE, widget=forms.Select(attrs={'class': 'imp-50'}))
    tipoparticipanteins = forms.ChoiceField(label=u'Tipo participante', choices=TIPO_PARTICIPANTE_INSTITUCION,
                                            widget=forms.Select(attrs={'class': 'imp-50'}))


class BaseIndexadaInvestigacionListaForm(forms.Form):
    baseindexada = forms.ModelChoiceField(label=u"Base Indexada",
                                          queryset=BaseIndexadaInvestigacion.objects.filter(status=True), required=True,
                                          widget=forms.Select())


class RevistaInvestigacionForm(forms.Form):
    codigoissn = forms.CharField(label=u'Código ISSN', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    nombrerevista = forms.CharField(label=u'Nombre', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    institucion = forms.CharField(label=u'Institución', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    enlacerevista = forms.CharField(label=u'Enlace', widget=forms.TextInput(attrs={'rows': '1', 'style': 'text-transform:lowercase'}), required=False)
    baseindexada = forms.ModelMultipleChoiceField(label=u'Base(s) Indexada(s)', queryset=BaseIndexadaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False)
    tipo = forms.ChoiceField(label=u'Tipo', required=False, choices=TIPO_REVISTA, widget=forms.Select(attrs={'class': 'imp-50'}))


class RevistaInvestigacionAdminForm(forms.Form):
    tiporegistro = forms.ChoiceField(label=u'Tipo Registro', required=False, choices=TIPO_REGISTRO_REVISTA, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    codigoissn = forms.CharField(label=u'Código ISSN', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    nombrerevista = forms.CharField(label=u'Nombre', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    institucion = forms.CharField(label=u'Institución', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    enlacerevista = forms.CharField(label=u'Enlace', widget=forms.TextInput(attrs={'rows': '1', 'style': 'text-transform:lowercase'}), required=False)
    baseindexada = forms.ModelMultipleChoiceField(label=u'Base(s) Indexada(s)', queryset=BaseIndexadaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False)
    cuartil = forms.ChoiceField(label=u'Cuartil', choices=CUARTIL_REVISTA, widget=forms.Select(attrs={'class': 'imp-50'}), required=False)
    sjr = forms.CharField(label=u'SJR', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    jcr = forms.CharField(label=u'JCR', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    tipo = forms.ChoiceField(label=u'Tipo', required=False, choices=TIPO_REVISTA, widget=forms.Select(attrs={'class': 'imp-50'}))

    def quitar_campo_tipo(self):
        del self.fields['tiporegistro']


class RevistaInvestigacionEditAdminForm(forms.Form):
    codigoissn2 = forms.CharField(label=u'Código ISSN', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    nombrerevista2 = forms.CharField(label=u'Nombre', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    institucion2 = forms.CharField(label=u'Institución', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    enlacerevista2 = forms.CharField(label=u'Enlace', widget=forms.TextInput(attrs={'rows': '1', 'style': 'text-transform:lowercase'}), required=False)
    baseindexada2 = forms.ModelMultipleChoiceField(label=u'Base(s) Indexada(s)', queryset=BaseIndexadaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False)
    cuartil2 = forms.ChoiceField(label=u'Cuartil', choices=CUARTIL_REVISTA, widget=forms.Select(attrs={'class': 'imp-50'}), required=False)
    sjr2 = forms.CharField(label=u'SJR', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    jcr2 = forms.CharField(label=u'JCR', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    tipo2 = forms.ChoiceField(label=u'Tipo', required=False, choices=TIPO_REVISTA, widget=forms.Select(attrs={'class': 'imp-50'}))


class DocumentoIndexacionForm(forms.Form):
    revista = forms.CharField(label=u'Revista', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly'}), required=False)
    baseindexada = forms.CharField(label=u'Base Indexada', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly'}), required=False)
    documento = ExtFileField(label=u'Documento Indexacion', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput())


class RevistaInvestigacionHojaVidaForm(forms.Form):
    codigoissn2 = forms.CharField(label=u'Código ISSN', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    nombrerevista2 = forms.CharField(label=u'Nombre', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    institucion2 = forms.CharField(label=u'Institución', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    enlacerevista2 = forms.CharField(label=u'Enlace', widget=forms.TextInput(attrs={'rows': '1', 'style': 'text-transform:lowercase'}), required=False)
    baseindexada2 = forms.ModelMultipleChoiceField(label=u'Base(s) Indexada(s)', queryset=BaseIndexadaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False)
    tipo2 = forms.ChoiceField(label=u'Tipo', required=False, choices=TIPO_REVISTA, widget=forms.Select(attrs={'class': 'imp-50'}))


class BaseIndexadaInvestigacionForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    # tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_ARTICULO, widget=forms.Select(attrs={'class': 'imp-50'}))
    categoria = forms.ModelChoiceField(label=u"Tipo", queryset=CategoriaBaseIndexada.objects.filter(status=True).order_by('orden'), required=False, widget=forms.Select())


class FechaDocenteParesForm(FormModeloBase):
    lugar = forms.CharField(label=u'Lugar:', widget=forms.TextInput(attrs={'class': 'imp-100', 'col': '12'}), required=False)
    fecha = forms.DateField(label=u"Fecha:", initial=datetime.now().date(), required=False, widget=DateTimeInput({'col': '4'}))
    horainicio = forms.TimeField(label=u"Hora Desde:", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'col': '4'}))
    horafin = forms.TimeField(label=u'Hora Hasta:', required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'col': '4'}))
    aplicardirectivo = forms.BooleanField(label=u'Aplicar a directivo?', initial=False, required=False)


class SagIndicadoresFrom(forms.Form):
    codigo = forms.CharField(label=u'Código:', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=True)
    nombre = forms.CharField(label=u'Nombre:', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=True)
    descripcion = forms.CharField(label=u'Descripción:', widget=forms.Textarea(attrs={'rows': '3', 'class': 'imp-100'}),
                                  required=False)
    vigente = forms.BooleanField(label=u'Vigente:', required=False)


class SagProyectosFrom(forms.Form):
    codigo = forms.CharField(label=u'Código:', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=True)
    nombre = forms.CharField(label=u'Nombre:', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=True)
    vigente = forms.BooleanField(label=u'Vigente:', required=False)


class SagEncuestasFrom(forms.Form):
    nombre = forms.CharField(label=u'Nombre:', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=False)
    descripcion = forms.CharField(label=u'Descripción:', widget=forms.Textarea(attrs={'rows': '3', 'class': 'imp-100'}),
                                  required=False)
    orden = forms.IntegerField(label=u"Orden:", required=False, initial=0,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    estado = forms.BooleanField(label=u'Publicado:', required=False)


class SagPreguntaFrom(forms.Form):
    nombre = forms.CharField(label=u'Nombre:', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=False)
    descripcion = forms.CharField(label=u'Descripción:', widget=forms.Textarea(attrs={'rows': '3', 'class': 'imp-100'}),
                                  required=False)


class SagGrupoFrom(forms.Form):
    descripcion = forms.CharField(label=u'Descripción:', widget=forms.Textarea(attrs={'rows': '3', 'class': 'imp-100'}),
                                  required=True)
    orden = forms.IntegerField(label=u"Orden:", required=True, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '80px'}))
    grupo = forms.IntegerField(label=u"Grupo:", required=True, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '80px'}))
    observacion = forms.CharField(label=u'Observación:', widget=forms.Textarea(attrs={'rows': '3', 'class': 'imp-100'}),
                                  required=False)
    estado = forms.BooleanField(label=u'Estado del Grupo:', required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '120px'}))
    agrupado = forms.BooleanField(label=u'Matriz Agrupada:', required=False,
                                  widget=forms.CheckboxInput(attrs={'formwidth': '120px'}))


class PreguntasEncuestasForm(forms.Form):
    sagpregunta = forms.ModelChoiceField(label=u"Preguntas:", queryset=SagPregunta.objects.all().filter(status=True),
                                         required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    saggrupopregunta = forms.ModelChoiceField(label=u"Grupo:",
                                              queryset=SagGrupoPregunta.objects.all().filter(status=True),
                                              required=True, widget=forms.Select())
    tipo = forms.ModelChoiceField(label=u"Tipo:", queryset=SagPreguntaTipo.objects.all().filter(status=True),
                                  required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    observacion = forms.CharField(label=u'Observación:', widget=forms.Textarea(attrs={'rows': '3', 'with': '100'}),
                                  required=False)
    ordenamiento = forms.IntegerField(label=u"Orden:", required=True,
                                      widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    responder = forms.BooleanField(label=u'Respuesta Obligatoria:', required=True)

    def adicionar(self, idencuesta):
        encue = SagPreguntaEncuesta.objects.values_list('sagpregunta').filter(sagencuesta=idencuesta,
                                                                              status=True).order_by('orden')
        self.fields['sagpregunta'].queryset = SagPregunta.objects.filter(status=True).exclude(pk__in=encue)


class PeriodoSagForm(forms.Form):
    tipo = forms.ChoiceField(label=u'Tipo de Periodo', choices=SagPeriodo.TiposSagPeriodos.choices, widget=forms.Select(attrs={'formwidth': '100%'}))
    nombre = forms.CharField(label=u'Nombre:', widget=forms.TextInput(attrs={'rows': '3', 'with': '100'}),
                             required=False)
    descripcion = forms.CharField(label=u"Descripción:", required=False,
                                  widget=forms.TextInput(attrs={'rows': '3', 'with': '100'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio:", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '300px'}),
                                  required=True)
    fechafin = forms.DateField(label=u"Fecha Fin:", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y',
                                                    attrs={'class': 'selectorfecha', 'formwidth': '300px'}),
                               required=True)
    archivo = ExtFileField(label=u'Archivo:', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf',
                           ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=4194304)
    tienemuestra = forms.BooleanField(label=mark_safe(u"<strong>¿Tiene muestra?</strong>"), required=False,
                                      widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))
    primeravez = forms.BooleanField(label=mark_safe(u"<strong>¿Primera vez?</strong>"), required=False,
                                    widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))
    aplicacurso = forms.BooleanField(label=mark_safe(u"<strong>¿Aplica Curso?</strong>"), required=False,
                                    widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))
    estado = forms.BooleanField(label=u'Vigente', required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))

    def tipo_posgrado(self):
        self.fields['tipo'].choices = [
        choice for choice in SagPeriodo.TiposSagPeriodos.choices if choice[0] == 2
    ]

    def tipo_pregrado(self):
        self.fields['tipo'].choices = [
        choice for choice in SagPeriodo.TiposSagPeriodos.choices if choice[0] == 1
    ]

class SagMuestraPeriodoCarreraForm(forms.Form):
    periodo = forms.ModelChoiceField(label=u'Periodo:',
                                     queryset=SagPeriodo.objects.filter(status=True),
                                     required=False,
                                     widget=forms.Select(attrs={'formwidth': '25%'}))
    facultad = forms.ModelChoiceField(label=u'Filtre por Facultad:',
                                      queryset=Coordinacion.objects.filter(status=True, excluir=False),
                                      required=False,
                                      widget=forms.Select(attrs={'formwidth': '35%'}))
    carrera = forms.ModelChoiceField(label=u'Carrera:',
                                     queryset=Carrera.objects.filter(status=True),
                                     required=False,
                                     widget=forms.Select(attrs={'formwidth': '40%'}))

    # def saca_facultad(self):
    #     return self.carrera.coordinacion_set.get()

    def listaCarreraUsada(self, idperiodo):
        carrusada = SagMuestraPeriodoCarrera.objects.values_list('carrera', flat=True).filter(periodo=idperiodo,
                                                                                              status=True).order_by(
            'id')
        listacarrera = Carrera.objects.filter(coordinacion__excluir=False).exclude(pk__in=carrusada)
        self.fields['carrera'].queryset = listacarrera

    def bloquear(self):
        deshabilitar_campo(self, 'periodo')
        # deshabilitar_campo(self, 'carrera')


class SagEncuestaItemForm(forms.Form):
    nomitem = forms.CharField(label=u'Descripción:', widget=forms.TextInput(attrs={'rows': '3', 'with': '100'}),
                              required=False)
    valoritem = forms.IntegerField(label=u"Valor:", required=True, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '100px', 'separator': 'true'}))
    ordenitem = forms.IntegerField(label=u"Orden:", required=True, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '200px'}))


class SagInformeForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre Informe:', widget=forms.Textarea(attrs={'rows': '3', 'with': '100'}),
                             required=False)
    fechainicio = forms.DateField(label=u"Fecha inicio", required=False, input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fechafin = forms.DateField(label=u"Fecha fin", required=False, input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y',
                                                    attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 6Mb, en formato doc, docx, pdf', ext_whitelist=(".pdf",),
                           max_upload_size=6291456)


class SagActividadForm(forms.Form):
    codigo = forms.CharField(max_length=100, label=u'Codigo', required=False)
    nombre = forms.CharField(label=u'Nombre:', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=False)
    vigente = forms.BooleanField(label=u"Vigente", required=False, initial=False)

    def adicionar(self, persona):
        del self.fields['vigente']
        if not persona.usuario.is_superuser:
            deshabilitar_campo(self, 'codigo')

    def editar(self, persona):
        if not persona.usuario.is_superuser:
            deshabilitar_campo(self, 'codigo')


class SagMuestraForm(forms.Form):
    sagperiodo = forms.ModelChoiceField(label=u"Periodo", queryset=SagPeriodo.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    inscripcion = forms.IntegerField(initial=0, required=False, label=u'Estudiante', widget=forms.TextInput(attrs={'select2search': 'true'}))

    def editar(self, muestra):
        deshabilitar_campo(self, 'sagperiodo')
        self.fields['inscripcion'].widget.attrs['descripcion'] = muestra.inscripcion.persona.nombre_completo()
        self.fields['inscripcion'].initial = muestra.inscripcion.id


class SagImportarMuestraForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=4194304)


class SagPredecesor2Form(forms.Form):
    pass


class SagPredecesorForm(forms.Form):
    predecesora = forms.ModelMultipleChoiceField(label=u'Preguntas', queryset=SagPregunta.objects.filter(status=True),
                                                 widget=forms.CheckboxSelectMultiple(), show_hidden_initial=False,
                                                 required=False)

    def listar(self, encuesta):
        preguntas = SagPreguntaEncuesta.objects.filter(status=True, sagencuesta=encuesta).values_list('sagpregunta__id',
                                                                                                      flat=True)
        self.fields['predecesora'].queryset = SagPregunta.objects.filter(status=True, id__in=preguntas)


class DistributivoProfesorForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    coordinacion = forms.ModelChoiceField(label=u"Facultad", queryset=Coordinacion.objects.all(), required=False,
                                          widget=forms.Select(attrs={'formwidth': '75%'}))
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False,
                                     widget=forms.Select(attrs={'formwidth': '75%'}))


class CambioInscripcionSeccionForm(forms.Form):
    seccionsolicitada = ModelChoiceField(label=u'Sección Solicitada',
                                         queryset=Sesion.objects.filter(status=True).exclude(id__in=[8, 9, 10]),
                                         required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    motivo = forms.CharField(label=u'Motivo', widget=forms.Textarea, required=False)
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf',
                           ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=4194304)


class ConvenioPagoForm(forms.Form):
    from sagest.models import TipoOtroRubro
    periodo = forms.ModelChoiceField(label=u'Periodo', queryset=Periodo.objects, required=False,
                                     widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '100%'}))
    carrera = forms.ModelChoiceField(label=u'Carrera', queryset=Carrera.objects, required=False,
                                     widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    rubro = forms.ModelChoiceField(label=u'Rubro', queryset=TipoOtroRubro.objects, required=False,
                                   widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    inicio = forms.DateField(label=u"Fecha inicio", required=False, input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y',
                                                  attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fin = forms.DateField(label=u"Fecha fin", required=False, input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    plazo = forms.IntegerField(label=u'Plazo Máximo', initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '33%'}))
    inicioproceso = forms.DateField(label=u"Inicio proceso", required=False, input_formats=['%d-%m-%Y'],
                                    widget=DateTimeInput(format='%d-%m-%Y',
                                                         attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    finproceso = forms.DateField(label=u"Fin proceso", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    valormaestria = forms.DecimalField(initial="0.00", label=u'Valor', required=False, widget=forms.TextInput(
        attrs={'class': 'imp-moneda', 'decimal': "2", 'formwidth': '33%'}))
    valorinscripcion = forms.DecimalField(initial="0.00", label=u'Valor Inscripcion', required=False,
                                          widget=forms.TextInput(
                                              attrs={'class': 'imp-moneda', 'decimal': "2", 'formwidth': '33%'}))
    valormatricula = forms.DecimalField(initial="0.00", label=u'Valor Matrícula', required=False,
                                        widget=forms.TextInput(
                                            attrs={'class': 'imp-moneda', 'decimal': "2", 'formwidth': '33%'}))

    def editar(self):
        deshabilitar_campo(self, 'periodo')
        deshabilitar_campo(self, 'carrera')
        deshabilitar_campo(self, 'rubro')


class SolicitudForm(forms.Form):
    tiposolicitud = forms.ModelChoiceField(label=u"Literales",
                                           queryset=TipoSolicitud.objects.filter(status=True).order_by('id'),
                                           required=True, widget=forms.Select(attrs={'class': 'imp-100'}))
    descripcion = forms.CharField(label=u'Detalle', widget=forms.Textarea(attrs={'rows': '3', 'with': '100'}),
                                  required=True)
    adjunto = ExtFileField(label=u'Adjunto', required=False, help_text=u'Tamaño Maximo permitido 2Mb, en formato pdf',
                           ext_whitelist=(".pdf",), max_upload_size=2194304)


class FechaMateriaRecordForm(forms.Form):
    inicio = forms.DateField(label=u"Fecha inicio", input_formats=['%d-%m-%Y'],
                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fin = forms.DateField(label=u"Fecha fin", input_formats=['%d-%m-%Y'],
                          widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class MallaHistoricaForm(forms.Form):
    asignaturamallahistorico = forms.ModelChoiceField(label=u"Materia Malla Historica",
                                                      queryset=AsignaturaMalla.objects.filter(status=True),
                                                      required=True, widget=forms.Select())

    def solo_mallas_carrera(self, inscripcion):
        carrera = inscripcion.carrera
        idmateriasrecord = RecordAcademico.objects.values_list('asignatura__id', flat=True).filter(status=True,
                                                                                                   inscripcion=inscripcion).exclude(
            asignatura=None)
        self.fields['asignaturamallahistorico'].queryset = AsignaturaMalla.objects.filter(
            malla__carrera=carrera).exclude(asignatura__id__in=idmateriasrecord)


class PonenciaInvestigacionForm(FormModeloBase):
    titulo = forms.CharField(label=u"Título de la Ponencia", widget=forms.Textarea(attrs={'rows': '3', 'col': '12'}), required=False)
    resumen = forms.CharField(label=u'Resumen (Asbtract)', widget=forms.Textarea(attrs={'rows': '5', 'col': '12'}), required=False)
    congreso = forms.CharField(label=u"Congreso", widget=forms.Textarea(attrs={'rows': '2', 'col': '12', 'separator2': True, 'separatortitle': 'Datos del Congreso'}), required=False)
    pais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.all(), required=False, widget=forms.Select(attrs={'col': '12'}))
    ciudad = forms.CharField(label=u"Ciudad", max_length=250, widget=forms.TextInput(attrs={'col': '12', 'autocomplete': 'off', 'style': 'text-transform:uppercase'}), required=False)
    fechainicio = forms.DateField(label=u"Fecha Inicio", initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6'}), required=False)
    fechafin = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6'}), required=False)
    enlace = forms.CharField(label=u"Enlace Congreso", max_length=1000, widget=forms.TextInput(attrs={'col': '12', 'autocomplete': 'off', 'style': 'text-transform:lowercase'}), required=False)
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6', 'separator2': True, 'separatortitle': 'Datos de la Ponencia'}), required=False)
    campoamplio = forms.ModelChoiceField(label=u"Campo Amplio", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'col': '12'}))
    campoespecifico = forms.ModelChoiceField(label=u"Campo Específico", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False, widget=forms.Select(attrs={'col': '12'}))
    campodetallado = forms.ModelChoiceField(label=u"Campo Detallado", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False, widget=forms.Select(attrs={'col': '12'}))
    lineainvestigacion = forms.ModelChoiceField(label=u"Línea Investigación", queryset=LineaInvestigacion.objects.filter(vigente=True, status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'col': '12'}))
    sublineainvestigacion = forms.ModelChoiceField(label=u"Sub-Línea Investigación", queryset=SubLineaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'col': '12'}))
    provieneproyecto = forms.BooleanField(label=u"¿Proviene de un proyecto de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'col': '6'}))
    tipoproyecto = forms.ChoiceField(label=u'Tipo de Proyecto', choices=TIPO_PROYECTO_ARTICULO, required=False, widget=forms.Select(attrs={'col': '6'}))
    proyectointerno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectosInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'col': '12'}))
    proyectoexterno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'col': '12'}))
    pertenecegrupoinv = forms.BooleanField(label=u"¿Pertenece a un Grupo de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'col': '12'}))
    grupoinvestigacion = forms.ModelChoiceField(label=u"Grupo de investigación", queryset=GrupoInvestigacion.objects.filter(status=True, vigente=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'col': '12'}))
    numerocongreso = forms.CharField(label=u"Número Congreso", max_length=80, widget=forms.TextInput(attrs={'col': '12', 'autocomplete': 'off', 'style': 'text-transform:uppercase'}), required=False)
    nombrecomite = forms.CharField(label=u'Nombre del Comité', widget=forms.Textarea(attrs={'rows': '2', 'col': '12'}), required=False)
    organizadorevento = forms.CharField(label=u'Organizador Evento', widget=forms.Textarea(attrs={'rows': '2', 'col': '12'}), required=False)
    comiteorganizador = forms.CharField(label=u'Comité Organizador', widget=forms.Textarea(attrs={'rows': '2', 'col': '12'}), required=False)
    accesoabierto = forms.BooleanField(label=u"¿Acceso abierto?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'col': '12'}))
    archivocongreso = ExtFileField(label=u'Memorias del congreso', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'col': '6', 'separator2': True, 'separatortitle': 'Evidencias Documentales'}))
    archivocarta = ExtFileField(label=u'Carta de aceptación o invitación', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'col': '6'}))
    archivoparticipacion = ExtFileField(label=u'Certificado participación', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'col': '6'}))
    archivocomite = ExtFileField(label=u'Comité organizador y científico', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'col': '6'}))
    archivoprograma = ExtFileField(label=u'Programa del evento', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'col': '6'}))


    # nombre = forms.CharField(label=u'Título de Ponencia', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    # resumen = forms.CharField(label=u'Resumen (Asbtract)', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    # evento = forms.CharField(label=u'Congreso', widget=forms.TextInput(attrs={'rows': '3', 'separator2': True, 'separatortitle': 'Datos del Congreso'}), required=False)
    # pais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.filter(status=True), required=False, widget=forms.Select())
    # ciudad = forms.CharField(label=u'Ciudad', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    # fechainicio = forms.DateField(label=u"Fecha Inicio", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    # fechafin = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    # enlace = forms.CharField(label='Enlace de Congreso', widget=forms.TextInput(attrs={'rows': '3', 'style': 'text-transform:lowercase'}), required=False)
    # estadopublicacion = forms.ChoiceField(label=u'Estado de Publicación', choices=ESTADO_PUBLICACION_ARTICULO, required=False, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%', 'separator2': True, 'separatortitle': 'Datos de la Ponencia'}))
    # fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    # areaconocimiento = forms.ModelChoiceField(label=u"Campo Amplio", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False, widget=forms.Select())
    # subareaconocimiento = forms.ModelChoiceField(label=u"Campo Específico", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    # subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Campo Detallado", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    # lineainvestigacion = forms.ModelChoiceField(label=u"Línea Investigación", queryset=LineaInvestigacion.objects.filter(vigente=True, status=True).order_by('nombre'), required=False, widget=forms.Select())
    # sublineainvestigacion = forms.ModelChoiceField(label=u"Sub-Línea Investigación", queryset=SubLineaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    # provieneproyecto = forms.BooleanField(label=u"¿Proviene de un proyecto de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    # tipoproyecto = forms.ChoiceField(label=u'Tipo de Proyecto', choices=TIPO_PROYECTO_ARTICULO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    # proyectointerno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectosInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    # proyectoexterno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    # pertenecegrupoinv = forms.BooleanField(label=u"¿Pertenece a un Grupo de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    # grupoinvestigacion = forms.ModelChoiceField(label=u"Grupo de investigación", queryset=GrupoInvestigacion.objects.filter(status=True, vigente=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    #
    #
    # # evento = forms.CharField(label=u'Evento', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    # # estado = forms.ChoiceField(label=u'Estado de Publicación', choices=ESTADO_PUBLICACION_PON, widget=forms.Select(attrs={'class': 'imp-50'}))
    # # fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    # # ciudad = forms.CharField(label=u'Ciudad', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    # # pais = forms.ModelChoiceField(label=u"Paìs", queryset=Pais.objects.all().filter(status=True), required=True, widget=forms.Select())
    # #
    # # areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=True, widget=forms.Select())
    # # subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=True, widget=forms.Select())
    # # subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especifica conocimiento", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=True, widget=forms.Select())
    # #
    #
    #
    # archivocongreso = ExtFileField(label=u'Memorias del congreso', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%', 'separator2': True, 'separatortitle': 'Evidencias Documentales'}))
    # archivocarta = ExtFileField(label=u'Carta de aceptación o invitación', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    # archivoparticipacion = ExtFileField(label=u'Certificado participación', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    # archivocomite = ExtFileField(label=u'Comité organizador y científico', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    # archivoprograma = ExtFileField(label=u'Programa del evento', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    #
    #
    # # archivo = ExtFileField(label=u'Archivo Comite', required=False,
    # #                        help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf',
    # #                        ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=4194304)
    # accesoabierto = forms.BooleanField(label=u'Acceso Abierto?', required=False)

    # def adicionar(self):
    #     self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
    #         areaconocimiento=None)
    #     self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
    #         areaconocimiento=None)
    #
    # def editar(self, programas):
    #     self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
    #         areaconocimiento=programas.areaconocimiento, vigente=True)
    #     self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
    #         areaconocimiento=programas.subareaconocimiento, vigente=True)


class PonenciaInvestigacionRegistroForm(forms.Form):
    nombre = forms.CharField(label=u'Título de Ponencia', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    resumen = forms.CharField(label=u'Resumen (Asbtract)', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    evento = forms.CharField(label=u'Congreso', widget=forms.TextInput(attrs={'rows': '3', 'separator2': True, 'separatortitle': 'Datos del Congreso'}), required=False)
    pais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.filter(status=True), required=False, widget=forms.Select())
    ciudad = forms.CharField(label=u'Ciudad', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    fechainicio = forms.DateField(label=u"Fecha Inicio", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    enlace = forms.CharField(label='Enlace de Congreso', widget=forms.TextInput(attrs={'rows': '3', 'style': 'text-transform:lowercase'}), required=False)
    estadopublicacion = forms.ChoiceField(label=u'Estado de Publicación', choices=ESTADO_PUBLICACION_ARTICULO, required=False, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%', 'separator2': True, 'separatortitle': 'Datos de la Ponencia'}))
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    areaconocimiento = forms.ModelChoiceField(label=u"Campo Amplio", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False, widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Campo Específico", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Campo Detallado", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    lineainvestigacion = forms.ModelChoiceField(label=u"Línea Investigación", queryset=LineaInvestigacion.objects.filter(vigente=True, status=True).order_by('nombre'), required=False, widget=forms.Select())
    sublineainvestigacion = forms.ModelChoiceField(label=u"Sub-Línea Investigación", queryset=SubLineaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    provieneproyecto = forms.BooleanField(label=u"¿Proviene de un proyecto de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    tipoproyecto = forms.ChoiceField(label=u'Tipo de Proyecto', choices=TIPO_PROYECTO_ARTICULO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    proyectointerno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectosInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    proyectoexterno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    pertenecegrupoinv = forms.BooleanField(label=u"¿Pertenece a un Grupo de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    grupoinvestigacion = forms.ModelChoiceField(label=u"Grupo de investigación", queryset=GrupoInvestigacion.objects.filter(status=True, vigente=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    comitecientifico = forms.BooleanField(label=u"¿Existe Comité científico evaluador?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    numerocongreso = forms.CharField(label=u'Número Congreso', max_length=80, widget=forms.Textarea(attrs={'rows': '1'}), required=False)
    organizadorevento = forms.CharField(label=u'Organizador Evento', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    comiteorganizador = forms.CharField(label=u'Comite Organizador', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    accesoabierto = forms.BooleanField(label=u'Acceso Abierto?', required=False)

    def editar(self, solicitud):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=solicitud.areaconocimiento, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=solicitud.subareaconocimiento, vigente=True)
        self.fields['sublineainvestigacion'].queryset = SubLineaInvestigacion.objects.filter(lineainvestigacion=solicitud.lineainvestigacion)

        if solicitud.provieneproyecto:
            if solicitud.tipoproyecto < 3:
                self.fields['proyectointerno'].queryset = ProyectosInvestigacion.objects.filter(status=True, tipo=solicitud.tipoproyecto).order_by('nombre')
            else:
                self.fields['proyectoexterno'].queryset = ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre')


class PonenciaInvestigacionAuxForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    evento = forms.CharField(label=u'Evento', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    enlace = forms.CharField(label=u'Enlace', widget=forms.TextInput(attrs={'rows': '2'}), required=False)
    estado = forms.ChoiceField(label=u'Estado de Publicación', choices=ESTADO_PUBLICACION_PON,
                               widget=forms.Select(attrs={'class': 'imp-50'}))
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=True,
                                       input_formats=['%d-%m-%Y'],
                                       widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    ciudad = forms.CharField(label=u'Ciudad', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    pais = forms.ModelChoiceField(label=u"Paìs", queryset=Pais.objects.all().filter(status=True), required=True,
                                  widget=forms.Select())
    areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento",
                                              queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=True,
                                              widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento",
                                                 queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=True,
                                                 widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especifica conocimiento",
                                                           queryset=SubAreaEspecificaConocimientoTitulacion.objects.all(),
                                                           required=True, widget=forms.Select())
    numerocongreso = forms.CharField(label=u'Número Congreso', max_length=80,
                                     widget=forms.Textarea(attrs={'rows': '1'}), required=False)
    nombrecomite = forms.CharField(label=u'Nombre del Comité', widget=forms.Textarea(attrs={'rows': '2'}),
                                   required=False)
    archivo = ExtFileField(label=u'Archivo Comite', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf',
                           ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=4194304)
    accesoabierto = forms.BooleanField(label=u'Acceso Abierto?', required=False)

    def adicionar(self):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=None)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=None)

    def editar(self, programas):
        deshabilitar_campo(self, 'enlace')
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.areaconocimiento, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.subareaconocimiento, vigente=True)


class ParticipanteProfesorPonenciaForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipoparticipante = forms.ChoiceField(label=u'Tipo participante', choices=TIPO_PARTICIPANTE,
                                         widget=forms.Select(attrs={'class': 'imp-50'}))
    tipoparticipanteins = forms.ChoiceField(label=u'Tipo participante institucional',
                                            choices=TIPO_PARTICIPANTE_INSTITUCION,
                                            widget=forms.Select(attrs={'class': 'imp-50'}))


class ParticipanteAdministrativoPonenciaForm(forms.Form):
    administrativo = forms.IntegerField(initial=0, required=False, label=u'Administrativo',
                                        widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipoparticipante = forms.ChoiceField(label=u'Tipo participante', choices=TIPO_PARTICIPANTE,
                                         widget=forms.Select(attrs={'class': 'imp-50'}))
    tipoparticipanteins = forms.ChoiceField(label=u'Tipo participante institucional',
                                            choices=TIPO_PARTICIPANTE_INSTITUCION,
                                            widget=forms.Select(attrs={'class': 'imp-50'}))


class ParticipanteInscripcionPonenciaForm(forms.Form):
    inscripcion = forms.IntegerField(initial=0, required=False, label=u'Estudiante', widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipoparticipante = forms.ChoiceField(label=u'Tipo', choices=TIPO_PARTICIPANTE, widget=forms.Select(attrs={'class': 'imp-50'}))
    tipoparticipanteins = forms.ChoiceField(label=u'Tipo participante', choices=TIPO_PARTICIPANTE_INSTITUCION, widget=forms.Select(attrs={'class': 'imp-50'}))


class LibroInvestigacionForm(forms.Form):
    nombrelibro = forms.CharField(label=u'Título del Libro', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    codisbn = forms.CharField(label=u'Código ISBN', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    editorial = forms.CharField(label=u'Editorial', max_length=250, widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    numeroedicion = forms.CharField(label=u'Número Edición', max_length=100, widget=forms.TextInput(attrs={'rows': '3', 'formwidth': '50%'}), required=False)
    numeropagina = forms.CharField(label=u'Número Páginas', max_length=100, widget=forms.TextInput(attrs={'rows': '3', 'formwidth': '50%'}), required=False)
    registroderecho = forms.CharField(label=u'Registro Derechos Autor', max_length=250, widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    archivoderecho = ExtFileField(label=u'Documento Derechos Autor', required=False, help_text=u'Tamaño Maximo permitido 10 Mb, en formato pdf', ext_whitelist=(".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    revi_pare = forms.ChoiceField(label=u'Revisada por Pares', choices=ESTADO_PUBLICACION_PON, widget=forms.Select(attrs={'class': 'imp-50'}))
    revi_fili = forms.ChoiceField(label=u'Filiación', choices=ESTADO_PUBLICACION_PON, widget=forms.Select(attrs={'class': 'imp-50'}))
    areaconocimiento = forms.ModelChoiceField(label=u"Campo Amplio", queryset=AreaConocimientoTitulacion.objects.filter(tipo=1, status=True, vigente=True), required=True, widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Campo Específico", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=True, widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Campo Detallado", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=True, widget=forms.Select())
    lineainvestigacion = forms.ModelChoiceField(label=u"Línea Investigación", queryset=LineaInvestigacion.objects.filter(vigente=True, status=True).order_by('nombre'), required=False, widget=forms.Select())
    sublineainvestigacion = forms.ModelChoiceField(label=u"Sub-Línea Investigación", queryset=SubLineaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    provieneproyecto = forms.BooleanField(label=u"¿Proviene de un proyecto de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    tipoproyecto = forms.ChoiceField(label=u'Tipo de Proyecto', choices=TIPO_PROYECTO_ARTICULO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    proyectointerno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectosInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    proyectoexterno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    pertenecegrupoinv = forms.BooleanField(label=u"¿Pertenece a un Grupo de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    grupoinvestigacion = forms.ModelChoiceField(label=u"Grupo de investigación", queryset=GrupoInvestigacion.objects.filter(status=True, vigente=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    accesoabierto = forms.BooleanField(required=False, label=u'Acceso Abierto?', widget=forms.CheckboxInput())

    def adicionar(self):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=None)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=None)

    def editar(self, programas):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=programas.areaconocimiento, tipo=1, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=programas.subareaconocimiento, tipo=1, vigente=True)
        self.fields['sublineainvestigacion'].queryset = SubLineaInvestigacion.objects.filter(lineainvestigacion=programas.lineainvestigacion).order_by('nombre')
        if programas.provieneproyecto:
            if programas.tipoproyecto < 3:
                self.fields['proyectointerno'].queryset = ProyectosInvestigacion.objects.filter(status=True, tipo=programas.tipoproyecto).order_by('nombre')
            else:
                self.fields['proyectoexterno'].queryset = ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre')


class CapituloLibroInvestigacionForm(forms.Form):
    titulocapitulo = forms.CharField(label=u'Capítulo del Libro', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    titulolibro = forms.CharField(label=u'Título del Libro', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    codisbn = forms.CharField(label=u'Código ISBN', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    paginas = forms.CharField(label=u'Páginas', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    editorcompilador = forms.CharField(label=u'Editor o Compilador', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    totalcapitulo = forms.CharField(label=u'Total Capítulos en el libro', widget=forms.TextInput(attrs={'rows': '3', 'formwidth': '50%'}), required=False)
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    filiacion = forms.ChoiceField(label=u'Filiación', choices=ESTADO_PUBLICACION_PON, widget=forms.Select(attrs={'class': 'imp-50'}))
    areaconocimiento = forms.ModelChoiceField(label=u"Campo Amplio", queryset=AreaConocimientoTitulacion.objects.filter(tipo=1, status=True, vigente=True), required=False, widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Campo Específico", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Campo Detallado", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    lineainvestigacion = forms.ModelChoiceField(label=u"Línea Investigación", queryset=LineaInvestigacion.objects.filter(vigente=True, status=True).order_by('nombre'), required=False, widget=forms.Select())
    sublineainvestigacion = forms.ModelChoiceField(label=u"Sub-Línea Investigación", queryset=SubLineaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    provieneproyecto = forms.BooleanField(label=u"¿Proviene de un proyecto de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    tipoproyecto = forms.ChoiceField(label=u'Tipo de Proyecto', choices=TIPO_PROYECTO_ARTICULO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    proyectointerno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectosInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    proyectoexterno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    pertenecegrupoinv = forms.BooleanField(label=u"¿Pertenece a un Grupo de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    grupoinvestigacion = forms.ModelChoiceField(label=u"Grupo de investigación", queryset=GrupoInvestigacion.objects.filter(status=True, vigente=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    revisadopar = forms.BooleanField(label=u"¿Revisado por pares?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'class': 'imp-50'}))

    def adicionar(self):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=None)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=None)

    def editar(self, programas):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=programas.areaconocimiento, tipo=1, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=programas.subareaconocimiento, tipo=1, vigente=True)
        self.fields['sublineainvestigacion'].queryset = SubLineaInvestigacion.objects.filter(lineainvestigacion=programas.lineainvestigacion).order_by('nombre')
        if programas.provieneproyecto:
            if programas.tipoproyecto < 3:
                self.fields['proyectointerno'].queryset = ProyectosInvestigacion.objects.filter(status=True, tipo=programas.tipoproyecto).order_by('nombre')
            else:
                self.fields['proyectoexterno'].queryset = ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre')


class CapituloLibroHojaVidaForm(forms.Form):
    titulocapitulo = forms.CharField(label=u'Capítulo del Libro', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    resumen = forms.CharField(label=u'Resumen (Abstract)', widget=forms.Textarea(attrs={'rows': '6'}), required=False)
    titulolibro = forms.CharField(label=u'Título del Libro', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    codigoisbn = forms.CharField(label=u'Código ISBN', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    paginas = forms.CharField(label=u'Páginas', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    editorcompilador = forms.CharField(label=u'Editor o Compilador', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    filiacion = forms.ChoiceField(label=u'Filiación', choices=ESTADO_PUBLICACION_PON, widget=forms.Select(attrs={'class': 'imp-50'}))
    areaconocimiento = forms.ModelChoiceField(label=u"Área conocimiento", queryset=AreaConocimientoTitulacion.objects.filter(tipo=1, status=True, vigente=True), required=False, widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub área conocimiento", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub área especifica conocimiento", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    archivolibro = ExtFileField(label=u'Libro', required=False, help_text=u'Tamaño Máximo 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%', 'separator2': True, 'separatortitle': 'Evidencias'}))
    archivocapitulo = ExtFileField(label=u'Capítulo de libro', required=False, help_text=u'Tamaño Máximo 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivocarta = ExtFileField(label=u'Carta de aceptación', required=False, help_text=u'Tamaño Máximo 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivopares = ExtFileField(label=u'Informe revisión pares', required=False, help_text=u'Tamaño Máximo 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%'}))

    def adicionar(self):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=None)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=None)

    def editar(self, programas):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=programas.areaconocimiento, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=programas.subareaconocimiento, vigente=True)


class ParticipanteProfesorLibroForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipoparticipante = forms.ChoiceField(label=u'Tipo participante', choices=TIPO_PARTICIPANTE,
                                         widget=forms.Select(attrs={'class': 'imp-50'}))
    tipoparticipanteins = forms.ChoiceField(label=u'Tipo participante institucional',
                                            choices=TIPO_PARTICIPANTE_INSTITUCION,
                                            widget=forms.Select(attrs={'class': 'imp-50'}))


class ParticipanteAdministrativoLibroForm(forms.Form):
    administrativo = forms.IntegerField(initial=0, required=False, label=u'Administrativo',
                                        widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipoparticipante = forms.ChoiceField(label=u'Tipo participante', choices=TIPO_PARTICIPANTE,
                                         widget=forms.Select(attrs={'class': 'imp-50'}))
    tipoparticipanteins = forms.ChoiceField(label=u'Tipo participante institucional',
                                            choices=TIPO_PARTICIPANTE_INSTITUCION,
                                            widget=forms.Select(attrs={'class': 'imp-50'}))


class ParticipanteProfesorCapituloLibroForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor', widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipoparticipante = forms.ChoiceField(label=u'Tipo participante', choices=TIPO_PARTICIPANTE, widget=forms.Select(attrs={'class': 'imp-50'}))
    tipoparticipanteins = forms.ChoiceField(label=u'Tipo participante institucional', choices=TIPO_PARTICIPANTE_INSTITUCION, widget=forms.Select(attrs={'class': 'imp-50'}))


class ParticipanteAdministrativoCapituloLibroForm(forms.Form):
    administrativo = forms.IntegerField(initial=0, required=False, label=u'Administrativo', widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipoparticipante = forms.ChoiceField(label=u'Tipo participante', choices=TIPO_PARTICIPANTE, widget=forms.Select(attrs={'class': 'imp-50'}))
    tipoparticipanteins = forms.ChoiceField(label=u'Tipo participante institucional', choices=TIPO_PARTICIPANTE_INSTITUCION, widget=forms.Select(attrs={'class': 'imp-50'}))


class SolicitudPublicacionForm(forms.Form):
    tiposolicitud = forms.ChoiceField(label=u'Tipo', choices=TIPO_SOLICITUD_PUBLICACION, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    # tiposolicitud = forms.ChoiceField(label=u'Tipo', choices=TIPO_SOLICITUD_PUBLICACION_TH, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    motivo = forms.CharField(label=u'Detalle de la publicación', widget=forms.Textarea, required=False)
    revista2 = forms.ModelChoiceField(label=u'Revista', queryset=RevistaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Datos de la Revista', 'fieldbuttons': [{'id': 'add_revista', 'tooltiptext': 'Agregar', 'btnclasscolor': 'btn-success', 'btnfaicon': 'fa-plus-square'}]}))
    # revista2 = forms.ModelChoiceField(label=u'Revista', queryset=RevistaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Datos de la Revista', 'fieldbuttons': [{'id': 'add_revista', 'tooltiptext': 'Agregar', 'btnclasscolor': 'btn-success', 'btnfaicon':'fa-plus-square'}, {'id': 'edit_revista', 'tooltiptext': 'Editar', 'btnclasscolor': 'btn-warning', 'btnfaicon':'fa-edit'}]}))
    # revista2 = forms.ModelChoiceField(label=u'Revista', queryset=RevistaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Datos de la Revista'}))
    revista = forms.CharField(label=u'Revista', widget=forms.TextInput(attrs={'rows': '2'}), required=False)
    base = forms.CharField(label=u'Base Indexada', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    evento = forms.CharField(label=u'Congreso', widget=forms.TextInput(attrs={'rows': '3', 'separator2': True, 'separatortitle': 'Datos del Congreso'}), required=False)
    pais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.filter(status=True), required=False, widget=forms.Select())
    ciudad = forms.CharField(label=u'Ciudad', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    estadopublicacion = forms.ChoiceField(label=u'Estado de Publicación', choices=ESTADO_PUBLICACION_ARTICULO, required=False, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '100%', 'separator2': True, 'separatortitle': 'Datos del Artículo'}))
    fecharecepcion = forms.DateField(label=u"Fecha Recepción", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fechaaprobacion = forms.DateField(label=u"Fecha Aprobación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    enlace = forms.CharField(label='Enlace Artículo', widget=forms.TextInput(attrs={'rows': '3', 'style': 'text-transform:lowercase'}), required=False)
    numero = forms.CharField(label=u'Número de la Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    volumen = forms.CharField(label=u'Volumen de Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    paginas = forms.CharField(label=u'Páginas del artículo en la Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    estadopublicacionponencia = forms.ChoiceField(label=u'Estado de Publicación', choices=ESTADO_PUBLICACION_ARTICULO, required=False, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%', 'separator2': True, 'separatortitle': 'Datos de la Ponencia'}))
    fechapublicacionponencia = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False, widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especifica conocimiento", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    lineainvestigacion = forms.ModelChoiceField(label=u"Línea Investigación", queryset=LineaInvestigacion.objects.filter(vigente=True, status=True).order_by('nombre'), required=False, widget=forms.Select())
    sublineainvestigacion = forms.ModelChoiceField(label=u"Sub-Línea Investigación", queryset=SubLineaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    provieneproyecto = forms.BooleanField(label=u"¿Proviene de un proyecto de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    tipoproyecto = forms.ChoiceField(label=u'Tipo de Proyecto', choices=TIPO_PROYECTO_ARTICULO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    proyectointerno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectosInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    proyectoexterno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    comitecientifico = forms.BooleanField(label=u"¿Existe Comité científico evaluador?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))

    # archivocertificado = ExtFileField(label=u'Carta Aceptación', required=False, help_text=u'(Certificado de publicación/Certificado de aceptación/Carta de aceptación de la ponencia), Tamaño Maximo permitido 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '100%', 'separator2': True, 'separatortitle': 'Evidencias'}))
    archivocertificado = ExtFileField(label=u'Carta Aceptación', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '100%', 'separator2': True, 'separatortitle': 'Evidencias'}))
    # archivo = ExtFileField(label=u'Artículo Publicado', required=False, help_text=u'(Libro / Capítulo Libro/Artículo en revista / Ponencia), Tamaño Maximo permitido 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '100%', 'separator2': True, 'separatortitle': 'Evidencias'}))
    archivo = ExtFileField(label=u'Publicación', required=False, help_text=u'(Libro / Capítulo Libro/Artículo en revista / Ponencia), Tamaño Maximo permitido 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, )
    archivoparticipacion = ExtFileField(label=u'Certificado Participación', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivocomite = ExtFileField(label=u'Comité Científico evaluador', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%'}))

    def editar(self, solicitud):
        deshabilitar_campo(self, 'tiposolicitud')

        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=solicitud.areaconocimiento, vigente=True).order_by('nombre')
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=solicitud.subareaconocimiento, vigente=True).order_by('nombre')
        self.fields['sublineainvestigacion'].queryset = SubLineaInvestigacion.objects.filter(lineainvestigacion=solicitud.lineainvestigacion).order_by('nombre')
        if solicitud.provieneproyecto:
            if solicitud.tipoproyecto < 3:
                self.fields['proyectointerno'].queryset = ProyectosInvestigacion.objects.filter(status=True, tipo=solicitud.tipoproyecto).order_by('nombre')
            else:
                self.fields['proyectoexterno'].queryset = ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre')

        # self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
        #     areaconocimiento=solicitud.areaconocimiento)
        # self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
        #     areaconocimiento=solicitud.subareaconocimiento)


class ArticuloProceedingForm(forms.Form):
    tiposolicitud = forms.ChoiceField(label=u'Tipo', choices=TIPO_SOLICITUD_PUBLICACION, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    resumen = forms.CharField(label=u'Resumen (Asbtract)', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    revista2 = forms.ModelChoiceField(label=u'Revista', queryset=RevistaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Datos de la Revista', 'fieldbuttons': [{'id': 'add_revista', 'tooltiptext': 'Agregar', 'btnclasscolor': 'btn-success', 'btnfaicon': 'fa-plus-square'}]}))
    # revista2 = forms.ModelChoiceField(label=u'Revista', queryset=RevistaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Datos de la Revista', 'fieldbuttons': [{'id': 'add_revista', 'tooltiptext': 'Agregar', 'btnclasscolor': 'btn-success', 'btnfaicon':'fa-plus-square'}, {'id': 'edit_revista', 'tooltiptext': 'Editar', 'btnclasscolor': 'btn-warning', 'btnfaicon':'fa-edit'}]}))
    # revista2 = forms.ModelChoiceField(label=u'Revista', queryset=RevistaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Datos de la Revista'}))
    revista = forms.CharField(label=u'Revista', widget=forms.TextInput(attrs={'rows': '2'}), required=False)
    base = forms.CharField(label=u'Base Indexada', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'formwidth': '50%'}), required=False)
    categoriabase = forms.CharField(label=u'Categoría', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'formwidth': '50%'}), required=False)
    estadopublicacion = forms.ChoiceField(label=u'Estado de Publicación', choices=ESTADO_PUBLICACION_ARTICULO, required=False, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '100%', 'separator2': True, 'separatortitle': 'Datos del Artículo'}))
    fecharecepcion = forms.DateField(label=u"Fecha Recepción", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fechaaprobacion = forms.DateField(label=u"Fecha Aprobación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    enlace = forms.CharField(label='Enlace Artículo', widget=forms.TextInput(attrs={'rows': '3', 'style': 'text-transform:lowercase'}), required=False)
    numero = forms.CharField(label=u'Número de la Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    volumen = forms.CharField(label=u'Volumen de Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    paginas = forms.CharField(label=u'Páginas del artículo en la Revista', widget=forms.TextInput(attrs={'rows': '3'}), required=False)
    areaconocimiento = forms.ModelChoiceField(label=u"Campo Amplio", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False, widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Campo Específico", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Campo Detallado", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    lineainvestigacion = forms.ModelChoiceField(label=u"Línea Investigación", queryset=LineaInvestigacion.objects.filter(vigente=True, status=True).order_by('nombre'), required=False, widget=forms.Select())
    sublineainvestigacion = forms.ModelChoiceField(label=u"Sub-Línea Investigación", queryset=SubLineaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    provieneproyecto = forms.BooleanField(label=u"¿Proviene de un proyecto de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    tipoproyecto = forms.ChoiceField(label=u'Tipo de Proyecto', choices=TIPO_PROYECTO_ARTICULO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    proyectointerno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectosInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    proyectoexterno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    pertenecegrupoinv = forms.BooleanField(label=u"¿Pertenece a un Grupo de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    grupoinvestigacion = forms.ModelChoiceField(label=u"Grupo de investigación", queryset=GrupoInvestigacion.objects.filter(status=True, vigente=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    archivoportada = ExtFileField(label=u'Portada e índice', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%', 'separator2': True, 'separatortitle': 'Evidencias Documentales'}))
    archivoarticulo = ExtFileField(label=u'Artículo', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivocarta = ExtFileField(label=u'Carta de aceptación (Opcional)', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf (Opcional)', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    doi = forms.CharField(label=u'DOI Artículo', widget=forms.TextInput(attrs={'rows': '3', 'separator2': True, 'separatortitle': 'Datos Adicionales del Artículo'}), required=False)
    revistaindexada = forms.BooleanField(label=u"Revista Indexada", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    accesoabierto = forms.BooleanField(label=u"Artículo Acceso Abierto", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    cuartilarticulo = forms.ChoiceField(label=u'Cuartil', choices=CUARTIL_ARTICULO, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%'}), required=False)
    sjrarticulo = forms.CharField(label=u'SJR', widget=forms.TextInput(attrs={'rows': '3', 'formwidth': '50%'}), required=False)
    jcrarticulo = forms.CharField(label=u'JCR', widget=forms.TextInput(attrs={'rows': '3', 'formwidth': '50%'}), required=False)
    categoriaarticulo = forms.CharField(label=u'Categoría Artículo', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'formwidth': '50%'}), required=False)
    observacion = forms.CharField(label=u'Observación:', widget=forms.Textarea(attrs={'rows': '3', 'class': 'imp-100'}), required=False)

    def editar(self, solicitud):
        deshabilitar_campo(self, 'tiposolicitud')

        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=solicitud.areaconocimiento, vigente=True).order_by('nombre')
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=solicitud.subareaconocimiento, vigente=True).order_by('nombre')
        self.fields['sublineainvestigacion'].queryset = SubLineaInvestigacion.objects.filter(lineainvestigacion=solicitud.lineainvestigacion).order_by('nombre')
        if solicitud.provieneproyecto:
            if solicitud.tipoproyecto < 3:
                self.fields['proyectointerno'].queryset = ProyectosInvestigacion.objects.filter(status=True, tipo=solicitud.tipoproyecto).order_by('nombre')
            else:
                self.fields['proyectoexterno'].queryset = ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre')


class SolicitudPublicacionLibroForm(forms.Form):
    tiposolicitud = forms.ChoiceField(label=u'Tipo', choices=((3, u'LIBRO'),), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    titulo = forms.CharField(label=u'Título del libro', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    fechapublicacion = forms.DateField(label=u"Fecha Publicación", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False, widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especifica conocimiento", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    archivocertificado = ExtFileField(label=u'Carta Aceptación', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '100%', 'separator2': True, 'separatortitle': 'Evidencias'}))
    archivo = ExtFileField(label=u'Publicación', required=False, help_text=u'(Libro), Tamaño Maximo permitido 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, )

    def editar(self, solicitud):
        deshabilitar_campo(self, 'tiposolicitud')

        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=solicitud.areaconocimiento, vigente=True).order_by('nombre')
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=solicitud.subareaconocimiento, vigente=True).order_by('nombre')


class SolicitudPublicacionCapituloLibroForm(forms.Form):
    tiposolicitud = forms.ChoiceField(label=u'Tipo', choices=((4, u'CAPITULO LIBRO'),), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    resumen = forms.CharField(label=u'Resumen (Abstract)', widget=forms.Textarea, required=False)
    archivocertificado = ExtFileField(label=u'Carta Aceptación', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '100%', 'separator2': True, 'separatortitle': 'Evidencias'}))
    archivo = ExtFileField(label=u'Publicación', required=False, help_text=u'(Capítulo de Libro), Tamaño Maximo permitido 10Mb, en formato doc, docx, pdf', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=10485760, )

    def editar(self, solicitud):
        deshabilitar_campo(self, 'tiposolicitud')


class CalificacionDocenteAnteproyectoForm(forms.Form):
    calificacion = forms.FloatField(label=u'Calificación', initial="0.00", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))


class AnteproyectoForm(forms.Form):
    titulo = forms.CharField(max_length=300, label=u'Nombre Proyecto', widget=forms.Textarea(attrs={'rows': '4'}))
    sublineainvestigacion = ModelChoiceField(label=u'Sublinea de investg.',
                                             queryset=SubLineaInvestigacion.objects.all(), required=False)
    palabrasclaves = forms.CharField(label=u'Palabras Claves', max_length=150, required=False, widget=forms.Textarea(
        attrs={'rows': '3', 'placeholder': 'Palabras claves separadas por coma'}))
    tipotrabajotitulacion = ModelChoiceField(label=u'Tipo trabajo', queryset=TipoTrabajoTitulacion.objects.all(),
                                             required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    tutorsugerido = ModelChoiceField(label=u'Tutor Sugerido', queryset=Profesor.objects.filter(activo=True),
                                     required=False, widget=forms.Select(attrs={'class': 'imp-75'}))
    problema = forms.CharField(label=u'Problema', required=False, widget=forms.Textarea(attrs={'rows': '5'}))
    objetivogeneral = forms.CharField(label=u'Objetivo general', required=False,
                                      widget=forms.Textarea(attrs={'rows': '5'}))
    objetivoespecifico = forms.CharField(label=u'Objetivo especifico', required=False,
                                         widget=forms.Textarea(attrs={'rows': '5'}))
    metodo = forms.CharField(label=u'Metodo', required=False, widget=forms.Textarea(attrs={'rows': '5'}))
    descripcionpropuesta = forms.CharField(label=u'Descripción propuesta', required=False,
                                           widget=forms.Textarea(attrs={'rows': '5'}))
    resultadoesperado = forms.CharField(label=u'Resultado esperado', required=False,
                                        widget=forms.Textarea(attrs={'rows': '5'}))
    referencias = forms.CharField(label=u'Referencias', required=False, widget=forms.Textarea(attrs={'rows': '5'}))

    def editar(self):
        deshabilitar_campo(self, 'titulo')
        deshabilitar_campo(self, 'sublineainvestigacion')
        deshabilitar_campo(self, 'palabrasclaves')
        deshabilitar_campo(self, 'tipotrabajotitulacion')
        deshabilitar_campo(self, 'tutorsugerido')
        deshabilitar_campo(self, 'problema')
        deshabilitar_campo(self, 'objetivogeneral')
        deshabilitar_campo(self, 'objetivoespecifico')
        deshabilitar_campo(self, 'metodo')
        deshabilitar_campo(self, 'descripcionpropuesta')
        deshabilitar_campo(self, 'resultadoesperado')
        deshabilitar_campo(self, 'referencias')


class AsignarCalificadorProyectoForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha Max", input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=True)
    calificador = ModelChoiceField(label=u'Docente Calificador',
                                   queryset=Profesor.objects.filter(activo=True, nivelcategoria=TITULAR_ID),
                                   required=True,
                                   widget=forms.Select(attrs={'class': 'imp-75'}))


class CalificarAntepoyectoForm(forms.Form):
    calificacion = forms.FloatField(label=u"Calificación", initial=0,
                                    widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2'}))
    observacion = forms.CharField(max_length=300, label=u'Observacion del Anteproyecto',
                                  widget=forms.Textarea(attrs={'rows': '5'}), required=False)


class AprobarAnteproyectoForm(forms.Form):
    estado = forms.ChoiceField(label=u'Estado', choices=ESTADOS_PREPROYECTO,
                               widget=forms.Select(attrs={'class': 'imp-50'}))
    observacion = forms.CharField(label=u'Observacion', required=False, widget=forms.Textarea(attrs={'rows': '5'}))
    tutor = ModelChoiceField(label=u'Tutor', queryset=Profesor.objects.filter(activo=True), required=False,
                             widget=forms.Select(attrs={'class': 'imp-75'}))


class CitaTutoriaProyectoForm(forms.Form):
    horafin = forms.TimeField(label=u"Hora", input_formats=['%H:%M'],
                              widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    anuncio = forms.CharField(label=u'Objetivo', required=False, widget=forms.Textarea(attrs={'rows': '4'}))


class SubirAvanceProyectoForm(forms.Form):
    archivo = ExtFileField(label=u'Avance Proyecto', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=4194304)


class SubirProyectoCompletoForm(forms.Form):
    archivo = ExtFileField(label=u'Proyecto completo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=4194304)


class CalificarAvanceProyectoForm(forms.Form):
    proyectogrado = forms.CharField(label=u'Proyecto Grado', required=False,
                                    widget=forms.Textarea(attrs={'rows': '3', 'readonly': True}), )
    observacion = forms.CharField(max_length=300, label=u'Observacion del Avance',
                                  widget=forms.Textarea(attrs={'rows': '5'}), required=False)


class FichaProyectoForm(forms.Form):
    nombre = forms.CharField(max_length=50, label=u'Nombre', required=True)
    descripcion = forms.CharField(max_length=300, label=u'Descripcion', widget=forms.Textarea(attrs={'rows': '5'}),
                                  required=False)
    nivel = forms.IntegerField(label=u"Nivel", initial=1, required=True)


class SubirUrkunProyectoCompletoForm(forms.Form):
    archivo = ExtFileField(label=u'Urkun Proyecto Completo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=4194304)


# FORMULARIOS PARA LAS INSCRIPCIONES
class PeriodoGrupoTitulacionForm(forms.Form):
    nombre = forms.CharField(max_length=50, label=u'Nombre Periodo')
    descripcion = forms.CharField(max_length=500, label=u'Descripción', widget=forms.Textarea(attrs={'rows': '5'}),
                                  required=False)
    fechainicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                  required=False)
    fechafin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                    attrs={
                                                                                                        'class': 'selectorfecha',
                                                                                                        'formwidth': '50%'}),
                               required=False)
    plagio = forms.IntegerField(label=u"Plagio", initial=0, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'formwidth': '50%'}))
    nrevision = forms.IntegerField(label=u"No Revisión", initial=0, required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'formwidth': '50%'}))

    def editar_grupo(self):
        deshabilitar_campo(self, 'fechainicio')
        deshabilitar_campo(self, 'fechafin')


class GrupoTitulacionForm(forms.Form):
    periodo = ModelChoiceField(label=u'Periodo',
                               queryset=PeriodoGrupoTitulacion.objects.filter(status=True).order_by('nombre'),
                               required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    nombre = forms.CharField(max_length=100, label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                  required=False)
    fechafin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                               required=False)

    def desabilitar(self):
        deshabilitar_campo(self, 'periodo')

    def desabilitarfechas(self):
        deshabilitar_campo(self, 'fechainicio')
        deshabilitar_campo(self, 'fechafin')


class TipoTitulacionForm(forms.Form):
    nombre = forms.CharField(max_length=100, label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2'}), required=True)
    codigo = forms.CharField(max_length=100, label=u'Codigo', required=True)
    caracteristica = forms.CharField(max_length=2000, label=u'Características', widget=forms.Textarea(attrs={'rows': '7'}), required=True)
    tipo = forms.ChoiceField(label=u'Tipo de Titulación', choices=TIPO_TITULACION, widget=forms.Select(attrs={'class': 'imp-50'}), required=False)
    mecanismotitulacion = forms.ModelChoiceField(label=u"Mecanismo de Titulación", queryset=GraduadoMecanismoTitulacion.objects.filter(status=True), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    rubrica = forms.ModelChoiceField(RubricaTitulacionCab.objects.filter(status=True), required=False, label=u'Rúbrica', widget=forms.Select())

    def editar(self):
        deshabilitar_campo(self, 'tipo')


class CombinarTipoTitulacionForm(forms.Form):
    tipo = forms.CharField(max_length=100, label=u'Tipo Titulación', widget=forms.Textarea(attrs={'rows': '2'}),
                           required=False)
    carreras = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.all(), required=False)

    def editar(self):
        deshabilitar_campo(self, 'tipo')


class ModeloTitulacionForm(forms.Form):
    nombre = forms.CharField(max_length=100, label=u'Nombre', required=True)
    horaspresencial = forms.IntegerField(label=u'Horas Presenciales', initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '32%'}))
    horasvirtual = forms.IntegerField(label=u'Horas Virtuales', initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '32%'}))
    horasautonoma = forms.IntegerField(label=u'Horas Autonomas', initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '36%'}))
    clases = forms.BooleanField(label=u"Clase", required=False, initial=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))
    acompanamiento = forms.BooleanField(label=u"Acompañamiento", required=False, initial=False,
                                        widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))
    activo = forms.BooleanField(label=u"Activo", required=False, initial=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))

    def editar(self):
        deshabilitar_campo(self, 'horaspresencial')
        deshabilitar_campo(self, 'horasvirtual')
        deshabilitar_campo(self, 'horasautonoma')


class AlternativaTitulacionForm(forms.Form):
    grupo = forms.CharField(max_length=500, label=u'Grupo', required=False)
    carreras = forms.ModelChoiceField(label=u'Carreras', queryset=Carrera.objects.all(), required=False)
    malla = forms.ModelChoiceField(label=u'Malla', queryset=Malla.objects.all(), required=False)
    tipotitulacion = ModelChoiceField(label=u'Tipo de Titulación', queryset=TipoTitulaciones.objects.filter(status=True), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    # rubrica = ModelChoiceField(label=u'Rúbricas', queryset=RubricaTitulacionCab.objects.filter(activa=True, status=True), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    alias = forms.CharField(max_length=50, label=u'Alias', required=False)
    sesion = ModelChoiceField(label=u'Sección', queryset=Sesion.objects.all(), required=False,
                              widget=forms.Select(attrs={'class': 'imp-50'}))
    modelotitulacion = forms.ModelMultipleChoiceField(label=u'Modelo de Titulación',
                                                      queryset=ModeloTitulacion.objects.filter(status=True,
                                                                                               activo=True),
                                                      required=False)
    horastotales = forms.CharField(label=u'Horas Totales', initial=0, required=False,
                                   widget=forms.TextInput(attrs={'formwidth': '40%'}))
    creditos = forms.FloatField(label=u'Créditos', initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '30%'}))
    horassemanales = forms.IntegerField(label=u'Horas Semanales', initial=0, required=True, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '30%'}))
    cupo = forms.IntegerField(label=u'Cupo', initial=0, required=True, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    paralelo = forms.CharField(label=u'Paralelo', required=False, max_length=10,
                               widget=forms.TextInput(attrs={'formwidth': '50%'}))
    fechainiciomatriculacion = forms.DateField(label=u"Fecha Inicio Matriculación", input_formats=['%d-%m-%Y'],
                                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha',
                                                                                              'formwidth': '50%'}),
                                               required=True)
    fechafinmatriculacion = forms.DateField(label=u"Fecha Fin Matriculación", input_formats=['%d-%m-%Y'],
                                            widget=DateTimeInput(format='%d-%m-%Y',
                                                                 attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                            required=True)
    fechaordinariainicio = forms.DateField(label=u"Fecha Inicio Ordinaria", input_formats=['%d-%m-%Y'],
                                           widget=DateTimeInput(format='%d-%m-%Y',
                                                                attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                           required=False)
    fechaordinariafin = forms.DateField(label=u"Fecha Fin Ordinaria", input_formats=['%d-%m-%Y'],
                                        widget=DateTimeInput(format='%d-%m-%Y',
                                                             attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                        required=False)
    fechaextraordinariainicio = forms.DateField(label=u"Fecha Inicio Extra Ordinaria", input_formats=['%d-%m-%Y'],
                                                widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha',
                                                                                               'formwidth': '50%'}),
                                                required=False)
    fechaextraordinariafin = forms.DateField(label=u"Fecha Fin Extra Ordinaria", input_formats=['%d-%m-%Y'],
                                             widget=DateTimeInput(format='%d-%m-%Y',
                                                                  attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                             required=False)
    fechaespecialinicio = forms.DateField(label=u"Fecha Inicio Especial", input_formats=['%d-%m-%Y'],
                                          widget=DateTimeInput(format='%d-%m-%Y',
                                                               attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                          required=False)
    fechaespecialfin = forms.DateField(label=u"Fecha Fin Especial", input_formats=['%d-%m-%Y'],
                                       widget=DateTimeInput(format='%d-%m-%Y',
                                                            attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                       required=False)
    estadocomputacion = forms.BooleanField(label=u"Computación", required=False, initial=True,
                                           widget=forms.CheckboxInput(attrs={'separator': 'false'}))
    estadoingles = forms.BooleanField(label=u"Inglés", required=False, initial=True,
                                      widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    estadovinculacion = forms.BooleanField(label=u"Vinculación con la comunidad", required=False, initial=True,
                                           widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    estadopractica = forms.BooleanField(label=u"Prácticas PreProfesionales", required=False, initial=True,
                                        widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    estadocredito = forms.BooleanField(label=u"Primero a penultimo y cursando ultimo nivel", required=False,
                                       initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    estadonivel = forms.BooleanField(label=u"Culminación de malla", required=False, initial=True,
                                     widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    estadoadeudar = forms.BooleanField(label=u"Valores Adeudar", required=False, initial=True,
                                       widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    estadofichaestudiantil = forms.BooleanField(label=u"Ficha Estudiantil", required=False, initial=True,
                                                widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    verestudiantes = forms.BooleanField(label=u"Publicar Alternativa", required=False, initial=True,
                                        widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    actividadcomplementaria = forms.BooleanField(label=u"Valida actividad complementaria", required=False,
                                                 initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    acperiodo = forms.ModelChoiceField(label=u"Desde el periodo",
                                       queryset=Periodo.objects.filter(status=True, tipo_id=2, visible=True),
                                       required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    aplicapropuesta = forms.BooleanField(label=u"No aplica propuesta", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    procesorezagado = forms.BooleanField(label=u"Proceso para alumnos rezagados", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    fechanoaplicapropuesta = forms.DateField(label=u"Fecha de examen", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '25%'}), required=False)
    docenteevaluador1 = forms.IntegerField(initial=0, required=False, label=u'Evaluador 1',
                                           widget=forms.TextInput(attrs={'select2search': 'true', 'class': 'imp-100'}))
    docenteevaluador2 = forms.IntegerField(initial=0, required=False, label=u'Evaluador 2',
                                           widget=forms.TextInput(attrs={'select2search': 'true', 'class': 'imp-100'}))
    descripcion = forms.CharField(max_length=1000, label=u'Mensaje', widget=forms.Textarea(attrs={'rows': '8'}),
                                  required=False)

    def editar(self):
        deshabilitar_campo(self, 'horastotales')
        deshabilitar_campo(self, 'grupo')
        deshabilitar_campo(self, 'creditos')

    def editarcarrera(self):
        deshabilitar_campo(self, 'carreras')

    def editarsesion(self):
        deshabilitar_campo(self, 'sesion')

    def tiene_matriculados(self):
        deshabilitar_campo(self, 'tipotitulacion')
        deshabilitar_campo(self, 'sesion')

    def editarcupolleno(self):
        deshabilitar_campo(self, 'horastotales')
        deshabilitar_campo(self, 'carreras')
        deshabilitar_campo(self, 'tipotitulacion')
        deshabilitar_campo(self, 'alias')
        deshabilitar_campo(self, 'sesion')
        deshabilitar_campo(self, 'modelotitulacion')
        deshabilitar_campo(self, 'horassemanales')
        deshabilitar_campo(self, 'cupo')
        deshabilitar_campo(self, 'paralelo')
        deshabilitar_campo(self, 'fechainiciomatriculacion')
        deshabilitar_campo(self, 'fechafinmatriculacion')
        deshabilitar_campo(self, 'fechaordinariainicio')
        deshabilitar_campo(self, 'fechaordinariafin')
        deshabilitar_campo(self, 'fechaextraordinariainicio')
        deshabilitar_campo(self, 'fechaextraordinariafin')
        deshabilitar_campo(self, 'fechaespecialinicio')
        deshabilitar_campo(self, 'fechaespecialfin')
        deshabilitar_campo(self, 'estadocomputacion')
        deshabilitar_campo(self, 'estadoingles')
        deshabilitar_campo(self, 'estadovinculacion')
        deshabilitar_campo(self, 'estadopractica')
        deshabilitar_campo(self, 'estadocredito')
        deshabilitar_campo(self, 'estadonivel')
        deshabilitar_campo(self, 'estadoadeudar')
        deshabilitar_campo(self, 'estadofichaestudiantil')
        deshabilitar_campo(self, 'descripcion')


class AlternativaTitulacionMatriForm(forms.Form):
    tipotitulacion = ModelChoiceField(label=u'Alternativa de Titulación', queryset=AlternativaTitulacion.objects.filter(status=True), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))


class PeriodoTitulacionForm(forms.Form):
    periodo = ModelChoiceField(label=u'Periodo', queryset=PeriodoGrupoTitulacion.objects.all(), required=False,
                               widget=forms.Select(attrs={'class': 'imp-50'}))


class ProfesoresTitulacionForm(forms.Form):
    profesor = forms.ModelChoiceField(label=u'Profesor', queryset=Profesor.objects.filter(activo=True),
                                      widget=forms.Select(attrs={'class': 'imp-75'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                  required=False)
    fechafin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                               required=False)
    horasemanales = forms.IntegerField(label=u'Horas Semanal', initial=0,
                                       widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


# class MatriculaArchivosForm(forms.Form):
#     archivocedula = ExtFileField(label=u'Cedula Ciudania', required=True,help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"), max_upload_size=4194304)
#     archivovotacion = ExtFileField(label=u'Certificado de Votación', required=True,help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),max_upload_size=4194304)
#

class MatriculaEstadoGestacionForm(forms.Form):
    estadogestacion = forms.BooleanField(label=u"Estado de Gestación", required=False, initial=False)


class PropuestaTitulacionForm(forms.Form):
    tema = forms.CharField(max_length=300, label=u'Tema', widget=forms.Textarea(attrs={'rows': '1'}))
    lineainvestigacion = ModelChoiceField(label=u'Linea de Investigación.',
                                          queryset=PropuestaLineaInvestigacion.objects.all(), required=False)
    sublineainvestigacion = ModelChoiceField(label=u'Sublinea de Investigación.',
                                             queryset=PropuestaSubLineaInvestigacion.objects.all(), required=False)
    palabrasclaves = forms.CharField(label=u'Palabras Claves', max_length=150, required=False, widget=forms.Textarea(
        attrs={'rows': '1', 'placeholder': 'Palabras claves separadas por coma'}))
    tipotrabajotitulacion = forms.CharField(label=u'Alternativa Titulación.', required=False,
                                            widget=forms.Textarea(attrs={'rows': '1'}))
    problema = forms.CharField(label=u'Problema', required=False, widget=forms.Textarea(attrs={'rows': '5'}))
    objetivogeneral = forms.CharField(label=u'Objetivo General', required=False,
                                      widget=forms.Textarea(attrs={'rows': '5'}))
    objetivoespecifico = forms.CharField(label=u'Objetivo Especifico', required=False,
                                         widget=forms.Textarea(attrs={'rows': '5'}))
    metodo = forms.CharField(label=u'Metodo', required=False, widget=forms.Textarea(attrs={'rows': '5'}))
    descripcionpropuesta = forms.CharField(label=u'Descripción de la Propuesta', required=False,
                                           widget=forms.Textarea(attrs={'rows': '5'}))
    resultadoesperado = forms.CharField(label=u'Resultado Esperado', required=False,
                                        widget=forms.Textarea(attrs={'rows': '5'}))
    referencias = forms.CharField(label=u'Referencias', required=False, widget=forms.Textarea(attrs={'rows': '5'}))

    def no_modificar(self):
        deshabilitar_campo(self, 'tipotrabajotitulacion')

    def editar(self):
        deshabilitar_campo(self, 'tema')
        deshabilitar_campo(self, 'lineainvestigacion')
        deshabilitar_campo(self, 'sublineainvestigacion')
        deshabilitar_campo(self, 'tipotrabajotitulacion')
        deshabilitar_campo(self, 'palabrasclaves')
        deshabilitar_campo(self, 'tipotrabajotitulacion')
        deshabilitar_campo(self, 'problema')
        deshabilitar_campo(self, 'objetivogeneral')
        deshabilitar_campo(self, 'objetivoespecifico')
        deshabilitar_campo(self, 'metodo')
        deshabilitar_campo(self, 'descripcionpropuesta')
        deshabilitar_campo(self, 'descripcionpropuesta')
        deshabilitar_campo(self, 'resultadoesperado')
        deshabilitar_campo(self, 'referencias')


class PropuestaLineaInvestigacionForm(forms.Form):
    nombre = forms.CharField(max_length=900, label=u'Nombre', required=False, widget=forms.Textarea(attrs={'rows': '3'}))
    contexto = forms.CharField(label=u'Contexto de linea', widget=forms.Textarea(attrs={'rows': '5'}), required=False)
    descripcion = forms.CharField(label=u'Descripción de linea', widget=forms.Textarea(attrs={'rows': '5'}), required=False)
    campoaccion = forms.IntegerField(initial=0, required=False, label=u'Campos de Acción', widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '50%'}))
    areaunesco = forms.ModelChoiceField(label=u"Campo de Conocimiento Unesco", queryset=AreaUnesco.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    alcance = forms.CharField(label=u'Alcance', required=False)

    # facultad = forms.ModelChoiceField(label=u"Facultad", queryset=Coordinacion.objects.filter(status=True,id__in=list(Carrera.objects.filter(~Q(coordinacionvalida=None),status=True, activa=True).distinct('coordinacionvalida_id').order_by('coordinacionvalida_id').values_list('coordinacionvalida_id', flat=True))), required=False)
    # carreras = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.all(), required=False)

    numeroresolucion = forms.CharField(max_length=100, label=u'Nº Resolución', required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '33%', 'autocomplete': 'off'}))
    fecharesolucion = forms.DateField(label=u"Fecha Resolución", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}), required=False)
    archivo = ExtFileField(label=u'Archivo Resolución', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '34%'}))

    def editar(self, linea):
        self.fields['campoaccion'].widget.attrs['descripcion'] = linea.campoaccion.nombre if linea.campoaccion else ""
        self.fields['campoaccion'].widget.attrs['value'] = linea.campoaccion.pk if linea.campoaccion else ""


class PropuestaSubLineaInvestigacionForm(forms.Form):
    linea = ModelChoiceField(label=u'Línea Investigación', queryset=PropuestaLineaInvestigacion.objects.filter(status=True), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    nombre = forms.CharField(max_length=900, label=u'SubLínea Investigación', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    contexto = forms.CharField(label=u'Contexto de linea', widget=forms.Textarea(attrs={'rows': '9'}), required=True)
    descripcion = forms.CharField(label=u'Descripción de linea', widget=forms.Textarea(attrs={'rows': '9'}), required=True)
    subarea = forms.ModelChoiceField(label=u"Subáreas Unesco", queryset=SubAreaUnesco.objects.filter(status=True), required=False)
    carreras = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.all(), required=False)

    def editarlinea(self):
        deshabilitar_campo(self, 'linea')

    def addcarrera(self, exclude, pks=None):
        del self.fields['linea']
        del self.fields['nombre']
        del self.fields['contexto']
        del self.fields['descripcion']
        del self.fields['subarea']
        self.fields['carreras'].queryset = Carrera.objects.filter(status=True).exclude(id__in=exclude)
        self.fields['carreras'].initial = pks if pks else []

class DocumentoPersonalesFrom(forms.Form):
    cedula = ExtFileField(label=u'Cédula de Ciudadania', required=True,
                          help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",),
                          max_upload_size=4194304)
    votacion = ExtFileField(label=u'Certificado de Votación', required=True,
                            help_text=u'Tamaño Maximo permitido 4Mb, en formato  pdf', ext_whitelist=(".pdf",),
                            max_upload_size=4194304)

class DocumentoPersonalesHojaVidaEncuentraEmpleoForm(forms.Form):
    hojavidaencuentraempleo = ExtFileField(label=u'Hoja Vida de Encuentra Empleo', required=True,
                          help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                          max_upload_size=10485760)

class PaeAreaPeriodoForm(forms.Form):
    area = forms.ModelChoiceField(label=u"Área", queryset=PaeAreas.objects.all().filter(status=True), required=True,
                                  widget=forms.Select())
    nombre = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class PaeInscripcionActividadesFrom(forms.Form):
    inscripcion = forms.IntegerField(initial=0, required=True, label=u'Alumno',
                                     widget=forms.TextInput(attrs={'select2search': 'true'}))


class PaeInscripcionActividadesArchivoForm(forms.Form):
    archivo = ExtFileField(label=u"Subir archivo código QR", required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%'}))


class PaeActividadesPeriodoAreasForm(forms.Form):
    coordinacion = forms.ModelChoiceField(label=u"Facultad", queryset=Coordinacion.objects.all().filter(status=True),
                                          required=True, widget=forms.Select())
    carrera = forms.ModelChoiceField(label=u"Solo estudiantes de la carrera", queryset=Carrera.objects.all(),
                                     required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    nombre = forms.CharField(label=u'Actividad', max_length=100, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    general = forms.BooleanField(label=u"Inducción General", required=False, initial=False)
    descripcion = forms.CharField(label=u'Detalle / Horario / Jornada', widget=forms.Textarea(attrs={'rows': '3'}),
                                  required=True)
    fechainicio = forms.DateField(label=u"Fecha inicio de inscripción", required=False, input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin de inscripción", required=False, input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y',
                                                    attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    cupo = forms.IntegerField(label=u"Cupo", initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    tutorprincipal = forms.ModelChoiceField(label=u"Tutor Principal",
                                            queryset=Profesor.objects.all().filter(status=True), required=False,
                                            widget=forms.Select(attrs={'formwidth': '50%'}))
    calificar = forms.BooleanField(label=u"Calificar", required=False, initial=False,
                                   widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    notaaprobacion = forms.FloatField(label=u"Calificación de aprobación", initial="0.00", widget=forms.TextInput(
        attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '50%'}))
    minimaasistencia = forms.FloatField(label=u"Min. de asistencia", initial="0.00", widget=forms.TextInput(
        attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '50%'}))
    maximacalificacion = forms.FloatField(label=u"Max. de calificación", initial="0.00", widget=forms.TextInput(
        attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '50%'}))
    nivelminimo = ModelChoiceField(label=u'Nivel minimo', required=False,
                                   queryset=NivelMalla.objects.filter(status=True),
                                   widget=forms.Select(attrs={'formwidth': '50%'}))
    nivelmaximo = ModelChoiceField(label=u'Nivel maximo', required=False,
                                   queryset=NivelMalla.objects.filter(status=True),
                                   widget=forms.Select(attrs={'formwidth': '50%'}))
    nivel = ModelChoiceField(label=u'Sección', queryset=Nivel.objects.filter(status=True), required=False)
    link = forms.CharField(max_length=300, label=u"Link evento", widget=forms.TextInput(attrs={'class': 'imp-50'}),
                           required=False)
    grupo = forms.ChoiceField(label=u'Grupo', choices=GRUPO_ACTIVIDAD, widget=forms.Select(attrs={'class': 'imp-50'}),
                              required=False)

    def editar(self, idcoordinacion):
        facultad = Coordinacion.objects.get(pk=idcoordinacion, status=True)
        self.fields['carrera'].queryset = facultad.carreras()

    def cargarnivel(self, periodo):
        self.fields['nivel'].queryset = Nivel.objects.filter(periodo=periodo, status=True)


class PaeFechaActividadesForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Tutor',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    lugar = forms.CharField(label=u'Lugar', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    fecha = forms.DateField(label=u"Fecha", required=False, input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class PracticasDepartamentoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre Departamento', max_length=100, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))


class EliminarMatriculatitulacionForm(forms.Form):
    motivo = forms.CharField(label=u'Motivo', widget=forms.Textarea(attrs={'rows': '5'}), required=True)


class LaboratorioAcademiaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=300, widget=forms.Textarea(attrs={'rows': '3'}),
                             required=False)
    ubicacion = forms.CharField(label=u'Ubicación', max_length=300, widget=forms.Textarea(attrs={'rows': '3'}),
                                required=False)
    coordinacion = forms.ModelChoiceField(label=u'Facultad', queryset=Coordinacion.objects.filter(status=True),
                                          required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    carrera = forms.ModelChoiceField(label=u'Carrera', queryset=Carrera.objects.filter(status=True),
                                     required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    capacidad = forms.IntegerField(label=u'Capacidad / # estudiantes', initial=0, required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '33%'}))
    nro_equipos = forms.IntegerField(label=u'Nro Equipos', initial=0, required=False,
                                     widget=forms.TextInput(
                                         attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '33%'}))
    metroscuadrado = forms.FloatField(label=u"Metros cuadrado", required=False, initial=0,
                              widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '33%'}))
    aula = forms.ModelChoiceField(label=u'Aula', queryset=Aula.objects.filter(status=True), required=False,
                                  widget=forms.Select(attrs={'formwidth': '50%'}))
    tipo = forms.ChoiceField(label=u'Tipo general', choices=TIPO_LABORATORIO, widget=forms.Select(attrs={'formwidth': '50%'}))
    tipolaboratorio = forms.ModelChoiceField(label=u'Tipo Laboratorio', queryset=TipoLaboratorio.objects.filter(status=True),
                                             required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    estado = forms.ChoiceField(label=u'Estado', choices=ESTADO_LABORATORIO, widget=forms.Select(attrs={'formwidth': '50%'}))
    # nro_estudiantes = forms.IntegerField(label=u'Nro Estudiantes', initial=0, required=False,
    #                                widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    fecha_inicio_utilizacion = forms.DateField(label=u"Fecha inicio utilización", required=False, input_formats=['%d-%m-%Y'],
                                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fecha_fin_utilizacion = forms.DateField(label=u"Fecha fin utilización", required=False, input_formats=['%d-%m-%Y'],
                                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))

    campo_amplio = forms.ModelChoiceField(label=u'Campo Amplio', queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=2),
                                          required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    campo_especifico = forms.ModelChoiceField(label=u'Campo Específico', queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=2),
                                              required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    campo_detallado = forms.ModelChoiceField(label=u'Campo detallado', queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=2),
                                             required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf, rar, zip',
                           ext_whitelist=(".doc", ".docx", ".pdf", ".zip", ".rar"), max_upload_size=4194304)


class NormativaLaboratorioAcademiaForm(forms.Form):
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf, rar, zip',
                           ext_whitelist=(".doc", ".docx", ".pdf", ".zip", ".rar"), max_upload_size=4194304)
    fechadesde = forms.DateField(label=u"Fecha Desde", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechahasta = forms.DateField(label=u"Fecha Hasta", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    vigente = forms.BooleanField(label=u"Vigente", required=False, initial=False)


class InventarioLaboratorioAcademiaForm(forms.Form):
    # laboratorio = forms.ModelChoiceField(label=u'Laboratorio', queryset=LaboratorioAcademia.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    activo = forms.IntegerField(initial=0, required=False, label=u'Activo',
                                widget=forms.TextInput(attrs={'select2search': 'true'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    fechadesde = forms.DateField(label=u"Fecha Desde", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechahasta = forms.DateField(label=u"Fecha Hasta", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    vigente = forms.BooleanField(label=u"Vigente", required=False, initial=False)

    def editar(self, inventariolaboratorioacademia):
        deshabilitar_campo(self, 'activo')
        self.fields['activo'].widget.attrs['descripcion'] = inventariolaboratorioacademia.activo.descripcion
        self.fields['activo'].initial = inventariolaboratorioacademia.activo.id


class InventarioLaboratorioAcademiaMaterialForm(forms.Form):
    # laboratorio = forms.ModelChoiceField(label=u'Laboratorio', queryset=LaboratorioAcademia.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    producto = forms.IntegerField(initial=0, required=False, label=u'Material',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    cantidad = forms.IntegerField(label=u'Cantidad', initial=0, required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    fechadesde = forms.DateField(label=u"Fecha Desde", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechahasta = forms.DateField(label=u"Fecha Hasta", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    vigente = forms.BooleanField(label=u"Vigente", required=False, initial=False)

    def editar(self, inventariolaboratorioacademia):
        deshabilitar_campo(self, 'producto')
        self.fields['producto'].widget.attrs['descripcion'] = inventariolaboratorioacademia.producto.descripcion
        self.fields['producto'].initial = inventariolaboratorioacademia.producto.id


class ResponsableLaboratorioAcademiaForm(forms.Form):
    # laboratorio = forms.ModelChoiceField(label=u'Laboratorio', queryset=LaboratorioAcademia.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    persona = forms.ModelChoiceField(label=u'Persona',
                                     queryset=Persona.objects.filter(status=True, administrativo__isnull=False),
                                     required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    fechadesde = forms.DateField(label=u"Fecha Desde", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechahasta = forms.DateField(label=u"Fecha Hasta", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    vigente = forms.BooleanField(label=u"Vigente", required=False, initial=False)
    archivo = ExtFileField(label=u'Documento de designación del responsable del laboratorio', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf, rar, zip',
                           ext_whitelist=(".doc", ".docx", ".pdf", ".zip", ".rar"), max_upload_size=4194304)
    jornada = forms.ModelChoiceField(label=u'Jornada', queryset=Sesion.objects.filter(Q(status=True) & ~Q(nombre__icontains='ADMISION') & (~Q(nombre__icontains='POSGRADO') | Q(pk=19))), required=False,
                                     widget=forms.Select(attrs={'formwidth': '50%'}))

    def editar(self):
        deshabilitar_campo(self, 'persona')


class PlanMantenimientoLaboratorioForm(forms.Form):
    # laboratorio = forms.ModelChoiceField(label=u'Laboratorio', queryset=LaboratorioAcademia.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    fechadesde = forms.DateField(label=u"Fecha Desde", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechahasta = forms.DateField(label=u"Fecha Hasta", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    archivo = ExtFileField(label=u'Plan de Mantenimiento', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf, rar, zip',
                           ext_whitelist=(".doc", ".docx", ".pdf", ".zip", ".rar"), max_upload_size=4194304)
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_MANTENIMIENTO, widget=forms.Select(attrs={'class': 'imp-50'}))


class LaboratorioForm(forms.Form):
    laboratorio = forms.ModelChoiceField(label=u'Laboratorio', queryset=LaboratorioAcademia.objects.filter(status=True),
                                         required=False, widget=forms.Select(attrs={'formwidth': '100%'}))


# -------------------------------------------------------------------------------------------------
#                           EXAMEN COMPLEXIVO
# -------------------------------------------------------------------------------------------------
class ComplexivoAsignaturaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True)
    codigo = forms.CharField(label=u'Codigo', required=True)


class ComplexivoMateriaForm(forms.Form):
    sesion = forms.ModelChoiceField(label=u'Jornada', queryset=Sesion.objects.all(), required=False)
    asignatura = forms.ModelChoiceField(label=u'Asignatura', queryset=ComplexivoAsignatura.objects.filter(status=True),
                                        required=False)
    profesor = forms.ModelChoiceField(label=u'Profesor', queryset=ProfesoresTitulacion.objects.filter(status=True),
                                      required=False)
    fechainicio = forms.DateField(label=u'Fecha inicio', input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u'Fecha fin', input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                    attrs={
                                                                                                        'class': 'selectorfecha',
                                                                                                        'formwidth': '50%'}))
    horatotal = forms.IntegerField(label=u'Horas Totales', required=True,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    horasemanal = forms.IntegerField(label=u'Horas Semanales', required=True,
                                     widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))

    def cargarprofesor(self, alternativa):
        self.fields['profesor'].queryset = ProfesoresTitulacion.objects.filter(status=True, alternativa=alternativa)

    def editar(self):
        deshabilitar_campo(self, 'asignatura')

    def desahabilitar(self):
        deshabilitar_campo(self, 'sesion')

    def tiene_sesion(self):
        deshabilitar_campo(self, 'sesion')

    def tiene_horario(self):
        deshabilitar_campo(self, 'profesor')
        # deshabilitar_campo(self, 'fechainicio')
        # deshabilitar_campo(self, 'fechafin')
        deshabilitar_campo(self, 'sesion')


class ComplexivoClaseForm(forms.Form):
    aula = forms.ModelChoiceField(label=u'Aula', queryset=Aula.objects.all())


class CronogramaNucleoConocimientoComplexivoForm(forms.Form):
    fechanucleobasicoinicio = forms.DateField(label=u"Inicio de Clases", input_formats=['%d-%m-%Y'],
                                              widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha',
                                                                                             'formwidth': '50%'}),
                                              required=True)
    fechanucleoproffin = forms.DateField(label=u"Fin de Clases", input_formats=['%d-%m-%Y'],
                                         widget=DateTimeInput(format='%d-%m-%Y',
                                                              attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                         required=True)


class CronogramaAprobacionExamenComplexivoForm(forms.Form):
    fechaaprobexameninicio = forms.DateField(label=u"Fecha Inicio de Aprobacion de Examen complexivo",
                                             input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={
            'class': 'selectorfecha', 'formwidth': '50%'}), required=True)
    fechaaprobexamenfin = forms.DateField(label=u"Fecha Fin de Aprobacion de Examen", input_formats=['%d-%m-%Y'],
                                          widget=DateTimeInput(format='%d-%m-%Y',
                                                               attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                          required=True)
    fechaaprobexamengraciainicio = forms.DateField(label=u"Fecha Inicio de Aprobacion de Examen de gracia",
                                                   input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                    attrs={
                                                                                                        'class': 'selectorfecha',
                                                                                                        'formwidth': '50%'}),
                                                   required=False)
    fechaaprobexamengraciafin = forms.DateField(label=u"Fecha Fin de Aprobacion de Examen de gracia",
                                                input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                 attrs={
                                                                                                     'class': 'selectorfecha',
                                                                                                     'formwidth': '50%'}),
                                                required=False)
    fechasubircalificacionesinicio = forms.DateField(
        label=u"Fecha Inicio de subida de calificaciones de Examen complexivo", input_formats=['%d-%m-%Y'],
        widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=True)
    fechasubircalificacionesfin = forms.DateField(label=u"Fecha Fin de subida de calificaciones de Examen",
                                                  input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                   attrs={
                                                                                                       'class': 'selectorfecha',
                                                                                                       'formwidth': '50%'}),
                                                  required=True)
    fechasubircalificacionesgraciainicio = forms.DateField(
        label=u"Fecha Inicio de subida de calificaciones  de Examen de gracia", input_formats=['%d-%m-%Y'],
        widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    fechasubircalificacionesgraciafin = forms.DateField(
        label=u"Fecha Fin de subida de calificaciones de Examen de gracia", input_formats=['%d-%m-%Y'],
        widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)

    def quitar_campos(self):
        del self.fields['fechasubircalificacionesgraciainicio']
        del self.fields['fechasubircalificacionesgraciafin']
        del self.fields['fechaaprobexamengraciainicio']
        del self.fields['fechaaprobexamengraciafin']


class CronogramaPropuestaPracticaComplexivoForm(forms.Form):
    fechaeleccionpropuestainicio = forms.DateField(label=u"Inicio de Elección de Tema/Línea de investigación",
                                                   input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                    attrs={
                                                                                                        'class': 'selectorfecha',
                                                                                                        'formwidth': '50%'}),
                                                   required=False)
    fechaeleccionpropuestafin = forms.DateField(label=u"Fin de Elección de Tema/Línea de investigación",
                                                input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                 attrs={
                                                                                                     'class': 'selectorfecha',
                                                                                                     'formwidth': '50%'}),
                                                required=False)
    fechapropuestainicio = forms.DateField(label=u"Inicio de Ejecución y Revisión", input_formats=['%d-%m-%Y'],
                                           widget=DateTimeInput(format='%d-%m-%Y',
                                                                attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                           required=False)
    fechapropuestafin = forms.DateField(label=u"Fin de Ejecución y Revisión", input_formats=['%d-%m-%Y'],
                                        widget=DateTimeInput(format='%d-%m-%Y',
                                                             attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                        required=False)
    # fechaentregadocumentoinicio = forms.DateField(label=u"Inicio de entrega de carpetas al tribunal", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=True)
    # fechaentregadocumentofin = forms.DateField(label=u"Fin de entrega de documentación para registro", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',attrs={'class': 'selectorfecha','formwidth': '50%'}), required=True)
    fechadefensaevaluacioninicio = forms.DateField(label=u"Inicio de Evaluación del tribunal",
                                                   input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                    attrs={
                                                                                                        'class': 'selectorfecha',
                                                                                                        'formwidth': '50%'}),
                                                   required=True)
    fechadefensaevaluacionfin = forms.DateField(label=u"Fin de Evaluación del tribunal", input_formats=['%d-%m-%Y'],
                                                widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha',
                                                                                               'formwidth': '50%'}),
                                                required=True)


class CronogramaRevisionEstudianteComplexivoForm(forms.Form):
    fechainicio = forms.DateField(label=u"Inicio subir archivo", input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                  required=True)
    fechafin = forms.DateField(label=u"Fin subir archivo", input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y',
                                                    attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                               required=True)
    calificacioninicio = forms.DateField(label=u"Inicio revisión por acompañante", input_formats=['%d-%m-%Y'],
                                         widget=DateTimeInput(format='%d-%m-%Y',
                                                              attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                         required=True)
    calificacionfin = forms.DateField(label=u"Fin revisión por acompañante", input_formats=['%d-%m-%Y'],
                                      widget=DateTimeInput(format='%d-%m-%Y',
                                                           attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                      required=True)
    # validaplagio = forms.BooleanField(label=u'Subir informe de plagio', initial=False, required=False)


class ComplexivoExamenForm(forms.Form):
    aula = forms.ModelChoiceField(label=u'Aula', queryset=Aula.objects.all(),
                                  widget=forms.Select(attrs={'formwidth': '100%'}))
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor',
                                  widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '100%'}))

    fechaexamen = forms.DateField(label=u'Fecha Examen', initial=datetime.now().strftime('%d-%m-%Y'),
                                  input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                   attrs={'class': 'selectorfecha',
                                                                                          'formwidth': '40%'}))
    fechaexamenrecuperacion = forms.DateField(label=u'Fecha Examen Recuperación', required=False,
                                              initial=(datetime.now() + timedelta(days=2)).strftime('%d-%m-%Y'),
                                              input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                               attrs={
                                                                                                   'class': 'selectorfecha',
                                                                                                   'formwidth': '50%'}))

    horainicio = forms.TimeField(label=u"Hora Inicio", required=False, initial=str(datetime.now().time()),
                                 input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                               attrs={'class': 'selectorhora',
                                                                                      'formwidth': '30%'}))
    horainiciorecuperacion = forms.TimeField(label=u"Hora Inicio Recuperación", required=False,
                                             initial=str(datetime.now().time()), input_formats=['%H:%M'],
                                             widget=DateTimeInput(format='%H:%M',
                                                                  attrs={'class': 'selectorhora', 'formwidth': '50%'}))

    horafin = forms.TimeField(label=u"Hora Fin", required=False,
                              initial=(datetime.now() + timedelta(hours=2)).strftime('%H:%M'), input_formats=['%H:%M'],
                              widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '30%'}))
    horafinrecuperacion = forms.TimeField(label=u"Hora Fin Recuperación", required=False,
                                          initial=(datetime.now() + timedelta(hours=2)).strftime('%H:%M'),
                                          input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                                        attrs={'class': 'selectorhora',
                                                                                               'formwidth': '50%'}))
    notaminima = forms.IntegerField(label=u"Nota minima", required=True, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))

    def cronograma_normal(self):
        del self.fields['fechaexamenrecuperacion']
        del self.fields['horainiciorecuperacion']
        del self.fields['horafinrecuperacion']

    def cronograma_adicional(self):
        del self.fields['fechaexamenrecuperacion']
        del self.fields['horainiciorecuperacion']
        del self.fields['horafinrecuperacion']

    def editar_crongrama_adicional(self, examen):
        self.fields['profesor'].widget.attrs['descripcion'] = examen.docente
        self.fields['profesor'].widget.attrs['value'] = examen.docente.id


class ComplexivoCalificacionDiaForm(forms.Form):
    usacronograma = forms.BooleanField(label=u'Usa cronograma', initial=False, required=False)
    diasacalificar = forms.IntegerField(label=u'Dias para calificar', initial=1, required=False,
                                        widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class GrupoInvestigacionForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    descripcion = forms.CharField(label=u'Descripción', required=False, widget=forms.Textarea(attrs={'rows': '3'}))
    director = forms.IntegerField(initial=0, required=False, label=u'Director',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    codirector = forms.IntegerField(initial=0, required=False, label=u'CoDirector',
                                    widget=forms.TextInput(attrs={'select2search': 'true'}))
    lineas = forms.ModelMultipleChoiceField(label=u'Líneas de Investigación', required=False,
                                            queryset=PropuestaLineaInvestigacion.objects.filter(status=True))
    resolucion = forms.CharField(label=u"Resolución", required=False,
                                 widget=forms.TextInput(attrs={'formwidth': '50%'}))
    archivo = ExtFileField(label=u"Subir Resolución", required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=10485760, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    fecharesolucion = forms.DateField(label=u"Fecha de Resolución", required=False,
                                      initial=datetime.now().strftime('%d-%m-%Y'), input_formats=['%d-%m-%Y'],
                                      widget=DateTimeInput(format='%d-%m-%Y',
                                                           attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechapresentacion = forms.DateField(label=u"Fecha de Presentación", required=False,
                                        initial=datetime.now().strftime('%d-%m-%Y'), input_formats=['%d-%m-%Y'],
                                        widget=DateTimeInput(format='%d-%m-%Y',
                                                             attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    observacion = forms.CharField(label=u"Observaciones", required=False, widget=forms.Textarea(attrs={'rows': '3'}))

    # def profesor_nombramiento(self):
    #     #profesores = Profesor.objects.filter(Q(persona__distributivopersona__regimenlaboral__codigo=3), (Q(persona__distributivopersona__modalidadlaboral__codigo=1)| Q(persona__distributivopersona__modalidadlaboral__codigo=5)), Q(persona__distributivopersona__estadopuesto_id=1))
    #     # profesores = Profesor.objects.all()
    #     self.fields['director'].queryset= profesores
    #     self.fields['codirector'].queryset= profesores


class ComplexivoTematicaForm(forms.Form):
    tutor = forms.ModelChoiceField(label=u"Acompañante",
                                   queryset=ParticipanteTematica.objects.filter(status=True, participante__tipo=1))
    cupo = forms.CharField(label=u"Cupo", widget=forms.TextInput(
        attrs={'formwidth': '50%', 'class': 'imp-numbersmall', 'decimal': '0'}))
    maxintegrantes = forms.CharField(label=u"Max. Integrantes", widget=forms.TextInput(
        attrs={'formwidth': '50%', 'class': 'imp-numbersmall', 'decimal': '0'}))

    def agregar(self, tematica):
        pers = ParticipanteTematica.objects.values_list('pk').filter(tematica=tematica,
                                                                     participante__persona__profesor=None)
        self.fields['tutor'].queryset = ParticipanteTematica.objects.filter(tematica=tematica).exclude(pk__in=pers)


class ComplexivoTematicaObservacionForm(forms.Form):
    observacion = forms.CharField(label=u'Observaciones', required=False, widget=forms.Textarea(attrs={'rows': '3'}))


class ComplexivoTribunalCalificador(forms.Form):
    profesor = Profesor.objects.filter(status=True)
    presidente = forms.IntegerField(initial=0, required=True, label=u'Presidente', widget=forms.TextInput(attrs={'select2search': 'true'}))
    secretario = forms.IntegerField(initial=0, required=True, label=u'Secretario', widget=forms.TextInput(attrs={'select2search': 'true'}))
    delegado = forms.IntegerField(initial=0, required=True, label=u'Delegado', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # presidente = ModelChoiceField(label=u'Presidente', queryset= profesor , required=False)
    # secretario = ModelChoiceField(label=u'Secretario', queryset=profesor, required=False)
    # delegado = ModelChoiceField(label=u'Delegado', queryset=profesor, required=False)
    moderador = forms.IntegerField(initial=0, required=True, label=u'Moderador', widget=forms.TextInput(attrs={'select2search': 'true'}))
    fecha = forms.DateField(label=u"Fecha Defensa", required=True, initial=datetime.now().strftime('%d-%m-%Y'),
                            input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                             attrs={'class': 'selectorfecha',
                                                                                    'formwidth': '50%'}))
    hora = forms.TimeField(label=u"Hora Defensa", required=True, initial=str(datetime.now().time()),
                           input_formats=['%H:%M'],
                           widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '200px'}))
    lugar = forms.CharField(label=u'Lugar Defensa', required=False, widget=forms.Textarea(attrs={'rows': '3'}))


class ParticipanteRolForm(forms.Form):
    rol = forms.CharField(label=u'Nombre', max_length=200, widget=forms.TextInput(attrs={'formwidth': '100%'}))


class SublineaGrupoInvestigacionForm(forms.Form):
    linea = forms.ModelChoiceField(label=u"Linea de Investigación",
                                   queryset=LineaInvestigacion.objects.filter(status=True))
    sublinea = forms.ModelChoiceField(label=u"SubLinea de investigación", queryset=SubLineaInvestigacion.objects.all())


class ConvocatoriaInvestigacionForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    objetivo = forms.CharField(label=u'Objetivo', required=True, widget=forms.Textarea(attrs={'rows': '5'}))
    duracion = forms.CharField(label=u'Duración', required=True, widget=forms.Textarea(attrs={'rows': '4'}))
    duracionmeses = forms.IntegerField(label=u"Meses", required=True,
                                       widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    presupuesto = forms.CharField(label=u'Presupuesto', required=True, widget=forms.Textarea(attrs={'rows': '4'}))
    presupuestodesde = forms.DecimalField(initial="0.00", label=u'Desde', required=True, widget=forms.TextInput(
        attrs={'class': 'imp-moneda', 'formwidth': '50%', 'decimal': '2'}))
    presupuestohasta = forms.DecimalField(initial="0.00", label=u'Hasta', required=True, widget=forms.TextInput(
        attrs={'class': 'imp-moneda', 'formwidth': '50%', 'decimal': '2'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", required=True, initial=datetime.now().strftime('%d-%m-%Y'),
                                  input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                   attrs={'class': 'selectorfecha',
                                                                                          'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha Fin", required=True, initial=datetime.now().strftime('%d-%m-%Y'),
                               input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                attrs={'class': 'selectorfecha',
                                                                                       'formwidth': '50%'}))
    nota = forms.CharField(label=u'Nota', required=True, widget=forms.Textarea(attrs={'rows': '5'}))
    compromiso = forms.CharField(label=u'Compromiso', required=True, widget=forms.Textarea(attrs={'rows': '5'}))
    evaluacion = forms.CharField(label=u'Evaluación', required=True, widget=forms.Textarea(attrs={'rows': '5'}))
    publicar = forms.BooleanField(label=u'Publicar', initial=True, required=False)


class TematicaGrupoInvestigacionForm(forms.Form):
    tema = forms.CharField(label=u'Línea de investigación', required=True, widget=forms.Textarea(attrs={'rows': '4'}))
    tipopublicacion = forms.ModelChoiceField(label=u"Tipo de Publicación",
                                             queryset=TipoPublicacion.objects.filter(status=True),
                                             widget=forms.Select(attrs={'class': 'imp-50'}))
    lineas = forms.ModelMultipleChoiceField(label=u'Área de Investigación',
                                            queryset=LineasGrupoInvestigacion.objects.filter(status=True),
                                            required=False)

    def cargar_lineas(self, grupo):
        self.fields['lineas'].queryset = LineasGrupoInvestigacion.objects.filter(grupo=grupo)


class ParticipanteGrupoInvestigacionForm(forms.Form):
    participante = forms.ChoiceField(label=u"Participante", choices=TIPO_PARTICIPANTE_INSTITUCION, required=False,
                                     widget=forms.Select(attrs={'class': 'imp-50'}))
    busqueda = forms.CharField(label=u"Búsqueda  de Participante", widget=forms.TextInput(attrs={'formwidth': '50%'}))
    cedula = forms.CharField(label=u"Identificación", max_length=10, widget=forms.TextInput(attrs={'formwidth': '45%'}))
    nombre = forms.CharField(label=u"Nombres", widget=forms.TextInput(attrs={'formwidth': '50%'}))
    apellido = forms.CharField(label=u"Apellidos", widget=forms.TextInput(attrs={'formwidth': '50%'}))
    correo = forms.CharField(label=u"Email", widget=forms.TextInput(attrs={'formwidth': '50%'}))
    institucion = forms.CharField(label=u"Institución", widget=forms.TextInput(attrs={'formwidth': '50%'}))
    formacion = forms.CharField(label=u"Formación", widget=forms.TextInput())
    rol = forms.ModelChoiceField(label=u"Rol", queryset=ParticipanteRol.objects.filter(status=True),
                                 widget=forms.Select(attrs={'formwidth': '50%'}))

    def adicionar(self):
        deshabilitar_campo(self, 'cedula')
        deshabilitar_campo(self, 'nombre')
        deshabilitar_campo(self, 'apellido')
        deshabilitar_campo(self, 'apellido')
        deshabilitar_campo(self, 'correo')
        deshabilitar_campo(self, 'institucion')
        deshabilitar_campo(self, 'formacion')

    def editar(self):
        self.fields['busqueda'].widget = forms.HiddenInput()

    def deshabilitar_busqueda(self):
        deshabilitar_campo(self, 'busqueda')


class TipoPublicacionForm(forms.Form):
    tipo = forms.CharField(label=u"Tipo Publicación", widget=forms.TextInput)
    codigo = forms.CharField(label=u"Codigo", widget=forms.TextInput)


class AsignarTematicaAlternativaForm(forms.Form):
    alternativa = forms.CharField(max_length=100, label=u'Alternativa', widget=forms.Textarea(attrs={'rows': '2'}),
                                  required=False)
    tematicas = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=ComplexivoTematica.objects.all(),
                                               required=False)

    def agregar(self, carrera):
        lista = []
        for tematica in ComplexivoTematica.objects.filter(status=True):
            if tematica.pertenece_carrera(carrera):
                lista.append(tematica.id)
        self.fields['tematicas'].queryset = ComplexivoTematica.objects.filter(pk__in=lista)


class InscribirTematicaForm(forms.Form):
    tematica = forms.CharField(max_length=300, label=u'Sublínea de investigación',
                               widget=forms.Textarea(attrs={'rows': '4', 'disabled': True}), required=False)


class ComplexivoModeloPropuestaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True)
    detalle = forms.CharField(label=u'Detalle', required=True)


class ComplexivoAcompanamientoForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha", initial=datetime.now(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    horainicio = forms.TimeField(label=u"Hora Inicio", required=True, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '200px'}))
    horas = forms.IntegerField(label=u"Cantidad Horas:", required=True, initial=2, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'formwidth': '200px'}))
    horafin = forms.TimeField(label=u"Hora Fin", required=False, initial=(datetime.now() + timedelta(hours=2)).strftime('%H:%M'), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'readonly': 'true', 'class': 'selectorhora', 'formwidth': '200px'}))
    observaciones = forms.CharField(label=u'Descripcion Breve', required=False, widget=forms.Textarea(attrs={'rows': '3'}))
    descripcion = forms.CharField(label=u'Detalle', required=False, widget=CKEditorUploadingWidget())
    enlace = forms.CharField(label=u'Enlace video', widget=forms.TextInput(attrs={'rows': '1', 'style': 'text-transform:lowercase'}), required=False)
    archivo = ExtFileField(label=u'Anexo', required=False,
                           help_text=u'Tamaño Maximo permitido 12Mb, en formato pdf,jpg,jpeg',
                           ext_whitelist=(".pdf", ".jpg", ".png", ".jpeg", ".doc", ".docx", ".xls", ".xlsx"), max_upload_size=12582912)


class TutoriaProfesorPosgradoForm(FormModeloBase):
    fecharegistro = forms.DateField(label=u"Fecha", initial=datetime.now(), required=True,  widget=DateTimeInput(attrs={'col': '4'}))
    programaetapatutoria = forms.ModelChoiceField(label=u'Etapa tutoría', required=True, queryset=ProgramaEtapaTutoriaPosgrado.objects.filter(status=True).order_by( 'orden'), widget=forms.Select({'col': '4'}))
    modalidad = forms.ChoiceField(label=u"Modalidad", choices=MODALIDAD_IMPARTICION, widget=forms.Select({'col': '4'}))
    horainicio = forms.TimeField(label=u"Hora Inicio", required=True, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora','col': '4','type':'time'}))
    horas = forms.IntegerField(label=u"Cantidad Horas:", required=True, initial=2 ,widget=forms.TextInput(attrs={'col': '4'}))
    horafin = forms.TimeField(label=u"Hora Fin", required=False, initial=(datetime.now() + timedelta(hours=2)).strftime('%H:%M'), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'readonly': 'true', 'col': '4'}))

    link_grabacion = forms.CharField(label=u'Enlace video', widget=forms.TextInput(attrs={'rows': '1', 'style': 'text-transform:lowercase','col': '12'}),required=False)

    archivo = ExtFileField(label=u'Recursos adicionales', required=False,help_text=u'Tamaño Maximo permitido 12Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=12582912)
    titulo = forms.CharField(label=u'Título', required=True, widget=forms.Textarea(attrs={'rows': '2', 'col': '12'}))
    detalle = forms.CharField(label=u'Detalle', required=False, widget=forms.Textarea(attrs={'rows': '3', 'col': '12'}))

    def addtutoriaporetapa(self,programa_etapa_id,configuracion_id,mecanismotitulacionposgrado_id):
        if variable_valor('HABILITAR_TUTORIA_POR_MECANISMO'):
            self.fields['programaetapatutoria'].queryset = programa_etapa = ProgramaEtapaTutoriaPosgrado.objects.filter(status=True,pk=programa_etapa_id,convocatoria__id = configuracion_id, mecanismotitulacionposgrado=mecanismotitulacionposgrado_id)
        else:
            self.fields['programaetapatutoria'].queryset = programa_etapa = ProgramaEtapaTutoriaPosgrado.objects.filter(status=True,pk=programa_etapa_id,mecanismotitulacionposgrado__isnull=True)

        self.fields['programaetapatutoria'].initial = programa_etapa[0].id

    def edittutoriaporetapa(self,programa_etapa_id,configuracion_id,mecanismotitulacionposgrado_id):
        if variable_valor('HABILITAR_TUTORIA_POR_MECANISMO'):
            self.fields['programaetapatutoria'].queryset = programa_etapa = ProgramaEtapaTutoriaPosgrado.objects.filter(status=True, convocatoria__id = configuracion_id, mecanismotitulacionposgrado=mecanismotitulacionposgrado_id )
        else:
            self.fields['programaetapatutoria'].queryset = programa_etapa = ProgramaEtapaTutoriaPosgrado.objects.filter( status=True, convocatoria__id=configuracion_id,mecanismotitulacionposgrado__isnull=True)

        self.fields['programaetapatutoria'].initial = programa_etapa_id

class ComplexivoCalificarPropuestaForm(forms.Form):
    correccion = ExtFileField(label=u'Corrección', required=False,
                              help_text=u'Tamaño Maximo permitido 12Mb, en formato pdf, doc, docx',
                              ext_whitelist=(".doc", ".docx", ".pdf",), max_upload_size=12582912)
    observaciones = forms.CharField(label=u'Observaciones', required=False, widget=forms.Textarea(attrs={'rows': '3'}))
    aprobar = forms.BooleanField(label=u"Aprueba el archivo", required=False,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))
    rechazar = forms.BooleanField(label=u"Rechazar archivo", required=False,
                                  widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    plagio = forms.FloatField(label=u"Porcentaje de Plagio", required=True, initial=0,
                              widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2'}))
    archivo = ExtFileField(label=u'Reporte de plagio', required=False,
                           help_text=u'Tamaño Maximo permitido 30Mb, en formato pdf', ext_whitelist=(".doc", ".docx", ".pdf",),
                           max_upload_size=30000000)

class CalificarPropuestaPosgradoForm(FormModeloBase):
    correccion = ExtFileField(label=u'Corrección', required=False, help_text=u'Tamaño Maximo permitido 12Mb, en formato pdf, doc, docx', ext_whitelist=(".doc", ".docx", ".pdf",), max_upload_size=12582912)
    observaciones = forms.CharField(label=u'Observaciones', required=False, widget=forms.Textarea(attrs={'rows': '3'}))
    aprobar = forms.BooleanField(label=u"Aprueba el archivo", required=False,  widget=forms.CheckboxInput(attrs={'col': '6'}))
    rechazar = forms.BooleanField(label=u"Rechazar archivo", required=False, widget=forms.CheckboxInput(attrs={'col': '6'}))
    plagio = forms.FloatField(label=u"Porcentaje de Plagio", required=True, initial=0,widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2','col': '6'}))
    archivo = ExtFileField(label=u'Reporte de plagio', required=False, help_text=u'Tamaño Maximo permitido 30Mb, en formato pdf', ext_whitelist=(".doc", ".docx", ".pdf",), max_upload_size=30000000)

class RevisarAvanceTutoriaPosgradoForm(FormModeloBase):
    correccion = ExtFileField(label=u'Corrección', required=False, help_text=u'Tamaño Maximo permitido 30Mb, en formato pdf, doc, docx', ext_whitelist=(".doc", ".docx", ".pdf",), max_upload_size=30000000)
    observaciones = forms.CharField(label=u'Observaciones', required=True, widget=forms.Textarea(attrs={'rows': '3'}))


class ComplexivoCalificacionSustentacionForm(forms.Form):
    archivo = ExtFileField(label=u'Rúbrica de Evaluación', required=False,
                           help_text=u'Tamaño Maximo permitido 2Mb, en formato pdf, doc, docx',
                           ext_whitelist=(".doc", ".docx", ".pdf",), max_upload_size=2621440)


class ComplexivoEditarArchivoPropuestaForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=True,
                           help_text=u'Tamaño Maximo permitido 30Mb, en formato doc, docx y pdf', ext_whitelist=(".doc", ".docx" , ".pdf", ".PDF"),
                           max_upload_size=30000000)


class ComplexivoSubirPropuestaForm(forms.Form):
    propuesta = ExtFileField(label=u'Propuesta Práctica', required=False,
                             help_text=u'Tamaño Maximo permitido 30Mb, en formato doc, docx',
                             ext_whitelist=(".doc", ".docx",), max_upload_size=30000000)
    extracto = ExtFileField(label=u'Propuesta Práctica (Desde introducción hasta conclusión)', required=False,
                            help_text=u'Tamaño Maximo permitido 30Mb, en formato doc, docx',
                            ext_whitelist=(".doc", ".docx",), max_upload_size=30000000)


class ComplexivoSubirPropuesta1Form(forms.Form):
    propuesta = ExtFileField(label=u'Propuesta Tutoría', required=False,
                             help_text=u'Tamaño Maximo permitido 30Mb, en formato doc, docx',
                             ext_whitelist=(".doc", ".docx",), max_upload_size=30000000)
    extracto = ExtFileField(label=u'Propuesta Tutoría (Desde introducción hasta conclusión)', required=False,
                            help_text=u'Tamaño Maximo permitido 30Mb, en formato doc, docx',
                            ext_whitelist=(".doc", ".docx",), max_upload_size=30000000)




class ExamenComplexivoEnsayoForm(forms.Form):
    propuesta = ExtFileField(label=u'Propuesta Ensayo', required=False,
                             help_text=u'Tamaño Maximo permitido 50Mb, en formato doc, docx y pdf',
                             ext_whitelist=(".doc", ".docx",".pdf",), max_upload_size=50000000)

    extracto = ExtFileField(label=u'Propuesta Ensayo (Desde introducción hasta conclusión)', required=False,
                            help_text=u'Tamaño Maximo permitido 50Mb, en formato doc, docx y pdf',
                            ext_whitelist=(".doc", ".docx",".pdf",), max_upload_size=50000000)


class SubirEvidenciaDescuentoForm(forms.Form):
    requisitosdetalleconfiguraciondescuentoposgrado = forms.ModelChoiceField(label=u"Descuento posgrado", queryset=RequisitosDetalleConfiguracionDescuentoPosgrado.objects.filter(status=True), widget=forms.Select(attrs={'class': 'imp-100'}))
    evidencia = forms.CharField(label=u"Nombre Evidencia", max_length=200)
    archivo = ExtFileField(label=u'Evidencia (Según descuento seleccionado)', required=False, help_text=u'Tamaño Maximo permitido 12Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=12582912)

    def ingresar(self, periodo, descuentomatricula):
        hoy = datetime.now().date()
        self.fields['requisitosdetalleconfiguraciondescuentoposgrado'].queryset = RequisitosDetalleConfiguracionDescuentoPosgrado.objects.filter(status=True, detalleconfiguraciondescuentoposgrado__descuentoposgradomatricula=descuentomatricula, detalleconfiguraciondescuentoposgrado__descuentoposgrado__activo=True, detalleconfiguraciondescuentoposgrado__periododetalleconfiguraciondescuentoposgrado__periodo=periodo,
                                                                                                                                                 detalleconfiguraciondescuentoposgrado__configuraciondescuentoposgrado__fechainicio__lte=hoy, detalleconfiguraciondescuentoposgrado__configuraciondescuentoposgrado__fechafin__gte=hoy)


class ArchivosTitulacionForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=200)
    tipotitulacion = forms.ModelChoiceField(label=u'Tipo Titulación', required=False,
                                            queryset=TipoTitulaciones.objects.filter(status=True).order_by('nombre'),
                                            widget=forms.Select(attrs={'class': 'imp-50'}))
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, xls, xlsx, pdf',
                           ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".pdf"), max_upload_size=10485760)

    def ocultar(self):
        del self.fields['tipotitulacion']


class CamposOcupacionalesForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))


class CamposRotacionesForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))


class CamposItinerariosForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    nivel = forms.ModelChoiceField(label=u'Nivel', required=True,
                                   queryset=NivelMalla.objects.filter(status=True).order_by('id'))
    horas_practicas = forms.IntegerField(label=u'Horas', initial=0, required=False,
                                         widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class CamposItinerariosVinculacionForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    nivel = forms.ModelChoiceField(label=u'Nivel', required=True,
                                   queryset=NivelMalla.objects.filter(status=True).order_by('id'))
    horas_vinculacion = forms.IntegerField(label=u'Horas', initial=0, required=False,
                                           widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class CamposItinerariosMallaForm(forms.Form):
    malla = forms.ModelChoiceField(label=u"Malla",
                                   queryset=Malla.objects.filter(status=True, carrera__coordinacion__excluir=False),
                                   required=False)
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    nivel = forms.ModelChoiceField(label=u'Nivel', required=True,
                                   queryset=NivelMalla.objects.filter(status=True).order_by('id'))
    horas_practicas = forms.IntegerField(label=u'Horas', initial=0, required=False,
                                         widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))

    def ponercarrera(self, carrera):
        self.fields['malla'].queryset = Malla.objects.filter(status=True, carrera=carrera)


class PlanPracticaPreProfesionalForm(forms.Form):
    objetivo = forms.CharField(label=u'Objetivo', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    fechadesde = forms.DateField(label=u"Vigencia desde", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=True)
    fechahasta = forms.DateField(label=u"Vigencia hasta", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=True)
    comisiongestionacademica = forms.CharField(label=u'Comisión de gestión académica', required=False,
                                               widget=forms.Textarea(attrs={'rows': '3'}))
    archivocomisiongestionacademica = ExtFileField(label=u'Adjuntar', required=False,
                                                   help_text=u'Tamaño Maximo permitido 2Mb, en formato pdf',
                                                   ext_whitelist=(".pdf",), max_upload_size=2621440)


class ProgramaPracticaPreProfesionalForm(forms.Form):
    carrera = forms.ModelChoiceField(label=u"Carrera",
                                     queryset=Carrera.objects.filter(status=True, coordinacion__excluir=False),
                                     required=False)
    objetivo = forms.CharField(label=u'Objetivo', required=False, widget=forms.Textarea(attrs={'rows': '3'}))
    fechadesde = forms.DateField(label=u"Vigencia desde", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)
    fechahasta = forms.DateField(label=u"Vigencia hasta", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)
    consejodirectivo = forms.CharField(label=u'Consejo directivo', required=False,
                                       widget=forms.Textarea(attrs={'rows': '3'}))
    archivoconsejodirectivo = ExtFileField(label=u'Adjuntar', required=False,
                                           help_text=u'Tamaño Maximo permitido 2Mb, en formato pdf',
                                           ext_whitelist=(".pdf",), max_upload_size=2621440)
    comisiongestionacademica = forms.CharField(label=u'Comisión de gestión académica', required=False,
                                               widget=forms.Textarea(attrs={'rows': '3'}))
    archivocomisiongestionacademica = ExtFileField(label=u'Adjuntar', required=False,
                                                   help_text=u'Tamaño Maximo permitido 2Mb, en formato pdf',
                                                   ext_whitelist=(".pdf",), max_upload_size=2621440)


class TipoCategoriasForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    tipo = forms.ChoiceField(label=u"Tipo Observación", choices=TIPO_OBSEVALUACION, required=True,
                             widget=forms.Select(attrs={'class': 'imp-50'}))
    tipoinstrumento = forms.ChoiceField(label=u"Tipo Instrumento", choices=TIPO_INSTRUMENTO, required=True,
                                        widget=forms.Select(attrs={'class': 'imp-50'}))
    tipocriterio = forms.ModelChoiceField(label=u'Tipo Criterio', required=True,
                                          queryset=CriterioTipoObservacionEvaluacion.objects.filter(
                                              status=True).order_by('nombre'))


class ConfiguracionTerceraMatriculaForm(forms.Form):
    fechadesde = forms.DateField(label=u"Fecha desde:", initial=datetime.now(), required=True,
                                 input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                  attrs={'class': 'selectorfecha',
                                                                                         'formwidth': '50%'}))
    fechahasta = forms.DateField(label=u"Fecha hasta:", initial=datetime.now(), required=True,
                                 input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                  attrs={'class': 'selectorfecha',
                                                                                         'formwidth': '50%'}))
    periodolectivo = forms.ModelChoiceField(label=u"Periodo Lectivo:", required=True,
                                            queryset=Periodo.objects.filter(status=True, tipo__id=2),
                                            widget=forms.Select(attrs={'formwidth': '100%'}))
    nombre = forms.CharField(label=u'Motivo:', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    activa = forms.BooleanField(label=u'Activo:', initial=False, required=False)


class ResponsablesAcuerdoForm(forms.Form):
    responsables = forms.ModelMultipleChoiceField(label=u'Responsables (Unemi)', queryset=ConfiguracionFirmaPracticasPreprofesionales.objects.filter(status=True, activo=True).order_by('nombres'), required=True)


class CoordinadorAcuerdoForm(forms.Form):
    coordinador = forms.ModelChoiceField(label=u"Coordinador (Unemi)", queryset=ConfiguracionFirmaPracticasPreprofesionales.objects.filter(status=True, activo=True).order_by('nombres'), required=True)


class ArchivoAcuerdoForm(forms.Form):
    archivo = ExtFileField(label=u'Acuerdo', required=True,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png",), max_upload_size=10194304,
                           widget=forms.FileInput(
                               attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'pdf'}))


class AcuerdoCompromisoForm(forms.Form):
    empresa = forms.ModelChoiceField(label=u"Empresa", queryset=EmpresaEmpleadora.objects.filter(status=True),
                                     required=True)
    carrera = forms.ModelChoiceField(label=u"Carrera",
                                     queryset=Carrera.objects.filter(status=True, coordinacion__excluir=False),
                                     required=True)
    fechaelaboracion = forms.DateField(label=u"Fecha Elaboracion", input_formats=['%d-%m-%Y'],
                                       widget=DateTimeInput(format='%d-%m-%Y',
                                                            attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                       required=True)
    coordinador = forms.ModelChoiceField(label=u"Coordinador (Unemi)", queryset=ConfiguracionFirmaPracticasPreprofesionales.objects.filter(status=True, activo=True).order_by('nombres'), required=True)
    nombrefirma = forms.CharField(label=u'Persona que firma (Empresa)', required=True, widget=forms.TextInput(attrs={'class': 'normal-input'}))
    cargofirma = forms.CharField(label=u'Cargo (Empresa)', required=True, widget=forms.TextInput(attrs={'class': 'normal-input'}))
    responsables = forms.ModelMultipleChoiceField(label=u'Responsables (Unemi)', queryset=ConfiguracionFirmaPracticasPreprofesionales.objects.filter(status=True, activo=True).order_by('nombres'), required=True)
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                  required=True)
    fechafinalizacion = forms.DateField(label=u"Fecha finalización", initial=datetime.now().date(),
                                        input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={
            'class': 'selectorfecha', 'formwidth': '50%'}), required=True)
    para_practicas = forms.BooleanField(label=u'¿Para Prácticas Profesionales?', required=False,
                                        widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))
    para_pasantias = forms.BooleanField(label=u'¿Para Pasantías Profesionales?', required=False,
                                        widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))
    financiamiento = forms.CharField(label=u'Financiamiento', required=True, widget=forms.Textarea(attrs={'rows': '6', 'class': 'normal-input'}))
    tiempocump = forms.CharField(label=u'Tiempo de cumplimiento', required=True, widget=forms.Textarea(attrs={'rows': '2', 'class': 'normal-input'}))
    archivo = ExtFileField(label=u'Acuerdo', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                           ext_whitelist=(".pdf",), max_upload_size=4194304)


class ResponsableEvaluacionFrom(forms.Form):
    persona = forms.IntegerField(initial=0, required=True, label=u'Responsable',
                                 widget=forms.TextInput(attrs={'select2search': 'true'}))


class TipoCategoriasCriteriosForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))


class EvidenciaapelacionForm(forms.Form):
    descripciones = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=True,
                           help_text=u'Tamaño Maximo permitido 2Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=2621440)


# PROYECTO DE AULA VIRTUAL
class AvPreguntaDocenteForm(forms.Form):
    profersormateria = forms.ModelChoiceField(label=u"Profesor Materia",
                                              queryset=ProfesorMateria.objects.all().filter(status=True),
                                              required=False, widget=forms.Select())
    tema = forms.CharField(label=u'Tema', max_length=200, required=True,
                           widget=forms.TextInput(attrs={'class': 'imp-100'}))
    pregunta = forms.CharField(label=u'Pregunta', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    archivo = ExtFileField(label=u'Adjuntar Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=4194304)

    def editar(self):
        deshabilitar_campo(self, 'profersormateria')

    def combo(self, materia):
        self.fields['profersormateria'].queryset = ProfesorMateria.objects.filter(status=True, materia=materia)


class AvPreguntaDocenteIniForm(forms.Form):
    inscripcion = forms.ModelChoiceField(label=u"Alumno", queryset=Inscripcion.objects.all().filter(status=True),
                                         required=False, widget=forms.Select())
    tema = forms.CharField(label=u'Tema', max_length=200, required=True,
                           widget=forms.TextInput(attrs={'class': 'imp-100'}))
    pregunta = forms.CharField(label=u'Pregunta', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    archivo = ExtFileField(label=u'Adjuntar Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=4194304)

    def editar(self):
        deshabilitar_campo(self, 'inscripcion')

    def combo(self, materia):
        self.fields['inscripcion'].queryset = Inscripcion.objects.filter(
            pk__in=[x.matricula.inscripcion.id for x in MateriaAsignada.objects.filter(materia=materia)])


class AvComunicacionForm(forms.Form):
    titulo = forms.CharField(label=u'Titulo', max_length=100, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    comunicado = forms.CharField(label=u"Comunicado", required=True, widget=CKEditorUploadingWidget())


class AvTutoriasForm(forms.Form):
    observacion = forms.CharField(label=u'Tema', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class AvanceTutoriaForm(forms.Form):
    proyecto = forms.CharField(max_length=300, label=u'Proyecto', widget=forms.Textarea(attrs={'rows': '5'}),
                               required=False)
    fechaentrega = forms.CharField(max_length=30, label=u'Feha de entrega')
    fecharevision = forms.CharField(max_length=30, label=u'Fecha de revisión')
    observacion = forms.CharField(max_length=300, label=u'Observación', widget=forms.Textarea(attrs={'rows': '5'}),
                                  required=False)

    def editar(self):
        deshabilitar_campo(self, 'proyecto')
        deshabilitar_campo(self, 'fechaentrega')
        deshabilitar_campo(self, 'fecharevision')
        deshabilitar_campo(self, 'observacion')


# modulo ayudantia de catedra
class PeriodoCatedraForm(forms.Form):
    periodolectivo = forms.ModelChoiceField(label=u"Periodo Lectivo:", required=False,
                                            queryset=Periodo.objects.filter(status=True, activo=True, tipo__id=2),
                                            widget=forms.Select(attrs={'formwidth': '100%'}))
    nombre = forms.CharField(label=u'Nombre:', max_length=250, widget=forms.Textarea(attrs={'rows': '2'}),
                             required=False)
    fechainicio_solicitud_docente = forms.DateTimeField(label=u'Fecha inicio solicitud docente:',
                                                        required=True,
                                                        input_formats=['%d-%m-%Y %I:%M %p'],
                                                        widget=DateTimeInput(format='%d-%m-%Y %I:%M %p',
                                                                             attrs={'class': 'selectorfecha form-control',
                                                                                    'style': 'width:70%',
                                                                                    'formwidth': '50%'}))
    fechafin_solicitud_docente = forms.DateTimeField(label=u'Fecha fin solicitud docente:',
                                                     required=True,
                                                     input_formats=['%d-%m-%Y %I:%M %p'],
                                                     widget=DateTimeInput(format='%d-%m-%Y %I:%M %p',
                                                                          attrs={'class': 'selectorfecha form-control',
                                                                                 'style': 'width:70%',
                                                                                 'formwidth': '50%'}))

    fechainicio_solicitud_director = forms.DateTimeField(label=u'Fecha inicio aprobar solicitud director:',
                                                        required=True,
                                                        input_formats=['%d-%m-%Y %I:%M %p'],
                                                        widget=DateTimeInput(format='%d-%m-%Y %I:%M %p',
                                                                             attrs={'class': 'selectorfecha form-control',
                                                                                    'style': 'width:70%',
                                                                                    'formwidth': '50%'}))
    fechafin_solicitud_director = forms.DateTimeField(label=u'Fecha fin aprobar solicitud director:',
                                                     required=True,
                                                     input_formats=['%d-%m-%Y %I:%M %p'],
                                                     widget=DateTimeInput(format='%d-%m-%Y %I:%M %p',
                                                                          attrs={'class': 'selectorfecha form-control',
                                                                                 'style': 'width:70%',
                                                                                 'formwidth': '50%'}))
    fechadesde = forms.DateField(label=u"Fecha inicio inscripción estudiante:", initial=datetime.now(), required=False,
                                 input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                  attrs={'class': 'selectorfecha',
                                                                                         'formwidth': '50%'}))
    fechahasta = forms.DateField(label=u"Fecha fin inscripción estudiante:", initial=datetime.now(), required=False,
                                 input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                  attrs={'class': 'selectorfecha',
                                                                                         'formwidth': '50%'}))
    fechahastaaprobar = forms.DateField(label=u"Fecha límite aprobar solicitud estudiante:", initial=datetime.now(), required=False,
                                        input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={
            'class': 'selectorfecha', 'formwidth': '100%'}))
    fecharegistroactividad = forms.DateField(label=u"Fecha límite para registrar actividad docente:", initial=datetime.now(), required=True,
                                             input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha',
                                                                                                                        'formwidth': '100%'}))


    # numeromateria = forms.IntegerField(label=u"Números materia máximas:", required=False, initial=0,
    #                                    widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'formwidth': '50%'}))
    # notamaxima = forms.IntegerField(label=u"Nota minima materia:", required=False, initial=0,
    #                                 widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'formwidth': '50%'}))
    horasmaxima = forms.IntegerField(label=u"Horas máxima ayudantía:", required=False, initial=0,
                                     widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'formwidth': '50%'}))
    # diasevidencia = forms.IntegerField(label=u"Días subir evidencia:", required=False, initial=0,
    #                                    widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'formwidth': '50%'}))
    nivelmalla = forms.ModelChoiceField(label=u"Nivel mínimo ayudantía:", required=False,
                                        queryset=NivelMalla.objects.filter(status=True),
                                        widget=forms.Select(attrs={'formwidth': '50%'}))
    # archivo = ExtFileField(label=u'Formato Carta compromiso:', required=False,
    #                        help_text=u'Tamaño Maximo permitido 6Mb, en formato pdf, doc, docx',
    #                        ext_whitelist=(".pdf", ".doc", ".docx"), max_upload_size=6291456)
    periodoevidencia = forms.ModelChoiceField(label=u"Periodo de evidencias:",
                                              queryset=PeriodoEvidenciaPracticaProfesionales.objects.filter(
                                              status=True), required=False, widget=forms.Select())
    actividades = forms.ModelMultipleChoiceField(label=u'Actividades', queryset=ActividadAyudantiaCatedra.objects.filter(status=True), required=False)


    def editar(self):
        deshabilitar_campo(self, 'periodolectivo')


class ActividadInscripcionCatedraForm(forms.Form):
    actividadevidencia = forms.CharField(label=u'Actividad:', widget=forms.Textarea(attrs={'rows': '3'}),
                                         required=False)
    archivoevidencia = ExtFileField(label=u'Seleccione Archivo Evidencia:', required=False,
                                    help_text=u'Tamaño Maximo permitido 6Mb, en formato pdf, doc, docx',
                                    ext_whitelist=(".pdf", ".doc", ".docx"), max_upload_size=6291456)


class InscripcionCatedraArchivoForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo Carta Compromiso:', required=False,
                           help_text=u'Tamaño Maximo permitido 6Mb, en formato pdf, doc, docx',
                           ext_whitelist=(".pdf", ".doc", ".docx"), max_upload_size=6291456)


class ActividadInscripcionCatedraAprobarForm(forms.Form):
    horadesde = forms.TimeField(label=u"Hora Inicio:", required=False, initial=(datetime.now()).strftime('%H:%M'),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '50%'}))
    horahasta = forms.TimeField(label=u"Hora Fin:", required=False, initial=(datetime.now()).strftime('%H:%M'),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '50%'}))
    observacionestado = forms.CharField(label=u'Observación:', widget=forms.Textarea(attrs={'rows': '3'}),
                                        required=False)


class ActividadInscripcionCatedraRechazarForm(forms.Form):
    observacionestado = forms.CharField(label=u'Observación:', widget=forms.Textarea(attrs={'rows': '3'}),
                                        required=False)


class ActividadInscripcionCatedraRegistrarForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha Actividad:", initial=datetime.now(), required=False,
                            input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                             attrs={'class': 'selectorfecha',
                                                                                    'formwidth': '40%'}))
    horadesde = forms.TimeField(label=u"Hora Inicio:", required=False, initial=(datetime.now()).strftime('%H:%M'),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '30%'}))
    horahasta = forms.TimeField(label=u"Hora Fin:", required=False, initial=(datetime.now()).strftime('%H:%M'),

                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '30%'}))
    actividad = forms.CharField(label=u'Actividad (antiguo)', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    actividadModel = forms.ModelChoiceField(label=u"Actividad:", required=True,
                                            queryset=ActividadAyudantiaCatedra.objects.filter(status=True),
                                            widget=forms.Select(attrs={'formwidth': '100%'}))
    archivo = ExtFileField(label=u'Seleccione Archivo Actividad:', required=False,
                           help_text=u'Tamaño Maximo permitido 6Mb, en formato pdf, doc, docx',
                           ext_whitelist=(".pdf", ".doc", ".docx"), max_upload_size=6291456)

    def eliminar_actividad(self):
        del self.fields['actividad']

    def cargaractividadperiodo(self, periodo):
        self.fields['actividadModel'].queryset = periodo.actividades.all()


class InscripcionCatedraAprobarForm(forms.Form):
    # puntaje = forms.IntegerField(label=u'Puntaje', initial=0, required=False,
    #                              widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    # archivofinal = ExtFileField(label=u'Seleccione Archivo Aprobación:', required=False,
    #                             help_text=u'Tamaño Maximo permitido 6Mb, en formato pdf, doc, docx',
    #                             ext_whitelist=(".pdf", ".doc", ".docx"), max_upload_size=6291456)


ESTADO_INSCRIPCION_CATEDRA_SOLICITUD = (
    (3, u"RECHAZADO"),
    (4, u"APROBADO"),
)


class InscripcionCatedraEstadoForm(forms.Form):
    estadoinscripcion = forms.ChoiceField(label=u'Estado ', choices=ESTADO_INSCRIPCION_CATEDRA_SOLICITUD,
                                          widget=forms.Select(attrs={'class': 'imp-50'}))
    motivoestado = forms.CharField(label=u'Motivo', widget=forms.Textarea(attrs={'rows': '2'}), required=False)


class MatriculaNovedadForm(forms.Form):
    tipo = forms.ChoiceField(label=u'Tipo Novedad', choices=TIPO_MATRICULA_NOVEDAD,
                             widget=forms.Select(attrs={'class': 'imp-50'}))
    motivo = forms.CharField(label=u'Motivo', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo:', required=False,
                           help_text=u'Tamaño Maximo permitido 8Mb, en formato pdf, doc, docx, zip',
                           ext_whitelist=(".pdf", ".doc", ".docx", ".zip", ".rar"), max_upload_size=8388608)
    tipodescuento = forms.ModelChoiceField(label=u"Tipo Descuento:", required=False,
                                           queryset=TipoDescuentoMatricula.objects.filter(status=True),
                                           widget=forms.Select(attrs={'formwidth': '100%'}))
    # porcentaje = forms.IntegerField(label=u"Porcentaje descuento", initial=0, required=False,  widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    porcentajedescuento = forms.FloatField(label=u"Porcentaje descuento", required=False, initial="0.00",
                                           widget=forms.TextInput(
                                               attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))


class SupervisorAyudantiaCatedraForm(forms.Form):
    supervisor = forms.ModelChoiceField(Profesor.objects.filter(status=True).order_by('persona'), required=False,
                                        label=u'Supervisor')

    def ingresar(self, periodo):
        self.fields['supervisor'].queryset = Profesor.objects.filter(status=True).distinct().order_by('persona')


# formulario para modelo de becas
class BecaPeriodoForm(forms.Form):
    periodo = forms.ModelChoiceField(Periodo.objects.all().order_by('tipo', '-fin'), required=True, label=u'Periodo Académico', widget=forms.Select(attrs={'formwidth': '70%'}))
    vigente = forms.BooleanField(label=u'Vigente', required=False, widget=CheckboxInput(attrs={'formwidth': '30%'}))
    limitebecados = forms.IntegerField(label=u"Limite de becados", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%', 'labelwidth': '250px'}))
    fechainiciosolicitud = forms.DateField(label=u"Inicio de Solicitud", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%', 'separator2': True, 'separatortitle': 'Fechas de solicitud y documentación'}))
    fechafinsolicitud = forms.DateField(label=u"Fin de Solicitud", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechainiciovalidaciondocumento = forms.DateField(label=u"Inicio de validación de documentos", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafinvalidaciondocumento = forms.DateField(label=u"Fin de validación de documentos", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechainicioimprimircontrato = forms.DateField(label=u"Inicio de imprimir contrato", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%', 'separator2': True, 'separatortitle': 'Fechas de contrato'}))
    horainicioimprimircontrato = forms.TimeField(label=u"Hora desde de imprimir", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%'}))
    fechafinimprimircontrato = forms.DateField(label=u"Fin de imprimir", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    horafinimprimircontrato = forms.TimeField(label=u"Hora hasta de imprimir", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%'}))
    fechainiciovalidacioncontrato = forms.DateField(label=u"Inicio de validación", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafinvalidacioncontrato = forms.DateField(label=u"Fin de validación", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechainicioactualizarcertificariobancario = forms.DateField(label=u"Inicio actualizar certificado bancario", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafinactualizarcertificariobancario = forms.DateField(label=u"Fin actualizar certificado bancario", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    obligadosubircomprobante = forms.BooleanField(label=u'Obligar cargar comprobante', required=False, widget=CheckboxInput(attrs={'formwidth': '100%', 'separator2': True, 'separatortitle': 'Sustentar documentación de consumo de beca'}))
    nivelesmalla = forms.ModelMultipleChoiceField(label=u'Niveles Malla', required=False, queryset=NivelMalla.objects.filter(status=True), widget=forms.CheckboxSelectMultiple(attrs={'class': 'js-switch', 'formwidth': '50%', 'searchMultipleCheckbox': 'true'}))

    def deshabilitar(self):
        deshabilitar_campo(self, 'periodo')

    def nuevo(self, periodo):
        self.fields['periodo'].queryset = Periodo.objects.filter(pk=periodo.id)
        deshabilitar_campo(self, 'periodo')


# class BecaPeriodoForm(forms.Form):
#     periodo = forms.ModelChoiceField(Periodo.objects.all().order_by('tipo', '-fin'), required=False, label=u'Periodo')
#     fechainiciosolicitud = forms.DateField(label=u"Fecha de inicio de Solicitud", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '35%'}))
#     fechafinsolicitud = forms.DateField(label=u"Fecha de fin de Solicitud", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '35%'}))
#     fechainiciocolegio = forms.IntegerField(label=u"Año Inicio Periodo Graduación Bachiller",
#                                             initial=datetime.now().date().year, required=False, widget=forms.TextInput(
#             attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%', 'labelwidth': '250px'}))
#     fechafincolegio = forms.IntegerField(label=u"Año Inicio Periodo Graduación Bachiller",
#                                          initial=datetime.now().date().year, required=False, widget=forms.TextInput(
#             attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%', 'labelwidth': '250px'}))
#     mincalificacion = forms.FloatField(label=u"Minima calificación Bachiller", required=False, initial="0.00",
#                                        widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
#     vigente = forms.BooleanField(label=u'Vigente', required=False)
#     fechainicionotificacion = forms.DateField(label=u"Fecha de inicio de notoficacion", initial=datetime.now().date(),
#                                               required=False, input_formats=['%d-%m-%Y'],
#                                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha',
#                                                                                              'formwidth': '35%'}))
#     fechafinnotificacion = forms.DateField(label=u"Fecha de fin de notoficacion", initial=datetime.now().date(),
#                                            required=False, input_formats=['%d-%m-%Y'],
#                                            widget=DateTimeInput(format='%d-%m-%Y',
#                                                                 attrs={'class': 'selectorfecha', 'formwidth': '35%'}))
#     textonotificacion = forms.CharField(label=u'Texto Notificación', widget=forms.Textarea(attrs={'rows': '3'}),
#                                         required=False)
#     archivo = ExtFileField(label=u'Documento Especificaciones', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)
#
#     def deshabilitar(self):
#         deshabilitar_campo(self, 'periodo')
#         deshabilitar_campo(self, 'mincalificacion')


class BecaTipoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=True)
    nombrecorto = forms.CharField(label=u'Nombre corto', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=True)
    minimo_asistencia = forms.IntegerField(label=u'Mínimo asistencia', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '25%'}))
    minimo_promedio = forms.IntegerField(label=u'Mínimo promedio', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '25%'}))
    numemejores = forms.IntegerField(label=u'Cantidad de mejores promedios', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '25%'}))
    vigente = forms.BooleanField(label=u'Vigente', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    nombrecaces = forms.CharField(label=u'Nombre caces', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=True)


class BecaAsignacionForm(forms.Form):
    solicitud = forms.CharField(label=u'Alumno:', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    cantidadmeses = forms.ChoiceField(label=u'Cantidad de meses', required=False, choices=MESES_NUMBER_CHOICES,
                                      widget=forms.Select(attrs={'class': 'input-medium'}))
    montomensual = forms.FloatField(label=u"Monto mensual", initial="0.00", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    montobeneficio = forms.FloatField(label=u"Monto Total", initial="0.00", required=False,
                                      widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_NUE_RENO, widget=forms.Select(attrs={'class': 'imp-50'}))
    grupopago = forms.CharField(label=u'Grupo de pago', widget=forms.TextInput(attrs={'class': 'imp-50'}),
                                required=False)
    estadobeca = forms.ChoiceField(label=u'Estado beca', required=False, choices=ESTADO_BECA_ASIG,
                                   widget=forms.Select(attrs={'class': 'imp-50'}))

    def bloquear(self):
        deshabilitar_campo(self, 'solicitud')


class BecaAsignacionManualForm(forms.Form):
    # periodo = forms.ModelChoiceField(Periodo.objects.all().order_by('tipo', '-fin'), required=False, label=u'Periodo')
    inscripcion = forms.IntegerField(initial=0, required=False, label=u'Alumno',
                                     widget=forms.TextInput(attrs={'select2search': 'true'}))
    becatipo = forms.ModelChoiceField(BecaTipo.objects.all(), required=False, label=u'Tipo beca')
    # estado = forms.ChoiceField(label=u'Estado', choices=((2, u'APROBADO')), widget=forms.Select(attrs={'class': 'imp-50'}))
    cantidadmeses = forms.ChoiceField(label=u'Cantidad de meses', required=False, choices=MESES_NUMBER_CHOICES,
                                      widget=forms.Select(attrs={'class': 'input-medium'}))
    montomensual = forms.FloatField(label=u"Monto mensual", initial="0.00", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    montobeneficio = forms.FloatField(label=u"Monto Total", initial="0.00", required=False,
                                      widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_NUE_RENO, widget=forms.Select(attrs={'class': 'imp-50'}))
    grupopago = forms.CharField(label=u'Grupo de pago', widget=forms.TextInput(attrs={'class': 'imp-50'}),
                                required=False)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)

    def bloquear(self):
        deshabilitar_campo(self, 'solicitud')


class BecaAsignacion2Form(forms.Form):
    pass


class ImportarBecaForm(forms.Form):
    periodo = forms.ModelChoiceField(Periodo.objects.filter(status=True).order_by('tipo', '-fin'), label=u'Periodo')
    # carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.filter(status=True), required=False)
    becatipo = forms.ModelChoiceField(BecaTipo.objects.filter(status=True), required=False, label=u'Tipo Beca')
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_NUE_RENO, widget=forms.Select(attrs={'class': 'imp-50'}))
    grupopago = forms.CharField(label=u'Grupo de pago', widget=forms.TextInput(attrs={'class': 'imp-50'}),
                                required=False)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 4Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=10485760)


class BecaDetalleSolicitudArchivoForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 6Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=6291456)


class BecaAprobarArchivoForm(forms.Form):
    estado = forms.ChoiceField(label=u'Estado Revisión', choices=ESTADO_DOCUMENTO_REVISION,
                               widget=forms.Select(attrs={'class': 'imp-50'}))
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 6Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=6291456)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class BecaSolicitudAnulacionForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo Respaldo', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class BecaSolicitudRechazaOnLineForm(forms.Form):
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class BecaAceptarRechazarForm(forms.Form):
    observacion = forms.CharField(label=u'Motivos', widget=forms.Textarea(attrs={'rows': '5'}), required=True)
    archivo = ExtFileField(label=u'Archivo Carta Renuncia a la Beca', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)

    def borrar_campos(self):
        del self.fields['archivo']
        del self.fields['observacion']


class BecaSolicitudAnularForm(forms.Form):
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class BecaValidarCedulaForm(forms.Form):
    estadocedula1 = forms.ChoiceField(label=u'Estado Cédula Solicitante', choices=ESTADO_REVISION_ARCHIVO, widget=forms.Select(attrs={'class': 'imp-25'}))
    estadocert1 = forms.ChoiceField(label=u'Estado Certificado Solicitante', choices=ESTADO_REVISION_ARCHIVO, widget=forms.Select(attrs={'class': 'imp-25'}))
    estadocedula2 = forms.ChoiceField(label=u'Estado Cédula Representante Solidario', choices=ESTADO_REVISION_ARCHIVO, widget=forms.Select(attrs={'class': 'imp-25'}))
    estadocert2 = forms.ChoiceField(label=u'Estado Certificado Representante', choices=ESTADO_REVISION_ARCHIVO, widget=forms.Select(attrs={'class': 'imp-25'}))
    observacion = forms.CharField(label=u'Observaciones', widget=forms.Textarea(attrs={'rows': '2'}), required=False)

    def estados_validar(self):
        opciones = [('', u'--Seleccione--'), (2, u'VALIDADO'), (3, u'RECHAZADO')]
        self.fields['estadocedula1'].choices = opciones
        self.fields['estadocedula2'].choices = opciones
        self.fields['estadocert1'].choices = opciones
        self.fields['estadocert2'].choices = opciones


class BecaSolicitudSubirCedulaForm(forms.Form):
    archivo1 = ExtFileField(label=u'Cédula Solicitante', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'separator': True, 'separatortitle': 'Documentos del Solicitante'}))
    archivo2 = ExtFileField(label=u'Certificado Votación Solicitante', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)
    archivo5 = ExtFileField(label=u'Acta de Grado Solicitante', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)
    archivo6 = ExtFileField(label=u'Planilla de servicio básico', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)
    archivo7 = ExtFileField(label=u'Declaración juramentada', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)
    archivo3 = ExtFileField(label=u'Cédula Representante Solidario', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'separator': True, 'separatortitle': 'Documentos del Representante Solidario', 'blanklinebefore': True}))
    archivo4 = ExtFileField(label=u'Certificado Votación Representante Solidario', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)
    archivo8 = ExtFileField(label=u'Certificado Bancario', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)

    def borrar_campos(self, archivo):
        if archivo == 1:
            del self.fields['archivo1']
        elif archivo == 2:
            del self.fields['archivo2']
        elif archivo == 3:
            del self.fields['archivo3']
        elif archivo == 4:
            del self.fields['archivo4']
        elif archivo == 5:
            del self.fields['archivo5']
        elif archivo == 6:
            del self.fields['archivo6']
        elif archivo == 7:
            del self.fields['archivo7']
        else:
            del self.fields['archivo8']


class BecaSubirContratoForm(forms.Form):
    contrato = ExtFileField(label=u'Contrato de Beca', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'separator': True, 'separatortitle': 'Contrato de Beca Firmado'}))


class RepresentanteSolidarioForm(forms.Form):
    cedula = forms.CharField(label=u"Cédula", max_length=10, required=True, widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    nombre = forms.CharField(max_length=100, label=u'Nombres', required=True)
    apellido1 = forms.CharField(max_length=50, label=u'Primer Apellido', required=True)
    apellido2 = forms.CharField(max_length=20, label=u'Segundo Apellido', required=True)
    archivocedula = ExtFileField(label=u'Cédula Representante Solidario', required=True, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'separator': True, 'separatortitle': 'Documentos del Representante Solidario', 'blanklinebefore': True}))
    archivovotacion = ExtFileField(label=u'Certificado Votación Representante Solidario', required=True, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)


class CuentaBancariaBecadoForm(forms.Form):
    banco = forms.ModelChoiceField(label=u"Banco", queryset=Banco.objects.filter(status=True).order_by('nombre'), required=True, widget=forms.Select(attrs={'class': 'imp-100', 'formwidth': '100%'}))
    numero = forms.CharField(label=u"N° Cuenta", max_length=15, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '50%'}))
    tipocuentabanco = forms.ModelChoiceField(label=u"Tipo", queryset=TipoCuentaBanco.objects.filter(status=True).order_by('id'), required=True, widget=forms.Select())
    archivo = ExtFileField(label=u'Certificado Cuenta Bancaria', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)


class BecaComprobanteVentaForm(forms.Form):
    rucproveedor = forms.CharField(label=u"Ruc Proveedor", max_length=13, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '50%'}))
    total = forms.FloatField(label=u"Total Comprobante", initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    archivo = ExtFileField(label=u'Comprobante de Venta', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)

    def borrar_campos(self):
        del self.fields['total']


class BecaComprobanteVentaEditForm(forms.Form):
    rucproveedor2 = forms.CharField(label=u"Ruc Proveedor", max_length=13, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '50%'}))
    total2 = forms.FloatField(label=u"Total Comprobante", initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    archivo2 = ExtFileField(label=u'Comprobante de Venta', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)

    def borrar_campos(self):
        del self.fields['total2']


class BecaComprobanteVentaValidaForm(forms.Form):
    rucproveedor = forms.CharField(label=u"Ruc Proveedor", max_length=13, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '100%'}))
    total = forms.FloatField(label=u"Total Comprobante", initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '2', 'formwidth': '100%'}))
    estado = forms.ChoiceField(label=u'Estado', choices=ESTADO_REVISION_ARCHIVO, widget=forms.Select(attrs={'class': 'imp-50'}))
    observacion = forms.CharField(label=u'Observaciones', widget=forms.Textarea(attrs={'rows': '2'}), required=False)

    def estados_validar(self):
        opciones = [('', u'--Seleccione--'), (2, u'VALIDADO'), (3, u'RECHAZADO'), (6, u'RECHAZADO X INCUMPLIMIENTO')]
        self.fields['estado'].choices = opciones


class BecaComprobanteEliminarForm(forms.Form):
    observacioneli = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class ImportarArchivoPagoBecaXLSForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño maximo permitido 12Mb, en formato xlsx', ext_whitelist=(".xlsx",), max_upload_size=12582912)


class BecaAsignacionSubirEvidenciaForm(forms.Form):
    archivocontrato = ExtFileField(label=u'Contrato de Beca', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)
    archivoacta = ExtFileField(label=u'Acta Entrega-Recepción', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)
    archivofoto = ExtFileField(label=u'Foto Entrega Beca', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato jpeg, jpg o png', ext_whitelist=(".jpeg", ".jpg", ".png"), max_upload_size=4194304)


class BecaUtilizacionForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre:', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=True)
    vigente = forms.BooleanField(label=u'Vigente:', required=False)


class BecaDetalleUtilizacionForm(forms.Form):
    utilizacion = forms.ModelChoiceField(label=u"Utilización", queryset=BecaUtilizacion.objects.all(), required=False,
                                         widget=forms.Select(attrs={'class': 'imp-75'}))
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 6Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=6291456)

    def bloquear(self, asignacion):
        deshabilitar_campo(self, 'utilizacion')

    def desbloquear(self):
        habilitar_campo(self, 'utilizacion')


class BecaAprobarArchivoUtilizacionForm(forms.Form):
    estado = forms.ChoiceField(label=u'Estado Revisión', choices=ESTADO_DOCUMENTO_REVISION,
                               widget=forms.Select(attrs={'class': 'imp-50'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class BecaRequisitosForm(forms.Form):
    nombre = forms.CharField(label=u'Descripción:', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    vigente = forms.BooleanField(required=False, label=u'Vigente:')
    matricula = forms.BooleanField(required=False, label=u"Validar Matricula")
    residencia = forms.BooleanField(required=False, label=u"Validar Residencia Ecuador")
    regular = forms.BooleanField(required=False, label=u"Validar Estudiante Regular")
    reprobado = forms.BooleanField(required=False, label=u"Validar Repropbado")
    nodeudar = forms.BooleanField(required=False, label=u"Validar no Adeudar")


class SilaboDigitalFirmadoForm(forms.Form):
    silabofirmado = ExtFileField(label=u'Seleccione Silabo Digital:', required=False,
                                 help_text=u'Tamaño Maximo permitido 6Mb, en formato pdf, doc, docx, zip',
                                 ext_whitelist=(".pdf", ".doc", ".docx", ".zip", ".rar"), max_upload_size=6291456)


class PracticaMateriaForm(forms.Form):
    calificar = forms.BooleanField(label=u"Calificar Práctica", required=False,
                                   widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'separator': 'true'}))
    calificarmax = forms.IntegerField(label=u"Calificación Maxima:", required=False, initial=0,
                                      widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'formwidth': '100%'}))
    calificarmin = forms.IntegerField(label=u"Calificación Minima:", required=False, initial=0,
                                      widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'formwidth': '100%'}))


class TipoPlanificacionClaseSilaboForm(forms.Form):
    tipoplanificacion = forms.CharField(label=u'Tipo de Planificación de Sílabo ',
                                        widget=forms.Textarea(attrs={'rows': '1'}), required=True)


class PlanificacionClaseSilaboForm(FormModeloBase):
    tipoplanificacion = forms.CharField(label=u'Tipo de planificacion de Silabo', widget=forms.Textarea(attrs={'rows': '1'}), required=False)
    fechainicio = forms.DateField(label=u"Fecha de inicio de Semana:", initial=datetime.now().date(), required=False, widget=DateTimeInput({'col': '6'}))
    fechafin = forms.DateField(label=u"Fecha fin de Semana:", initial=datetime.now().date(), required=False, widget=DateTimeInput({'col': '6'}))
    semana = forms.IntegerField(label=u"Numero de semana:", required=False, initial=0, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'formwidth': '20%'}))
    obejetivosemanal = forms.CharField(label=u'Objetivo de la Semana:', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    parcial = forms.ChoiceField(label=u"Parcial", choices=PARCIAL, required=False, widget=forms.Select(attrs={'formwidth': '60%'}))
    examen = forms.BooleanField(label=u"Examen", required=False, widget=forms.CheckboxInput(attrs={'formwidth': '40%'}))

    def adicionar(self):
        deshabilitar_campo(self, 'tipoplanificacion')


class BibliografiaComplementariaForm(FormModeloBase):
    bibliografia = forms.IntegerField(initial=0, required=False, label=u'Bibliografia Complementaria', widget=forms.TextInput(attrs={'crearboton': 'true', 'classbuton': 'adicionarbibliografiacomplementaria', 'select2search': 'true', 'formwidth': '90%', 'controlwidth': '300px'}))
    articulo = forms.IntegerField(initial=0, required=False, label=u'Articulo', widget=forms.TextInput(attrs={'crearboton': 'true', 'classbuton': 'adicionararticulo', 'select2search': 'true', 'formwidth': '90%', 'controlwidth': '300px'}))

    def ocultar(self):
        del self.fields['bibliografia']


class ArticuloComplementariForm(forms.Form):
    articulo = forms.IntegerField(initial=0, required=False, label=u'Artículo Complementario', widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '90%'}))


class SolicitudJustificacionAsistenciaForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha:", initial=datetime.now(), required=False, input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y',
                                                 attrs={'class': 'selectorfecha', 'formwidth': '100%'}))
    casojustificacion = forms.ModelChoiceField(label=u"Caso", required=True,
                                               queryset=CasosJustificacion.objects.filter(activo=True),
                                               widget=forms.Select(attrs={'formwidth': '100%'}))
    justificativo = forms.CharField(label=u'Justificativo', widget=forms.Textarea(attrs={'rows': '5'}), required=True)

    fechainicioreposo = forms.DateField(label=u"Fecha inicio del reposo médico:", initial=datetime.now(), required=True, input_formats=['%d-%m-%Y'],
                                        widget=DateTimeInput(format='%d-%m-%Y',
                                                             attrs={'class': 'selectorfecha', 'formwidth': '35%'}))
    fechafinreposo = forms.DateField(label=u"Fecha fin del reposo médico:", initial=datetime.now(), required=True, input_formats=['%d-%m-%Y'],
                                     widget=DateTimeInput(format='%d-%m-%Y',
                                                          attrs={'class': 'selectorfecha', 'formwidth': '35%'}))
    numerodiasreposo = forms.IntegerField(label=u"Número de días de reposo:", required=False, initial=0, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'formwidth': '30%'}))
    # fechaemision =
    codigoafiliacionmsp = forms.CharField(label=u'Código de afiliación al MSP/otro:', widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '50%'}), required=True)
    nombredoctor = forms.CharField(label=u'Nombres y Apellidos completos del médico:', widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '100%'}), required=True)
    diagnostico = forms.CharField(label=u'Diagnóstico con CIE10', widget=forms.Textarea(attrs={'rows': '5'}), required=True)

    archivo = ExtFileField(label=u'Evidencia', required=False,
                           help_text=u'Tamaño Maximo permitido 50Mb, en formato pdf',
                           ext_whitelist=(".pdf", ".doc", ".docx", ".zip", ".rar"), max_upload_size=50485760)
    extendida = forms.BooleanField(label=u'Justificación extendida', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%', 'separator2': 'true'}))

    def deshabilitar_fecha(self):
        deshabilitar_campo(self, 'fecha')
        campo_modolectura(self, 'numerodiasreposo', True)


class SolicitudJustificacionAsistenciaBienestarForm(forms.Form):
    fechainicio = forms.DateField(label=u"Fecha inicio:", initial=datetime.now(), required=False,
                                  input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                   attrs={'class': 'selectorfecha',
                                                                                          'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin:", initial=datetime.now(), required=False, input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y',
                                                    attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    matricula = forms.IntegerField(initial=0, required=False, label=u'Estudiante',
                                   widget=forms.TextInput(attrs={'select2search': 'true'}))
    casojustificacion = forms.ModelChoiceField(label=u"Caso", required=True,
                                               queryset=CasosJustificacion.objects.filter(activo=True),
                                               widget=forms.Select(attrs={'formwidth': '100%'}))
    justificativo = forms.CharField(label=u'Justificativo', widget=forms.Textarea(attrs={'rows': '5'}), required=True)
    archivo = ExtFileField(label=u'Evidencia', required=False,
                           help_text=u'Tamaño Maximo permitido 12Mb, en formato pdf',
                           ext_whitelist=(".pdf", ".doc", ".docx", ".zip", ".rar"), max_upload_size=12582912)


class AutorizarAlumnoSolicitudForm(forms.Form):
    fini = forms.DateField(label=u"Fecha de inicio:", initial=datetime.now().date(), required=False,
                           input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                            attrs={'class': 'selectorfecha',
                                                                                   'formwidth': '13%'}))
    ffin = forms.DateField(label=u"Fecha fin:", initial=datetime.now().date(), required=False,
                           input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                            attrs={'class': 'selectorfecha',
                                                                                   'formwidth': '13%'}))


class CasosJustificacionForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2'}), required=True)
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '5'}), required=True)
    activo = forms.BooleanField(label=u'Vigente', initial=True, required=False)


# class ClaseTotalForm(forms.Form):
#     materia = forms.ModelChoiceField(label=u"Materia", queryset=Materia.objects.all(), required=False)
#     aula = forms.ModelChoiceField(label=u"Aula", queryset=Aula.objects.all())
#     tipoprofesor = forms.ModelChoiceField(label=u'Tipo', required=False, queryset=TipoProfesor.objects.all(),widget=forms.Select(attrs={'class': 'imp-50'}))
#     turno = forms.ModelChoiceField(label=u"Turno", queryset=Turno.objects.filter(status=True), required=False, widget=forms.Select(attrs={'class': 'imp-75'}))
#     dia = forms.ChoiceField(label=u"Dia", choices=DIAS_CHOICES, required=False, widget=forms.Select(attrs={'class': 'imp-25'}))
#     inicio = forms.DateField(label=u"Fecha inicio", input_formats=['%d-%m-%Y'], required=False, widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
#     fin = forms.DateField(label=u"Fecha fin", input_formats=['%d-%m-%Y'], required=False, widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
#
#     def adicionar(self, nivel, coordinacion=None, carrera=None, materia=None):
#         if Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion).exists():
#             self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
#         else:
#             self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)
#         if carrera:
#             self.fields['materia'].queryset = Materia.objects.filter(asignaturamalla__malla__carrera=carrera, nivel=nivel, cerrado=False)
#         else:
#             self.fields['materia'].queryset = Materia.objects.filter(nivel=nivel, cerrado=False)
#         if materia:
#             self.fields['materia'].queryset = Materia.objects.filter(id=materia.id, cerrado=False)
#         self.fields['turno'].queryset = nivel.sesion.turnosactivos()
#         dias = list(DIAS_CHOICES)
#         if not nivel.sesion.lunes:
#             dias.remove((1, 'LUNES'))
#         if not nivel.sesion.martes:
#             dias.remove((2, 'MARTES'))
#         if not nivel.sesion.miercoles:
#             dias.remove((3, 'MIERCOLES'))
#         if not nivel.sesion.jueves:
#             dias.remove((4, 'JUEVES'))
#         if not nivel.sesion.viernes:
#             dias.remove((5, 'VIERNES'))
#         if not nivel.sesion.sabado:
#             dias.remove((6, 'SABADO'))
#         if not nivel.sesion.domingo:
#             dias.remove((7, 'DOMINGO'))
#         self.fields['dia'].choices = dias
#
#     def editar(self, nivel, coordinacion=None, materia=None, carrera=None):
#         if Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion).exists():
#             self.fields['aula'].queryset = Aula.objects.filter(aulacoordinacion__coordinacion=coordinacion)
#         else:
#             self.fields['aula'].queryset = Aula.objects.filter(sede=nivel.sede)
#
#         if carrera:
#             self.fields['materia'].queryset = Materia.objects.filter(asignaturamalla__malla__carrera=carrera, nivel=nivel)
#         else:
#             self.fields['materia'].queryset = Materia.objects.filter(nivel=nivel)
#         self.fields['materia'].queryset = Materia.objects.filter(id=materia.id)
#         self.fields['turno'].queryset = nivel.sesion.turnosactivos()
#         deshabilitar_campo(self, 'materia')
#         # deshabilitar_campo(self, 'turno')
#         dias = list(DIAS_CHOICES)
#         if not nivel.sesion.lunes:
#             dias.remove((1, 'LUNES'))
#         if not nivel.sesion.martes:
#             dias.remove((2, 'MARTES'))
#         if not nivel.sesion.miercoles:
#             dias.remove((3, 'MIERCOLES'))
#         if not nivel.sesion.jueves:
#             dias.remove((4, 'JUEVES'))
#         if not nivel.sesion.viernes:
#             dias.remove((5, 'VIERNES'))
#         if not nivel.sesion.sabado:
#             dias.remove((6, 'SABADO'))
#         if not nivel.sesion.domingo:
#             dias.remove((7, 'DOMINGO'))
#         self.fields['dia'] = forms.ChoiceField(choices=dias, widget=forms.Select(attrs={'class': 'imp-25'}))
#         # deshabilitar_campo(self, 'dia')

class ObjetivoApendizajeForm(forms.Form):
    objetivoaprendizaje = forms.CharField(label=u'Objetivo Aprendizaje', widget=forms.Textarea(attrs={'rows': '3'}),
                                          required=True)


class AulaForm(forms.Form):
    aula = forms.ModelChoiceField(label=u"Aula", required=True, queryset=Aula.objects.filter(status=True).order_by('nombre'),widget=forms.Select(attrs={'class': 'imp-75'}))




class LibroBibliotecaForm(forms.Form):
    codigokoha = forms.IntegerField(label=u'Codigo de libro', initial=0, required=True,
                                    widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    codigoisbn = forms.CharField(label=u'Codigo ISBN', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    titulo = forms.CharField(label=u'Título', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    nombre = forms.CharField(label=u'Descripción', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    autor = forms.CharField(label=u'Nombre del autor', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    aniopublicacion = forms.IntegerField(label=u'Año de publicación', initial=0, required=True,
                                         widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    editorial = forms.CharField(label=u'Editorial', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    cantidad = forms.IntegerField(label=u'Cantidad', initial=0, required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    idioma = forms.ModelChoiceField(label=u'Idioma', queryset=Idioma.objects.all(), widget=forms.Select(attrs={'formwidth': '100%'}))
    ciudad = forms.CharField(label=u'Ciudad', widget=forms.TextInput(attrs={'rows': '3'}), required=True)
    tipo = forms.ChoiceField(label=u'Tipo de Libro', choices=TIPO_DE_LIBRO, required=True, widget=forms.Select(attrs={'class': 'imp-50'}))
    coordinacion = forms.ModelChoiceField(label=u"Coordinación", queryset=Coordinacion.objects.all(), required=False)
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False)
    hilera = forms.CharField(label=u'Hilera', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=True)
    areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento - Campo amplio",
                                              queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False,
                                              widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento - Campo específico",
                                                 queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False,
                                                 widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especificaconocimiento - Campo Detallado",
                                                           queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1),
                                                           required=False, widget=forms.Select())
    url_odilo = forms.CharField(label=u'Url Odilo', widget=forms.TextInput(attrs={'rows': '3'}), required=False)

    def editar(self, programas):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.areaconocimiento, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(
            areaconocimiento=programas.subareaconocimiento, vigente=True)


class ConfirmaExtensionForm(forms.Form):
    extension = forms.IntegerField(label=u'Extension telefónia', initial=0, required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class AulaMantForm(forms.Form):
    sede = forms.ModelChoiceField(label=u"Sede", queryset=Sede.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-75'}))
    nombre = forms.CharField(label=u'Nombre', max_length=100, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-75'}))
    tipo = forms.ModelChoiceField(label=u"Tipo Aula", queryset=TipoAula.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-75'}))
    capacidad = forms.IntegerField(label=u'Capacidad', initial=0, required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    tipoubicacion = forms.ModelChoiceField(label=u"Tipo Ubicación", queryset=TipoUbicacionAula.objects.all(),
                                           required=True, widget=forms.Select(attrs={'class': 'imp-75'}))
    bloque = forms.ModelChoiceField(label=u"Bloque", queryset=Bloque.objects.filter(status=True), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-75'}))

    def editar(self):
        deshabilitar_campo(self, 'sede')
        # deshabilitar_campo(self, 'nombre')
        deshabilitar_campo(self, 'tipo')
        # deshabilitar_campo(self, 'capacidad')


class TipoUbicacionAulaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=100, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-75'}))


class SolicitudCompraLibroForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre del libro', max_length=200,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}), required=True)
    autor = forms.CharField(label=u'Autor', max_length=400, widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    aniopublicacion = forms.IntegerField(label=u'Año de publicación', initial=0, required=True,
                                         widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    editorial = forms.CharField(label=u'Editorial', max_length=400, widget=forms.Textarea(attrs={'rows': '3'}),
                                required=True)
    cantidad = forms.CharField(initial=0, label=u'Cantidad', required=True,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class TipoFormacionCarreraForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=100, widget=forms.TextInput(attrs={'class': 'imp-100'}),
                             required=True)


class AprendizajePracticoInglesForm(forms.Form):
    observaciones = forms.CharField(label=u'Observaciones', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    fechainicio = forms.DateField(label=u"Fecha", initial=datetime.now().date(), input_formats=['%Y-%m-%d'],
                                  widget=DateTimeInput(format='%Y-%m-%d', attrs={'class': 'selectorfecha'}),
                                  required=False)
    horainicio = forms.TimeField(label=u"Hora Desde", required=False, initial=str(datetime.now().time()),
                                 input_formats=['%H:%M'],
                                 widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    horafin = forms.TimeField(label=u'Hora Hasta', required=False, initial=str(datetime.now().time()),
                              input_formats=['%H:%M'],
                              widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))


class ConfirmaCredoPoliticaForm(forms.Form):
    credo = forms.ModelChoiceField(Credo.objects.filter(activo=True, status=True).order_by('nombre'), required=True,
                                   label=u'Seleccione Credo')
    preferenciapolitica = forms.ModelChoiceField(
        PreferenciaPolitica.objects.filter(activo=True, status=True).order_by('nombre'), required=True,
        label=u'Seleccione Preferencia Política')


# class RegistrarPolideportivoForm(forms.Form):
#     nombre = forms.CharField(label=u'Nombre', max_length=400, widget=forms.TextInput(attrs={'class': 'imp-100'}), required=False)
#     utinsilios = forms.ModelChoiceField(label=u"Utinsilio", queryset=Utinsilios.objects.filter(status=True), required=True, widget=forms.Select(attrs={'class': 'imp-75'}))
#     cantidad = forms.CharField(initial=0, label=u'Cantidad', required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
#     horainicio = forms.TimeField(label=u"Hora inicio", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'],widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%'}))
#     horafin = forms.TimeField(label=u"Hora fin", required=False, initial='', widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%'}))
#     observacion = forms.CharField(label=u'Observación', max_length=400, widget=forms.Textarea(attrs={'rows': '3'}), required=False)
#
#     def deshabilitar(self):
#         deshabilitar_campo(self, 'nombre')
#
#
class LibroFotocopiadoForm(forms.Form):
    codigokoha = forms.IntegerField(label=u'Código de libro', initial=0, required=True, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '100%'}))
    nombre = forms.CharField(label=u'Nombre de Libro', max_length=300, widget=forms.Textarea(attrs={'rows': '2'}),
                             required=True)
    autor = forms.CharField(label=u'Nombre del autor', widget=forms.Textarea(attrs={'rows': '2'}), required=True)
    aniopublicacion = forms.IntegerField(label=u'Año de publicación', initial=0, required=True,
                                         widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    editorial = forms.CharField(label=u'Editorial', widget=forms.Textarea(attrs={'rows': '2'}), required=True)
    ciudad = forms.CharField(label=u'Ciudad', widget=forms.TextInput(attrs={'class': 'imp-100'}), required=True)
    archivo = ExtFileField(label=u'Archivo', required=False, help_text=u'Tamaño Maximo permitido 15Mb, en formato pdf',
                           ext_whitelist=(".pdf"), max_upload_size=15728640)


class UtensiliosForm(forms.Form):
    utensilios = forms.ModelChoiceField(label=u"Utensilios", queryset=Utensilios.objects.filter(status=True),
                                        required=True, widget=forms.Select(attrs={'class': 'imp-75'}))
    cantidad = forms.IntegerField(label=u'Cantidad', initial=0, required=True,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class CambiarProfesorForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))


# consejerias
class ConsejeriaAcademicaForm(forms.Form):
    motivo = forms.CharField(label=u'Motivo', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    fechadesde = forms.DateField(label=u"Fecha desde", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)
    fechahasta = forms.DateField(label=u"Fecha hasta", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)
    horadesde = forms.TimeField(label=u"Hora Desde", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '50%'}))
    horahasta = forms.TimeField(label=u"Hora Hasta", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '50%'}))
    lunes = forms.BooleanField(label=u'Lunes', initial=False, required=False,
                               widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'true'}))
    martes = forms.BooleanField(label=u'Martes', initial=False, required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'true'}))
    miercoles = forms.BooleanField(label=u'Miercoles', initial=False, required=False,
                                   widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'true'}))
    jueves = forms.BooleanField(label=u'Jueves', initial=False, required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'false'}))
    viernes = forms.BooleanField(label=u'Viernes', initial=False, required=False,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'false'}))
    sabado = forms.BooleanField(label=u'Sabado', initial=False, required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'false'}))
    domingo = forms.BooleanField(label=u'Domingo', initial=False, required=False,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'false'}))


class ConsejeriaAcademicaDetalleForm(forms.Form):
    horadesde = forms.TimeField(label=u"Hora Desde", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'],
                                widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    horahasta = forms.TimeField(label=u"Hora Hasta", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'],
                                widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))


class ConsejeriaAcademicaDetalleAddForm(forms.Form):
    motivo1 = forms.CharField(label=u'Motivo', widget=forms.Textarea(attrs={'formwidth': '50%', 'rows': '2'}),
                              required=False)
    horadesde1 = forms.TimeField(label=u"Hora Desde", required=False, initial=str(datetime.now().time()),
                                 input_formats=['%H:%M'],
                                 widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    horahasta1 = forms.TimeField(label=u"Hora Hasta", required=False, initial=str(datetime.now().time()),
                                 input_formats=['%H:%M'],
                                 widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))


class DocenteConsejeriaForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    todos = forms.BooleanField(label=u'Todos', initial=False, required=False)


class ParaleloForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=100, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-50'}))

    def clean_nombre(self):
        nombre = self.cleaned_data.get('nombre')
        if not nombre.strip():
            raise forms.ValidationError('Nombre no debe ser vacio')
        nombre = nombre.strip().upper()
        id = self.data.get('id')
        paralelos = Paralelo.objects.filter(nombre=nombre)
        if id:
            paralelos = paralelos.exclude(id=id)
        if paralelos:
            raise forms.ValidationError('Nombre {} ya se encuentra registrado'.format(nombre))
        return nombre

class BloqueForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', max_length=100, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-50'}))
    # observacion = forms.CharField(label=u'Observación', required=False, widget=forms.Textarea(attrs={'rows': '3'}))
    tipo = forms.ChoiceField(label=u"Tipo Bloque", choices=TIPO_BLOQUE, required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    foto = ExtFileField(label=u'Foto', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato jpg, jpeg, png', ext_whitelist=(".jpg", ".jpeg", ".png"), max_upload_size=8194304, widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg'}))
    referencias = forms.CharField(label=u'Referencias', max_length=5000, required=True, widget=forms.Textarea(attrs={'formwidth': '100%', 'rows': '5'}))
    latitud = forms.FloatField(initial=0, label=u'Latitud', required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'readonly': True}))
    longitud = forms.FloatField(initial=0, label=u'Longitud', required=False, widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'readonly': True}))



class TurnoForm(forms.Form):
    sesion = forms.ModelChoiceField(Sesion.objects.filter(status=True), required=True, label=u'Sesion')
    turno = forms.IntegerField(label=u"Turno", required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '33%'}))

    comienza = forms.TimeField(label=u"Comienza", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'],
                               widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    termina = forms.TimeField(label=u"Termina", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'],
                              widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    mostrar = forms.BooleanField(label=u'Visible', required=False,
                                 initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '60%'}))
    horas = forms.IntegerField(label=u"Horas", required=False, initial=1, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))


class PreInscripcionForm(forms.Form):
    estudiante = forms.IntegerField(initial=0, required=True, label=u'Estudiante',
                                    widget=forms.TextInput(attrs={'select2search': 'true'}))


class ConvenioEmpresaForm(forms.Form):
    notificar = forms.BooleanField(label=u'¿Notificar?', required=False,
                                        widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))

    empresaempleadora = forms.ModelChoiceField(EmpresaEmpleadora.objects.filter(status=True).order_by('nombre'),
                                               required=True, label=u'Empresa empleadora')
    tipoconvenio = forms.ModelChoiceField(TipoConvenio.objects.filter(status=True), required=True,
                                          label=u'Tipo convenio')
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                  required=True)
    fechafinalizacion = forms.DateField(label=u"Fecha finalización", initial=datetime.now().date(),
                                        input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={
            'class': 'selectorfecha', 'formwidth': '50%'}), required=True)
    cargoresponsableexterno = forms.CharField(label=u'Cargo de responsable externo', max_length=250, required=False,
                                         widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '50%'}))
    responsableexterno = forms.CharField(label=u'Responsable externo', max_length=250, required=True,
                                         widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '50%'}))
    objetivo = forms.CharField(label=u'Objeto', max_length=5000, required=True,
                               widget=forms.Textarea(attrs={'formwidth': '100%', 'rows': '15'}))
    dias_notificacion = forms.IntegerField(label=u"Días para Generación de Reporte", required=False, initial=1, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '32%'}))
    para_practicas = forms.BooleanField(label=u'¿Para Prácticas Profesionales?', required=False,
                                        widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))
    para_pasantias = forms.BooleanField(label=u'¿Para Pasantías Profesionales?', required=False,
                                        widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))

    numocas = forms.CharField(label=u'N°. OCAS', max_length=20, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-40'}))
    fechaocas = forms.DateField(label=u"Fecha OCAS", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                  required=True)
    archivoocas = ExtFileField(label=u'Archivo OCAS', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=4194304)

    def cargar_responsableinterno(self, responsableinterno):
        self.fields['responsableinterno'].widget.attrs[
            'descripcion'] = responsableinterno.flexbox_repr() if responsableinterno else ""
        self.fields['responsableinterno'].widget.attrs['value'] = responsableinterno.id if responsableinterno else ""

    def adicionar(self):
        deshabilitar_campo(self,'notificar')


class DetalleResponsableInternoForm(forms.Form):
    responsable = forms.ModelChoiceField(label=u'Responsable interno', queryset=Persona.objects.filter(status=True), required=True,
                                        widget=forms.Select(attrs={'class': 'imp-100', 'codigo': ''}))
    cargo = forms.ModelChoiceField(label=u'Denominación del Puesto', queryset=DenominacionPuesto.objects.filter(status=True), required=True,
                                 widget=forms.Select(attrs={'codigo': ''}))



class DepartamentoConvenioForm(forms.Form):
    departamentoresponsable = forms.ModelMultipleChoiceField(label=u'Responsables Interno', required=True, queryset=Departamento.objects.filter(integrantes__isnull=False, status=True, responsable__isnull=False).distinct())


class TipoConvenioForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=500, required=True,
                             widget=forms.Textarea(attrs={'formwidth': '100%', 'rows': '5'}))


class TipoArchivoConvenioForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=500, required=True,
                             widget=forms.Textarea(attrs={'formwidth': '100%', 'rows': '5'}))


class ArchivoConvenioForm(forms.Form):
    # tipoarchivoconvenio = forms.ModelChoiceField(label=u"Tipo archivo",
    #                                              queryset=TipoArchivoConvenio.objects.filter(status=True),
    #                                              required=False, widget=forms.Select(attrs={'class': 'imp-100'}))
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=4194304)


class RepresentanteForm(forms.Form):
    representanteestudiantil = forms.IntegerField(initial=0, required=False,
                                                  label=u'Representante Principal Estudiantil',
                                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    representantedocente = forms.IntegerField(initial=0, required=False, label=u'Representante Principal de Docente',
                                              widget=forms.TextInput(attrs={'select2search': 'true'}))
    representantesuplentedocente = forms.IntegerField(initial=0, required=False,
                                                      label=u'Representante Suplente de Docente',
                                                      widget=forms.TextInput(attrs={'select2search': 'true'}))
    representanteservidores = forms.IntegerField(initial=0, required=False,
                                                 label=u'Representante Principal de los Servidores y Trabajadores',
                                                 widget=forms.TextInput(attrs={'select2search': 'true'}))


class EjeformativoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=250, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))


class TopeAlumnosPrimeroForm(forms.Form):
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.filter(coordinacion__id=9),
                                     required=False)
    cantidad = forms.IntegerField(label=u'Cantidad', initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))

    def editar(self):
        deshabilitar_campo(self, 'carrera')


class EvidenciaFormatoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=300, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))


class FechaNotificacionEvaluacionForm(FormModeloBase):
    fechadesdenotificacion = forms.DateField(label=u"Fecha desde", initial=datetime.now().date(), input_formats=['%Y-%m-%d'], widget=DateTimeInput({'col': '6'}), required=False)


class AperturaPracticaPreProfesionalForm(forms.Form):
    periodo = forms.ModelChoiceField(label=u"Periodo", queryset=Periodo.objects.filter(status=True).order_by('-pk'), required=True, widget=forms.Select(attrs={'formwidth': '94%'}))
    fechaapertura = forms.DateField(label=u"Fecha apertura", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechacierre = forms.DateField(label=u"Fecha cierre", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechainicioverrequisitos = forms.DateField(label=u"Fecha Inicio Verificación de Requisitos", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechacierreverrequisitos = forms.DateField(label=u"Fecha Fin Verificación de Requisitos", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechainiciovalhoras = forms.DateField(label=u"Fecha Inicio Validación de Horas", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechacierrevalhoras = forms.DateField(label=u"Fecha Fin Validación de Horas", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechainicioreghoras = forms.DateField(label=u"Fecha Inicio Registros de Horas", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechacierrereghoras = forms.DateField(label=u"Fecha Fin Registros de Horas", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    motivo = forms.CharField(label=u'Motivo apertura', max_length=900, required=True,
                             widget=forms.Textarea(attrs={'formwidth': '94%', 'rows': '3'}))
    mensaje = forms.CharField(label=u"Mensaje", required=False, widget=CKEditorUploadingWidget())
    # decano = forms.BooleanField(label=u'Decano?', required=False,
    #                             widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    # directorcarrera = forms.BooleanField(label=u'Director carrera?', required=False,
    #                                      widget=forms.CheckboxInput(attrs={'formwidth': '34%'}))
    # estudiante = forms.BooleanField(label=u'Estudiante?', initial=True, required=False,
    #                                 widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    # periodoevidencia = forms.ModelChoiceField(label=u"Periodo de evidencias (Estudiante)",
    #                                           queryset=CabPeriodoEvidenciaPPP.objects.filter(
    #                                               status=True), required=True,
    #                                           widget=forms.Select(attrs={'formwidth': '94%'}))
    validar = forms.BooleanField(label=u'Validar solicitudes aprobadas y culminadas(Estudiante)?', required=False,
                                 initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    actualizararchivo = forms.BooleanField(label=u'Actualizar archivo solicitud(Estudiante)?', required=False,
                                           initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    publico = forms.BooleanField(label=u'Publico?', required=False,
                                 initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    coordinacion = forms.ModelMultipleChoiceField(label=u"Coordinación",
                                                  queryset=Coordinacion.objects.filter(status=True), required=False,
                                                  widget=forms.SelectMultiple(attrs={'formwidth': '94%'}))

    # carrera = forms.ModelMultipleChoiceField(label=u'Carrera', queryset=Carrera.objects.filter(status=True),
    #                                          required=False, widget=forms.SelectMultiple(attrs={'formwidth': '94%'}))

    def adicionar(self):
        # self.fields['carrera'].queryset = Carrera.objects.filter(nombre=None)
        self.fields['coordinacion'].queryset = Coordinacion.objects.filter(excluir=False).exclude(id__in=[9, 7])

    def cargar_carrera(self, aperturasolicitud):
        self.fields['coordinacion'].queryset = Coordinacion.objects.filter(excluir=False).exclude(id__in=[9, 7])
        # self.fields['carrera'].queryset = Carrera.objects.filter(activa=True, status=True,
        #                                                          coordinacion__in=aperturasolicitud.coordinaciones())


class DocumentoRequeridoCarreraForm(forms.Form):
    documento = forms.ModelMultipleChoiceField(label=u'Requisitos', queryset=RequisitosHomologacionPracticas.objects.filter(status=True), required=True)


class DocumentoRequeridoPracticaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    leyenda = forms.CharField(label=u'Leyenda', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivo = ExtFileField(label=u'Archivo solicitud', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png, docx',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png", ".docx"), max_upload_size=8194304,
                           widget=forms.FileInput(
                               attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg docx'}))


class FormatoPracticaPreProfesionalForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=250, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    vigente = forms.BooleanField(label=u'Vigente?', required=False, initial=True,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


class DetalleFormatoPracticaPreProfesionalForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=250, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    vigente = forms.BooleanField(label=u'Vigente?', required=False, initial=True,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=4194304)


class CronogramaEncuestaProcesoEvaluativoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=999, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), required=True,
                                  input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                   attrs={'class': 'selectorfecha',
                                                                                          'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin", initial=datetime.now().date(), required=True,
                               input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                attrs={'class': 'selectorfecha',
                                                                                       'formwidth': '50%'}))
    niveles = forms.ModelMultipleChoiceField(label=u'Niveles', queryset=Nivel.objects.filter(status=True),
                                             required=False)

    def cargar_niveles(self, periodo):
        self.fields['niveles'].queryset = Nivel.objects.filter(periodo=periodo, status=True).order_by(
            'nivellibrecoordinacion__coordinacion')


class EncuestaProcesoEvaluativoForm(forms.Form):
    cronogramaencuesta = forms.ModelChoiceField(label=u"Cronograma",
                                                queryset=CronogramaEncuestaProcesoEvaluativo.objects.filter(
                                                    status=True), required=False,
                                                widget=forms.Select(attrs={'class': 'imp-100'}))
    titulo = forms.CharField(label=u'Nombre', max_length=999, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.filter(status=True),
                                             required=False)
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), required=True,
                                  input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                   attrs={'class': 'selectorfecha',
                                                                                          'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin", initial=datetime.now().date(), required=True,
                               input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                attrs={'class': 'selectorfecha',
                                                                                       'formwidth': '50%'}))
    estudiante = forms.BooleanField(label=u'Estudiante?', required=False, initial=True,
                                    widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    profesor = forms.BooleanField(label=u'Profesor?', required=False, initial=False,
                                  widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    encuestaobligatoria = forms.BooleanField(label=u'Encuesta obligatoria?', required=False, initial=False,
                                             widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    activo = forms.BooleanField(label=u'Activo?', required=False, initial=True,
                                widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))

    def deshabilitar_cronograma(self):
        deshabilitar_campo(self, 'cronogramaencuesta')

    def cargar_carrera(self, cronograma):
        self.fields['carrera'].queryset = Carrera.objects.filter(activa=True, status=True,
                                                                 coordinacion__id__in=cronograma.cronograma_coordinaciones())


class PreguntaProcesoEvaluativoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '3'}))
    activo = forms.BooleanField(label=u'Activo?', required=False, initial=True,
                                widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


class PreguntaEncuestaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True,
                             widget=forms.Textarea(attrs={'rows': '2', 'formwidth': '100%'}))
    activo = forms.BooleanField(label=u'Activo?', required=False, initial=True,
                                widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    obligatorio = forms.BooleanField(label=u'Obligatorio?', required=False, initial=True,
                                     widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


class EvidenciaPracticasPreProfesionalForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=False,
                             widget=forms.Textarea(attrs={'rows': '2', 'col': '12'}))
    nombrearchivo = forms.CharField(label=u'Nombre archivo(antigua)', required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-100', 'col': '6'}))
    orden = forms.IntegerField(label=u'Orden', initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), required=False, widget=DateTimeInput(
                                                                                   attrs={'class': 'form-control', 'col': '6', 'type': 'date'}))
    fechafin = forms.DateField(label=u"Fecha fin", initial=datetime.now().date(), required=False, widget=DateTimeInput(
                                                                                attrs={'class': 'form-control', 'col': '6', 'type': 'date'}))
    puntaje = forms.BooleanField(label=u'Puntaje?', required=False, initial=False,
                                 widget=forms.CheckboxInput(attrs={'col': '6'}))
    configurarfecha = forms.BooleanField(label=u'Puede configurar fecha?', required=False, initial=True,
                                         widget=forms.CheckboxInput(attrs={'col': '6'}))
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 15Mb, en formato pdf, doc, docx',
                           ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=15728640, widget=forms.FileInput(attrs={'col': '12'}))
    formato = forms.ModelChoiceField(label=u"Formato", queryset=FormatoPracticaPreprofesionalSalud.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'col': '6'}))


class PeriodoEvidenciaPracticaProfesionalesForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '2', 'formwidth': '100%'}))
    allcarreras = forms.BooleanField(label=u'Todas las carreras', required=False,
                                     widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))
    # carrera = ModelChoiceField(label=u'Carrera', queryset=Carrera.objects.filter(status=True, coordinacion__excluir=False),required=False, widget=forms.Select(attrs={'formwidth': '65%'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carrera', queryset=Carrera.objects.filter(status=True), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    evaluarpromedio = forms.BooleanField(label=u'Evaluar por promedio?', required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


class PeriodoEvidenciaPracticaProfesionalesAuxForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.Textarea(attrs={'rows': '2', 'formwidth': '100%'}))
    # carrera = ModelChoiceField(label=u'Carrera', queryset=Carrera.objects.filter(status=True, coordinacion__excluir=False),required=False, widget=forms.Select(attrs={'formwidth': '65%'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.all(), required=False)
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    evaluarpromedio = forms.BooleanField(label=u'Evaluar por promedio?', required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


class InformeMensualSupervisorPracticaForm(forms.Form):
    fechainicio = forms.DateField(label=u"Fecha inicio", required=True, initial=datetime.now().date(),
                                  input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                   attrs={'class': 'selectorfecha',
                                                                                          'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin", required=True, initial=datetime.now().date(),
                               input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                attrs={'class': 'selectorfecha',
                                                                                       'formwidth': '50%'}))
    observacion = forms.CharField(label=u'Observación', required=False, widget=forms.Textarea(attrs={'rows': '3'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.filter(status=True).exclude(
        coordinacion__id__in=[6, 7, 8, 9]), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=20971520, widget=FileInput({'accept': 'application/pdf'}))

    def adicionar(self):
        self.fields['carrera'].queryset = Carrera.objects.filter(activa=True, status=True).exclude(
            coordinacion__id__in=[6, 7, 8, 9])


class ArchivoGeneralPracticaPreProfesionalesFrom(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=999, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    visible = forms.BooleanField(label=u'Visible?', required=False, initial=True,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.filter(status=True).exclude(coordinacion__id__in=[6, 7, 8, 9]), required=False)
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 15Mb, en formato pdf, doc, docx',
                           ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=15728640)


class SesionMatriculacionForm(forms.Form):
    sesion = forms.ModelChoiceField(label=u"Sección", queryset=Sesion.objects.all(), required=False)

    def adicionar(self, periodo, carrera):
        self.fields['sesion'].queryset = Sesion.objects.db_manager('sga_select').filter(status=True,
                                                                                        nivel__periodo_id=periodo.id,
                                                                                        nivel__materia__asignaturamalla__malla__carrera_id=carrera.id).distinct()
        # self.fields['sesion'].queryset = Sesion.objects.filter(pk__in=[1,4,5,7]).distinct()
    # def adicionar(self):
    #     self.fields['sesion'].queryset = Sesion.objects.filter(status=True, nivel__periodo=periodo, nivel__materia__asignaturamalla__malla__carrera=carrera).distinct()
    #     self.fields['sesion'].queryset = Sesion.objects.filter(pk__in=[1,4,5,7]).distinct()


class TipoFormacionCarreraForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=250, widget=forms.TextInput(attrs={'class': 'imp-100'}))


class PreInscripcionPracticasPPForm(forms.Form):
    periodo = forms.ModelChoiceField(label=u"Periodo", queryset=Periodo.objects.filter(status=True, clasificacion=1).order_by('-pk'), required=True, widget=forms.Select(attrs={'formwidth': '94%'}))
    motivo = forms.CharField(label=u'Motivo Pre-Inscripción', max_length=500, required=True,
                             widget=forms.Textarea(attrs={'formwidth': '94%', 'rows': '2'}))
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), required=True,
                                  input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                   attrs={'class': 'selectorfecha',
                                                                                          'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin", initial=datetime.now().date(), required=True,
                               input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                attrs={'class': 'selectorfecha',
                                                                                       'formwidth': '50%'}))
    mensaje = forms.CharField(label=u"Mensaje", required=False, widget=CKEditorUploadingWidget())
    coordinacion = forms.ModelMultipleChoiceField(label=u"Coordinación",
                                                  queryset=Coordinacion.objects.filter(status=True).exclude(pk=9),
                                                  required=False,
                                                  widget=forms.SelectMultiple(attrs={'formwidth': '94%'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carrera', queryset=Carrera.objects.filter(status=True),
                                             required=False, widget=forms.SelectMultiple(attrs={'formwidth': '94%'}))
    pregunta = forms.ModelMultipleChoiceField(label=u'Preguntas',
                                              queryset=PreguntaPreInscripcionPracticasPP.objects.filter(status=True,
                                                                                                        activo=True),
                                              required=False, widget=forms.SelectMultiple(attrs={'formwidth': '94%'}))
    puede_solicitar = forms.BooleanField(label=u'Puede Solicitar Empresa?', required=False,
                                         initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    puede_asignar = forms.BooleanField(label=u'Puede Solicitar Asignación Tutor?', required=False,
                                       initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    actualizararchivo = forms.BooleanField(label=u'Actualizar archivo solicitud(Estudiante)?', required=False,
                                           initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    subirarchivo = forms.BooleanField(label=u'Permite subir solicitud(Estudiante)?', required=False,
                                      initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    agendatutoria = forms.BooleanField(label=u'¿Asistencia a tutorías?', required=False,
                                       initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    enlinea = forms.BooleanField(label=u'¿Es en línea?', required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    fechamaximoagendatutoria = forms.DateField(label=u"Fecha limite para agenda tutorias",
                                               required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                                attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    inglesaprobado = forms.BooleanField(label=u'¿Requiere ingles aprobado?', required=False,
                                       initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    computacionaprobado = forms.BooleanField(label=u'¿Requiere computación aprobado?', required=False,
                                        initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    vinculacion = forms.BooleanField(label=u'¿Requiere horas de vinculación completadas?', required=False,
                                        initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))

    def cargar_carrera(self, conf):
        if conf:
            self.fields['coordinacion'].queryset = Coordinacion.objects.filter(excluir=False).exclude(id__in=[9, 7])
            self.fields['carrera'].queryset = Carrera.objects.filter(status=True,
                                                                     coordinacion__in=conf.coordinaciones())
            self.fields['pregunta'].queryset = PreguntaPreInscripcionPracticasPP.objects.filter(status=True,
                                                                                                activo=True)


class PreguntaPreInscripcionPracticasPPForm(forms.Form):
    descripcion = forms.CharField(label=u'Pregunta', max_length=500, required=True,
                                  widget=forms.Textarea(attrs={'formwidth': '100%', 'rows': '2'}))
    activo = forms.BooleanField(label=u'Activa', required=False, initial=True,
                                widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))


class PerfilAccesoUsuarioForm(forms.Form):
    grupo = forms.ModelChoiceField(label=u'Grupo', queryset=Group.objects.all(), required=False)
    coordinacion = forms.ModelChoiceField(label=u'Coordinación', queryset=Coordinacion.objects.all(), required=False)
    carrera = forms.ModelMultipleChoiceField(label=u'Carrera', queryset=Carrera.objects.all(), required=False)

    def vaciarcarrera(self):
        self.fields['carrera'].queryset = Carrera.objects.filter()

    def cargarcarrera(self, accesousuario):
        self.fields['carrera'].queryset = Carrera.objects.filter(coordinacion=accesousuario.coordinacion)
        deshabilitar_campo(self, 'grupo')
        deshabilitar_campo(self, 'coordinacion')


class DetalleDistributivoForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=20971520)


class SacionEstudianteForm(forms.Form):
    inscripcion = forms.IntegerField(initial=0, required=False, label=u'Alumno',
                                     widget=forms.TextInput(attrs={'select2search': 'true'}))
    periodo = forms.ModelChoiceField(Periodo.objects.all().order_by('-inicio'), required=False, label=u'Periodo')
    fechadesde = forms.DateField(label=u"Fecha desde", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '35%'}))
    fechahasta = forms.DateField(label=u"Fecha hasta", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '35%'}))
    indifinido = forms.BooleanField(label=u'Indifinido', required=False, initial=False,
                                    widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))
    observacion = forms.CharField(label=u'Observación', max_length=500, required=True,
                                  widget=forms.Textarea(attrs={'formwidth': '100%', 'rows': '3'}))
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=10485760, widget=FileInput(attrs={'formwidth': '50%'}))

    def editar(self, sancion):
        self.fields['inscripcion'].widget.attrs['descripcion'] = sancion.inscripcion.persona.nombre_completo()
        self.fields['inscripcion'].initial = sancion.inscripcion.id
        deshabilitar_campo(self, 'inscripcion')


class RechazarCronogramaActividadFrom(forms.Form):
    observacion = forms.CharField(label=u'Observación', required=False, widget=forms.Textarea(attrs={'rows': '5'}))


class CronogramaAdicionalExamenComplexivoForm(forms.Form):
    fechainicioexamen = forms.DateField(label=u"Fecha inicio de examen complexivo", input_formats=['%d-%m-%Y'],
                                        widget=DateTimeInput(format='%d-%m-%Y',
                                                             attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                        required=True)
    fechafinexamen = forms.DateField(label=u"Fecha fin de examen", input_formats=['%d-%m-%Y'],
                                     widget=DateTimeInput(format='%d-%m-%Y',
                                                          attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                     required=True)
    fechainiciocalificacion = forms.DateField(label=u"Fecha inicio de calificación de Examen",
                                              input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                               attrs={
                                                                                                   'class': 'selectorfecha',
                                                                                                   'formwidth': '50%'}),
                                              required=True)
    fechafincalificacion = forms.DateField(label=u"Fecha fin calificación de Examen", input_formats=['%d-%m-%Y'],
                                           widget=DateTimeInput(format='%d-%m-%Y',
                                                                attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                           required=True)
    observacion = forms.CharField(label=u'Observación', max_length=500, required=True,
                                  widget=forms.Textarea(attrs={'formwidth': '100%', 'rows': '3'}))
    resolucion = ExtFileField(label=u'Resolución', required=False,
                              help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                              max_upload_size=10485760, widget=FileInput(attrs={'formwidth': '100%'}))


class SilaboSemanalVirtualForm(forms.Form):
    objetivoaprendizaje = forms.CharField(label=u'Objetivo Aprendizaje', widget=forms.Textarea(attrs={'rows': '3'}),
                                          required=False)
    enfoque = forms.CharField(label=u'Enfoque Metodológico', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class VirtualCasosPracticosSilaboForm(forms.Form):
    tema = forms.ModelChoiceField(label=u'Tema',
                                  queryset=TemaUnidadResultadoProgramaAnalitico.objects.filter(status=True),
                                  required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    nombre = forms.CharField(label=u'Nombre', max_length=100)
    descripcion = forms.CharField(label=u'Descripción', widget=CKEditorUploadingWidget(), required=True)

    # link = forms.CharField(label=u'Link', required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    # tipolink = forms.ChoiceField(label=u"Tipo link", choices=TIPO_LINK, required=False, widget=forms.Select(attrs={'class': 'imp-50'}))

    def adicionar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(
            pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico',
                                                                flat=True).filter(silabosemanal_id=semanavirtual))

    def editar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(
            pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico',
                                                                flat=True).filter(silabosemanal_id=semanavirtual))


class VirtualActividadesSilaboForm(forms.Form):
    tema = forms.ModelChoiceField(label=u'Tema', queryset=TemaUnidadResultadoProgramaAnalitico.objects.filter(status=True), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    nombre = forms.CharField(label=u'Nombre', max_length=400)
    descripcion = forms.CharField(label=u'Link', required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    tipoactividad = forms.ChoiceField(label=u"Tipo Actividad", choices=TIPO_ACTIVIDAD, required=False, widget=forms.Select(attrs={'class': 'imp-50'}))

    def adicionar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico', flat=True).filter(silabosemanal_id=semanavirtual))

    # def editar(self,semanavirtual):
    #     self.fields['subtema'].queryset = SubtemaUnidadResultadoProgramaAnalitico.objects.filter(pk__in=DetalleSilaboSemanalSubtema.objects.values_list('subtemaunidadresultadoprogramaanalitico_id',flat=True).filter(silabosemanal_id=semanavirtual))

    def editar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico', flat=True).filter(silabosemanal_id=semanavirtual))


class VirtualLecturasSilaboForm(forms.Form):
    tema = forms.ModelChoiceField(label=u'Tema', queryset=TemaUnidadResultadoProgramaAnalitico.objects.filter(status=True), required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    nombre = forms.CharField(label=u'Nombre', max_length=100)
    descripcion = forms.CharField(label=u'Descripción', widget=CKEditorUploadingWidget(), required=True)

    def adicionar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico', flat=True).filter(silabosemanal_id=semanavirtual))

    def editar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(
            pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico',
                                                                flat=True).filter(silabosemanal_id=semanavirtual))


class VirtualRecursoSilaboForm(forms.Form):
    tema = forms.ModelChoiceField(label=u'Tema',
                                  queryset=TemaUnidadResultadoProgramaAnalitico.objects.filter(status=True),
                                  required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    nombre = forms.CharField(label=u'Nombre', max_length=100)
    descripcion = forms.CharField(label=u'Descripción', widget=CKEditorUploadingWidget(), required=True)
    tiporecurso = forms.ChoiceField(label=u"Tipo link", choices=TIPO_RECURSOS, required=False,
                                    widget=forms.Select(attrs={'class': 'imp-50'}))

    def adicionar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(
            pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico',
                                                                flat=True).filter(silabosemanal_id=semanavirtual))

    def editar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(
            pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico',
                                                                flat=True).filter(silabosemanal_id=semanavirtual))


class VirtualTestSilaboForm(forms.Form):
    tema = forms.ModelChoiceField(label=u'Tema',
                                  queryset=TemaUnidadResultadoProgramaAnalitico.objects.filter(status=True),
                                  required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    descripcion = forms.CharField(label=u'Nombre', max_length=100)
    link = forms.CharField(label=u'Link', required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))

    def adicionar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(
            pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico',
                                                                flat=True).filter(silabosemanal_id=semanavirtual))

    def editar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(
            pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico',
                                                                flat=True).filter(silabosemanal_id=semanavirtual))


class VirtualPresencialSilaboForm(forms.Form):
    tema = forms.ModelChoiceField(label=u'Tema',
                                  queryset=TemaUnidadResultadoProgramaAnalitico.objects.filter(status=True),
                                  required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    descripcion = forms.CharField(label=u'Nombre', max_length=100)
    link = forms.CharField(label=u'Link', required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))

    def adicionar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(
            pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico',
                                                                flat=True).filter(silabosemanal_id=semanavirtual))

    def editar(self, semanavirtual):
        self.fields['tema'].queryset = TemaUnidadResultadoProgramaAnalitico.objects.filter(
            pk__in=DetalleSilaboSemanalTema.objects.values_list('temaunidadresultadoprogramaanalitico',
                                                                flat=True).filter(silabosemanal_id=semanavirtual))


class ContenidoSubtema(forms.Form):
    contenido = forms.CharField(label=u'Descripción', widget=CKEditorUploadingWidget(), required=True)


class EnteAprobadorCarreraForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=250, widget=forms.TextInput(attrs={'class': 'imp-100'}))


class ArchivoTemaPlanForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=True,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=10485760)


ESTADO_INCIDENTE = (
    (2, u"FINALIZAR"),
    (3, u"ASIGNAR"),
)


class VirtualIncidenteForm(forms.Form):
    planaccion = forms.CharField(label=u'Plan Acción:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                                 required=False)
    causaincidente = forms.ModelChoiceField(label=u'Causa:',
                                            queryset=VirtualCausaIncidente.objects.filter(status=True).order_by(
                                                'descripcion'), required=False,
                                            widget=forms.Select(attrs={'formwidth': '60%'}))
    estado = forms.ChoiceField(label=u"Estado:", choices=ESTADO_INCIDENTE, required=True,
                               widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '40%'}))
    archivo = ExtFileField(label=u'Evidencia', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=4194304, widget=forms.ClearableFileInput(attrs={'formwidth': '35%'}))
    personaasignar = forms.ModelChoiceField(label=u"Asignar a:",
                                            queryset=VirtualSoporteUsuario.objects.filter(tipouser=2, activo=True,
                                                                                          status=True), required=False,
                                            widget=forms.Select(attrs={'class': 'imp-100', 'formwidth': '65%'}))
    actualizar = forms.BooleanField(label=u'Actualizar email:', required=False,
                                    widget=forms.CheckboxInput(attrs={'formwidth': '20%'}))
    email = forms.CharField(label=u"Correo electrónico:", max_length=200, required=False,
                            widget=forms.TextInput(attrs={'formwidth': '80%'}))
    telefono = forms.CharField(label=u"Teléfono:", max_length=200, required=False,
                               widget=forms.TextInput(attrs={'formwidth': '33%'}))
    telefono2 = forms.CharField(label=u"Teléfono 2:", max_length=200, required=False,
                                widget=forms.TextInput(attrs={'formwidth': '33%'}))
    telefono_conv = forms.CharField(label=u"Convencional:", max_length=200, required=False,
                                    widget=forms.TextInput(attrs={'formwidth': '33%'}))
    pais = forms.ModelChoiceField(label=u"País de residencia", queryset=Pais.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-75', 'formwidth': '33%'}))
    provincia = forms.ModelChoiceField(label=u"Provincia de residencia",
                                       queryset=Provincia.objects.all().order_by('nombre'), required=False,
                                       widget=forms.Select(attrs={'class': 'imp-75', 'formwidth': '33%'}))
    canton = forms.ModelChoiceField(label=u"Cantón de residencia", queryset=Canton.objects.order_by('nombre'),
                                    required=False, widget=forms.Select(attrs={'class': 'imp-75', 'formwidth': '33%'}))
    parroquia = forms.ModelChoiceField(label=u"Parroquia de residencia",
                                       queryset=Parroquia.objects.all().order_by('nombre'), required=False,
                                       widget=forms.Select(attrs={'class': 'imp-75', 'formwidth': '33%'}))
    sector = forms.CharField(label=u"Sector", max_length=100, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-50', 'formwidth': '33%'}))
    direccion = forms.CharField(label=u"Calle principal", max_length=100, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-75', 'formwidth': '33%'}))
    direccion2 = forms.CharField(label=u"Calle secundaria", max_length=100, required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-75', 'formwidth': '33%'}))
    num_direccion = forms.CharField(label=u"Numero residencia", max_length=15, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-number', 'formwidth': '33%'}))
    desertaonline = forms.BooleanField(label=u'Deserta online:', required=False,
                                       widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))

    def editar(self, personasoporte):
        self.fields['personaasignar'].queryset = VirtualSoporteUsuario.objects.filter(pk=personasoporte)

    def quitarcampos(self):
        del self.fields['desertaonline']


class EditarSoporteInscripcionForm(forms.Form):
    email = forms.CharField(label=u"Correo electrónico:", max_length=200, required=False,
                            widget=forms.TextInput(attrs={'formwidth': '80%'}))
    telefono = forms.CharField(label=u"Teléfono:", max_length=200, required=False,
                               widget=forms.TextInput(attrs={'formwidth': '50%'}))
    telefono2 = forms.CharField(label=u"Teléfono 2:", max_length=200, required=False,
                                widget=forms.TextInput(attrs={'formwidth': '50%'}))
    telefono_conv = forms.CharField(label=u"Convencional:", max_length=200, required=False,
                                    widget=forms.TextInput(attrs={'formwidth': '50%'}))
    pais = forms.ModelChoiceField(label=u"País de residencia", queryset=Pais.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-75', 'formwidth': '50%'}))
    provincia = forms.ModelChoiceField(label=u"Provincia de residencia",
                                       queryset=Provincia.objects.all().order_by('nombre'), required=False,
                                       widget=forms.Select(attrs={'class': 'imp-75', 'formwidth': '50%'}))
    canton = forms.ModelChoiceField(label=u"Cantón de residencia", queryset=Canton.objects.order_by('nombre'),
                                    required=False, widget=forms.Select(attrs={'class': 'imp-75', 'formwidth': '50%'}))
    parroquia = forms.ModelChoiceField(label=u"Parroquia de residencia",
                                       queryset=Parroquia.objects.all().order_by('nombre'), required=False,
                                       widget=forms.Select(attrs={'class': 'imp-75', 'formwidth': '50%'}))
    sector = forms.CharField(label=u"Sector", max_length=100, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    direccion = forms.CharField(label=u"Calle principal", max_length=100, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-75', 'formwidth': '50%'}))
    direccion2 = forms.CharField(label=u"Calle secundaria", max_length=100, required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-75', 'formwidth': '50%'}))
    num_direccion = forms.CharField(label=u"Numero residencia", max_length=15, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-number', 'formwidth': '50%'}))


ESTADO_INCIDENTEASIGNADO = (
    (2, u"FINALIZAR"),
)


class VirtualIncidenteAsignadoForm(forms.Form):
    causaincidente = forms.ModelChoiceField(label=u'Causa:',
                                            queryset=VirtualCausaIncidente.objects.filter(status=True).order_by(
                                                'descripcion'), required=False,
                                            widget=forms.Select(attrs={'formwidth': '100%'}))
    planaccion = forms.CharField(label=u'Plan Acción:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                                 required=False)
    archivo = ExtFileField(label=u'Evidencia', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, xls, xlsx, pdf, ppt, pptx, rar, zip, txt',
                           ext_whitelist=(
                               ".doc", ".docx", ".xls", ".xlsx", ".pdf", ".ppt", ".pptx", ".zip", ".rar", ".txt"),
                           max_upload_size=4194304, widget=forms.ClearableFileInput(attrs={'formwidth': '50%'}))
    estado = forms.ChoiceField(label=u"Estado:", choices=ESTADO_INCIDENTEASIGNADO, required=True,
                               widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    actualizar = forms.BooleanField(label=u'Actualizar email:', required=False,
                                    widget=forms.CheckboxInput(attrs={'formwidth': '20%'}))
    email = forms.CharField(label=u"Correo electrónico:", max_length=200, required=False,
                            widget=forms.TextInput(attrs={'formwidth': '40%'}))
    telefono = forms.CharField(label=u"Teléfono:", max_length=200, required=False,
                               widget=forms.TextInput(attrs={'formwidth': '40%'}))


class VirtualIncidenteMasivoForm(forms.Form):
    planaccion = forms.CharField(label=u'Plan Acción:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                                 required=False)
    causaincidente = forms.ModelChoiceField(label=u'Causa:',
                                            queryset=VirtualCausaIncidente.objects.filter(status=True).order_by(
                                                'descripcion'), required=False,
                                            widget=forms.Select(attrs={'formwidth': '60%'}))
    estado = forms.ChoiceField(label=u"Estado:", choices=ESTADO_INCIDENTEASIGNADO, required=True,
                               widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '40%'}))


class ReporteSoporteUsuarioForm(forms.Form):
    numeroreporte = forms.CharField(label=u"Número de Informe:", max_length=20, required=False,
                                    widget=forms.TextInput(attrs={'formwidth': '50%'}))
    semestre = forms.CharField(label=u"Informe del Semstre:", max_length=20, required=False,
                               widget=forms.TextInput(attrs={'formwidth': '50%'}))
    fechaelaboracion = forms.DateField(label=u"Fecha de Elaboración", input_formats=['%d-%m-%Y'],
                                       widget=DateTimeInput(format='%d-%m-%Y',
                                                            attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                       required=True)
    horaelaboracion = forms.TimeField(label=u"Hora de Elaboración", required=False, initial=str(datetime.now().time()),
                                      input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                                    attrs={'class': 'selectorhora',
                                                                                           'formwidth': '50%'}))
    fechaentrega = forms.DateField(label=u"Fecha de Entrega", input_formats=['%d-%m-%Y'],
                                   widget=DateTimeInput(format='%d-%m-%Y',
                                                        attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                   required=True)
    horaentrega = forms.TimeField(label=u"Hora de Entrega", required=False, initial=str(datetime.now().time()),
                                  input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                                attrs={'class': 'selectorhora',
                                                                                       'formwidth': '50%'}))
    objetivo = forms.CharField(label=u'Objetivo:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                               required=False)


class DetalleReporteSoporteUsuarioForm(forms.Form):
    fechaactividad = forms.DateField(label=u"Fecha de Actividad", input_formats=['%d-%m-%Y'],
                                     initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={
            'class': 'selectorfecha', 'formwidth': '50%'}), required=True)
    tipoactividad = forms.ModelChoiceField(label=u'Tipo de Actividad:',
                                           queryset=TipoActividadVirtual.objects.all().exclude(
                                               titulo='ATENCIÓN A LOS TICKET DE SOPORTE USUARIO').order_by('titulo'),
                                           required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    nombreactividad = forms.CharField(label=u'Detalle de la Actividad:',
                                      widget=forms.Textarea(attrs={'rows': '5', 'formwidth': '100%'}), required=True)
    tiposistema = forms.CharField(label=u'Tipo de Sistema:', widget=forms.TextInput(attrs={'formwidth': '50%'}),
                                  required=True)


class DetalleReporteSoporteForm(forms.Form):
    fechaactividad = forms.DateField(label=u"Fecha de Actividad", input_formats=['%d-%m-%Y'],
                                     initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={
            'class': 'selectorfecha', 'formwidth': '50%'}), required=True)
    tipoactividad = forms.ModelChoiceField(label=u'Tipo de Actividad:',
                                           queryset=TipoActividadVirtual.objects.all().exclude(
                                               titulo='ATENCIÓN A LOS TICKET DE SOPORTE USUARIO').order_by('titulo'),
                                           required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    nombreactividad = forms.CharField(label=u'Detalle de la Actividad:',
                                      widget=forms.Textarea(attrs={'rows': '5', 'formwidth': '100%'}), required=True)


class EditDetalleReporteSoporteUsuarioForm(forms.Form):
    fechaactividad = forms.DateField(label=u"Fecha de Actividad:", input_formats=['%d-%m-%Y'],
                                     initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={
            'class': 'selectorfecha', 'formwidth': '50%'}), required=True)
    tipoactividad = forms.ModelChoiceField(label=u'Tipo de Actividad:',
                                           queryset=TipoActividadVirtual.objects.all().exclude(
                                               titulo='ATENCIÓN A LOS TICKET DE SOPORTE USUARIO').order_by('titulo'),
                                           required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    nombreactividad = forms.CharField(label=u'Descripcion de la Actividad:',
                                      widget=forms.Textarea(attrs={'rows': '5', 'formwidth': '100%'}), required=True)
    tiposistema = forms.CharField(label=u'Plataforma:', widget=forms.TextInput(attrs={'formwidth': '100%'}),
                                  required=False)

    def editar(self, actividad):
        if actividad.tipoactividad:
            self.fields['tipoactividad'].widget.attrs[
                'descripcion'] = actividad.tipoactividad if actividad.tipoactividad else "---------------------------"
            self.fields['tipoactividad'].widget.attrs[
                'value'] = actividad.tipoactividad.id if actividad.tipoactividad else ""
            self.fields['tipoactividad'].initial = actividad.tipoactividad.id if actividad.tipoactividad else 0

        deshabilitar_campo(self, 'tipoactividad')


class EditDetalleReporteSoporteForm(forms.Form):
    fechaactividad = forms.DateField(label=u"Fecha de Actividad:", input_formats=['%d-%m-%Y'],
                                     initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={
            'class': 'selectorfecha', 'formwidth': '50%'}), required=True)
    tipoactividad = forms.ModelChoiceField(label=u'Tipo de Actividad:',
                                           queryset=TipoActividadVirtual.objects.all().exclude(
                                               titulo='ATENCIÓN A LOS TICKET DE SOPORTE USUARIO').order_by('titulo'),
                                           required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    nombreactividad = forms.CharField(label=u'Descripcion de la Actividad:',
                                      widget=forms.Textarea(attrs={'rows': '5', 'formwidth': '100%'}), required=True)

    def editar(self, actividad):
        if actividad.tipoactividad:
            self.fields['tipoactividad'].widget.attrs[
                'descripcion'] = actividad.tipoactividad if actividad.tipoactividad else "---------------------------"
            self.fields['tipoactividad'].widget.attrs[
                'value'] = actividad.tipoactividad.id if actividad.tipoactividad else ""
            self.fields['tipoactividad'].initial = actividad.tipoactividad.id if actividad.tipoactividad else 0

        deshabilitar_campo(self, 'tipoactividad')


class DocumentoEntregadoForm(forms.Form):
    nombredocumento = forms.CharField(label=u'Nombre del Documento:',
                                      widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}), required=True)


class TipoActividadVirtualForm(forms.Form):
    titulo = forms.CharField(label=u"Nombre de Actividad", required=False,
                             widget=forms.TextInput(attrs={'formwidth': '100%'}))


class AnexosReporteUsuarioVirtualForm(forms.Form):
    tituloanexo = forms.CharField(label=u'Titulo del Anexo:', widget=forms.TextInput(attrs={'formwidth': '100%'}),
                                  required=False)
    anexo = ExtFileField(label=u'Seleccione Imagen', required=True,
                         help_text=u'Tamaño Maximo permitido 2Mb, en formato jpg o png',
                         ext_whitelist=(".jpeg", ".jpg", ".png"), max_upload_size=2097152)


class VirtualCausaIncidenteForm(forms.Form):
    prioridad = forms.ChoiceField(label=u"Estado:", choices=ESTADO_PRIORIDADINCIDENTE, required=True,
                                  widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '100%'}))
    descripcion = forms.CharField(label=u'Descripcion:',
                                  widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}), required=False)


class AutorprogramaAnaliticoForm(forms.Form):
    autor = forms.IntegerField(initial=0, required=False, label=u'Autor',
                               widget=forms.TextInput(attrs={'select2search': 'true'}))
    # malla = forms.ModelMultipleChoiceField(label=u'Malla', queryset=Malla.objects.filter(status=True, carrera__modalidad=3), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))
    programa = forms.ModelMultipleChoiceField(label=u'Programas Analíticos',
                                              queryset=ProgramaAnaliticoAsignatura.objects.filter(status=True),
                                              required=False, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))

    def editar(self, autor):
        if autor.autor:
            self.fields['autor'].widget.attrs['descripcion'] = autor.autor if autor.autor else "---------------------------"
            self.fields['autor'].widget.attrs['value'] = autor.autor.id if autor.autor else ""
            self.fields['autor'].initial = autor.autor.id if autor.autor else 0

    def cargar_programaanalitico(self, pro):
        self.fields['programa'].queryset = ProgramaAnaliticoAsignatura.objects.filter(asignaturamalla__asignatura=pro.asignaturamalla.asignatura, activo=True).exclude(id=pro.id).distinct()


class PlanificarPonenciasForm(forms.Form):
    nombre = forms.CharField(required=False, max_length=200, label=u'Nombre del Congreso', widget=forms.Textarea(attrs={'rows': '1', 'separator2': True, 'separatortitle': 'Datos de la Ponencia'}))
    tema = forms.CharField(label=u'Tema de la ponencia', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    pais = forms.ModelChoiceField(label=u"País del congreso", queryset=Pais.objects.all(), required=False, widget=forms.Select(attrs={'class': 'imp-100'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", required=False, input_formats=['%d-%m-%Y'], initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}), )
    fechafin = forms.DateField(label=u"Fecha Fin", required=False, input_formats=['%d-%m-%Y'], initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}), )
    costo = forms.FloatField(label=u'Costo Inscripción Congreso', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '33%'}))
    modalidad = forms.ModelChoiceField(label=u"Modalidad", queryset=Modalidad.objects.all(), required=False, widget=forms.Select(attrs={'class': 'imp-100'}))
    link = forms.CharField(label=u'Link', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    justificacion = forms.CharField(label=u'Justificación', widget=forms.Textarea(attrs={'rows': '3', 'showmsginfo': True, 'msgloc': 'top', 'msgtitle': 'Justificación:', 'msgtext': '', 'msglist': ['¿Por qué considera importante asistir al congreso seleccionado?', '¿Qué logros va alcanzar?', '¿Qué investigación o grupo de investigación lo respalda para asistir?']}), required=False)
    areaconocimiento = forms.ModelChoiceField(label=u"Area conocimiento", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True).order_by('nombre'), required=False, widget=forms.Select())
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub area conocimiento", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub area especifica conocimiento", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    lineainvestigacion = forms.ModelChoiceField(label=u"Línea Investigación", queryset=LineaInvestigacion.objects.filter(vigente=True, status=True).order_by('nombre'), required=False, widget=forms.Select())
    sublineainvestigacion = forms.ModelChoiceField(label=u"Sub-Línea Investigación", queryset=SubLineaInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    provieneproyecto = forms.BooleanField(label=u"¿Proviene de un proyecto de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    tipoproyecto = forms.ChoiceField(label=u'Tipo de Proyecto', choices=TIPO_PROYECTO_ARTICULO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    proyectointerno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectosInvestigacion.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    proyectoexterno = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    pertenecegrupoinv = forms.BooleanField(label=u"¿Pertenece a un Grupo de Investigación?", required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    grupoinvestigacion = forms.ModelChoiceField(label=u"Grupo de investigación", queryset=GrupoInvestigacion.objects.filter(status=True, vigente=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    archivoabstract = ExtFileField(label=u'Abstract(Resumen)', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%', 'separator2': True, 'separatortitle': 'Documentos a subir'}))
    archivocartaaceptacion = ExtFileField(label=u'Carta de aceptación', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivocronograma = ExtFileField(label=u'Cronograma de actividades', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivocomite = ExtFileField(label=u'Comité Científico', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))

    def editar(self, ponencia):
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=ponencia.areaconocimiento, vigente=True).order_by('nombre')
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=ponencia.subareaconocimiento, vigente=True).order_by('nombre')
        self.fields['sublineainvestigacion'].queryset = SubLineaInvestigacion.objects.filter(lineainvestigacion=ponencia.lineainvestigacion).order_by('nombre')
        if ponencia.provieneproyecto:
            if ponencia.tipoproyecto < 3:
                self.fields['proyectointerno'].queryset = ProyectosInvestigacion.objects.filter(status=True, tipo=ponencia.tipoproyecto).order_by('nombre')
            else:
                self.fields['proyectoexterno'].queryset = ProyectoInvestigacionExterno.objects.filter(status=True).order_by('nombre')


class PonenciaEvidenciaEjecutadoForm(forms.Form):
    archivo1 = ExtFileField(label=u'Informe de Ponencia', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'separator': True, 'separatortitle': 'Documentos del Solicitante'}))
    archivo2 = ExtFileField(label=u'Certificado de Participación', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)


class PlanificarCapacitacionesForm(forms.Form):
    tema = forms.CharField(label=u'Tema de la capacitación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    institucion = forms.CharField(label=u'Institución', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    pais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.all(), required=False, widget=forms.Select(attrs={'class': 'imp-100'}))
    justificacion = forms.CharField(label=u'Justificación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    modalidad = forms.ChoiceField(label=u"Modalidad", choices=MODALIDAD_CAPACITACION, required=False, widget=forms.Select())
    fechainicio = forms.DateField(label=u"Fecha Inicio", required=False, input_formats=['%d-%m-%Y'], initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), )
    fechafin = forms.DateField(label=u"Fecha Fin", required=False, input_formats=['%d-%m-%Y'], initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), )
    horas = forms.IntegerField(label=u"Horas", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    costo = forms.FloatField(label=u'Costo ', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '50%'}))
    link = forms.CharField(label=u'Link', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    archivo = ExtFileField(label=u'Archivo', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=10485760, widget=FileInput(attrs={'formwidth': '100%'}))


class PlanificarCapacitacionesArchivoForm(forms.Form):
    archivoconvenio = ExtFileField(label=u'Documento PDF soporte de convenio de devengación', required=False,
                                   help_text=u'Tamaño máximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                                   max_upload_size=10485760, widget=FileInput({'accept': 'application/pdf'}))


class SubirEvidenciaEjecutadoCapacitacionesForm(forms.Form):
    factura = ExtFileField(label=u'Factura', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                           ext_whitelist=(".pdf",), max_upload_size=4194304,
                           widget=FileInput({'accept': 'application/pdf'}))
    informe = ExtFileField(label=u'Informe de Ejecución', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=4194304, widget=FileInput({'accept': 'application/pdf'}))
    certificado = ExtFileField(label=u'Certificado', required=False,
                               help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",),
                               max_upload_size=4194304, widget=FileInput({'accept': 'application/pdf'}))

    def quitarcamposevidencia(self, tipo):
        if tipo == 'FAC':
            del self.fields['informe']
        else:
            del self.fields['informe']
            del self.fields['certificado']


class ConfirmarEjecutadoCapacitacionesForm(forms.Form):
    estado = forms.ChoiceField(label=u"Estado", choices=ESTADOS_PLANIFICAR_CAPACITACIONES, required=False,
                               widget=forms.Select())
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '2'}), required=False)

    def estados_confirmar(self):
        self.fields['estado'].choices = [
            ('', u'--Seleccione--'),
            (15, u'EJECUTADO'),
            (17, u'E.RECHAZADA')
        ]


class PlanificarCapacitacionesAutorizarForm(forms.Form):
    estadodes = forms.ChoiceField(label=u"Estado", required=False, widget=forms.Select())
    fechadesembolso = forms.DateField(label=u"Fecha Desembolso", required=False, input_formats=['%d-%m-%Y'],
                                      initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={
            'class': 'selectorfecha', 'formwidth': '50%'}), )
    observaciondes = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    archivodesembolso = ExtFileField(label=u'Documento PDF', required=False,
                                     help_text=u'Tamaño máximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                                     max_upload_size=10485760, widget=FileInput({'accept': 'application/pdf'}))

    def estados_desembolso(self):
        self.fields['estadodes'].choices = ((6, u'DESEMBOLSO'), (11, u'DENEG.DES'))


class PlanificarCapacitacionesDevolucionForm(forms.Form):
    tipo = forms.ChoiceField(label=u"Tipo Devolución", required=False, widget=forms.Select())
    devolucion = forms.FloatField(label=u'Monto Devolución ', initial="0.00", required=False, widget=forms.TextInput(
        attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '50%'}))
    observaciondev = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    archivodevolucion = ExtFileField(label=u'Documento PDF', required=False,
                                     help_text=u'Tamaño máximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                                     max_upload_size=10485760, widget=FileInput({'accept': 'application/pdf'}))

    def tipo_devolucion(self):
        self.fields['tipo'].choices = ((12, u'DEV.COMPLETA'), (13, u'DEV.PARCIAL'))


class DescuentoRolForm(forms.Form):
    motivo = forms.ChoiceField(label=u"Motivo Descuento", choices=MOTIVO_DESCUENTO, required=False,
                               widget=forms.Select())
    observaciondes = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    archivodescuentorol = ExtFileField(label=u'Documento PDF', required=False,
                                       help_text=u'Tamaño máximo permitido 10Mb, en formato pdf',
                                       ext_whitelist=(".pdf",), max_upload_size=10485760,
                                       widget=FileInput({'accept': 'application/pdf'}))


class TipoProfesorForm(forms.Form):
    nombre = forms.CharField(widget=forms.Textarea(attrs={'rows': '3'}), required=True, label=u"Tipo profesor")
    tipoevaluar = forms.BooleanField(label=u'Evaluar?', required=False,
                                     widget=forms.CheckboxInput(attrs={'formwidth': '20%'}))

    def adicionar(self):
        self.fields['nombre'].queryset = TipoProfesor.objects.filter(nombre=None)

class RegistrarIngresoCraiForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    tiposerviciocrai = forms.ModelChoiceField(label=u'Tipo Servicio',
                                              queryset=TipoServicioCrai.objects.filter(status=True), required=False,
                                              widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    actividad = forms.CharField(label=u'Actividad:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                                required=False)


class RegistrarPrestamoLibroForm(forms.Form):
    librokohaprogramaanaliticoasignatura = forms.IntegerField(initial=0, required=False, label=u'Libro',
                                                              widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipoprestamo = forms.ChoiceField(label=u"Tipo Prestamo", choices=TIPO_PRESTAMO, required=False,
                                     widget=forms.Select(attrs={'formwidth': '40%'}))


class TipoColegioForm(forms.Form):
    nombre = forms.CharField(label=u"Descripcion", widget=forms.TextInput(attrs={'formwidth': '80%'}))
    estado = forms.BooleanField(label=u'Activo', required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))


class ColegioForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=100, widget=forms.TextInput(attrs={'class': 'imp-75'}))
    codigo = forms.CharField(label=u"Código", max_length=200, required=False,
                             widget=forms.TextInput(attrs={'formwidth': '35%'}))
    canton = forms.ModelChoiceField(label=u"Canton", queryset=Canton.objects.filter(status=True).order_by('nombre'),
                                    required=True, widget=forms.Select(attrs={'formwidth': '75%'}))
    # tipo = forms.ChoiceField(label=u"Tipo (*)", choices=TIPO_COLEGIO, required=False,
    #                          widget=forms.Select(attrs={'formwidth': '75%'}))
    tipo = forms.ModelChoiceField(label=u"Tipo colegio", queryset=TipoColegio.objects.all(), required=False,
                                  widget=forms.Select(attrs={'formwidth': '75%'}))

    def adicionar(self):
        self.fields['nombre'].queryset = Colegio.objects.filter(nombre=None)

class ColegioHojaVidaForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=100, widget=forms.TextInput(attrs={'class': 'imp-75'}))
    codigo = forms.CharField(label=u"Código", max_length=200, required=False,
                             widget=forms.TextInput(attrs={'formwidth': '35%'}))
    canton = forms.ModelChoiceField(label=u"Canton", queryset=Canton.objects.filter(status=True).order_by('nombre'),
                                    required=True, widget=forms.Select(attrs={'formwidth': '75%'}))
    tipo = forms.ChoiceField(label=u"Tipo (*)", choices=TIPO_COLEGIO, required=False,widget=forms.Select(attrs={'formwidth': '75%'}))

class ActividadesMundoCraiForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripcion', required=False)
    concepto = forms.CharField(label=u'Concepto', required=False)
    tipomundocrai = forms.ChoiceField(label=u"Tipo Mundo CRAI", choices=TIPO_MUNDO_CRAI, required=False,
                                      widget=forms.Select(attrs={'formwidth': '50%'}))
    tipoactividad = forms.ChoiceField(label=u"Tipo Actividad", choices=TIPO_ACTIVIDAD_CRAI, required=False,
                                      widget=forms.Select(attrs={'formwidth': '50%'}))
    principal = forms.BooleanField(label=u'Principal', required=False,
                                   widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    orden = forms.IntegerField(label=u"Nivel", initial=0, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    actividadesmundocrai = forms.ModelChoiceField(label=u'Principal',
                                                  queryset=ActividadesMundoCrai.objects.filter(status=True,
                                                                                               principal=True),
                                                  required=False,
                                                  widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    enlace = forms.CharField(label=u'Enlace', required=False,
                             widget=forms.Textarea(attrs={'rows': '1', 'formwidth': '80%'}))
    video = forms.BooleanField(label=u'Es Video?', required=False,
                               widget=forms.CheckboxInput(attrs={'formwidth': '20%'}))
    archivo = ExtFileField(label=u'Archivo', required=False, help_text=u'Tamaño Maximo permitido 50Mb, en formato pdf',
                           ext_whitelist=(".pdf",), max_upload_size=50485760,
                           widget=FileInput(attrs={'formwidth': '100%'}))
    icono = ExtFileField(label=u'Icono', required=False, help_text=u'Tamaño Maximo permitido 2Mb, en formato png',
                         ext_whitelist=(".png",), max_upload_size=2097152,
                         widget=FileInput(attrs={'formwidth': '100%'}))
    estado = forms.BooleanField(label=u'Activo', required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))

    def editar(self, actividadesmundocrai):
        self.fields['actividadesmundocrai'].queryset = ActividadesMundoCrai.objects.filter(status=True,
                                                                                           tipomundocrai=actividadesmundocrai.tipomundocrai,
                                                                                           estado=True, principal=True)


class NoticiasMundoCraiForm(forms.Form):
    titulo = forms.CharField(label=u'Título', required=False)
    descripcion = forms.CharField(label=u'Descripción', required=False)
    enlace = forms.CharField(label=u'Enlace', required=False,
                             widget=forms.Textarea(attrs={'rows': '1', 'formwidth': '80%'}))
    archivo = ExtFileField(label=u'Archivo', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf',
                           ext_whitelist=(".pdf",), max_upload_size=10485760,
                           widget=FileInput(attrs={'formwidth': '100%'}))
    estado = forms.BooleanField(label=u'Activo', required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))


class ReservaCubiculoCraiForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor',
                                  widget=forms.TextInput(attrs={'select2search': 'true'}))
    fechadesde = forms.DateField(label=u"Fecha Desde", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)


class TerminarReservaCubiculoCraiForm(forms.Form):
    profesor = forms.CharField(label=u'Título', required=False)
    fechahasta = forms.DateField(label=u"Fecha Hasta", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)

    def editar(self):
        deshabilitar_campo(self, 'profesor')


class OrganigramaForm(forms.Form):
    seccion = forms.ModelChoiceField(label=u'Sección Departamento',
                                     queryset=SeccionDepartamento.objects.filter(status=True), required=False,
                                     widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    nivel_puesto = forms.ChoiceField(label=u"Nivel Puesto", choices=NIVEL_PUESTO, required=False,
                                     widget=forms.Select(attrs={'formwidth': '50%'}))
    persona = forms.IntegerField(initial=0, required=True, label=u'Responsable',
                                 widget=forms.TextInput(attrs={'select2search': 'true'}))

    def adicionar(self, departamento):
        self.fields['seccion'].queryset = SeccionDepartamento.objects.filter(status=True,
                                                                             departamento=departamento).order_by('id')
        # self.fields['persona'].queryset = Persona.objects.filter(status=True, departamento=departamento)

    def editar(self, organigrama):
        # self.fields['persona'].queryset = Persona.objects.filter(status=True, departamento=departamento)
        self.fields['persona'].widget.attrs['descripcion'] = organigrama.persona.nombre_completo()
        self.fields['persona'].initial = organigrama.persona.id
        deshabilitar_campo(self, 'persona')


class DocenteCapacitacionForm(forms.Form):
    persona = forms.IntegerField(initial=0, required=False, label=u'Docente',
                                 widget=forms.TextInput(attrs={'select2search': 'true'}))


class InscripcionCapacitacionForm(forms.Form):
    persona = forms.IntegerField(initial=0, required=False, label=u'Estudiante',
                                 widget=forms.TextInput(attrs={'select2search': 'true'}))


class FirmaMundoCraiForm(forms.Form):
    persona = forms.IntegerField(initial=0, required=False, label=u'Docente',
                                 widget=forms.TextInput(attrs={'select2search': 'true'}))
    archivo = ExtFileField(label=u'Firma', required=False,
                           help_text=u'Tamaño Maximo permitido 2Mb, en formato jpg, jpeg, png',
                           ext_whitelist=(".jpg", ".jpeg", ".png",), max_upload_size=2621440,
                           widget=FileInput(attrs={'formwidth': '100%'}))
    tipofirma = forms.ChoiceField(label=u"Es?", choices=TIPO_FIRMA_CRAI, required=False,
                                  widget=forms.Select(attrs={'formwidth': '100%'}))
    tipomundocrai = forms.ChoiceField(label=u"Coordinación", choices=TIPO_MUNDO_CRAI, required=False,
                                      widget=forms.Select(attrs={'formwidth': '50%'}))

    def editar(self, firma):
        self.fields['persona'].widget.attrs['descripcion'] = firma.persona.nombre_completo()
        self.fields['persona'].initial = firma.persona.id
        deshabilitar_campo(self, 'persona')


class EncuestaMundoCraiForm(forms.Form):
    descripcion = forms.CharField(label=u'Encuesta', required=False)
    estado = forms.BooleanField(label=u'Estado', required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))


class PreguntaEncuestaMundoCraiForm(forms.Form):
    pregunta = forms.CharField(label=u'Pregunta', required=False)


class NivelEncuestaMundoCraiForm(forms.Form):
    nivel = forms.CharField(label=u'Nivel', required=False)
    orden = forms.IntegerField(label=u"Orden", initial=0, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    puntaje = forms.IntegerField(label=u"Puntaje", initial=0, required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class CapacitacionMundoCraiForm(forms.Form):
    tema = forms.CharField(label=u'Tema', required=False)
    tipo = forms.ChoiceField(label=u"Tipo Capacitación", choices=TIPO_CAPACITACION_CRAI, required=False,
                             widget=forms.Select(attrs={'formwidth': '50%'}))
    tipomundocrai = forms.ChoiceField(label=u"Coordinación", choices=TIPO_MUNDO_CRAI, required=False,
                                      widget=forms.Select(attrs={'formwidth': '50%'}))
    contenido = forms.CharField(label=u'Contenido', required=False,
                                widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}))
    salacrai = forms.ModelChoiceField(label=u"Sala", queryset=SalaCrai.objects.filter(status=True).order_by('nombre'),
                                      required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    fechadesde = forms.DateField(label=u"Fecha Desde", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)
    fechahasta = forms.DateField(label=u"Fecha Hasta", input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)
    horadesde = forms.TimeField(label=u"Hora Desde", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '25%'}))
    horahasta = forms.TimeField(label=u"Hora Hasta", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '25%'}))
    horastotal = forms.IntegerField(label=u'Total Horas', required=False, widget=forms.TextInput(attrs={'class': 'imp-horas', 'formwidth': '30%'}))
    capacitador = forms.IntegerField(initial=0, required=True, label=u'Capacitador',
                                     widget=forms.TextInput(attrs={'select2search': 'true'}))
    cupo = forms.IntegerField(label=u"Cupo", initial=0, required=False,
                              widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    encuesta = forms.ModelChoiceField(label=u"Encuesta", queryset=EncuestaCapacitacionesCrai.objects.filter(status=True,
                                                                                                            estado=True).order_by(
        'descripcion'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))

    def editar(self, capacitacion):
        if capacitacion.capacitador:
            self.fields['capacitador'].widget.attrs['descripcion'] = capacitacion.capacitador.nombre_completo()
            self.fields['capacitador'].initial = capacitacion.capacitador.id
            # deshabilitar_campo(self, 'capacitador')
        else:
            self.fields['capacitador'].widget.attrs['descripcion'] = 'Seleccione un capacitador'


class SalasMundoCraiForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=False)
    capacidad = forms.IntegerField(label=u"Capacidad", initial=0, required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    ubicacion = forms.ChoiceField(label=u"Ubicación CRAI", choices=PISOS_CRAI, required=False,
                                  widget=forms.Select(attrs={'formwidth': '50%'}))
    tipo = forms.ChoiceField(label=u"Tipo", choices=TIPO_SALA_CRAI, required=False,
                             widget=forms.Select(attrs={'formwidth': '50%'}))


class ReservasCraiSolicitarForm(forms.Form):
    descripcion = forms.CharField(label=u'Motivo', widget=forms.Textarea(attrs={'formwidth': '80%', 'rows': '2'}),
                                  required=False)
    salacrai = forms.ModelChoiceField(label=u"Sala",
                                      queryset=SalaCrai.objects.filter(status=True).order_by('nombre').exclude(tipo=5),
                                      required=False, widget=forms.Select(attrs={'formwidth': '80%'}))
    horadesde = forms.TimeField(label=u"Hora Desde", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'],
                                widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    horahasta = forms.TimeField(label=u"Hora Hasta", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'],
                                widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    cantidad = forms.IntegerField(label=u"Cupo", initial=0, required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class BuzonMundoCraiForm(forms.Form):
    # tipobuzon = forms.ModelChoiceField(label=u"Tipo", queryset=TipoBuzon.objects.filter(status=True).order_by('id'), required=False, widget=forms.Select(attrs={'formwidth': '70%'}))
    contenido = forms.CharField(label=u'Libro', widget=forms.Textarea(attrs={'rows': '3', 'style':'resize:none'}),required=True)


class ReservasCraiSolicitarAutoridadForm(forms.Form):
    solicitanteprofesor = forms.IntegerField(initial=0, required=False, label=u'Solicitante',
                                             widget=forms.TextInput(attrs={'select2search': 'true'}))
    descripcion = forms.CharField(label=u'Motivo', widget=forms.Textarea(attrs={'formwidth': '80%', 'rows': '2'}),
                                  required=False)
    salacrai = forms.ModelChoiceField(label=u"Sala",
                                      queryset=SalaCrai.objects.filter(status=True).order_by('nombre').exclude(tipo=5),
                                      required=False, widget=forms.Select(attrs={'formwidth': '80%'}))
    horadesde = forms.TimeField(label=u"Hora Desde", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'],
                                widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    horahasta = forms.TimeField(label=u"Hora Hasta", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'],
                                widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    cantidad = forms.IntegerField(label=u"Cupo", initial=0, required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class ReservasCraiSolicitarMasivoForm(forms.Form):
    descripcion = forms.CharField(label=u'Motivo', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    salacrai = forms.ModelChoiceField(label=u"Sala",
                                      queryset=SalaCrai.objects.filter(status=True).order_by('nombre').exclude(tipo=5),
                                      required=False, widget=forms.Select(attrs={'formwidth': '80%'}))
    fechadesde = forms.DateField(label=u"Fecha desde", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)
    fechahasta = forms.DateField(label=u"Fecha hasta", initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '50%'}),
                                 required=False)
    horadesde = forms.TimeField(label=u"Hora Desde", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '50%'}))
    horahasta = forms.TimeField(label=u"Hora Hasta", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '50%'}))
    cantidad = forms.IntegerField(label=u"Cupo", initial=0, required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    lunes = forms.BooleanField(label=u'Lunes', initial=False, required=False,
                               widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'true'}))
    martes = forms.BooleanField(label=u'Martes', initial=False, required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'true'}))
    miercoles = forms.BooleanField(label=u'Miercoles', initial=False, required=False,
                                   widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'true'}))
    jueves = forms.BooleanField(label=u'Jueves', initial=False, required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'false'}))
    viernes = forms.BooleanField(label=u'Viernes', initial=False, required=False,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'false'}))
    sabado = forms.BooleanField(label=u'Sabado', initial=False, required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'false'}))
    domingo = forms.BooleanField(label=u'Domingo', initial=False, required=False,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '10%', 'separator': 'false'}))


class ReservasCraiSolicitarDetalleForm(forms.Form):
    salacrai = forms.ModelChoiceField(label=u"Sala",
                                      queryset=SalaCrai.objects.filter(status=True).order_by('nombre').exclude(tipo=5),
                                      required=False, widget=forms.Select(attrs={'formwidth': '40%'}))
    horadesde = forms.TimeField(label=u"Hora Desde", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'],
                                widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    horahasta = forms.TimeField(label=u"Hora Hasta", required=False, initial=str(datetime.now().time()),
                                input_formats=['%H:%M'],
                                widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    cantidad = forms.IntegerField(label=u"Cupo", initial=0, required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class ActividadSakaiForm(forms.Form):
    nombreactividadsakai = forms.CharField(label=u"Nombre actividad", max_length=100, required=False)
    tipo = forms.ChoiceField(label=u"Tipo ", choices=TIPO_ACTIVIDAD_SAKAI, required=False,
                             widget=forms.Select(attrs={'formwidth': '75%'}))
    nota = forms.FloatField(label=u"nota obtenida", initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))
    notaposible = forms.FloatField(label=u"nota posible", initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '2', 'formwidth': '50%'}))


class InscripcionCursoProsgradoForm(forms.Form):
    cedula = forms.CharField(label=u"Cédula", max_length=10, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    nombres = forms.CharField(label=u"Nombres", max_length=200, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido1 = forms.CharField(label=u"1er Apellido", max_length=50, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido2 = forms.CharField(label=u"2do Apellido", max_length=50, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-50'}))
    pasaporte = forms.CharField(label=u"Pasaporte", max_length=15, initial='', required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    nacimiento = forms.DateField(label=u"Fecha Nacimiento", initial='', input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}),
                                 required=False)
    sexo = forms.ModelChoiceField(label=u"Sexo", queryset=Sexo.objects.all(),
                                  widget=forms.Select(attrs={'formwidth': '40%'}))
    observacionppl = forms.CharField(label=u"Observación Persona Privada Libertad", max_length=300, required=False,
                                     widget=forms.TextInput(attrs={'class': 'imp-100'}))
    paisnacimiento = forms.ModelChoiceField(label=u"País nacimiento", queryset=Pais.objects.all(), required=False,
                                            widget=forms.Select(attrs={'formwidth': '75%'}))
    provincianacimiento = forms.ModelChoiceField(label=u"Provincia nacimiento", queryset=Provincia.objects.all(),
                                                 required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    cantonnacimiento = forms.ModelChoiceField(label=u"Canton nacimiento", queryset=Canton.objects.all(), required=False,
                                              widget=forms.Select(attrs={'formwidth': '75%'}))
    parroquianacimiento = forms.ModelChoiceField(label=u"Parroquia nacimiento", queryset=Parroquia.objects.all(),
                                                 required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    nacionalidad = forms.CharField(label=u"Nacionalidad", max_length=100, required=False,
                                   widget=forms.TextInput(attrs={'formwidth': '50%'}))
    direccion = forms.CharField(label=u"Calle Principal", max_length=100, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-75'}))
    direccion2 = forms.CharField(label=u"Calle Secundaria", max_length=100, required=False,
                                 widget=forms.TextInput(attrs={'class': 'imp-75'}))
    telefono = forms.CharField(label=u"Telefono Movil", max_length=100, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-25'}))
    email = forms.CharField(label=u"Correo Electronico", max_length=240, required=False,
                            widget=forms.TextInput(attrs={'class': 'imp-50'}))


class SolicitudOtraCapacitacionForm(forms.Form):
    tema = forms.CharField(label=u'Tema', widget=forms.Textarea, required=False)
    fecha = forms.DateField(label=u"Fecha", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    horadesde = forms.TimeField(label=u"Hora desde:", required=False, initial=(datetime.now()).strftime('%H:%M'),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '50%'}))
    horahasta = forms.TimeField(label=u"Hora hasta:", required=False, initial=(datetime.now()).strftime('%H:%M'),
                                input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                              attrs={'class': 'selectorhora',
                                                                                     'formwidth': '50%'}))


class ObservacionSeguimientoSemanalForm(forms.Form):
    observaciontecnica = forms.CharField(label=u'Observación Técnica', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    observacionacademica = forms.CharField(label=u'Observación Académica', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    estadocumplimiento = forms.ChoiceField(label=u"Cumplimiento", choices=ESTADO_REVISION_PLANIFICACION, required=False, widget=forms.Select(attrs={'formwidth': '75%'}))


class RecursosTutorSemanalForm(forms.Form):
    # recursotutor = ExtFileField(label=u'Archivo PDF', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=2194304, widget=FileInput({'accept': 'application/pdf'}))
    zoomurltutor = forms.CharField(label=u"Zoom url", widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    fechaclase = forms.DateField(label=u"Fecha clase", required=False, input_formats=['%d-%m-%Y'],
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class': 'selectorfecha', 'formwidth': '100%'}))
    hora = forms.TimeField(label=u"Hora Inicia", required=False, initial='19:00', input_formats=['%H:%M'],
                           widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '200px'}))
    horafin = forms.TimeField(label=u"Hora Finaliza", required=False, initial='20:00', input_formats=['%H:%M'],
                              widget=DateTimeInput(format='%H:%M',
                                                   attrs={'class': 'selectorhora', 'formwidth': '200px'}))
    clasevirtualtutor = forms.CharField(label=u'Clase Virtual', widget=forms.Textarea(attrs={'rows': '3'}),
                                        required=False)


class ProyectoExternoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre de proyecto', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    rol = forms.ModelChoiceField(label=u"Rol Participante",
                                 queryset=ParticipantesTipo.objects.filter(tipo=2, status=True))
    institucion = forms.CharField(label=u'Institución', max_length=1000, required=True)
    financiamiento = forms.CharField(label=u'Financiamiento', max_length=1000, required=True)
    fechainicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), )
    fechafin = forms.DateField(label=u"Fecha fin", required=False, input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y',
                                                    attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    archivo = ExtFileField(label=u'Archivo PDF', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=2194304, widget=FileInput({'accept': 'application/pdf'}))


class ArticuloInvestigacionDocenteForm(forms.Form):
    tematica = forms.CharField(label=u'Temática:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                               required=False)
    revista = forms.CharField(label=u'Revista:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                              required=False)
    metodologia = forms.CharField(label=u'Metodologia:',
                                  widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}), required=False)
    horas = forms.IntegerField(label=u"Horas", initial=0, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall ', 'decimal': '0'}))


class PonenciaInvestigacionDocenteForm(forms.Form):
    tematica = forms.CharField(label=u'Temática:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                               required=False)
    congreso = forms.CharField(label=u'Congreso:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                               required=False)
    horas = forms.IntegerField(label=u"Horas", initial=0, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall ', 'decimal': '0'}))


class LibroInvestigacionDocenteForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                             required=False)
    horas = forms.IntegerField(label=u"Horas", initial=0, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall ', 'decimal': '0'}))


class CapituloLibroInvestigacionDocenteForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                             required=False)
    horas = forms.IntegerField(label=u"Horas", initial=0, required=False,
                               widget=forms.TextInput(attrs={'class': 'imp-numbersmall ', 'decimal': '0'}))


class CronogramaTrabajoInvestigacionDocenteForm(forms.Form):
    fechainicio = forms.DateField(label=u"Fecha Inicio", required=False, input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), )
    fechafin = forms.DateField(label=u"Fecha fin", required=False, input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y',
                                                    attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    actividad = forms.CharField(label=u'Actividad:', widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}),
                                required=False)


class AsignarSoporteEstudiante(forms.Form):
    carrera = forms.ModelMultipleChoiceField(label=u'Carrera', queryset=Carrera.objects.all(), required=False)

    def cargar_carreras(self, carreras):
        self.fields['carrera'].queryset = Carrera.objects.filter(id__in=carreras, status=True)


class FechaFinProyectoFrom(forms.Form):
    fechafin = forms.DateField(label=u"Fecha de finalización", initial=datetime.now().date(), required=False,
                               input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


class ConfirmaDatosBienestarForm(forms.Form):
    sectorlugar = forms.ChoiceField(label=u"Sector que habita", choices=SECTORLUGAR, required=False,
                                    widget=forms.Select(attrs={'formwidth': '75%'}))
    nacionalidad = forms.CharField(label=u"Nacionalidad", max_length=100, required=False,
                                   widget=forms.TextInput(attrs={'class': 'imp-75'}))
    pais = forms.ModelChoiceField(label=u"País de residencia", queryset=Pais.objects.all(), required=False,
                                  widget=forms.Select(attrs={'class': 'imp-75'}))
    provincia = forms.ModelChoiceField(label=u"Provincia de residencia", queryset=Provincia.objects.all(),
                                       required=False, widget=forms.Select())
    canton = forms.ModelChoiceField(label=u"Cantón de residencia", queryset=Canton.objects.all(), required=False,
                                    widget=forms.Select())
    unicoestudia = forms.ChoiceField(
        label=u"En su grupo familiar (papá, mamá y hermanos), usted es el primero en cursar estudios universitarios?",
        choices=UNICO_ESTUDIANTE, required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    labora = forms.ChoiceField(label=u"Usted se encuentra laborando?", choices=ESTADO_LABORANDO, required=False,
                               widget=forms.Select(attrs={'formwidth': '75%'}))
    eszurdo = forms.BooleanField(label=u'¿Usted, es una persona zurda?', required=False,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '50%', 'separator': 'true'}))
    estadogestacion = forms.BooleanField(label=u'¿Usted, se encuentra en estado de gestación (embarazo)?',
                                         required=False,
                                         widget=forms.CheckboxInput(attrs={'formwidth': '50%', 'separator': 'true'}))

    def editar(self, persona):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=persona.pais)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=persona.provincia)

    def ocutar(self):
        del self.fields['estadogestacion']


class DetalleActividadCriterioForm(forms.Form):
    nombre = forms.CharField(label=u'Actividad', required=False, max_length=500,
                             widget=forms.Textarea(attrs={'rows': '3'}))
    minimo = forms.IntegerField(label=u'Hora min', initial=1, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    maximo = forms.IntegerField(label=u'Hora max', initial=1, required=False,
                                widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))


class SeccionClubesForm(forms.Form):
    nombre = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    icono = ExtFileField(label=u'Icono', required=False, help_text=u'Tamaño Maximo permitido 2Mb, en formato png, jpg',
                         ext_whitelist=(".png", ".jpg",), max_upload_size=2097152,
                         widget=FileInput(attrs={'formwidth': '100%'}))


class ClubesForm(forms.Form):
    coordinacion = forms.ModelChoiceField(label=u"Facultad", queryset=Coordinacion.objects.all().filter(status=True),
                                          required=False, widget=forms.Select())
    carrera = forms.ModelChoiceField(label=u"Solo estudiantes de la carrera", queryset=Carrera.objects.all(),
                                     required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    nombre = forms.CharField(label=u'Club', max_length=100, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    descripcion = forms.CharField(label=u'Detalle / Horario / Jornada', widget=forms.Textarea(attrs={'rows': '3'}),
                                  required=True)
    fechainicio = forms.DateField(label=u"Fecha inicio Club", required=False, input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin Club", required=False, input_formats=['%d-%m-%Y'],
                               widget=DateTimeInput(format='%d-%m-%Y',
                                                    attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechainicioinscripcion = forms.DateField(label=u"Fecha inicio de inscripción", required=False,
                                             input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={
            'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafininscripcion = forms.DateField(label=u"Fecha fin de inscripción", required=False, input_formats=['%d-%m-%Y'],
                                          widget=DateTimeInput(format='%d-%m-%Y',
                                                               attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    cupo = forms.IntegerField(label=u"Cupo", initial=0, required=False, widget=forms.TextInput(
        attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    # tutorprincipal=forms.ModelChoiceField(label=u"Tutor Principal", queryset=Profesor.objects.all().filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    tutorprincipal = forms.IntegerField(initial=0, required=False, label=u'Tutor Principal',
                                        widget=forms.TextInput(attrs={'select2search': 'true'}))
    icono = ExtFileField(label=u'Icono', required=False, help_text=u'Tamaño Maximo permitido 2Mb, en formato png, jpg',
                         ext_whitelist=(".png", ".jpg",), max_upload_size=2097152,
                         widget=FileInput(attrs={'formwidth': '100%'}))

    def editar(self, coordinacion, tutorprincipal):
        if coordinacion:
            facultad = Coordinacion.objects.get(pk=coordinacion.id, status=True)
            self.fields['carrera'].queryset = facultad.carreras()
        else:
            self.fields['carrera'].queryset = Carrera.objects.all()
        self.fields['tutorprincipal'].widget.attrs['descripcion'] = tutorprincipal.persona.nombre_completo()
        self.fields['tutorprincipal'].widget.attrs['value'] = tutorprincipal.id
        self.fields['tutorprincipal'].initial = tutorprincipal.id


class InscripcionclubesForm(forms.Form):
    inscripcion = forms.IntegerField(initial=0, required=True, label=u'Alumno',
                                     widget=forms.TextInput(attrs={'select2search': 'true'}))


class PersonalExternoInvForm(forms.Form):
    from sga.models import Sexo
    institucionlabora = forms.CharField(label=u"Institucion donde labora", max_length=100, required=False,
                                        widget=forms.TextInput(attrs={'class': 'imp-50'}))
    tipopersona = forms.ChoiceField(choices=TIPO_PERSONA, label=u'Tipo Persona', required=False, widget=forms.Select(attrs={'formwidth': '40%'}))
    cedula = forms.CharField(label=u"Cédula", max_length=10, required=False, widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    pasaporte = forms.CharField(label=u"Pasaporte", max_length=15, initial='', required=False, widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    nombres = forms.CharField(label=u"Nombres", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido1 = forms.CharField(label=u"1er Apellido", max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido2 = forms.CharField(label=u"2do Apellido", max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    sexo = forms.ModelChoiceField(label=u"Sexo", required=False, queryset=Sexo.objects.all(), widget=forms.Select(attrs={'formwidth': '40%'}))
    ruc = forms.CharField(label=u"RUC", max_length=13, required=False, widget=forms.TextInput(attrs={'class': 'imp-ruc'}))
    nombreempresa = forms.CharField(label=u"Nombre Empresa", required=False, max_length=100, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    nombrecomercial = forms.CharField(label=u"Nombre Comercial", required=False, max_length=200, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    contribuyenteespecial = forms.BooleanField(initial=False, label=u"Es Contrib. Espec.", required=False)
    nacimiento = forms.DateField(label=u"Fecha Nacimiento o Constitución", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    pais = forms.ModelChoiceField(label=u"País residencia", queryset=Pais.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    provincia = forms.ModelChoiceField(label=u"Provincia residencia", queryset=Provincia.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    canton = forms.ModelChoiceField(label=u"Canton residencia", queryset=Canton.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    parroquia = forms.ModelChoiceField(label=u"Parroquia residencia", queryset=Parroquia.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    sector = forms.CharField(label=u"Sector", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    direccion = forms.CharField(label=u"Calle Principal", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-75'}))
    direccion2 = forms.CharField(label=u"Calle Secundaria", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-75'}))
    num_direccion = forms.CharField(label=u"Numero Domicilio", max_length=15, required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    telefono = forms.CharField(label=u"Telefono Movil", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    telefono_conv = forms.CharField(label=u"Telefono Fijo", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    email = forms.CharField(label=u"Correo Electronico", max_length=240, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    nombrecontacto = forms.CharField(label=u"Nombre Representante", required=False, max_length=200, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    telefonocontacto = forms.CharField(label=u"Telefono Representante", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    hojadevida = ExtFileField(label=u'Hoja de Vida:', widget=FileInput(attrs={'formwidth': '100%'}),
                              required=False,
                              help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                              ext_whitelist=(".pdf"),
                              max_upload_size=4194304)

    def adicionar(self):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=None)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=None)
        self.fields['parroquia'].queryset = Parroquia.objects.filter(canton=None)

    def editar(self, persona):
        deshabilitar_campo(self, 'tipopersona')
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=persona.pais)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=persona.provincia)
        self.fields['parroquia'].queryset = Parroquia.objects.filter(canton=persona.canton)


# Cambio adm_planificacionsilabo
class PeriodoFechasRecuperacionForm(FormModeloBase):
    fecha_recuperacion_inicio = forms.DateField(label=u"Fecha de inicio de Semana:", initial=datetime.now().date(), required=False, widget=DateTimeInput({'col': '6'}))
    fecha_recuperacion_fin = forms.DateField(label=u"Fecha fin de Semana:", initial=datetime.now().date(), required=False, widget=DateTimeInput({'col': '6'}))


    def clean(self):
        cleaned_data = super(PeriodoFechasRecuperacionForm, self).clean()
        if cleaned_data['fecha_recuperacion_inicio'] > cleaned_data['fecha_recuperacion_fin']:
            self.add_error('fecha_recuperacion_inicio', ValidationError('La fecha de inicio debe ser menor a la fecha fin.'))
        return cleaned_data


class PeriodoFechasLimitActForm(FormModeloBase):
    fecha_limite_ingresoact = forms.DateField(label=u"Fecha Límite de Ingreso de Actividades:", initial=datetime.now().date(), required=False, widget=DateTimeInput({'col': '6'}))


class ActividadItinerarioForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripcion de actividad', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class CartaVinculacionForm(forms.Form):
    # hora = forms.IntegerField(label=u"Horas", required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    fecha = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    # memo = forms.CharField(label=u"Memorando Nro.", max_length=50, required=True, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    memorandum = forms.BooleanField(label=u'¿Es memorandum?', required=False, initial=False,widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    convenio = forms.ModelChoiceField(label=u"Convenio asociado", queryset=ConvenioEmpresa.objects.all().filter(status=True), required=False, widget=forms.Select())
    acuerdo = forms.ModelChoiceField(label=u"Acuerdo asociado", queryset=AcuerdoCompromiso.objects.all().filter(status=True), required=False, widget=forms.Select())
    empresaempleadora = forms.ModelChoiceField(label=u"Empresa empleadora", queryset=EmpresaEmpleadora.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    departamento = forms.ModelChoiceField(label=u"Departamento empresa", queryset=PracticasDepartamento.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    director = forms.ModelChoiceField(label=u"Director", queryset=ConfiguracionFirmaPracticasPreprofesionales.objects.all().filter(status=True), required=True, widget=forms.Select())
    representante = forms.CharField(label=u"Representante", required=True, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    cargo = forms.CharField(label=u"Cargo", required=True, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    email = forms.CharField(label=u"Email Empresa", required=False, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    email1 = forms.CharField(label=u"Email Adicional 1", required=False, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    email2 = forms.CharField(label=u"Email Adicional 2", required=False, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    email3 = forms.CharField(label=u"Email Adicional 3", required=False, widget=forms.TextInput(attrs={'formwidth': '100%'}))

    # carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all().filter(status=True), required=True, widget=forms.Select())
    # nivelmalla = forms.ModelChoiceField(label=u"Nivel de malla", queryset=NivelMalla.objects.all().filter(status=True), required=True, widget=forms.Select())
    # observacion = forms.CharField(label=u"Observación", required=False, widget=forms.Textarea(attrs={'rows': '3', 'formwidth': '100%'}))

    # archivo = ExtFileField(label=u'Archivo de carta', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=10485760, widget=FileInput({'accept': 'application/pdf'}))=======


class DirectorVinculacionFirmaForm(forms.Form):
    # director = forms.ModelChoiceField(label=u"Director Vinculacion", queryset=Persona.objects.filter(status=True),required=False, widget=forms.Select())
    nombres = forms.CharField(label=u'Nombre', max_length=100, required=True, widget=forms.TextInput(attrs={'class': 'imp-100 normal-input'}))
    cargo = forms.CharField(label=u'Cargo', max_length=100, required=True, widget=forms.TextInput(attrs={'class': 'imp-100 normal-input'}))
    desde = forms.DateField(label=u"Desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    hasta = forms.DateField(label=u"Hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    archivo = ExtFileField(label=u'Archivo PNG', required=False, help_text=u'Tamaño Maximo permitido 2Mb, en formato PNG', ext_whitelist=(".png",), max_upload_size=2097152)
    activo = forms.BooleanField(label=u'Activo?', required=False, initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '50%', 'class': 'js-switch'}))
    esprincipal = forms.BooleanField(label=u'Es Principal?', required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%', 'class': 'js-switch'}))

    # imagen = ExtFileField(label=u'Seleccione Imagen', required=False, help_text=u'Tamaño Maximo permitido 2Mb, en formato jpg o png', ext_whitelist=(".jpeg", ".jpg", ".png"), max_upload_size=2097152)
    # def editar(self):
    #     from sagest.models import Departamento
    #     depid = Departamento.objects.filter(status=True).values_list('responsable_id')
    #     lista = [x[0] for x in depid if x[0] != None]
    #     self.fields['director'].queryset = Persona.objects.filter(pk__in=lista, status=True)
    #
    # def editarselecccioncombos(self,persona):
    #     self.fields['director'].initial = persona.id


class InquietudConsultaEstudianteForm(forms.Form):
    inquietud = forms.CharField(label=u'Título', max_length=1000, required=True, widget=forms.TextInput(attrs={'class': 'imp-100 normal-input'}))
    observacion = forms.CharField(label=u'Ingrese su Inquietud', widget=forms.Textarea(attrs={'rows': '3', 'class': 'normal-input'}), required=True)
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato .pdf .docx .png .jpeg .jpg',
                           ext_whitelist=(".pdf", ".docx", ".png", ".jpeg", ".jpg"), max_upload_size=4194304,
                           widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'pdf docx png jpeg jpg', 'class': 'dropify'}))
    # fechaingreso = forms.DateField(label=u"Fecha de Pregunta", initial=datetime.now().date(),  input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)


class DetallePreInscripcionPracticasPPForm(forms.Form):
    inscripcion = forms.IntegerField(initial=0, required=False, label=u'Alumno/Carrera', widget=forms.TextInput(attrs={'select2search': 'true'}))
    nivelmalla = forms.ModelChoiceField(label=u"Nivel Práctica", queryset=NivelMalla.objects.filter(status=True).order_by('orden'), required=False, widget=forms.Select(attrs={'width': '50%'}))
    itinerariomalla = forms.IntegerField(label=u"Itinerario", required=False, widget=forms.Select())
    estado = forms.ChoiceField(label=u'Estado PreInscripción', choices=ESTADO_PREINSCRIPCIONPPP, widget=forms.Select(attrs={'formwidth': '100%'}), required=True)


class SeguimientoPreProfesionalInscripcionForm(forms.Form):
    from sga.models import HISTORIAL_CHOICES_LLAMADAS
    fecha_llamada = forms.DateField(label=u"Fecha", initial=datetime.now().date(), required=False,
                                    input_formats=['%d-%m-%Y'],
                                    widget=DateTimeInput(format='%d-%m-%Y',
                                                         attrs={'class': 'selectorfecha', 'formwidth': '50%', 'style': 'width:100%'}))
    hora_llamada = forms.TimeField(label=u"Hora", required=False, initial=str(datetime.now().time())[:5], input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%', 'style': 'width:100%;height:30px;', 'type': 'time'}))
    accion = forms.ChoiceField(label=u'Acción', choices=HISTORIAL_CHOICES_LLAMADAS, required=True,
                               widget=forms.Select(attrs={'formwidth': '100%'}))

    detalle = forms.CharField(label=u'Detalle', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class AnilladoPreProfesionalInscripcionForm(forms.Form):
    from sga.models import HISTORIAL_CHOICES_ANILLADO
    fecha = forms.DateField(label=u"Fecha", initial=datetime.now().date(), required=False,
                            input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y',
                                                 attrs={'class': 'selectorfecha', 'formwidth': '50%', 'style': 'width:100%'}))

    hora = forms.TimeField(label=u"Hora", required=False, initial=str(datetime.now().time())[:5], input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50%', 'style': 'width:100%;height:30px;', 'type': 'time'}))
    accion = forms.ChoiceField(label=u'Acción', choices=HISTORIAL_CHOICES_ANILLADO, required=True,
                               widget=forms.Select(attrs={'formwidth': '100%'}))

    detalle = forms.CharField(label=u'Detalle', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class AnilladoForm(forms.Form):
    persona = forms.IntegerField(initial=0, required=True, label=u'Solicitante', widget=forms.TextInput(attrs={'select2search': 'true'}))
    # coordinacion = forms.ModelChoiceField(label=u"Facultad", queryset=Coordinacion.objects.all(), required=True)
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_DE_SERVICIO, required=True, widget=forms.Select(attrs={'class': 'imp-50'}))
    cantidad = forms.DecimalField(initial='0.00', label=u'Cantidad', widget=forms.TextInput(attrs={'class': 'imp-moneda'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '6'}), required=True)

    def editar(self, persona):
        self.fields['persona'].widget.attrs['descripcion'] = persona
        self.fields['persona'].initial = persona.id
        self.fields['persona'].widget.attrs['value'] = persona.id


class TiposSegurosForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=100, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))


class SeguroForm(forms.Form):
    aseguradora = forms.ModelChoiceField(label=u"Aseguradora", queryset=Aseguradora.objects.filter(status=True), required=False, widget=forms.Select())
    tipo = forms.ModelChoiceField(label=u"Tipo Seguro", queryset=SeguroTipo.objects.filter(status=True), required=False, widget=forms.Select())
    descripcion = forms.CharField(label=u'Descripcion de actividad', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    prima = forms.DecimalField(initial='0.00', label=u'Valor', widget=forms.TextInput(attrs={'class': 'imp-moneda'}))
    fechainicio = forms.DateField(label=u"Desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fechafin = forms.DateField(label=u"Hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    # archivo = ExtFileField(label=u'Archivo PNG', required=False, help_text=u'Tamaño Maximo permitido 2Mb, en formato PNG', ext_whitelist=(".png",), max_upload_size=2097152)
    # imagen = ExtFileField(label=u'Seleccione Imagen', required=False, help_text=u'Tamaño Maximo permitido 2Mb, en formato jpg o png', ext_whitelist=(".jpeg", ".jpg", ".png"), max_upload_size=2097152)


class AseguradoraForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=100, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))


# EVIDENCIAS PARA HOMOLOGACIÓN DE PRÁCTICASPREPROFESIONALES
class ConfiguracionEvidenciaHomologacionPracticaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carrera', queryset=Carrera.objects.filter(status=True, coordinacion__excluir=False),
                                             required=False)


class EvidenciaHomologacionPracticaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=False, widget=forms.Textarea(attrs={'rows': '2', 'formwidth': '100%'}))
    nombrearchivo = forms.CharField(label=u'Nombre archivo', required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '50%'}))
    orden = forms.IntegerField(label=u'Orden', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    configurarfecha = forms.BooleanField(label=u'Puede configurar fecha?', required=False, initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    archivo = ExtFileField(label=u'Archivo', required=False, help_text=u'Tamaño Maximo permitido 15Mb, en formato pdf, doc, docx', ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=15728640)


class EvidenciaHomologacionForm(forms.Form):
    puntaje = forms.FloatField(label=u"Puntaje", initial="0", required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '2'}))
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=20971520)

    def concalificacion(self):
        del self.fields['puntaje']


class ActividadAyudantiaCatedraForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '2', 'formwidth': '100%'}), required=False)


class InformeAyudanteCatedraForm(forms.Form):
    objetivo = forms.CharField(label=u"Objetivo", required=True, widget=forms.Textarea(attrs={'rows': '2', 'formwidth': '100%'}))
    fechaelaboracion = forms.DateField(label=u"Fecha elaboración", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))


class InformeAyudanteCatedraEstadoForm(forms.Form):
    estado = forms.ChoiceField(label=u'Estado ', choices=InformeAyudanteCatedra.ESTADO_INFORME_AYUDANTE, widget=forms.Select(attrs={'class': 'imp-50'}))
    observacion = forms.CharField(label=u'Motivo', widget=forms.Textarea(attrs={'rows': '2'}), required=False)


class ArchivoHomologacionPracticaForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=True, help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=20971520)


class AsignacionEmpresaPracticaForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    pais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    provincia = forms.ModelChoiceField(label=u"Provincia / Estado", queryset=Provincia.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    canton = forms.ModelChoiceField(label=u"Cantón / Ciudad", queryset=Canton.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))


class ArchivoGeneralCatedraForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=999, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    visible = forms.BooleanField(label=u'Visible?', required=False, initial=True,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 15Mb, en formato pdf, doc, docx',
                           ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=15728640)


class EvidenciaLeyHumanitariaForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf',
                           ext_whitelist=(".doc", ".docx", ".pdf"), max_upload_size=20971520)


class EncuestaGrupoEstudiantesForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripcion', max_length=500)
    leyenda = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '10', 'class': 'validate[required]', 'style': "width: 100%;"}), label=u"Leyenda")
    tipoperfil = forms.ChoiceField(label=u'Perfil', choices=TIPO_PERFIL, required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    activo = forms.BooleanField(required=False, label=u'Activo', widget=CheckboxInput(attrs={'formwidth': '50%'}))
    obligatoria = forms.BooleanField(required=False, label=u'Obligatoria', widget=CheckboxInput(attrs={'formwidth': '50%'}))
    categoria = forms.BooleanField(required=False, label=u'Es encuesta para seguimiento al sílabo?', widget=CheckboxInput(attrs={'formwidth': '50%'}))


class PreguntaEncuestaGrupoEstudiantesForm(forms.Form):
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PREGUNTAGRUPO, required=False, widget=forms.Select(attrs={'class': 'imp-50'}))
    descripcion = forms.CharField(label=u'Pregunta', max_length=500, required=False)
    observacionporno = forms.CharField(label=u'Pregunta por no', max_length=250, required=False)
    orden = forms.IntegerField(label=u'Orden', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    obligatoria = forms.BooleanField(required=False, label=u'Obligatoria', widget=CheckboxInput(attrs={'formwidth': '50%'}))

class RangoPreguntaEncuestaGrupoEstudiantesForm(forms.Form):
    descripcion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;"}), label=u'Rango', required=False)
    valor = forms.IntegerField(label=u'Valor', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    orden = forms.IntegerField(label=u'Orden', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))


class OpcionCuadriculaEncuestaGrupoEstudiantesForm(forms.Form):
    descripcion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;"}), label=u'Descripción', required=False)
    valor = forms.IntegerField(label=u'Valor', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    orden = forms.IntegerField(label=u'Orden', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    otros = forms.BooleanField(initial=False, label=u"Es respuesta otros?", required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    archivo = forms.BooleanField(initial=False, label=u"Sube evidencia?", required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    secuenciapregunta = forms.ModelChoiceField(PreguntaEncuestaGrupoEstudiantes.objects.filter(status=True),required=False,label=u"Pregunta secuencia", widget=forms.Select(attrs={'formwidth': '100%'}))

    def sin_secuentia(self):
        del self.fields['secuenciapregunta']


class OpcionMultipleEncuestaGrupoEstudiantesForm(forms.Form):
    descripcion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;"}), label=u'Descripción', required=False)
    valor = forms.IntegerField(label=u'Valor', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    orden = forms.IntegerField(label=u'Orden', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    otros = forms.BooleanField(initial=False, label=u"Es respuesta otros?", required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))

class DuplicarContenidoPreguntaForm(forms.Form):
    pregunta = forms.ModelChoiceField(label=u"Pregunta",
                                              queryset=DetalleModeloEvaluativo.objects.none() ,
                                              required=False, widget=forms.Select(attrs={'formwidth': '100%'}))

    def load_pregunta(self,pk,id,tipo):
        self.fields['pregunta'].queryset =  preguntas = PreguntaEncuestaGrupoEstudiantes.objects.filter(status=True, encuesta_id=id,tipo = tipo).exclude(pk=pk).order_by('orden')
        self.fields['pregunta'].initial = preguntas.first()

class DuplicarContenidoEncuestaForm(forms.Form):
    encuesta = forms.ModelChoiceField(label=u"Encuesta",
                                              queryset=EncuestaGrupoEstudiantes.objects.filter(status=True) ,
                                              required=False, widget=forms.Select(attrs={'formwidth': '100%'}))

class CorrecionArchivoFinalSustentacionForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=True, help_text=u'Tamaño Maximo permitido 12Mb, en formato doc, docx', ext_whitelist=(".doc", ".docx",), max_upload_size=20971520)


class ArchivoNotasForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', max_length=250, required=False)
    observacion = forms.CharField(label=u'Observación', max_length=250, required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño maximo permitido 10Mb, en formato xls, xlsx', ext_whitelist=(".xls", ".xlsx"), max_upload_size=10485760)


class ArchivoNotasSistemaForm(forms.Form):
    archivosistema = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño maximo permitido 10Mb, en formato xls, xlsx', ext_whitelist=(".xls", ".xlsx"), max_upload_size=10485760)


class SubirArchivoForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño maximo permitido 10Mb, en formato xls, xlsx', ext_whitelist=(".xls", ".xlsx"), max_upload_size=10485760)


class TareaSilaboSemanalForm(forms.Form):
    calificar = forms.BooleanField(label=u'Calificar tarea', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    modeloevaluativo = forms.ModelChoiceField(label=u"Categoría de calificación", queryset=DetalleModeloEvaluativo.objects.filter(migrarmoodle=True, recurso=True, status=True), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    nombre = forms.CharField(label=u'Nombre', max_length=500, required=False)
    objetivo = forms.CharField(label=u'Objetivo', max_length=500, required=False)
    # instruccion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Instrucción", required=True)
    # recomendacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Recomendación", required=True)
    instruccion = forms.CharField(label=u'Instrucción', widget=CKEditorUploadingWidget(), required=True)
    recomendacion = forms.CharField(label=u'Recomendación', widget=CKEditorUploadingWidget(), required=True)
    rubrica = forms.CharField(label=u'Rúbrica', widget=CKEditorUploadingWidget(), required=False)
    archivorubrica = ExtFileField(label=u'Archivo rúbrica', required=False, help_text=u'Tamaño Maximo permitido 30Mb, en formato doc,docx,xls,xlsx,zip,rar,pdf', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".zip", ".rar", ".pdf",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=30000000)
    # archivo se suspendio
    archivotareasilabo = ExtFileField(label=u'Archivo adicional(opcional)', required=False, help_text=u'Tamaño Maximo permitido 30Mb, en formato doc,docx,xls,xlsx,zip,rar,pdf', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".zip", ".rar", ".pdf",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=30000000)
    fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%', 'titulo': u'Fecha de disponibilidad del estudiante'}), required=False)
    fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    word = forms.BooleanField(label=u'Word', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'titulo': u'Formato de archivos permitidos al estudiante para entregar la actividad'}))
    pdf = forms.BooleanField(label=u'Pdf', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    excel = forms.BooleanField(label=u'Excel', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    powerpoint = forms.BooleanField(label=u'Power point', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    todos = forms.BooleanField(label=u'Todos', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))

    def validar(self, tareavirtual):
        if tareavirtual.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id == 9:
            cursor = connections['db_moodle_virtual'].cursor()
        elif tareavirtual.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id == 7:
            cursor = connections['moodle_pos'].cursor()
        elif tareavirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id in (1, 2):
            cursor = connections['aulagradoa'].cursor()
        elif tareavirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id == 3:
            cursor = connections['aulagradob'].cursor()
        else:
            cursor = connections['moodle_db'].cursor()
        query = """SELECT count(grades.grade )
                    FROM mooc_assign_grades grades 
                    INNER JOIN mooc_assign assign ON assign.id=grades.ASSIGNMENT 
                    INNER JOIN mooc_course_modules cm ON cm.instance=assign.id AND cm.course=assign.course
                    WHERE cm.id=%s AND grades.grade >= 0 AND cm.course=%s 
        """ % (tareavirtual.idtareamoodle, tareavirtual.silabosemanal.silabo.materia.idcursomoodle)
        cursor.execute(query)
        row = cursor.fetchall()
        if row[0][0] > 0:
            deshabilitar_campo(self, 'nombre')
            deshabilitar_campo(self, 'modeloevaluativo')
            deshabilitar_campo(self, 'rubrica')


class TareaSilaboSemanalRubricaForm(forms.Form):
    calificar = forms.BooleanField(label=u'¿Actividad evaluable?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    modeloevaluativo = forms.ModelChoiceField(label=u"Categoría de calificación", queryset=DetalleModeloEvaluativo.objects.filter(migrarmoodle=True, recurso=True, status=True), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    nombre = forms.CharField(label=u'Nombre', max_length=500, required=False)
    objetivo = forms.CharField(label=u'Objetivo', max_length=500, required=False)
    # instruccion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Instrucción", required=True)
    # recomendacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Recomendación", required=True)
    instruccion = forms.CharField(label=u'Instrucción', widget=CKEditorUploadingWidget(), required=True)
    recomendacion = forms.CharField(label=u'Recomendación', widget=CKEditorUploadingWidget(), required=True)
    rubrica = forms.ModelChoiceField(label=u'Rubrica Moodle', queryset=RubricaMoodle.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'fieldbuttons': [{'id': 'add_revista', 'tooltiptext': 'Ver detalle Rubrica', 'btnclasscolor': 'btn-success', 'btnfaicon': 'fa-eye'}, {'id': 'id_crear_rubrica', 'tooltiptext': 'Crear rubrica', 'btnclasscolor': 'btn-warning', 'btnfaicon': 'fa-link'}]}))
    # rubrica = forms.CharField(label=u'Rúbrica', widget=CKEditorUploadingWidget(), required=False)
    # archivorubrica = ExtFileField(label=u'Archivo rúbrica', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato doc,docx,xls,xlsx,zip,rar,pdf', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".zip", ".rar", ".pdf",),  widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=20971520)
    archivotareasilabo = ExtFileField(label=u'Archivo adicional(opcional)', required=False, help_text=u'Tamaño Maximo permitido 30Mb, en formato doc,docx,xls,xlsx,zip,rar,pdf', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".zip", ".rar", ".pdf",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=30000000)
    fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%', 'titulo': u'Fecha de disponibilidad del estudiante'}), required=False)
    fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    word = forms.BooleanField(label=u'Word', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'titulo': u'Formato de archivos permitidos al estudiante para entregar la actividad'}))
    pdf = forms.BooleanField(label=u'Pdf', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    excel = forms.BooleanField(label=u'Excel', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    powerpoint = forms.BooleanField(label=u'Power point', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    todos = forms.BooleanField(label=u'Todos', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))


    def add(self, tipo, carrera, profesor, tareavirtual=None):
        p = None
        r = None
        if tipo == 1:
            idr_plublic_h = None
            idr_public = None
            if RubricaMoodleHistorial.objects.values_list('rubrica_id').filter(status=True, rubrica__tipotarea__in=[1, 3, 4, 5, 6], rubrica__profesor=profesor, estado=4):
                idr_plublic_h = RubricaMoodleHistorial.objects.values_list('rubrica_id').filter(status=True, rubrica__tipotarea__in=[1, 3, 4, 5, 6], rubrica__profesor=profesor, estado=4)
                idr_public = RubricaMoodle.objects.filter(id__in=idr_plublic_h).distinct()
            if RubricaMoodle.objects.filter(status=True, profesor=profesor, estado=True, tipotarea__in=[1, 3, 4, 5, 6]):
                p = RubricaMoodle.objects.filter(status=True, profesor=profesor, estado=True, tipotarea__in=[1, 3, 4, 5, 6]).distinct()
            c = CarreraRubricaMoodle.objects.filter(carrera=carrera, status=True, rubrica__tipotarea__in=[1, 3, 4, 5, 6])
            if c:
                idrubricas = c.values_list('rubrica__id', flat=True).all()
                r = RubricaMoodle.objects.filter(pk__in=idrubricas, status=True, estado=True, tipotarea__in=[1, 3, 4, 5, 6]).distinct()
            else:
                r = RubricaMoodle.objects.filter(status=True, estado=True, tipotarea__in=[1, 3, 4, 5, 6], carrerarubricamoodle__isnull=True).distinct()
            if idr_public:
                r = r.union(idr_public)

        if tipo == 2:
            idr_plublic_h = None
            idr_public = None
            if RubricaMoodleHistorial.objects.values_list('rubrica_id').filter(status=True,
                                                                               rubrica__tipotarea=tipo,
                                                                               rubrica__profesor=profesor, estado=4):
                idr_plublic_h = RubricaMoodleHistorial.objects.values_list('rubrica_id').filter(status=True,
                                                                                                rubrica__tipotarea=tipo,
                                                                                                rubrica__profesor=profesor,
                                                                                                estado=4)
                idr_public = RubricaMoodle.objects.filter(id__in=idr_plublic_h).distinct()

            if RubricaMoodle.objects.filter(status=True, profesor=profesor, estado=True, tipotarea=tipo):
                p = RubricaMoodle.objects.filter(status=True, profesor=profesor, estado=True, tipotarea=tipo).distinct()
            c = CarreraRubricaMoodle.objects.filter(carrera=carrera, status=True, rubrica__tipotarea=tipo)
            if c:
                idrubricas = c.values_list('rubrica__id', flat=True).all()
                r = RubricaMoodle.objects.filter(pk__in=idrubricas, status=True, estado=True, tipotarea=tipo).distinct()
            else:
                r = RubricaMoodle.objects.filter(status=True, estado=True, tipotarea=tipo, carrerarubricamoodle__isnull=True).distinct()
            if idr_public:
                r = r.union(idr_public)

        if p:
            if r:
                self.fields['rubrica'].queryset = p.union(r)
            else:
                self.fields['rubrica'].queryset = p
        else:
            self.fields['rubrica'].queryset = r

        if tareavirtual:
            if tareavirtual.silabosemanal.silabo.materia.idcursomoodle > 0 and tareavirtual.idtareamoodle > 0:
                if tareavirtual.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id == 9:
                    cursor = connections['db_moodle_virtual'].cursor()
                elif tareavirtual.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id == 7:
                    cursor = connections['moodle_pos'].cursor()
                elif tareavirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id in (1, 2):
                    cursor = connections['aulagradoa'].cursor()
                elif tareavirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id == 3:
                    cursor = connections['aulagradob'].cursor()
                else:
                    cursor = connections['moodle_db'].cursor()
                query = """SELECT count(grades.grade )
                                    FROM mooc_assign_grades grades 
                                    INNER JOIN mooc_assign assign ON assign.id=grades.ASSIGNMENT 
                                    INNER JOIN mooc_course_modules cm ON cm.instance=assign.id AND cm.course=assign.course
                                    WHERE cm.id=%s AND grades.grade >= 0 AND cm.course=%s 
                        """ % (tareavirtual.idtareamoodle, tareavirtual.silabosemanal.silabo.materia.idcursomoodle)
                cursor.execute(query)
                row = cursor.fetchall()
                if row[0][0] > 0:
                    deshabilitar_campo(self, 'calificar')
                    deshabilitar_campo(self, 'nombre')
                    deshabilitar_campo(self, 'modeloevaluativo')
                    deshabilitar_campo(self, 'rubrica')


class ForoSilaboSemanalForm(forms.Form):
    calificar = forms.BooleanField(label=u'Calificar foro', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    modeloevaluativo = forms.ModelChoiceField(label=u"Categoría de calificación", queryset=DetalleModeloEvaluativo.objects.filter(migrarmoodle=True, recurso=True, status=True), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    # tipoforo = forms.ChoiceField(label=u"Tipo foro", choices=TIPO_FORO, required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    tipoconsolidacion = forms.ChoiceField(label=u"Tipo consolidación", choices=TIPO_CONSOLIDACIONFORO, required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    nombre = forms.CharField(label=u'Nombre', max_length=500, required=False)
    objetivo = forms.CharField(label=u'Objetivo', max_length=500, required=False)
    instruccion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Instrucción", required=True)
    recomendacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Recomendación", required=True)
    rubrica = forms.CharField(label=u'Rúbrica', widget=CKEditorUploadingWidget(), required=False)
    archivorubrica = ExtFileField(label=u'Archivo rúbrica', required=False, help_text=u'Tamaño Maximo permitido 30Mb, en formato doc,docx,xls,xlsx,zip,rar,pdf', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".zip", ".rar", ".pdf",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=30000000)
    archivoforo = ExtFileField(label=u'Archivo adicional(opcional)', required=False, help_text=u'Tamaño Maximo permitido 30Mb, en formato doc,docx,xls,xlsx,zip,rar,pdf', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".zip", ".rar", ".pdf",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=30000000)
    fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%', 'titulo': u'Fecha de disponibilidad del estudiante'}), required=False)
    fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)

    def validar(self, forovirtual):
        if forovirtual.idforomoodle > 0:
            if forovirtual.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id == 9:
                cursor = connections['db_moodle_virtual'].cursor()
            elif forovirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id in (1, 2):
                cursor = connections['aulagradoa'].cursor()
            elif forovirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id == 3:
                cursor = connections['aulagradob'].cursor()
            else:
                cursor = connections['moodle_db'].cursor()
            query = """SELECT COUNT( notas.rawgrade )
                             FROM mooc_grade_grades notas  
                             INNER JOIN mooc_grade_items item ON item.id=notas.itemid 
                             INNER JOIN mooc_forum foro ON foro.id=item.iteminstance 
                             INNER JOIN mooc_course_modules cm ON cm.instance=foro.id AND cm.course=foro.course
                             WHERE  cm.id=%s
            """ % (forovirtual.idforomoodle)


class TestSilaboSemanalForm(forms.Form):
    calificar = forms.BooleanField(label=u'Calificar test', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    modeloevaluativo = forms.ModelChoiceField(label=u"Categoría de calificación", queryset=DetalleModeloEvaluativo.objects.filter(migrarmoodle=True, recurso=True, status=True), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    nombretest = forms.CharField(label=u'Nombre', max_length=100, required=False)
    instruccion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Instrucción", required=True)
    recomendacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Recomendación", required=True)
    fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '30%'}), required=False)
    horadesde = forms.TimeField(label=u"Hora desde", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '70%'}))
    fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '30%'}), required=False)
    horahasta = forms.TimeField(label=u"Hora hasta", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '70%'}))
    # vecesintento = forms.IntegerField(label=u'Veces intentos', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    vecesintento = forms.ChoiceField(label=u"Veces intentos", choices=VECES_INTENTO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    # tiempoduracion = forms.IntegerField(label=u'Tiempo de duración del test(en minutos)', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    tiempoduracion = forms.ChoiceField(label=u"Tiempo de duración del test(en minutos)", choices=TIEMPO_DURACION, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    navegacion = forms.ChoiceField(label=u"Método Navegación", choices=METODO_NAVEGACION, required=False, widget=forms.Select(attrs={'formwidth': '75%'}))

    # archivorubrica = ExtFileField(label=u'Archivo del test', required=False,  help_text=u'Tamaño Maximo permitido 20Mb, en formato doc,docx,xls,xlsx,zip,rar,pdf',  ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".zip",".rar",".pdf",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=20971520)

    def validar(self, testvirtual):
        if testvirtual.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id == 9:
            cursor = connections['db_moodle_virtual'].cursor()
        elif testvirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id in (1, 2):
            cursor = connections['aulagradoa'].cursor()
        elif testvirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id == 3:
            cursor = connections['aulagradob'].cursor()
        else:
            cursor = connections['moodle_db'].cursor()
        query = """SELECT count(notatest.grade)
                FROM mooc_quiz_grades notatest
                INNER JOIN mooc_quiz test ON notatest.quiz=test.id
                WHERE notatest.grade >= 0 AND test.id=%s AND test.course=%s
        """ % (testvirtual.idtestmoodle, testvirtual.silabosemanal.silabo.materia.idcursomoodle)
        cursor.execute(query)
        row = cursor.fetchall()
        if row[0][0] > 0:
            deshabilitar_campo(self, 'nombretest')
            deshabilitar_campo(self, 'modeloevaluativo')


class TestSilaboSemanalAdmForm(forms.Form):
    calificar = forms.BooleanField(label=u'Calificar test', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    modeloevaluativo = forms.ModelChoiceField(label=u"Categoría de calificación", queryset=DetalleModeloEvaluativo.objects.filter(migrarmoodle=True, recurso=True, status=True), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    titulo = forms.CharField(label=u'Titulo', max_length=100, required=False)
    if DEBUG:
        descripcion = forms.CharField(label=u'Instrucción',  required=True)
    else:
        descripcion = forms.CharField(label=u'Instrucción', widget=CKEditorUploadingWidget(), required=True)
    # url1 = forms.CharField(label=u'URL1', max_length=100, required=False)
    # url2 = forms.CharField(label=u'URL2', max_length=100, required=False)
    # nombretest = forms.CharField(label=u'Nombre', max_length=100, required=False)
    fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '30%'}), required=False)
    horadesde = forms.TimeField(label=u"Hora desde", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '70%'}))
    fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '30%'}), required=False)
    horahasta = forms.TimeField(label=u"Hora hasta", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '70%'}))
    # vecesintento = forms.IntegerField(label=u'Veces intentos', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    vecesintento = forms.ChoiceField(label=u"Veces intentos", choices=VECES_INTENTO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    # tiempoduracion = forms.IntegerField(label=u'Tiempo de duración del test(en minutos)', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    tiempoduracion = forms.ChoiceField(label=u"Tiempo de duración del test(en minutos)", choices=TIEMPO_DURACION, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    navegacion = forms.ChoiceField(label=u"Método Navegación", choices=METODO_NAVEGACION, required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    esquemapregunta = forms.ChoiceField(label=u"Esquema de preguntas", choices=ESQUEMA_PREGUNTA, required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    # archivorubrica = ExtFileField(label=u'Archivo del test', required=False,  help_text=u'Tamaño Maximo permitido 20Mb, en formato doc,docx,xls,xlsx,zip,rar,pdf',  ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".zip",".rar",".pdf",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=20971520)
    password = forms.CharField(label=u'Clave', max_length=10, required=False, widget=forms.TextInput(attrs={'formwidth': '50%'}))

    def validar(self, testvirtual):
        if not DEBUG:
            if testvirtual.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id == 9:
                cursor = connections['db_moodle_virtual'].cursor()
            elif testvirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id in (1, 2):
                cursor = connections['aulagradoa'].cursor()
            elif testvirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id == 3:
                cursor = connections['aulagradob'].cursor()
            else:
                cursor = connections['moodle_db'].cursor()
            query = """SELECT count(notatest.grade)
                    FROM mooc_quiz_grades notatest
                    INNER JOIN mooc_quiz test ON notatest.quiz=test.id
                    WHERE notatest.grade >= 0 AND test.id=%s AND test.course=%s
            """ % (testvirtual.idtestmoodle, testvirtual.silabosemanal.silabo.materia.idcursomoodle)
            cursor.execute(query)
            row = cursor.fetchall()
            if row[0][0] > 0:
                deshabilitar_campo(self, 'titulo')
                deshabilitar_campo(self, 'modeloevaluativo')


class ExamenSilaboSemanalForm(forms.Form):
    modeloevaluativo = forms.ModelChoiceField(label=u"Categoría de calificación", queryset=DetalleModeloEvaluativo.objects.filter(migrarmoodle=True, recurso=True, status=True), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    nombretest = forms.CharField(label=u'Nombre', max_length=100, required=False)
    instruccion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Instrucción", required=True)
    recomendacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Recomendación", required=True)
    fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '30%'}), required=False)
    horadesde = forms.TimeField(label=u"Hora desde", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '70%'}))
    fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '30%'}), required=False)
    horahasta = forms.TimeField(label=u"Hora hasta", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '70%'}))
    vecesintento = forms.ChoiceField(label=u"Veces intentos", choices=VECES_INTENTO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    tiempoduracion = forms.ChoiceField(initial=60, label=u"Tiempo de duración del test(en minutos)", choices=TIEMPO_DURACION, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    navegacion = forms.ChoiceField(label=u"Método Navegación", choices=METODO_NAVEGACION, required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    password = forms.CharField(label=u'Clave', max_length=400, required=False)

    def add(self, horario):
        self.fields['vecesintento'].choices = ((1, '1'),)
        if horario:
            self.fields['fechadesde'].initial = horario.fecha
            self.fields['fechahasta'].initial = horario.fecha
            if horario.horarioexamendetalle_set.filter(status=True).exists():
                detalle = horario.horarioexamendetalle_set.filter(status=True)
                self.fields['horadesde'].initial = detalle[0].horainicio
                self.fields['horahasta'].initial = detalle.latest('id').horafin

    def validar(self, testvirtual):
        if testvirtual.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id == 9:
            cursor = connections['db_moodle_virtual'].cursor()
        elif testvirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id in (1, 2):
            cursor = connections['aulagradoa'].cursor()
        elif testvirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id == 3:
            cursor = connections['aulagradob'].cursor()
        else:
            cursor = connections['moodle_db'].cursor()
        query = """SELECT count(notatest.grade)
                FROM mooc_quiz_grades notatest
                INNER JOIN mooc_quiz test ON notatest.quiz=test.id
                WHERE notatest.grade >= 0 AND test.id=%s AND test.course=%s
        """ % (testvirtual.idtestmoodle, testvirtual.silabosemanal.silabo.materia.idcursomoodle)
        cursor.execute(query)
        row = cursor.fetchall()
        if row[0][0] > 0:
            deshabilitar_campo(self, 'nombretest')
            deshabilitar_campo(self, 'modeloevaluativo')

    def editar_examen(self):
        deshabilitar_campo(self, 'nombretest')
        deshabilitar_campo(self, 'modeloevaluativo')


class TestSilaboSemanalAdmisionForm(forms.Form):
    titulo = forms.CharField(label=u'Titulo', max_length=100, required=False)
    fecha = forms.DateField(label=u"Fecha", required=True, initial=datetime.now().strftime('%d-%m-%Y'),
                            input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                             attrs={'class': 'selectorfecha',
                                                                                    'formwidth': '33.33%'}))
    horainicio = forms.TimeField(label=u"Hora Inicio", required=True, initial=str(datetime.now().time()),
                                 input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                               attrs={'class': 'selectorhora',
                                                                                      'formwidth': '33.33%'}))
    horafin = forms.TimeField(label=u"Hora Fin", required=True, initial=str(datetime.now().time()),
                              input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M',
                                                                            attrs={'class': 'selectorhora',
                                                                                   'formwidth': '33.33%'}))
    descripcion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Descripción", required=False)
    url1 = forms.CharField(label=u'URL1', max_length=100, required=False)
    url2 = forms.CharField(label=u'URL2', max_length=100, required=False)


class GuiaEstudianteSilaboSemanalForm(FormModeloBase):
    archivoguiaestudiante = ExtFileField(label=u'Archivo guía del estudiante', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf, doc, docx', ext_whitelist=(".pdf", ".doc", ".docx", ".xls", ".xlsx", ".zip", ".pdf", ".pptx", ".rar",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=20971520)
    observacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Observación", required=False)

    def cambiar_hep_text(self, formato):
        if formato:
            texto = "Tamaño Maximo permitido 50Mb, en formato"
            for f in formato:
                for ext in f.extension.all():
                    texto += ' {}'.format(ext.nombre)
            self.fields['archivoguiaestudiante'].help_text = texto


class CraiRecursoSilaboSemanalForm(forms.Form):
    observacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Observación", required=False)
    archivooriginal = ExtFileField(label=u'Archivo original', required=False, help_text=u'Tamaño Maximo permitido 50Mb, en formato pdf', ext_whitelist=(".pdf", ".doc", ".docx", ".xls", ".xlsx", ".zip", ".pdf", ".pptx", ".rar",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=50485760)
    archivo_logo = ExtFileField(label=u'Pdf con logo', required=False, help_text=u'Tamaño Maximo permitido 50Mb, en formato .pdf', ext_whitelist=(".pdf", ".doc", ".docx", ".xls", ".xlsx", ".zip", ".pdf", ".pptx", ".rar",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=50485760)
    archivo_sin_logo = ExtFileField(label=u'Word sin logo', required=False, help_text=u'Tamaño Maximo permitido 50Mb, en formato .doc,.docx', ext_whitelist=(".pdf", ".doc", ".docx", ".xls", ".xlsx", ".zip", ".pdf", ".pptx", ".rar",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=50485760)

    def cambiar_hep_text(self, formato):
        if formato:
            texto = "Tamaño Maximo permitido 50Mb, en formato"
            for f in formato:
                for ext in f.extension.all():
                    texto += ' {}'.format(ext.nombre)
            self.fields['archivooriginal'].help_text = texto


class GuiaDocenteSilaboSemanalForm(forms.Form):
    observacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Observación", required=False)
    archivoguiadocente = ExtFileField(label=u'Archivo guía del docente', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato .pdf', ext_whitelist=(".pdf",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=20971520)


class DiapositivaSilaboSemanalForm(FormModeloBase):
    tipomaterial = forms.ChoiceField(label=u"Tipo", choices=TIPO_MATERIALADICIONAL,initial=2,  required=False, widget=forms.Select(attrs={'formwidth': '100%','disabled':'disabled'}))
    nombre = forms.CharField(label=u'Nombre', max_length=250, required=False)
    descripcion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Descripción", required=True)
    url = forms.CharField(label=u'Url', max_length=300, required=False,widget=forms.TextInput(attrs={'placeholder': 'Introduzca la URL aquí (p. ej. recursos de Google Drive)'}))
    archivodiapositiva = ExtFileField(label=u'Archivo presentación', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato doc,docx,xls,xlsx,zip,pdf,ppt,pptx,rar', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".zip", ".pdf", ".ppt", ".pptx", ".rar",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=30000000)

    def cambiar_hep_text(self, formato):
        if formato:
            texto = "Tamaño Maximo permitido 20Mb, en formato"
            for f in formato:
                for ext in f.extension.all():
                    texto += ' {}'.format(ext.nombre)
            self.fields['archivodiapositiva'].help_text = texto

    def sin_tipo(self):
        habilitar_campo(self, 'tipomaterial')

class CompendioSilaboSemanalForm(FormModeloBase):
    archivocompendio = ExtFileField(label=u'Archivo compendio', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf', ext_whitelist=(".pdf", ".doc", ".docx", ".xls", ".xlsx", ".zip", ".pdf", ".pptx", ".rar",), widget=forms.FileInput({'formwidth': '100%', 'class': 'form-control'}), max_upload_size=20971520)
    archivoplagio = ExtFileField(label=u'Informe de similitud', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf', ext_whitelist=(".pdf",), widget=forms.FileInput({'formwidth': '100%', 'class': 'form-control'}), max_upload_size=20971520)
    porcentaje = forms.FloatField(label=u"Porcentaje de similitud", widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'placeholder': '0.00'}))
    descripcion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Observación", required=False)

    def cambiar_hep_text(self, formato):
        if formato:
            texto = "Tamaño Maximo permitido 20Mb, en formato"
            for f in formato:
                for ext in f.extension.all():
                    texto += ' {}'.format(ext.nombre)
            self.fields['archivocompendio'].help_text = texto


class CompendioPlagioForm(forms.Form):
    estado = forms.ModelChoiceField(label=u"Estado", queryset=Estado.objects.filter(pk__in=[2, 3]), required=True, widget=forms.Select(attrs={'formwidth': '50%'}))
    observacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'style': "width: 50%;text-transform: uppercase;"}), label=u"Descripción General (Opcional)", required=False)
    porcentaje = forms.FloatField(label=u"Porcentaje plagio ", initial="0", widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2'}))
    archivo = ExtFileField(label=u'Archivo plagio', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato doc,docx,pdf,zip,rar', ext_whitelist=(".doc", ".docx", ".pdf", ".zip", ".rar",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=20971520)


class ArchivosCraiRecursosForm(forms.Form):
    archivo_logo = ExtFileField(label=u'Pdf con logo', required=False,
                                help_text=u'Tamaño Maximo permitido 50Mb, en formato .pdf',
                                ext_whitelist=(
                                    ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".zip", ".pdf", ".pptx", ".rar",),
                                widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=50485760)
    archivo_sin_logo = ExtFileField(label=u'Word sin logo', required=False,
                                    help_text=u'Tamaño Maximo permitido 50Mb, en formato .doc,.docx',
                                    ext_whitelist=(
                                        ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".zip", ".pdf", ".pptx", ".rar",),
                                    widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=50485760)
    # observacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 50%;text-transform: uppercase;"}),
    #                               label=u"Observación", required=True)
    # estado = forms.ModelChoiceField(label=u"Estado", queryset=Estado.objects.filter(pk__in=[2, 3]), required=True, widget=forms.Select(attrs={'formwidth': '50%'}))


class MaterialAdicionalSemanalForm(FormModeloBase):
    tiporecurso = forms.ChoiceField(label=u"Tipo recurso", choices=[TIPO_RECURSOADICIONAL[0],TIPO_RECURSOADICIONAL[4],TIPO_RECURSOADICIONAL[5],], required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    tipomaterialcomplementario = forms.ChoiceField(label=u"Tipo de material", choices=TIPO_MATERIALCOMPLEMENTARIO, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    tipomaterial = forms.ChoiceField(label=u"Modo de carga", choices=TIPO_MATERIALADICIONAL,initial=2, required=False, widget=forms.Select(attrs={'formwidth': '100%','disabled':'disabled'}))
    nombre = forms.CharField(label=u'Nombre', max_length=250, required=False)
    # descripcion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Descripción", required=True)
    testourl = forms.CharField(label=u'Url', max_length=5000, required=False,widget=forms.TextInput(attrs={'placeholder': 'Introduzca la URL aquí (p. ej. recursos de Google Drive)'}))
    archivomaterial = ExtFileField(label=u'Archivo recurso', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato doc,docx,xls,xlsx,zip,rar,pdf', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".zip", ".rar", ".pdf",), widget=forms.FileInput({'formwidth': '100%', 'style': 'width:100%'}), max_upload_size=20971520)
    isbnodilo = forms.IntegerField(initial=0, required=False, label=u'Recurso Uteca', widget=forms.Select(attrs={'class': 'form-control select2', 'col': '12'}))
    descripcion = forms.CharField(label=u'Descripción', widget=CKEditorUploadingWidget(attrs={'col': '12'}), required=False)

    def con_tipomaterial(self):
        habilitar_campo(self, 'tipomaterial')

class VideoMagistralSilaboSemanalForm(FormModeloBase):
    tipograbacion = forms.ChoiceField(label=u"Tipo grabación", choices=TIPO_GRABACION, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    # tiporecurso = forms.ChoiceField(label=u"Tipo recurso", choices=TIPO_RECURSOADICIONAL, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    # tipomaterial = forms.ChoiceField(label=u"Tipo de material", choices=TIPO_MATERIALADICIONAL, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    # nombre = forms.CharField(label=u'Nombre', max_length=250, required=False)
    testourl = forms.CharField(label=u'Url', max_length=5000, required=False, widget=forms.TextInput(attrs={'placeholder': 'Introduzca la URL aquí (p. ej. recursos de Google Drive)'}))
    archivomaterial = ExtFileField(label=u'Archivo recurso', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato doc,docx,xls,xlsx,zip,rar,pdf', ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".zip", ".rar", ".pdf",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=20971520)
    presentacion_video = ExtFileField(label=u'Presentación video', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato .pdf', ext_whitelist=(".pdf",), widget=forms.FileInput({'formwidth': '100%', 'style': 'width:100%;'}), max_upload_size=20971520)
    descripcion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Observación", required=True)

    def edit(self):
        deshabilitar_campo(self, 'tipograbacion')


class ModificacionTutorForm(forms.Form):
    tutor = forms.IntegerField(initial=0, required=True, label=u'Tutor de tesis', widget=forms.TextInput(attrs={'select2search': 'true'}))

    def modificar(self, tutor):
        self.fields['tutor'].widget.attrs['descripcion'] = tutor.persona
        self.fields['tutor'].initial = tutor.id
        self.fields['tutor'].widget.attrs['value'] = tutor.id


class ConfiguracionTitulacionPosgradoForm(forms.Form):
    periodo = forms.ModelChoiceField(label=u"Período", queryset=Periodo.objects.filter(status=True, tipo__id__in=[3, 4]), required=False, widget=forms.Select())
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.filter(status=True, coordinacion__id=7), required=False, widget=forms.Select())
    fechainiciotutoria = forms.DateField(label=u"Fecha inicio tutoría", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    fechafintutoria = forms.DateField(label=u"Fecha fin tutoría", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    fechainiciopostulacion = forms.DateField(label=u"Fecha inicio postulación para el tutor", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    fechafinpostulacion = forms.DateField(label=u"Fecha fin postulación para el tutor", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    fechainimaestrante = forms.DateField(label=u"Fecha inicio postulación para el maestrante", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    fechafinmaestrante = forms.DateField(label=u"Fecha fin postulación para el maestrante", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    publicado = forms.BooleanField(label=u'Publicado', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    tipocomponente = forms.ChoiceField(label=u"Activar para: ", choices=TIPO_COMPONENTE_PROPUESTA, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))

    def editar(self):
        deshabilitar_campo(self, 'periodo')
        deshabilitar_campo(self, 'carrera')

class ConfiguracionConvocatoriaMecanismoForm(forms.Form):
    mecanismo = forms.ModelChoiceField(label=u"Mecanismo Titulación", queryset=MecanismoTitulacionPosgrado.objects.filter(status= True, activo = True), required=True, widget=forms.Select())
    rubrica =forms.ModelChoiceField(label=u"Rúbrica", queryset=RubricaTitulacionPosgrado.objects.filter(status=True), required=True, widget=forms.Select())


class GrupoTitulacionPostgradoForm(FormModeloBase):
    fecha = forms.DateField(label=u"Fecha", required=True, widget=DateTimeInput({'col': '6'}))
    hora = forms.TimeField(label=u"Hora", input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={ 'col': '6','type': 'time'}))
    tutor = forms.ModelChoiceField(label=u"Tutor", queryset=Profesor.objects.select_related().filter(status=True), required=True, widget=forms.Select({'col': '12',}))
    cupo = forms.IntegerField(label=u'Total Cupos', initial=0, required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'type':'number', 'min':'0','decimal': '0', 'formwidth': '40%'}))
    link_zoom = forms.CharField(max_length=500, label=u"Link de enlace Zoom", widget=forms.TextInput(attrs={'class': 'normal-input'}), required=True)
    link_grabacion = forms.CharField(max_length=500, label=u"Link grabación Zoom", widget=forms.TextInput(attrs={'class': 'normal-input'}), required=False)
    modeloevaluativo = forms.ModelChoiceField(label=u"Modelo evaluativo", queryset=ModeloEvaluativoPosgrado.objects.filter(status= True), required=True, widget=forms.Select())
    paralelo = forms.CharField(max_length=10, label=u"Paralelo", widget=forms.TextInput())
    mencion = forms.ModelChoiceField(label=u'Mención', queryset=ItinerarioMallaEspecilidad.objects.filter(status=True),required=False, widget=forms.Select(attrs={'class': 'imp-100', 'col': '12'}))

class ConfiguracionDescuentoPosgradoForm(forms.Form):
    descripcion = forms.CharField(widget=forms.Textarea({'rows': '1', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Descripción", required=True)
    fechainicio = forms.DateField(label=u"Fecha inicio", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    fechafin = forms.DateField(label=u"Fecha fin", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    porcentaje = forms.IntegerField(label=u'Porcentaje descuento', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '100%'}))
    fecharige = forms.DateField(label=u"Fecha rige", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    fechafinrequisito = forms.DateField(label=u"Fecha Fin Requisitos", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    activo = forms.BooleanField(label=u'Activo', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    archivo = ExtFileField(label=u'Formato', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, doc, docx', ext_whitelist=(".pdf", ".doc", ".docx"), max_upload_size=4194304)


class ConfiguracionRubricaPosgradoForm(forms.Form):
    nombre = forms.CharField(widget=forms.Textarea({'rows': '1', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Nombre", required=True)
    activo = forms.BooleanField(label=u'Activo', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


class DescuentoPosgradoForm(forms.Form):
    nombre = forms.CharField(widget=forms.Textarea({'rows': '1', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Nombre", required=True)
    archivo = ExtFileField(label=u'Archivo', required=False, help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf', ext_whitelist=(".pdf",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=20971520)
    activo = forms.BooleanField(label=u'Activo', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


class RubricaPosgradoForm(forms.Form):
    tiporubrica = forms.ChoiceField(label=u"Tipo rubrica", choices=TIPO_RUBRICA, required=False, widget=forms.Select(attrs={'class': 'imp-25'}))
    rubrica = forms.CharField(widget=forms.Textarea({'rows': '1', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Rubrica", required=True)
    equivalencia = forms.IntegerField(label=u'Equivalencia', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '100%'}))


class NuevaTutoriaForm(forms.Form):
    fecharegistro = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    observacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Observación", required=True)
    archivo = ExtFileField(label=u'Archivo PDF', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=10485760, widget=FileInput({'accept': 'application/pdf'}))

    def editar(self):
        deshabilitar_campo(self, 'fecharegistro')


class ConfiguracionTitulacionPosgradoSublineaForm(forms.Form):
    periodo = forms.ModelChoiceField(label=u"Periodo", queryset=Periodo.objects.filter(status=True, tipo__id__in=[3, 4]), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.filter(status=True, coordinacion__id=7), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))

    def editar(self):
        deshabilitar_campo(self, 'periodo')
        deshabilitar_campo(self, 'carrera')


class ConfiguracionDescuentoPosgradoDetalleForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', required=False, widget=forms.TextInput(attrs={'class': 'imp-75'}))

    def editar(self):
        deshabilitar_campo(self, 'descripcion')


class ConfiguracionPeriodoPosgradoDetalleForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', required=False, widget=forms.TextInput(attrs={'class': 'imp-75'}))

    def editar(self):
        deshabilitar_campo(self, 'descripcion')


class ConfiguracionRequisitoPosgradoDetalleForm(forms.Form):
    requisito = forms.CharField(label=u'Requisito', required=False, widget=forms.TextInput(attrs={'class': 'imp-75'}))
    descripcion = forms.CharField(widget=forms.Textarea({'rows': '3', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Observación", required=False)


class MecanismoTitulacionPosgradoMallaForm(forms.Form):
    malla = forms.ModelChoiceField(label=u"Malla", queryset=Malla.objects.filter(status=True, carrera__niveltitulacion_id=4), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    numerotutorias = forms.IntegerField(label=u'Número Tutorías', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))

    def mecanismo(self):
        deshabilitar_campo(self, 'malla')


class MecanismoTitulacionPosgradoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', required=False, widget=forms.TextInput(attrs={'class': 'imp-75'}))
    activo = forms.BooleanField(label=u'Activo', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    rubricatitulacionposgrado = forms.ModelChoiceField(label=u"Rubrica", queryset=RubricaTitulacionPosgrado.objects.filter(status=True, activo=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))


class IngresarTemaTitulacionPosgradoForm(forms.Form):
    convocatoria = forms.ModelChoiceField(label=u"Convocatoria", queryset=ConfiguracionTitulacionPosgrado.objects.filter(status=True), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    sublinea = forms.ModelChoiceField(label=u"SubLinea", queryset=PropuestaSubLineaInvestigacion.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    mecanismotitulacionposgrado = forms.ModelChoiceField(label=u"Mecanismo Titulación", queryset=MecanismoTitulacionPosgrado.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    pareja = forms.BooleanField(label=u'¿Tiene compañero de titulación?', required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    companero = forms.IntegerField(initial=0, required=True, label=u'Compañero de titulación', widget=forms.TextInput(attrs={'select2search': 'true','class': 'imp-100'}))
    propuestatema = forms.CharField(label=u'Tema', required=False, widget=forms.Textarea)
    variabledependiente = forms.CharField(label=u'Objetivo general', required=False, widget=forms.Textarea)
    variableindependiente = forms.CharField(label=u'Objetivo específico', required=False, widget=forms.Textarea)
    archivo = ExtFileField(label=u'Archivo PDF', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=10485760, widget=FileInput({'accept': 'application/pdf'}))
    moduloreferencia = forms.CharField(label=u'Módulo de referencia', required=False, widget=forms.Textarea)

    def ingresar(self, carrera, malla, periodo):
        hoy = datetime.now().date()
        self.fields['sublinea'].queryset = PropuestaSubLineaInvestigacion.objects.filter(status=True, configuraciontitulacionposgradosublinea__configuraciontitulacionposgrado__periodo=periodo, configuraciontitulacionposgradosublinea__configuraciontitulacionposgrado__carrera=carrera, configuraciontitulacionposgradosublinea__status=True)
        self.fields['mecanismotitulacionposgrado'].queryset = MecanismoTitulacionPosgrado.objects.filter(status=True, mecanismotitulacionposgradomalla__malla=malla, mecanismotitulacionposgradomalla__status=True)
        self.fields['convocatoria'].queryset = ConfiguracionTitulacionPosgrado.objects.filter(status=True, periodo=periodo, carrera=carrera, fechainimaestrante__lte=hoy, fechafinmaestrante__gte=hoy)

    def editar(self, carrera, malla, periodo, convocatoria,pareja):
        self.fields['sublinea'].queryset = PropuestaSubLineaInvestigacion.objects.filter(status=True, configuraciontitulacionposgradosublinea__configuraciontitulacionposgrado__periodo=periodo, configuraciontitulacionposgradosublinea__configuraciontitulacionposgrado__carrera=carrera, configuraciontitulacionposgradosublinea__status=True)
        self.fields['mecanismotitulacionposgrado'].queryset = MecanismoTitulacionPosgrado.objects.filter(status=True, mecanismotitulacionposgradomalla__malla=malla, mecanismotitulacionposgradomalla__status=True)
        self.fields['convocatoria'].queryset = ConfiguracionTitulacionPosgrado.objects.filter(pk=convocatoria, status=True)
        self.fields['pareja'].widget.attrs['checked'] = pareja

class IngresoDescuentoPosgradoForm(forms.Form):
    descuentoposgrado = forms.ModelChoiceField(label=u"Descuento", queryset=DescuentoPosgrado.objects.filter(status=True, activo=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    archivo = ExtFileField(label=u'Archivo PDF (SOLICITUD DE REDUCCIÓN SOBRE EL COSTO DE MAESTRÍA)', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=10485760, widget=FileInput({'accept': 'application/pdf'}))

    def ingresar(self, periodo):
        hoy = datetime.now().date()
        self.fields['descuentoposgrado'].queryset = DescuentoPosgrado.objects.filter(status=True, activo=True, detalleconfiguraciondescuentoposgrado__periododetalleconfiguraciondescuentoposgrado__periodo=periodo, detalleconfiguraciondescuentoposgrado__configuraciondescuentoposgrado__fechainicio__lte=hoy, detalleconfiguraciondescuentoposgrado__configuraciondescuentoposgrado__fechafin__gte=hoy)


class AprobarVideoMagistralForm(forms.Form):    
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño Maximo permitido 500Mb, en formato mp4', ext_whitelist=(".mp4",), max_upload_size=429916160)
    url = forms.CharField(label=u"Url", required=False)
    observacion = forms.CharField(widget=forms.Textarea, label=u'Observación', required=False)


class DatosInstitucionForm(forms.Form):
    nombreinstitucion = forms.CharField(label=u'Nombre completo', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    codigoiess = forms.CharField(label=u"Código de la IES", max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    categoriaies = forms.ModelChoiceField(label=u"Categoría de la IES", queryset=CategoriaIes.objects.filter(status=True), required=False, widget=forms.Select())
    tipofinanciamiento = forms.ModelChoiceField(label=u"Tipo de financiamiento", queryset=TipoFinanciamiento.objects.filter(status=True), required=False, widget=forms.Select())
    siglas = forms.CharField(label=u'Siglas', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    mision = forms.CharField(widget=forms.Textarea({'rows': '3', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Misión", required=False)
    vision = forms.CharField(widget=forms.Textarea({'rows': '3', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Visión", required=False)
    direccion = forms.CharField(widget=forms.Textarea({'rows': '3', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Dirección", required=False)
    rector = forms.ModelChoiceField(label=u"Rector", queryset=Profesor.objects.filter(status=True), required=False, widget=forms.Select())
    extrector = forms.CharField(label=u"Extensión", max_length=10, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    decano = forms.ModelChoiceField(label=u"Decano", queryset=Profesor.objects.filter(status=True), required=False, widget=forms.Select())
    extdecano = forms.CharField(label=u"Extensión", max_length=10, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))

    def editar(self):
        deshabilitar_campo(self, 'nombreinstitucion')
        deshabilitar_campo(self, 'codigoiess')
        deshabilitar_campo(self, 'siglas')
        deshabilitar_campo(self, 'direccion')
        self.fields['rector'].queryset = Profesor.objects.filter(status=True, persona__administrativo__isnull=False, persona__distributivopersona__isnull=False).distinct()
        self.fields['decano'].queryset = Profesor.objects.filter(status=True, persona__administrativo__isnull=False, persona__distributivopersona__isnull=False).distinct()


class DatosGeneralForm(forms.Form):
    tipotramite = forms.ModelChoiceField(label=u"Tipo de trámite/Propuesta", queryset=TipoTramiteRediseno.objects.filter(status=True), required=False, widget=forms.Select())
    codigosniese = forms.CharField(label=u'Código SNIESE de la carrera/ programa a rediseñar', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carrera/Programa a rediseñar', required=False, queryset=CarrerasRediseno.objects.filter(status=True))
    proyectoinnovador = forms.ChoiceField(label=u"Proyecto innovador", choices=VALOR_SI_NO, required=False, widget=forms.Select(attrs={'formwidth': '60%'}))
    tipoformacion = forms.ModelChoiceField(label=u"Tipo de formación", queryset=TipoFormacionRediseno.objects.filter(status=True), required=False, widget=forms.Select())
    modalidad = forms.ModelChoiceField(label=u"Modalidad de estudios/aprendizaje", queryset=Modalidad.objects.filter(status=True), required=False, widget=forms.Select())
    descripcionmodalidad = forms.CharField(widget=forms.Textarea({'rows': '3', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Descripción de la ejecución de la modalidad", required=False)
    proyectored = forms.ChoiceField(label=u"Proyecto en red", choices=VALOR_SI_NO, required=False, widget=forms.Select(attrs={'formwidth': '60%'}))
    integrantes = forms.ModelMultipleChoiceField(label=u'Integrantes de la red', required=False, queryset=InstitucionEducacionSuperior.objects.filter(status=True))
    campoamplio = forms.ModelChoiceField(label=u"Campo amplio", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=False, widget=forms.Select())
    campoespecifico = forms.ModelChoiceField(label=u"Campo específico", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    campodetallado = forms.ModelChoiceField(label=u"Campo detallado", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=False, widget=forms.Select())
    carreraprogramama = forms.CharField(label=u'Carrera/Programa', max_length=200, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    titulacion = forms.CharField(label=u'Titulación', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    numeroperiodosordinario = forms.IntegerField(label=u'Número de períodos académicos ordinarios', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%', 'separator': 'true'}))
    numerosemanaordinario = forms.IntegerField(label=u'Número de semanas por periodo académico  ', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    numeroperiodosextraordinario = forms.IntegerField(label=u'Número de períodos extraordinarios', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    numerosemanaextraordinario = forms.IntegerField(label=u'Número de semanas de períodos extraordinarios', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    numeroestudiante = forms.IntegerField(label=u'Número de estudiantes por cohorte', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%', 'separator': 'true'}))
    mencionitinerario = forms.ChoiceField(label=u"Con mención en/Itinerario", choices=VALOR_SI_NO, required=False, widget=forms.Select(attrs={'formwidth': '60%'}))
    estructurainstitucional = forms.CharField(label=u'Estructura institucional', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50', 'separator': 'true'}))
    numeroresolucion = forms.CharField(label=u'Ley de creación de la IES/Resolución CACES/CES para funcionamiento (Número de Resolución)', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    nombredirector = forms.ModelChoiceField(label=u"Nombre del Director, Responsable o Encargado de la sede matriz/ sede/ extensión/centro de apoyo", queryset=Profesor.objects.filter(status=True), required=False, widget=forms.Select())
    emailinstitucional = forms.CharField(label=u'Email institucional', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    emailreferencia = forms.CharField(label=u'Email de referencia', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    telefonoinstitucional = forms.CharField(label=u'Número telefónico institucional', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))

    def editar(self):
        self.fields['nombredirector'].queryset = Profesor.objects.filter(status=True, persona__administrativo__isnull=False, persona__distributivopersona__isnull=False).distinct()


class DatosInvestigacionForm(forms.Form):
    investigacion = forms.CharField(label=u'Investigación', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))


class DatosComponenteForm(forms.Form):
    componentevinculacion = forms.CharField(label=u'Componente de vinculación con la sociedad ', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    modelopracticas = forms.CharField(label=u'Modelo de prácticas preprofesionales de la carrera o prácticas profesionales del programa', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))


class DatosInfraestructuraForm(forms.Form):
    plataformatecnologica = forms.CharField(label=u'Describa la plataforma tecnológica integral de infraestructura e infoestructura', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    estructurainstitucionallaboratorio = forms.CharField(label=u'Estructura institucional', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    numerotitulos = forms.CharField(label=u'Número de títulos', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    titulos = forms.CharField(label=u'Títulos', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    numerovolumen = forms.CharField(label=u'Número de volúmenes', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    volumen = forms.CharField(label=u'Volúmenes', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    numerobasedatos = forms.CharField(label=u'Número de base de datos', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    basedatos = forms.CharField(label=u'Base de datos', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    numerosuscripcion = forms.CharField(label=u'Número de suscripciones', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    suscripcion = forms.CharField(label=u'Suscripciones a revistas', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    estructurainstitucionalaula = forms.CharField(label=u'Estructura institucional', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    numeroaula = forms.CharField(label=u'Número de aulas', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    numeropuesto = forms.CharField(label=u'Número de puestos de trabajo por aula', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    perfilprofesionaldirector = forms.CharField(label=u'Perfil profesional ', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    cargo = forms.CharField(label=u'Cargo / función', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    horasdedicacion = forms.CharField(label=u'Horas de dedicación a la semana a la IES', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    tiporelacion = forms.CharField(label=u'Tipo de relación laboral o vinculación a la IES', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))


class DatosSustantivaForm(forms.Form):
    objetivogeneral = forms.CharField(label=u'Objetivo general', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    objetivoespecifico = forms.CharField(label=u'Objetivos específicos ', max_length=150, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    perfilingreso = forms.CharField(label=u'Perfil de ingreso', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    aprendizajecompetencia = forms.CharField(label=u'¿Qué resultados de aprendizaje y competencias profesionales son necesarias para el futuro desempeño profesional?', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2', 'separator2': True}))
    aprendizajemetodo = forms.CharField(label=u'¿Qué resultados de aprendizaje relacionados con el manejo de métodos, metodologías, modelos, protocolos, procesos y procedimientos de carácter profesional e investigativo se garantizarán en la implementación de la carrera/programa?', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2', 'separator2': True}))
    mejoramientocalidad = forms.CharField(label=u'¿Cómo contribuye el futuro profesional al mejoramiento de la calidad de vida, el medio ambiente, el desarrollo productivo y la preservación, difusión y enriquecimiento de las culturas y saberes?', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2', 'separator2': True}))
    valoresprincipios = forms.CharField(label=u'¿Cuáles son los valores y los principios, en el marco de un enfoque de derechos, igualdad e interculturalidad, pensamiento universal, crítico y creativo, que se promoverán en la formación profesional que ofrece la carrera/programa?', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2', 'separator2': True}))
    perfilprofesional = forms.CharField(label=u'Perfil Profesional ', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2', 'separator2': True}))
    requisitotitulacion = forms.CharField(label=u'Requisitos de titulación', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    opcionesaprobacion = forms.ModelMultipleChoiceField(label=u'Opciones Aprobacion', queryset=OpcionesAprobacion.objects.filter(status=True), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '94%'}))
    descripcionopciones = forms.CharField(label=u'Breve descripción de las opciones de la unidad de integración curricular / unidad de titulación (¿Qué?, ¿Cómo? y duración)', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    pertinencias = forms.CharField(label=u'Pertinencia', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    objetoestudio = forms.CharField(label=u'Objeto de estudio del proyecto', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    metodologia = forms.CharField(label=u'Metodología y ambientes de aprendizaje', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))


class ComponentesForm(forms.Form):
    componentesrediseno = forms.ModelChoiceField(label=u"Componentes", queryset=ComponentesRediseno.objects.filter(status=True), required=False, widget=forms.Select())
    horas = forms.IntegerField(label=u'Horas', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    creditos = forms.IntegerField(label=u'Créditos', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))

    def add(self, ids):
        self.fields['componentesrediseno'].queryset = ComponentesRediseno.objects.filter(status=True).exclude(pk__in=ids).distinct()


class LaboratoriosForm(forms.Form):
    estructura = forms.CharField(label=u'Estructura institucional', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    nombrelaboratorio = forms.CharField(label=u'Nombre del laboratorio o taller', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    equipamientolaboratorio = forms.CharField(label=u'Equipamiento del laboratorio o taller', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    metroscuadrado = forms.CharField(label=u'Metros cuadrados del laboratorio o taller', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    puestotrabajo = forms.CharField(label=u'Puestos de trabajo del laboratorio o taller', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))


class PersonalForm(forms.Form):
    perfildocente = forms.CharField(label=u'Perfil docente', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    asignatura = forms.ModelChoiceField(label=u"Asignatura a impartir", queryset=MicrocurricularRedisenoCarrera.objects.filter(status=True), required=False, widget=forms.Select())
    horadedicacion = forms.ModelChoiceField(label=u"Horas de dedicación a la IES", queryset=TiempoDedicacionDocente.objects.filter(status=True), required=False, widget=forms.Select())
    horadedicacionsemanal = forms.CharField(label=u'Horas de dedicación semanal a la carrera/ programa', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    tiempodedicacion = forms.CharField(label=u'Tiempo de dedicación al carrera/ programa', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    tipopersonal = forms.ModelChoiceField(label=u"Tipo de personal académico/Categoría del docente", queryset=CategorizacionDocente.objects.filter(status=True), required=False, widget=forms.Select())

    def add(self, r, ids):
        self.fields['asignatura'].queryset = MicrocurricularRedisenoCarrera.objects.filter(status=True, redisenocarrera=r).exclude(pk__in=ids).distinct()


class RequisitoIngresoForm(forms.Form):
    requisitoingreso = forms.CharField(label=u'Requisito ingreso', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))


class ContenidoForm(forms.Form):
    numero = forms.IntegerField(label=u'Nro', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    contenido = forms.CharField(label=u'Contenidos mínimos', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    resultado = forms.CharField(label=u'Resultados de Aprendizaje', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))


class ComponenteForm(forms.Form):
    componente = forms.ModelChoiceField(label=u"Componente", queryset=Componente.objects.filter(status=True), required=False, widget=forms.Select())
    horas = forms.IntegerField(label=u'Horas', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    creditos = forms.IntegerField(label=u'Créditos', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))

    def add(self, ids):
        self.fields['componente'].queryset = Componente.objects.filter(status=True).exclude(pk__in=ids).distinct()


class MicrocurricularForm(forms.Form):
    numero = forms.IntegerField(label=u'Nro', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    asignatura = forms.CharField(label=u'Nombre de la asignatura', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    periodo = forms.ModelChoiceField(label=u"Periodo Académico (Nivel)", queryset=Periodo.objects.filter(status=True), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    itinerario = forms.CharField(label=u'Nombre del Itinerario/Mención', max_length=500, required=False, widget=forms.Textarea(attrs={'rows': '2'}))
    unidadorganizacion = forms.ModelChoiceField(label=u"Unidad de organización curricular", queryset=UnidadOrganizacion.objects.filter(status=True), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))


class ConvenioForm(forms.Form):
    convenio = forms.ModelChoiceField(label=u"Convenio", queryset=ConvenioEmpresa.objects.filter(status=True), required=False, widget=forms.Select())

    def add(self, ids):
        self.fields['convenio'].queryset = ConvenioEmpresa.objects.filter(status=True).exclude(pk__in=ids).distinct()


class ItinerariosForm(forms.Form):
    itinerario = forms.CharField(label=u'Itinerario', widget=forms.Textarea(attrs={'rows': '2'}), required=False)
    nivelmalla = forms.ModelChoiceField(label=u"Nivel", queryset=NivelMalla.objects.filter(status=True), required=False, widget=forms.Select())

    def add(self, ids):
        self.fields['nivelmalla'].queryset = NivelMalla.objects.filter(status=True).exclude(pk__in=ids).distinct()


class SolicitudDevolucionForm(forms.Form):
    motivo = forms.CharField(label=u'Motivo', widget=forms.Textarea(attrs={'rows': '3', 'separator2': True, 'separatortitle': 'Datos de la Solicitud'}), required=False)
    monto = forms.FloatField(label=u'Monto Depositado $', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2'}))
    archivopago = ExtFileField(label=u'Comprobante de Depósito', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivocedula = ExtFileField(label=u'Cédula Solicitante', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    banco = forms.ModelChoiceField(label=u"Banco", queryset=Banco.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'class': 'imp-100', 'formwidth': '100%', 'separator2': True, 'separatortitle': 'Datos de la Cuenta Bancaria (ACTIVA)'}))
    numerocuenta = forms.CharField(label=u"N° Cuenta", max_length=15, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '50%'}))
    tipocuenta = forms.ModelChoiceField(label=u"Tipo", queryset=TipoCuentaBanco.objects.filter(status=True).order_by('id'), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    archivocertificado = ExtFileField(label=u'Certificado Cuenta Bancaria', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)


class SolicitudTutorForm(forms.Form):
    tipo = forms.ChoiceField(choices=TIPO_SOLICITUD, label=u'Tipo', required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivo = ExtFileField(label=u'Archivo solicitud', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg', ext_whitelist=(".pdf", ".jpg", ".jpeg",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))


class SolicitudTutorMateriaForm(forms.Form):
    materia = ModelChoiceField(label=u'Materia', queryset=Materia.objects.filter(status=True), required=False,widget=forms.Select(attrs={'formwidth': '100%', 'col': '12'}))
    profesor = ModelChoiceField(label=u'Profesor', queryset=Profesor.objects.filter(id=None), required=False, widget=forms.Select(attrs={'formwidth': '100%', 'col': '6'}))
    tipo = forms.ChoiceField(choices=((2, u"ACADÉMICA"), ), label=u'Tipo', required=False,  widget=forms.Select(attrs={'formwidth': '100%', 'col': '6', 'readonly': True}))
    descripcion = forms.CharField(label=u'Descripcion de la solicitud', widget=forms.Textarea(attrs={'rows': '3', 'col': '12'}), required=False)
    archivo = ExtFileField(label=u'Archivo solicitud (Opcional)', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg",), max_upload_size=4194304,
                           widget=FileInput({'accept': 'application/pdf, image/jpeg, image/jpg','col': '12', 'class': 'dropify'}))
                           # widget=forms.FileInput(attrs={'formwidth': '100%', 'col': '12', 'class': 'dropify'}))
    #  widget=FileInput({'accept': 'application/pdf, image/jpeg, image/jpg, image/png', 'class': 'dropify'}))

    def iniciar(self, periodo, matricula):
        self.fields['materia'].queryset = Materia.objects.filter(status=True, id__in=MateriaAsignada.objects.values_list('materia_id').filter(
            matricula=matricula,
            materia__nivel__periodo=periodo,
            retiramateria=False,
        ).distinct(), profesormateria__tipoprofesor_id__in=[16, 8]).exclude(asignaturamalla__malla_id__in=[353, 22])

    def editar(self, periodo, matricula, solicitud):
        self.fields['materia'].queryset = Materia.objects.filter(status=True, id__in=MateriaAsignada.objects.values_list('materia_id').filter(matricula=matricula,
                                                                                                                                 materia__nivel__periodo=periodo,
                                                                                                                                 retiramateria=False).distinct(),  profesormateria__tipoprofesor_id__in=[16, 8]).exclude(asignaturamalla__malla_id__in=[353, 22])
        self.fields['profesor'].queryset = Profesor.objects.filter(id=solicitud.profesor.id)
        if solicitud.archivo:
            self.fields['archivo'].widget.attrs['data-default-file'] = solicitud.archivo.url


class SolicitudBalconForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivo = ExtFileField(label=u'Archivo solicitud', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg', ext_whitelist=(".pdf", ".jpg", ".jpeg",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))


class SolicitudTutorRespuestaForm(forms.Form):
    tipo = forms.ChoiceField(choices=TIPO_SOLICITUD, label=u'Tipo', required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    respuesta = forms.CharField(label=u'Respuesta', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivo = ExtFileField(label=u'Archivo respuesta', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg', ext_whitelist=(".pdf", ".jpg", ".jpeg",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))

    def respuestas(self):
        deshabilitar_campo(self, 'tipo')
        deshabilitar_campo(self, 'descripcion')


class SolicitudTutorVerRespuestaForm(forms.Form):
    tipo = forms.ChoiceField(choices=TIPO_SOLICITUD, label=u'Tipo', required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    descripcion = forms.CharField(label=u'Solicitud estudiante', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    respuesta = forms.CharField(label=u'Respuesta Tutor', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    atendida = forms.ChoiceField(choices=RESPUESTAS_SI_NO, label=u'¿Su solicitud fue atendida?', required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    respuestaestudiante = forms.CharField(label=u'Respuesta Estudiante', widget=forms.Textarea(attrs={'rows': '3'}), required=False)

    def respuestas(self):
        deshabilitar_campo(self, 'tipo')
        deshabilitar_campo(self, 'descripcion')
        deshabilitar_campo(self, 'respuesta')


class SolicitudTutorObservacionForm(forms.Form):
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class SolicitudComentariosForm(forms.Form):
    observacion = forms.CharField(label=u'Comentario', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class CapEventoPeriodoFirmasForm(forms.Form):
    from sagest.models import DenominacionPuesto
    personafirma = forms.IntegerField(initial=0, required=False, label=u'Persona firma', widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipofirmaevento = forms.ChoiceField(choices=TIPOFIRMA_EVENTO, label=u'Tipo firma', required=False, widget=forms.Select(attrs={'formwidth': '40%'}))
    cargo = forms.ModelChoiceField(label=u"Cargo Persona", queryset=DenominacionPuesto.objects.filter(status=True), required=False, widget=forms.Select())

    # firma = ExtFileField(label=u'Archivo Firma', required=False, help_text=u'Tamaño Maximo permitido 6Mb, en formato  png', ext_whitelist=(".png",),max_upload_size=6291456)

    def editar(self, listafirmas):
        listas = listafirmas.values_list('tipofirmaevento', flat=True)
        res = [tup for tup in TIPOFIRMA_EVENTO if not any(i in tup for i in listas)]
        self.fields['tipofirmaevento'].queryset = res


class ArticuloSilaboSemanalForm(forms.Form):
    articulo = forms.IntegerField(initial=0, required=False, label=u'Articulo', widget=forms.TextInput(attrs={'select2search': 'true', 'formwidth': '90%'}))


class TareaPracticaSilaboSemanalForm(forms.Form):
    calificar = forms.BooleanField(label=u'Calificar trabajo práctico', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '25%'}))
    modeloevaluativo = forms.ModelChoiceField(label=u"Categoría de calificación", queryset=DetalleModeloEvaluativo.objects.filter(alternativa_id__in=[14, 147], migrarmoodle=True, recurso=True, status=True), required=False, widget=forms.Select(attrs={'formwidth': '75%'}))
    nombre = forms.CharField(label=u'Nombre', max_length=500, required=False)
    detalle = forms.CharField(label=u'Detalle', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivotareapracticasilabo = ExtFileField(label=u'Archivo de guía práctica', required=False, help_text=u'Tamaño Maximo permitido 30Mb, en formato pdf', ext_whitelist=(".pdf",), widget=forms.FileInput({'formwidth': '100%'}), max_upload_size=30000000)
    # rubrica = forms.CharField(label=u'Rúbrica', widget=CKEditorUploadingWidget(), required=False)
    fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%', 'titulo': u'Fecha de disponibilidad del estudiante'}), required=False)
    fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    rubricamoodle = forms.ModelChoiceField(label=u'Rubrica Moodle', queryset=RubricaMoodle.objects.filter(status=True, estado=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'fieldbuttons': [{'id': 'add_revista', 'tooltiptext': 'Ver detalle Rubrica', 'btnclasscolor': 'btn-success', 'btnfaicon': 'fa-eye'}, {'id': 'id_crear_rubrica', 'tooltiptext': 'Crear rubrica', 'btnclasscolor': 'btn-warning', 'btnfaicon': 'fa-link'}]}))
    word = forms.BooleanField(label=u'Word', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'titulo': u'Formato de archivos permitidos al estudiante para entregar la actividad'}))
    pdf = forms.BooleanField(label=u'Pdf', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    excel = forms.BooleanField(label=u'Excel', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    powerpoint = forms.BooleanField(label=u'Power point', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))
    todos = forms.BooleanField(label=u'Todos', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))

    def add(self, tipo, carrera, profesor, tareavirtual=None):
        p = None
        r = None
        if RubricaMoodle.objects.filter(status=True, profesor=profesor, estado=True, tipotarea=tipo):
            p = RubricaMoodle.objects.filter(status=True, profesor=profesor, estado=True, tipotarea=tipo).distinct()
        c = CarreraRubricaMoodle.objects.filter(carrera=carrera, status=True, rubrica__tipotarea=tipo)
        if c:
            idrubricas = c.values_list('rubrica__id', flat=True).all()
            r = RubricaMoodle.objects.filter(pk__in=idrubricas, status=True, estado=True, tipotarea=tipo).distinct()
        else:
            r = RubricaMoodle.objects.filter(status=True, estado=True, tipotarea=tipo, carrerarubricamoodle__isnull=True).distinct()

        if p:
            if r:
                self.fields['rubricamoodle'].queryset = p.union(r)
            else:
                self.fields['rubricamoodle'].queryset = p
        else:
            self.fields['rubricamoodle'].queryset = r

        if tareavirtual:
            if tareavirtual.idtareapracticamoodle > 0 and tareavirtual.silabosemanal.silabo.materia.idcursomoodle > 0:
                coordinacion_id = tareavirtual.silabosemanal.silabo.materia.asignaturamalla.malla.carrera.coordinacion_carrera().id
                if coordinacion_id == 9:
                    cursor = connections['db_moodle_virtual'].cursor()
                elif coordinacion_id == 7:
                    cursor = connections['moodle_pos'].cursor()
                elif tareavirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id in (1, 2):
                    cursor = connections['aulagradoa'].cursor()
                elif tareavirtual.silabosemanal.silabo.materia.asignaturamalla.malla.modalidad_id == 3:
                    cursor = connections['aulagradob'].cursor()
                else:
                    cursor = connections['moodle_db'].cursor()
                query = """SELECT count(grades.grade )
                            FROM mooc_assign_grades grades 
                            INNER JOIN mooc_assign assign ON assign.id=grades.ASSIGNMENT 
                            INNER JOIN mooc_course_modules cm ON cm.instance=assign.id AND cm.course=assign.course
                            WHERE cm.id=%s AND grades.grade >= 0 AND cm.course=%s 
                """ % (tareavirtual.idtareapracticamoodle, tareavirtual.silabosemanal.silabo.materia.idcursomoodle)
                cursor.execute(query)
                row = cursor.fetchall()
                if row[0][0] > 0:
                    deshabilitar_campo(self, 'nombre')
                    deshabilitar_campo(self, 'modeloevaluativo')
                    deshabilitar_campo(self, 'rubricamoodle')


class RubricaForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=250, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    tipotarea = forms.ChoiceField(label=u"Tipo Tarea", choices=TIPOS_TAREA, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    carreras = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.filter(status=True), required=False)
    estado = forms.BooleanField(initial=True, label=u"Activa", required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))

    def add(self, periodo):
        self.fields['carreras'].queryset = Carrera.objects.filter(status=True, malla__asignaturamalla__materia__nivel__periodo=periodo, malla__asignaturamalla__materia__status=True).distinct()


class RubricaProfesorForm(forms.Form):
    # carrera = forms.ModelChoiceField(label=u'Carrera', queryset=Carrera.objects.filter(status=True), required=False)
    tipotarea = forms.ChoiceField(label=u"Tipo Tarea", choices=TIPOS_TAREA, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))

    # estado = forms.BooleanField(initial=True, label=u"Activa", required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%'}))

    def add(self, periodo, profesor):
        self.fields['carrera'].queryset = Carrera.objects.filter(status=True, malla__asignaturamalla__materia__nivel__periodo=periodo, malla__asignaturamalla__materia__status=True, malla__asignaturamalla__materia__profesormateria__profesor=profesor).distinct()


class CriterioRubricaForm(forms.Form):
    item = forms.CharField(label=u"Criterio", max_length=250, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    orden = forms.IntegerField(label=u'Orden', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))


class DetalleCriterioRubricaForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripcion', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    valor = forms.DecimalField(initial='0.00', label=u'Valor', required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'formwidth': '50%'}))
    orden = forms.IntegerField(label=u'Orden', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))


class ActividadConvalidacionForm(forms.Form):
    titulo = forms.CharField(label=u'Título', widget=forms.Textarea(attrs={'rows': '3', 'separator2': True, 'separatortitle': 'Datos de la Actividad ExtraCurricular'}), required=False)
    tipoactividad = forms.ChoiceField(label=u"Tipo", choices=TIPO_ACTIVIDAD_CONVALIDACION, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fechafin = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    horas = forms.IntegerField(label=u'Horas Actividad', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '33%'}))
    profesor = forms.ModelChoiceField(label=u"Profesor", queryset=Profesor.objects.filter(status=True, activo=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    carrera = forms.ModelChoiceField(label=u'Carrera', queryset=Carrera.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    carreramultiple = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.filter(status=True), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))
    itinerario = forms.ModelChoiceField(label=u"Itinerario", queryset=ItinerariosMalla.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    nivelminimo = forms.ModelChoiceField(label=u"Nivel Mínimo", queryset=NivelMalla.objects.filter(status=True).order_by('orden'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    inicioinscripcion = forms.DateField(label=u"Fecha Inicio Inscripción", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fininscripcion = forms.DateField(label=u"Fecha Fin Inscripción", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    cupo = forms.IntegerField(label=u'Total Cupos', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '33%'}))
    archivoresolucion = ExtFileField(label=u'Resolución Consejo Directivo', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivoproyecto = ExtFileField(label=u'Proyecto Actividad ExraCurricular', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))

    def adicionar(self):
        self.fields['itinerario'].queryset = ItinerariosMalla.objects.none()

    def editar(self, malla):
        self.fields['itinerario'].queryset = ItinerariosMalla.objects.filter(status=True, malla=malla)

    def profesores_director(self, profesores):
        self.fields['profesor'].queryset = profesores

    def carreras_director(self, carreras):
        self.fields['carrera'].queryset = carreras


class ActividadConvalidacionVoluntariadoForm(forms.Form):
    titulo = forms.CharField(label=u'Título', widget=forms.Textarea(attrs={'rows': '3', 'separator2': True, 'separatortitle': 'Datos de la Actividad ExtraCurricular'}), required=False)
    tipoactividad = forms.ChoiceField(label=u"Tipo", choices=TIPO_ACTIVIDAD_CONVALIDACION, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fechafin = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    horas = forms.IntegerField(label=u'Horas Actividad', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '33%'}))
    profesor = forms.ModelChoiceField(label=u"Profesor", queryset=Profesor.objects.filter(status=True, activo=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    carrera = forms.ModelChoiceField(label=u'Carrera', queryset=Carrera.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    carreramultiple = forms.ModelMultipleChoiceField(label=u'Carreras', queryset=Carrera.objects.filter(status=True), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))
    itinerario = forms.ModelChoiceField(label=u"Itinerario", queryset=ItinerariosMalla.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    nivelminimo = forms.ModelChoiceField(label=u"Nivel Mínimo", queryset=NivelMalla.objects.filter(status=True).order_by('orden'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    inicioinscripcion = forms.DateField(label=u"Fecha Inicio Inscripción", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    fininscripcion = forms.DateField(label=u"Fecha Fin Inscripción", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33%'}))
    cupo = forms.IntegerField(label=u'Total Cupos', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '33%'}))
    archivoresolucion = ExtFileField(label=u'Resolución de OCAS/CGA', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivoproyecto = ExtFileField(label=u'Proyecto Actividad ExraCurricular', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    # voluntariado = forms.BooleanField(initial=True, label=u' ', required=False, widget=forms.HiddenInput())
    voluntariado = forms.BooleanField(initial=False, label=u'¿Es de voluntariado?', required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '6'}))

    def profesores_director(self, profesores):
        self.fields['profesor'].queryset = profesores

    def carreras_director(self, carreras):
        self.fields['carrera'].queryset = carreras


class AsignacionProfesorActividadForm(forms.Form):
    carrera = ModelChoiceField(label=u'Carrera', queryset=Carrera.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    profesor = forms.ModelChoiceField(label=u"Profesor", queryset=Profesor.objects.filter(pk=0), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))

    def carreras_director(self, carreras):
        self.fields['carrera'].queryset = carreras


class RequisitoActividadConvalidacionForm(forms.Form):
    flimite = forms.DateField(label=u"Fecha Máxima Subida", input_formats=['%d-%m-%Y'], required=True, widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    titulo = forms.CharField(label=u'Nombre', max_length=1500, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    leyenda = forms.CharField(label=u'Leyenda', widget=forms.Textarea(attrs={'rows': '3', 'class': 'normal-input'}), required=False)
    formato = ExtFileField(label=u'Archivo Solicitud', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png, docx',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png", ".docx"), max_upload_size=8194304,
                           widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg docx'}))


class EliminarInscripcionActividadForm(forms.Form):
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class InformeProyectoVinculacionForm(forms.Form):
    flimite = forms.DateField(label=u"Fecha Máxima Subida", input_formats=['%d-%m-%Y'], required=True,
                              widget=DateTimeInput(format='%d-%m-%Y',
                                                   attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    nombre = forms.CharField(label=u'Nombre', max_length=1500, required=True,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3', 'class': 'normal-input'}),
                                  required=False)
    formato = ExtFileField(label=u'Formato', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png, docx',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png", ".docx"), max_upload_size=8194304,
                           widget=forms.FileInput(
                               attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg docx'}))


class InformeProyectoVinculacionFechaForm(forms.Form):
    flimite = forms.DateField(label=u"Fecha Máxima Subida", input_formats=['%d-%m-%Y'], required=True,
                              widget=DateTimeInput(format='%d-%m-%Y',
                                                   attrs={'class': 'selectorfecha', 'formwidth': '50%'}))


class InformeProyectoVinculacionEstudianteForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png, docx',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png", ".docx"), max_upload_size=8194304,
                           widget=forms.FileInput(
                               attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg docx'}))


class HabilitacionRegistroHorasVinculacionForm(forms.Form):
    fechadesde = forms.DateField(label=u"Fecha Desde", input_formats=['%d-%m-%Y'], required=True,
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechahasta = forms.DateField(label=u"Fecha Hasta", input_formats=['%d-%m-%Y'], required=True,
                                 widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    formato = ExtFileField(label=u'Formato', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png, docx',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png", ".docx"), max_upload_size=8194304,
                           widget=forms.FileInput(
                               attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg docx'}))

class InscripcionManualProyectoVinculacionForm(forms.Form):
    persona = forms.ModelChoiceField(label=u"Persona", queryset=Persona.objects.select_related().filter(status=True).order_by('apellido1'), required=True, widget=forms.Select())



class LineamientoRecursoPeriodoForm(forms.Form):
    tipoprofesor = forms.ModelChoiceField(label=u"Tipo Profesor", queryset=TipoProfesor.objects.filter(status=True), required=True)
    tiporecurso = forms.ChoiceField(label=u"Tipo Recurso", choices=TIPO_RECURSOSILABO, required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    cantidad = forms.IntegerField(label=u'Cantidad', initial=0, required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    nivelacion = forms.BooleanField(label=u"Aplica para nivelación", required=False)
    aplicapara = forms.ChoiceField(label=u"Aplica para: ", choices=TIPOSILABOCOMPONENTE, required=True, widget=forms.Select(attrs={'formwidth': '100%'}))


class UnidadesPeriodoForm(forms.Form):
    descripcion = forms.CharField(max_length=100, label=u"Nombre unidad", widget=forms.TextInput(attrs={'class': 'imp-100'}))
    tipoprofesor = forms.ModelChoiceField(label=u"Tipo Profesor", queryset=TipoProfesor.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    fechainicio = forms.DateField(label=u"Fecha de Inicio", required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechafin = forms.DateField(label=u"Fecha Fin", required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    orden = forms.IntegerField(label=u"Numero unidad", required=False, initial=0, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    nivelacion = forms.BooleanField(label=u"Aplica para nivelación", required=False)


class LlamadaRealizadaForm(FormModeloBase):
    fecha = forms.DateField(label=u"Fecha", required=False, widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha form-control', 'col': '6'}))
    hora = forms.TimeField(label=u"Hora", input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'col': '6', 'class': 'form-control selectorfecha'}))
    minutos = forms.IntegerField(label=u"Minutos llamada", required=False, initial=0, widget=forms.TextInput(attrs={'class': 'imp-numbersmall form-control', 'col': '6', 'decimal': '0'}))
    descripcion = forms.CharField(label=u"Respuestas del estudiante", widget=forms.Textarea(attrs={'rows': '5'}), required=False)


class RespuestaRecibidaForm(FormModeloBase):
    fecha = forms.DateField(label=u"Fecha", required=False,  widget=DateTimeInput(format='%d-%m-%Y', attrs={'col': '6', 'class': 'selectorfecha form-control'}))
    hora = forms.TimeField(label=u"Hora", input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'col': '6', 'class': 'selectorhora form-control'}))
    tipo = forms.ChoiceField(label=u"Tipo", choices=TIPO_RESPUESTA, required=False, widget=forms.Select(attrs={'col': '12'}))
    # descripcion = forms.CharField(label=u"Respuestas del estudiante", widget=forms.Textarea(attrs={'rows': '5'}),required=False)
    descripcion = forms.CharField(label=u'Respuestas del estudiante', widget=CKEditorUploadingWidget(), required=False)


class FechaExamenesForm(forms.Form):
    # tipogrupo = forms.ChoiceField(label=u"Jornada", choices=TIPO_GRUPOS, required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    fecha = forms.DateField(label=u"Fecha", required=False, input_formats=['%d-%m-%Y'], initial=str(datetime.now().date().strftime('%d-%m-%Y')), widget=DateTimeInput(format='%d-%m-%Y', attrs={'formwidth': '40%', 'class': 'selectorfechaingresar selectorfecha', 'style': 'width:90%', 'autocomplete': 'off'}))
    horainicio = forms.TimeField(label=u"Hora Desde:", required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '20%'}))
    horafin = forms.TimeField(label=u'Hora Hasta:', required=False, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '20%'}))
    aula = forms.ModelChoiceField(queryset=Aula.objects.filter(status=True), label=u"Aula",
                                    widget=forms.Select(attrs={'formwidth': '50%','style': 'width:90%'}))
    tiporesponsable = forms.ChoiceField(label=u'Tipo ', choices=TIPO_RESPONSABLE_HORARIO_EXAMEN, required=False,
                                        widget=forms.Select(attrs={'formwidth': '50%', 'style': 'width:90%'}))
    responsable = forms.ModelChoiceField(queryset=ProfesorMateria.objects.none(), label=u"Responsable",
                                    widget=forms.Select(attrs={'formwidth': '50%','style': 'width:90%'}))


class TiposSolicitudesForm(forms.Form):
    tipo = forms.ChoiceField(label=u"Tipo", choices=TIPO_SOLICITUDES, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    descripcion = forms.CharField(label=u"Solicitud", widget=forms.Textarea(attrs={'rows': '5'}), required=False)

    def edit(self):
        deshabilitar_campo(self, 'tipo')


class TiposInformacionForm(forms.Form):
    tipo = forms.ChoiceField(label=u"Tipo", choices=TIPO_INFORMACION, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    descripcion = forms.CharField(label=u"Descripción", widget=forms.Textarea(attrs={'rows': '5'}), required=False)
    informacion = forms.CharField(label=u"Información", widget=forms.Textarea(attrs={'rows': '5'}), required=False)
    archivo = ExtFileField(label=u'Adjuntar archivo', required=False, help_text=u'Adjunte un archivo. Tamaño Maximo permitido 3Mb, en formato pdf, jpg, jpeg', ext_whitelist=(".pdf", ".jpg", ".jpeg",), max_upload_size=3145728)

    def edit(self):
        deshabilitar_campo(self, 'tipo')


class DocentePlanificarForm(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor', widget=forms.TextInput(attrs={'select2search': 'true'}))
    dedicacion = forms.ModelChoiceField(label=u'Tiempo de Dedicación', queryset=TiempoDedicacionDocente.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    tipo = forms.ModelChoiceField(label=u"Tipo", queryset=ProfesorTipo.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    horaminima = forms.IntegerField(label=mark_safe(u"<strong>Horas mínima</strong>"), initial=0, widget=forms.TextInput(attrs={'class': 'imp-number', 'formwidth': '100%'}))
    horamaxima = forms.IntegerField(label=mark_safe(u"<strong>Horas máxima</strong>"), initial=0, widget=forms.TextInput(attrs={'class': 'imp-number', 'formwidth': '100%'}))
    horamaximaasignatura = forms.IntegerField(label=mark_safe(u"<strong>Horas máxima asignatura</strong>"), initial=0, widget=forms.TextInput(attrs={'class': 'imp-number', 'formwidth': '100%'}))


class FirmasPeriodoGrupoTitulacionForm(forms.Form):
    persona = forms.IntegerField(initial=0, required=False, label=u'Persona', widget=forms.TextInput(attrs={'select2search': 'true', 'controlwidth': '500px'}))
    tipofirma = forms.ChoiceField(choices=TIPO_FIRMA_GRUPOTITULACION, label=u'Tipo firma', required=False, widget=forms.Select(attrs={'class': 'imp-25'}))


class MateriaArchivoNotasForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', max_length=250, required=False)
    observacion = forms.CharField(label=u'Observación', max_length=250, required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño maximo permitido 10Mb, en formato xls, xlsx', ext_whitelist=(".xls", ".xlsx"), max_upload_size=10485760)
    criteriomodeloevaluativo = forms.ModelMultipleChoiceField(label=u'Criterio del modelo evaluativo', queryset=DetalleModeloEvaluativo.objects.all(), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))

    def modeloevaluativo(self, detallemodeloevaluativo):
        self.fields['criteriomodeloevaluativo'].queryset = detallemodeloevaluativo


class SubirMatrizInscripcionForm(forms.Form):
    periodo_id_sag = forms.IntegerField(label=u'Id periodo SAG', initial=0, required=False)
    descripcion = forms.CharField(label=u'Descripción', max_length=250, required=False)
    observacion = forms.CharField(label=u'Observación', max_length=250, required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño maximo permitido 20Mb, en formato xls, xlsx', ext_whitelist=(".xls", ".xlsx"), max_upload_size=20000000)
    proceso = ModelChoiceField(label=u'Proceso', queryset=My_TituloProcesoSubirMatrizInscripcion.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    # criterios_obligatorio = forms.ModelMultipleChoiceField(label=u'Criterios Obligatorios', queryset=My_CriterioSubirMatrizInscripcion.objects.filter(status=True, is_obligatorio=True), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))
    # criterios_adicionar = forms.ModelMultipleChoiceField(label=u'Criterios', queryset=My_CriterioSubirMatrizInscripcion.objects.filter(status=True, is_obligatorio=False), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))

    def criterios_add(self):
        deshabilitar_campo(self, 'criterios_obligatorio')
        # self.fields['criterios_adicionar'].queryset = My_CriterioSubirMatrizInscripcion.objects.filter(is_obligatorio=False, status=True)
        self.fields['criterios_obligatorio'].initial = My_CriterioSubirMatrizInscripcion.objects.filter(is_obligatorio=True, status=True)
        # self.fields['criterios'].widget.attrs['option_disabled'] = My_CriterioSubirMatrizInscripcion.objects.filter(is_obligatorio=False)

    def criterios_edit(self):
        deshabilitar_campo(self, 'criterios_obligatorio')
        deshabilitar_campo(self, 'proceso')
        # self.fields['criterios_adicionar'].queryset = My_CriterioSubirMatrizInscripcion.objects.filter(is_obligatorio=False, status=True)


# CURSOS CAPACITACION GENERADO POR PERFECCIONAMIENTO ACADEMICO
class CapPeriodoForm(FormModeloBase):
    nombre = forms.CharField(label=u'Nombre', max_length=500, widget=forms.TextInput(attrs={'class':'form-control','col': '12'}), required=True)
    descripcion = forms.CharField(label=u'Descripción', max_length=1000, widget=forms.Textarea(attrs={'class':'form-control','col': '12'}), required=True)
    abreviatura = forms.CharField(label=u'Abreviatura', max_length=25, widget=forms.TextInput(attrs={'class':'form-control','col': '12'}), required=True)
    fechainicio = forms.DateField(label=u"Fecha Inicio", initial=datetime.now().date(), widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha form-control', 'col': '6'}), required=False)
    fechafin = forms.DateField(label=u"Fecha Fin", widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha form-control', 'col': '6'}), required=False)
    utilizacronograma = forms.BooleanField(label=u'¿Utiliza INC?', initial=True, required=False, widget=forms.CheckboxInput(attrs={'col': '12'}))
    archivo = ExtFileField(label=u'Archivo', help_text=u'Tamaño maximo permitido 12Mb, en formato pdf, doc, docx, xls, xlsx, jpg, jpeg, png', ext_whitelist=(".pdf", ".doc", ".docx", ".xls", ".xlsx", ".jpg", ".jpeg", ".png"), max_upload_size=12582912, required=False)

    def editar_grupo(self):
        deshabilitar_campo(self, 'fechainicio')
        deshabilitar_campo(self, 'fechafin')


class CapEventoForm(FormModeloBase):
    nombre = forms.CharField(label=u'Nombre', max_length=500, widget=forms.TextInput(attrs={'class':'form-control','col': '12'}), required=True)
    tipocurso = forms.ModelChoiceField(label=u"Tipo Evento", queryset=TipoCurso.objects.all(), required=False, widget=forms.Select(attrs={'class':'form-control','col': '6'}))

    def editar_grupo(self):
        deshabilitar_campo(self, 'tipocurso')


class CapEnfocadaForm(FormModeloBase):
    nombre = forms.CharField(label=u'Nombre', max_length=500, widget=forms.TextInput(attrs={'class':'form-control','col': '12'}), required=True)


class CapEventoPeriodoForm(FormModeloBase):
    from sagest.models import RegimenLaboral, ModalidadLaboral
    from ckeditor_uploader.widgets import CKEditorUploadingWidget
    from inno.models import CapEncuestaPeriodo
    periodo = forms.ModelChoiceField(label=u'Período', required=False, queryset=CapPeriodoDocente.objects.filter(status=True), widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    encuesta = forms.ModelChoiceField(label=u'Encuesta satisfacción', required=False, queryset=CapEncuestaPeriodo.objects.none(), widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    periodoac = forms.ModelChoiceField(label=u"Periodo académico",
                                     queryset=Periodo.objects.filter(status=True, clasificacion=1).order_by('-pk'),
                                     required=True, widget=forms.Select({'col': '12'}))
    capevento = forms.ModelChoiceField(label=u'Evento', queryset=CapEventoDocente.objects.filter(status=True), required=True,  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    departamento = forms.ModelChoiceField(label=u'Dirección que confiere certificado', queryset=Departamento.objects.filter(pk__in=[128], status=True), required=True,  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    pais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.all(), required=False,  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    provincia = forms.ModelChoiceField(label=u"Provincia / Estado", queryset=Provincia.objects.all(), required=False,  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    canton = forms.ModelChoiceField(label=u"Cantón / Ciudad", queryset=Canton.objects.all(), required=False,  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    parroquia = forms.ModelChoiceField(label=u"Parroquia", queryset=Parroquia.objects.all(), required=False,  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    areaconocimiento = forms.ModelChoiceField(label=u"Área Conocimiento", queryset=AreaConocimientoTitulacion.objects.filter(status=True, tipo=1, vigente=True), required=True,  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    subareaconocimiento = forms.ModelChoiceField(label=u"Sub Área Conocimiento", queryset=SubAreaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=True,  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    subareaespecificaconocimiento = forms.ModelChoiceField(label=u"Sub Área Especifica Conocimiento", queryset=SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, tipo=1), required=True,  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    regimenlaboral = forms.ModelChoiceField(RegimenLaboral.objects.filter(status=True), required=False, label=u'Régimen Laboral',  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    modalidadlaboral = forms.ModelMultipleChoiceField(ModalidadLaboral.objects.filter(status=True), required=False, label=u'Dirigido a',  widget=forms.SelectMultiple(attrs={'class':'form-control','col': '12', 'multiple': 'multiple'}))
    contextocapacitacion = forms.ModelChoiceField(label=u"Contexto de la Capacitación/Formación", queryset=ContextoCapacitacion.objects.all(), required=False,  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    responsable = forms.IntegerField(initial=0, required=False, label=u'Responsable', widget=forms.TextInput(attrs={'select2search': 'true'}))
    aula = forms.ModelChoiceField(label=u'Aula', required=True, queryset=Aula.objects.filter(status=True),  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    enfoque = forms.ModelChoiceField(label=u'Enfoque', required=True, queryset=CapEnfocadaDocente.objects.filter(status=True),  widget=forms.Select(attrs={'class':'form-control','col': '12'}))
    modalidad = forms.ChoiceField(label=u"Modalidad Capacitación", required=False, choices=MODALIDAD_CAPACITACION, widget=forms.Select(attrs={'class':'form-control','col': '6'}))
    tipoparticipacion = forms.ModelChoiceField(label=u"Tipo Aprobación", queryset=TipoParticipacion.objects.all(), required=False, widget=forms.Select(attrs={'class':'form-control','col': '6'}))
    tipocertificacion = forms.ModelChoiceField(label=u"Tipo Certificación", queryset=TipoCertificacion.objects.all(), required=False, widget=forms.Select(attrs={'class':'form-control','col': '6'}))
    tipocapacitacion = forms.ModelChoiceField(label=u"Programado Plan Institucional", queryset=TipoCapacitacion.objects.all(), required=False, widget=forms.Select(attrs={'class':'form-control','col': '6'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha form-control', 'col': '6'}))
    fechafin = forms.DateField(label=u"Fecha Fin", widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha form-control', 'col': '6'}))
    horas = forms.IntegerField(label=u"Horas Académica", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    horaspropedeutica = forms.IntegerField(label=u"Horas Propedéuticas", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    horaspracticas = forms.IntegerField(label=u"Horas Prácticas", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    horasexperimentales = forms.IntegerField(label=u"Horas Experimentales", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    horasautonoma = forms.IntegerField(label=u"Horas Autónomas", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    horastotal = forms.IntegerField(label=u"Horas Total", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    folder = forms.IntegerField(label=u"Nº Folder", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    cupo = forms.IntegerField(label=u"Cupo", required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    minnota = forms.IntegerField(label=u"Mínimo Calificación", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    minasistencia = forms.IntegerField(label=u"Mínimo Asistencia", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    codigo = forms.IntegerField(label=u"Código", required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'col': '6'}))
    objetivo = forms.CharField(label=u'Objetivo General', widget=forms.Textarea(attrs={'rows': '3', 'col': '12'}), required=False)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '5',  'col': '12'}), required=False)
    if DEBUG:
        contenido = forms.CharField(label=u"Cuerpo", widget=forms.Textarea(attrs={'rows': '3', 'col': '12'}), required=False)
    else:
        contenido = forms.CharField(label=u"Cuerpo", required=False, widget=CKEditorUploadingWidget())
    abreviaturadepartamento = forms.CharField(label=u'Abreviatura del departamento', required=False, max_length=25, widget=forms.TextInput(attrs={'class': 'imp-100', 'col': '12'}))
    revisado = forms.IntegerField(initial=0, required=False, label=u'Revisador', widget=forms.TextInput(attrs={'select2search': 'true'}))
    aprobado1 = forms.CharField(label=u'Aprobador 1', widget=forms.TextInput(attrs={'class': 'imp-100','col': '12'}), required=False)
    aprobado2 = forms.CharField(label=u'Aprobador 2', widget=forms.TextInput(attrs={'class': 'imp-100' , 'col': '12'}), required=False)
    aprobado3 = forms.CharField(label=u'Aprobador 3', widget=forms.TextInput(attrs={'class': 'imp-100' , 'col': '12'}), required=False)
    visualizar = forms.BooleanField(initial=True, label=u'Visualizar Evento', required=False, widget=forms.CheckboxInput(attrs={'col': '6'}))
    actualizar = forms.BooleanField(initial=False, label=u'Actualizar (Aprobadores,revisador,abreviatura)', required=False, widget=forms.CheckboxInput(attrs={'col': '6'}))
    observacionreporte = forms.CharField(label=u'Observación reporte', widget=forms.Textarea(attrs={'rows': '3', 'maxlength': '200'}), required=False)
    modeloevaluativoindividual = forms.BooleanField(initial=False, label=u'Modelo Evaluativo Individual?', required=False, widget=forms.CheckboxInput(attrs={'col': '6'}))
    unificarmoodle = forms.BooleanField(initial=False, label=u'Unificar curso moodle', required=False, widget=forms.CheckboxInput(attrs={'col': '6'}))

    def editar_grupo(self):
        deshabilitar_campo(self, 'periodo')
        # deshabilitar_campo(self, 'revisado')
        deshabilitar_campo(self, 'aprobado1')
        deshabilitar_campo(self, 'aprobado2')
        deshabilitar_campo(self, 'aprobado3')
        deshabilitar_campo(self, 'horastotal')
        deshabilitar_campo(self, 'abreviaturadepartamento')

    def editar_responsable(self, responsable):
        self.fields['responsable'].widget.attrs['descripcion'] = responsable.flexbox_repr() if responsable else ""
        self.fields['responsable'].widget.attrs['value'] = responsable.id if responsable else ""

    def editar_regimenlaboral(self):
        deshabilitar_campo(self, 'regimenlaboral')

    def adicionar(self, pais, provincia, canton):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=pais)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=provincia)
        self.fields['parroquia'].queryset = Parroquia.objects.filter(canton=canton)
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=None)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=None)
        del self.fields['actualizar']

    def editar(self, capacitacion):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=capacitacion.pais)
        self.fields['canton'].queryset = Canton.objects.filter(provincia=capacitacion.provincia)
        self.fields['parroquia'].queryset = Parroquia.objects.filter(canton=capacitacion.canton)
        self.fields['subareaconocimiento'].queryset = SubAreaConocimientoTitulacion.objects.filter(areaconocimiento=capacitacion.areaconocimiento, vigente=True)
        self.fields['subareaespecificaconocimiento'].queryset = SubAreaEspecificaConocimientoTitulacion.objects.filter(areaconocimiento=capacitacion.subareaconocimiento, vigente=True)

    def editar_encuesta(self, periodo):
        from inno.models import CapEncuestaPeriodo
        self.fields['encuesta'].queryset = CapEncuestaPeriodo.objects.filter(periodo=periodo)


class CapInstructorForm(FormModeloBase):
    instructor = forms.IntegerField(initial=0, required=False, label=u'Instructor', widget=forms.TextInput(attrs={'select2search': 'true', 'col': '12'}))
    # tipo = forms.ChoiceField(label=u"Tipo", required=False, choices=CAPACITACION_FALICITADORES_TIPO, widget=forms.Select(attrs={'class': 'imp-25'}))
    nombrecurso = forms.CharField(label=u'Nombre curso moodle', max_length=500, widget=forms.TextInput(attrs={'class': 'imp-100', 'col': '12'}), required=False)
    descripcion = forms.CharField(label=u'Descripcion', max_length=500,
                                  widget=forms.TextInput(attrs={'class': 'imp-100', 'col': '12'}), required=False)
    instructorprincipal = forms.BooleanField(initial=False, label=u'Principal?', required=False, widget=forms.CheckboxInput(attrs={'class':'form-controljs-switch','col': '12'}))

    def editar(self, capinstructor):
        self.fields['instructor'].widget.attrs['descripcion'] = capinstructor.instructor.flexbox_repr() if capinstructor.instructor else ""
        self.fields['instructor'].widget.attrs['value'] = capinstructor.instructor.id if capinstructor.instructor else ""


class CapInscribirPersonaCapacitacionForm(FormModeloBase):
    from sga.models import Sexo
    choices = ((1, 'Cédula'), (2, 'Pasaporte'))
    tipoidentificacion = forms.ChoiceField(label=u'Tipo de identificación',  choices=choices,widget=forms.Select(attrs={'class': 'imp-100 select2', 'col': '12'}))
    cedula = forms.CharField(label=u"Cédula o pasaporte", max_length=10, required=True,
                             widget=forms.TextInput(attrs={'col': '6'}))
    nombres = forms.CharField(label=u'Nombres', max_length=100, required=True,
                              widget=forms.TextInput(attrs={'col': '6'}))
    apellido1 = forms.CharField(label=u"1er Apellido", max_length=50, required=True,
                                widget=forms.TextInput(attrs={'col': '6'}))
    apellido2 = forms.CharField(label=u"2do Apellido", max_length=50, required=True,
                                widget=forms.TextInput(attrs={'col': '6'}))
    email = forms.CharField(label=u"Correo electrónico", max_length=200, required=True,
                            widget=forms.TextInput(attrs={'col': '6'}))
    telefono = forms.CharField(label=u"Teléfono móvil", max_length=50, required=False,
                               widget=forms.TextInput(attrs={'col': '6'}))

    nacimiento = forms.DateField(label=u"Fecha nacimiento", required=True,
                                 widget=DateTimeInput(format='%d-%m-%Y',
                                                      attrs={'class':'form-control', 'col': '12'}))

    direccion = forms.CharField(label=u'Dirección', max_length=100, required=True,
                                widget=forms.TextInput(attrs={'col': '6'}))

    sexo = forms.ModelChoiceField(label=u"Sexo", queryset=Sexo.objects.all(),
                                  widget=forms.Select(attrs={'col': '6'}))


class CapTurnoForm(FormModeloBase):
    turno = forms.IntegerField(label=u"Turno", required=False, widget=forms.TextInput(attrs={'class':'form-control','col': '6'}))
    horas = forms.IntegerField(label=u"Horas", required=False, initial=1, widget=forms.TextInput(attrs={'class':'form-control','col': '6'}))
    horainicio = forms.TimeField(label=u"Hora Inicio", required=True, initial=str("07:00"), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'col': '6'}))
    horafin = forms.TimeField(label=u'Hora Fin', required=True, initial=str("08:00"), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora' , 'col': '6'}))


    def editar_grupo(self):
        deshabilitar_campo(self, 'horas')

    def editar_turno(self):
        deshabilitar_campo(self, 'turno')


class CapClaseForm(FormModeloBase):
    from sga.models import DIAS_CHOICES
    capeventoperiodo = forms.CharField(label=u'Evento', max_length=500, widget=forms.TextInput(attrs={'class': 'imp-100' ,'col': '12'}), required=False)
    turno = forms.ModelChoiceField(CapTurnoDocente.objects.filter(status=True), required=False, label=u'Turno', widget=forms.Select(attrs={'col': '12'}))
    dia = forms.ChoiceField(label=u"Dia", required=False, choices=DIAS_CHOICES, widget=forms.Select(attrs={'class': 'imp-25', 'col': '12'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha form-control', 'col': '6'}))
    fechafin = forms.DateField(label=u"Fecha Fin", widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha form-control', 'col': '6'}))

    def editar_grupo(self):
        deshabilitar_campo(self, 'capeventoperiodo')

    def editar_turno(self):
        deshabilitar_campo(self, 'turno')
        deshabilitar_campo(self, 'dia')


class CapSolicitudForm(forms.Form):
    fechasolicitud = forms.DateField(label=u"Fecha Solicitud", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '20%'}), required=False)
    solicito = forms.CharField(label=u'Solicito', max_length=500, widget=forms.TextInput(attrs={'class': 'imp-100'}), required=False)
    participante = forms.IntegerField(initial=0, required=False, label=u'Participante', widget=forms.TextInput(attrs={'select2search': 'true'}))
    observacion = forms.CharField(label="Observación", widget=forms.Textarea(attrs={'rows': '3', 'maxlength': '400'}), required=True)

    def editar(self, participante):
        deshabilitar_campo(self, 'fechasolicitud')
        deshabilitar_campo(self, 'solicito')
        deshabilitar_campo(self, 'capeventoperiodo')
        deshabilitar_campo(self, 'participante')
        self.fields['participante'].widget.attrs['descripcion'] = participante.flexbox_repr() if participante else ""
        self.fields['participante'].widget.attrs['value'] = participante.id if participante else ""

    def adicionar(self):
        deshabilitar_campo(self, 'fechasolicitud')
        deshabilitar_campo(self, 'solicito')

    def deshabilitar_observacion(self):
        deshabilitar_campo(self, 'observacion')


class CapInscribirForm(forms.Form):
    from sagest.models import ModalidadLaboral
    tipo = forms.ChoiceField(label=u'Tipo', choices=((2, 'Individual'), (3, 'Grupal')), initial=2, widget=forms.Select(attrs={'class': 'form-select', 'col': '12'}))
    regimenlaboral = forms.ModelChoiceField(RegimenLaboral.objects.none(), required=False, label=u'Régimen Laboral', widget=forms.Select(attrs={'class': 'form-control', 'col': '12', 'disabled': 'disabled'}))
    modalidadlaboral = forms.ModelMultipleChoiceField(ModalidadLaboral.objects.none(), required=False, label=u'Dirigido a', widget=forms.SelectMultiple(attrs={'class': 'form-control', 'col': '12', 'disabled': 'disabled', 'multiple': 'multiple'}))
    departamento = forms.ModelChoiceField(Departamento.objects.filter(integrantes__isnull=False, status=True).distinct(), required=False, label=u'Departamento', widget=forms.Select(attrs={'col': '12'}))
    participante = forms.IntegerField(initial=0, required=False, label=u'Participante', widget=forms.TextInput(attrs={'select2search': 'true', 'col': '12'}))
    observacion = forms.CharField(label="Observación", widget=forms.Textarea(attrs={'rows': '3', 'maxlength': '400', 'col': '12'}), required=True)

    def cargar_regimen(self, evento):
        from sagest.models import ModalidadLaboral
        regimen = RegimenLaboral.objects.filter(status=True, id=evento.regimenlaboral_id)
        modalidadlab = ModalidadLaboral.objects.filter(status=True, id__in=evento.modalidadlaboral.all())
        self.fields['regimenlaboral'].queryset = regimen
        self.fields['regimenlaboral'].initial = regimen.first()
        self.fields['modalidadlaboral'].queryset = modalidadlab
        self.fields['modalidadlaboral'].initial = modalidadlab


class CapConfiguracionForm(FormModeloBase):
    minasistencia = forms.IntegerField(label=u"Minimo Asistencia", required=True, widget=forms.TextInput(attrs={'class':'form-control','col': '6'}))
    minnota = forms.IntegerField(label=u"Minimo Calificación", required=True, widget=forms.TextInput(attrs={'class':'form-control','col': '6'}))
    abreviaturadepartamento = forms.CharField(label=u'Abreviatura del departamento', max_length=25, widget=forms.TextInput(attrs={'class':'form-control','col': '12'}))
    revisado = forms.IntegerField(initial=0, required=False, label=u'Reporte y revisador', widget=forms.TextInput(attrs={'select2search': 'true', 'class':'form-control','col': '12'}))
    aprobado1 = forms.IntegerField(initial=0, required=False, label=u'Aprobador PA', widget=forms.TextInput(attrs={'select2search': 'true', 'class':'form-control','col': '12'}))
    aprobado2 = forms.IntegerField(initial=0, required=False, label=u'Reporte y aprobador PA', widget=forms.TextInput(attrs={'select2search': 'true', 'class':'form-control','col': '12'}))
    aprobado3 = forms.IntegerField(initial=0, required=False, label=u'Reporte Secret. Gral.', widget=forms.TextInput(attrs={'select2search': 'true', 'class':'form-control','col': '12'}))
    fondocertificado = ExtFileField(label=u'Imagen de fondo para los certificados', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato jpg', ext_whitelist=(".jpg"), max_upload_size=10485760)
    essubrogante = forms.BooleanField(initial=False, label=u'¿Es Subrogante?', required=False, widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'col': '6'}))
    tiposubrogante = forms.ChoiceField(label=u'Tipo Subrogante', choices=CapConfiguracionDocente.TypeSubrogante.choices,
                                       initial=CapConfiguracionDocente.TypeSubrogante.APROBADO_1,
                                       widget=forms.Select(attrs={'class': 'form-select', 'col': '6'}),
                                       error_messages={'required': 'Seleccione tipo (requerido)'})
    personasubrogante = forms.IntegerField(initial=0, required=False, label=u'Persona Subrogante.', widget=forms.TextInput(
        attrs={'select2search': 'true', 'class': 'form-control', 'col': '12'}))


    def editar(self, revisador, aprobador1, aprobador2, aprobador3,personasubrogante):
        self.fields['revisado'].widget.attrs['descripcion'] = revisador[0].flexbox_repr_con_cargo() if revisador else ""
        self.fields['revisado'].widget.attrs['value'] = revisador[0].id if revisador else ""
        self.fields['aprobado1'].widget.attrs['descripcion'] = aprobador1[0].flexbox_repr_con_cargo() if aprobador1 else ""
        self.fields['aprobado1'].widget.attrs['value'] = aprobador1[0].id if aprobador1 else ""
        self.fields['aprobado2'].widget.attrs['descripcion'] = aprobador2[0].flexbox_repr_con_cargo() if aprobador2 else ""
        self.fields['aprobado2'].widget.attrs['value'] = aprobador2[0].id if aprobador2 else ""
        self.fields['aprobado3'].widget.attrs['descripcion'] = aprobador3[0].flexbox_repr_con_cargo() if aprobador3 else ""
        self.fields['aprobado3'].widget.attrs['value'] = aprobador3[0].id if aprobador3 else ""
        self.fields['personasubrogante'].widget.attrs['descripcion'] = f'{personasubrogante[0].persona.cedula} {personasubrogante[0].persona.nombre_completo()}'  if personasubrogante else ""
        self.fields['personasubrogante'].widget.attrs['value'] = personasubrogante[0].id if personasubrogante else ""


class CapAsistenciaForm(forms.Form):
    clase = forms.ModelChoiceField(CapClaseDocente.objects.filter(status=True), required=False, label=u'Horario', widget=forms.Select())
    fechaadicionar = forms.DateField(label=u"Fecha", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '20%'}), required=False)

    def adicionar(self, eventoperiodo):
        self.fields['clase'].queryset = CapClaseDocente.objects.filter(capeventoperiodo=eventoperiodo).order_by('dia')


class CapModeloEvaluativoDocenteForm(FormModeloBase):
    nombre = forms.CharField(label=u"Nombre", max_length=500, required=True,
                             widget=forms.TextInput(attrs={'class':'form-control','col': '12'}))
    notaminima = forms.FloatField(label=u"Nota Mínima", initial="0.00", required=True,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'col': '6'}))
    notamaxima = forms.FloatField(label=u"Nota Máxima", initial="0.00", required=True,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'col': '6'}))
    principal = forms.BooleanField(initial=False, label=u'Principal?', required=False, widget=forms.CheckboxInput(attrs={'class':'form-control','col': '6'}))
    evaluacion = forms.BooleanField(initial=False, label=u'Es Evaluación?', required=False , widget=forms.CheckboxInput(attrs={'class':'form-control','col': '6'}))


class CapModeloEvaluativoDocenteGeneralForm(FormModeloBase):
    orden = forms.IntegerField(initial=0, label=u"Orden", required=False,
                               widget=forms.TextInput(attrs={'class':'form-control','col': '12'}))
    modelo = forms.ModelChoiceField(CapModeloEvaluativoDocente.objects.filter(status=True).order_by('-id'),
                                    required=True,
                                    label=u'Modelo Evaluativo', widget=forms.Select(attrs={'class':'form-control','col': '12'}))


class CapSolicitudNecesidadForm(forms.Form):
    periodo = forms.ModelChoiceField(CapPeriodoDocente.objects.none(), required=True, label=u'Periodo', widget=forms.Select(attrs={'class': 'form-select', 'col': '12'}), error_messages={'required': 'Seleccione un periodo de capacitación (requerido)'})
    carrera = forms.ModelChoiceField(Carrera.objects.none(), required=True, label=u'Carrera', widget=forms.Select(attrs={'class': 'form-select', 'col': '12'}), error_messages={'required': 'Seleccione una carrera para la proyección de capacitación (requerido)'})

    def create(self, periodo, persona):
        from sga.models import CoordinadorCarrera
        now = datetime.now()
        self.fields['periodo'].queryset = CapPeriodoDocente.objects.filter(status=True, fechainicio__year__gt=now.year, utilizacronograma=True).order_by('fechainicio')
        filtro = Q(periodo=periodo) & Q(status=True)
        if not persona.usuario.is_superuser:
            filtro = filtro & Q(persona=persona)
        self.fields['carrera'].queryset = Carrera.objects.filter(pk__in=CoordinadorCarrera.objects.values_list("carrera__id", flat=True).filter(filtro))


class CapPeriodoCronogramaForm(forms.Form):
    etapa = forms.ChoiceField(label=u'Tipo', choices=CapCronogramaNecesidad.TypeEtapas.choices, initial=CapCronogramaNecesidad.TypeEtapas.NINGUNA, widget=forms.Select(attrs={'class': 'form-select', 'col': '6'}), error_messages={'required': 'Seleccione una etapa (requerido)'})
    activo = forms.BooleanField(initial=True, label=u'¿Activo?', required=False, widget=forms.CheckboxInput(attrs={'class': '', 'col': '6'}))
    inicio = forms.DateTimeField(initial=datetime.now().date(), label=u'Inicio', input_formats=['%d/%m/%Y %I:%M %p'], widget=DateTimeInput(format='%d/%m/%Y %I:%M %p', attrs={'class': 'form-control', 'col': '6'}), required=False, error_messages={'required': 'Seleccione una fecha y hora de inicio sugerida para el cronograma (requerido)'})
    fin = forms.DateTimeField(initial=datetime.now().date(), label=u'Fin', input_formats=['%d/%m/%Y %I:%M %p'], widget=DateTimeInput(format='%d/%m/%Y %I:%M %p', attrs={'class': 'form-control', 'col': '6'}), required=False, error_messages={'required': 'Seleccione una fecha y hora de fin sugerida para el cronograma (requerido)'})

    def clean(self):
        cleaned_data = super(CapPeriodoCronogramaForm, self).clean()
        etapa = int(cleaned_data.get('etapa', '0'))
        inicio = cleaned_data.get('inicio', None)
        fin = cleaned_data.get('fin', None)
        if etapa == 0:
            self.add_error('etapa', ValidationError('Seleccione una etapa.'))
        if inicio and fin:
            if inicio > fin:
                self.add_error('fin', ValidationError('Seleccione una fecha y hora fin mayor a inicio.'))
        return cleaned_data


class CapSolicitudNecesidadFacilitadorForm(forms.Form):
    tipo = forms.ChoiceField(label=u'Tipo', choices=CapSolicitudNecesidadFacilitador.Tipos.choices, initial=CapSolicitudNecesidadFacilitador.Tipos.NINGUNA, widget=forms.Select(attrs={'class': 'form-select', 'col': '12'}), error_messages={'required': 'Seleccione el tipo de facilitador (requerido)'})
    facilitador = forms.ModelChoiceField(Persona.objects.none(), required=False, label=u'Facilitador', widget=forms.Select(attrs={'class': 'form-select', 'col': '12'}), error_messages={'required': 'Seleccione un facilitador (requerido)'})
    otro = forms.CharField(required=False, initial='', max_length=300, label=u'Facilitador', widget=forms.TextInput(attrs={'class': 'form-control', 'col': '12'}), error_messages={'max_length': 'Supero el máximo de caracteres', 'required': 'Ingrese el nombre del facilitador (requerido)'})

    def construir(self, data):
        facilitador = data.get('facilitador', None)
        otro = data.get('otro', None)
        if facilitador:
            self.fields['facilitador'].queryset = Persona.objects.filter(pk=facilitador)
            self.fields['facilitador'].required = True
            del self.fields['otro']
        elif otro:
            self.fields['otro'].required = True
            del self.fields['facilitador']


class CapSolicitudNecesidadRechazarForm(forms.Form):
    observacion = forms.CharField(required=True, label="Observación", widget=forms.Textarea(attrs={'class': 'form-control', 'col': '12'}), error_messages={'required': 'Ingrese una observación del rechazo (requerido)'})


class CapSolicitudNecesidadWriteDraftForm(forms.Form):
    tema = forms.CharField(required=False, max_length=1000,  widget=forms.TextInput(), error_messages={'max_length': 'Supero el máximo de caracteres en el tema de la capacitación y actualización específica requerida', 'required': 'Ingrese una descripción del tema de la capacitación y actualización específica requerida (requerido)'})
    carrera = forms.ModelChoiceField(Carrera.objects.none(), required=True, widget=forms.Select(attrs={}), error_messages={'required': 'Seleccione una carrera para la proyección de capacitación (requerido)'})
    area = forms.ModelChoiceField(AreaConocimientoTitulacion.objects.none(), required=False, widget=forms.Select(attrs={}), error_messages={'required': 'Seleccione un Área de capacitación/actualización  (requerido)'})
    subarea = forms.ModelChoiceField(SubAreaConocimientoTitulacion.objects.none(), required=False, widget=forms.Select(attrs={}), error_messages={'required': 'Seleccione un subárea de capacitación/actualización  (requerido)'})
    campo_detallado = forms.ModelChoiceField(SubAreaEspecificaConocimientoTitulacion.objects.none(), required=False, widget=forms.Select(attrs={}), error_messages={'required': 'Seleccione un campo detallado (requerido)'})
    justificacion = forms.CharField(required=False, widget=forms.Textarea(), error_messages={'required': 'Ingrese un origen del requerimiento/justificación (requerido)'})
    objetivo = forms.CharField(required=False, widget=forms.Textarea(), error_messages={'required': 'Ingrese un objetivo general del aprendizaje propuesto (requerido)'})
    contenido = forms.CharField(required=False, widget=forms.Textarea(), error_messages={'required': 'Ingrese un contenido (requerido)'})
    resultado = forms.CharField(required=False, widget=forms.Textarea(), error_messages={'required': 'Ingrese los resultados esperados (requerido)'})
    num_horas_referida = forms.IntegerField(initial=0, required=False, widget=forms.TextInput(attrs={'type': 'number'}), error_messages={'required': 'Ingrese el número de horas referidas (requerido)'})
    capacidad_participante = forms.IntegerField(initial=0, required=False, widget=forms.TextInput(attrs={'type': 'number'}), error_messages={'required': 'Ingrese la cantidad de participantes (requerido)'})
    modalidad = forms.ChoiceField(choices=CapSolicitudNecesidad.TypeModalidades.choices, initial=CapSolicitudNecesidad.TypeModalidades.NINGUNA, widget=forms.Select(attrs={}), error_messages={'required': 'Seleccione la modalidad (requerido)'})
    desde = forms.DateField(initial=datetime.now().date(), input_formats=['%d/%m/%Y'], widget=DateTimeInput(format='%d/%m/%Y', attrs={}), required=False, error_messages={'required': 'Seleccione una fecha de inicio sugerida para el cronograma (requerido)'})
    hasta = forms.DateField(initial=datetime.now().date(), input_formats=['%d/%m/%Y'], widget=DateTimeInput(format='%d/%m/%Y', attrs={}), required=False, error_messages={'required': 'Seleccione una fecha fin sugerida para el cronograma (requerido)'})

    def write_draft(self, params):
        from sga.models import CoordinadorCarrera
        periodo = params.get('periodo', None)
        persona = params.get('persona', None)
        data = params.get('data', None)
        filtro = Q(periodo=periodo) & Q(status=True)
        if not persona.usuario.is_superuser:
            filtro = filtro & Q(persona=persona)
        self.fields['carrera'].queryset = Carrera.objects.filter(pk__in=CoordinadorCarrera.objects.values_list("carrera__id", flat=True).filter(filtro))
        id_area = int(data.get('area', '0'))
        id_subarea = int(data.get('subarea', '0'))
        id_campo_detallado = int(data.get('campo_detallado', '0'))
        eAreaConocimientoTitulaciones = AreaConocimientoTitulacion.objects.filter(status=True, vigente=True)
        SubAreaConocimientoTitulaciones = SubAreaConocimientoTitulacion.objects.filter(status=True, vigente=True)
        eSubAreaEspecificaConocimientoTitulaciones = SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, vigente=True)
        if id_area and id_area != 0:
            eAreaConocimientoTitulaciones = eAreaConocimientoTitulaciones.filter(pk=id_area)
            self.fields['area'].queryset = eAreaConocimientoTitulaciones
            if id_subarea and id_subarea != 0:
                SubAreaConocimientoTitulaciones = SubAreaConocimientoTitulaciones.filter(pk=id_subarea)
                self.fields['subarea'].queryset = SubAreaConocimientoTitulaciones
                if id_campo_detallado and id_campo_detallado != 0:
                    eSubAreaEspecificaConocimientoTitulaciones = eSubAreaEspecificaConocimientoTitulaciones.filter(pk=id_campo_detallado)
                    self.fields['campo_detallado'].queryset = eSubAreaEspecificaConocimientoTitulaciones
                else:
                    del self.fields['campo_detallado']
            else:
                del self.fields['subarea']
        else:
            del self.fields['area']
            del self.fields['subarea']
            del self.fields['campo_detallado']
        num_horas_referida = int(data.get('num_horas_referida', '0'))
        if num_horas_referida == 0:
            self.fields['num_horas_referida'].initial = 0
        capacidad_participante = int(data.get('capacidad_participante', '0'))
        if capacidad_participante == 0:
            self.fields['capacidad_participante'].initial = 0
        desde = data.get('desde', None)
        hasta = data.get('hasta', None)
        if desde is None or desde == '':
            del self.fields['desde']
        if hasta is None or hasta == '':
            del self.fields['hasta']

    def completo(self, params):
        from sga.models import CoordinadorCarrera
        self.fields['tema'].required = True
        self.fields['carrera'].required = True
        self.fields['area'].required = True
        self.fields['subarea'].required = True
        self.fields['campo_detallado'].required = True
        self.fields['justificacion'].required = True
        self.fields['objetivo'].required = True
        self.fields['contenido'].required = True
        self.fields['resultado'].required = True
        self.fields['num_horas_referida'].required = True
        self.fields['capacidad_participante'].required = True
        self.fields['modalidad'].required = True
        self.fields['desde'].required = True
        self.fields['hasta'].required = True
        periodo = params.get('periodo', None)
        persona = params.get('persona', None)
        data = params.get('data', None)
        filtro = Q(periodo=periodo) & Q(status=True)
        if not persona.usuario.is_superuser:
            filtro = filtro & Q(persona=persona)
        self.fields['carrera'].queryset = Carrera.objects.filter(pk__in=CoordinadorCarrera.objects.values_list("carrera__id", flat=True).filter(filtro))
        id_area = int(data.get('area', '0'))
        id_subarea = int(data.get('subarea', '0'))
        id_campo_detallado = int(data.get('campo_detallado', '0'))
        eAreaConocimientoTitulaciones = AreaConocimientoTitulacion.objects.filter(status=True, vigente=True)
        SubAreaConocimientoTitulaciones = SubAreaConocimientoTitulacion.objects.filter(status=True, vigente=True)
        eSubAreaEspecificaConocimientoTitulaciones = SubAreaEspecificaConocimientoTitulacion.objects.filter(status=True, vigente=True)
        if id_area and id_area != 0:
            eAreaConocimientoTitulaciones = eAreaConocimientoTitulaciones.filter(pk=id_area)
            self.fields['area'].queryset = eAreaConocimientoTitulaciones
            if id_subarea and id_subarea != 0:
                SubAreaConocimientoTitulaciones = SubAreaConocimientoTitulaciones.filter(pk=id_subarea)
                self.fields['subarea'].queryset = SubAreaConocimientoTitulaciones
                if id_campo_detallado and id_campo_detallado != 0:
                    eSubAreaEspecificaConocimientoTitulaciones = eSubAreaEspecificaConocimientoTitulaciones.filter(pk=id_campo_detallado)
                    self.fields['campo_detallado'].queryset = eSubAreaEspecificaConocimientoTitulaciones

        num_horas_referida = int(data.get('num_horas_referida', '0'))
        if num_horas_referida == 0:
            self.fields['num_horas_referida'].initial = 0
        capacidad_participante = int(data.get('capacidad_participante', '0'))
        if capacidad_participante == 0:
            self.fields['capacidad_participante'].initial = 0

    def clean(self):
        cleaned_data = super(CapSolicitudNecesidadWriteDraftForm, self).clean()
        # desde = cleaned_data.get('desde', None)
        # hasta = cleaned_data.get('hasta', None)
        # if desde and hasta:
        #     if desde > hasta:
        #         self.add_error('hasta', ValidationError(u'Seleccione la fecha hasta debe ser mayor a la fecha desde'))


class CapSolicitudNecesidadFirmaElectronicaIndividualForm(forms.Form):
    firma = ExtFileField(label=u'Firma electrónica: ', help_text=u'Solo archivos con formato .p12', ext_whitelist=(".p12",), max_upload_size=6291456, widget=FileInput({'style': 'width:100%;', 'class': 'form-control', 'col': '12', 'accept': '.p12'}))
    password = forms.CharField(label=u'Contraseña', widget=forms.TextInput(attrs={'class': 'form-control', 'col': '12', 'controlwidth': '100%', 'placeholder': 'Contraseña', 'type':'password'}))


class CapSolicitudNecesidadFirmaDocumentoForm(forms.Form):
    firma = ExtFileField(label=u'Documento: ', help_text=u'Solo archivos con formato .pdf', ext_whitelist=(".pdf",), max_upload_size=6291456, widget=FileInput({'style': 'width:100%;', 'class': 'form-control', 'col': '12', 'accept': '.p12'}))


class SolicitudRefinanciamientoPosgradoForm(forms.Form):
    alumno = forms.CharField(label=u'Maestrante', widget=forms.TextInput(attrs={'separator2': True, 'separatortitle': 'Datos Informativos'}), required=False)
    cohorte = forms.CharField(label=u"Cohorte", max_length=250, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '100%'}))
    programa = forms.CharField(label=u"Programa", max_length=250, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'formwidth': '100%'}))
    costoprograma = forms.FloatField(label=u'Costo Programa $', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '50%'}))
    descuento = forms.FloatField(label=u'Valor Descontado $', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '50%'}))
    totalprograma = forms.FloatField(label=u'Total Pagar $', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '33%'}))
    totalpagado = forms.FloatField(label=u'Total Pagado $', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '33%'}))
    totalpendiente = forms.FloatField(label=u'Total Pendiente $', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '33%'}))
    totalvencido = forms.FloatField(label=u'Total Vencido $', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '50%'}))
    cantidadcuota = forms.IntegerField(label=u"Cuotas vencidas", required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    totalrefinancia = forms.FloatField(label=u'Total Pendiente $', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '100%', 'separator2': True, 'separatortitle': 'Datos de la Solicitud'}))
    motivo = forms.ChoiceField(label=u"Motivo Refinanciamiento", required=False, choices=MOTIVO_REFINANCIAMIENTO_POSGRADO, widget=forms.Select())
    otromotivo = forms.CharField(label=u'Otro Motivo', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    archivocertmedico = ExtFileField(label=u'Certificado Médico', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    archivoculmilaboral = ExtFileField(label=u'Certificado Culminación Relación Laboral', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivoafiliaseguro = ExtFileField(label=u'Certificado Afiliación Seguro', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivoactadefun = ExtFileField(label=u'Acta de Defunción', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    archivocertmedicofam = ExtFileField(label=u'Certificado Médico', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    archivootro = ExtFileField(label=u'Justificativo', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    archivosueldo = ExtFileField(label=u'Certificado / Rol de Pago', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))

    # pagorequerido = forms.FloatField(label=u'Pago Requerido para Refinanciar $', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '50%', 'separator2': True, 'separatortitle': 'Propuesta de Refinanciamiento'}))
    # montorefinanciar = forms.FloatField(label=u'Monto a Refinanciar $', initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '50%'}))


class RefinanciamientoPosgradoSubirJustificativoForm(forms.Form):
    archivocertmedico = ExtFileField(label=u'Certificado Médico', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    archivoculmilaboral = ExtFileField(label=u'Certificado Culminación Relación Laboral', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    archivoafiliaseguro = ExtFileField(label=u'Certificado Afiliación Seguro', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    archivoactadefun = ExtFileField(label=u'Acta de Defunción', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    archivocertmedicofam = ExtFileField(label=u'Certificado Médico', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    archivootro = ExtFileField(label=u'Justificativo', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))


class RefinanciamientoPosgradoSubirComprobantePagoForm(forms.Form):
    comprobantepago = ExtFileField(label=u'Comprobante de Pago', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))


class CompromisoPagoSubirDocumentoPersonalForm(forms.Form):
    cedula = ExtFileField(label=u'Cédula de ciudadanía', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    votacion = ExtFileField(label=u'Papeleta de Votación', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))


class CompromisoPagoDatosConyugeForm(forms.Form):
    cedula = forms.CharField(label=u"Cédula", max_length=10, required=False, widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    nombres = forms.CharField(label=u'Nombres', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    apellido1 = forms.CharField(label=u"1er Apellido", max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-75', 'formwidth': '50%'}))
    apellido2 = forms.CharField(label=u"2do Apellido", max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-75', 'formwidth': '50%'}))
    genero = forms.ModelChoiceField(label=u"Género", required=False, queryset=Sexo.objects.all(), widget=forms.Select(attrs={'formwidth': '50%'}))
    estadocivil = forms.ModelChoiceField(label=u'Estado civil', queryset=PersonaEstadoCivil.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    direccion = forms.CharField(label=u'Dirección Domicilio', max_length=100, required=True, widget=forms.TextInput())
    archivocedula = ExtFileField(label=u'Cédula de ciudadanía', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivovotacion = ExtFileField(label=u'Papeleta de Votación', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))


class CompromisoPagoDatosGaranteForm(forms.Form):
    cedula = forms.CharField(label=u"Cédula", max_length=10, required=False, widget=forms.TextInput(attrs={'formwidth': '33%'}))
    personajuridica = forms.ChoiceField(label=u"Persona jurídica", required=False, choices=GARANTE_PERSONA_JURIDICA, widget=forms.Select(attrs={'formwidth': '33%'}))
    relaciondependencia = forms.ChoiceField(label=u"Trabajador Relación Dependencia", required=False, choices=GARANTE_RELACION_DEPENDENCIA, widget=forms.Select(attrs={'formwidth': '33%'}))
    nombres = forms.CharField(label=u'Nombres', max_length=100, required=False, widget=forms.TextInput(attrs={'formwidth': '95%'}))
    apellido1 = forms.CharField(label=u"1er Apellido", max_length=50, required=False, widget=forms.TextInput(attrs={'formwidth': '50%'}))
    apellido2 = forms.CharField(label=u"2do Apellido", max_length=50, required=False, widget=forms.TextInput(attrs={'formwidth': '50%'}))
    genero = forms.ModelChoiceField(label=u"Género", required=False, queryset=Sexo.objects.all(), widget=forms.Select(attrs={'formwidth': '50%'}))
    estadocivil = forms.ModelChoiceField(label=u'Estado civil', queryset=PersonaEstadoCivil.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    direccion = forms.CharField(label=u'Dirección Domicilio', max_length=100, required=True, widget=forms.TextInput(attrs={'formwidth': '95%'}))

    archivocedula = ExtFileField(label=u'Cédula de ciudadanía', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivovotacion = ExtFileField(label=u'Papeleta de Votación', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))

    archivorolpago = ExtFileField(label=u'Rol de Pago', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))

    archivoimpuestopredial = ExtFileField(label=u'Pago Impuesto Prediales', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '33%'}))
    archivoserviciobasico = ExtFileField(label=u'Factura Servicio básico', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '33%'}))
    archivoriseruc = ExtFileField(label=u'RISE o RUC', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '33%'}))

    archivoconstitucion = ExtFileField(label=u'Copia Constitución y estatutos', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '33%'}))
    archivoexistencia = ExtFileField(label=u'Certificado Existencia legal', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '33%'}))
    archivorenta = ExtFileField(label=u'Declaración impuesto renta', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '33%'}))
    archivorepresentante = ExtFileField(label=u'Nombramiento representante', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '33%'}))
    archivoacta = ExtFileField(label=u'Acta junta accionistas', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '33%'}))
    archivoruc = ExtFileField(label=u'RUC', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '33%'}))


class CompromisoPagoDatosConyugeGaranteForm(forms.Form):
    cedula = forms.CharField(label=u"Cédula", max_length=10, required=False, widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    nombres = forms.CharField(label=u'Nombres', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    apellido1 = forms.CharField(label=u"1er Apellido", max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-75', 'formwidth': '50%'}))
    apellido2 = forms.CharField(label=u"2do Apellido", max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-75', 'formwidth': '50%'}))
    genero = forms.ModelChoiceField(label=u"Género", required=False, queryset=Sexo.objects.all(), widget=forms.Select(attrs={'formwidth': '50%'}))
    estadocivil = forms.ModelChoiceField(label=u'Estado civil', queryset=PersonaEstadoCivil.objects.all(), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    direccion = forms.CharField(label=u'Dirección Domicilio', max_length=100, required=True, widget=forms.TextInput())
    archivocedula = ExtFileField(label=u'Cédula de ciudadanía', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))
    archivovotacion = ExtFileField(label=u'Papeleta de Votación', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '50%'}))


class CompromisoPagoSubirDocumentoForm(forms.Form):
    compromisopago = ExtFileField(label=u'Tabla de Amortización', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    contrato = ExtFileField(label=u'Contrato de Maestría', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))
    pagare = ExtFileField(label=u'Pagaré', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304, widget=forms.FileInput(attrs={'formwidth': '100%'}))


class ClienteExternoForm(forms.Form):
    cedula = forms.CharField(label=u"Cédula/Pasaporte", max_length=10, required=False, widget=forms.TextInput(attrs={'class': 'imp-cedula'}))
    nombres = forms.CharField(label=u"Nombres", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido1 = forms.CharField(label=u"1er Apellido", max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    apellido2 = forms.CharField(label=u"2do Apellido", max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    sexo = forms.ModelChoiceField(label=u"Sexo", required=False, queryset=Sexo.objects.all(), widget=forms.Select(attrs={'formwidth': '40%'}))
    nacimiento = forms.DateField(label=u"Fecha Nacimiento o Constitución", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    sector = forms.CharField(label=u"Sector", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))
    direccion = forms.CharField(label=u"Calle Principal", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-75'}))
    direccion2 = forms.CharField(label=u"Calle Secundaria", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-75'}))
    num_direccion = forms.CharField(label=u"Numero Domicilio", max_length=15, required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    telefono = forms.CharField(label=u"Telefono Movil", max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    email = forms.CharField(label=u"Correo Electronico", max_length=240, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))


class SolicitudExternoForm(forms.Form):
    # cuentadeposito = forms.ModelChoiceField(CuentaBanco.objects.filter(status=True), required=True,
    #                                       label=u'Cuenta Bancaria', widget=forms.Select(attrs={'formwidth': '100%'}))
    telefono = forms.CharField(label=u"Teléfono Estudiante", max_length=100, required=True,
                               widget=forms.TextInput(
                                   attrs={'class': 'imp-25', 'onKeyPress': "return soloNumeros(event)",
                                          "tooltip": "CONFIRMAR NÚMERO TELEFONICO"}))
    email = forms.CharField(label=u"Correo Electronico Estudiante", max_length=240, required=True,
                            widget=forms.TextInput(
                                attrs={'class': 'imp-descripcion', "tooltip": "CONFIRMAR CORREO ELECTRONICO"}))
    fecha = forms.DateField(label=u"Fecha Deposito", required=True, initial=datetime.now().date(),
                            input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                             attrs={'class': 'selectorfecha',
                                                                                    'formwidth': '50%',
                                                                                    "tooltip": "INDICAR FECHA DEL DEPOSITO Y/O TRANSFERENCIA, SEGÚN CONSTA EN EL COMPROBANTE BANCARIO"}))

    curso = forms.CharField(label=u"Curso a Pagar", max_length=600, required=True,
                            widget=forms.TextInput(attrs={'class': 'imp-100',
                                                          "tooltip": "IDENTIFICAR EL NOMBRE DEL CURSO AL QUE EFECTUA EL PAGO"}))
    carrera = forms.CharField(label=u"Carrera", max_length=600, required=False,
                              widget=forms.TextInput(attrs={'class': 'imp-100',
                                                            "tooltip": "REGISTRAR EN CASO DE SER ALUMNO DE UNEMI"}))
    observacion = forms.CharField(label=u'Observación', required=True, widget=forms.Textarea({'rows': '2',
                                                                                              'formwidth': '100%',
                                                                                              "tooltip": "DETALLAR INFORMACION RELEVANTE TALES COMO NÚMERO O MES DE CUOTA A PAGAR"}))


class NombreUsuarioForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-50'}))


# Cambios practicas pp
class DocumentoPracticasPPPForm(forms.Form):
    emp = forms.BooleanField(label=u'¿Existe la empresa?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch', 'checked': 'true'}))
    empresa = forms.ModelChoiceField(label=u'Empresa', required=False, queryset=ConvenioEmpresa.objects.filter(status=True), widget=forms.Select(attrs={'col': '12', 'class': 'imp-100 select2', 'style': 'width:100%;'}))
    empresaotra = forms.CharField(label='Empresa otra', widget=forms.TextInput(attrs={'class': 'imp-100', 'disabled': 'disabled'}), required=False)
    tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=False, label=u'Tipo Institución', widget=forms.Select(attrs={'col': '6'}))
    telefonoempresa = forms.CharField(label='Telefono de Empresa', widget=forms.TextInput(attrs={'col': '6'}))
    emailempresa = forms.CharField(label='Email Empresa', widget=forms.TextInput(attrs={'col': '6'}))
    pais = forms.ModelChoiceField(label=u"Pais", queryset=Pais.objects.filter(status=True).order_by('nombre'), required=True, widget=forms.Select(attrs={'col': '6', 'icono': 'fa fa-map-marker'}))
    provincia = forms.ModelChoiceField(label=u"Provincia", queryset=Provincia.objects.filter(status=True), required=True, widget=forms.Select(attrs={'col': '6', 'icono': 'fa fa-map-marker'}))
    canton = forms.ModelChoiceField(label=u" Cantón", queryset=Canton.objects.filter(status=True), required=True, widget=forms.Select(attrs={'col': '6', 'icono': 'fa fa-map-marker'}))
    direccion = forms.CharField(label='Direccion de Empresa', widget=forms.TextInput(attrs={'col': '6'}))
    archivo = ExtFileField(label=u'Subir Archivo Pdf', required=True,
                           help_text=u'Tamaño Maximo permitido 6Mb, en formato  pdf', ext_whitelist=(".pdf",),
                           max_upload_size=6291456)


class TutoriaAdicionalForm(forms.Form):
    horainicio = forms.TimeField(label=u"Hora inicio", input_formats=['%H:%M'],
                                 widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    horafin = forms.TimeField(label=u"Hora fin", input_formats=['%H:%M'],
                              widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'],
                                  widget=DateTimeInput(format='%d-%m-%Y',
                                                       attrs={'class': 'selectorfecha', 'formwidth': '50%'}), )
    fechafin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                    attrs={'class': 'selectorfecha', 'formwidth': '50%'}), )
    Observacion = forms.CharField(label=u'Observacion', widget=forms.Textarea, required=False)
    sugerencia = forms.CharField(label=u'Sugerencias', widget=forms.Textarea, required=False)

    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato doc, docx, xls, xlsx, pdf, png, jpg',
                           ext_whitelist=(".doc", ".docx", ".xls", ".xlsx", ".pdf", ".png", ".jpg"),
                           max_upload_size=10485760)


class GEDCCabForm(forms.Form):
    from ckeditor_uploader.widgets import CKEditorUploadingWidget
    nombre = forms.CharField(label=u'Nombre', max_length=100, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    grupo = forms.ChoiceField(label=u'Para', choices=GEDC_GRUPO, required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    detalle = forms.CharField(label=u"Detalle", required=True, widget=CKEditorUploadingWidget())
    publicar = forms.BooleanField(label=u'¿Publicado?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))


class GEDCFactorForm(forms.Form):
    nombres = forms.CharField(label=u'Nombre', max_length=100, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))


class GEDCIndicadoresForm(forms.Form):
    factores = forms.ModelChoiceField(GEDCFactores.objects.filter(status=True).order_by('nombres'), required=True, label=u'Factor', widget=forms.Select())
    indicador = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    grupo = forms.ChoiceField(label=u'Para', choices=GEDC_GRUPO, required=True, widget=forms.Select(attrs={'formwidth': '50%'}))
    sentido = forms.ChoiceField(label=u'Sentido', choices=GEDC_SENTIDO_INDICADOR, required=True, widget=forms.Select(attrs={'formwidth': '50%'}))
    evalua = forms.BooleanField(label=u'¿Evalua Si/No?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))
    calificacion = forms.BooleanField(label=u'¿Puntuación?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))
    observacion = forms.BooleanField(label=u'¿Detalla Observación?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))
    evidencias = forms.BooleanField(label=u'¿Sube Evidencia?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))


class GEDCPreguntasForm(forms.Form):
    indicador = forms.ModelChoiceField(GEDCIndicador.objects.filter(status=True).order_by('-id'), required=True,
                                       label=u'Indicador', widget=forms.Select())
    orden = forms.IntegerField(label=u"Orden", required=True, initial=0, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    obligatorio = forms.BooleanField(label=u'¿Es Obligatorio?', initial=True, required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))


class GEDCPreguntasEditarForm(forms.Form):
    orden = forms.IntegerField(label=u"Orden", required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    obligatorio = forms.BooleanField(label=u'¿Es Obligatorio?', initial=True, required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))


class GEDCCabEncuestaForm(forms.Form):
    pais = forms.ModelChoiceField(Pais.objects.filter(status=True).order_by('nombre'), required=False, label=u'Pais', widget=forms.Select(attrs={'formwidth': '100%'}))
    otropais = forms.CharField(label=u'Si su país no se encuentra en el listado, por favor registrarlo aquí', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    universidad = forms.ModelChoiceField(InstitucionEducacionSuperior.objects.none(), required=False, label=u'Universidad', widget=forms.Select(attrs={'formwidth': '100%'}))
    otrauniversidad = forms.CharField(label=u'Si su Institución no se encuentra en el listado, por favor registrarlo aquí', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    genero = forms.ChoiceField(label=u'Género', choices=GENEROS_ENCUESTAS, required=True, widget=forms.RadioSelect(attrs={'formwidth': '100%'}))


class EncuestaIndicadoresModalForm(forms.Form):
    nombre = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    encuesta = forms.BooleanField(label=u'¿Encuesta?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))


class EncuestaAmbitoModalForm(forms.Form):
    nombre = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    encuesta = forms.BooleanField(label=u'¿Encuesta?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '100%', 'class': 'js-switch'}))


class FirmaPersonaForm(forms.Form):
    firma = ExtFileField(label=u'Archivo Firma', required=True, help_text=u'Tamaño Maximo permitido 6Mb, en formato  png', ext_whitelist=(".png",),max_upload_size=6291456)
    tipofirma = forms.ChoiceField(choices=TIPO_FIRMAS, label=u'Tipo firma', required=False, widget=forms.Select(attrs={'formwidth': '40%'}))


class LinkMateriaExamenForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', initial='EXAMEN', widget=forms.Textarea(attrs={'rows': '2', 'formwidth': '100%'}), required=True)
    fecha = forms.DateField(label=u"Fecha", required=True, initial=datetime.now().strftime('%d-%m-%Y'), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '33.33%'}))
    horainicio = forms.TimeField(label=u"Hora Inicio", required=True, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '33.33%'}))
    horafin = forms.TimeField(label=u"Hora Fin", required=True, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '33.33%'}))
    linkexamen = forms.CharField(label=u'Link Examen', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class PresentacionDiapositivaEditForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'disabled': True}), required=False, )
    iddiapositivamoodle = forms.IntegerField(label=u'Id Moodle', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '0', 'formwidth': '100%'}))
    estado = forms.ModelChoiceField(Estado.objects.filter(status=True).order_by('order'), required=True, label=u'Estados', widget=forms.Select(attrs={'formwidth': '100%'}))


class CompendioSilaboSemanalEditForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'disabled': True}), required=False, )
    idmcompendiomoodle = forms.IntegerField(label=u'Id Moodle', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '0', 'formwidth': '100%'}))
    estado = forms.ModelChoiceField(Estado.objects.filter(status=True).order_by('order'), required=True, label=u'Estados', widget=forms.Select(attrs={'formwidth': '100%'}))


class TareaPracticaSilaboSemanalEditForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'disabled': True}), required=False, )
    idtareapracticamoodle = forms.IntegerField(label=u'Id Moodle', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '0', 'formwidth': '100%'}))
    estado = forms.ModelChoiceField(Estado.objects.filter(status=True).order_by('order'), required=True, label=u'Estados', widget=forms.Select(attrs={'formwidth': '100%'}))


class TestSilaboSemanalEditForm(forms.Form):
    nombretest = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'disabled': True}), required=False, )
    idtestmoodle = forms.IntegerField(label=u'Id Moodle', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '0', 'formwidth': '100%'}))
    estado = forms.ModelChoiceField(Estado.objects.filter(status=True).order_by('order'), required=True, label=u'Estados', widget=forms.Select(attrs={'formwidth': '100%'}))


class ForoSilaboSemanalEditForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'disabled': True}), required=False, )
    idforomoodle = forms.IntegerField(label=u'Id Moodle', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '0', 'formwidth': '100%'}))
    estado = forms.ModelChoiceField(Estado.objects.filter(status=True).order_by('order'), required=True, label=u'Estados', widget=forms.Select(attrs={'formwidth': '100%'}))


class TareaSilaboSemanalEditForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'disabled': True}), required=False, )
    idtareamoodle = forms.IntegerField(label=u'Id Moodle', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '0', 'formwidth': '100%'}))
    estado = forms.ModelChoiceField(Estado.objects.filter(status=True).order_by('order'), required=True, label=u'Estados', widget=forms.Select(attrs={'formwidth': '100%'}))


class MaterialAdicionalSilaboSemanalEditForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'disabled': True}), required=False, )
    idmaterialesmoodle = forms.IntegerField(label=u'Id Moodle', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '0', 'formwidth': '100%'}))
    estado = forms.ModelChoiceField(Estado.objects.filter(status=True).order_by('order'), required=True, label=u'Estados', widget=forms.Select(attrs={'formwidth': '100%'}))


class GuiaDocenteSilaboSemanalEditForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'disabled': True}), required=False, )
    idguiadocentemoodle = forms.IntegerField(label=u'Id Moodle', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '0', 'formwidth': '100%'}))
    estado = forms.ModelChoiceField(Estado.objects.filter(status=True).order_by('order'), required=True, label=u'Estados', widget=forms.Select(attrs={'formwidth': '100%'}))


class GuiaEstudianteSilaboSemanalEditForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'disabled': True}), required=False, )
    idguiaestudiantemoodle = forms.IntegerField(label=u'Id Moodle', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '0', 'formwidth': '100%'}))
    estado = forms.ModelChoiceField(Estado.objects.filter(status=True).order_by('order'), required=True, label=u'Estados', widget=forms.Select(attrs={'formwidth': '100%'}))


class VideoMagistralSilaboSemanalEditForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'disabled': True}), required=False, )
    idvidmagistralmoodle = forms.IntegerField(label=u'Id Moodle', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '0', 'formwidth': '100%'}))
    estado = forms.ModelChoiceField(Estado.objects.filter(status=True).order_by('order'), required=True, label=u'Estados', widget=forms.Select(attrs={'formwidth': '100%'}))


class NotificacionDeudaPeriodoForm(forms.Form):
    periodo = forms.ModelChoiceField(label=u"Periodo Académico", queryset=Periodo.objects.filter(status=True), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    fechainicionotificacion = forms.DateField(label=u"Fecha de inicio", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '35%'}))
    fechafinnotificacion = forms.DateField(label=u"Fecha de fin", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '35%'}))
    vigente = forms.BooleanField(label=u'Vigente', required=True)
    archivo = ExtFileField(label=u'Adjuntar archivo', required=True, help_text=u'Adjunte un archivo. Tamaño Maximo permitido 10Mb, en formato png, pdf, jpg, jpeg', ext_whitelist=(".pdf", ".doc", ".docx",), max_upload_size=10240)
    logicanotificacion = forms.CharField(label=u'Lógica', widget=forms.Textarea(attrs={'rows': '15'}), required=True)
    coordinaciones = forms.ModelMultipleChoiceField(label=u'Coordinación', required=True, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}), queryset=Coordinacion.objects.filter(status=True).order_by('nombre'))


class BecaTipoConfiguracionForm(forms.Form):
    becatipo = forms.ModelChoiceField(BecaTipo.objects.filter(vigente=True), required=True, label=u'Tipo beca')
    becamonto = forms.FloatField(label=u"Monto de Beca", initial="0.00", required=True, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '35%'}))
    becameses = forms.ChoiceField(label=u'Cantidad de meses', required=True, choices=MESES_NUMBER_CHOICES, widget=forms.Select(attrs={'class': 'input-medium', 'formwidth': '35%'}))
    becamensual = forms.FloatField(label=u"Monto por mes", initial="0.00", required=False, widget=forms.TextInput(attrs={'class': 'imp-moneda', 'decimal': '2', 'formwidth': '30%', 'readonly': True}))
    requisitosbecas = forms.ModelMultipleChoiceField(label=u'Requisito Becas', required=True,
                                                     widget=forms.SelectMultiple(attrs={'formwidth': '100%'}),
                                                     queryset=DetalleRequisitoBeca.objects.filter(visible=True, status=True).order_by('numero'))

    documentos = forms.ModelMultipleChoiceField(label=u'Documenentos necesarios becas', required=False,
                                                     widget=forms.SelectMultiple(attrs={'formwidth': '100%'}),
                                                     queryset=DocumentoBecaTipoConfiguracion.objects.filter(visible=True, status=True).order_by('numero'))

    def bloquear(self):
        deshabilitar_campo(self, 'becatipo')

    def adicionar(self, becaperiodo):
        self.fields['becatipo'].queryset = BecaTipo.objects.filter(vigente=True).exclude(pk__in=BecaTipoConfiguracion.objects.filter(becaperiodo=becaperiodo).values_list('becatipo_id', flat=True))

    def editar(self, x):
        self.fields['becatipo'].queryset = BecaTipo.objects.filter(pk=x.becatipo.id)


class ConfiguracionInformePPPForm(forms.Form):
    from inno.models import InsumoInformeInternadoRotativo
    mes = forms.ChoiceField(label=u'Mes', choices=MESES_CHOICES, initial=datetime.now().date().month, required=True, widget=forms.Select(attrs={'formwidth': '100%', 'col':'6', 'style':'width:100%'}))
    anio = forms.IntegerField(label=u'Año', initial=datetime.now().date().year, required=True, widget=forms.TextInput(attrs={'formwidth': '100%', 'col':'6', 'type':'number'}))
    objetivo = forms.CharField(label=u'Objetivo', widget=forms.Textarea(attrs={'rows': '2', 'col':'12'}), required=True)
    # insumo = forms.ModelChoiceField(label=u"Insumo", queryset=InsumoInformeInternadoRotativo.objects.filter(status=True), required=False, widget=forms.Select({'class': 'select2'}))


class CarreraParticipanteForm(forms.Form):
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.filter(status=True).exclude(coordinacion=9), required=False, widget=forms.Select({'class': 'select2'}))
    # cupos = forms.IntegerField(label=u"Cupo", initial=0, widget=forms.TextInput(attrs={'class': 'imp-number'}),required=False)


class PerfilProfesionalForm(forms.Form):
    perfil = forms.CharField(label="Perfil", required=False, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    resultados_aprendizaje = forms.CharField(label="Resultado aprendizaje", required=False, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    asignatura = forms.ModelMultipleChoiceField(label=u'Asignatura', queryset=Asignatura.objects.filter(status=True), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))

    def filtro(self, carrera):
        lista_asignaturas = AsignaturaMalla.objects.values_list('asignatura__pk', flat=True).filter(status=True, malla__carrera=carrera, malla__vigente=True)
        self.fields['asignatura'].queryset = Asignatura.objects.filter(pk__in=lista_asignaturas)


class BeneficiariosForm(forms.Form):
    nombre = forms.CharField(label="Nombre", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    caracteristica = forms.CharField(label="Caracteristicas", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    direccion = forms.CharField(label="Dirección", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    especifico = forms.BooleanField(label=u'¿Es específico?', initial=True, required=False, widget=forms.CheckboxInput(attrs={'class': 'imp-100'}))
    representante = forms.CharField(label="Representante", max_length=140, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    cargo_repre = forms.ModelChoiceField(label="Cargo Representante", required=False, queryset=CargoBeneficiario.objects.filter(status=True), widget=forms.Select(attrs={'class': 'imp-100'}))
    telefono = forms.CharField(label="Teléfono", max_length=10, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    correo = forms.CharField(label="Correo", max_length=140, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    coordenadas = forms.CharField(label="Coordenadas", max_length=140, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'readonly': True}))
    num_beneficiario_directo = forms.IntegerField(label="Número De Beneficiario Directo", required=True, widget=forms.NumberInput(attrs={'class': 'imp-100'}))
    num_beneficiario_indirecto = forms.IntegerField(label="Número De Beneficiario Indirecto", required=True, widget=forms.NumberInput(attrs={'class': 'imp-100'}))
    archivo = ExtFileField(label=u'Acuerdo/Convenio', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf, jpg, jpeg', ext_whitelist=(".pdf", ".jpeg", ".jpg"), max_upload_size=10485760, widget=FileInput({'accept': 'application/pdf'}))


class InvolucradoForm(forms.Form):
    nombre = forms.CharField(label="Nombre", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    direccion = forms.CharField(label="Dirección", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    representante = forms.CharField(label="Representante", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    cargo_repre = forms.ModelChoiceField(label="Cargo Representante", required=True, queryset=CargoBeneficiario.objects.filter(status=True), widget=forms.Select(attrs={'class': 'imp-100'}))
    telefono = forms.CharField(label="Teléfono", max_length=10, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    correo = forms.CharField(label="Correo", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    tipoActor = forms.ChoiceField(label=u"Tipo de actor:", choices=TIPO_ACTORES, required=True, widget=forms.Select(attrs={'class': 'imp-100', 'formwidth': '40%'}))
    coordenadas = forms.CharField(label="Coordenadas", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'imp-100', 'readonly': True}))
    archivo = ExtFileField(label=u'Acuerdo/Convenio', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf, jpg, jpeg', ext_whitelist=(".pdf", ".jpeg", ".jpg"), max_upload_size=10485760, widget=FileInput({'accept': 'application/pdf'}))


class ArProblemaForm(forms.Form):  # Para Crear Problema y editar problema. efecto y causa
    detalle = forms.CharField(label="Detalle", required=True, widget=forms.Textarea(attrs={'class': 'imp-100'}))


class ArProb_CausaEfectoForm(forms.Form):  # Para crear Causa y Efecto en el mismo form
    causa = forms.CharField(label="Causa", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    efecto = forms.CharField(label="Efecto", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))


class DatoSecundarioForm(forms.Form):
    descripcion = forms.CharField(label="Descripción", required=True, widget=forms.Textarea(attrs={'class': 'imp-100'}))


class LineaBaseForm(forms.Form):  # Para crear Causa y Efecto en el mismo form
    item = forms.CharField(label="Item", required=True, widget=forms.TextInput(attrs={'class': 'imp-100', 'readonly': 'True'}))
    descripcion = forms.CharField(label="Descripción", required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    metodo = forms.CharField(label="Método", required=True, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    fuente = forms.CharField(label="Medio de verificación", required=True, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    linea_base = forms.CharField(label="Datos Línea Base", required=True, widget=forms.Textarea(attrs={'class': 'imp-100'}))


class ArObjetivoForm(forms.Form):  # Para Crear Problema y editar problema. efecto y causa
    detalle = forms.CharField(label="Detalle", required=True, widget=forms.Textarea(attrs={'class': 'imp-100'}))


class MarcoLogicoForm2(forms.Form):  # Para crear Causa y Efecto en el mismo form
    resumen_narrativo = forms.CharField(label="Resumen Narrativo", required=True, widget=forms.Textarea(attrs={'class': 'imp-100', 'readonly': 'True'}))
    dato = forms.CharField(label="Dato de línea base", required=True, widget=forms.Textarea(attrs={'class': 'imp-100', 'readonly': 'True'}))
    indicador = forms.CharField(label="Indicador", required=True, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    fuente = forms.CharField(label="Medio de verificación / Fuente", required=True, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    supuestos = forms.CharField(label="Supuestos", required=True, widget=forms.Textarea(attrs={'class': 'imp-100'}))
    cumplimiento = forms.DecimalField(label="% Cumplimiento", required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))

    def deshabilitar_campo(form, campo):
        form.fields[campo].widget.attrs['readonly'] = True


class CronogramaForm(forms.Form):
    responsable = forms.ModelMultipleChoiceField(label=u'Responsable', queryset=Profesor.objects.filter(status=True), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))
    descripcion = forms.CharField(label="Descripción", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    fecha_inicio = forms.DateField(label=u"Fecha de inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    fecha_fin = forms.DateField(label=u"Fecha de finalización", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)


class PresupuestoForm(forms.Form):
    cantidad = forms.IntegerField(label="Cantidad", required=False, widget=forms.NumberInput(attrs={'class': 'imp-100', 'id': 'cantidad', 'onkeyup': 'Calcular()'}))
    suministro = forms.ModelChoiceField(label="Insumo", required=False, queryset=Suministro.objects.filter(status=True,activo=True), widget=forms.Select(attrs={'class': 'imp-100', 'onchange': 'Calcular()'}))
    # otros = forms.BooleanField(label=u'Otro suministro', required=False, widget=forms.CheckboxInput(attrs={'class': 'imp-100'}))
    # insumo = forms.CharField(label="Insumo", max_length=140, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    especificaciones = forms.CharField(label="Especificaciones", max_length=140, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'readonly': 'True'}))
    costo_unitario = forms.DecimalField(label="Costo unitario", required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'id': 'costo', 'readonly': 'True', 'onchange': 'Calcular()'}))
    aplica_iva = forms.BooleanField(label=u'Aplica iva', required=False, widget=forms.CheckboxInput(attrs={'class': 'imp-100', 'disabled': 'True'}))
    subtotal = forms.DecimalField(label="Subtotal", required=False, widget=forms.TextInput(attrs={'class': 'imp-control', 'id': 'subtotal', 'readonly': 'True'}))
    iva = forms.DecimalField(label="Iva", required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'id': 'iva', 'readonly': 'True'}))
    total = forms.DecimalField(label="Total", required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'id': 'total', 'readonly': 'True'}))

class SuministroForm(forms.Form):
    rubro = forms.CharField(label="Insumo", max_length=140, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    especificacion = forms.CharField(label="Especificación", max_length=140, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    costo_unitario = forms.DecimalField(label="Costo unitario", required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    aplica_iva = forms.BooleanField(label=u'Aplica iva', required=False, widget=forms.CheckboxInput(attrs={'class': 'imp-100'}))
    activo = forms.BooleanField(label=u'Activo',initial=True, required=False, widget=forms.CheckboxInput(attrs={'class': 'imp-100'}))


class RedaccionForm(forms.Form):
    antecedentes = forms.CharField(label="Antecedentes", required=True, widget=CKEditorUploadingWidget())
    descripcion = forms.CharField(label="Descripción", required=True, widget=CKEditorUploadingWidget())
    deteccion_necesidades = forms.CharField(label="Detección Necesidades", widget=CKEditorUploadingWidget())
    justificacion = forms.CharField(label="Justificación", required=True, widget=CKEditorUploadingWidget())
    Pertinencia = forms.CharField(label="Pertinencia", required=True, widget=CKEditorUploadingWidget())
    metodologia = forms.CharField(label="Metodologia", required=True, widget=CKEditorUploadingWidget())
    seguimiento = forms.CharField(label="Seguimiento", required=True, widget=CKEditorUploadingWidget())
    evaluacion = forms.CharField(label="Evaluación", required=True, widget=CKEditorUploadingWidget())
    producto = forms.CharField(label="Producto", required=True, widget=CKEditorUploadingWidget())
    Bibliografia = forms.CharField(label="Bibliografía", required=True, widget=CKEditorUploadingWidget())
    objetivo_general = forms.CharField(label="Objetivo General", required=True, widget=CKEditorUploadingWidget())
    objetivos_especificos = forms.CharField(label="Objetivos Específicos", required=True, widget=CKEditorUploadingWidget())
    convenio = forms.CharField(label="Convenios", required=True, widget=CKEditorUploadingWidget())


class AnexosForm(forms.Form):
    titulo = forms.CharField(label="Titulo", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
    archivo = ExtFileField(label=u'Archivo', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf, jpg, jpeg', ext_whitelist=(".pdf", ".jpeg", ".jpg"), max_upload_size=10485760, widget=FileInput({'accept': 'application/pdf'}))


class ParticipanteProfesorForm2(forms.Form):
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor', widget=forms.TextInput(attrs={'select2search': 'true'}))
    horas = forms.IntegerField(label=u"Horas asignadas distributivo", initial=0, widget=forms.TextInput(attrs={'class': 'imp-number'}))
    nivel = forms.ModelMultipleChoiceField(label=u'Nivel segun malla', queryset=NivelMalla.objects.filter(status=True).order_by('nombre'), required=True)

    def editar(self, docente):
        self.fields['profesor'].widget.attrs['profesor'] = docente.persona.flexbox_repr() if docente.persona else " "
        self.fields['profesor'].initial = docente.id

    def bloqueo(self, campo):
        deshabilitar_campo(self, campo)


class ParticipanteProfesorVinculacionForm(forms.Form):
    tipo = forms.ChoiceField(label=u"Tipo Docente", required=False, choices=TIPO_PARTICIPANTE_DOCENTE_VINCULACION, widget=forms.Select(attrs={'col': '6'}))
    profesor = forms.IntegerField(initial=0, required=False, label=u'Profesor', widget=forms.TextInput(attrs={'select2search': 'true', 'fieldbuttons': [{'id': 'add_externo', 'tooltiptext': 'Agregar Nuevo Docente Externo', 'btnclasscolor': 'btn-success','btnfaicon': 'fa-plus-square'}]}))
    horas = forms.IntegerField(label=u"Horas asignadas distributivo", initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-number'}))
    nivel = forms.ModelMultipleChoiceField(label=u'Nivel segun malla', queryset=NivelMalla.objects.filter(status=True).order_by('nombre'), required=False)


class CargoBeneficiarioFrom(forms.Form):
    descripcion = forms.CharField(label=u"Descripción", widget=forms.TextInput(attrs={'formwidth': '100%'}))


class ResolucionForm(forms.Form):
    resolucion = forms.CharField(label="Número de resolución", max_length=140, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
    archivo = ExtFileField(label=u'Archivo', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf, jpg, jpeg', ext_whitelist=(".pdf", ".jpeg", ".jpg"), max_upload_size=10485760, widget=FileInput({'accept': 'application/pdf'}))


class PersonaPPLForm(forms.Form):
    fechaingresoppl = forms.DateField(label=u'Fecha de Ingreso', initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '12'}))
    fechasalidappl = forms.DateField(label=u'Fecha de Salida', required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    centrorehabilitacion = forms.CharField(label=u'Centro de Rehabilitación Social', max_length=500, initial='', required=False, widget=forms.TextInput(attrs={'col': '12'}))
    lidereducativo = forms.CharField(label=u'Lider educativo', max_length=500, initial='', required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    correolidereducativo = forms.CharField(label=u'Correo electrónico del lider educativo', max_length=250, initial='', required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    telefonolidereducativo = forms.CharField(label=u'Teléfono del lider educativo', max_length=100, initial='', required=False, widget=forms.TextInput(attrs={'class': 'imp-25'}))
    observacionppl = forms.CharField(label=u"Observación Persona Privada Libertad", max_length=500, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    archivoppl = ExtFileField(label=u'Archivo PPL', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)


class CabPadronElectoralForm(forms.Form):
    periodo = forms.ModelChoiceField(label=u"Periodo Académico", queryset=Periodo.objects.filter(status=True), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    fecha = forms.DateField(label=u"Fecha Elección", input_formats=['%d-%m-%Y'], required=True,
                            widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'labelwidth': '150px', 'formwidth': '50%'}))
    fechalimiteconfirmacionsede = forms.DateField(label=u"Fecha Limite Confirmación de Sede", input_formats=['%d-%m-%Y'], required=False,
                                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'labelwidth': '150px', 'formwidth': '50%'}))
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    activo = forms.BooleanField(label=u'¿Activo?', required=False,
                                widget=forms.CheckboxInput(attrs={'formwidth': '30%', 'class': 'js-switch'}))
    puede_justificar = forms.BooleanField(label=u'¿Puede Justificar?', required=False,
                                          widget=forms.CheckboxInput(attrs={'formwidth': '30%', 'class': 'js-switch'}))
    activo_ingreso_acta = forms.BooleanField(label=u'¿Activo para ingreso de acta?', required=False,
                                             widget=forms.CheckboxInput(attrs={'formwidth': '30%', 'class': 'js-switch'}))
    utiliza_sede = forms.BooleanField(label=u'¿Utiliza Sede?', required=False,
                                      widget=forms.CheckboxInput(attrs={'formwidth': '30%', 'class': 'js-switch'}))
    confirmacion_sede = forms.BooleanField(label=u'¿Habilitar formulario de confirmación de sede?', required=False,
                                           widget=forms.CheckboxInput(attrs={'formwidth': '30%', 'class': 'js-switch'}))
    asignacion_aleatoria = forms.BooleanField(label=u'¿Asignación de responsable de mesas?', required=False,
                                              widget=forms.CheckboxInput(attrs={'formwidth': '30%', 'class': 'js-switch'}))
    porcentaje_estudiantes = forms.DecimalField(label="% Calculo Estudiantes", required=False, widget=forms.TextInput(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    porcentaje_administrativos = forms.DecimalField(label="% Calculo Administrativos", required=False, widget=forms.TextInput(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    texto_docente = forms.CharField(label=u'Reglamento Docente', widget=forms.Textarea(attrs={'formwidth': '100%', 'rows': '1'}), required=False)
    texto_estudiantes = forms.CharField(label=u'Reglamento Estudiante', widget=forms.Textarea(attrs={'formwidth': '100%', 'rows': '1'}), required=False)
    texto_administrativos = forms.CharField(label=u'Reglamento Administrativos', widget=forms.Textarea(attrs={'formwidth': '100%', 'rows': '1'}), required=False)


class JustificativoFaltaVotacionVirtual(FormModeloBase):
    documento_validador = ExtFileField(label=u'Subir, Copia de cédula o copia de papeleta de votaciòn o certificado emitido por UPC de vivienda', required=True,
                                       help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg',
                                       ext_whitelist=(".pdf", ".jpg", ".jpeg",), max_upload_size=4194304,
                                       widget=forms.FileInput(attrs={'formwidth': '100%', 'class': 'dropify'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class JustificativoFaltaVotacionPresencial(FormModeloBase):
    certificado_medico = ExtFileField(label=u'Impedimento físico o enfermedad', required=False,
                                      help_text=u'Subir Certificado médico de centro de salud publica o IESS, Tamaño maximo 4mb en formato pdf, jpg, jpeg',
                                      ext_whitelist=(".pdf", ".jpg", ".jpeg",), max_upload_size=4194304,
                                      widget=forms.FileInput(attrs={'formwidth': '100%', 'class': 'dropify'}))
    certificado_upc = ExtFileField(label=u'Fué detenido el día de las elecciones', required=False,
                                   help_text=u'Subir Certificado de UPC de haber sido detenido, Tamaño maximo 4mb en formato pdf, jpg, jpeg',
                                   ext_whitelist=(".pdf", ".jpg", ".jpeg",), max_upload_size=4194304,
                                   widget=forms.FileInput(attrs={'formwidth': '100%', 'class': 'dropify'}))
    certificado_defuncion = ExtFileField(label=u'Fallecio un familiar hasta de 4to grado de consanguinidad', required=False,
                                         help_text=u'Subir Certificado de defunción, Tamaño maximo 4mb en formato pdf, jpg, jpeg',
                                         ext_whitelist=(".pdf", ".jpg", ".jpeg",), max_upload_size=4194304,
                                         widget=forms.FileInput(attrs={'formwidth': '100%', 'class': 'dropify'}))
    certificado_licencia = ExtFileField(label=u'Cuenta con licencia y no pudo presentarse al sufragio', required=False,
                                        help_text=u'Subir Certificado de licencia, Tamaño maximo 4mb en formato pdf, jpg, jpeg',
                                        ext_whitelist=(".pdf", ".jpg", ".jpeg",), max_upload_size=4194304,
                                        widget=forms.FileInput(attrs={'formwidth': '100%', 'class': 'dropify'}))
    certificado_alterno = ExtFileField(label=u'Cuenta con un justificativo distinto a las causales anteriores', required=False,
                                       help_text=u'Subir Certificado Alterno, Tamaño maximo 4mb en formato pdf, jpg, jpeg',
                                       ext_whitelist=(".pdf", ".jpg", ".jpeg",), max_upload_size=4194304,
                                       widget=forms.FileInput(attrs={'formwidth': '100%', 'class': 'dropify'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '6', 'maxlength': '900', 'placeholder': 'Máximo 150 palabras'}), required=True)


class DetalleJustificativoForm(forms.Form):
    from sga.models import ESTADO_JUSTIFICACION
    accion = forms.ChoiceField(label=u'Acción', choices=ESTADO_JUSTIFICACION, required=True,
                               widget=forms.Select(attrs={'formwidth': '100%'}))
    detalle = forms.CharField(label=u'Detalle', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class ValidarSolicitudesForm(forms.Form):
    from sga.models import ESTADO_SOLICITUD_INFORMACION
    estados = forms.ChoiceField(label=u'Acción', choices=ESTADO_SOLICITUD_INFORMACION[1:], required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    respuesta = forms.CharField(label=u'Respuestas', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class TipoRecursoForm(forms.Form):
    descripcion = forms.CharField(label=u"descripcion", widget=forms.TextInput())


class ConfiguracionRecursoForm(forms.Form):
    tiporecurso = forms.ModelChoiceField(TipoRecurso.objects.filter(status=True), required=False, label=u'Tipo de recurso', widget=forms.Select(attrs={'formwidth': '100%'}))
    carrera = forms.ModelChoiceField(Carrera.objects.filter(status=True), required=False, label=u'Carrera', widget=forms.Select(attrs={'formwidth': '100%'}))
    periodo = forms.ModelChoiceField(Periodo.objects.filter(status=True), required=False, label=u'Periodo', widget=forms.Select(attrs={'formwidth': '100%'}))
    tipoarchivo = forms.ChoiceField(label=u"tipo de archivo", choices=TIPO_ARCHIVO, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))


class RubricaTitulacionForm(forms.Form):
    letra = forms.CharField(max_length=100, label=u'Letra', required=True)
    nombre = forms.CharField(max_length=100, label=u'Nombre', required=True)
    leyendaexcelente = forms.CharField(max_length=100, label=u'Leyenda excelente', required=True)
    excelente = forms.CharField(max_length=2000, label=u'Excelente', widget=forms.Textarea(attrs={'rows': '7'}), required=True)
    leyendamuybueno = forms.CharField(max_length=100, label=u'Leyenda excelente', required=True)
    muybueno = forms.CharField(max_length=2000, label=u'Muy bueno', widget=forms.Textarea(attrs={'rows': '7'}), required=True)
    leyendabueno = forms.CharField(max_length=100, label=u'Leyenda excelente', required=True)
    bueno = forms.CharField(max_length=2000, label=u'Bueno', widget=forms.Textarea(attrs={'rows': '7'}), required=True)
    leyendasuficiente = forms.CharField(max_length=100, label=u'Leyenda excelente', required=True)
    suficiente = forms.CharField(max_length=2000, label=u'Suficiente', widget=forms.Textarea(attrs={'rows': '7'}), required=True)
    puntaje = forms.IntegerField(label=u"Puntaje", initial=0, widget=forms.TextInput(attrs={'class': 'imp-number'}))
    tipotitulacion = forms.ChoiceField(label=u"Tipo de titulación", choices=TIPO_TITULACION, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))


class RubricaTitulacionCabForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=250, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    activa = forms.BooleanField(initial=True, label=u"Activa", required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


class PonderacionRubricaForm(forms.Form):
    nombre = forms.CharField(label=u'Descripcion', required=True, widget=forms.Textarea({'rows': '2', 'formwidth': '100%', }))


class MatricularEspecialForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', help_text=u'Tamaño Maximo permitido 20Mb, en formato xls, xlsx',
                           ext_whitelist=(".xls", ".xlsx"), max_upload_size=20971520)


class ParticipanteTematicaForm(forms.Form):
    participante = forms.ModelChoiceField(ParticipanteGrupoInvestigacion.objects.filter(status=True), required=False,
                                          label=u'Participante', widget=forms.Select(attrs={'formwidth': '100%'}))

    def editar(self, grupo):
        idg = ParticipanteGrupoInvestigacion.objects.values_list('grupo_id', flat=True).filter(status=True, grupo=grupo.tematica.tutor.participante.grupo).distinct()
        self.fields['participante'].queryset = ParticipanteGrupoInvestigacion.objects.filter(status=True, grupo_id__in=idg)


class ItinerarioMallaEspecilidadForm(forms.Form):
    itinerario = forms.ChoiceField(label=u"Itinerario", choices=ITINERARIO_ASIGNATURA_MALLA, required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '6'}), required=True)
    numero = forms.CharField(label=u"Número de resolución CES", max_length=250, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))


class PeriodoMutipleForm(forms.Form):
    periodo = forms.ModelMultipleChoiceField(label=u'Periodo', queryset=Periodo.objects.filter(status=True).order_by('-pk'), required=True, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))


class ActualizacionLocalidadPersonaPadron(forms.Form):
    telefono = forms.CharField(label=u"Teléfono Celular", max_length=10, required=True, widget=forms.TextInput(attrs={'class': 'only-number', 'minlength': '10', 'formwidth': '50%', 'icono': 'fa fa-phone'}))
    email = forms.EmailField(label=u"Correo (Personal)", max_length=200, required=True, widget=forms.TextInput(attrs={'class': 'normal-input', 'formwidth': '50%', 'icono': 'fa fa-envelope'}))
    pais = forms.ModelChoiceField(label=u"Pais Residencia", queryset=Pais.objects.filter(status=True).order_by('nombre'), required=True, widget=forms.Select(attrs={'formwidth': '50%', 'icono': 'fa fa-map-marker'}))
    provincia = forms.ModelChoiceField(label=u"Provincia Residencia", queryset=Provincia.objects.filter(status=True).order_by('nombre'), required=True, widget=forms.Select(attrs={'formwidth': '50%', 'icono': 'fa fa-map-marker'}))
    canton = forms.ModelChoiceField(label=u"Canton Residencia", queryset=Canton.objects.filter(status=True).order_by('nombre'), required=True, widget=forms.Select(attrs={'formwidth': '50%', 'icono': 'fa fa-map-marker'}))
    parroquia = forms.ModelChoiceField(label=u"Parroquia Residencia", queryset=Parroquia.objects.filter(status=True).order_by('nombre'), required=True, widget=forms.Select(attrs={'formwidth': '50%', 'icono': 'fa fa-map-marker'}))
    sector = forms.CharField(label=u'Sector', widget=forms.Textarea(attrs={'rows': '1', 'icono': 'fa fa-map'}), required=True)
    direccion = forms.CharField(label=u'Calle Principal', widget=forms.Textarea(attrs={'rows': '1', 'icono': 'fa fa-street-view'}), required=True)
    direccion2 = forms.CharField(label=u'Calle Secundaria', widget=forms.Textarea(attrs={'rows': '1', 'icono': 'fa fa-street-view'}), required=True)
    ciudadela = forms.CharField(label=u'Ciudadela', widget=forms.Textarea(attrs={'rows': '1', 'icono': 'fa fa-street-view'}), required=True)
    referencia = forms.CharField(label=u'Referencia', widget=forms.Textarea(attrs={'rows': '1', 'icono': 'fa fa-map-signs'}), required=True)


class ActividadConvenioForm(forms.Form):
    actividad = forms.CharField(label=u'Actividad', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato doc, docx, pdf, jpg, png',
                           ext_whitelist=(".doc", ".docx", ".pdf", ".jpg", ".png"), max_upload_size=4194304)


class NotificacionconvenioForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=250, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    mensaje = forms.CharField(label=u'Mensaje', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    dias = forms.IntegerField(label=u'Días', required=False, widget=forms.TextInput(attrs={'class': 'imp-anio', 'decimal': '0'}))


class NotificacionconvenioIndividualForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=250, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    mensaje = forms.CharField(label=u'Mensaje', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class NotificarManualForm(forms.Form):
    notificacion = forms.ModelChoiceField(NotificacionConvenio.objects.filter(status=True), required=True, label=u'Notificación', widget=forms.Select(attrs={'formwidth': '100%'}))


class ParRevisorProduccionCientificaForm(forms.Form):
    revista = forms.ModelChoiceField(label=u'Revista',
                                     queryset=RevistaInvestigacion.objects.filter(status=True).order_by('nombre'),
                                     required=True, widget=forms.Select(
            attrs={'separator2': True, 'separatortitle': 'Datos de la Revista', 'fieldbuttons': [
                {'id': 'add_revista', 'tooltiptext': 'Agregar', 'btnclasscolor': 'btn-success',
                 'btnfaicon': 'fa-plus-square'}]}))
    titulo = forms.CharField(label=u"Título Artículo", widget=forms.Textarea(attrs={'rows': '3'}),
                             required=True)
    fecharevision = forms.DateField(label=u"Fecha Revisión", initial=datetime.now().date(), input_formats=['%Y-%m-%d'],
                                    required=True,
                                    widget=DateTimeInput(format='%Y-%m-%d', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))

    archivo = ExtFileField(label=u'Certificado', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                           ext_whitelist=(".pdf",), max_upload_size=4194304,
                           widget=FileInput({'accept': 'application/pdf', 'formwidth': '50%'}))

    def clean_titulo(self):
        titulo = self.cleaned_data.get('titulo')
        if not titulo.strip():
            raise forms.ValidationError('Título Artículo no debe estar vacio')
        titulo = titulo.strip().upper()
        id = self.data.get('id')
        parrevisiones = ParRevisorProduccionCientifica.objects.filter(titulo=titulo, status=True)
        if id:
            parrevisiones = parrevisiones.exclude((Q(id=id) & Q(status=True)) | (Q(titulo=titulo) & Q(status=False)))
        if parrevisiones:
            raise forms.ValidationError('Título Artículo {} ya se encuentra registrado'.format(titulo))
        return titulo


class ReemplazarInquietudForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo', required=True,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf docx png jpeg',
                           ext_whitelist=(".pdf", ".docx", ".png", ".jpeg"), max_upload_size=4194304,
                           widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'pdf docx png jpeg', 'class': 'dropify'}))


class MesaPadronForm(forms.Form):
    periodo = forms.ModelChoiceField(label=u"Periodo", queryset=CabPadronElectoral.objects.filter(status=True).order_by('-id'), required=True,
                                    widget=forms.Select(attrs={'formwidth': '50%', 'icono': 'fa fa-map-marker'}))
    orden = forms.IntegerField(label=u"Orden", required=False, initial=0, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class ListaPadronForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class GremioPadronForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=True)


class SedeElectoralPeriodoForm(forms.Form):
    provincia = forms.ModelChoiceField(label=u"Provincia", queryset=Provincia.objects.filter(status=True, pais__id=1).order_by('nombre'), required=True,
                                       widget=forms.Select(attrs={'formwidth': '50%', 'icono': 'fa fa-map-marker'}))
    canton = forms.ModelChoiceField(label=u"Canton", queryset=Canton.objects.filter(status=True).order_by('nombre'), required=True,
                                    widget=forms.Select(attrs={'formwidth': '50%', 'icono': 'fa fa-map-marker'}))
    nombre = forms.CharField(label=u'Nombre Institución', widget=forms.Textarea(attrs={'rows': '2'}), required=True)
    latitud = forms.CharField(label=u"Latitud", max_length=550, required=False, widget=forms.TextInput(attrs={'formwidth': '50%', 'class': 'imp-50'}))
    longitud = forms.CharField(label=u"Longitud", max_length=550, required=False, widget=forms.TextInput(attrs={'formwidth': '50%', 'class': 'imp-50'}))
    direccion = forms.CharField(label=u'Dirección', widget=forms.Textarea(attrs={'rows': '2', 'class': 'normal-input'}), required=True)
    provincias = forms.ModelMultipleChoiceField(label=u'Provincias Relacionada', required=True, queryset=Provincia.objects.filter(status=True, pais__id=1).order_by('nombre'), widget=forms.CheckboxSelectMultiple())


class ConfiguracionMesaResponsableForm(forms.Form):
    sede = forms.ModelChoiceField(label=u"Sede Electoral", queryset=SedesElectoralesPeriodo.objects.filter(status=True).order_by('canton__provincia__nombre'), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    tipo = forms.ChoiceField(label=u"Tipo", required=False, choices=TIPO_PERSONA_PADRON, widget=forms.Select(attrs={'formwidth': '50%'}))
    mesa = forms.ModelChoiceField(label=u"Mesa", queryset=MesasPadronElectoral.objects.filter(status=True).order_by('nombre'), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    presidente = forms.ModelChoiceField(label=u"Presidente", queryset=DetPersonaPadronElectoral.objects.select_related('cab').filter(status=True).order_by('persona__apellido1'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    secretario = forms.ModelChoiceField(label=u"Secretario", queryset=DetPersonaPadronElectoral.objects.select_related('cab').filter(status=True).order_by('persona__apellido1'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    vocal = forms.ModelChoiceField(label=u"Vocal", queryset=DetPersonaPadronElectoral.objects.select_related('cab').filter(status=True).order_by('persona__apellido1'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    presidente_alterno = forms.ModelChoiceField(label=u"Presidente Alterno", queryset=DetPersonaPadronElectoral.objects.select_related('cab').filter(status=True).order_by('persona__apellido1'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    secretario_alterno = forms.ModelChoiceField(label=u"Secretario Alterno", queryset=DetPersonaPadronElectoral.objects.select_related('cab').filter(status=True).order_by('persona__apellido1'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    vocal_alterno = forms.ModelChoiceField(label=u"Vocal Alterno", queryset=DetPersonaPadronElectoral.objects.select_related('cab').filter(status=True).order_by('persona__apellido1'), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    totalempadronados = forms.IntegerField(label=u"Total Empadronados", initial=0, widget=forms.TextInput(attrs={'class': 'imp-number', 'formwidth': '50%'}))
    abierta = forms.BooleanField(label=u'¿Abierto?', initial=True, required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    logistica = forms.ModelMultipleChoiceField(label=u'Seleccionar Personal Logistica', queryset=Persona.objects.select_related().filter(status=True).order_by('apellido1'), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '100%'}))

class PersonaEmpadronadoForm(forms.Form):
    tipo = forms.ChoiceField(label=u"Tipo", required=False, choices=TIPO_PERSONA_PADRON, widget=forms.Select(attrs={'formwidth': '100%'}))
    persona = forms.ModelChoiceField(label=u"Persona", queryset=Persona.objects.select_related().filter(status=True).order_by('apellido1'), required=True, widget=forms.Select())
    lugarsede = forms.ModelChoiceField(label=u"Sede", queryset=SedesElectoralesPeriodo.objects.filter(status=True).order_by('canton__nombre'), required=False, widget=forms.Select())
    mesa = forms.ModelChoiceField(label=u"Mesa", queryset=MesasPadronElectoral.objects.filter(status=True), required=False, widget=forms.Select())
    lugar = forms.CharField(label=u'Lugar', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    puede_justificar = forms.BooleanField(label=u'¿Puede Justificar?', initial=True, required=False, widget=forms.CheckboxInput(attrs={'formwidth': '35%'}))
    enmesa = forms.BooleanField(label=u'¿En Mesa?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '35%'}))
    excluir = forms.BooleanField(label=u'Excluir', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))
    lugarmesa = forms.CharField(label=u'Lugar Mesa', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    codigo_qr = forms.CharField(label=u'CodigoQR', required=False, max_length=200, widget=forms.TextInput(attrs={'formwidth': '50%'}))
    validado = forms.BooleanField(label=u'Validado?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))



class ComplexivoTribunalCalificadorPosgradoForm(forms.Form):
    profesor = Profesor.objects.filter(status=True)
    presidente = forms.IntegerField(initial=0, required=True, label=u'Presidente', widget=forms.TextInput(attrs={'select2search': 'true'}))
    secretario = forms.IntegerField(initial=0, required=True, label=u'Secretario', widget=forms.TextInput(attrs={'select2search': 'true'}))
    delegado = forms.IntegerField(initial=0, required=True, label=u'Vocal', widget=forms.TextInput(attrs={'select2search': 'true'}))
    fecha = forms.DateField(label=u"Fecha Defensa", required=True, initial=datetime.now().strftime('%d-%m-%Y'), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '30%'}))
    hora = forms.TimeField(label=u"Hora Inicio Defensa", required=True, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '200px'}))
    horafin = forms.TimeField(label=u"Hora Fin Defensa", required=True, initial=str(datetime.now().time()), input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '100px'}))
    fechainiciocalificaciontrabajotitulacion = forms.DateField(label=u"Fecha inicio calificación trabajo de titulación", required=True, initial=datetime.now().strftime('%d-%m-%Y'),input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafincalificaciontrabajotitulacion = forms.DateField(label=u"Fecha fin calificación trabajo de titulación",required=True, initial=datetime.now().strftime('%d-%m-%Y'), input_formats=['%d-%m-%Y'],widget=DateTimeInput(format='%d-%m-%Y',attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    lugar = forms.CharField(label=u'Lugar Defensa', required=False, widget=forms.Textarea(attrs={'rows': '3'}))


class PersonaDepartamentoFirmasForm(forms.Form):
    personadepartamento = forms.IntegerField(initial=0, required=False, label=u'Firma persona', widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipopersonadepartamento = forms.IntegerField(initial=0, required=False, label=u'Tipo Departamento', widget=forms.TextInput(attrs={'select2search': 'true'}))
    denominacionpuesto = forms.IntegerField(initial=0, required=False, label=u'Denominación Puesto', widget=forms.TextInput(attrs={'select2search': 'true'}))
    departamento = forms.IntegerField(initial=0, required=False, label=u'Departamento', widget=forms.TextInput(attrs={'select2search': 'true'}))
    departamentofirma = forms.IntegerField(initial=0, required=False, label=u'Departamento Firma', widget=forms.TextInput(attrs={'select2search': 'true'}))
    tiposubrogante = forms.ModelChoiceField(label=u"Tipo Subrogante", queryset=TipoSubrogante.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())
    activo = forms.BooleanField(label=u'Activo', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    actualidad = forms.BooleanField(label=u'Actualidad', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    fechainicio = forms.DateField(label=u"Fecha Inicio", initial=datetime.now().date(), input_formats=['%Y-%m-%d'], required=True, widget=DateTimeInput(format='%Y-%m-%d', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(), input_formats=['%Y-%m-%d'], required=True, widget=DateTimeInput(format='%Y-%m-%d', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))


class DepartamentoFirmaForm(forms.Form):
    tiposubrogante = forms.ModelChoiceField(label=u"Tipo Subrogante", queryset=TipoSubrogante.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select())


class TipoPersonaDepartamentoFirmaForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", widget=forms.TextInput())


class ItinerarioMallaDocenteDistributivoForm(forms.Form):
    itinerario = forms.ModelMultipleChoiceField(label=u'Itinerarios Malla', required=True, queryset=ItinerariosMalla.objects.filter(status=True).distinct())


class AsignacionTutorForm(forms.Form):
    tipovinculacion = forms.ChoiceField(choices=TIPO_SOLICITUD_VINCULACION_TUTOR, required=True, label=u'Tipo Vinculación', widget=forms.Select(attrs={'formwidth': '50%'}))
    tipopracticas = forms.ChoiceField(choices=TIPO_PRACTICAS_VINCULACION_TUTOR, required=True, label=u'Tipo', widget=forms.Select(attrs={'formwidth': '50%'}))
    convenio = forms.ModelChoiceField(label=u"Convenios", queryset=ConvenioEmpresa.objects.filter(status=True), required=False, widget=forms.Select())
    acuerdo = forms.ModelChoiceField(label=u"Acuerdos", queryset=AcuerdoCompromiso.objects.filter(status=True), required=False, widget=forms.Select())
    direccion = forms.ModelChoiceField(label=u"Departamento", queryset=Departamento.objects.filter(integrantes__isnull=False, status=True).distinct(), required=False, widget=forms.Select())
    empresanombre = forms.CharField(label=u'Empresa', required=False, max_length=200, widget=forms.TextInput(attrs={'formwidth': '100%', 'separatortitle': u'<i class="fa fa-building"></i> Datos Empresa', 'separator2': 'true'}))
    empresaruc = forms.CharField(label=u'Empresa Ruc', max_length=13, required=False, widget=forms.TextInput(attrs={'formwidth': '50%', 'onKeyPress': "return soloNumeros(event)"}))
    tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=False, label=u'Tipo Institución', widget=forms.Select(attrs={'formwidth': '50%'}))
    sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=False, label=u'Sector Económico', widget=forms.Select(attrs={'formwidth': '100%'}))
    empresatelefonos = forms.CharField(label=u'Teléfonos', max_length=100, required=False, widget=forms.TextInput(attrs={'formwidth': '50%', }))
    empresaemail = forms.EmailField(label=u"Correo", max_length=200, required=False, widget=forms.TextInput(attrs={'class': 'normal-input', 'formwidth': '50%', 'icono': 'fa fa-envelope'}))
    empresapais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    empresaprovincia = forms.ModelChoiceField(label=u'Provincia', queryset=Provincia.objects.filter(status=True), required=False, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '50%'}))
    empresacanton = forms.ModelChoiceField(label=u'Canton', queryset=Canton.objects.filter(status=True), required=False, widget=forms.Select(attrs={'class': 'imp-50', 'formwidth': '100%'}))
    empresadireccion = forms.CharField(label=u'Dirección Empresa', max_length=500, required=False, widget=forms.TextInput(attrs={'formwidth': '100%', 'class': 'normal-input'}))
    dirigidoa = forms.CharField(max_length=200, label=u"Dirigido a: (Nombres y Apellidos)", required=False, widget=forms.TextInput(attrs={'formwidth': '100%', 'class': 'normal-input', 'separatortitle': u'<i class="fa fa-user"></i> Datos Representante Empresa', 'separator2': 'true'}))
    cargo = forms.CharField(max_length=200, label=u"Cargo", required=False, widget=forms.TextInput(attrs={'formwidth': '50%'}))
    telefonos = forms.CharField(label=u'Teléfonos', max_length=100, required=False, widget=forms.TextInput(attrs={'formwidth': '50%', }))
    email = forms.EmailField(label=u"Correo", max_length=200, required=False, widget=forms.TextInput(attrs={'class': 'normal-input', 'formwidth': '50%', 'icono': 'fa fa-envelope'}))
    ccemail = forms.EmailField(label=u"Correo Alternativo", max_length=200, required=False, widget=forms.TextInput(attrs={'class': 'normal-input', 'formwidth': '50%', 'icono': 'fa fa-envelope'}))
    documentoaceptacion = ExtFileField(label=u'Documento de Aceptación', required=False, help_text=u'Tamaño Maximo permitido 8Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=8194304)


class AcuerdoCompromisoAsignacionTutorForm(forms.Form):
    fechaelaboracion = forms.DateField(label=u"Fecha Elaboracion", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '40%'}), required=True)
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '30%'}), required=True)
    fechafinalizacion = forms.DateField(label=u"Fecha finalización", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '30%'}), required=True)
    coordinador = forms.ModelChoiceField(label=u"Coordinador (Unemi)", queryset=ConfiguracionFirmaPracticasPreprofesionales.objects.filter(status=True, activo=True).order_by('nombres'), required=True)
    nombrefirma = forms.CharField(label=u'Persona que firma (Empresa)', required=True, widget=forms.TextInput(attrs={'formwidth': '50%', 'class': 'normal-input'}))
    cargofirma = forms.CharField(label=u'Cargo (Empresa)', required=True, widget=forms.TextInput(attrs={'formwidth': '50%', 'class': 'normal-input'}))
    responsables = forms.ModelMultipleChoiceField(label=u'Responsables (Unemi)', queryset=ConfiguracionFirmaPracticasPreprofesionales.objects.filter(status=True, activo=True).order_by('nombres'), required=True)
    para_practicas = forms.BooleanField(label=u'¿Para Prácticas Profesionales?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))
    para_pasantias = forms.BooleanField(label=u'¿Para Pasantías Profesionales?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '32%', 'class': 'js-switch'}))
    financiamiento = forms.CharField(label=u'Financiamiento', required=True, widget=forms.Textarea(attrs={'rows': '2', 'class': 'normal-input'}))
    tiempocump = forms.CharField(label=u'Tiempo de cumplimiento', required=True, widget=forms.Textarea(attrs={'rows': '2', 'class': 'normal-input'}))
    archivo = ExtFileField(label=u'Acuerdo', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=4194304)


class EmpresaAsignacionTutorForm(forms.Form):
    ruc = forms.CharField(label=u'Ruc', max_length=13, required=False, widget=forms.TextInput(attrs={'formwidth': '30%'}))
    nombre = forms.CharField(label=u'Empresa', max_length=200, widget=forms.TextInput(attrs={'formwidth': '70%'}))
    tipoinstitucion = forms.ChoiceField(choices=TIPO_INSTITUCION, required=False, label=u'Tipo Institución', widget=forms.Select(attrs={'formwidth': '50%'}))
    sectoreconomico = forms.ChoiceField(choices=SECTOR_ECONOMICO, required=False, label=u'Sector Económico', widget=forms.Select(attrs={'formwidth': '50%'}))
    representante = forms.CharField(max_length=200, label=u"Representante", widget=forms.TextInput(attrs={'class': 'normal-input', 'formwidth': '50%'}))
    cargo = forms.CharField(max_length=200, label=u"Cargo", widget=forms.TextInput(attrs={'class': 'normal-input', 'formwidth': '50%'}))
    pais = forms.ModelChoiceField(label=u"País", queryset=Pais.objects.filter(status=True), required=True, widget=forms.Select(attrs={'formwidth': '50%'}))
    provincia = forms.ModelChoiceField(label=u'Provincia', queryset=Provincia.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '50%', 'class': 'imp-50'}))
    direccion = forms.CharField(label=u'Dirección', max_length=200, widget=forms.TextInput(attrs={'class': 'normal-input', 'formwidth': '50%'}))
    telefonos = forms.CharField(label=u'Teléfonos', max_length=100, widget=forms.TextInput(attrs={'class': 'normal-input', 'formwidth': '50%'}))
    email = forms.CharField(max_length=200, label=u"Email", required=False, widget=forms.TextInput(attrs={'class': 'normal-input', 'formwidth': '50%'}))

    def editar(self, pais):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=pais)

    def adicionar(self):
        self.fields['provincia'].queryset = Provincia.objects.filter(pais=None)


class GraduadoPosgradoForm(forms.Form):
    numeroactagrado = forms.CharField(label=u'Numero acta de grado', max_length=50, required=False, widget=forms.TextInput(attrs={'class': 'imp-codigo'}))


class Configuracion_Informe_VinculacionForm(forms.Form):
    fecha_inicio = forms.DateField(label=u"Fecha de inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    fecha_fin = forms.DateField(label=u"Fecha de Fin", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}),required=False)
    actividades_extras = forms.BooleanField(label=u'¿Tiene actividades extras?', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


class AprobacionCumplimientoForm(forms.Form):
    tipo = forms.ChoiceField(label=u'Estado Aprobación', choices=ESTADO_REVISION_APROBAR, widget=forms.Select(attrs={'class': 'imp-100'}))
    detalle_aprobacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class Detalle_InformeForm(forms.Form):
    resumen_narrativo = forms.CharField(label=u'Resumen Narrativo', widget=forms.Textarea(attrs={'rows': '3', 'readonly': 'True'}), required=True)
    indicador = forms.CharField(label=u'Indicador', widget=forms.Textarea(attrs={'rows': '3', 'readonly': 'True'}), required=True)
    fuente = forms.CharField(label=u'Fuente', widget=forms.Textarea(attrs={'rows': '3', 'readonly': 'True'}), required=True)
    tarea = forms.CharField(label=u'Tarea', widget=forms.Textarea(attrs={'rows': '3', 'readonly': 'True'}), required=True)
    factor_problema = forms.CharField(label=u'Factor de Problema', widget=forms.Textarea(attrs={'rows': '3'}), required=False)
    factor_exito = forms.CharField(label=u'Factor de Exito', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    porcentaje = forms.CharField(label=u'Porcentaje', widget=forms.NumberInput(attrs={'rows': '3', 'readonly': 'True'}), required=True)

    def deshabilitar_campos(form, campo):
        forms.fields[campo].widget.attr['readonly'] = True


class VideoMagistralSilaboSemanalAdminForm(forms.Form):
    carrera = forms.IntegerField(initial=0, required=False, label=u'Carrera', widget=forms.TextInput(attrs={'select2search': 'true', 'controlwidth': '500px'}))
    materia = forms.IntegerField(initial=0, required=False, label=u'Materia', widget=forms.TextInput(attrs={'select2search': 'true', 'controlwidth': '500px'}))
    semana = forms.ModelChoiceField(label=u"Semana", queryset=SilaboSemanal.objects.filter(id=None), required=False, widget=forms.Select())
    observacion = forms.CharField(widget=forms.Textarea({'cols': '40', 'rows': '5', 'class': 'validate[required]', 'style': "width: 100%;text-transform: uppercase;"}), label=u"Observación", required=False)
    url = forms.CharField(label=u"Url", required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 500Mb, en formato mp4', ext_whitelist=(".mp4",),
                           max_upload_size=429916160)


ESTADOS_INFORMES_FORM = (
    (3, u"APROBADO"),
    (4, u"RECHAZADO"),
)


class AprobacionInformeForm(forms.Form):
    aprobacion = forms.ChoiceField(label=u'Estado de aprobación', choices=ESTADOS_INFORMES_FORM, widget=forms.Select(attrs={'class': 'imp-100', 'col': '12', 'style': 'width:100%'}))
    detalle_aprobacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3', 'col': '12'}), required=False)


class ConfiguracionCambioForm(forms.Form):
    proyecto = forms.ModelChoiceField(label=u"Proyecto", queryset=ProyectosInvestigacion.objects.filter(status=True, aprobacion__in=[1, 7]), required=False, widget=forms.Select({'style': 'width: 100%'}))
    fecha_inicio = forms.DateField(label=u"Fecha de inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    fecha_fin = forms.DateField(label=u"Fecha de Fin", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=10485760)
    tipo = forms.ChoiceField(label=u'Tipo de Configuración', choices=TIPO_CONFIGURACION, widget=forms.Select(attrs={'class': 'imp-100'}))


class FechaGestionForm(forms.Form):
    fecha_inicio = forms.DateField(label=u"Fecha de inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    fecha_fin = forms.DateField(label=u"Fecha de Fin", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    activo = forms.BooleanField(label=u'Activo',initial=True, required=False, widget=forms.CheckboxInput(attrs={'class': 'imp-100'}))

class ActividadExtraForm(forms.Form):
    descripcion = forms.CharField(label="Descripción", max_length=240, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    fecha_inicio = forms.DateField(label=u"Fecha de inicio", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    fecha_fin = forms.DateField(label=u"Fecha de finalización", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}), required=False)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=10485760)


class CambioDocenteVinculacionForm(forms.Form):
    docente = forms.ModelChoiceField(label="Responsable actual", required=True, queryset=Profesor.objects.filter(status=True), widget=forms.Select({'style': 'width: 100%'}))
    cambio = forms.ModelChoiceField(label="Nuevo responsable", required=True, queryset=Profesor.objects.filter(status=True), widget=forms.Select({'style': 'width: 100%'}))


class CambioConvocatoriaForm(forms.Form):
    convocatoria = forms.ModelChoiceField(label="Convocatoria", required=True, queryset=FechaProyectos.objects.filter(status=True), widget=forms.Select({'style': 'width: 100%'}))


class SubirInformeForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=10485760, widget=forms.FileInput(attrs={'class': 'form-control', 'col': 6}))


class PeriodoPromocionDocenteForm(forms.Form):
    fechainicio = forms.DateField(label=u"Fecha Inicio", input_formats=['%d-%m-%Y'], required=True,
                                  widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'labelwidth': '150px', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha Fin", input_formats=['%d-%m-%Y'], required=True,
                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'labelwidth': '150px', 'formwidth': '50%'}))
    nombre = forms.CharField(label="Nombre", max_length=240, required=True, widget=forms.TextInput(attrs={'class': 'imp-100'}))


class ValidarSolicitudAsignacionTutorForm(forms.Form):
    ESTADO_SOLICITUD_VINCULACION_TUTOR = (
        (3, u'ACEPTADO'),
        (2, u'RECHAZADO'),
    )
    estado = forms.ChoiceField(choices=ESTADO_SOLICITUD_VINCULACION_TUTOR, required=True, label=u'Estado', widget=forms.Select(attrs={'formwidth': '100%'}))
    numerohora = forms.IntegerField(label=u'Número Hora', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-number', 'decimal': '0', 'formwidth': '30%'}))
    fechadesde = forms.DateField(label=u"Fecha desde", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '35%'}), required=False)
    fechahasta = forms.DateField(label=u"Fecha hasta", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '35%'}), required=False)
    tipo = forms.ChoiceField(label=u'Tipo', choices=TIPO_PRACTICA_PP, widget=forms.Select(attrs={'formwidth': '50%'}), required=False)
    periodoevidencia = forms.ModelChoiceField(label=u"Periodo de evidencias", queryset=CabPeriodoEvidenciaPPP.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    tutorunemi = forms.ModelChoiceField(label=u"Tutor UNEMI", queryset=Profesor.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    supervisor = forms.ModelChoiceField(label=u"Supervisor UNEMI", queryset=Profesor.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '100%'}))
    asignacionempresapractica = forms.ModelChoiceField(label=u"Asignación de empresa", queryset=AsignacionEmpresaPractica.objects.filter(status=True), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    departamento = forms.ModelChoiceField(label=u"Departamento Empresa", queryset=PracticasDepartamento.objects.filter(status=True).order_by('nombre'), required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '2'}), required=True)


class PeriodoFechasTutoriasForm(forms.Form):
    fecha_limite_horario_tutoria = forms.DateField(label=u"Fecha limite ingreso horario tutoria docente:", initial=datetime.now().date(),
                                                   required=False, input_formats=['%d-%m-%Y'],
                                                   widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha',
                                                                                                  'formwidth': '35%'}))
    fecha_fin_horario_tutoria = forms.DateField(label=u"Fecha limite de tutorias docentes:", initial=datetime.now().date(),
                                                required=False, input_formats=['%d-%m-%Y'],
                                                widget=DateTimeInput(format='%d-%m-%Y',
                                                                     attrs={'class': 'selectorfecha', 'formwidth': '35%'}))
    fecha_maxima_solicitud = forms.DateField(label=u"Fecha maxima para generar solicitud:", initial=datetime.now().date(),
                                             required=False, input_formats=['%d-%m-%Y'],
                                             widget=DateTimeInput(format='%d-%m-%Y',
                                                                  attrs={'class': 'selectorfecha', 'formwidth': '30%'}))

    def clean(self):
        cleaned_data = super(PeriodoFechasTutoriasForm, self).clean()
        if cleaned_data['fecha_limite_horario_tutoria'] > cleaned_data['fecha_fin_horario_tutoria']:
            self.add_error('fecha_limite_horario_tutoria', ValidationError('La fecha de inicio debe ser menor a la fecha fin.'))
        return cleaned_data


class AperturaPeriodoCambioCarreraForm(FormModeloBase):
    # periodo = forms.ModelChoiceField(label=u"Periodo", queryset=Periodo.objects.filter(status=True).order_by('-pk'), required=True, widget=forms.Select(attrs={'formwidth': '94%'}))
    fechaapertura = forms.DateField(label=u"Fecha apertura", initial=datetime.now().date(), required=True, widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6'}))
    fechacierre = forms.DateField(label=u"Fecha cierre", initial=datetime.now().date(), required=True, widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha','col': '6'}))
    fechainiciorecepciondocumentos = forms.DateField(label=u"Fecha inicio recepción de documentos", initial=datetime.now().date(), required=True, widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                                                                                                                  attrs={'class': 'selectorfecha', 'col': '6'}))
    fechacierrerecepciondocumentos = forms.DateField(label=u"Fecha fin recepción de documentos", initial=datetime.now().date(), required=True, widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                                                                                                               attrs={'class': 'selectorfecha', 'col': '6'}))
    fechainiciorequisitosadmision = forms.DateField(label=u"Fecha Inicio revision admision", initial=datetime.now().date(), required=True, widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                                                                                                            attrs={'class': 'selectorfecha', 'col': '6'}))
    fechacierrerequisitosadmision = forms.DateField(label=u"Fecha fin revision admision", initial=datetime.now().date(), required=True, widget=DateTimeInput(format='%d-%m-%Y',
                                                                                                                                                                                         attrs={'class': 'selectorfecha', 'col': '6'}))
    fechainicioremitirdecano = forms.DateField(label=u"Fecha Inicio revision decano", initial=datetime.now().date(), required=True,
                                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6'}))
    fechacierreremitirdecano = forms.DateField(label=u"Fecha Fin revision decano", initial=datetime.now().date(),
                                               required=True, widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6'}))
    fechainiciovaldirector = forms.DateField(label=u"Fecha Inicio revision director", initial=datetime.now().date(),
                                             required=True,
                                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6'}))
    fechacierrevaldirector = forms.DateField(label=u"Fecha Fin revision director", initial=datetime.now().date(),
                                             required=True,
                                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6'}))
    fechainicioremitiraprobados = forms.DateField(label=u"Fecha inicio remitir aprbados", initial=datetime.now().date(),
                                               required=True,
                                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha','col': '6'}))
    fechacierreremitiraprobados = forms.DateField(label=u"Fecha fin remitir aprobados", initial=datetime.now().date(),
                                               required=True,
                                               widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'col': '6'}))
    motivo = forms.CharField(label=u'Motivo apertura', max_length=900, required=True, widget=forms.Textarea(attrs={'col': '12', 'rows': '3'}))
    mensaje = forms.CharField(label=u"Mensaje", required=False, widget=CKEditorUploadingWidget(attrs={'col': '12'}))
    # publico = forms.BooleanField(label=u'Publico?', required=False, initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    coordinacion = forms.ModelMultipleChoiceField(label=u"Coordinación", queryset=Coordinacion.objects.filter(status=True), required=False, widget=forms.SelectMultiple(attrs={'col': '12'}))
    requisitos = forms.ModelMultipleChoiceField(label=u'Requisitos', queryset=RequisitosCambioCarrera.objects.filter(status=True), required=False, widget=forms.SelectMultiple(attrs={'col': '12'}))

    def adicionar(self):
        self.fields['coordinacion'].queryset = Coordinacion.objects.filter(excluir=False).exclude(id__in=[9, 7])
        self.fields['requisitos'].queryset = RequisitosCambioCarrera.objects.filter(status=True)


class DocumentoRequeridoCambioCarreraForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    leyenda = forms.CharField(label=u'Leyenda', widget=forms.Textarea(attrs={'rows': '3', 'style':'text-transform:none'}), required=False)
    archivo = ExtFileField(label=u'Archivo solicitud', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png, docx',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png", ".docx"), max_upload_size=8194304,
                           widget=forms.FileInput(
                               attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg docx'}))
    documentorequerido = forms.BooleanField(label=u'¿Documento requerido?', required=False,widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'formwidth': '100%', 'id': 'id_multiple', 'name': 'multiple', 'data-switchery': 'true'}))
    multiple = forms.BooleanField(label=u'¿Puede subir varios archivos?', required=False,widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'formwidth': '100%', 'id': 'id_multiple', 'name': 'multiple', 'data-switchery': 'true'}))
    externo = forms.BooleanField(label=u'¿Solo estudiantes externos?', required=False,widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'formwidth': '100%', 'id': 'id_externo', 'name': 'externo', 'data-switchery': 'true'}))
    opcional = forms.BooleanField(label=u'¿Requisito Opcional?', required=False, widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'formwidth': '100%', 'id': 'id_opcional', 'name': 'opcional','data-switchery': 'true'}))
    essilabo = forms.BooleanField(label=u'¿Requisito Es Sílabo?', required=False, widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'formwidth': '100%', 'id': 'id_silabo', 'name': 'essilabo','data-switchery': 'true'}))

class ReemplazarDocumentoCambioCarreraForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo solicitud', required=False,
                           help_text=u'Tamaño Maximo permitido 2Mb, en formato pdf',
                           ext_whitelist=".pdf", max_upload_size=2194304,
                           widget=forms.FileInput(attrs={'formwidth': '100%',"data-allowed-file-extensions":"pdf", 'class': 'dropify'}))


class SubirEvidenciaCambioCarreraForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo solicitud', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                           ext_whitelist=".pdf", max_upload_size=8194304,
                           widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'pdf', 'id': 'id_archivo_evidencia'}))


class DignidadElectoralForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'class': 'normal-input'}), required=False)


class SolicitudDignidadForm(forms.Form):
    # dignidad = forms.ModelChoiceField(label=u"Dignidad", queryset=DignidadesElectorales.objects.filter(status=True),  required=True, widget=forms.Select(attrs={'formwidth': '100%'}))
    persona = forms.ModelChoiceField(label=u"Persona", queryset=Persona.objects.select_related().filter(status=True).order_by('apellido1'), required=True, widget=forms.Select())
    solicitud = ExtFileField(label=u'Archivo', required=False,
                             help_text=u'Tamaño Maximo permitido 10Mb, en formato csv xlsx xls',
                             ext_whitelist=(".png", ".jpeg", ".jpg", ".pdf",), max_upload_size=4194304,
                             widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png jpeg jpg pdf', 'class': 'dropify'}))


class MoverInscritoComplexivoForm(forms.Form):
    curso = forms.IntegerField(initial=0, label=u"Módulo", required=True, widget=forms.TextInput({'select2search': 'True'}))


class PeriodoInscripcionFrom(forms.Form):
    periodo = forms.ModelChoiceField(label=u"Periodo",queryset=Periodo.objects.filter(status=True, clasificacion=1).order_by('-pk'),required=True, widget=forms.Select(attrs={'formwidth': '94%'}))
    observacion = forms.CharField(label=u"Descripción", max_length=140, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    fechainicio = forms.DateField(label=u"Fecha de Inicio", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))
    fechafin = forms.DateField(label=u"Fecha de Fin", initial=datetime.now().date(), required=False, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha'}))


# class AsesoramientoSEEForm(FormModeloBase):
#     coordinacion = forms.ModelChoiceField(label=u"Facultad", queryset=Coordinacion.objects.filter(status=True),  required=True, widget=forms.Select())
#     carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.filter(status=True),  required=True, widget=forms.Select())
#     fechaatencion = forms.DateField(label=u"Fecha Atención", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
#     horaatencion = forms.TimeField(label=u"Hora Atención", input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50px', 'div': True, 'readonly': 'readonly'}))
#     titulo = forms.CharField(label=u"Título", max_length=200, widget=forms.TextInput(attrs={'formwidth': '100%'}))
#     tipotrabajo = forms.ModelChoiceField(label=u"Tipo de Trabajo",
#                                          queryset=AsesoramientoSEETipoTrabajo.objects.filter(status=True).order_by('nombre'), required=True, widget=forms.Select())
#     descripcion = forms.CharField(label=u'Resumen del tema', max_length=500, widget=forms.Textarea(attrs={'rows': '8'}),
#                                   required=True, )
class AsesoramientoSEEForm(FormModeloBase):
    coordinacion = forms.ModelChoiceField(label=u"Facultad", queryset=Coordinacion.objects.filter(status=True),  required=True, widget=forms.Select())
    carrera = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.filter(status=True),  required=True, widget=forms.Select())
    # fechaatencion = forms.DateField(label=u"Fecha Atención", initial=datetime.now().date(), input_formats=['%d-%m-%Y'], widget=DateTimeInput({'col': '6'}))
    fechaatencion = forms.DateField(label=u"Fecha Atención", initial=datetime.now().date(), input_formats=['%d-%m-%Y', '%Y-%m-%d'], widget=DateTimeInput(format='%d-%m-%Y',attrs={'class': 'form-control', 'col': '6', 'type':'date'}))
    # horaatencion = forms.TimeField(label=u"Hora Atención", input_formats=['%H:%M'], widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'formwidth': '50px', 'div': True, 'readonly': 'readonly'}))
    horaatencion = forms.TimeField(label=u"Hora Atención", input_formats=['%H:%M'], widget=forms.TimeInput(format='%H:%M', attrs={'class': 'form-control', 'col': '6', 'type':'time', 'div': True, 'readonly': 'readonly'}))
    titulo = forms.CharField(label=u"Título", max_length=200, widget=forms.TextInput(attrs={'class': 'form-control', 'col': '12'}))
    tipotrabajo = forms.ModelChoiceField(label=u"Tipo de Trabajo", queryset=AsesoramientoSEETipoTrabajo.objects.filter(status=True, tipo=1).order_by('nombre'), required=True, widget=forms.Select())
    descripcion = forms.CharField(label=u'Resumen del tema', max_length=500, widget=forms.Textarea({'class': 'form-control', 'col': '12','rows': '2'}), required=True )

class AsesoramientoSEEValidacionForm(forms.Form):
    funcionarioasesortecnico = forms.IntegerField(initial=0, required=False,
                                                  label=u'Funcionario que brinda asesoramiento técnico',
                                                  widget=forms.TextInput(
                                                      attrs={'select2search': 'true', 'formwidth': '50%'}))
    estado = forms.ChoiceField(label=u'Estado Documento', choices=ESTADO_REVISION_ARCHIVO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    horaculminacion = forms.TimeField(
        required=False,
        label=u"Hora culminación",
        initial=str(datetime.now().time().strftime('%H:%M')),
        input_formats=['%H:%M'],
        widget=DateTimeInput(format='%H:%M', attrs={'class': 'selectorhora', 'div': True, }))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=False)

    def clean(self):
        cleaned_data = super(AsesoramientoSEEValidacionForm, self).clean()
        estado = cleaned_data['estado'] if 'estado' in cleaned_data and cleaned_data['estado'] else None
        if not estado:
            self.add_error('estado', ValidationError('Favor seleccione un estado de validación'))
        cleaned_data['horaculminacion'] = cleaned_data['horaculminacion'] if 'horaculminacion' in cleaned_data and cleaned_data['horaculminacion'] and estado == '3' else None
        return cleaned_data

    def editar(self):
        if self.initial['estado'] == 2:
            self.fields['observacion'].widget.attrs['disabled'] = True


class InscripcionManualActividadExtracurricularForm(forms.Form):
    persona = forms.ModelChoiceField(label=u"Persona", queryset=Persona.objects.select_related().filter(status=True).order_by('apellido1'), required=True, widget=forms.Select())


class ReemplazarInformeActividadExtracurricularForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf, jpg, jpeg, png, docx',
                           ext_whitelist=(".pdf", ".jpg", ".jpeg", ".png", ".docx"), max_upload_size=8194304,
                           widget=forms.FileInput(
                               attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg docx'}))


class CorrecionArchivoFinalSustentacionPosgradoForm(forms.Form):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=True, help_text=u'Tamaño Maximo permitido 12Mb, en formato doc, docx', ext_whitelist=(".doc", ".docx",), max_upload_size=20971520)


class SubirAnexoAsesoramientoSeeForm(forms.Form):
    archivoanexo = ExtFileField(label=u'Archivo solicitud', required=True,
                                help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                                ext_whitelist=[".pdf"], max_upload_size=8194304,
                                widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'pdf', 'id': 'id_archivoanexo'}))


class AgendaPracticasTutoriaForm(forms.Form):
    asunto = forms.CharField(label=u"Asunto" + '<span style="color:red;margin-left:2px;"><strong>*</strong></span>', max_length=200, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    fecha = forms.CharField(label=u"Fecha" + '<span style="color:red;margin-left:2px;"><strong>*</strong></span>', max_length=200, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    hora_inicio = forms.ModelMultipleChoiceField(queryset=Turno.objects.filter(status=True, mostrar=True), label=u"Asunto" + '<span style="color:red;margin-left:2px;"><strong>*</strong></span>', widget=forms.Select(attrs={'class': 'selec2', 'formwidth': '100%'}))
    observacion = forms.CharField(label=u'Descripción' + '<span style="color:red;margin-left:2px;"><strong>*</strong></span>', max_length=200, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    url_reunion = forms.CharField(label=u"Enlace de Reunión" + '<span style="color:red;margin-left:2px;"><strong>*</strong></span>', max_length=200, widget=forms.TextInput(attrs={'formwidth': '100%'}))
    estudiantes = forms.ModelMultipleChoiceField(queryset=PracticasPreprofesionalesInscripcion.objects.filter(status=True), label="Estudiantes")


# class CambioInscripcionVinculacionForm(forms.Form):
#     alumno = forms.CharField(label=u'Alumno', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Datos de la Vinculación'}), required=False)
#     carreraactual = forms.CharField(label=u'Carrera', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Carrera / Itinerario Actual'}), required=False)
#     activiades_cargadas = forms.ModelChoiceField(label=u"Actividades", queryset=InscripcionActividadConvalidacionPPV.objects.all(), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Actividades Extracurriculares'}))
#
#     def cargar_actividades(self, participantes):
#
#         activiades = InscripcionActividadConvalidacionPPV.objects.filter(inscripcion__persona=participantes.inscripcion.persona, status= True)
#
#         self.fields['activiades_cargadas'].queryset = activiades

class CambioInscripcionVinculacionForm(forms.Form):
    alumno = forms.CharField(label=u'Alumno', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Datos de la Vinculación'}), required=False)
    carreraactual = forms.CharField(label=u'Carrera', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Carrera / Itinerario Actual'}), required=False)

    activiades_cargadas = forms.CharField(label=u'Actividad', widget=forms.TextInput(attrs={'rows': '3', 'readonly': 'readonly', 'separator2': True, 'separatortitle': 'Actividad Extracurricular:'}), required=False)

    # activiades_cargadas = forms.ModelChoiceField(label=u"Actividades", queryset=InscripcionActividadConvalidacionPPV.objects.all(), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Actividades Extracurriculares'}))

    carreradestino = forms.ModelChoiceField(label=u"Carrera", queryset=Carrera.objects.all(), required=False, widget=forms.Select(attrs={'separator2': True, 'separatortitle': 'Carrera / Itinerario Destino'}))

    def cargar_actividades(self, participantes):
        activiades = InscripcionActividadConvalidacionPPV.objects.filter(inscripcion__persona=participantes.inscripcion.persona, status=True)

        self.fields['activiades_cargadas'].queryset = activiades

    def cargar_otra_carrera(self, participantes):
        carreras = Carrera.objects.filter(inscripcion__persona=participantes.inscripcion.persona,
                                          inscripcion__status=True,
                                          inscripcion__perfilusuario__status=True,
                                          inscripcion__perfilusuario__visible=True,
                                          coordinacion__id__in=[1, 2, 3, 4, 5]).exclude(pk=participantes.inscripcion.carrera.id)

        self.fields['carreradestino'].queryset = carreras


class RecomendacionActividadPPVForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'class': 'normal-input', 'rows': '5'}), required=False)

class InstitucionActividadPPVForm(forms.Form):
    institucion = forms.CharField(label=u'Ingrese:', widget=forms.Textarea(attrs={'class': 'normal-input', 'rows': '2'}), required=False)


class UnidadOrganizacionCurricularForm(forms.Form):
    nombre = forms.CharField(required=True, label=u'Nombre', widget=forms.TextInput(attrs={'maxlength': '400', 'formwidth': '100%', 'controlwidth': '100%'}))
    color = forms.CharField(required=True, label=u'Color', widget=forms.TextInput(attrs={
        'type': 'color', 'pattern': '^#+([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$',
        'maxlength': '400', 'formwidth': '50%', 'controlwidth': '50%'}))


class ConfigurarRegistroAsistenciaForm(forms.Form):
    puedemodificarasistencia = forms.BooleanField(label=u'Puede Modificar Asistencia', required=False, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))
    modificarasistenciafin = forms.DateField(label=u"Fecha Fin Asistencia", required=False, input_formats=['%d-%m-%Y'],
                                             widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))

# actualizar datos desde pre matricula
class ActualizarDatosForm(forms.Form):
    tienediscapacidad = forms.BooleanField(label=u'Tiene Discapacidad?', required=False, widget=CheckboxInput())
    tipodiscapacidad = forms.ModelChoiceField(label=u"Tipo de Discapacidad",
                                              queryset=Discapacidad.objects.filter(status=True), required=False,
                                              widget=forms.Select(attrs={'disabled': 'disabled'}))
    porcientodiscapacidad = forms.FloatField(initial=0, label=u'% de Discapacidad', required=False,
                                             widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'readonly': True}))
    carnetdiscapacidad = forms.CharField(label=u'N° Carnet de Discapacidad', max_length=50, required=False,
                                         widget=forms.TextInput(attrs={'readonly': True}))
    archivo = ExtFileField(label=u'Carnet de Discapacidad', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=4194304)
    institucionvalida = forms.ModelChoiceField(label=u"Institución Valida",
                                               queryset=InstitucionBeca.objects.filter(tiporegistro=2, status=True),
                                               required=False, widget=forms.Select(attrs={'disabled': 'disabled'}))
    zurdo = forms.BooleanField(label=u'Es zurdo?', required=False, widget=CheckboxInput())
    pais = forms.ModelChoiceField(label=u"País de residencia", queryset=Pais.objects.all(), required=True,
                                  widget=forms.Select())
    provincia = forms.ModelChoiceField(label=u"Provincia de residencia", queryset=Provincia.objects.all(),
                                       required=False, widget=forms.Select())
    canton = forms.ModelChoiceField(label=u"Cantón de residencia", queryset=Canton.objects.all(), required=False,
                                    widget=forms.Select())
    parroquia = forms.ModelChoiceField(label=u"Parroquia de residencia", queryset=Parroquia.objects.all(),
                                       required=False, widget=forms.Select())
    direccion = forms.CharField(label=u'Calle principal', max_length=100, required=True, widget=forms.TextInput())
    direccion2 = forms.CharField(label=u'Calle secundaria', max_length=100, required=True, widget=forms.TextInput())
    num_direccion = forms.CharField(label=u'Número de casa', max_length=15, required=True,
                                    widget=forms.TextInput(attrs={'class': 'imp-25'}))
    referencia = forms.CharField(label=u'Referencia', max_length=100, required=True, widget=forms.TextInput())
    sector = forms.CharField(label=u'Sector', max_length=300, required=True, widget=forms.Textarea({'rows': '2', 'formwidth': '100%', "tooltip": "Sector"}))
    telefono = forms.CharField(label=u'Teléfono celular', max_length=15, required=True,
                               widget=forms.TextInput(attrs={'class': 'imp-25'}))
    telefono_conv = forms.CharField(label=u'Teléfono domicilio (fijo)', max_length=15, required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-25'}))
    tipocelular = forms.ChoiceField(label=u'Operadora móvil', choices=TIPO_CELULAR, required=True,
                                    widget=forms.Select(attrs={'class': 'imp-50'}))
    raza = forms.ModelChoiceField(label=u"Etnia", queryset=Raza.objects.all(), required=True,
                                  widget=forms.Select(attrs={'formwidth': '60%'}))
    nacionalidadindigena = forms.ModelChoiceField(label=u"Nacionalidad indigena",
                                                  queryset=NacionalidadIndigena.objects.all(), required=False,
                                                  widget=forms.Select(attrs={'disabled': 'disabled'}))


FUNCIONES_REQUISITOSBECAS_CHOICES = [('', '-------')]
FUNCIONES_REQUISITOSBECAS_CHOICES.extend(
[(chfun[0], chfun[1][0]) for chfun in FUNCIONES_REQUISITOSBECAS_EJECUTAR]
)

class DetalleRequisitoBecaForm(forms.Form):
    requisitobeca = forms.ModelChoiceField(label=u"Requisito Beca", queryset=RequisitoBeca.objects.filter(status=True), required=True, widget=forms.Select(attrs={'class': 'imp-100'}))
    numero = forms.IntegerField(label="Número", required=True, widget=forms.NumberInput(attrs={'class': 'imp-100'}))
    obligatorio = forms.BooleanField(label=u'Es obligatorio?', required=False, widget=CheckboxInput())
    visible = forms.BooleanField(label=u'Es visible?', required=False, widget=CheckboxInput())
    funcionejecutar = forms.ChoiceField(label=u'Función a Ejecutar',
                                        choices=[(chfun[0], chfun[1][0]) for chfun in FUNCIONES_REQUISITOSBECAS_EJECUTAR],
                                        required=False,
                                        widget=forms.Select(attrs={'class': 'imp-100'}))


    def __init__(self, *args, **kwargs):
        super(DetalleRequisitoBecaForm, self).__init__(*args, **kwargs)
        listado = self.fields['funcionejecutar'].choices
        listado.insert(0, ('', '---------'))
        self.fields['funcionejecutar'].choices = listado


class ImportarPreinscritosBecaForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo solicitud', required=True,
                                help_text=u'Tamaño Maximo permitido 4Mb, en formato xlsx, ',
                                ext_whitelist=[".xlsx", ".xls"], max_upload_size=8194304,
                                widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'xlsx, xls'}))


class AreaPolideportivoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=100, required=True, widget=forms.TextInput({'class': 'normal-input'}))
    portada = ExtFileField(label=u'Portada', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato jpg, jpeg, png', ext_whitelist=(".jpg", ".jpeg", ".png"), max_upload_size=8194304, widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg'}))
    fondo = ExtFileField(label=u'Fondo', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato jpg, jpeg, png', ext_whitelist=(".jpg", ".jpeg", ".png"), max_upload_size=8194304, widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg'}))
    descripcion = forms.CharField(required=False, label=u'Descripción', widget=forms.Textarea(attrs={'formwidth': 'span12', 'separator3': True}))
    en_mantenimiento = forms.BooleanField(initial=False, required=False, label=u'¿En Mantenimiento?', widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'formwidth': '50%', 'data-switchery': 'true'}))
    numdias = forms.IntegerField(label=u'Número de días para reservación', initial=0, required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))


class FotoAreaPolideportivoForm(forms.Form):
    orden = forms.IntegerField(label=u'Orden', initial=0, required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    visible = forms.BooleanField(initial=False, required=True, label=u'¿Visible?', widget=forms.CheckboxInput(attrs={'class': 'js-switch', 'formwidth': '50%', 'data-switchery': 'true'}))
    foto = ExtFileField(label=u'Foto', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato jpg, jpeg, png', ext_whitelist=(".jpg", ".jpeg", ".png"), max_upload_size=8194304, widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'png pdf jpg jpeg'}))


class IntegracionCurricularForm(forms.Form):
    from bd.models import FuncionRequisitoIngresoUnidadIntegracionCurricular
    orden = forms.IntegerField(label=u"", widget=forms.HiddenInput())
    funcion = forms.ModelChoiceField(label=u'Función de Requisito Ingreso Unidad Integración Curricular', required=False, queryset=FuncionRequisitoIngresoUnidadIntegracionCurricular.objects.all(), widget=forms.Select(attrs={'formwidth': '100%'}))
    activo = forms.BooleanField(label=u"Activo", required=False, initial=True)
    obligatorio = forms.BooleanField(label=u"Obligatorio", required=False, initial=True)
    enlineamatriculacion = forms.BooleanField(label=u"Valida en la matriculación en línea", required=False, initial=False)


class ResponsableActaAdmisionForm(forms.Form):
    tipo = forms.ChoiceField(label=u'Tipo Responsable',
                                        choices=TIPO_RESPONSABLE,
                                        required=False,
                                        widget=forms.Select(attrs={'class': 'imp-100'}))


    persona = forms.IntegerField(initial=0, required=False, label=u'Responsable',
                                 widget=forms.TextInput(attrs={'select2search': 'true'}))
    tipoprofesor = forms.ModelChoiceField(label=u"Tipo Profesor", queryset=TipoProfesor.objects.all(), required=False,
                              widget=forms.Select())
    cargo = forms.CharField(label=u'Cargo', max_length=200, required=True, widget=forms.TextInput({'class': 'normal-input'}))
    firmadigital = forms.BooleanField(label=u'Firma Digital', required=False, initial=True, widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))


class PeriodoCalificacionForm(forms.Form):
    clasificacion = forms.ChoiceField(label=u'Tipo', choices=CLASIFICACION_PERIODO, required=True, widget=forms.Select(attrs={'class': '', 'formwidth': '50%'}))
    modalidad = forms.ModelChoiceField(label=u"Modalidad", queryset=Modalidad.objects.all(), required=True, widget=forms.Select(attrs={'formwidth': '50%'}))
    periodo = forms.ModelChoiceField(label=u"Período académico", queryset=Periodo.objects.all().none(), required=True, widget=forms.Select(attrs={'formwidth': '100%'}))


class PeridooAsignaturaActaAdmisionForm(forms.Form):
    asignaturaactaadmision = forms.ModelChoiceField(label=u"Tipo Profesor", queryset=AsignaturaActaAdmision.objects.all(), required=False,
                              widget=forms.Select(attrs={
                                  'fieldbuttons':
                                      [
                                            {'id': 'add_asignaturaactaadmision',
                                             'tooltiptext': 'Agregar',
                                             'btnclasscolor': 'btn-success',
                                             'btnfaicon': 'fa-plus-square'},

                                            {'id': 'edit_asignaturaactaadmision',
                                             'tooltiptext': 'Editar',
                                             'btnclasscolor': 'btn-warning',
                                             'btnfaicon': 'fa-edit'}]})
                                                    )



class AsignaturaActaAdmisionForm(forms.Form):
    asignatura = forms.ModelChoiceField(label=u"Asignatura", queryset=Asignatura.objects.filter(status=True),
                                        required=False)
    responsables = forms.ModelMultipleChoiceField(queryset=ResponsableActaAdmision.objects.filter(status=True), label="Estudiantes")


class SubirArchivoRequisitoBecaForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo', required=True,
                                help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                                ext_whitelist=[".pdf"], max_upload_size=8194304,
                                widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'pdf', 'id': 'id_archivoanexo'}))




class ImportarArchivoBecariosForm(forms.Form):
    archivo = ExtFileField(label=u'Archivo solicitud', required=True,
                                help_text=u'Tamaño Maximo permitido 4Mb, en formato xlsx, ',
                                ext_whitelist=[".xlsx", ".xls"], max_upload_size=8194304,
                                widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'xlsx, xls'}))

class AprobarCertificadoIdiomaForm(forms.Form):
    estado = forms.ChoiceField(label=u'Estado', choices=ESTADO_CERTIFICACION_INGLES, required=True,
                               widget=forms.Select(attrs={'formwidth': '50%'}))
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'formwidth': '100%','rows': '3'}), required=True)


class ConfiguracionComplexivoHabilitaPropuestaForm(forms.Form):
    diasalumno = forms.IntegerField(label=u'Número de días habilitado para alumno', initial=0, required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    diasdocente = forms.IntegerField(label=u'Número de días habilitado para docente', initial=0, required=True, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))
    activo = forms.BooleanField(label=u"Activo", required=False, initial=True)


class PreInscripcionPracticasSaludForm(forms.Form):
    periodo = forms.ModelChoiceField(label=u"Periodo", queryset=Periodo.objects.filter(status=True, clasificacion=1).order_by('-pk'), required=True, widget=forms.Select(attrs={'formwidth': '94%'}))
    motivo = forms.CharField(label=u'Motivo Pre-Inscripción', max_length=500, required=True, widget=forms.Textarea(attrs={'formwidth': '94%', 'rows': '2'}))
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha fin", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    mensaje = forms.CharField(label=u'Mensaje', max_length=500, required=False, widget=forms.Textarea(attrs={'formwidth': '94%', 'rows': '2'}))
    coordinacion = forms.ModelMultipleChoiceField(label=u"Coordinación", queryset=Coordinacion.objects.filter(status=True).exclude(pk=9),  required=False,  widget=forms.SelectMultiple(attrs={'formwidth': '94%'}))
    carrera = forms.ModelMultipleChoiceField(label=u'Carrera', queryset=Carrera.objects.filter(status=True), required=False, widget=forms.SelectMultiple(attrs={'formwidth': '94%'}))
    inglesaprobado = forms.BooleanField(label=u'¿Requiere ingles aprobado?', required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))
    computacionaprobado = forms.BooleanField(label=u'¿Requiere computación aprobado?', required=False, initial=False, widget=forms.CheckboxInput(attrs={'formwidth': '33%'}))



class ModeloEvaluativoPosgradoForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=100, required=True,widget=forms.TextInput({'col': '6',}))
    notaaprobar = forms.FloatField(label=u"Nota para Aprobar", required=True,
                                   widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '2', 'col': '6', 'onKeyPress': "return soloNumerosValor(event)", }))

class EtapaTutoriaTitulacionPosgradoForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    clasificacion = forms.ChoiceField(label=u"Clasificación", choices=CLASIFICACION_ETAPA, required=True, widget=forms.Select(attrs={'class': 'imp-100'}))

class ProgramaEtapaTutoriaTitulacionPosgradoForm(FormModeloBase):
    orden = forms.IntegerField(label=u"Orden", required=True, initial=0,widget=forms.TextInput(attrs={'col': '2','type':'number'}))
    etapatutoria = forms.ModelChoiceField(label=u'Etapa tutoría', required=True, queryset=EtapaTemaTitulacionPosgrado.objects.filter(status=True,clasificacion = 1).order_by( 'id'), widget=forms.Select({'col': '12'}))

    def add(self, idconfiguracion,idmecanismo):
        self.fields['etapatutoria'].queryset = EtapaTemaTitulacionPosgrado.objects.filter(status=True,clasificacion = 1).exclude(pk__in = ProgramaEtapaTutoriaPosgrado.objects.values_list("etapatutoria_id", flat=True).filter(status = True, convocatoria__id = idconfiguracion,mecanismotitulacionposgrado_id = idmecanismo ))

    def edit(self, idconfiguracion,id_etapa,idmecanismo):
        self.fields['etapatutoria'].queryset = EtapaTemaTitulacionPosgrado.objects.filter(status=True,clasificacion = 1).exclude(pk__in = ProgramaEtapaTutoriaPosgrado.objects.values_list("etapatutoria_id", flat=True).filter(status = True, convocatoria__id = idconfiguracion,mecanismotitulacionposgrado_id = idmecanismo ).exclude(etapatutoria__id=id_etapa ))

class DetalleModeloEvaluativoPosgradoForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=10, required=False,
                             widget=forms.TextInput({'col': '6', 'onKeyPress': 'return soloNomenclaturas(event)'}))
    alternativa = forms.ModelChoiceField(label=u"Alternativas", queryset=CodigoEvaluacion.objects,
                                         widget=forms.Select({'col': '6'}))

    notamaxima = forms.FloatField(label=u"Nota Máxima", required=True,
                                  widget=forms.TextInput(attrs={'class': 'imp-numbermed-right', 'decimal': '4', 'col': '12', 'onKeyPress': "return soloNumerosValor(event)", }))


    def editar(self):
        deshabilitar_campo(self, 'nombre')

class ArchivoMallasForm(forms.Form):
    archivo = ExtFileField(label=u'Subir Archivo', required=True,
                               help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                               max_upload_size=10485760, widget=FileInput(attrs={'accept': 'application/pdf', 'formwidth': '100%', 'data-allowed-file-extensions': 'pdf'}))

class PersonaAportacionHistorialLaboralForm(FormModeloBase):
    archivo_resumen = ExtFileField(label=u'Archivo Resumen de Aportación', required=True,
                                       help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf',
                                       ext_whitelist=(".pdf",), max_upload_size=20480000,
                                       widget=forms.FileInput(attrs={'accept': '.pdf', 'class': 'dropify'}))
    archivo_detalle = ExtFileField(label=u'Archivo Detalle de Aportación', required=True,
                                       help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf',
                                       ext_whitelist=(".pdf",), max_upload_size=20480000,
                                       widget=forms.FileInput(attrs={'accept': '.pdf', 'class': 'dropify'}))


    def clean(self):
        cleaned_data = super(PersonaAportacionHistorialLaboralForm, self).clean()
        if not(self.fields['archivo_resumen'] and self.fields['archivo_detalle']):
            self.add_error('archivo_resumen', ValidationError('Debe cargar Los 2 del formulario'))
        if not self.fields['archivo_resumen']:
            self.add_error('archivo_resumen', ValidationError('Debe cargar el Archivo Resumen de Aportación'))
        elif not self.fields['archivo_detalle']:
            self.add_error('archivo_detalle', ValidationError('Debe cargar el Archivo Detalle de Aportación'))
        return cleaned_data

class PersonaAportacionHistorialLaboralAspiranteForm(FormModeloBase):
    archivo_resumen = ExtFileField(label=u'Archivo Resumen de Aportación', required=False,
                                       help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf',
                                       ext_whitelist=(".pdf",), max_upload_size=20480000,
                                       widget=forms.FileInput(attrs={'col': '12', 'data-allowed-file-extensions': 'pdf'}))
    archivo_detalle = ExtFileField(label=u'Archivo Detalle de Aportación', required=False,
                                       help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf',
                                       ext_whitelist=(".pdf",), max_upload_size=20480000,
                                       widget=forms.FileInput(attrs={'col': '12', 'data-allowed-file-extensions': 'pdf'}))


    def clean(self):
        cleaned_data = super(PersonaAportacionHistorialLaboralAspiranteForm, self).clean()
        if not(self.fields['archivo_resumen'] and self.fields['archivo_detalle']):
            self.add_error('archivo_resumen', ValidationError('Debe cargar Los 2 del formulario'))
        if not self.fields['archivo_resumen']:
            self.add_error('archivo_resumen', ValidationError('Debe cargar el Archivo Resumen de Aportación'))
        elif not self.fields['archivo_detalle']:
            self.add_error('archivo_detalle', ValidationError('Debe cargar el Archivo Detalle de Aportación'))
        return cleaned_data

class AsignarRubricaForm(forms.Form):
    rubrica =  forms.ModelChoiceField(label=u"Rubrica", queryset=RubricaTitulacionPosgrado.objects.filter(status=True), required=True, widget=forms.Select(attrs={'class': 'imp-100'}))

class AsignarModalidadSustentacionForm(forms.Form):
    modalidad = forms.ChoiceField(label=u'Modalidad Sustentación', choices=MODALIDAD_SUSTENTACION, widget=forms.Select(attrs={'class': 'imp-100'}))

class ActualizarFechaSolicitudForm(forms.Form):
    fecha_solicitud= forms.DateField(label=u"Fecha de solicitud", input_formats=['%d-%m-%Y'], required=False, widget=DateTimeInput(format='%d-%m-%Y',
                                                                           attrs={'class': 'selectorfecha','formwidth': '100%', 'style':'width:100%;'}))

class ComplexivoCalificarPropuestaEnsayoForm(forms.Form):
    correccion = ExtFileField(label=u'Corrección', required=False,
                              help_text=u'Tamaño Maximo permitido 12Mb, en formato pdf, doc, docx',
                              ext_whitelist=(".doc", ".docx", ".pdf",), max_upload_size=12582912)
    observaciones = forms.CharField(label=u'Observaciones', required=False, widget=forms.Textarea(attrs={'rows': '3'}))
    aprobar = forms.BooleanField(label=u"Aprueba el archivo", required=False,
                                 widget=forms.CheckboxInput(attrs={'formwidth': '30%'}))
    rechazar = forms.BooleanField(label=u"Rechazar archivo", required=False,
                                  widget=forms.CheckboxInput(attrs={'formwidth': '50%'}))



    plagio = forms.FloatField(label=u"Porcentaje de Plagio", required=False,
                              widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2'}))

    archivo = ExtFileField(label=u'Reporte de plagio', required=False,
                           help_text=u'Tamaño Maximo permitido 30Mb, en formato pdf',
                           ext_whitelist=(".doc", ".docx", ".pdf",),
                           max_upload_size=30000000)
    calificacion = forms.FloatField(label=u"Calificación", required=False,
                                    widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '2', 'maxlength':'3'}))


class TipoDiscapacidadForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=20, required=False, widget=forms.TextInput(attrs={'class': 'imp-25', 'style': 'width: 100%'}))
    codigo_tthh = forms.CharField(label=u"Código Talento Humano", max_length=20, required=False, widget=forms.TextInput(attrs={'class': 'imp-25', 'style': 'width: 100%'}))

class SubTipoDiscapacidadForm(forms.Form):
    nombre = forms.CharField(label=u"Nombre", max_length=20, required=False, widget=forms.TextInput(attrs={'class': 'imp-25', 'style': 'width: 100%'}))
    descripcion = forms.CharField(label=u'Descripcion', required=False, widget=forms.Textarea(attrs={'rows': '3'}))


class SolicitudRecursosComunicacionInstitucionalForm(forms.Form):
    tipo = forms.ChoiceField(label=u"Tipo de solicitud", choices=TIPO_SOLICITUDRECURSO, required=False, widget=forms.Select(attrs={'class': 'imp-100'}))
    nombre = forms.CharField(label=u'Asunto', max_length=100, required=False,widget=forms.TextInput(attrs={'class': 'imp-100'}))
    descripcion = forms.CharField(label=u'Descripción', max_length=200, required=False,widget=forms.TextInput(attrs={'class': 'imp-100'}))
    objetivo = forms.CharField(label=u'Objetivo', max_length=200, required=False,widget=forms.Textarea(attrs={'class': 'imp-100','rows': '4'}))
    # archivorecurso = ExtFileField(label=u'Producto institucional', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf o png',
    #                                                                         ext_whitelist=(".pdf",".png"), max_upload_size=4194304)
    archivorecurso = ExtFileField(label=u'Producto institucional', required=False, ext_whitelist=(".pdf",".png",".jpg",".zip",".rar"), max_upload_size=50485760, widget=forms.ClearableFileInput(attrs={'multiple': True}))
    manual = ExtFileField(label=u'Manual del producto', required=False, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                                                                            ext_whitelist=(".pdf",), max_upload_size=4194304)

    def ocultararchivo(self):
        self.fields['archivorecurso'].widget = forms.HiddenInput()
        self.fields['archivorecurso'].label = ""
        self.fields['archivorecurso'].help_text = ""
        self.fields['manual'].widget = forms.HiddenInput()
        self.fields['manual'].label = ""
        self.fields['manual'].help_text = ""

    def sololectura(self):
        self.fields['nombre'].widget.attrs['readonly'] = True
        self.fields['descripcion'].widget.attrs['readonly'] = True
        self.fields['objetivo'].widget.attrs['readonly'] = True
        self.fields['tipo'].widget.attrs['readonly'] = True
        self.fields['tipo'].widget.attrs['disabled'] = True
        self.ocultararchivo()

    def ocultarmanual(self):
        self.fields['manual'].widget = forms.HiddenInput()
        self.fields['manual'].label = ""
        self.fields['manual'].help_text = ""

    def ocultarproducto(self):
        self.fields['archivorecurso'].widget = forms.HiddenInput()
        self.fields['archivorecurso'].label = ""
        self.fields['archivorecurso'].help_text = ""

    def ocultartipo(self):
        self.fields['tipo'].widget = forms.HiddenInput()
        self.fields['tipo'].label = ""

    def validar(self):
        self.fields['nombre'].required = True
        self.fields['descripcion'].required = True
        self.fields['objetivo'].required = True

    def validarmanual(self):
        self.fields['manual'].required = True

    def validarproducto(self):
        self.fields['archivorecurso'].required = True

    def tipocreacion(self):
        self.validar()
        self.fields['archivorecurso'].required = True

    def norequeridoarchivo(self):
        self.fields['archivorecurso'].required = False


class ProductoComunicacionInstitucional(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=100, required=False, widget=forms.TextInput(attrs={'class': 'imp-100'}))
    descripcion = forms.CharField(label=u'Descripción', max_length=200, required=False,widget=forms.TextInput(attrs={'class': 'imp-100'}))
    objetivo = forms.CharField(label=u'Objetivo', max_length=200, required=False,widget=forms.Textarea(attrs={'class': 'imp-100', 'rows': '4'}))
    manual = ExtFileField(label=u'Manual del producto', required=True, help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf',
                                                                                ext_whitelist=(".pdf",), max_upload_size=4194304)

    def sololectura(self):
        self.fields['nombre'].widget.attrs['readonly'] = True
        self.fields['descripcion'].widget.attrs['readonly'] = True
        self.fields['objetivo'].widget.attrs['readonly'] = True

class MultimediaProductoComunicacionalForm(forms.Form):
    archivorecurso = ExtFileField(label=u'Archivo', required=True,
                                  ext_whitelist=(".pdf", ".png", ".jpg", ".zip", ".rar"), max_upload_size=50485760,
                                  widget=forms.ClearableFileInput(attrs={'multiple': True}))

class ActualizarProductoComunicacional(forms.Form):
    nombre = forms.CharField(label=u'Nombre', max_length=100, required=False,
                             widget=forms.TextInput(attrs={'class': 'imp-100'}))
    descripcion = forms.CharField(label=u'Descripción', max_length=200, required=False,
                                  widget=forms.TextInput(attrs={'class': 'imp-100'}))
    objetivo = forms.CharField(label=u'Objetivo', max_length=200, required=False,
                               widget=forms.Textarea(attrs={'class': 'imp-100', 'rows': '4'}))
    actualizarproducto = ExtFileField(label=u'Producto comunicacional', required=True,
                          help_text=u'Tamaño Maximo permitido 50Mb, en formato pdf, png, jpg o zip',
                          ext_whitelist=(".pdf",".png",".jpg",".zip",".jpeg"), max_upload_size=50485760)
    def camposnorequeridos(self):
        self.fields['nombre'].widget.attrs['readonly'] = True
        self.fields['descripcion'].widget.attrs['readonly'] = True
        self.fields['objetivo'].widget.attrs['readonly'] = True

class ReportePorProductoComunicacionalForm(forms.Form):
    tipo = forms.ChoiceField(label=u"Tipo de solicitud", choices=TIPO_PRODUCTOCOMUNICACIONAL, required=False,
                             widget=forms.Select(attrs={'class': 'imp-100'}))

class PeriodoActulizacionForm(forms.Form):
    fechainicio = forms.DateField(label=u"Fecha inicio", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    fechafin = forms.DateField(label=u"Fecha Fin", initial=datetime.now().date(), required=True, input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}))
    observacion = forms.CharField(label=u'Descripcion', required=True, widget=forms.Textarea(attrs={'rows': '3', 'cols': '20', 'controlwidth': '100%'}))


class MatriculaSedeExamenForm(forms.Form):
    sede = forms.ModelChoiceField(label=u"Sede", queryset=SedeVirtual.objects.filter(status=True, activa=True), widget=forms.Select(attrs={'class': 'imp-100', 'style': 'width:100%'}))
    detallemodeloevaluativo = forms.ModelChoiceField(label=u"Examen", queryset=DetalleModeloEvaluativo.objects.filter(status=True, alternativa__id__in=[20, 21,30,31], modelo__status=True), widget=forms.Select(attrs={'class': 'imp-100', 'style': 'width:100%'}))

    def examen(self, modeloevaluativos):
        self.fields['detallemodeloevaluativo'].queryset = DetalleModeloEvaluativo.objects.filter(modelo_id__in=modeloevaluativos, status=True, alternativa__id__in=[20, 21,30,31], modelo__status=True)

class ActaGraduadosForm(FormModeloBase):
    acta = forms.ChoiceField(label=u"Acta", choices=TIPO_ACTAGRADUADO, required=False, widget=forms.Select(attrs={'formwidth': '50%'}))
    archivo = ExtFileField(label=u'Archivo acta', required=True, help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf', ext_whitelist=(".pdf",), max_upload_size=26214400)

    def sololectura(self):
        self.fields['acta'].widget.attrs['readonly'] = True
        self.fields['acta'].widget.attrs['disabled'] = True



class CorregirSolicitudForm(forms.Form):
    observaciones = forms.CharField(label=u'Observaciones', widget=forms.Textarea(attrs={'rows': '3'}), required=False)


class InscripcionTitulacionForm(FormModeloBase):
    participantetitulacion = forms.ModelChoiceField(label=u"Matricula", queryset=MatriculaTitulacion.objects.filter(alternativa__grupotitulacion__periodogrupo__abierto=True,estado=1,status=True), required=True, widget=forms.Select({'col': '9'}))


class FirmarActaAprobacionCoordinacionForm(forms.Form):
    tipo = forms.ChoiceField(label=u"Firmado por", choices=TIPO_FIRMA_ACTA_COMPLEXIVO_POSGRADO, required=True, widget=forms.Select(attrs={'class': 'imp-100'}))

class AsignacionResponsableForm(forms.Form):
    persona = forms.IntegerField(initial=0, required=True, label=u'Responsable',widget=forms.Select(attrs={'select2search': 'true', 'formwidth': '75%','controlwidth': '100%'}))
    orden = forms.IntegerField(initial=1, required=True,label=u'Orden de firma', widget=forms.NumberInput(attrs={'class': 'input-number','decimal': '0','formwidth': '25%', 'controlwidth': '100%'}))

class SubirActaForm(forms.Form):
    archivo_final = ExtFileField(label=u'Subir archivo con firma electrónica', required=True,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=4194304)

class ValidarActaForm(FormModeloBase):
    estado=forms.ChoiceField(label=u'Estado',choices=ESTADO_SEGUIMIENTO[1:],required=True, widget=forms.Select({}))
    observacion = forms.CharField(label=u'Observacion', max_length=10000, widget=forms.Textarea({'row': '2', 'class': 'validate[required]'}))


class DocumentoBecaTipoConfiguracionForm(forms.Form):
    tipo = forms.ModelChoiceField(label=u"Tipo documento", queryset=TipoArchivo.objects.filter(status=True), required=True, widget=forms.Select(attrs={'class': 'imp-100'}))
    numero = forms.IntegerField(label="Número", required=True, widget=forms.NumberInput(attrs={'class': 'imp-100'}))
    obligatorio = forms.BooleanField(label=u'Es obligatorio?', required=False, widget=CheckboxInput())
    visible = forms.BooleanField(label=u'Es visible?', required=False, widget=CheckboxInput())
    funcionejecutar = forms.ChoiceField(label=u'Función a Ejecutar',
                                        choices=[(chfun[0], chfun[1][0]) for chfun in FUNCIONES_DOCUMENTOSBECAS_EJECUTAR],
                                        required=False,
                                        widget=forms.Select(attrs={'class': 'imp-100'}))


    def __init__(self, *args, **kwargs):
        super(DocumentoBecaTipoConfiguracionForm, self).__init__(*args, **kwargs)
        listado = self.fields['funcionejecutar'].choices
        listado.insert(0, ('', '---------'))
        self.fields['funcionejecutar'].choices = listado

class InsigniaForm(FormModeloBase):
    titulo = forms.CharField(label=u'Título',required=True, widget=forms.TextInput({'col':'12'}))
    descripcion = forms.CharField(label=u'Descripción', required=True, widget=forms.Textarea({'col':'12','rows':'2'}))
    nombrecorto = forms.CharField(label=u'Nombre corto', required=True, widget=forms.TextInput({'col': '12'}))
    categoria = forms.ModelChoiceField(label=u'Categoría', queryset=CategoriaInsignia.objects.filter(status=True),required=True, widget=forms.Select({'col': '6'}))
    tipoinsignia = forms.ChoiceField(label=u'Tipo', choices=TIPO_INSIGNIA,required=True, widget=forms.Select({'col': '6'}))
    modelo = ExtFileField(label=u'Subir imagen de la insignia', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato png,jpg,jpeg', ext_whitelist=(".jpeg",".png",".jpg"),
                           max_upload_size=4194304,widget=forms.FileInput(attrs={'formwidth': '100%', 'class': 'dropify','col':'6'}))
    vigente = forms.BooleanField(label=u'Vigente?', required=False, widget=forms.CheckboxInput(attrs={'col': '6'}))

    def addarbol(self):
        self.fields['categoria'].widget.attrs['readonly'] = True

class AdicionarPreBecadoForm(FormModeloBase):
    persona = forms.ModelChoiceField(label=u"Estudiante", queryset=Persona.objects.select_related().filter(status=True).order_by('apellido1'), required=True, widget=forms.Select({'col': '12',}))
    becatipo = forms.ModelChoiceField(label=u"Tipo Beca", queryset=BecaTipo.objects.filter(status=True, vigente=True), required=True, widget=forms.Select(attrs={'class': 'imp-100'}))
    observacion = forms.CharField(label=u'Observacion', required=True, widget=forms.TextInput({'col': '12'}))


class CategoriaInsigniaForm(FormModeloBase):
    descripcion = forms.CharField(label=u'Descripción', required=True, widget=forms.TextInput({'col': '12'}))
    parent = forms.IntegerField(label=u'Nivel',initial=0, required=False,widget=forms.TextInput(attrs={'col': '6', 'decimal': '0','onKeyPress': "return soloNumerosValor(event)"}))
    categoriaref = forms.ModelChoiceField(label=u'Categoria',queryset=CategoriaInsignia.objects.filter(status=True),required=False, widget=forms.Select({'col': '6'}))

class InsigniaPersonaForm(FormModeloBase):
    insignia = forms.ModelChoiceField(label=u'Insginia',queryset=Insignia.objects.filter(status=True),required=True, widget=forms.Select({'col': '6'}))
    fechaobtencion = forms.DateField(label=u"F. Obtención", required=True, widget=DateTimeInput({'col': '6'}))
    persona = forms.ModelChoiceField(label=u"Persona", queryset=Persona.objects.select_related().filter(status=True).order_by('apellido1'), required=True, widget=forms.Select({'col': '12',}))


class FiltroBecadoValidacionForm(forms.Form):
    becatipo = forms.ModelChoiceField(label=u"Tipo Beca", queryset=BecaTipo.objects.filter(status=True, vigente=True), required=False, widget=forms.Select(attrs={'class': 'imp-100'}))
    estadodocumentofilter = forms.ChoiceField(label=u'Estado documento',
                                        choices=ESTADO_REVISION_ARCHIVO,
                                        required=False,
                                        widget=forms.Select(attrs={'class': 'imp-100'}))
    estadodocumentoasignar = forms.ChoiceField(label=u'Estado documento asignar',
                                               choices=(('', '---------'),(2, 'Validado'), (3, 'Rechazado')),
                                               required=False,
                                               widget=forms.Select(attrs={'class': 'imp-100'}))

    observaciones = forms.CharField(label=u'Observaciones', max_length=300, widget=forms.Textarea({'formwidth': '170%', 'rows': '2'}))


    def __init__(self, *args, **kwargs):
        super(FiltroBecadoValidacionForm, self).__init__(*args, **kwargs)
        listado = self.fields['estadodocumentofilter'].choices
        listado[0] = ('', 'TODOS')
        self.fields['estadodocumentofilter'].choices = listado

class RegistroEstudianteForm(FormModeloBase):
    persona = forms.ModelChoiceField(queryset=Persona.objects.select_related().filter(status=True,), required=True, label=u'Persona', widget=forms.Select())
    inscripcion = forms.ModelChoiceField(queryset=Inscripcion.objects.select_related().filter(status=True,), required=True, label=u'Carrera', widget=forms.Select())
    tiporegistro = forms.ChoiceField(label=u'Tipo registro', required=True,initial=1, choices=TIPO_REGISTRO_CRAI, widget=forms.Select())
    profesor = forms.ModelChoiceField(queryset=Profesor.objects.select_related().filter(status=True,), required=True, label=u'Profesor', widget=forms.Select())
    tiposerviciocrai = forms.ModelChoiceField(label=u'Tipo servicio',queryset=TipoServicioCrai.objects.filter(status=True), required=True,widget=forms.Select(attrs={'col':'6'}))
    cubiculo = forms.ModelChoiceField(queryset=CubiculoCrai.objects.select_related().filter(status=True, activo=True), required=False, label=u'Cubículo', widget=forms.Select(attrs={'col':'6'}))
    libro = forms.ModelChoiceField(queryset=LibroKohaProgramaAnaliticoAsignatura.objects.select_related().filter(status=True,), required=False, label=u'Libro a consultar', widget=forms.Select())
    actividad = forms.CharField(label=u'Actividad:', widget=forms.Textarea(attrs={'rows': '3'}), required=False)

    def cargar(self):
        self.fields['inscripcion'].queryset=Inscripcion.objects.none()
        self.fields['persona'].queryset=Persona.objects.none()
        self.fields['profesor'].queryset=Profesor.objects.none()
        self.fields['libro'].queryset=LibroKohaProgramaAnaliticoAsignatura.objects.none()
        # self.fields['cubiculo'].queryset=CubiculoCrai.objects.none()

class RegistroDocenteAdministrativoForm(FormModeloBase):
    funcionario = forms.ModelChoiceField(queryset=DistributivoPersona.objects.select_related().filter(status=True,), required=True, label=u'Funcionario', widget=forms.Select())
    tiposerviciocrai = forms.ModelChoiceField(queryset=TipoServicioCrai.objects.select_related().filter(status=True,id__in=[1,8]), required=True, label=u'Tipo de servicio', widget=forms.Select(attrs={'col':'6'}))
    cubiculo = forms.ModelChoiceField(queryset=CubiculoCrai.objects.select_related().filter(status=True, activo=True), required=False, label=u'Cubículo', widget=forms.Select(attrs={'col':'6'}))
    horasalida = forms.TimeField(label=u'Hora estimada de salida', required=False, widget=forms.TimeInput(attrs={'col':'12'}))
    actividad = forms.CharField(label=u'Actividad', widget=forms.Textarea(attrs={'rows': '3'}), required=False)

    def cargar(self):
        self.fields['funcionario'].queryset = DistributivoPersona.objects.none()

    def clean(self):
        cleaned_data = super().clean()
        hoy = datetime.now()
        persona = cleaned_data.get('funcionario').persona
        tiposerviciocrai = cleaned_data.get('tiposerviciocrai')
        if tiposerviciocrai.id == 8:
            salida = cleaned_data.get('horasalida')
            hora=hoy.time()
            cubiculo = cleaned_data.get('cubiculo')
            if salida < hora:
                self.add_error('horasalida', 'El tiempo de salida tiene que ser mayor a la hora actual')
            else:
                tiempoestadia = (datetime.combine(datetime.min, salida) - timedelta(hours=hora.hour, minutes=hora.minute, seconds=hora.second)).time()
                if cubiculo.tiempo < tiempoestadia:
                    self.add_error('horasalida', f'El tiempo de salida supera el tiempo permitido por el cubículo')
            ingreso=RegistrarIngresoCrai.objects.filter(status=True, persona=persona, fecha=hoy.date(), tiposerviciocrai=tiposerviciocrai, inscripcion__isnull=True)
            if ingreso.exists():
                self.add_error('funcionario', 'Usuario ya se registro anteriormente en el dia de hoy para el uso de un cubículo')
        return cleaned_data

class RegistroExternoForm(FormModeloBase):
    persona = forms.ModelChoiceField(queryset=Persona.objects.select_related().filter(status=True,), required=True, label=u'Persona', widget=forms.Select())
    tiporegistro = forms.ChoiceField(label=u'Tipo registro', required=True,initial=1, choices=TIPO_REGISTRO_CRAI, widget=forms.Select())
    profesor = forms.ModelChoiceField(queryset=Profesor.objects.select_related().filter(status=True,), required=True, label=u'Profesor', widget=forms.Select())
    # tiposerviciocrai = forms.ModelChoiceField(label=u'Tipo servicio',queryset=TipoServicioCrai.objects.filter(status=True), required=True,widget=forms.Select())

    def cargar(self):
        self.fields['persona'].queryset=Persona.objects.none()
        self.fields['profesor'].queryset=Profesor.objects.none()


class SolicitudTraspasoActivoForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha", required=False, initial=datetime.now().date(), input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y',
                                                 attrs={'class': 'form-control', 'col': '12'}))
    # tiposolicitud = forms.ChoiceField(choices=TIPO_SOLICITUD_TRASPASO_BAJA, required=False, label=u'Tipo Solicitud',
    #                                   widget=forms.Select(
    #                                       attrs={'class': 'form-control', 'col': '12'}))
    # oficio = forms.CharField(required=False, label=u'Oficio',
    #                          widget=forms.TextInput(attrs={'class': 'form-control', 'col': '12'}))
    # fechaoficio = forms.DateField(label=u"Fecha Oficio/Email", required=False, initial=datetime.now().date(),
    #                               input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y',
    #                                                                                attrs={'class': 'form-control', 'col': '12'}))
    ubicacionbienentrega = forms.IntegerField(initial=0, required=True, label=u'Ubicación entrega', widget=forms.TextInput(attrs={'class': 'form-control', 'col': '12','select2search': 'true', 'separator': 'true'}))
    usuariobienentrega = forms.IntegerField(initial=0, required=True, label=u'Usuario entrega', widget=forms.TextInput(attrs={'class': 'form-control', 'col': '12','select2search': 'true'}))
    custodiobienentrega = forms.IntegerField(initial=0, required=True, label=u'Custodio entrega', widget=forms.TextInput(attrs={'class': 'form-control', 'col': '12','select2search': 'true'}))
    ubicacionbienrecibe = forms.ModelChoiceField(Ubicacion.objects.all(), required=False, label=u'Ubicación recibe',
                                                 widget=forms.Select(attrs={'class': 'form-control', 'col': '12', 'separator': 'true'}))
    usuariobienrecibe = forms.ModelChoiceField(Persona.objects.filter(
        Q(perfilusuario__administrativo__isnull=False) | Q(perfilusuario__profesor__isnull=False)).distinct(),
                                               required=False, label=u'Usuario recibe',
                                               widget=forms.Select(attrs={'class': 'form-control', 'col': '12'}))
    custodiobienrecibe = forms.ModelChoiceField(Persona.objects.filter(
        Q(perfilusuario__administrativo__isnull=False) | Q(perfilusuario__profesor__isnull=False)).distinct(),
                                                required=False, label=u'Custodio Recibe',
                                                widget=forms.Select(attrs={'class': 'form-control', 'col': '12'}))
    observacion = forms.CharField(required=False, label=u'Observación', widget=forms.Textarea({'class': 'form-control', 'col': '12','rows': '2'}))


    def cargar_ubicacionbienentrega(self, ubicacionbienentrega):
        self.fields['ubicacionbienentrega'].widget.attrs['descripcion'] = ubicacionbienentrega
        self.fields['ubicacionbienentrega'].initial = ubicacionbienentrega.id
        self.fields['ubicacionbienentrega'].widget.attrs['value'] = ubicacionbienentrega.id
        self.fields['ubicacionbienentrega'].widget.attrs['disabled'] = True

    def cargar_usuariobienentrega(self, usuariobienentrega):
        self.fields['usuariobienentrega'].widget.attrs['descripcion'] = usuariobienentrega
        self.fields['usuariobienentrega'].initial = usuariobienentrega.id
        self.fields['usuariobienentrega'].widget.attrs['value'] = usuariobienentrega.id
        self.fields['usuariobienentrega'].widget.attrs['disabled'] = True


    def cargar_custodiobienentrega(self, custodiobienentrega):
        self.fields['custodiobienentrega'].widget.attrs['descripcion'] = custodiobienentrega
        self.fields['custodiobienentrega'].initial = custodiobienentrega.id
        self.fields['custodiobienentrega'].widget.attrs['value'] = custodiobienentrega.id
        self.fields['custodiobienentrega'].widget.attrs['disabled'] = True


    def cargar_ubicacionbienrecibe(self, ubicacionbienrecibe):
        self.fields['ubicacionbienrecibe'].widget.attrs['descripcion'] = ubicacionbienrecibe
        self.fields['ubicacionbienrecibe'].initial = ubicacionbienrecibe.id
        self.fields['ubicacionbienrecibe'].widget.attrs['value'] = ubicacionbienrecibe.id
        self.fields['ubicacionbienrecibe'].widget.attrs['disabled'] = True


    def cargar_usuariobienrecibe(self, usuariobienrecibe):
        self.fields['usuariobienrecibe'].widget.attrs['descripcion'] = usuariobienrecibe
        self.fields['usuariobienrecibe'].initial = usuariobienrecibe.id
        self.fields['usuariobienrecibe'].widget.attrs['value'] = usuariobienrecibe.id
        self.fields['usuariobienrecibe'].widget.attrs['disabled'] = True


    def cargar_custodiobienrecibe(self, custodiobienrecibe):
        self.fields['custodiobienrecibe'].widget.attrs['descripcion'] = custodiobienrecibe
        self.fields['custodiobienrecibe'].initial = custodiobienrecibe.id
        self.fields['custodiobienrecibe'].widget.attrs['value'] = custodiobienrecibe.id
        self.fields['custodiobienrecibe'].widget.attrs['disabled'] = True

ESTADOS_OFERTA_LABORAL = (
    (1, u'Aprobado'),
    (2, u'Rechazado'),
    (3, u'Corregir'),
)

class GestionarOfertaForm(FormModeloBase):
    estado = forms.ChoiceField(label=u'Estado de la oferta',
                                               choices=ESTADOS_OFERTA_LABORAL,
                                               required=True,
                                               widget=forms.Select(attrs={'class': 'imp-100'}))
    motivo = forms.CharField(label=u"Observacion", widget=forms.Textarea(attrs={'rows': '5'}), required=False)

    def gestionar(self, estado):
        if estado == 0:
            self.fields['estado'].choices = ESTADOS_OFERTA_LABORAL
        elif estado == 1:
            self.fields['estado'].choices =  ((2, u'Rechazado'), (3, u'Corregir'))
        elif estado == 2:
            self.fields['estado'].choices =  ((1, u'Aprobado'), (3, u'Corregir'))
        elif estado == 3:
            self.fields['estado'].choices =  ((1, u'Aprobado'), (2, u'Rechazado'))


class GestionarEmpresaForm(FormModeloBase):
    estado = forms.ChoiceField(label=u'Estado de la empresa',
                                               choices=((1, u'Aprobado'), (2, u'Rechazado')),
                                               required=True,
                                               widget=forms.Select(attrs={'class': 'imp-100'}))
    motivo = forms.CharField(label=u"Observacion", widget=forms.Textarea(attrs={'rows': '5'}), required=False)




class CabProcedimietoEvaForm(FormModeloBase):
    descripcion = forms.CharField(label=u'Descripción', required=True, widget=forms.TextInput({'col': '12'}))

class DetProcedimietoEvaForm(FormModeloBase):
    referente = forms.CharField(label=u'Referente', required=True, widget=forms.TextInput({'col': '12'}))
    porcentaje = forms.CharField(label=u'Porcentaje', required=True, widget=forms.TextInput({'col': '12'}))
    calificacion = forms.CharField(label=u'Calificacion', required=True, widget=forms.TextInput({'col': '12'}))
    descripcion = forms.CharField(label=u'Descripción', required=True, widget=forms.Textarea({'class': 'form-control', 'col': '12','rows': '2'}))
    articulo = forms.CharField(label=u'Articulo', required=False, widget=forms.Textarea({'class': 'form-control', 'col': '12','rows': '2'}))


class SolicitudProfesorCatedraForm(FormModeloBase):
    carrera = forms.ModelChoiceField(queryset=Carrera.objects.select_related().filter(status=True, ),
                                     required=True, label=u'Carrera',
                                     widget=forms.Select(attrs={'class': 'form-control', 'col': '12'}))
    descripcion = forms.CharField(label=u'Descripción', required=True, widget=forms.Textarea(attrs={'col':'2','rows': '2'} ))
    archivo = ExtFileField(label=u'Subir Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 10Mb, en formato pdf', ext_whitelist=(".pdf",),
                           max_upload_size=10485760, widget=FileInput(attrs={'accept': 'application/pdf', 'formwidth': '100%', 'data-allowed-file-extensions': 'pdf'}))

    def editar(self):
        #deshabilitar_campo(self, 'carrera')
        #self.fields['carrera'].required = False
        self.fields['archivo'].required = False

    def view(self):
        deshabilitar_campo(self, 'carrera')
        deshabilitar_campo(self, 'descripcion')
        deshabilitar_campo(self, 'archivo')

class GrupoCarreraForm(FormModeloBase):
    # si el combo se llena desde base modelchoicefield
    # si son pocos datos choicefield
    nombre = forms.CharField(label=u'Grupo Carrera', required=True, widget=forms.TextInput({'col': '6'}))
    status = forms.ChoiceField(label=u'Estado',
                                choices=((1, u'Activa'), (2, u'Inactiva')),
                                required = True,
                                widget = forms.Select(attrs={'class': 'imp-100', 'col': '6'})
                                )

class BannerMateriaForm(forms.Form):
    banner = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 4Mb, en formato jpg, png',
                           ext_whitelist=(".jpg",".png"), max_upload_size=4194304,
                           widget=FileInput({'accept': 'application/pdf, image/jpeg, image/jpg, image/png', 'class': 'dropify'}))

class InformeForm(forms.Form):
    archivoinforme = ExtFileField(label=u'Seleccione Archivo', required=True, help_text=u'Tamaño Maximo permitido 20Mb, en formato pdf',
                                  ext_whitelist=(".pdf"),
                                  max_upload_size=20971520,
                                  widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'pdf', 'class': 'dropify'}))

class JustificarInformeForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción de la justificación', required=True,  widget=forms.Textarea(attrs={'rows': '5'}), max_length=1000)
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False, help_text=u'Tamaño Máximo permitido 20Mb, en formato pdf',
                           ext_whitelist=(".pdf"), max_upload_size=20971520, widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'pdf', 'class': 'dropify'}))

class FirmaInformeMensualActividadesForm(forms.Form):
    persona = forms.ModelChoiceField(label=u" Persona Responsable: ", queryset=Persona.objects.none(), required=False, widget=forms.Select(attrs={'col': '6', 'style': 'width:100%', 'class': 'validate[required]'}))
    cargo = forms.ModelChoiceField(label=u" Cargo: ", queryset=DenominacionPuesto.objects.filter(status=True).order_by('-id'),required=False, widget=forms.Select(attrs={'col': '6', 'style': 'width:100%', 'class': 'validate[required]'}))
    responsabilidad = forms.CharField(label=u'Responsabilidad', required=False, widget=forms.TextInput(attrs={'class': 'form-control', 'col': '12', 'placeholder':'P. Ej. Validado por'}))

    def edit(self, pk):
        persona = Persona.objects.filter(pk=pk)
        self.fields['persona'].queryset = persona
        self.fields['persona'].initial = persona.first()



class TestSilaboSemanalAdmisionEditForm(forms.Form):
    nombretest = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '2', 'disabled': True}), required=False, )
    idtestmoodle = forms.IntegerField(label=u'Id Moodle', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-100', 'decimal': '0', 'formwidth': '100%'}))
    estado = forms.ModelChoiceField(Estado.objects.filter(status=True).order_by('order'), required=True, label=u'Estados', widget=forms.Select(attrs={'formwidth': '100%'}))
    url = forms.CharField(label=u'Url examen', required=True, widget=forms.TextInput({'col': '6'}))


class SolicitudInformacionPadronElectoralForm(FormModeloBase):
    tipo = forms.ModelChoiceField(label=u"Categoría", queryset=TipoSolicitudInformacionPadronElectoral.objects.filter(status=True).order_by('descripcion'), required=True, widget=forms.Select({'col': '12'}))
    # titulo = forms.CharField(label=u'Título', max_length=100, required=True, widget=forms.TextInput({'col': '12'}))
    observacion = forms.CharField(label=u"Observación", widget=forms.Textarea(attrs={'rows': '5'}), required=True)


class SedesElectoralesPersonaForm(FormModeloBase):
    sede = forms.ModelChoiceField(label=u"Sede Electoral", queryset=SedesElectoralesPeriodo.objects.filter(status=True, periodo__status=True, periodo__activo=True).order_by('canton__nombre'), required=True, widget=forms.Select({'col': '12'}))


class PersonaEnfermedadForm(forms.Form):
    estadoarchivo = forms.ChoiceField(label=u"Estado", choices=ESTADO_REVISION_ARCHIVO, required=True, widget=forms.Select(attrs={"formwidth": "span12"}))
    observacion = forms.CharField(label=u"Observacion", required=True, widget=forms.Textarea(attrs={"formwidth": "span12", 'rows': '5'}))

    def clean(self):
        cleaned_data = super(PersonaEnfermedadForm, self).clean()
        return cleaned_data


class EnfermedadForm(forms.Form):
    from med.models import TipoEnfermedad
    tipo = forms.ModelChoiceField(label=u"Tipo", queryset=TipoEnfermedad.objects.filter(status=True), required=True, widget=forms.Select({"formwidth": "span12"}))
    descripcion = forms.CharField(label=u'Descripción', required=True, widget=forms.TextInput({"formwidth": "span12"}))
    hereditaria = forms.BooleanField(initial=True, required=False, label=u'¿Es hereditaria?')

    def clean(self):
        cleaned_data = super(EnfermedadForm, self).clean()
        return cleaned_data

class TiposEnfermedadForm(forms.Form):
    descripcion = forms.CharField(label=u'Descripción', required=True, widget=forms.TextInput({"formwidth": "span12"}))

    def clean(self):
        cleaned_data = super(TiposEnfermedadForm, self).clean()
        return cleaned_data


class ParesInvestigacionVinculacionForm(FormModeloBase):
    persona = forms.ModelChoiceField(label=u"Persona", queryset=Persona.objects.none(), required=True, widget=forms.Select())
    tipo = forms.ChoiceField(label=u'Tipo de evaluación', choices=((2, u'Investigación'), (3, u'Vinculación')), required = True, widget = forms.Select(attrs={'class': 'imp-100', 'col': '12'}))
    activo = forms.BooleanField(initial=True, required=True, label=u'Activo')

    def edit(self, pk):
        self.fields['persona'].queryset = Persona.objects.filter(id=pk)
        self.fields['persona'].initial = [pk]


class CongresoXXISRRNetFormEN(FormModeloBase):
    congreso = forms.ModelChoiceField(label='Conference', queryset=Congreso.objects.filter(status=True,), required=True, widget=forms.Select(attrs={'col':'12', 'class':'select-custom'}))
    tipodocumento = forms.ChoiceField(label='Type of ID',initial=0, choices=[(1,'ID'),(2,'Passport')], widget=forms.Select(attrs={'col':'6'}))
    documento = forms.CharField(label='ID', required=True, max_length=15, widget=forms.TextInput(attrs={'col':'6','placeholder':'Enter identification number...','onKeyPress': "return validarTecla(event)"}))
    genero = forms.ChoiceField(label='Gender',initial=1, choices=[(1,'Female'),(2,'Male'),(3,'Others'),(4,'Prefer not to say'),], required=True, widget=forms.Select(attrs={'col':'6', 'class':'select-custom'}))
    pais = forms.ModelChoiceField(label='Country', queryset=Pais.objects.filter(status=True,), required=True, widget=forms.Select(attrs={'col':'6', 'class':'select-custom'}))
    # provincia = forms.ModelChoiceField(label='City', queryset=Provincia.objects.filter(status=True,), required=True, widget=forms.Select(attrs={'col':'6', 'class':'select-custom'}))
    # nombres = forms.CharField(label='Names', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Enter your name(s)...'}))
    apellido1 = forms.CharField(label="Names", required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Enter your last name...'}))
    # apellido2 = forms.CharField(label="Middle Name", required=False, widget=forms.TextInput(attrs={'col':'6','placeholder':'Enter your middle name...'}))
    telefono = forms.CharField(label='Cell number', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Enter contact cell number...'}))
    email = forms.CharField(label='Email', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Enter your contact email...'}))
    # orcid = forms.CharField(label='ORCID', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Enter your ORCID code...'}))
    nombreinstitucion = forms.CharField(label='Affiliation', required=False, widget=forms.TextInput(attrs={'col':'12','placeholder':'Enter the name of your institution...'}))
    documentoinstitucion = ExtFileField(label=u'Affiliation Certificates', required=False,
                                        help_text=u'If you are a PhD student, upload your institutional certificate to compete for a scholarship/sponsor at your fee. The maximum size allowed is 10 MB and the format allowed is pdf, jpg, jpeg, png.',
                                        ext_whitelist=(".jpg", ".pdf", ".jpeg", ".png"), max_upload_size=10485760, widget=FileInput({'accept':' image/jpeg, image/jpg, image/png, application/pdf'}))
    tipoparticipante = forms.ModelChoiceField(label='Attendees', queryset=TipoParticipacionCongreso.objects.filter(status=True,), required=True, widget=forms.Select(attrs={'col':'12', 'class':'select-custom'}))


class CongresoXXISRRNetFormES(FormModeloBase):
    congreso = forms.ModelChoiceField(label='Congreso', queryset=Congreso.objects.filter(status=True,), required=True, widget=forms.Select(attrs={'col':'12', 'class':'select-custom'}))
    tipodocumento = forms.ChoiceField(label='Tipo de documentación',initial=0, choices=[(1,'Cédula/ID'),(2,'Pasaporte/Passport')], widget=forms.Select(attrs={'col':'6'}))
    documento = forms.CharField(label='Identificación', required=True, max_length=15, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese número de cédula...','onKeyPress': "return validarTecla(event)"}))
    genero = forms.ChoiceField(label='Seleccione géneror',initial=1, choices=[(1,'Mujer/Female'),(2,'Hombre/Male'),(3,'Otro/Others'),(4,'Prefiero no decir/Prefer not to say'),], required=True, widget=forms.Select(attrs={'col':'6', 'class':'select-custom'}))
    pais = forms.ModelChoiceField(label='Pais', queryset=Pais.objects.filter(status=True,), required=True, widget=forms.Select(attrs={'col':'6', 'class':'select-custom'}))
    provincia = forms.ModelChoiceField(label='Provincia', queryset=Provincia.objects.filter(status=True,), required=True, widget=forms.Select(attrs={'col':'6', 'class':'select-custom'}))
    nombres = forms.CharField(label='Nombres', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese su(s) nombre(s)...'}))
    apellido1 = forms.CharField(label="Apellido Paterno", required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese su apellido paterno...'}))
    apellido2 = forms.CharField(label="Apellido Materno", required=False, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese su apellido materno...'}))
    telefono = forms.CharField(label='Teléfono', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese teléfono de contacto...'}))
    email = forms.CharField(label='Correo electrónico', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese su correo de contacto...'}))
    # orcid = forms.CharField(label='ORCID', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese el código de su ORCID...'}))
    nombreinstitucion = forms.CharField(label='Institución', required=False, widget=forms.TextInput(attrs={'col':'12','placeholder':'Ingrese el nombre de su institución...'}))
    documentoinstitucion = ExtFileField(label=u'Certificado institucional', required=False,
                                        help_text=u'If you are a PhD student, upload your institutional certificate to compete for a scholarship/sponsor at your fee. The maximum size allowed is 10 MB and the format allowed is pdf, jpg, jpeg, png.',
                                        ext_whitelist=(".jpg", ".pdf", ".jpeg", ".png"), max_upload_size=10485760, widget=FileInput({'accept':' image/jpeg, image/jpg, image/png, application/pdf'}))
    tipoparticipante = forms.ModelChoiceField(label='Tipo de participación', queryset=TipoParticipacionCongreso.objects.filter(status=True,), required=True, widget=forms.Select(attrs={'col':'12', 'class':'select-custom'}))


class InscripTuristicoForm(FormModeloBase):
    congreso = forms.ModelChoiceField(label='Congreso', queryset=Congreso.objects.filter(status=True, id=20), initial=Congreso.objects.filter(status=True, id=20), required=True, widget=forms.Select(attrs={'col':'12', 'class':'select-custom'}))
    tipodocumento = forms.ChoiceField(label='Seleccionar tipo de documentación',initial=0, choices=[(1,'Cédula'),(2,'Pasaporte')], widget=forms.Select(attrs={'col':'6'}))
    documento = forms.CharField(label='Identificación',max_length=15, required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese identificación...','onKeyPress': "return validarTecla(event)"}))
    genero = forms.ChoiceField(label='Seleccione género',initial=1, choices=[(1,'Mujer'),(2,'Hombre'),], required=True, widget=forms.Select(attrs={'col':'6', 'class':'select-custom'}))
    pais = forms.ModelChoiceField(label='Pais', queryset=Pais.objects.filter(status=True,), required=True, widget=forms.Select(attrs={'col':'6',}))
    nombres = forms.CharField(label='Nombres', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese su(s) nombre(s)...'}))
    apellido1 = forms.CharField(label='Apellido Paterno', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese su apellido paterno...'}))
    apellido2 = forms.CharField(label='Apellido Materno', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese su apellido materno...'}))
    telefono = forms.CharField(label='Teléfono', required=True, widget=forms.TextInput(attrs={'col':'6','placeholder':'Ingrese teléfono de contacto...'}))
    email = forms.CharField(label='Correo electrónico', required=True, widget=forms.TextInput(attrs={'col':'12','placeholder':'Ingrese su correo de contacto...'}))
    nombreinstitucion = forms.CharField(label='Nombre de Institución', required=True, widget=forms.TextInput(attrs={'col':'12','placeholder':'Ingrese nombre de institución...'}))
    deseacertificado = forms.BooleanField(label=u'El congreso es gratuito, en el caso de que usted requiera certificado tiene un costo, para continuar dar clic aquí', initial=False, required=False,
                                          widget=forms.CheckboxInput(attrs={'col': '6', }))
    tipoparticipante = forms.ModelChoiceField(label='Escoja el tipo de participación',
                                              queryset=TipoParticipacionCongreso.objects.filter(status=True, ),
                                              required=True,
                                              widget=forms.Select(attrs={'col': '6', 'class': 'select-custom'}))


class InventarioLaboratorioEquipoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    cantidad = forms.IntegerField(label=u'Cantidad', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    estadoinventario = forms.ChoiceField(label=u'Estado', choices=ESTADO_INVENTARIO, widget=forms.Select(attrs={'class': 'imp-50'}))
    vigente = forms.BooleanField(label=u"Vigente", required=False, initial=False)


class InventarioLaboratorioInsumoForm(forms.Form):
    nombre = forms.CharField(label=u'Nombre', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    observacion = forms.CharField(label=u'Observación', widget=forms.Textarea(attrs={'rows': '3'}), required=True)
    cantidad = forms.IntegerField(label=u'Cantidad', initial=0, required=False, widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0'}))
    vigente = forms.BooleanField(label=u"Vigente", required=False, initial=False)


class ReporteEstudianteEgresadoInglesForm(forms.Form):
    fecha = forms.DateField(label=u"Fecha desde",
                            initial=datetime.now().date() - timedelta(days=365 * 5),
                            required=True,
                            input_formats=['%d-%m-%Y'],
                            widget=DateTimeInput(format='%d-%m-%Y',
                                                 attrs={'class': '', 'formwidth': 'span6', 'pattern': "\d{2}-\d{2}-\d{4}"})
                            )
    # hasta = forms.DateField(label=u"Fecha hasta",
    #                         initial=datetime.now().date(),
    #                         required=True,
    #                         input_formats=['%d-%m-%Y'],
    #                         widget=DateTimeInput(format='%d-%m-%Y',
    #                                              attrs={'class': '', 'formwidth': 'span6', 'pattern': "\d{2}-\d{2}-\d{4}"})
    #                         )
    coordinacion = forms.ModelChoiceField(label=u'Facultad',
                                          queryset=Coordinacion.objects.filter(status=True, pk__in=[1,2,3,4,5]),
                                          required=True,
                                          widget=forms.SelectMultiple(attrs={'formwidth': 'span12'})
                                          )

    # supervisor = forms.ModelChoiceField(label=u'Supervisor', queryset=Persona.objects.filter(
    #     Q(perfilusuario__administrativo__isnull=False) | Q(perfilusuario__profesor__isnull=False)).distinct().none(),
    #                                     required=False, widget=forms.Select(attrs={'col': '12'}))

    # def edit(self, supervisor):
    #     if supervisor:
    #         self.fields['supervisor'].queryset = Persona.objects.filter(pk=supervisor)
    #         self.fields['supervisor'].initial = [supervisor]



class TipoDocumentoTutoriaPosgradoTitulacionForm(FormModeloBase):
    choices = [(value, label) for value, label in TIPO_ARCHIVO_PORSGRADO if value in (7, 8, 9)]
    tipo = forms.ChoiceField(choices=choices, required=False, label=u'tipo documento', widget=forms.Select())
    orden = forms.FloatField(label=mark_safe(u"<strong>Orden</strong>"), initial="0", widget=forms.TextInput(attrs={'class': 'imp-numbersmall', 'decimal': '0', 'formwidth': '50%'}))


class MasivoInscripcionVinculacionForm(FormModeloBase):
    archivo = ExtFileField(label=u'Seleccione Archivo', required=False,
                           help_text=u'Tamaño Maximo permitido 16Mb, en formato excel', ext_whitelist=(".xlsx",".xls"),
                           max_upload_size=16291456, widget=forms.FileInput(attrs={'formwidth': '100%', 'data-allowed-file-extensions': 'xlsx, xls'}))




class EncuestaTitulacionPosgradoForm(forms.Form):
    periodo = forms.ModelChoiceField(label=u"Periodo", queryset=Periodo.objects.filter(status=True), required=True, widget=forms.Select())
    convocatoria = forms.ModelMultipleChoiceField(label=u"Convocatoria", queryset=ConfiguracionTitulacionPosgrado.objects.filter(status=True), widget=forms.SelectMultiple(attrs={'class': 'imp-100 select-multiple-field', 'formwidth': '100%', 'multiple': "multiple"}))
    inicio = forms.DateField(label=u"Fecha inicio ", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    fin = forms.DateField(label=u"Fecha fin", input_formats=['%d-%m-%Y'], widget=DateTimeInput(format='%d-%m-%Y', attrs={'class': 'selectorfecha', 'formwidth': '50%'}), required=False)
    activo = forms.BooleanField(initial=False, required=False, label=u'Activo')

    def cargar_convocatorias(self,id):
        ePeriodo = Periodo.objects.get(pk=id)
        eConfiguracionTitulacionPosgrado = ConfiguracionTitulacionPosgrado.objects.filter(status=True, periodo=ePeriodo)
        self.fields['convocatoria'].queryset = eConfiguracionTitulacionPosgrado

    def cargar_periodo(self,id):
        ePeriodo = Periodo.objects.filter(pk=id)
        self.fields['periodo'].queryset = ePeriodo

    def adicionar_campo(self,field,initial):
        self.fields[field].initial = initial


class EncuestaTitulacionPosgradoGeneralForm(forms.Form):
    descripcion = forms.CharField(widget=forms.Textarea, label=u"Detalle")
    inicio = forms.DateField(label=u"Fecha Inicio horario", initial=datetime.now().date(), required=False,widget=DateTimeInput(  attrs={'class': 'form-control', 'autocomplete': 'off', 'col': '6', 'type': 'date'}))
    fin = forms.DateField(label=u"Fecha Fin horario", initial=datetime.now().date(), required=False, widget=DateTimeInput( attrs={'class': 'form-control', 'autocomplete': 'off', 'col': '6', 'type': 'date'}))
    activo = forms.BooleanField(initial=False, required=False, label=u'Activo')
